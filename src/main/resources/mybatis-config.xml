<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!-- 外部 properties 配置文件  -->
    <properties resource="db.properties"/>

    <!--  settings包含很多重要的设置项，setting:用来设置每一个设置项。name：设置项名，value：设置项取值 -->
    <settings>
        <!-- 开启全局二级缓存 -->
        <setting name="cacheEnabled" value="true"/>
        <!-- 本地(一级)缓存作用域，默认 SESSION，会缓存一个会话(SqlSession)中执行的所有查询。 设置为 STATEMENT，会话仅作用在语句执行上，对 SqlSession 的调用将不会共享数据，可认为是禁用一级缓存 -->
        <setting name="localCacheScope" value="SESSION"/>
        <!-- 控制台打印SQL -->
        <setting name="logImpl" value="STDOUT_LOGGING" />
    </settings>

    <!-- typeAliases：别名处理器：可以为我们的java类型起别名,别名不区分大小写 -->
    <typeAliases>
        <!-- typeAlias:为某个java类型起别名,type:指定要起别名的类型全类名;默认别名就是类名小写,alias:指定新的别名 -->
        <!--<typeAlias type="com.bean.MyUser" alias="myUser"/>-->
        <!-- package:为某个包下的所有类批量起别名,name：指定包名,为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写） -->
        <package name="example.mapper"/>
        <!-- 批量起别名的情况下，可以在 Bean 上使用 @Alias 注解为某个类指定新的别名 -->
    </typeAliases>

    <!-- environments：环境配置,default 指定使用某种环境
            environment：配置一个具体的环境信息；必须有两个标签；id代表当前环境的唯一标识
                transactionManager：事务管理器
                type：事务管理器的类型 JDBC(JdbcTransactionFactory) | MANAGED(ManagedTransactionFactory)自定义事务管理器：实现 TransactionFactory 接口,type 为全类名
                dataSource：数据源
                    type:数据源类型 UNPOOLED(UnpooledDataSourceFactory) | POOLED(PooledDataSourceFactory)| JNDI(JndiDataSourceFactory)
                    自定义数据源：实现 DataSourceFactory 接口，type 为全类名
        配置注册类：org.apache.ibatis.session.Configuration -->
    <environments default="development-1">
        <environment id="development-1">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.user}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据库厂商起别名 -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>

    <!-- mappers：将 SQL 映射文件注册到全局配置中 -->
    <mappers>
        <!-- 引用类路径下的 SQL 映射文件 -->
<!--        <mapper resource="test/xml/DeptMapper.xml"/>-->
        <mapper resource="example/mapper/MyMapper.xml"/>


        <!-- 引用网路路径或者磁盘路径下的sql映射文件 -->
        <!--<mapper url="file:///var/mappers/AuthorMapper.xml"/>-->

        <!-- 引用 Class 接口注册,没有 SQL 映射文件，所有的 SQL 都是利用注解写在接口上 -->
        <!--<mapper class="com.dao.MyUserMapperAnnotation"/>-->
        <mapper class="example.mapper.EmployeeMapper"/>
        <mapper class="example.mapper.MyMapper"/>

        <!-- 批量注册,有 SQL 映射文件,映射文件名必须和接口同名，并且放在与接口同一目录下 -->
<!--         <package name="example/mapper/MyMapper.xml"/>-->
    </mappers>
</configuration>