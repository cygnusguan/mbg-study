 This requires us to traverse
      all of the elements in GF, find their multiplicative inverses,
      and apply to each the following affine transformation:

      bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^
            b(i + 7) mod 8 ^ ci
      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the
      ith bit of a byte c with the value {63} or {01100011}.

      It is possible to traverse every possible value in a Galois field
      using what is referred to as a 'generator'. There are many
      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully
      traverse GF we iterate 255 times, multiplying by our generator
      each time.

      On each iteration we can determine the multiplicative inverse for
      the current element.

      Suppose there is an element in GF 'e'. For a given generator 'g',
      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns
      out that if use the inverse of a generator as another generator
      it will produce all of the corresponding multiplicative inverses
      at the same time. For this reason, we choose 5 as our inverse
      generator because it only requires 2 multiplies and 1 add and its
      inverse, 82, requires relatively few operations as well.

      In order to apply the affine transformation, the multiplicative
      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a
      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and
      'x'. Then 's' is left shifted and the high bit of 's' is made the
      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd
      with 's' and stored in 'x'. On each subsequent iteration the same
      operation is performed. When 4 iterations are complete, 'x' is
      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.
      For example:

      s = 01000001
      x = 01000001

      iteration 1: s = 10000010, x ^= s
      iteration 2: s = 00000101, x ^= s
      iteration 3: s = 00001010, x ^= s
      iteration 4: s = 00010100, x ^= s
      x ^= 0x63

      This can be done with a loop where s = (s << 1) | (s >> 7). However,
      it can also be done by using a single 16-bit (in this case 32-bit)
      number 'sx'. Since XOR is an associative operation, we can set 'sx'
      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.
      The most significant bits will flow into the high 8 bit positions
      and be correctly XOR'd with one another. All that remains will be
      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits
      afterwards.

      At the same time we're populating sbox and isbox we can precompute
      the multiplication we'll need to do to do MixColumns() later.
    */

    // apply affine transformation
    sx = ei ^ (ei << 1) ^ (ei << 2) ^ (ei << 3) ^ (ei << 4);
    sx = (sx >> 8) ^ (sx & 255) ^ 0x63;

    // update tables
    sbox[e] = sx;
    isbox[sx] = e;

    /* Mixing columns is done using matrix multiplication. The columns
      that are to be mixed are each a single word in the current state.
      The state has Nb columns (4 columns). Therefore each column is a
      4 byte word. So to mix the columns in a single column 'c' where
      its rows are r0, r1, r2, and r3, we use the following matrix
      multiplication:

      [2 3 1 1]*[r0,c]=[r'0,c]
      [1 2 3 1] [r1,c] [r'1,c]
      [1 1 2 3] [r2,c] [r'2,c]
      [3 1 1 2] [r3,c] [r'3,c]

      r0, r1, r2, and r3 are each 1 byte of one of the words in the
      state (a column). To do matrix multiplication for each mixed
      column c' we multiply the corresponding row from the left matrix
      with the corresponding column from the right matrix. In total, we
      get 4 equations:

      r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c
      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c
      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c
      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c

      As usual, the multiplication is as previously defined and the
      addition is XOR. In order to optimize mixing columns we can store
      the multiplication results in tables. If you think of the whole
      column as a word (it might help to visualize by mentally rotating
      the equations above by counterclockwise 90 degrees) then you can
      see that it would be useful to map the multiplications performed on
      each byte (r0, r1, r2, r3) onto a word as well. For instance, we
      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the
      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two
      respectively in the middle). This means that a table can be
      constructed that uses r0 as an index to the word. We can do the
      same with r1, r2, and r3, creating a total of 4 tables.

      To construct a full c', we can just look up each byte of c in
      their respective tables and XOR the results together.

      Also, to build each table we only have to calculate the word
      for 2,1,1,3 for every byte ... which we can do on each iteration
      of this loop since we will iterate over every byte. After we have
      calculated 2,1,1,3 we can get the results for the other tables
      by cycling the byte at the end to the beginning. For instance
      we can take the result of table 2,1,1,3 and produce table 3,2,1,1
      by moving the right most byte to the left most position just like
      how you can imagine the 3 moved out of 2,1,1,3 and to the front
      to produce 3,2,1,1.

      There is another optimization in that the same multiples of
      the current element we need in order to advance our generator
      to the next iteration can be reused in performing the 2,1,1,3
      calculation. We also calculate the inverse mix column tables,
      with e,9,d,b being the inverse of 2,1,1,3.

      When we're done, and we need to actually mix columns, the first
      byte of each state word should be put through mix[0] (2,1,1,3),
      the second through mix[1] (3,2,1,1) and so forth. Then they should
      be XOR'd together to produce the fully mixed column.
    */

    // calculate mix and imix table values
    sx2 = xtime[sx];
    e2 = xtime[e];
    e4 = xtime[e2];
    e8 = xtime[e4];
    me =
      (sx2 << 24) ^  // 2
      (sx << 16) ^   // 1
      (sx << 8) ^    // 1
      (sx ^ sx2);    // 3
    ime =
      (e2 ^ e4 ^ e8) << 24 ^  // E (14)
      (e ^ e8) << 16 ^        // 9
      (e ^ e4 ^ e8) << 8 ^    // D (13)
      (e ^ e2 ^ e8);          // B (11)
    // produce each of the mix tables by rotating the 2,1,1,3 value
    for(var n = 0; n < 4; ++n) {
      mix[n][e] = me;
      imix[n][sx] = ime;
      // cycle the right most byte to the left most position
      // ie: 2,1,1,3 becomes 3,2,1,1
      me = me << 24 | me >>> 8;
      ime = ime << 24 | ime >>> 8;
    }

    // get next element and inverse
    if(e === 0) {
      // 1 is the inverse of 1
      e = ei = 1;
    } else {
      // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)
      // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)
      e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];
      ei ^= xtime[xtime[ei]];
    }
  }
}

/**
 * Generates a key schedule using the AES key expansion algorithm.
 *
 * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion
 * routine to generate a key schedule. The Key Expansion generates a total
 * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,
 * and each of the Nr rounds requires Nb words of key data. The resulting
 * key schedule consists of a linear array of 4-byte words, denoted [wi ],
 * with i in the range 0 <= i < Nb(Nr + 1).
 *
 * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)
 * AES-128 (Nb=4, Nk=4, Nr=10)
 * AES-192 (Nb=4, Nk=6, Nr=12)
 * AES-256 (Nb=4, Nk=8, Nr=14)
 * Note: Nr=Nk+6.
 *
 * Nb is the number of columns (32-bit words) comprising the State (or
 * number of bytes in a block). For AES, Nb=4.
 *
 * @param key the key to schedule (as an array of 32-bit words).
 * @param decrypt true to modify the key schedule to decrypt, false not to.
 *
 * @return the generated key schedule.
 */
function _expandKey(key, decrypt) {
  // copy the key's words to initialize the key schedule
  var w = key.slice(0);

  /* RotWord() will rotate a word, moving the first byte to the last
    byte's position (shifting the other bytes left).

    We will be getting the value of Rcon at i / Nk. 'i' will iterate
    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in
    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from
    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will
    increase by 1. We use a counter iNk to keep track of this.
   */

  // go through the rounds expanding the key
  var temp, iNk = 1;
  var Nk = w.length;
  var Nr1 = Nk + 6 + 1;
  var end = Nb * Nr1;
  for(var i = Nk; i < end; ++i) {
    temp = w[i - 1];
    if(i % Nk === 0) {
      // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]
      temp =
        sbox[temp >>> 16 & 255] << 24 ^
        sbox[temp >>> 8 & 255] << 16 ^
        sbox[temp & 255] << 8 ^
        sbox[temp >>> 24] ^ (rcon[iNk] << 24);
      iNk++;
    } else if(Nk > 6 && (i % Nk === 4)) {
      // temp = SubWord(temp)
      temp =
        sbox[temp >>> 24] << 24 ^
        sbox[temp >>> 16 & 255] << 16 ^
        sbox[temp >>> 8 & 255] << 8 ^
        sbox[temp & 255];
    }
    w[i] = w[i - Nk] ^ temp;
  }

  /* When we are updating a cipher block we always use the code path for
     encryption whether we are decrypting or not (to shorten code and
     simplify the generation of look up tables). However, because there
     are differences in the decryption algorithm, other than just swapping
     in different look up tables, we must transform our key schedule to
     account for these changes:

     1. The decryption algorithm gets its key rounds in reverse order.
     2. The decryption algorithm adds the round key before mixing columns
       instead of afterwards.

     We don't need to modify our key schedule to handle the first case,
     we can just traverse the key schedule in reverse order when decrypting.

     The second case requires a little work.

     The tables we built for performing rounds will take an input and then
     perform SubBytes() and MixColumns() or, for the decrypt version,
     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires
     us to AddRoundKey() before InvMixColumns(). This means we'll need to
     apply some transformations to the round key to inverse-mix its columns
     so they'll be correct for moving AddRoundKey() to after the state has
     had its columns inverse-mixed.

     To inverse-mix the columns of the state when we're decrypting we use a
     lookup table that will apply InvSubBytes() and InvMixColumns() at the
     same time. However, the round key's bytes are not inverse-substituted
     in the decryption algorithm. To get around this problem, we can first
     substitute the bytes in the round key so that when we apply the
     transformation via the InvSubBytes()+InvMixColumns() table, it will
     undo our substitution leaving us with the original value that we
     want -- and then inverse-mix that value.

     This change will correctly alter our key schedule so that we can XOR
     each round key with our already transformed decryption state. This
     allows us to use the same code path as the encryption algorithm.

     We make one more change to the decryption key. Since the decryption
     algorithm runs in reverse from the encryption algorithm, we reverse
     the order of the round keys to avoid having to iterate over the key
     schedule backwards when running the encryption algorithm later in
     decryption mode. In addition to reversing the order of the round keys,
     we also swap each round key's 2nd and 4th rows. See the comments
     section where rounds are performed for more details about why this is
     done. These changes are done inline with the other substitution
     described above.
  */
  if(decrypt) {
    var tmp;
    var m0 = imix[0];
    var m1 = imix[1];
    var m2 = imix[2];
    var m3 = imix[3];
    var wnew = w.slice(0);
    end = w.length;
    for(var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {
      // do not sub the first or last round key (round keys are Nb
      // words) as no column mixing is performed before they are added,
      // but do change the key order
      if(i === 0 || i === (end - Nb)) {
        wnew[i] = w[wi];
        wnew[i + 1] = w[wi + 3];
        wnew[i + 2] = w[wi + 2];
        wnew[i + 3] = w[wi + 1];
      } else {
        // substitute each round key byte because the inverse-mix
        // table will inverse-substitute it (effectively cancel the
        // substitution because round key bytes aren't sub'd in
        // decryption mode) and swap indexes 3 and 1
        for(var n = 0; n < Nb; ++n) {
          tmp = w[wi + n];
          wnew[i + (3&-n)] =
            m0[sbox[tmp >>> 24]] ^
            m1[sbox[tmp >>> 16 & 255]] ^
            m2[sbox[tmp >>> 8 & 255]] ^
            m3[sbox[tmp & 255]];
        }
      }
    }
    w = wnew;
  }

  return w;
}

/**
 * Updates a single block (16 bytes) using AES. The update will either
 * encrypt or decrypt the block.
 *
 * @param w the key schedule.
 * @param input the input block (an array of 32-bit words).
 * @param output the updated output block.
 * @param decrypt true to decrypt the block, false to encrypt it.
 */
function _updateBlock(w, input, output, decrypt) {
  /*
  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[0, Nb-1])
    for round = 1 step 1 to Nr-1
      SubBytes(state)
      ShiftRows(state)
      MixColumns(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
    end for
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    out = state
  end

  InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    for round = Nr-1 step -1 downto 1
      InvShiftRows(state)
      InvSubBytes(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
      InvMixColumns(state)
    end for
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
    out = state
  end
  */

  // Encrypt: AddRoundKey(state, w[0, Nb-1])
  // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
  var Nr = w.length / 4 - 1;
  var m0, m1, m2, m3, sub;
  if(decrypt) {
    m0 = imix[0];
    m1 = imix[1];
    m2 = imix[2];
    m3 = imix[3];
    sub = isbox;
  } else {
    m0 = mix[0];
    m1 = mix[1];
    m2 = mix[2];
    m3 = mix[3];
    sub = sbox;
  }
  var a, b, c, d, a2, b2, c2;
  a = input[0] ^ w[0];
  b = input[decrypt ? 3 : 1] ^ w[1];
  c = input[2] ^ w[2];
  d = input[decrypt ? 1 : 3] ^ w[3];
  var i = 3;

  /* In order to share code we follow the encryption algorithm when both
    encrypting and decrypting. To account for the changes required in the
    decryption algorithm, we use different lookup tables when decrypting
    and use a modified key schedule to account for the difference in the
    order of transformations applied when performing rounds. We also get
    key rounds in reverse order (relative to encryption). */
  for(var round = 1; round < Nr; ++round) {
    /* As described above, we'll be using table lookups to perform the
      column mixing. Each column is stored as a word in the state (the
      array 'input' has one column as a word at each index). In order to
      mix a column, we perform these transformations on each row in c,
      which is 1 byte in each word. The new column for c0 is c'0:

               m0      m1      m2      m3
      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0
      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0
      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0
      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0

      So using mix tables where c0 is a word with r0 being its upper
      8 bits and r3 being its lower 8 bits:

      m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]
      ...
      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]

      Therefore to mix the columns in each word in the state we
      do the following (& 255 omitted for brevity):
      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]

      However, before mixing, the algorithm requires us to perform
      ShiftRows(). The ShiftRows() transformation cyclically shifts the
      last 3 rows of the state over different offsets. The first row
      (r = 0) is not shifted.

      s'_r,c = s_r,(c + shift(r, Nb) mod Nb
      for 0 < r < 4 and 0 <= c < Nb and
      shift(1, 4) = 1
      shift(2, 4) = 2
      shift(3, 4) = 3.

      This causes the first byte in r = 1 to be moved to the end of
      the row, the first 2 bytes in r = 2 to be moved to the end of
      the row, the first 3 bytes in r = 3 to be moved to the end of
      the row:

      r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]
      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]
      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]

      We can make these substitutions inline with our column mixing to
      generate an updated set of equations to produce each word in the
      state (note the columns have changed positions):

      c0 c1 c2 c3 => c0 c1 c2 c3
      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)
      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)
      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)

      Therefore:

      c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3
      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3

      c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0
      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0

      ... and so forth for c'2 and c'3. The important distinction is
      that the columns are cycling, with c0 being used with the m0
      map when calculating c0, but c1 being used with the m0 map when
      calculating c1 ... and so forth.

      When performing the inverse we transform the mirror image and
      skip the bottom row, instead of the top one, and move upwards:

      c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption
      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)
      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption
      c3 c2 c1 c0    c3 c2 c1 c0

      If you compare the resulting matrices for ShiftRows()+MixColumns()
      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are
      different (in encrypt mode vs. decrypt mode). So in order to use
      the same code to handle both encryption and decryption, we will
      need to do some mapping.

      If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be
      a row number in the state, then the resulting matrix in encryption
      mode for applying the above transformations would be:

      r1: a b c d
      r2: b c d a
      r3: c d a b
      r4: d a b c

      If we did the same in decryption mode we would get:

      r1: a d c b
      r2: b a d c
      r3: c b a d
      r4: d c b a

      If instead we swap d and b (set b=c3 and d=c1), then we get:

      r1: a b c d
      r2: d a b c
      r3: c d a b
      r4: b c d a

      Now the 1st and 3rd rows are the same as the encryption matrix. All
      we need to do then to make the mapping exactly the same is to swap
      the 2nd and 4th rows when in decryption mode. To do this without
      having to do it on each iteration, we swapped the 2nd and 4th rows
      in the decryption key schedule. We also have to do the swap above
      when we first pull in the input and when we set the final output. */
    a2 =
      m0[a >>> 24] ^
      m1[b >>> 16 & 255] ^
      m2[c >>> 8 & 255] ^
      m3[d & 255] ^ w[++i];
    b2 =
      m0[b >>> 24] ^
      m1[c >>> 16 & 255] ^
      m2[d >>> 8 & 255] ^
      m3[a & 255] ^ w[++i];
    c2 =
      m0[c >>> 24] ^
      m1[d >>> 16 & 255] ^
      m2[a >>> 8 & 255] ^
      m3[b & 255] ^ w[++i];
    d =
      m0[d >>> 24] ^
      m1[a >>> 16 & 255] ^
      m2[b >>> 8 & 255] ^
      m3[c & 255] ^ w[++i];
    a = a2;
    b = b2;
    c = c2;
  }

  /*
    Encrypt:
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])

    Decrypt:
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
   */
  // Note: rows are shifted inline
  output[0] =
    (sub[a >>> 24] << 24) ^
    (sub[b >>> 16 & 255] << 16) ^
    (sub[c >>> 8 & 255] << 8) ^
    (sub[d & 255]) ^ w[++i];
  output[decrypt ? 3 : 1] =
    (sub[b >>> 24] << 24) ^
    (sub[c >>> 16 & 255] << 16) ^
    (sub[d >>> 8 & 255] << 8) ^
    (sub[a & 255]) ^ w[++i];
  output[2] =
    (sub[c >>> 24] << 24) ^
    (sub[d >>> 16 & 255] << 16) ^
    (sub[a >>> 8 & 255] << 8) ^
    (sub[b & 255]) ^ w[++i];
  output[decrypt ? 1 : 3] =
    (sub[d >>> 24] << 24) ^
    (sub[a >>> 16 & 255] << 16) ^
    (sub[b >>> 8 & 255] << 8) ^
    (sub[c & 255]) ^ w[++i];
}

/**
 * Deprecated. Instead, use:
 *
 * forge.cipher.createCipher('AES-<mode>', key);
 * forge.cipher.createDecipher('AES-<mode>', key);
 *
 * Creates a deprecated AES cipher object. This object's mode will default to
 * CBC (cipher-block-chaining).
 *
 * The key and iv may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param options the options to use.
 *          key the symmetric key to use.
 *          output the buffer to write to.
 *          decrypt true for decryption, false for encryption.
 *          mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
function _createCipher(options) {
  options = options || {};
  var mode = (options.mode || 'CBC').toUpperCase();
  var algorithm = 'AES-' + mode;

  var cipher;
  if(options.decrypt) {
    cipher = forge.cipher.createDecipher(algorithm, options.key);
  } else {
    cipher = forge.cipher.createCipher(algorithm, options.key);
  }

  // backwards compatible start API
  var start = cipher.start;
  cipher.start = function(iv, options) {
    // backwards compatibility: support second arg as output buffer
    var output = null;
    if(options instanceof forge.util.ByteBuffer) {
      output = options;
      options = {};
    }
    options = options || {};
    options.output = output;
    options.iv = iv;
    start.call(cipher, options);
  };

  return cipher;
}
/**
 * A Javascript implementation of AES Cipher Suites for TLS.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2015 Digital Bazaar, Inc.
 *
 */
var forge = require('./forge');
require('./aes');
require('./tls');

var tls = module.exports = forge.tls;

/**
 * Supported cipher suites.
 */
tls.CipherSuites['TLS_RSA_WITH_AES_128_CBC_SHA'] = {
  id: [0x00, 0x2f],
  name: 'TLS_RSA_WITH_AES_128_CBC_SHA',
  initSecurityParameters: function(sp) {
    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;
    sp.cipher_type = tls.CipherType.block;
    sp.enc_key_length = 16;
    sp.block_length = 16;
    sp.fixed_iv_length = 16;
    sp.record_iv_length = 16;
    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;
    sp.mac_length = 20;
    sp.mac_key_length = 20;
  },
  initConnectionState: initConnectionState
};
tls.CipherSuites['TLS_RSA_WITH_AES_256_CBC_SHA'] = {
  id: [0x00, 0x35],
  name: 'TLS_RSA_WITH_AES_256_CBC_SHA',
  initSecurityParameters: function(sp) {
    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;
    sp.cipher_type = tls.CipherType.block;
    sp.enc_key_length = 32;
    sp.block_length = 16;
    sp.fixed_iv_length = 16;
    sp.record_iv_length = 16;
    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;
    sp.mac_length = 20;
    sp.mac_key_length = 20;
  },
  initConnectionState: initConnectionState
};

function initConnectionState(state, c, sp) {
  var client = (c.entity === forge.tls.ConnectionEnd.client);

  // cipher setup
  state.read.cipherState = {
    init: false,
    cipher: forge.cipher.createDecipher('AES-CBC', client ?
      sp.keys.server_write_key : sp.keys.client_write_key),
    iv: client ? sp.keys.server_write_IV : sp.keys.client_write_IV
  };
  state.write.cipherState = {
    init: false,
    cipher: forge.cipher.createCipher('AES-CBC', client ?
      sp.keys.client_write_key : sp.keys.server_write_key),
    iv: client ? sp.keys.client_write_IV : sp.keys.server_write_IV
  };
  state.read.cipherFunction = decrypt_aes_cbc_sha1;
  state.write.cipherFunction = encrypt_aes_cbc_sha1;

  // MAC setup
  state.read.macLength = state.write.macLength = sp.mac_length;
  state.read.macFunction = state.write.macFunction = tls.hmac_sha1;
}

/**
 * Encrypts the TLSCompressed record into a TLSCipherText record using AES
 * in CBC mode.
 *
 * @param record the TLSCompressed record to encrypt.
 * @param s the ConnectionState to use.
 *
 * @return true on success, false on failure.
 */
function encrypt_aes_cbc_sha1(record, s) {
  var rval = false;

  // append MAC to fragment, update sequence number
  var mac = s.macFunction(s.macKey, s.sequenceNumber, record);
  record.fragment.putBytes(mac);
  s.updateSequenceNumber();

  // TLS 1.1+ use an explicit IV every time to protect against CBC attacks
  var iv;
  if(record.version.minor === tls.Versions.TLS_1_0.minor) {
    // use the pre-generated IV when initializing for TLS 1.0, otherwise use
    // the residue from the previous encryption
    iv = s.cipherState.init ? null : s.cipherState.iv;
  } else {
    iv = forge.random.getBytesSync(16);
  }

  s.cipherState.init = true;

  // start cipher
  var cipher = s.cipherState.cipher;
  cipher.start({iv: iv});

  // TLS 1.1+ write IV into output
  if(record.version.minor >= tls.Versions.TLS_1_1.minor) {
    cipher.output.putBytes(iv);
  }

  // do encryption (default padding is appropriate)
  cipher.update(record.fragment);
  if(cipher.finish(encrypt_aes_cbc_sha1_padding)) {
    // set record fragment to encrypted output
    record.fragment = cipher.output;
    record.length = record.fragment.length();
    rval = true;
  }

  return rval;
}

/**
 * Handles padding for aes_cbc_sha1 in encrypt mode.
 *
 * @param blockSize the block size.
 * @param input the input buffer.
 * @param decrypt true in decrypt mode, false in encrypt mode.
 *
 * @return true on success, false on failure.
 */
function encrypt_aes_cbc_sha1_padding(blockSize, input, decrypt) {
  /* The encrypted data length (TLSCiphertext.length) is one more than the sum
   of SecurityParameters.block_length, TLSCompressed.length,
   SecurityParameters.mac_length, and padding_length.

   The padding may be any length up to 255 bytes long, as long as it results in
   the TLSCiphertext.length being an integral multiple of the block length.
   Lengths longer than necessary might be desirable to frustrate attacks on a
   protocol based on analysis of the lengths of exchanged messages. Each uint8
   in the padding data vector must be filled with the padding length value.

   The padding length should be such that the total size of the
   GenericBlockCipher structure is a multiple of the cipher's block length.
   Legal values range from zero to 255, inclusive. This length specifies the
   length of the padding field exclusive of the padding_length field itself.

   This is slightly different from PKCS#7 because the padding value is 1
   less than the actual number of padding bytes if you include the
   padding_length uint8 itself as a padding byte. */
  if(!decrypt) {
    // get the number of padding bytes required to reach the blockSize and
    // subtract 1 for the padding value (to make room for the padding_length
    // uint8)
    var padding = blockSize - (input.length() % blockSize);
    input.fillWithByte(padding - 1, padding);
  }
  return true;
}

/**
 * Handles padding for aes_cbc_sha1 in decrypt mode.
 *
 * @param blockSize the block size.
 * @param output the output buffer.
 * @param decrypt true in decrypt mode, false in encrypt mode.
 *
 * @return true on success, false on failure.
 */
function decrypt_aes_cbc_sha1_padding(blockSize, output, decrypt) {
  var rval = true;
  if(decrypt) {
    /* The last byte in the output specifies the number of padding bytes not
      including itself. Each of the padding bytes has the same value as that
      last byte (known as the padding_length). Here we check all padding
      bytes to ensure they have the value of padding_length even if one of
      them is bad in order to ward-off timing attacks. */
    var len = output.length();
    var paddingLength = output.last();
    for(var i = len - 1 - paddingLength; i < len - 1; ++i) {
      rval = rval && (output.at(i) == paddingLength);
    }
    if(rval) {
      // trim off padding bytes and last padding length byte
      output.truncate(paddingLength + 1);
    }
  }
  return rval;
}

/**
 * Decrypts a TLSCipherText record into a TLSCompressed record using
 * AES in CBC mode.
 *
 * @param record the TLSCipherText record to decrypt.
 * @param s the ConnectionState to use.
 *
 * @return true on success, false on failure.
 */
function decrypt_aes_cbc_sha1(record, s) {
  var rval = false;

  var iv;
  if(record.version.minor === tls.Versions.TLS_1_0.minor) {
    // use pre-generated IV when initializing for TLS 1.0, otherwise use the
    // residue from the previous decryption
    iv = s.cipherState.init ? null : s.cipherState.iv;
  } else {
    // TLS 1.1+ use an explicit IV every time to protect against CBC attacks
    // that is appended to the record fragment
    iv = record.fragment.getBytes(16);
  }

  s.cipherState.init = true;

  // start cipher
  var cipher = s.cipherState.cipher;
  cipher.start({iv: iv});

  // do decryption
  cipher.update(record.fragment);
  rval = cipher.finish(decrypt_aes_cbc_sha1_padding);

  // even if decryption fails, keep going to minimize timing attacks

  // decrypted data:
  // first (len - 20) bytes = application data
  // last 20 bytes          = MAC
  var macLen = s.macLength;

  // create a random MAC to check against should the mac length check fail
  // Note: do this regardless of the failure to keep timing consistent
  var mac = forge.random.getBytesSync(macLen);

  // get fragment and mac
  var len = cipher.output.length();
  if(len >= macLen) {
    record.fragment = cipher.output.getBytes(len - macLen);
    mac = cipher.output.getBytes(macLen);
  } else {
    // bad data, but get bytes anyway to try to keep timing consistent
    record.fragment = cipher.output.getBytes();
  }
  record.fragment = forge.util.createBuffer(record.fragment);
  record.length = record.fragment.length();

  // see if data integrity checks out, update sequence number
  var mac2 = s.macFunction(s.macKey, s.sequenceNumber, record);
  s.updateSequenceNumber();
  rval = compareMacs(s.macKey, mac, mac2) && rval;
  return rval;
}

/**
 * Safely compare two MACs. This function will compare two MACs in a way
 * that protects against timing attacks.
 *
 * TODO: Expose elsewhere as a utility API.
 *
 * See: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/
 *
 * @param key the MAC key to use.
 * @param mac1 as a binary-encoded string of bytes.
 * @param mac2 as a binary-encoded string of bytes.
 *
 * @return true if the MACs are the same, false if not.
 */
function compareMacs(key, mac1, mac2) {
  var hmac = forge.hmac.create();

  hmac.start('SHA1', key);
  hmac.update(mac1);
  mac1 = hmac.digest().getBytes();

  hmac.start(null, null);
  hmac.update(mac2);
  mac2 = hmac.digest().getBytes();

  return mac1 === mac2;
}
/**
 * Copyright (c) 2019 Digital Bazaar, Inc.
 */

var forge = require('./forge');
require('./asn1');
var asn1 = forge.asn1;

exports.privateKeyValidator = {
  // PrivateKeyInfo
  name: 'PrivateKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    // Version (INTEGER)
    name: 'PrivateKeyInfo.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyVersion'
  }, {
    // privateKeyAlgorithm
    name: 'PrivateKeyInfo.privateKeyAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'privateKeyOid'
    }]
  }, {
    // PrivateKey
    name: 'PrivateKeyInfo',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'privateKey'
  }]
};

exports.publicKeyValidator = {
  name: 'SubjectPublicKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  captureAsn1: 'subjectPublicKeyInfo',
  value: [{
    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'publicKeyOid'
    }]
  },
  // capture group for ed25519PublicKey
  {
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.BITSTRING,
    constructed: false,
    composed: true,
    captureBitStringValue: 'ed25519PublicKey'
  }
  // FIXME: this is capture group for rsaPublicKey, use it in this API or
  // discard?
  /* {
    // subjectPublicKey
    name: 'SubjectPublicKeyInfo.subjectPublicKey',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.BITSTRING,
    constructed: false,
    value: [{
      // RSAPublicKey
      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      optional: true,
      captureAsn1: 'rsaPublicKey'
    }]
  } */
  ]
};
/**
 * Javascript implementation of Abstract Syntax Notation Number One.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 *
 * An API for storing data using the Abstract Syntax Notation Number One
 * format using DER (Distinguished Encoding Rules) encoding. This encoding is
 * commonly used to store data for PKI, i.e. X.509 Certificates, and this
 * implementation exists for that purpose.
 *
 * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract
 * syntax of information without restricting the way the information is encoded
 * for transmission. It provides a standard that allows for open systems
 * communication. ASN.1 defines the syntax of information data and a number of
 * simple data types as well as a notation for describing them and specifying
 * values for them.
 *
 * The RSA algorithm creates public and private keys that are often stored in
 * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This
 * class provides the most basic functionality required to store and load DSA
 * keys that are encoded according to ASN.1.
 *
 * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)
 * and DER (Distinguished Encoding Rules). DER is just a subset of BER that
 * has stricter requirements for how data must be encoded.
 *
 * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)
 * and a byte array for the value of this ASN1 structure which may be data or a
 * list of ASN.1 structures.
 *
 * Each ASN.1 structure using BER is (Tag-Length-Value):
 *
 * | byte 0 | bytes X | bytes Y |
 * |--------|---------|----------
 * |  tag   | length  |  value  |
 *
 * ASN.1 allows for tags to be of "High-tag-number form" which allows a tag to
 * be two or more octets, but that is not supported by this class. A tag is
 * only 1 byte. Bits 1-5 give the tag number (ie the data type within a
 * particular 'class'), 6 indicates whether or not the ASN.1 value is
 * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If
 * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,
 * then the class is APPLICATION. If only bit 8 is set, then the class is
 * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.
 * The tag numbers for the data types for the class UNIVERSAL are listed below:
 *
 * UNIVERSAL 0 Reserved for use by the encoding rules
 * UNIVERSAL 1 Boolean type
 * UNIVERSAL 2 Integer type
 * UNIVERSAL 3 Bitstring type
 * UNIVERSAL 4 Octetstring type
 * UNIVERSAL 5 Null type
 * UNIVERSAL 6 Object identifier type
 * UNIVERSAL 7 Object descriptor type
 * UNIVERSAL 8 External type and Instance-of type
 * UNIVERSAL 9 Real type
 * UNIVERSAL 10 Enumerated type
 * UNIVERSAL 11 Embedded-pdv type
 * UNIVERSAL 12 UTF8String type
 * UNIVERSAL 13 Relative object identifier type
 * UNIVERSAL 14-15 Reserved for future editions
 * UNIVERSAL 16 Sequence and Sequence-of types
 * UNIVERSAL 17 Set and Set-of types
 * UNIVERSAL 18-22, 25-30 Character string types
 * UNIVERSAL 23-24 Time types
 *
 * The length of an ASN.1 structure is specified after the tag identifier.
 * There is a definite form and an indefinite form. The indefinite form may
 * be used if the encoding is constructed and not all immediately available.
 * The indefinite form is encoded using a length byte with only the 8th bit
 * set. The end of the constructed object is marked using end-of-contents
 * octets (two zero bytes).
 *
 * The definite form looks like this:
 *
 * The length may take up 1 or more bytes, it depends on the length of the
 * value of the ASN.1 structure. DER encoding requires that if the ASN.1
 * structure has a value that has a length greater than 127, more than 1 byte
 * will be used to store its length, otherwise just one byte will be used.
 * This is strict.
 *
 * In the case that the length of the ASN.1 value is less than 127, 1 octet
 * (byte) is used to store the "short form" length. The 8th bit has a value of
 * 0 indicating the length is "short form" and not "long form" and bits 7-1
 * give the length of the data. (The 8th bit is the left-most, most significant
 * bit: also known as big endian or network format).
 *
 * In the case that the length of the ASN.1 value is greater than 127, 2 to
 * 127 octets (bytes) are used to store the "long form" length. The first
 * byte's 8th bit is set to 1 to indicate the length is "long form." Bits 7-1
 * give the number of additional octets. All following octets are in base 256
 * with the most significant digit first (typical big-endian binary unsigned
 * integer storage). So, for instance, if the length of a value was 257, the
 * first byte would be set to:
 *
 * 10000010 = 130 = 0x82.
 *
 * This indicates there are 2 octets (base 256) for the length. The second and
 * third bytes (the octets just mentioned) would store the length in base 256:
 *
 * octet 2: 00000001 = 1 * 256^1 = 256
 * octet 3: 00000001 = 1 * 256^0 = 1
 * total = 257
 *
 * The algorithm for converting a js integer value of 257 to base-256 is:
 *
 * var value = 257;
 * var bytes = [];
 * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first
 * bytes[1] = value & 0xFF;        // least significant byte last
 *
 * On the ASN.1 UNIVERSAL Object Identifier (OID) type:
 *
 * An OID can be written like: "value1.value2.value3...valueN"
 *
 * The DER encoding rules:
 *
 * The first byte has the value 40 * value1 + value2.
 * The following bytes, if any, encode the remaining values. Each value is
 * encoded in base 128, most significant digit first (big endian), with as
 * few digits as possible, and the most significant bit of each byte set
 * to 1 except the last in each value's encoding. For example: Given the
 * OID "1.2.840.113549", its DER encoding is (remember each byte except the
 * last one in each encoding is OR'd with 0x80):
 *
 * byte 1: 40 * 1 + 2 = 42 = 0x2A.
 * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648
 * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D
 *
 * The final value is: 0x2A864886F70D.
 * The full OID (including ASN.1 tag and length of 6 bytes) is:
 * 0x06062A864886F70D
 */
var forge = require('./forge');
require('./util');
require('./oids');

/* ASN.1 API */
var asn1 = module.exports = forge.asn1 = forge.asn1 || {};

/**
 * ASN.1 classes.
 */
asn1.Class = {
  UNIVERSAL:        0x00,
  APPLICATION:      0x40,
  CONTEXT_SPECIFIC: 0x80,
  PRIVATE:          0xC0
};

/**
 * ASN.1 types. Not all types are supported by this implementation, only
 * those necessary to implement a simple PKI are implemented.
 */
asn1.Type = {
  NONE:             0,
  BOOLEAN:          1,
  INTEGER:          2,
  BITSTRING:        3,
  OCTETSTRING:      4,
  NULL:             5,
  OID:              6,
  ODESC:            7,
  EXTERNAL:         8,
  REAL:             9,
  ENUMERATED:      10,
  EMBEDDED:        11,
  UTF8:            12,
  ROID:            13,
  SEQUENCE:        16,
  SET:             17,
  PRINTABLESTRING: 19,
  IA5STRING:       22,
  UTCTIME:         23,
  GENERALIZEDTIME: 24,
  BMPSTRING:       30
};

/**
 * Creates a new asn1 object.
 *
 * @param tagClass the tag class for the object.
 * @param type the data type (tag number) for the object.
 * @param constructed true if the asn1 object is in constructed form.
 * @param value the value for the object, if it is not constructed.
 * @param [options] the options to use:
 *          [bitStringContents] the plain BIT STRING content including padding
 *            byte.
 *
 * @return the asn1 object.
 */
asn1.create = function(tagClass, type, constructed, value, options) {
  /* An asn1 object has a tagClass, a type, a constructed flag, and a
    value. The value's type depends on the constructed flag. If
    constructed, it will contain a list of other asn1 objects. If not,
    it will contain the ASN.1 value as an array of bytes formatted
    according to the ASN.1 data type. */

  // remove undefined values
  if(forge.util.isArray(value)) {
    var tmp = [];
    for(var i = 0; i < value.length; ++i) {
      if(value[i] !== undefined) {
        tmp.push(value[i]);
      }
    }
    value = tmp;
  }

  var obj = {
    tagClass: tagClass,
    type: type,
    constructed: constructed,
    composed: constructed || forge.util.isArray(value),
    value: value
  };
  if(options && 'bitStringContents' in options) {
    // TODO: copy byte buffer if it's a buffer not a string
    obj.bitStringContents = options.bitStringContents;
    // TODO: add readonly flag to avoid this overhead
    // save copy to detect changes
    obj.original = asn1.copy(obj);
  }
  return obj;
};

/**
 * Copies an asn1 object.
 *
 * @param obj the asn1 object.
 * @param [options] copy options:
 *          [excludeBitStringContents] true to not copy bitStringContents
 *
 * @return the a copy of the asn1 object.
 */
asn1.copy = function(obj, options) {
  var copy;

  if(forge.util.isArray(obj)) {
    copy = [];
    for(var i = 0; i < obj.length; ++i) {
      copy.push(asn1.copy(obj[i], options));
    }
    return copy;
  }

  if(typeof obj === 'string') {
    // TODO: copy byte buffer if it's a buffer not a string
    return obj;
  }

  copy = {
    tagClass: obj.tagClass,
    type: obj.type,
    constructed: obj.constructed,
    composed: obj.composed,
    value: asn1.copy(obj.value, options)
  };
  if(options && !options.excludeBitStringContents) {
    // TODO: copy byte buffer if it's a buffer not a string
    copy.bitStringContents = obj.bitStringContents;
  }
  return copy;
};

/**
 * Compares asn1 objects for equality.
 *
 * Note this function does not run in constant time.
 *
 * @param obj1 the first asn1 object.
 * @param obj2 the second asn1 object.
 * @param [options] compare options:
 *          [includeBitStringContents] true to compare bitStringContents
 *
 * @return true if the asn1 objects are equal.
 */
asn1.equals = function(obj1, obj2, options) {
  if(forge.util.isArray(obj1)) {
    if(!forge.util.isArray(obj2)) {
      return false;
    }
    if(obj1.length !== obj2.length) {
      return false;
    }
    for(var i = 0; i < obj1.length; ++i) {
      if(!asn1.equals(obj1[i], obj2[i])) {
        return false;
      }
    }
    return true;
  }

  if(typeof obj1 !== typeof obj2) {
    return false;
  }

  if(typeof obj1 === 'string') {
    return obj1 === obj2;
  }

  var equal = obj1.tagClass === obj2.tagClass &&
    obj1.type === obj2.type &&
    obj1.constructed === obj2.constructed &&
    obj1.composed === obj2.composed &&
    asn1.equals(obj1.value, obj2.value);
  if(options && options.includeBitStringContents) {
    equal = equal && (obj1.bitStringContents === obj2.bitStringContents);
  }

  return equal;
};

/**
 * Gets the length of a BER-encoded ASN.1 value.
 *
 * In case the length is not specified, undefined is returned.
 *
 * @param b the BER-encoded ASN.1 byte buffer, starting with the first
 *          length byte.
 *
 * @return the length of the BER-encoded ASN.1 value or undefined.
 */
asn1.getBerValueLength = function(b) {
  // TODO: move this function and related DER/BER functions to a der.js
  // file; better abstract ASN.1 away from der/ber.
  var b2 = b.getByte();
  if(b2 === 0x80) {
    return undefined;
  }

  // see if the length is "short form" or "long form" (bit 8 set)
  var length;
  var longForm = b2 & 0x80;
  if(!longForm) {
    // length is just the first byte
    length = b2;
  } else {
    // the number of bytes the length is specified in bits 7 through 1
    // and each length byte is in big-endian base-256
    length = b.getInt((b2 & 0x7F) << 3);
  }
  return length;
};

/**
 * Check if the byte buffer has enough bytes. Throws an Error if not.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the bytes remaining in the current parsing state.
 * @param n the number of bytes the buffer must have.
 */
function _checkBufferLength(bytes, remaining, n) {
  if(n > remaining) {
    var error = new Error('Too few bytes to parse DER.');
    error.available = bytes.length();
    error.remaining = remaining;
    error.requested = n;
    throw error;
  }
}

/**
 * Gets the length of a BER-encoded ASN.1 value.
 *
 * In case the length is not specified, undefined is returned.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the bytes remaining in the current parsing state.
 *
 * @return the length of the BER-encoded ASN.1 value or undefined.
 */
var _getValueLength = function(bytes, remaining) {
  // TODO: move this function and related DER/BER functions to a der.js
  // file; better abstract ASN.1 away from der/ber.
  // fromDer already checked that this byte exists
  var b2 = bytes.getByte();
  remaining--;
  if(b2 === 0x80) {
    return undefined;
  }

  // see if the length is "short form" or "long form" (bit 8 set)
  var length;
  var longForm = b2 & 0x80;
  if(!longForm) {
    // length is just the first byte
    length = b2;
  } else {
    // the number of bytes the length is specified in bits 7 through 1
    // and each length byte is in big-endian base-256
    var longFormBytes = b2 & 0x7F;
    _checkBufferLength(bytes, remaining, longFormBytes);
    length = bytes.getInt(longFormBytes << 3);
  }
  // FIXME: this will only happen for 32 bit getInt with high bit set
  if(length < 0) {
    throw new Error('Negative length: ' + length);
  }
  return length;
};

/**
 * Parses an asn1 object from a byte buffer in DER format.
 *
 * @param bytes the byte buffer to parse from.
 * @param [strict] true to be strict when checking value lengths, false to
 *          allow truncated values (default: true).
 * @param [options] object with options or boolean strict flag
 *          [strict] true to be strict when checking value lengths, false to
 *            allow truncated values (default: true).
 *          [parseAllBytes] true to ensure all bytes are parsed
 *            (default: true)
 *          [decodeBitStrings] true to attempt to decode the content of
 *            BIT STRINGs (not OCTET STRINGs) using strict mode. Note that
 *            without schema support to understand the data context this can
 *            erroneously decode values that happen to be valid ASN.1. This
 *            flag will be deprecated or removed as soon as schema support is
 *            available. (default: true)
 *
 * @throws Will throw an error for various malformed input conditions.
 *
 * @return the parsed asn1 object.
 */
asn1.fromDer = function(bytes, options) {
  if(options === undefined) {
    options = {
      strict: true,
      parseAllBytes: true,
      decodeBitStrings: true
    };
  }
  if(typeof options === 'boolean') {
    options = {
      strict: options,
      parseAllBytes: true,
      decodeBitStrings: true
    };
  }
  if(!('strict' in options)) {
    options.strict = true;
  }
  if(!('parseAllBytes' in options)) {
    options.parseAllBytes = true;
  }
  if(!('decodeBitStrings' in options)) {
    options.decodeBitStrings = true;
  }

  // wrap in buffer if needed
  if(typeof bytes === 'string') {
    bytes = forge.util.createBuffer(bytes);
  }

  var byteCount = bytes.length();
  var value = _fromDer(bytes, bytes.length(), 0, options);
  if(options.parseAllBytes && bytes.length() !== 0) {
    var error = new Error('Unparsed DER bytes remain after ASN.1 parsing.');
    error.byteCount = byteCount;
    error.remaining = bytes.length();
    throw error;
  }
  return value;
};

/**
 * Internal function to parse an asn1 object from a byte buffer in DER format.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the number of bytes remaining for this chunk.
 * @param depth the current parsing depth.
 * @param options object with same options as fromDer().
 *
 * @return the parsed asn1 object.
 */
function _fromDer(bytes, remaining, depth, options) {
  // temporary storage for consumption calculations
  var start;

  // minimum length for ASN.1 DER structure is 2
  _checkBufferLength(bytes, remaining, 2);

  // get the first byte
  var b1 = bytes.getByte();
  // consumed one byte
  remaining--;

  // get the tag class
  var tagClass = (b1 & 0xC0);

  // get the type (bits 1-5)
  var type = b1 & 0x1F;

  // get the variable value length and adjust remaining bytes
  start = bytes.length();
  var length = _getValueLength(bytes, remaining);
  remaining -= start - bytes.length();

  // ensure there are enough bytes to get the value
  if(length !== undefined && length > remaining) {
    if(options.strict) {
      var error = new Error('Too few bytes to read ASN.1 value.');
      error.available = bytes.length();
      error.remaining = remaining;
      error.requested = length;
      throw error;
    }
    // Note: be lenient with truncated values and use remaining state bytes
    length = remaining;
  }

  // value storage
  var value;
  // possible BIT STRING contents storage
  var bitStringContents;

  // constructed flag is bit 6 (32 = 0x20) of the first byte
  var constructed = ((b1 & 0x20) === 0x20);
  if(constructed) {
    // parse child asn1 objects from the value
    value = [];
    if(length === undefined) {
      // asn1 object of indefinite length, read until end tag
      for(;;) {
        _checkBufferLength(bytes, remaining, 2);
        if(bytes.bytes(2) === String.fromCharCode(0, 0)) {
          bytes.getBytes(2);
          remaining -= 2;
          break;
        }
        start = bytes.length();
        value.push(_fromDer(bytes, remaining, depth + 1, options));
        remaining -= start - bytes.length();
      }
    } else {
      // parsing asn1 object of definite length
      while(length > 0) {
        start = bytes.length();
        value.push(_fromDer(bytes, length, depth + 1, options));
        remaining -= start - bytes.length();
        length -= start - bytes.length();
      }
    }
  }

  // if a BIT STRING, save the contents including padding
  if(value === undefined && tagClass === asn1.Class.UNIVERSAL &&
    type === asn1.Type.BITSTRING) {
    bitStringContents = bytes.bytes(length);
  }

  // determine if a non-constructed value should be decoded as a composed
  // value that contains other ASN.1 objects. BIT STRINGs (and OCTET STRINGs)
  // can be used this way.
  if(value === undefined && options.decodeBitStrings &&
    tagClass === asn1.Class.UNIVERSAL &&
    // FIXME: OCTET STRINGs not yet supported here
    // .. other parts of forge expect to decode OCTET STRINGs manually
    (type === asn1.Type.BITSTRING /*|| type === asn1.Type.OCTETSTRING*/) &&
    length > 1) {
    // save read position
    var savedRead = bytes.read;
    var savedRemaining = remaining;
    var unused = 0;
    if(type === asn1.Type.BITSTRING) {
      /* The first octet gives the number of bits by which the length of the
        bit string is less than the next multiple of eight (this is called
        the "number of unused bits").

        The second and following octets give the value of the bit string
        converted to an octet string. */
      _checkBufferLength(bytes, remaining, 1);
      unused = bytes.getByte();
      remaining--;
    }
    // if all bits are used, maybe the BIT/OCTET STRING holds ASN.1 objs
    if(unused === 0) {
      try {
        // attempt to parse child asn1 object from the value
        // (stored in array to signal composed value)
        start = bytes.length();
        var subOptions = {
          // enforce strict mode to avoid parsing ASN.1 from plain data
          strict: true,
          decodeBitStrings: true
        };
        var composed = _fromDer(bytes, remaining, depth + 1, subOptions);
        var used = start - bytes.length();
        remaining -= used;
        if(type == asn1.Type.BITSTRING) {
          used++;
        }

        // if the data all decoded and the class indicates UNIVERSAL or
        // CONTEXT_SPECIFIC then assume we've got an encapsulated ASN.1 object
        var tc = composed.tagClass;
        if(used === length &&
          (tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC)) {
          value = [composed];
        }
      } catch(ex) {
      }
    }
    if(value === undefined) {
      // restore read position
      bytes.read = savedRead;
      remaining = savedRemaining;
    }
  }

  if(value === undefined) {
    // asn1 not constructed or composed, get raw value
    // TODO: do DER to OID conversion and vice-versa in .toDer?

    if(length === undefined) {
      if(options.strict) {
        throw new Error('Non-constructed ASN.1 object of indefinite length.');
      }
      // be lenient and use remaining state bytes
      length = remaining;
    }

    if(type === asn1.Type.BMPSTRING) {
      value = '';
      for(; length > 0; length -= 2) {
        _checkBufferLength(bytes, remaining, 2);
        value += String.fromCharCode(bytes.getInt16());
        remaining -= 2;
      }
    } else {
      value = bytes.getBytes(length);
      remaining -= length;
    }
  }

  // add BIT STRING contents if available
  var asn1Options = bitStringContents === undefined ? null : {
    bitStringContents: bitStringContents
  };

  // create and return asn1 object
  return asn1.create(tagClass, type, constructed, value, asn1Options);
}

/**
 * Converts the given asn1 object to a buffer of bytes in DER format.
 *
 * @param asn1 the asn1 object to convert to bytes.
 *
 * @return the buffer of bytes.
 */
asn1.toDer = function(obj) {
  var bytes = forge.util.createBuffer();

  // build the first byte
  var b1 = obj.tagClass | obj.type;

  // for storing the ASN.1 value
  var value = forge.util.createBuffer();

  // use BIT STRING contents if available and data not changed
  var useBitStringContents = false;
  if('bitStringContents' in obj) {
    useBitStringContents = true;
    if(obj.original) {
      useBitStringContents = asn1.equals(obj, obj.original);
    }
  }

  if(useBitStringContents) {
    value.putBytes(obj.bitStringContents);
  } else if(obj.composed) {
    // if composed, use each child asn1 object's DER bytes as value
    // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed
    // from other asn1 objects
    if(obj.constructed) {
      b1 |= 0x20;
    } else {
      // type is a bit string, add unused bits of 0x00
      value.putByte(0x00);
    }

    // add all of the child DER bytes together
    for(var i = 0; i < obj.value.length; ++i) {
      if(obj.value[i] !== undefined) {
        value.putBuffer(asn1.toDer(obj.value[i]));
      }
    }
  } else {
    // use asn1.value directly
    if(obj.type === asn1.Type.BMPSTRING) {
      for(var i = 0; i < obj.value.length; ++i) {
        value.putInt16(obj.value.charCodeAt(i));
      }
    } else {
      // ensure integer is minimally-encoded
      // TODO: should all leading bytes be stripped vs just one?
      // .. ex '00 00 01' => '01'?
      if(obj.type === asn1.Type.INTEGER &&
        obj.value.length > 1 &&
        // leading 0x00 for positive integer
        ((obj.value.charCodeAt(0) === 0 &&
        (obj.value.charCodeAt(1) & 0x80) === 0) ||
        // leading 0xFF for negative integer
        (obj.value.charCodeAt(0) === 0xFF &&
        (obj.value.charCodeAt(1) & 0x80) === 0x80))) {
        value.putBytes(obj.value.substr(1));
      } else {
        value.putBytes(obj.value);
      }
    }
  }

  // add tag byte
  bytes.putByte(b1);

  // use "short form" encoding
  if(value.length() <= 127) {
    // one byte describes the length
    // bit 8 = 0 and bits 7-1 = length
    bytes.putByte(value.length() & 0x7F);
  } else {
    // use "long form" encoding
    // 2 to 127 bytes describe the length
    // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes
    // other bytes: length in base 256, big-endian
    var len = value.length();
    var lenBytes = '';
    do {
      lenBytes += String.fromCharCode(len & 0xFF);
      len = len >>> 8;
    } while(len > 0);

    // set first byte to # bytes used to store the length and turn on
    // bit 8 to indicate long-form length is used
    bytes.putByte(lenBytes.length | 0x80);

    // concatenate length bytes in reverse since they were generated
    // little endian and we need big endian
    for(var i = lenBytes.length - 1; i >= 0; --i) {
      bytes.putByte(lenBytes.charCodeAt(i));
    }
  }

  // concatenate value bytes
  bytes.putBuffer(value);
  return bytes;
};

/**
 * Converts an OID dot-separated string to a byte buffer. The byte buffer
 * contains only the DER-encoded value, not any tag or length bytes.
 *
 * @param oid the OID dot-separated string.
 *
 * @return the byte buffer.
 */
asn1.oidToDer = function(oid) {
  // split OID into individual values
  var values = oid.split('.');
  var bytes = forge.util.createBuffer();

  // first byte is 40 * value1 + value2
  bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));
  // other bytes are each value in base 128 with 8th bit set except for
  // the last byte for each value
  var last, valueBytes, value, b;
  for(var i = 2; i < values.length; ++i) {
    // produce value bytes in reverse because we don't know how many
    // bytes it will take to store the value
    last = true;
    valueBytes = [];
    value = parseInt(values[i], 10);
    do {
      b = value & 0x7F;
      value = value >>> 7;
      // if value is not last, then turn on 8th bit
      if(!last) {
        b |= 0x80;
      }
      valueBytes.push(b);
      last = false;
    } while(value > 0);

    // add value bytes in reverse (needs to be in big endian)
    for(var n = valueBytes.length - 1; n >= 0; --n) {
      bytes.putByte(valueBytes[n]);
    }
  }

  return bytes;
};

/**
 * Converts a DER-encoded byte buffer to an OID dot-separated string. The
 * byte buffer should contain only the DER-encoded value, not any tag or
 * length bytes.
 *
 * @param bytes the byte buffer.
 *
 * @return the OID dot-separated string.
 */
asn1.derToOid = function(bytes) {
  var oid;

  // wrap in buffer if needed
  if(typeof bytes === 'string') {
    bytes = forge.util.createBuffer(bytes);
  }

  // first byte is 40 * value1 + value2
  var b = bytes.getByte();
  oid = Math.floor(b / 40) + '.' + (b % 40);

  // other bytes are each value in base 128 with 8th bit set except for
  // the last byte for each value
  var value = 0;
  while(bytes.length() > 0) {
    b = bytes.getByte();
    value = value << 7;
    // not the last byte for the value
    if(b & 0x80) {
      value += b & 0x7F;
    } else {
      // last byte
      oid += '.' + (value + b);
      value = 0;
    }
  }

  return oid;
};

/**
 * Converts a UTCTime value to a date.
 *
 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
 * dates past 2049. Parsing that structure hasn't been implemented yet.
 *
 * @param utc the UTCTime value to convert.
 *
 * @return the date.
 */
asn1.utcTimeToDate = function(utc) {
  /* The following formats can be used:

    YYMMDDhhmmZ
    YYMMDDhhmm+hh'mm'
    YYMMDDhhmm-hh'mm'
    YYMMDDhhmmssZ
    YYMMDDhhmmss+hh'mm'
    YYMMDDhhmmss-hh'mm'

    Where:

    YY is the least significant two digits of the year
    MM is the month (01 to 12)
    DD is the day (01 to 31)
    hh is the hour (00 to 23)
    mm are the minutes (00 to 59)
    ss are the seconds (00 to 59)
    Z indicates that local time is GMT, + indicates that local time is
    later than GMT, and - indicates that local time is earlier than GMT
    hh' is the absolute value of the offset from GMT in hours
    mm' is the absolute value of the offset from GMT in minutes */
  var date = new Date();

  // if YY >= 50 use 19xx, if YY < 50 use 20xx
  var year = parseInt(utc.substr(0, 2), 10);
  year = (year >= 50) ? 1900 + year : 2000 + year;
  var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month
  var DD = parseInt(utc.substr(4, 2), 10);
  var hh = parseInt(utc.substr(6, 2), 10);
  var mm = parseInt(utc.substr(8, 2), 10);
  var ss = 0;

  // not just YYMMDDhhmmZ
  if(utc.length > 11) {
    // get character after minutes
    var c = utc.charAt(10);
    var end = 10;

    // see if seconds are present
    if(c !== '+' && c !== '-') {
      // get seconds
      ss = parseInt(utc.substr(10, 2), 10);
      end += 2;
    }
  }

  // update date
  date.setUTCFullYear(year, MM, DD);
  date.setUTCHours(hh, mm, ss, 0);

  if(end) {
    // get +/- after end of time
    c = utc.charAt(end);
    if(c === '+' || c === '-') {
      // get hours+minutes offset
      var hhoffset = parseInt(utc.substr(end + 1, 2), 10);
      var mmoffset = parseInt(utc.substr(end + 4, 2), 10);

      // calculate offset in milliseconds
      var offset = hhoffset * 60 + mmoffset;
      offset *= 60000;

      // apply offset
      if(c === '+') {
        date.setTime(+date - offset);
      } else {
        date.setTime(+date + offset);
      }
    }
  }

  return date;
};

/**
 * Converts a GeneralizedTime value to a date.
 *
 * @param gentime the GeneralizedTime value to convert.
 *
 * @return the date.
 */
asn1.generalizedTimeToDate = function(gentime) {
  /* The following formats can be used:

    YYYYMMDDHHMMSS
    YYYYMMDDHHMMSS.fff
    YYYYMMDDHHMMSSZ
    YYYYMMDDHHMMSS.fffZ
    YYYYMMDDHHMMSS+hh'mm'
    YYYYMMDDHHMMSS.fff+hh'mm'
    YYYYMMDDHHMMSS-hh'mm'
    YYYYMMDDHHMMSS.fff-hh'mm'

    Where:

    YYYY is the year
    MM is the month (01 to 12)
    DD is the day (01 to 31)
    hh is the hour (00 to 23)
    mm are the minutes (00 to 59)
    ss are the seconds (00 to 59)
    .fff is the second fraction, accurate to three decimal places
    Z indicates that local time is GMT, + indicates that local time is
    later than GMT, and - indicates that local time is earlier than GMT
    hh' is the absolute value of the offset from GMT in hours
    mm' is the absolute value of the offset from GMT in minutes */
  var date = new Date();

  var YYYY = parseInt(gentime.substr(0, 4), 10);
  var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month
  var DD = parseInt(gentime.substr(6, 2), 10);
  var hh = parseInt(gentime.substr(8, 2), 10);
  var mm = parseInt(gentime.substr(10, 2), 10);
  var ss = parseInt(gentime.substr(12, 2), 10);
  var fff = 0;
  var offset = 0;
  var isUTC = false;

  if(gentime.charAt(gentime.length - 1) === 'Z') {
    isUTC = true;
  }

  var end = gentime.length - 5, c = gentime.charAt(end);
  if(c === '+' || c === '-') {
    // get hours+minutes offset
    var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);
    var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);

    // calculate offset in milliseconds
    offset = hhoffset * 60 + mmoffset;
    offset *= 60000;

    // apply offset
    if(c === '+') {
      offset *= -1;
    }

    isUTC = true;
  }

  // check for second fraction
  if(gentime.charAt(14) === '.') {
    fff = parseFloat(gentime.substr(14), 10) * 1000;
  }

  if(isUTC) {
    date.setUTCFullYear(YYYY, MM, DD);
    date.setUTCHours(hh, mm, ss, fff);

    // apply offset
    date.setTime(+date + offset);
  } else {
    date.setFullYear(YYYY, MM, DD);
    date.setHours(hh, mm, ss, fff);
  }

  return date;
};

/**
 * Converts a date to a UTCTime value.
 *
 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
 * dates past 2049. Converting to a GeneralizedTime hasn't been
 * implemented yet.
 *
 * @param date the date to convert.
 *
 * @return the UTCTime value.
 */
asn1.dateToUtcTime = function(date) {
  // TODO: validate; currently assumes proper format
  if(typeof date === 'string') {
    return date;
  }

  var rval = '';

  // create format YYMMDDhhmmssZ
  var format = [];
  format.push(('' + date.getUTCFullYear()).substr(2));
  format.push('' + (date.getUTCMonth() + 1));
  format.push('' + date.getUTCDate());
  format.push('' + date.getUTCHours());
  format.push('' + date.getUTCMinutes());
  format.push('' + date.getUTCSeconds());

  // ensure 2 digits are used for each format entry
  for(var i = 0; i < format.length; ++i) {
    if(format[i].length < 2) {
      rval += '0';
    }
    rval += format[i];
  }
  rval += 'Z';

  return rval;
};

/**
 * Converts a date to a GeneralizedTime value.
 *
 * @param date the date to convert.
 *
 * @return the GeneralizedTime value as a string.
 */
asn1.dateToGeneralizedTime = function(date) {
  // TODO: validate; currently assumes proper format
  if(typeof date === 'string') {
    return date;
  }

  var rval = '';

  // create format YYYYMMDDHHMMSSZ
  var format = [];
  format.push('' + date.getUTCFullYear());
  format.push('' + (date.getUTCMonth() + 1));
  format.push('' + date.getUTCDate());
  format.push('' + date.getUTCHours());
  format.push('' + date.getUTCMinutes());
  format.push('' + date.getUTCSeconds());

  // ensure 2 digits are used for each format entry
  for(var i = 0; i < format.length; ++i) {
    if(format[i].length < 2) {
      rval += '0';
    }
    rval += format[i];
  }
  rval += 'Z';

  return rval;
};

/**
 * Converts a javascript integer to a DER-encoded byte buffer to be used
 * as the value for an INTEGER type.
 *
 * @param x the integer.
 *
 * @return the byte buffer.
 */
asn1.integerToDer = function(x) {
  var rval = forge.util.createBuffer();
  if(x >= -0x80 && x < 0x80) {
    return rval.putSignedInt(x, 8);
  }
  if(x >= -0x8000 && x < 0x8000) {
    return rval.putSignedInt(x, 16);
  }
  if(x >= -0x800000 && x < 0x800000) {
    return rval.putSignedInt(x, 24);
  }
  if(x >= -0x80000000 && x < 0x80000000) {
    return rval.putSignedInt(x, 32);
  }
  var error = new Error('Integer too large; max is 32-bits.');
  error.integer = x;
  throw error;
};

/**
 * Converts a DER-encoded byte buffer to a javascript integer. This is
 * typically used to decode the value of an INTEGER type.
 *
 * @param bytes the byte buffer.
 *
 * @return the integer.
 */
asn1.derToInteger = function(bytes) {
  // wrap in buffer if needed
  if(typeof bytes === 'string') {
    bytes = forge.util.createBuffer(bytes);
  }

  var n = bytes.length() * 8;
  if(n > 32) {
    throw new Error('Integer too large; max is 32-bits.');
  }
  return bytes.getSignedInt(n);
};

/**
 * Validates that the given ASN.1 object is at least a super set of the
 * given ASN.1 structure. Only tag classes and types are checked. An
 * optional map may also be provided to capture ASN.1 values while the
 * structure is checked.
 *
 * To capture an ASN.1 value, set an object in the validator's 'capture'
 * parameter to the key to use in the capture map. To capture the full
 * ASN.1 object, specify 'captureAsn1'. To capture BIT STRING bytes, including
 * the leading unused bits counter byte, specify 'captureBitStringContents'.
 * To capture BIT STRING bytes, without the leading unused bits counter byte,
 * specify 'captureBitStringValue'.
 *
 * Objects in the validator may set a field 'optional' to true to indicate
 * that it isn't necessary to pass validation.
 *
 * @param obj the ASN.1 object to validate.
 * @param v the ASN.1 structure validator.
 * @param capture an optional map to capture values in.
 * @param errors an optional array for storing validation errors.
 *
 * @return true on success, false on failure.
 */
asn1.validate = function(obj, v, capture, errors) {
  var rval = false;

  // ensure tag class and type are the same if specified
  if((obj.tagClass === v.tagClass || typeof(v.tagClass) === 'undefined') &&
    (obj.type === v.type || typeof(v.type) === 'undefined')) {
    // ensure constructed flag is the same if specified
    if(obj.constructed === v.constructed ||
      typeof(v.constructed) === 'undefined') {
      rval = true;

      // handle sub values
      if(v.value && forge.util.isArray(v.value)) {
        var j = 0;
        for(var i = 0; rval && i < v.value.length; ++i) {
          rval = v.value[i].optional || false;
          if(obj.value[j]) {
            rval = asn1.validate(obj.value[j], v.value[i], capture, errors);
            if(rval) {
              ++j;
            } else if(v.value[i].optional) {
              rval = true;
            }
          }
          if(!rval && errors) {
            errors.push(
              '[' + v.name + '] ' +
              'Tag class "' + v.tagClass + '", type "' +
              v.type + '" expected value length "' +
              v.value.length + '", got "' +
              obj.value.length + '"');
          }
        }
      }

      if(rval && capture) {
        if(v.capture) {
          capture[v.capture] = obj.value;
        }
        if(v.captureAsn1) {
          capture[v.captureAsn1] = obj;
        }
        if(v.captureBitStringContents && 'bitStringContents' in obj) {
          capture[v.captureBitStringContents] = obj.bitStringContents;
        }
        if(v.captureBitStringValue && 'bitStringContents' in obj) {
          var value;
          if(obj.bitStringContents.length < 2) {
            capture[v.captureBitStringValue] = '';
          } else {
            // FIXME: support unused bits with data shifting
            var unused = obj.bitStringContents.charCodeAt(0);
            if(unused !== 0) {
              throw new Error(
                'captureBitStringValue only supported for zero unused bits');
            }
            capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);
          }
        }
      }
    } else if(errors) {
      errors.push(
        '[' + v.name + '] ' +
        'Expected constructed "' + v.constructed + '", got "' +
        obj.constructed + '"');
    }
  } else if(errors) {
    if(obj.tagClass !== v.tagClass) {
      errors.push(
        '[' + v.name + '] ' +
        'Expected tag class "' + v.tagClass + '", got "' +
        obj.tagClass + '"');
    }
    if(obj.type !== v.type) {
      errors.push(
        '[' + v.name + '] ' +
        'Expected type "' + v.type + '", got "' + obj.type + '"');
    }
  }
  return rval;
};

// regex for testing for non-latin characters
var _nonLatinRegex = /[^\\u0000-\\u00ff]/;

/**
 * Pretty prints an ASN.1 object to a string.
 *
 * @param obj the object to write out.
 * @param level the level in the tree.
 * @param indentation the indentation to use.
 *
 * @return the string.
 */
asn1.prettyPrint = function(obj, level, indentation) {
  var rval = '';

  // set default level and indentation
  level = level || 0;
  indentation = indentation || 2;

  // start new line for deep levels
  if(level > 0) {
    rval += '\n';
  }

  // create indent
  var indent = '';
  for(var i = 0; i < level * indentation; ++i) {
    indent += ' ';
  }

  // print class:type
  rval += indent + 'Tag: ';
  switch(obj.tagClass) {
  case asn1.Class.UNIVERSAL:
    rval += 'Universal:';
    break;
  case asn1.Class.APPLICATION:
    rval += 'Application:';
    break;
  case asn1.Class.CONTEXT_SPECIFIC:
    rval += 'Context-Specific:';
    break;
  case asn1.Class.PRIVATE:
    rval += 'Private:';
    break;
  }

  if(obj.tagClass === asn1.Class.UNIVERSAL) {
    rval += obj.type;

    // known types
    switch(obj.type) {
    case asn1.Type.NONE:
      rval += ' (None)';
      break;
    case asn1.Type.BOOLEAN:
      rval += ' (Boolean)';
      break;
    case asn1.Type.INTEGER:
      rval += ' (Integer)';
      break;
    case asn1.Type.BITSTRING:
      rval += ' (Bit string)';
      break;
    case asn1.Type.OCTETSTRING:
      rval += ' (Octet string)';
      break;
    case asn1.Type.NULL:
      rval += ' (Null)';
      break;
    case asn1.Type.OID:
      rval += ' (Object Identifier)';
      break;
    case asn1.Type.ODESC:
      rval += ' (Object Descriptor)';
      break;
    case asn1.Type.EXTERNAL:
      rval += ' (External or Instance of)';
      break;
    case asn1.Type.REAL:
      rval += ' (Real)';
      break;
    case asn1.Type.ENUMERATED:
      rval += ' (Enumerated)';
      break;
    case asn1.Type.EMBEDDED:
      rval += ' (Embedded PDV)';
      break;
    case asn1.Type.UTF8:
      rval += ' (UTF8)';
      break;
    case asn1.Type.ROID:
      rval += ' (Relative Object Identifier)';
      break;
    case asn1.Type.SEQUENCE:
      rval += ' (Sequence)';
      break;
    case asn1.Type.SET:
      rval += ' (Set)';
      break;
    case asn1.Type.PRINTABLESTRING:
      rval += ' (Printable String)';
      break;
    case asn1.Type.IA5String:
      rval += ' (IA5String (ASCII))';
      break;
    case asn1.Type.UTCTIME:
      rval += ' (UTC time)';
      break;
    case asn1.Type.GENERALIZEDTIME:
      rval += ' (Generalized time)';
      break;
    case asn1.Type.BMPSTRING:
      rval += ' (BMP String)';
      break;
    }
  } else {
    rval += obj.type;
  }

  rval += '\n';
  rval += indent + 'Constructed: ' + obj.constructed + '\n';

  if(obj.composed) {
    var subvalues = 0;
    var sub = '';
    for(var i = 0; i < obj.value.length; ++i) {
      if(obj.value[i] !== undefined) {
        subvalues += 1;
        sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);
        if((i + 1) < obj.value.length) {
          sub += ',';
        }
      }
    }
    rval += indent + 'Sub values: ' + subvalues + sub;
  } else {
    rval += indent + 'Value: ';
    if(obj.type === asn1.Type.OID) {
      var oid = asn1.derToOid(obj.value);
      rval += oid;
      if(forge.pki && forge.pki.oids) {
        if(oid in forge.pki.oids) {
          rval += ' (' + forge.pki.oids[oid] + ') ';
        }
      }
    }
    if(obj.type === asn1.Type.INTEGER) {
      try {
        rval += asn1.derToInteger(obj.value);
      } catch(ex) {
        rval += '0x' + forge.util.bytesToHex(obj.value);
      }
    } else if(obj.type === asn1.Type.BITSTRING) {
      // TODO: shift bits as needed to display without padding
      if(obj.value.length > 1) {
        // remove unused bits field
        rval += '0x' + forge.util.bytesToHex(obj.value.slice(1));
      } else {
        rval += '(none)';
      }
      // show unused bit count
      if(obj.value.length > 0) {
        var unused = obj.value.charCodeAt(0);
        if(unused == 1) {
          rval += ' (1 unused bit shown)';
        } else if(unused > 1) {
          rval += ' (' + unused + ' unused bits shown)';
        }
      }
    } else if(obj.type === asn1.Type.OCTETSTRING) {
      if(!_nonLatinRegex.test(obj.value)) {
        rval += '(' + obj.value + ') ';
      }
      rval += '0x' + forge.util.bytesToHex(obj.value);
    } else if(obj.type === asn1.Type.UTF8) {
      try {
        rval += forge.util.decodeUtf8(obj.value);
      } catch(e) {
        if(e.message === 'URI malformed') {
          rval +=
            '0x' + forge.util.bytesToHex(obj.value) + ' (malformed UTF8)';
        } else {
          throw e;
        }
      }
    } else if(obj.type === asn1.Type.PRINTABLESTRING ||
      obj.type === asn1.Type.IA5String) {
      rval += obj.value;
    } else if(_nonLatinRegex.test(obj.value)) {
      rval += '0x' + forge.util.bytesToHex(obj.value);
    } else if(obj.value.length === 0) {
      rval += '[null]';
    } else {
      rval += obj.value;
    }
  }

  return rval;
};
/**
 * Base-N/Base-X encoding/decoding functions.
 *
 * Original implementation from base-x:
 * https://github.com/cryptocoinjs/base-x
 *
 * Which is MIT licensed:
 *
 * The MIT License (MIT)
 *
 * Copyright base-x contributors (c) 2016
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
var api = {};
module.exports = api;

// baseN alphabet indexes
var _reverseAlphabets = {};

/**
 * BaseN-encodes a Uint8Array using the given alphabet.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the baseN-encoded output string.
 */
api.encode = function(input, alphabet, maxline) {
  if(typeof alphabet !== 'string') {
    throw new TypeError('"alphabet" must be a string.');
  }
  if(maxline !== undefined && typeof maxline !== 'number') {
    throw new TypeError('"maxline" must be a number.');
  }

  var output = '';

  if(!(input instanceof Uint8Array)) {
    // assume forge byte buffer
    output = _encodeWithByteBuffer(input, alphabet);
  } else {
    var i = 0;
    var base = alphabet.length;
    var first = alphabet.charAt(0);
    var digits = [0];
    for(i = 0; i < input.length; ++i) {
      for(var j = 0, carry = input[i]; j < digits.length; ++j) {
        carry += digits[j] << 8;
        digits[j] = carry % base;
        carry = (carry / base) | 0;
      }

      while(carry > 0) {
        digits.push(carry % base);
        carry = (carry / base) | 0;
      }
    }

    // deal with leading zeros
    for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {
      output += first;
    }
    // convert digits to a string
    for(i = digits.length - 1; i >= 0; --i) {
      output += alphabet[digits[i]];
    }
  }

  if(maxline) {
    var regex = new RegExp('.{1,' + maxline + '}', 'g');
    output = output.match(regex).join('\r\n');
  }

  return output;
};

/**
 * Decodes a baseN-encoded (using the given alphabet) string to a
 * Uint8Array.
 *
 * @param input the baseN-encoded input string.
 *
 * @return the Uint8Array.
 */
api.decode = function(input, alphabet) {
  if(typeof input !== 'string') {
    throw new TypeError('"input" must be a string.');
  }
  if(typeof alphabet !== 'string') {
    throw new TypeError('"alphabet" must be a string.');
  }

  var table = _reverseAlphabets[alphabet];
  if(!table) {
    // compute reverse alphabet
    table = _reverseAlphabets[alphabet] = [];
    for(var i = 0; i < alphabet.length; ++i) {
      table[alphabet.charCodeAt(i)] = i;
    }
  }

  // remove whitespace characters
  input = input.replace(/\s/g, '');

  var base = alphabet.length;
  var first = alphabet.charAt(0);
  var bytes = [0];
  for(var i = 0; i < input.length; i++) {
    var value = table[input.charCodeAt(i)];
    if(value === undefined) {
      return;
    }

    for(var j = 0, carry = value; j < bytes.length; ++j) {
      carry += bytes[j] * base;
      bytes[j] = carry & 0xff;
      carry >>= 8;
    }

    while(carry > 0) {
      bytes.push(carry & 0xff);
      carry >>= 8;
    }
  }

  // deal with leading zeros
  for(var k = 0; input[k] === first && k < input.length - 1; ++k) {
    bytes.push(0);
  }

  if(typeof Buffer !== 'undefined') {
    return Buffer.from(bytes.reverse());
  }

  return new Uint8Array(bytes.reverse());
};

function _encodeWithByteBuffer(input, alphabet) {
  var i = 0;
  var base = alphabet.length;
  var first = alphabet.charAt(0);
  var digits = [0];
  for(i = 0; i < input.length(); ++i) {
    for(var j = 0, carry = input.at(i); j < digits.length; ++j) {
      carry += digits[j] << 8;
      digits[j] = carry % base;
      carry = (carry / base) | 0;
    }

    while(carry > 0) {
      digits.push(carry % base);
      carry = (carry / base) | 0;
    }
  }

  var output = '';

  // deal with leading zeros
  for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {
    output += first;
  }
  // convert digits to a string
  for(i = digits.length - 1; i >= 0; --i) {
    output += alphabet[digits[i]];
  }

  return output;
}
/**
 * Cipher base API.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./util');

module.exports = forge.cipher = forge.cipher || {};

// registered algorithms
forge.cipher.algorithms = forge.cipher.algorithms || {};

/**
 * Creates a cipher object that can be used to encrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */
forge.cipher.createCipher = function(algorithm, key) {
  var api = algorithm;
  if(typeof api === 'string') {
    api = forge.cipher.getAlgorithm(api);
    if(api) {
      api = api();
    }
  }
  if(!api) {
    throw new Error('Unsupported algorithm: ' + algorithm);
  }

  // assume block cipher
  return new forge.cipher.BlockCipher({
    algorithm: api,
    key: key,
    decrypt: false
  });
};

/**
 * Creates a decipher object that can be used to decrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */
forge.cipher.createDecipher = function(algorithm, key) {
  var api = algorithm;
  if(typeof api === 'string') {
    api = forge.cipher.getAlgorithm(api);
    if(api) {
      api = api();
    }
  }
  if(!api) {
    throw new Error('Unsupported algorithm: ' + algorithm);
  }

  // assume block cipher
  return new forge.cipher.BlockCipher({
    algorithm: api,
    key: key,
    decrypt: true
  });
};

/**
 * Registers an algorithm by name. If the name was already registered, the
 * algorithm API object will be overwritten.
 *
 * @param name the name of the algorithm.
 * @param algorithm the algorithm API object.
 */
forge.cipher.registerAlgorithm = function(name, algorithm) {
  name = name.toUpperCase();
  forge.cipher.algorithms[name] = algorithm;
};

/**
 * Gets a registered algorithm by name.
 *
 * @param name the name of the algorithm.
 *
 * @return the algorithm, if found, null if not.
 */
forge.cipher.getAlgorithm = function(name) {
  name = name.toUpperCase();
  if(name in forge.cipher.algorithms) {
    return forge.cipher.algorithms[name];
  }
  return null;
};

var BlockCipher = forge.cipher.BlockCipher = function(options) {
  this.algorithm = options.algorithm;
  this.mode = this.algorithm.mode;
  this.blockSize = this.mode.blockSize;
  this._finish = false;
  this._input = null;
  this.output = null;
  this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;
  this._decrypt = options.decrypt;
  this.algorithm.initialize(options);
};

/**
 * Starts or restarts the encryption or decryption process, whichever
 * was previously configured.
 *
 * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array
 * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in
 * bytes, then it must be Nb (16) bytes in length. If the IV is given in as
 * 32-bit integers, then it must be 4 integers long.
 *
 * Note: an IV is not required or used in ECB mode.
 *
 * For GCM-mode, the IV must be given as a binary-encoded string of bytes or
 * a byte buffer. The number of bytes should be 12 (96 bits) as recommended
 * by NIST SP-800-38D but another length may be given.
 *
 * @param options the options to use:
 *          iv the initialization vector to use as a binary-encoded string of
 *            bytes, null to reuse the last ciphered block from a previous
 *            update() (this "residue" method is for legacy support only).
 *          additionalData additional authentication data as a binary-encoded
 *            string of bytes, for 'GCM' mode, (default: none).
 *          tagLength desired length of authentication tag, in bits, for
 *            'GCM' mode (0-128, default: 128).
 *          tag the authentication tag to check if decrypting, as a
 *             binary-encoded string of bytes.
 *          output the output the buffer to write to, null to create one.
 */
BlockCipher.prototype.start = function(options) {
  options = options || {};
  var opts = {};
  for(var key in options) {
    opts[key] = options[key];
  }
  opts.decrypt = this._decrypt;
  this._finish = false;
  this._input = forge.util.createBuffer();
  this.output = options.output || forge.util.createBuffer();
  this.mode.start(opts);
};

/**
 * Updates the next block according to the cipher mode.
 *
 * @param input the buffer to read from.
 */
BlockCipher.prototype.update = function(input) {
  if(input) {
    // input given, so empty it into the input buffer
    this._input.putBuffer(input);
  }

  // do cipher operation until it needs more input and not finished
  while(!this._op.call(this.mode, this._input, this.output, this._finish) &&
    !this._finish) {}

  // free consumed memory from input buffer
  this._input.compact();
};

/**
 * Finishes encrypting or decrypting.
 *
 * @param pad a padding function to use in CBC mode, null for default,
 *          signature(blockSize, buffer, decrypt).
 *
 * @return true if successful, false on error.
 */
BlockCipher.prototype.finish = function(pad) {
  // backwards-compatibility w/deprecated padding API
  // Note: will overwrite padding functions even after another start() call
  if(pad && (this.mode.name === 'ECB' || this.mode.name === 'CBC')) {
    this.mode.pad = function(input) {
      return pad(this.blockSize, input, false);
    };
    this.mode.unpad = function(output) {
      return pad(this.blockSize, output, true);
    };
  }

  // build options for padding and afterFinish functions
  var options = {};
  options.decrypt = this._decrypt;

  // get # of bytes that won't fill a block
  options.overflow = this._input.length() % this.blockSize;

  if(!this._decrypt && this.mode.pad) {
    if(!this.mode.pad(this._input, options)) {
      return false;
    }
  }

  // do final update
  this._finish = true;
  this.update();

  if(this._decrypt && this.mode.unpad) {
    if(!this.mode.unpad(this.output, options)) {
      return false;
    }
  }

  if(this.mode.afterFinish) {
    if(!this.mode.afterFinish(this.output, options)) {
      return false;
    }
  }

  return true;
};
/**
 * Supported cipher modes.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./util');

forge.cipher = forge.cipher || {};

// supported cipher modes
var modes = module.exports = forge.cipher.modes = forge.cipher.modes || {};

/** Electronic codebook (ECB) (Don't use this; it's not secure) **/

modes.ecb = function(options) {
  options = options || {};
  this.name = 'ECB';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = new Array(this._ints);
  this._outBlock = new Array(this._ints);
};

modes.ecb.prototype.start = function(options) {};

modes.ecb.prototype.encrypt = function(input, output, finish) {
  // not enough input to encrypt
  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  }

  // get next block
  for(var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = input.getInt32();
  }

  // encrypt block
  this.cipher.encrypt(this._inBlock, this._outBlock);

  // write output
  for(var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i]);
  }
};

modes.ecb.prototype.decrypt = function(input, output, finish) {
  // not enough input to decrypt
  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  }

  // get next block
  for(var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = input.getInt32();
  }

  // decrypt block
  this.cipher.decrypt(this._inBlock, this._outBlock);

  // write output
  for(var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i]);
  }
};

modes.ecb.prototype.pad = function(input, options) {
  // add PKCS#7 padding to block (each pad byte is the
  // value of the number of pad bytes)
  var padding = (input.length() === this.blockSize ?
    this.blockSize : (this.blockSize - input.length()));
  input.fillWithByte(padding, padding);
  return true;
};

modes.ecb.prototype.unpad = function(output, options) {
  // check for error: input data not a multiple of blockSize
  if(options.overflow > 0) {
    return false;
  }

  // ensure padding byte count is valid
  var len = output.length();
  var count = output.at(len - 1);
  if(count > (this.blockSize << 2)) {
    return false;
  }

  // trim off padding bytes
  output.truncate(count);
  return true;
};

/** Cipher-block Chaining (CBC) **/

modes.cbc = function(options) {
  options = options || {};
  this.name = 'CBC';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = new Array(this._ints);
  this._outBlock = new Array(this._ints);
};

modes.cbc.prototype.start = function(options) {
  // Note: legacy support for using IV residue (has security flaws)
  // if IV is null, reuse block from previous processing
  if(options.iv === null) {
    // must have a previous block
    if(!this._prev) {
      throw new Error('Invalid IV parameter.');
    }
    this._iv = this._prev.slice(0);
  } else if(!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  } else {
    // save IV as "previous" block
    this._iv = transformIV(options.iv, this.blockSize);
    this._prev = this._iv.slice(0);
  }
};

modes.cbc.prototype.encrypt = function(input, output, finish) {
  // not enough input to encrypt
  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  }

  // get next block
  // CBC XOR's IV (or previous block) with plaintext
  for(var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = this._prev[i] ^ input.getInt32();
  }

  // encrypt block
  this.cipher.encrypt(this._inBlock, this._outBlock);

  // write output, save previous block
  for(var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i]);
  }
  this._prev = this._outBlock;
};

modes.cbc.prototype.decrypt = function(input, output, finish) {
  // not enough input to decrypt
  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  }

  // get next block
  for(var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = input.getInt32();
  }

  // decrypt block
  this.cipher.decrypt(this._inBlock, this._outBlock);

  // write output, save previous ciphered block
  // CBC XOR's IV (or previous block) with ciphertext
  for(var i = 0; i < this._ints; ++i) {
    output.putInt32(this._prev[i] ^ this._outBlock[i]);
  }
  this._prev = this._inBlock.slice(0);
};

modes.cbc.prototype.pad = function(input, options) {
  // add PKCS#7 padding to block (each pad byte is the
  // value of the number of pad bytes)
  var padding = (input.length() === this.blockSize ?
    this.blockSize : (this.blockSize - input.length()));
  input.fillWithByte(padding, padding);
  return true;
};

modes.cbc.prototype.unpad = function(output, options) {
  // check for error: input data not a multiple of blockSize
  if(options.overflow > 0) {
    return false;
  }

  // ensure padding byte count is valid
  var len = output.length();
  var count = output.at(len - 1);
  if(count > (this.blockSize << 2)) {
    return false;
  }

  // trim off padding bytes
  output.truncate(count);
  return true;
};

/** Cipher feedback (CFB) **/

modes.cfb = function(options) {
  options = options || {};
  this.name = 'CFB';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = null;
  this._outBlock = new Array(this._ints);
  this._partialBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0;
};

modes.cfb.prototype.start = function(options) {
  if(!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  }
  // use IV as first input
  this._iv = transformIV(options.iv, this.blockSize);
  this._inBlock = this._iv.slice(0);
  this._partialBytes = 0;
};

modes.cfb.prototype.encrypt = function(input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();
  if(inputLength === 0) {
    return true;
  }

  // encrypt block
  this.cipher.encrypt(this._inBlock, this._outBlock);

  // handle full block
  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output, write input as output
    for(var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = input.getInt32() ^ this._outBlock[i];
      output.putInt32(this._inBlock[i]);
    }
    return;
  }

  // handle partial block
  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
  if(partialBytes > 0) {
    partialBytes = this.blockSize - partialBytes;
  }

  // XOR input with output, write input as partial output
  this._partialOutput.clear();
  for(var i = 0; i < this._ints; ++i) {
    this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];
    this._partialOutput.putInt32(this._partialBlock[i]);
  }

  if(partialBytes > 0) {
    // block still incomplete, restore input buffer
    input.read -= this.blockSize;
  } else {
    // block complete, update input block
    for(var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = this._partialBlock[i];
    }
  }

  // skip any previous partial bytes
  if(this._partialBytes > 0) {
    this._partialOutput.getBytes(this._partialBytes);
  }

  if(partialBytes > 0 && !finish) {
    output.putBytes(this._partialOutput.getBytes(
      partialBytes - this._partialBytes));
    this._partialBytes = partialBytes;
    return true;
  }

  output.putBytes(this._partialOutput.getBytes(
    inputLength - this._partialBytes));
  this._partialBytes = 0;
};

modes.cfb.prototype.decrypt = function(input, output, finish) {
  // not enough input to decrypt
  var inputLength = input.length();
  if(inputLength === 0) {
    return true;
  }

  // encrypt block (CFB always uses encryption mode)
  this.cipher.encrypt(this._inBlock, this._outBlock);

  // handle full block
  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output, write input as output
    for(var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = input.getInt32();
      output.putInt32(this._inBlock[i] ^ this._outBlock[i]);
    }
    return;
  }

  // handle partial block
  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
  if(partialBytes > 0) {
    partialBytes = this.blockSize - partialBytes;
  }

  // XOR input with output, write input as partial output
  this._partialOutput.clear();
  for(var i = 0; i < this._ints; ++i) {
    this._partialBlock[i] = input.getInt32();
    this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);
  }

  if(partialBytes > 0) {
    // block still incomplete, restore input buffer
    input.read -= this.blockSize;
  } else {
    // block complete, update input block
    for(var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = this._partialBlock[i];
    }
  }

  // skip any previous partial bytes
  if(this._partialBytes > 0) {
    this._partialOutput.getBytes(this._partialBytes);
  }

  if(partialBytes > 0 && !finish) {
    output.putBytes(this._partialOutput.getBytes(
      partialBytes - this._partialBytes));
    this._partialBytes = partialBytes;
    return true;
  }

  output.putBytes(this._partialOutput.getBytes(
    inputLength - this._partialBytes));
  this._partialBytes = 0;
};

/** Output feedback (OFB) **/

modes.ofb = function(options) {
  options = options || {};
  this.name = 'OFB';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = null;
  this._outBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0;
};

modes.ofb.prototype.start = function(options) {
  if(!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  }
  // use IV as first input
  this._iv = transformIV(options.iv, this.blockSize);
  this._inBlock = this._iv.slice(0);
  this._partialBytes = 0;
};

modes.ofb.prototype.encrypt = function(input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();
  if(input.length() === 0) {
    return true;
  }

  // encrypt block (OFB always uses encryption mode)
  this.cipher.encrypt(this._inBlock, this._outBlock);

  // handle full block
  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output and update next input
    for(var i = 0; i < this._ints; ++i) {
      output.putInt32(input.getInt32() ^ this._outBlock[i]);
      this._inBlock[i] = this._outBlock[i];
    }
    return;
  }

  // handle partial block
  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
  if(partialBytes > 0) {
    partialBytes = this.blockSize - partialBytes;
  }

  // XOR input with output
  this._partialOutput.clear();
  for(var i = 0; i < this._ints; ++i) {
    this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
  }

  if(partialBytes > 0) {
    // block still incomplete, restore input buffer
    input.read -= this.blockSize;
  } else {
    // block complete, update input block
    for(var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = this._outBlock[i];
    }
  }

  // skip any previous partial bytes
  if(this._partialBytes > 0) {
    this._partialOutput.getBytes(this._partialBytes);
  }

  if(partialBytes > 0 && !finish) {
    output.putBytes(this._partialOutput.getBytes(
      partialBytes - this._partialBytes));
    this._partialBytes = partialBytes;
    return true;
  }

  output.putBytes(this._partialOutput.getBytes(
    inputLength - this._partialBytes));
  this._partialBytes = 0;
};

modes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;

/** Counter (CTR) **/

modes.ctr = function(options) {
  options = options || {};
  this.name = 'CTR';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = null;
  this._outBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0;
};

modes.ctr.prototype.start = function(options) {
  if(!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  }
  // use IV as first input
  this._iv = transformIV(options.iv, this.blockSize);
  this._inBlock = this._iv.slice(0);
  this._partialBytes = 0;
};

modes.ctr.prototype.encrypt = function(input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();
  if(inputLength === 0) {
    return true;
  }

  // encrypt block (CTR always uses encryption mode)
  this.cipher.encrypt(this._inBlock, this._outBlock);

  // handle full block
  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output
    for(var i = 0; i < this._ints; ++i) {
      output.putInt32(input.getInt32() ^ this._outBlock[i]);
    }
  } else {
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
    if(partialBytes > 0) {
      partialBytes = this.blockSize - partialBytes;
    }

    // XOR input with output
    this._partialOutput.clear();
    for(var i = 0; i < this._ints; ++i) {
      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
    }

    if(partialBytes > 0) {
      // block still incomplete, restore input buffer
      input.read -= this.blockSize;
    }

    // skip any previous partial bytes
    if(this._partialBytes > 0) {
      this._partialOutput.getBytes(this._partialBytes);
    }

    if(partialBytes > 0 && !finish) {
      output.putBytes(this._partialOutput.getBytes(
        partialBytes - this._partialBytes));
      this._partialBytes = partialBytes;
      return true;
    }

    output.putBytes(this._partialOutput.getBytes(
      inputLength - this._partialBytes));
    this._partialBytes = 0;
  }

  // block complete, increment counter (input block)
  inc32(this._inBlock);
};

modes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;

/** Galois/Counter Mode (GCM) **/

modes.gcm = function(options) {
  options = options || {};
  this.name = 'GCM';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = new Array(this._ints);
  this._outBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0;

  // R is actually this value concatenated with 120 more zero bits, but
  // we only XOR against R so the other zeros have no effect -- we just
  // apply this value to the first integer in a block
  this._R = 0xE1000000;
};

modes.gcm.prototype.start = function(options) {
  if(!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  }
  // ensure IV is a byte buffer
  var iv = forge.util.createBuffer(options.iv);

  // no ciphered data processed yet
  this._cipherLength = 0;

  // default additional data is none
  var additionalData;
  if('additionalData' in options) {
    additionalData = forge.util.createBuffer(options.additionalData);
  } else {
    additionalData = forge.util.createBuffer();
  }

  // default tag length is 128 bits
  if('tagLength' in options) {
    this._tagLength = options.tagLength;
  } else {
    this._tagLength = 128;
  }

  // if tag is given, ensure tag matches tag length
  this._tag = null;
  if(options.decrypt) {
    // save tag to check later
    this._tag = forge.util.createBuffer(options.tag).getBytes();
    if(this._tag.length !== (this._tagLength / 8)) {
      throw new Error('Authentication tag does not match tag length.');
    }
  }

  // create tmp storage for hash calculation
  this._hashBlock = new Array(this._ints);

  // no tag generated yet
  this.tag = null;

  // generate hash subkey
  // (apply block cipher to "zero" block)
  this._hashSubkey = new Array(this._ints);
  this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey);

  // generate table M
  // use 4-bit tables (32 component decomposition of a 16 byte value)
  // 8-bit tables take more space and are known to have security
  // vulnerabilities (in native implementations)
  this.componentBits = 4;
  this._m = this.generateHashTable(this._hashSubkey, this.componentBits);

  // Note: support IV length different from 96 bits? (only supporting
  // 96 bits is recommended by NIST SP-800-38D)
  // generate J_0
  var ivLength = iv.length();
  if(ivLength === 12) {
    // 96-bit IV
    this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];
  } else {
    // IV is NOT 96-bits
    this._j0 = [0, 0, 0, 0];
    while(iv.length() > 0) {
      this._j0 = this.ghash(
        this._hashSubkey, this._j0,
        [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]);
    }
    this._j0 = this.ghash(
      this._hashSubkey, this._j0, [0, 0].concat(from64To32(ivLength * 8)));
  }

  // generate ICB (initial counter block)
  this._inBlock = this._j0.slice(0);
  inc32(this._inBlock);
  this._partialBytes = 0;

  // consume authentication data
  additionalData = forge.util.createBuffer(additionalData);
  // save additional data length as a BE 64-bit number
  this._aDataLength = from64To32(additionalData.length() * 8);
  // pad additional data to 128 bit (16 byte) block size
  var overflow = additionalData.length() % this.blockSize;
  if(overflow) {
    additionalData.fillWithByte(0, this.blockSize - overflow);
  }
  this._s = [0, 0, 0, 0];
  while(additionalData.length() > 0) {
    this._s = this.ghash(this._hashSubkey, this._s, [
      additionalData.getInt32(),
      additionalData.getInt32(),
      additionalData.getInt32(),
      additionalData.getInt32()
    ]);
  }
};

modes.gcm.prototype.encrypt = function(input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();
  if(inputLength === 0) {
    return true;
  }

  // encrypt block
  this.cipher.encrypt(this._inBlock, this._outBlock);

  // handle full block
  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output
    for(var i = 0; i < this._ints; ++i) {
      output.putInt32(this._outBlock[i] ^= input.getInt32());
    }
    this._cipherLength += this.blockSize;
  } else {
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
    if(partialBytes > 0) {
      partialBytes = this.blockSize - partialBytes;
    }

    // XOR input with output
    this._partialOutput.clear();
    for(var i = 0; i < this._ints; ++i) {
      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
    }

    if(partialBytes <= 0 || finish) {
      // handle overflow prior to hashing
      if(finish) {
        // get block overflow
        var overflow = inputLength % this.blockSize;
        this._cipherLength += overflow;
        // truncate for hash function
        this._partialOutput.truncate(this.blockSize - overflow);
      } else {
        this._cipherLength += this.blockSize;
      }

      // get output block for hashing
      for(var i = 0; i < this._ints; ++i) {
        this._outBlock[i] = this._partialOutput.getInt32();
      }
      this._partialOutput.read -= this.blockSize;
    }

    // skip any previous partial bytes
    if(this._partialBytes > 0) {
      this._partialOutput.getBytes(this._partialBytes);
    }

    if(partialBytes > 0 && !finish) {
      // block still incomplete, restore input buffer, get partial output,
      // and return early
      input.read -= this.blockSize;
      output.putBytes(this._partialOutput.getBytes(
        partialBytes - this._partialBytes));
      this._partialBytes = partialBytes;
      return true;
    }

    output.putBytes(this._partialOutput.getBytes(
      inputLength - this._partialBytes));
    this._partialBytes = 0;
  }

  // update hash block S
  this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);

  // increment counter (input block)
  inc32(this._inBlock);
};

modes.gcm.prototype.decrypt = function(input, output, finish) {
  // not enough input to decrypt
  var inputLength = input.length();
  if(inputLength < this.blockSize && !(finish && inputLength > 0)) {
    return true;
  }

  // encrypt block (GCM always uses encryption mode)
  this.cipher.encrypt(this._inBlock, this._outBlock);

  // increment counter (input block)
  inc32(this._inBlock);

  // update hash block S
  this._hashBlock[0] = input.getInt32();
  this._hashBlock[1] = input.getInt32();
  this._hashBlock[2] = input.getInt32();
  this._hashBlock[3] = input.getInt32();
  this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);

  // XOR hash input with output
  for(var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);
  }

  // increment cipher data length
  if(inputLength < this.blockSize) {
    this._cipherLength += inputLength % this.blockSize;
  } else {
    this._cipherLength += this.blockSize;
  }
};

modes.gcm.prototype.afterFinish = function(output, options) {
  var rval = true;

  // handle overflow
  if(options.decrypt && options.overflow) {
    output.truncate(this.blockSize - options.overflow);
  }

  // handle authentication tag
  this.tag = forge.util.createBuffer();

  // concatenate additional data length with cipher length
  var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));

  // include lengths in hash
  this._s = this.ghash(this._hashSubkey, this._s, lengths);

  // do GCTR(J_0, S)
  var tag = [];
  this.cipher.encrypt(this._j0, tag);
  for(var i = 0; i < this._ints; ++i) {
    this.tag.putInt32(this._s[i] ^ tag[i]);
  }

  // trim tag to length
  this.tag.truncate(this.tag.length() % (this._tagLength / 8));

  // check authentication tag
  if(options.decrypt && this.tag.bytes() !== this._tag) {
    rval = false;
  }

  return rval;
};

/**
 * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois
 * field multiplication. The field, GF(2^128), is defined by the polynomial:
 *
 * x^128 + x^7 + x^2 + x + 1
 *
 * Which is represented in little-endian binary form as: 11100001 (0xe1). When
 * the value of a coefficient is 1, a bit is set. The value R, is the
 * concatenation of this value and 120 zero bits, yielding a 128-bit value
 * which matches the block size.
 *
 * This function will multiply two elements (vectors of bytes), X and Y, in
 * the field GF(2^128). The result is initialized to zero. For each bit of
 * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)
 * by the current value of Y. For each bit, the value of Y will be raised by
 * a power of x (multiplied by the polynomial x). This can be achieved by
 * shifting Y once to the right. If the current value of Y, prior to being
 * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.
 * Otherwise, we must divide by R after shifting to find the remainder.
 *
 * @param x the first block to multiply by the second.
 * @param y the second block to multiply by the first.
 *
 * @return the block result of the multiplication.
 */
modes.gcm.prototype.multiply = function(x, y) {
  var z_i = [0, 0, 0, 0];
  var v_i = y.slice(0);

  // calculate Z_128 (block has 128 bits)
  for(var i = 0; i < 128; ++i) {
    // if x_i is 0, Z_{i+1} = Z_i (unchanged)
    // else Z_{i+1} = Z_i ^ V_i
    // get x_i by finding 32-bit int position, then left shift 1 by remainder
    var x_i = x[(i / 32) | 0] & (1 << (31 - i % 32));
    if(x_i) {
      z_i[0] ^= v_i[0];
      z_i[1] ^= v_i[1];
      z_i[2] ^= v_i[2];
      z_i[3] ^= v_i[3];
    }

    // if LSB(V_i) is 1, V_i = V_i >> 1
    // else V_i = (V_i >> 1) ^ R
    this.pow(v_i, v_i);
  }

  return z_i;
};

modes.gcm.prototype.pow = function(x, out) {
  // if LSB(x) is 1, x = x >>> 1
  // else x = (x >>> 1) ^ R
  var lsb = x[3] & 1;

  // always do x >>> 1:
  // starting with the rightmost integer, shift each integer to the right
  // one bit, pulling in the bit from the integer to the left as its top
  // most bit (do this for the last 3 integers)
  for(var i = 3; i > 0; --i) {
    out[i] = (x[i] >>> 1) | ((x[i - 1] & 1) << 31);
  }
  // shift the first integer normally
  out[0] = x[0] >>> 1;

  // if lsb was not set, then polynomial had a degree of 127 and doesn't
  // need to divided; otherwise, XOR with R to find the remainder; we only
  // need to XOR the first integer since R technically ends w/120 zero bits
  if(lsb) {
    out[0] ^= this._R;
  }
};

modes.gcm.prototype.tableMultiply = function(x) {
  // assumes 4-bit tables are used
  var z = [0, 0, 0, 0];
  for(var i = 0; i < 32; ++i) {
    var idx = (i / 8) | 0;
    var x_i = (x[idx] >>> ((7 - (i % 8)) * 4)) & 0xF;
    var ah = this._m[i][x_i];
    z[0] ^= ah[0];
    z[1] ^= ah[1];
    z[2] ^= ah[2];
    z[3] ^= ah[3];
  }
  return z;
};

/**
 * A continuing version of the GHASH algorithm that operates on a single
 * block. The hash block, last hash value (Ym) and the new block to hash
 * are given.
 *
 * @param h the hash block.
 * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.
 * @param x the block to hash.
 *
 * @return the hashed value (Ym).
 */
modes.gcm.prototype.ghash = function(h, y, x) {
  y[0] ^= x[0];
  y[1] ^= x[1];
  y[2] ^= x[2];
  y[3] ^= x[3];
  return this.tableMultiply(y);
  //return this.multiply(y, h);
};

/**
 * Precomputes a table for multiplying against the hash subkey. This
 * mechanism provides a substantial speed increase over multiplication
 * performed without a table. The table-based multiplication this table is
 * for solves X * H by multiplying each component of X by H and then
 * composing the results together using XOR.
 *
 * This function can be used to generate tables with different bit sizes
 * for the components, however, this implementation assumes there are
 * 32 components of X (which is a 16 byte vector), therefore each component
 * takes 4-bits (so the table is constructed with bits=4).
 *
 * @param h the hash subkey.
 * @param bits the bit size for a component.
 */
modes.gcm.prototype.generateHashTable = function(h, bits) {
  // TODO: There are further optimizations that would use only the
  // first table M_0 (or some variant) along with a remainder table;
  // this can be explored in the future
  var multiplier = 8 / bits;
  var perInt = 4 * multiplier;
  var size = 16 * multiplier;
  var m = new Array(size);
  for(var i = 0; i < size; ++i) {
    var tmp = [0, 0, 0, 0];
    var idx = (i / perInt) | 0;
    var shft = ((perInt - 1 - (i % perInt)) * bits);
    tmp[idx] = (1 << (bits - 1)) << shft;
    m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);
  }
  return m;
};

/**
 * Generates a table for multiplying against the hash subkey for one
 * particular component (out of all possible component values).
 *
 * @param mid the pre-multiplied value for the middle key of the table.
 * @param bits the bit size for a component.
 */
modes.gcm.prototype.generateSubHashTable = function(mid, bits) {
  // compute the table quickly by minimizing the number of
  // POW operations -- they only need to be performed for powers of 2,
  // all other entries can be composed from those powers using XOR
  var size = 1 << bits;
  var half = size >>> 1;
  var m = new Array(size);
  m[half] = mid.slice(0);
  var i = half >>> 1;
  while(i > 0) {
    // raise m0[2 * i] and store in m0[i]
    this.pow(m[2 * i], m[i] = []);
    i >>= 1;
  }
  i = 2;
  while(i < half) {
    for(var j = 1; j < i; ++j) {
      var m_i = m[i];
      var m_j = m[j];
      m[i + j] = [
        m_i[0] ^ m_j[0],
        m_i[1] ^ m_j[1],
        m_i[2] ^ m_j[2],
        m_i[3] ^ m_j[3]
      ];
    }
    i *= 2;
  }
  m[0] = [0, 0, 0, 0];
  /* Note: We could avoid storing these by doing composition during multiply
  calculate top half using composition by speed is preferred. */
  for(i = half + 1; i < size; ++i) {
    var c = m[i ^ half];
    m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];
  }
  return m;
};

/** Utility functions */

function transformIV(iv, blockSize) {
  if(typeof iv === 'string') {
    // convert iv string into byte buffer
    iv = forge.util.createBuffer(iv);
  }

  if(forge.util.isArray(iv) && iv.length > 4) {
    // convert iv byte array into byte buffer
    var tmp = iv;
    iv = forge.util.createBuffer();
    for(var i = 0; i < tmp.length; ++i) {
      iv.putByte(tmp[i]);
    }
  }

  if(iv.length() < blockSize) {
    throw new Error(
      'Invalid IV length; got ' + iv.length() +
      ' bytes and expected ' + blockSize + ' bytes.');
  }

  if(!forge.util.isArray(iv)) {
    // convert iv byte buffer into 32-bit integer array
    var ints = [];
    var blocks = blockSize / 4;
    for(var i = 0; i < blocks; ++i) {
      ints.push(iv.getInt32());
    }
    iv = ints;
  }

  return iv;
}

function inc32(block) {
  // increment last 32 bits of block only
  block[block.length - 1] = (block[block.length - 1] + 1) & 0xFFFFFFFF;
}

function from64To32(num) {
  // convert 64-bit number to two BE Int32s
  return [(num / 0x100000000) | 0, num & 0xFFFFFFFF];
}
/**
 * DES (Data Encryption Standard) implementation.
 *
 * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.
 * It is based on the BSD-licensed implementation by Paul Tero:
 *
 * Paul Tero, July 2001
 * http://www.tero.co.uk/des/
 *
 * Optimised for performance with large blocks by
 * Michael Hayworth, November 2001
 * http://www.netdealing.com
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2012-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./cipher');
require('./cipherModes');
require('./util');

/* DES API */
module.exports = forge.des = forge.des || {};

/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
 * cipher.start({iv: iv});
 *
 * Creates an DES cipher object to encrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as binary-encoded strings of bytes or
 * byte buffers.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC' if IV is
 *          given, 'ECB' if null).
 *
 * @return the cipher.
 */
forge.des.startEncrypting = function(key, iv, output, mode) {
  var cipher = _createCipher({
    key: key,
    output: output,
    decrypt: false,
    mode: mode || (iv === null ? 'ECB' : 'CBC')
  });
  cipher.start(iv);
  return cipher;
};

/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
 *
 * Creates an DES cipher object to encrypt data using the given symmetric key.
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
forge.des.createEncryptionCipher = function(key, mode) {
  return _createCipher({
    key: key,
    output: null,
    decrypt: false,
    mode: mode
  });
};

/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
 * decipher.start({iv: iv});
 *
 * Creates an DES cipher object to decrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as binary-encoded strings of bytes or
 * byte buffers.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC' if IV is
 *          given, 'ECB' if null).
 *
 * @return the cipher.
 */
forge.des.startDecrypting = function(key, iv, output, mode) {
  var cipher = _createCipher({
    key: key,
    output: output,
    decrypt: true,
    mode: mode || (iv === null ? 'ECB' : 'CBC')
  });
  cipher.start(iv);
  return cipher;
};

/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
 *
 * Creates an DES cipher object to decrypt data using the given symmetric key.
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
forge.des.createDecryptionCipher = function(key, mode) {
  return _createCipher({
    key: key,
    output: null,
    decrypt: true,
    mode: mode
  });
};

/**
 * Creates a new DES cipher algorithm object.
 *
 * @param name the name of the algorithm.
 * @param mode the mode factory function.
 *
 * @return the DES algorithm object.
 */
forge.des.Algorithm = function(name, mode) {
  var self = this;
  self.name = name;
  self.mode = new mode({
    blockSize: 8,
    cipher: {
      encrypt: function(inBlock, outBlock) {
        return _updateBlock(self._keys, inBlock, outBlock, false);
      },
      decrypt: function(inBlock, outBlock) {
        return _updateBlock(self._keys, inBlock, outBlock, true);
      }
    }
  });
  self._init = false;
};

/**
 * Initializes this DES algorithm by expanding its key.
 *
 * @param options the options to use.
 *          key the key to use with this algorithm.
 *          decrypt true if the algorithm should be initialized for decryption,
 *            false for encryption.
 */
forge.des.Algorithm.prototype.initialize = function(options) {
  if(this._init) {
    return;
  }

  var key = forge.util.createBuffer(options.key);
  if(this.name.indexOf('3DES') === 0) {
    if(key.length() !== 24) {
      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);
    }
  }

  // do key expansion to 16 or 48 subkeys (single or triple DES)
  this._keys = _createKeys(key);
  this._init = true;
};

/** Register DES algorithms **/

registerAlgorithm('DES-ECB', forge.cipher.modes.ecb);
registerAlgorithm('DES-CBC', forge.cipher.modes.cbc);
registerAlgorithm('DES-CFB', forge.cipher.modes.cfb);
registerAlgorithm('DES-OFB', forge.cipher.modes.ofb);
registerAlgorithm('DES-CTR', forge.cipher.modes.ctr);

registerAlgorithm('3DES-ECB', forge.cipher.modes.ecb);
registerAlgorithm('3DES-CBC', forge.cipher.modes.cbc);
registerAlgorithm('3DES-CFB', forge.cipher.modes.cfb);
registerAlgorithm('3DES-OFB', forge.cipher.modes.ofb);
registerAlgorithm('3DES-CTR', forge.cipher.modes.ctr);

function registerAlgorithm(name, mode) {
  var factory = function() {
    return new forge.des.Algorithm(name, mode);
  };
  forge.cipher.registerAlgorithm(name, factory);
}

/** DES implementation **/

var spfunction1 = [0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004];
var spfunction2 = [-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000];
var spfunction3 = [0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200];
var spfunction4 = [0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080];
var spfunction5 = [0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100];
var spfunction6 = [0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010];
var spfunction7 = [0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002];
var spfunction8 = [0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000];

/**
 * Create necessary sub keys.
 *
 * @param key the 64-bit or 192-bit key.
 *
 * @return the expanded keys.
 */
function _createKeys(key) {
  var pc2bytes0  = [0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204],
      pc2bytes1  = [0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101],
      pc2bytes2  = [0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808],
      pc2bytes3  = [0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000],
      pc2bytes4  = [0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010],
      pc2bytes5  = [0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420],
      pc2bytes6  = [0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002],
      pc2bytes7  = [0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800],
      pc2bytes8  = [0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002],
      pc2bytes9  = [0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408],
      pc2bytes10 = [0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020],
      pc2bytes11 = [0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200],
      pc2bytes12 = [0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010],
      pc2bytes13 = [0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105];

  // how many iterations (1 for des, 3 for triple des)
  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys
  var iterations = key.length() > 8 ? 3 : 1;

  // stores the return keys
  var keys = [];

  // now define the left shifts which need to be done
  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];

  var n = 0, tmp;
  for(var j = 0; j < iterations; j++) {
    var left = key.getInt32();
    var right = key.getInt32();

    tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
    right ^= tmp;
    left ^= (tmp << 4);

    tmp = ((right >>> -16) ^ left) & 0x0000ffff;
    left ^= tmp;
    right ^= (tmp << -16);

    tmp = ((left >>> 2) ^ right) & 0x33333333;
    right ^= tmp;
    left ^= (tmp << 2);

    tmp = ((right >>> -16) ^ left) & 0x0000ffff;
    left ^= tmp;
    right ^= (tmp << -16);

    tmp = ((left >>> 1) ^ right) & 0x55555555;
    right ^= tmp;
    left ^= (tmp << 1);

    tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
    left ^= tmp;
    right ^= (tmp << 8);

    tmp = ((left >>> 1) ^ right) & 0x55555555;
    right ^= tmp;
    left ^= (tmp << 1);

    // right needs to be shifted and OR'd with last four bits of left
    tmp = (left << 8) | ((right >>> 20) & 0x000000f0);

    // left needs to be put upside down
    left = ((right << 24) | ((right << 8) & 0xff0000) |
      ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0));
    right = tmp;

    // now go through and perform these shifts on the left and right keys
    for(var i = 0; i < shifts.length; ++i) {
      //shift the keys either one or two bits to the left
      if(shifts[i]) {
        left = (left << 2) | (left >>> 26);
        right = (right << 2) | (right >>> 26);
      } else {
        left = (left << 1) | (left >>> 27);
        right = (right << 1) | (right >>> 27);
      }
      left &= -0xf;
      right &= -0xf;

      // now apply PC-2, in such a way that E is easier when encrypting or
      // decrypting this conversion will look like PC-2 except only the last 6
      // bits of each byte are used rather than 48 consecutive bits and the
      // order of lines will be according to how the S selection functions will
      // be applied: S2, S4, S6, S8, S1, S3, S5, S7
      var lefttmp = (
        pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] |
        pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] |
        pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] |
        pc2bytes6[(left >>> 4) & 0xf]);
      var righttmp = (
        pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] |
        pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] |
        pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] |
        pc2bytes13[(right >>> 4) & 0xf]);
      tmp = ((righttmp >>> 16) ^ lefttmp) & 0x0000ffff;
      keys[n++] = lefttmp ^ tmp;
      keys[n++] = righttmp ^ (tmp << 16);
    }
  }

  return keys;
}

/**
 * Updates a single block (1 byte) using DES. The update will either
 * encrypt or decrypt the block.
 *
 * @param keys the expanded keys.
 * @param input the input block (an array of 32-bit words).
 * @param output the updated output block.
 * @param decrypt true to decrypt the block, false to encrypt it.
 */
function _updateBlock(keys, input, output, decrypt) {
  // set up loops for single or triple DES
  var iterations = keys.length === 32 ? 3 : 9;
  var looping;
  if(iterations === 3) {
    looping = decrypt ? [30, -2, -2] : [0, 32, 2];
  } else {
    looping = (decrypt ?
      [94, 62, -2, 32, 64, 2, 30, -2, -2] :
      [0, 32, 2, 62, 30, -2, 64, 96, 2]);
  }

  var tmp;

  var left = input[0];
  var right = input[1];

  // first each 64 bit chunk of the message must be permuted according to IP
  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
  right ^= tmp;
  left ^= (tmp << 4);

  tmp = ((left >>> 16) ^ right) & 0x0000ffff;
  right ^= tmp;
  left ^= (tmp << 16);

  tmp = ((right >>> 2) ^ left) & 0x33333333;
  left ^= tmp;
  right ^= (tmp << 2);

  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
  left ^= tmp;
  right ^= (tmp << 8);

  tmp = ((left >>> 1) ^ right) & 0x55555555;
  right ^= tmp;
  left ^= (tmp << 1);

  // rotate left 1 bit
  left = ((left << 1) | (left >>> 31));
  right = ((right << 1) | (right >>> 31));

  for(var j = 0; j < iterations; j += 3) {
    var endloop = looping[j + 1];
    var loopinc = looping[j + 2];

    // now go through and perform the encryption or decryption
    for(var i = looping[j]; i != endloop; i += loopinc) {
      var right1 = right ^ keys[i];
      var right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];

      // passing these bytes through the S selection functions
      tmp = left;
      left = right;
      right = tmp ^ (
        spfunction2[(right1 >>> 24) & 0x3f] |
        spfunction4[(right1 >>> 16) & 0x3f] |
        spfunction6[(right1 >>>  8) & 0x3f] |
        spfunction8[right1 & 0x3f] |
        spfunction1[(right2 >>> 24) & 0x3f] |
        spfunction3[(right2 >>> 16) & 0x3f] |
        spfunction5[(right2 >>>  8) & 0x3f] |
        spfunction7[right2 & 0x3f]);
    }
    // unreverse left and right
    tmp = left;
    left = right;
    right = tmp;
  }

  // rotate right 1 bit
  left = ((left >>> 1) | (left << 31));
  right = ((right >>> 1) | (right << 31));

  // now perform IP-1, which is IP in the opposite direction
  tmp = ((left >>> 1) ^ right) & 0x55555555;
  right ^= tmp;
  left ^= (tmp << 1);

  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
  left ^= tmp;
  right ^= (tmp << 8);

  tmp = ((right >>> 2) ^ left) & 0x33333333;
  left ^= tmp;
  right ^= (tmp << 2);

  tmp = ((left >>> 16) ^ right) & 0x0000ffff;
  right ^= tmp;
  left ^= (tmp << 16);

  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
  right ^= tmp;
  left ^= (tmp << 4);

  output[0] = left;
  output[1] = right;
}

/**
 * Deprecated. Instead, use:
 *
 * forge.cipher.createCipher('DES-<mode>', key);
 * forge.cipher.createDecipher('DES-<mode>', key);
 *
 * Creates a deprecated DES cipher object. This object's mode will default to
 * CBC (cipher-block-chaining).
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param options the options to use.
 *          key the symmetric key to use (64 or 192 bits).
 *          output the buffer to write to.
 *          decrypt true for decryption, false for encryption.
 *          mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
function _createCipher(options) {
  options = options || {};
  var mode = (options.mode || 'CBC').toUpperCase();
  var algorithm = 'DES-' + mode;

  var cipher;
  if(options.decrypt) {
    cipher = forge.cipher.createDecipher(algorithm, options.key);
  } else {
    cipher = forge.cipher.createCipher(algorithm, options.key);
  }

  // backwards compatible start API
  var start = cipher.start;
  cipher.start = function(iv, options) {
    // backwards compatibility: support second arg as output buffer
    var output = null;
    if(options instanceof forge.util.ByteBuffer) {
      output = options;
      options = {};
    }
    options = options || {};
    options.output = output;
    options.iv = iv;
    start.call(cipher, options);
  };

  return cipher;
}
/**
 * JavaScript implementation of Ed25519.
 *
 * Copyright (c) 2017-2019 Digital Bazaar, Inc.
 *
 * This implementation is based on the most excellent TweetNaCl which is
 * in the public domain. Many thanks to its contributors:
 *
 * https://github.com/dchest/tweetnacl-js
 */
var forge = require('./forge');
require('./jsbn');
require('./random');
require('./sha512');
require('./util');
var asn1Validator = require('./asn1-validator');
var publicKeyValidator = asn1Validator.publicKeyValidator;
var privateKeyValidator = asn1Validator.privateKeyValidator;

if(typeof BigInteger === 'undefined') {
  var BigInteger = forge.jsbn.BigInteger;
}

var ByteBuffer = forge.util.ByteBuffer;
var NativeBuffer = typeof Buffer === 'undefined' ? Uint8Array : Buffer;

/*
 * Ed25519 algorithms, see RFC 8032:
 * https://tools.ietf.org/html/rfc8032
 */
forge.pki = forge.pki || {};
module.exports = forge.pki.ed25519 = forge.ed25519 = forge.ed25519 || {};
var ed25519 = forge.ed25519;

ed25519.constants = {};
ed25519.constants.PUBLIC_KEY_BYTE_LENGTH = 32;
ed25519.constants.PRIVATE_KEY_BYTE_LENGTH = 64;
ed25519.constants.SEED_BYTE_LENGTH = 32;
ed25519.constants.SIGN_BYTE_LENGTH = 64;
ed25519.constants.HASH_BYTE_LENGTH = 64;

ed25519.generateKeyPair = function(options) {
  options = options || {};
  var seed = options.seed;
  if(seed === undefined) {
    // generate seed
    seed = forge.random.getBytesSync(ed25519.constants.SEED_BYTE_LENGTH);
  } else if(typeof seed === 'string') {
    if(seed.length !== ed25519.constants.SEED_BYTE_LENGTH) {
      throw new TypeError(
        '"seed" must be ' + ed25519.constants.SEED_BYTE_LENGTH +
        ' bytes in length.');
    }
  } else if(!(seed instanceof Uint8Array)) {
    throw new TypeError(
      '"seed" must be a node.js Buffer, Uint8Array, or a binary string.');
  }

  seed = messageToNativeBuffer({message: seed, encoding: 'binary'});

  var pk = new NativeBuffer(ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);
  var sk = new NativeBuffer(ed25519.constants.PRIVATE_KEY_BYTE_LENGTH);
  for(var i = 0; i < 32; ++i) {
    sk[i] = seed[i];
  }
  crypto_sign_keypair(pk, sk);
  return {publicKey: pk, privateKey: sk};
};

/**
 * Converts a private key from a RFC8410 ASN.1 encoding.
 *
 * @param obj - The asn1 representation of a private key.
 *
 * @returns {Object} keyInfo - The key information.
 * @returns {Buffer|Uint8Array} keyInfo.privateKeyBytes - 32 private key bytes.
 */
ed25519.privateKeyFromAsn1 = function(obj) {
  var capture = {};
  var errors = [];
  var valid = forge.asn1.validate(obj, privateKeyValidator, capture, errors);
  if(!valid) {
    var error = new Error('Invalid Key.');
    error.errors = errors;
    throw error;
  }
  var oid = forge.asn1.derToOid(capture.privateKeyOid);
  var ed25519Oid = forge.oids.EdDSA25519;
  if(oid !== ed25519Oid) {
    throw new Error('Invalid OID "' + oid + '"; OID must be "' +
      ed25519Oid + '".');
  }
  var privateKey = capture.privateKey;
  // manually extract the private key bytes from nested octet string, see FIXME:
  // https://github.com/digitalbazaar/forge/blob/master/lib/asn1.js#L542
  var privateKeyBytes = messageToNativeBuffer({
    message: forge.asn1.fromDer(privateKey).value,
    encoding: 'binary'
  });
  // TODO: RFC8410 specifies a format for encoding the public key bytes along
  // with the private key bytes. `publicKeyBytes` can be returned in the
  // future. https://tools.ietf.org/html/rfc8410#section-10.3
  return {privateKeyBytes: privateKeyBytes};
};

/**
 * Converts a public key from a RFC8410 ASN.1 encoding.
 *
 * @param obj - The asn1 representation of a public key.
 *
 * @return {Buffer|Uint8Array} - 32 public key bytes.
 */
ed25519.publicKeyFromAsn1 = function(obj) {
  // get SubjectPublicKeyInfo
  var capture = {};
  var errors = [];
  var valid = forge.asn1.validate(obj, publicKeyValidator, capture, errors);
  if(!valid) {
    var error = new Error('Invalid Key.');
    error.errors = errors;
    throw error;
  }
  var oid = forge.asn1.derToOid(capture.publicKeyOid);
  var ed25519Oid = forge.oids.EdDSA25519;
  if(oid !== ed25519Oid) {
    throw new Error('Invalid OID "' + oid + '"; OID must be "' +
      ed25519Oid + '".');
  }
  var publicKeyBytes = capture.ed25519PublicKey;
  if(publicKeyBytes.length !== ed25519.constants.PUBLIC_KEY_BYTE_LENGTH) {
    throw new Error('Key length is invalid.');
  }
  return messageToNativeBuffer({
    message: publicKeyBytes,
    encoding: 'binary'
  });
};

ed25519.publicKeyFromPrivateKey = function(options) {
  options = options || {};
  var privateKey = messageToNativeBuffer({
    message: options.privateKey, encoding: 'binary'
  });
  if(privateKey.length !== ed25519.constants.PRIVATE_KEY_BYTE_LENGTH) {
    throw new TypeError(
      '"options.privateKey" must have a byte length of ' +
      ed25519.constants.PRIVATE_KEY_BYTE_LENGTH);
  }

  var pk = new NativeBuffer(ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);
  for(var i = 0; i < pk.length; ++i) {
    pk[i] = privateKey[32 + i];
  }
  return pk;
};

ed25519.sign = function(options) {
  options = options || {};
  var msg = messageToNativeBuffer(options);
  var privateKey = messageToNativeBuffer({
    message: options.privateKey,
    encoding: 'binary'
  });
  if(privateKey.length === ed25519.constants.SEED_BYTE_LENGTH) {
    var keyPair = ed25519.generateKeyPair({seed: privateKey});
    privateKey = keyPair.privateKey;
  } else if(privateKey.length !== ed25519.constants.PRIVATE_KEY_BYTE_LENGTH) {
    throw new TypeError(
      '"options.privateKey" must have a byte length of ' +
      ed25519.constants.SEED_BYTE_LENGTH + ' or ' +
      ed25519.constants.PRIVATE_KEY_BYTE_LENGTH);
  }

  var signedMsg = new NativeBuffer(
    ed25519.constants.SIGN_BYTE_LENGTH + msg.length);
  crypto_sign(signedMsg, msg, msg.length, privateKey);

  var sig = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH);
  for(var i = 0; i < sig.length; ++i) {
    sig[i] = signedMsg[i];
  }
  return sig;
};

ed25519.verify = function(options) {
  options = options || {};
  var msg = messageToNativeBuffer(options);
  if(options.signature === undefined) {
    throw new TypeError(
      '"options.signature" must be a node.js Buffer, a Uint8Array, a forge ' +
      'ByteBuffer, or a binary string.');
  }
  var sig = messageToNativeBuffer({
    message: options.signature,
    encoding: 'binary'
  });
  if(sig.length !== ed25519.constants.SIGN_BYTE_LENGTH) {
    throw new TypeError(
      '"options.signature" must have a byte length of ' +
      ed25519.constants.SIGN_BYTE_LENGTH);
  }
  var publicKey = messageToNativeBuffer({
    message: options.publicKey,
    encoding: 'binary'
  });
  if(publicKey.length !== ed25519.constants.PUBLIC_KEY_BYTE_LENGTH) {
    throw new TypeError(
      '"options.publicKey" must have a byte length of ' +
      ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);
  }

  var sm = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH + msg.length);
  var m = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH + msg.length);
  var i;
  for(i = 0; i < ed25519.constants.SIGN_BYTE_LENGTH; ++i) {
    sm[i] = sig[i];
  }
  for(i = 0; i < msg.length; ++i) {
    sm[i + ed25519.constants.SIGN_BYTE_LENGTH] = msg[i];
  }
  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
};

function messageToNativeBuffer(options) {
  var message = options.message;
  if(message instanceof Uint8Array || message instanceof NativeBuffer) {
    return message;
  }

  var encoding = options.encoding;
  if(message === undefined) {
    if(options.md) {
      // TODO: more rigorous validation that `md` is a MessageDigest
      message = options.md.digest().getBytes();
      encoding = 'binary';
    } else {
      throw new TypeError('"options.message" or "options.md" not specified.');
    }
  }

  if(typeof message === 'string' && !encoding) {
    throw new TypeError('"options.encoding" must be "binary" or "utf8".');
  }

  if(typeof message === 'string') {
    if(typeof Buffer !== 'undefined') {
      return Buffer.from(message, encoding);
    }
    message = new ByteBuffer(message, encoding);
  } else if(!(message instanceof ByteBuffer)) {
    throw new TypeError(
      '"options.message" must be a node.js Buffer, a Uint8Array, a forge ' +
      'ByteBuffer, or a string with "options.encoding" specifying its ' +
      'encoding.');
  }

  // convert to native buffer
  var buffer = new NativeBuffer(message.length());
  for(var i = 0; i < buffer.length; ++i) {
    buffer[i] = message.at(i);
  }
  return buffer;
}

var gf0 = gf();
var gf1 = gf([1]);
var D = gf([
  0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070,
  0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]);
var D2 = gf([
  0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0,
  0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]);
var X = gf([
  0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c,
  0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]);
var Y = gf([
  0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666,
  0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]);
var L = new Float64Array([
  0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
  0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);
var I = gf([
  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43,
  0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

// TODO: update forge buffer implementation to use `Buffer` or `Uint8Array`,
// whichever is available, to improve performance
function sha512(msg, msgLen) {
  // Note: `out` and `msg` are NativeBuffer
  var md = forge.md.sha512.create();
  var buffer = new ByteBuffer(msg);
  md.update(buffer.getBytes(msgLen), 'binary');
  var hash = md.digest().getBytes();
  if(typeof Buffer !== 'undefined') {
    return Buffer.from(hash, 'binary');
  }
  var out = new NativeBuffer(ed25519.constants.HASH_BYTE_LENGTH);
  for(var i = 0; i < 64; ++i) {
    out[i] = hash.charCodeAt(i);
  }
  return out;
}

function crypto_sign_keypair(pk, sk) {
  var p = [gf(), gf(), gf(), gf()];
  var i;

  var d = sha512(sk, 32);
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  scalarbase(p, d);
  pack(pk, p);

  for(i = 0; i < 32; ++i) {
    sk[i + 32] = pk[i];
  }
  return 0;
}

// Note: difference from C - smlen returned, not passed as argument.
function crypto_sign(sm, m, n, sk) {
  var i, j, x = new Float64Array(64);
  var p = [gf(), gf(), gf(), gf()];

  var d = sha512(sk, 32);
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  var smlen = n + 64;
  for(i = 0; i < n; ++i) {
    sm[64 + i] = m[i];
  }
  for(i = 0; i < 32; ++i) {
    sm[32 + i] = d[32 + i];
  }

  var r = sha512(sm.subarray(32), n + 32);
  reduce(r);
  scalarbase(p, r);
  pack(sm, p);

  for(i = 32; i < 64; ++i) {
    sm[i] = sk[i];
  }
  var h = sha512(sm, n + 64);
  reduce(h);

  for(i = 32; i < 64; ++i) {
    x[i] = 0;
  }
  for(i = 0; i < 32; ++i) {
    x[i] = r[i];
  }
  for(i = 0; i < 32; ++i) {
    for(j = 0; j < 32; j++) {
      x[i + j] += h[i] * d[j];
    }
  }

  modL(sm.subarray(32), x);
  return smlen;
}

function crypto_sign_open(m, sm, n, pk) {
  var i, mlen;
  var t = new NativeBuffer(32);
  var p = [gf(), gf(), gf(), gf()],
      q = [gf(), gf(), gf(), gf()];

  mlen = -1;
  if(n < 64) {
    return -1;
  }

  if(unpackneg(q, pk)) {
    return -1;
  }

  for(i = 0; i < n; ++i) {
    m[i] = sm[i];
  }
  for(i = 0; i < 32; ++i) {
    m[i + 32] = pk[i];
  }
  var h = sha512(m, n);
  reduce(h);
  scalarmult(p, q, h);

  scalarbase(q, sm.subarray(32));
  add(p, q);
  pack(t, p);

  n -= 64;
  if(crypto_verify_32(sm, 0, t, 0)) {
    for(i = 0; i < n; ++i) {
      m[i] = 0;
    }
    return -1;
  }

  for(i = 0; i < n; ++i) {
    m[i] = sm[i + 64];
  }
  mlen = n;
  return mlen;
}

function modL(r, x) {
  var carry, i, j, k;
  for(i = 63; i >= 32; --i) {
    carry = 0;
    for(j = i - 32, k = i - 12; j < k; ++j) {
      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
      carry = (x[j] + 128) >> 8;
      x[j] -= carry * 256;
    }
    x[j] += carry;
    x[i] = 0;
  }
  carry = 0;
  for(j = 0; j < 32; ++j) {
    x[j] += carry - (x[31] >> 4) * L[j];
    carry = x[j] >> 8;
    x[j] &= 255;
  }
  for(j = 0; j < 32; ++j) {
    x[j] -= carry * L[j];
  }
  for(i = 0; i < 32; ++i) {
    x[i + 1] += x[i] >> 8;
    r[i] = x[i] & 255;
  }
}

function reduce(r) {
  var x = new Float64Array(64);
  for(var i = 0; i < 64; ++i) {
    x[i] = r[i];
    r[i] = 0;
  }
  modL(r, x);
}

function add(p, q) {
  var a = gf(), b = gf(), c = gf(),
      d = gf(), e = gf(), f = gf(),
      g = gf(), h = gf(), t = gf();

  Z(a, p[1], p[0]);
  Z(t, q[1], q[0]);
  M(a, a, t);
  A(b, p[0], p[1]);
  A(t, q[0], q[1]);
  M(b, b, t);
  M(c, p[3], q[3]);
  M(c, c, D2);
  M(d, p[2], q[2]);
  A(d, d, d);
  Z(e, b, a);
  Z(f, d, c);
  A(g, d, c);
  A(h, b, a);

  M(p[0], e, f);
  M(p[1], h, g);
  M(p[2], g, f);
  M(p[3], e, h);
}

function cswap(p, q, b) {
  for(var i = 0; i < 4; ++i) {
    sel25519(p[i], q[i], b);
  }
}

function pack(r, p) {
  var tx = gf(), ty = gf(), zi = gf();
  inv25519(zi, p[2]);
  M(tx, p[0], zi);
  M(ty, p[1], zi);
  pack25519(r, ty);
  r[31] ^= par25519(tx) << 7;
}

function pack25519(o, n) {
  var i, j, b;
  var m = gf(), t = gf();
  for(i = 0; i < 16; ++i) {
    t[i] = n[i];
  }
  car25519(t);
  car25519(t);
  car25519(t);
  for(j = 0; j < 2; ++j) {
    m[0] = t[0] - 0xffed;
    for(i = 1; i < 15; ++i) {
      m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
      m[i-1] &= 0xffff;
    }
    m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
    b = (m[15] >> 16) & 1;
    m[14] &= 0xffff;
    sel25519(t, m, 1 - b);
  }
  for (i = 0; i < 16; i++) {
    o[2 * i] = t[i] & 0xff;
    o[2 * i + 1] = t[i] >> 8;
  }
}

function unpackneg(r, p) {
  var t = gf(), chk = gf(), num = gf(),
      den = gf(), den2 = gf(), den4 = gf(),
      den6 = gf();

  set25519(r[2], gf1);
  unpack25519(r[1], p);
  S(num, r[1]);
  M(den, num, D);
  Z(num, num, r[2]);
  A(den, r[2], den);

  S(den2, den);
  S(den4, den2);
  M(den6, den4, den2);
  M(t, den6, num);
  M(t, t, den);

  pow2523(t, t);
  M(t, t, num);
  M(t, t, den);
  M(t, t, den);
  M(r[0], t, den);

  S(chk, r[0]);
  M(chk, chk, den);
  if(neq25519(chk, num)) {
    M(r[0], r[0], I);
  }

  S(chk, r[0]);
  M(chk, chk, den);
  if(neq25519(chk, num)) {
    return -1;
  }

  if(par25519(r[0]) === (p[31] >> 7)) {
    Z(r[0], gf0, r[0]);
  }

  M(r[3], r[0], r[1]);
  return 0;
}

function unpack25519(o, n) {
  var i;
  for(i = 0; i < 16; ++i) {
    o[i] = n[2 * i] + (n[2 * i + 1] << 8);
  }
  o[15] &= 0x7fff;
}

function pow2523(o, i) {
  var c = gf();
  var a;
  for(a = 0; a < 16; ++a) {
    c[a] = i[a];
  }
  for(a = 250; a >= 0; --a) {
    S(c, c);
    if(a !== 1) {
      M(c, c, i);
    }
  }
  for(a = 0; a < 16; ++a) {
    o[a] = c[a];
  }
}

function neq25519(a, b) {
  var c = new NativeBuffer(32);
  var d = new NativeBuffer(32);
  pack25519(c, a);
  pack25519(d, b);
  return crypto_verify_32(c, 0, d, 0);
}

function crypto_verify_32(x, xi, y, yi) {
  return vn(x, xi, y, yi, 32);
}

function vn(x, xi, y, yi, n) {
  var i, d = 0;
  for(i = 0; i < n; ++i) {
    d |= x[xi + i] ^ y[yi + i];
  }
  return (1 & ((d - 1) >>> 8)) - 1;
}

function par25519(a) {
  var d = new NativeBuffer(32);
  pack25519(d, a);
  return d[0] & 1;
}

function scalarmult(p, q, s) {
  var b, i;
  set25519(p[0], gf0);
  set25519(p[1], gf1);
  set25519(p[2], gf1);
  set25519(p[3], gf0);
  for(i = 255; i >= 0; --i) {
    b = (s[(i / 8)|0] >> (i & 7)) & 1;
    cswap(p, q, b);
    add(q, p);
    add(p, p);
    cswap(p, q, b);
  }
}

function scalarbase(p, s) {
  var q = [gf(), gf(), gf(), gf()];
  set25519(q[0], X);
  set25519(q[1], Y);
  set25519(q[2], gf1);
  M(q[3], X, Y);
  scalarmult(p, q, s);
}

function set25519(r, a) {
  var i;
  for(i = 0; i < 16; i++) {
    r[i] = a[i] | 0;
  }
}

function inv25519(o, i) {
  var c = gf();
  var a;
  for(a = 0; a < 16; ++a) {
    c[a] = i[a];
  }
  for(a = 253; a >= 0; --a) {
    S(c, c);
    if(a !== 2 && a !== 4) {
      M(c, c, i);
    }
  }
  for(a = 0; a < 16; ++a) {
    o[a] = c[a];
  }
}

function car25519(o) {
  var i, v, c = 1;
  for(i = 0; i < 16; ++i) {
    v = o[i] + c + 65535;
    c = Math.floor(v / 65536);
    o[i] = v - c * 65536;
  }
  o[0] += c - 1 + 37 * (c - 1);
}

function sel25519(p, q, b) {
  var t, c = ~(b - 1);
  for(var i = 0; i < 16; ++i) {
    t = c & (p[i] ^ q[i]);
    p[i] ^= t;
    q[i] ^= t;
  }
}

function gf(init) {
  var i, r = new Float64Array(16);
  if(init) {
    for(i = 0; i < init.length; ++i) {
      r[i] = init[i];
    }
  }
  return r;
}

function A(o, a, b) {
  for(var i = 0; i < 16; ++i) {
    o[i] = a[i] + b[i];
  }
}

function Z(o, a, b) {
  for(var i = 0; i < 16; ++i) {
    o[i] = a[i] - b[i];
  }
}

function S(o, a) {
  M(o, a, a);
}

function M(o, a, b) {
  var v, c,
     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
    b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3],
    b4 = b[4],
    b5 = b[5],
    b6 = b[6],
    b7 = b[7],
    b8 = b[8],
    b9 = b[9],
    b10 = b[10],
    b11 = b[11],
    b12 = b[12],
    b13 = b[13],
    b14 = b[14],
    b15 = b[15];

  v = a[0];
  t0 += v * b0;
  t1 += v * b1;
  t2 += v * b2;
  t3 += v * b3;
  t4 += v * b4;
  t5 += v * b5;
  t6 += v * b6;
  t7 += v * b7;
  t8 += v * b8;
  t9 += v * b9;
  t10 += v * b10;
  t11 += v * b11;
  t12 += v * b12;
  t13 += v * b13;
  t14 += v * b14;
  t15 += v * b15;
  v = a[1];
  t1 += v * b0;
  t2 += v * b1;
  t3 += v * b2;
  t4 += v * b3;
  t5 += v * b4;
  t6 += v * b5;
  t7 += v * b6;
  t8 += v * b7;
  t9 += v * b8;
  t10 += v * b9;
  t11 += v * b10;
  t12 += v * b11;
  t13 += v * b12;
  t14 += v * b13;
  t15 += v * b14;
  t16 += v * b15;
  v = a[2];
  t2 += v * b0;
  t3 += v * b1;
  t4 += v * b2;
  t5 += v * b3;
  t6 += v * b4;
  t7 += v * b5;
  t8 += v * b6;
  t9 += v * b7;
  t10 += v * b8;
  t11 += v * b9;
  t12 += v * b10;
  t13 += v * b11;
  t14 += v * b12;
  t15 += v * b13;
  t16 += v * b14;
  t17 += v * b15;
  v = a[3];
  t3 += v * b0;
  t4 += v * b1;
  t5 += v * b2;
  t6 += v * b3;
  t7 += v * b4;
  t8 += v * b5;
  t9 += v * b6;
  t10 += v * b7;
  t11 += v * b8;
  t12 += v * b9;
  t13 += v * b10;
  t14 += v * b11;
  t15 += v * b12;
  t16 += v * b13;
  t17 += v * b14;
  t18 += v * b15;
  v = a[4];
  t4 += v * b0;
  t5 += v * b1;
  t6 += v * b2;
  t7 += v * b3;
  t8 += v * b4;
  t9 += v * b5;
  t10 += v * b6;
  t11 += v * b7;
  t12 += v * b8;
  t13 += v * b9;
  t14 += v * b10;
  t15 += v * b11;
  t16 += v * b12;
  t17 += v * b13;
  t18 += v * b14;
  t19 += v * b15;
  v = a[5];
  t5 += v * b0;
  t6 += v * b1;
  t7 += v * b2;
  t8 += v * b3;
  t9 += v * b4;
  t10 += v * b5;
  t11 += v * b6;
  t12 += v * b7;
  t13 += v * b8;
  t14 += v * b9;
  t15 += v * b10;
  t16 += v * b11;
  t17 += v * b12;
  t18 += v * b13;
  t19 += v * b14;
  t20 += v * b15;
  v = a[6];
  t6 += v * b0;
  t7 += v * b1;
  t8 += v * b2;
  t9 += v * b3;
  t10 += v * b4;
  t11 += v * b5;
  t12 += v * b6;
  t13 += v * b7;
  t14 += v * b8;
  t15 += v * b9;
  t16 += v * b10;
  t17 += v * b11;
  t18 += v * b12;
  t19 += v * b13;
  t20 += v * b14;
  t21 += v * b15;
  v = a[7];
  t7 += v * b0;
  t8 += v * b1;
  t9 += v * b2;
  t10 += v * b3;
  t11 += v * b4;
  t12 += v * b5;
  t13 += v * b6;
  t14 += v * b7;
  t15 += v * b8;
  t16 += v * b9;
  t17 += v * b10;
  t18 += v * b11;
  t19 += v * b12;
  t20 += v * b13;
  t21 += v * b14;
  t22 += v * b15;
  v = a[8];
  t8 += v * b0;
  t9 += v * b1;
  t10 += v * b2;
  t11 += v * b3;
  t12 += v * b4;
  t13 += v * b5;
  t14 += v * b6;
  t15 += v * b7;
  t16 += v * b8;
  t17 += v * b9;
  t18 += v * b10;
  t19 += v * b11;
  t20 += v * b12;
  t21 += v * b13;
  t22 += v * b14;
  t23 += v * b15;
  v = a[9];
  t9 += v * b0;
  t10 += v * b1;
  t11 += v * b2;
  t12 += v * b3;
  t13 += v * b4;
  t14 += v * b5;
  t15 += v * b6;
  t16 += v * b7;
  t17 += v * b8;
  t18 += v * b9;
  t19 += v * b10;
  t20 += v * b11;
  t21 += v * b12;
  t22 += v * b13;
  t23 += v * b14;
  t24 += v * b15;
  v = a[10];
  t10 += v * b0;
  t11 += v * b1;
  t12 += v * b2;
  t13 += v * b3;
  t14 += v * b4;
  t15 += v * b5;
  t16 += v * b6;
  t17 += v * b7;
  t18 += v * b8;
  t19 += v * b9;
  t20 += v * b10;
  t21 += v * b11;
  t22 += v * b12;
  t23 += v * b13;
  t24 += v * b14;
  t25 += v * b15;
  v = a[11];
  t11 += v * b0;
  t12 += v * b1;
  t13 += v * b2;
  t14 += v * b3;
  t15 += v * b4;
  t16 += v * b5;
  t17 += v * b6;
  t18 += v * b7;
  t19 += v * b8;
  t20 += v * b9;
  t21 += v * b10;
  t22 += v * b11;
  t23 += v * b12;
  t24 += v * b13;
  t25 += v * b14;
  t26 += v * b15;
  v = a[12];
  t12 += v * b0;
  t13 += v * b1;
  t14 += v * b2;
  t15 += v * b3;
  t16 += v * b4;
  t17 += v * b5;
  t18 += v * b6;
  t19 += v * b7;
  t20 += v * b8;
  t21 += v * b9;
  t22 += v * b10;
  t23 += v * b11;
  t24 += v * b12;
  t25 += v * b13;
  t26 += v * b14;
  t27 += v * b15;
  v = a[13];
  t13 += v * b0;
  t14 += v * b1;
  t15 += v * b2;
  t16 += v * b3;
  t17 += v * b4;
  t18 += v * b5;
  t19 += v * b6;
  t20 += v * b7;
  t21 += v * b8;
  t22 += v * b9;
  t23 += v * b10;
  t24 += v * b11;
  t25 += v * b12;
  t26 += v * b13;
  t27 += v * b14;
  t28 += v * b15;
  v = a[14];
  t14 += v * b0;
  t15 += v * b1;
  t16 += v * b2;
  t17 += v * b3;
  t18 += v * b4;
  t19 += v * b5;
  t20 += v * b6;
  t21 += v * b7;
  t22 += v * b8;
  t23 += v * b9;
  t24 += v * b10;
  t25 += v * b11;
  t26 += v * b12;
  t27 += v * b13;
  t28 += v * b14;
  t29 += v * b15;
  v = a[15];
  t15 += v * b0;
  t16 += v * b1;
  t17 += v * b2;
  t18 += v * b3;
  t19 += v * b4;
  t20 += v * b5;
  t21 += v * b6;
  t22 += v * b7;
  t23 += v * b8;
  t24 += v * b9;
  t25 += v * b10;
  t26 += v * b11;
  t27 += v * b12;
  t28 += v * b13;
  t29 += v * b14;
  t30 += v * b15;

  t0  += 38 * t16;
  t1  += 38 * t17;
  t2  += 38 * t18;
  t3  += 38 * t19;
  t4  += 38 * t20;
  t5  += 38 * t21;
  t6  += 38 * t22;
  t7  += 38 * t23;
  t8  += 38 * t24;
  t9  += 38 * t25;
  t10 += 38 * t26;
  t11 += 38 * t27;
  t12 += 38 * t28;
  t13 += 38 * t29;
  t14 += 38 * t30;
  // t15 left as is

  // first car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  // second car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  o[ 0] = t0;
  o[ 1] = t1;
  o[ 2] = t2;
  o[ 3] = t3;
  o[ 4] = t4;
  o[ 5] = t5;
  o[ 6] = t6;
  o[ 7] = t7;
  o[ 8] = t8;
  o[ 9] = t9;
  o[10] = t10;
  o[11] = t11;
  o[12] = t12;
  o[13] = t13;
  o[14] = t14;
  o[15] = t15;
}
/**
 * Node.js module for Forge.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */
module.exports = {
  // default options
  options: {
    usePureJavaScript: false
  }
};
/**
 * Functions for manipulating web forms.
 *
 * @author David I. Lehn <dlehn@digitalbazaar.com>
 * @author Dave Longley
 * @author Mike Johnson
 *
 * Copyright (c) 2011-2014 Digital Bazaar, Inc. All rights reserved.
 */
var forge = require('./forge');

/* Form API */
var form = module.exports = forge.form = forge.form || {};

(function($) {

/**
 * Regex for parsing a single name property (handles array brackets).
 */
var _regex = /([^\[]*?)\[(.*?)\]/g;

/**
 * Parses a single name property into an array with the name and any
 * array indices.
 *
 * @param name the name to parse.
 *
 * @return the array of the name and its array indices in order.
 */
var _parseName = function(name) {
  var rval = [];

  var matches;
  while(!!(matches = _regex.exec(name))) {
    if(matches[1].length > 0) {
      rval.push(matches[1]);
    }
    if(matches.length >= 2) {
      rval.push(matches[2]);
    }
  }
  if(rval.length === 0) {
    rval.push(name);
  }

  return rval;
};

/**
 * Adds a field from the given form to the given object.
 *
 * @param obj the object.
 * @param names the field as an array of object property names.
 * @param value the value of the field.
 * @param dict a dictionary of names to replace.
 */
var _addField = function(obj, names, value, dict) {
  // combine array names that fall within square brackets
  var tmp = [];
  for(var i = 0; i < names.length; ++i) {
    // check name for starting square bracket but no ending one
    var name = names[i];
    if(name.indexOf('[') !== -1 && name.indexOf(']') === -1 &&
      i < names.length - 1) {
      do {
        name += '.' + names[++i];
      } while(i < names.length - 1 && names[i].indexOf(']') === -1);
    }
    tmp.push(name);
  }
  names = tmp;

  // split out array indexes
  var tmp = [];
  $.each(names, function(n, name) {
    tmp = tmp.concat(_parseName(name));
  });
  names = tmp;

  // iterate over object property names until value is set
  $.each(names, function(n, name) {
    // do dictionary name replacement
    if(dict && name.length !== 0 && name in dict) {
       name = dict[name];
    }

    // blank name indicates appending to an array, set name to
    // new last index of array
    if(name.length === 0) {
       name = obj.length;
    }

    // value already exists, append value
    if(obj[name]) {
      // last name in the field
      if(n == names.length - 1) {
        // more than one value, so convert into an array
        if(!$.isArray(obj[name])) {
          obj[name] = [obj[name]];
        }
        obj[name].push(value);
      } else {
        // not last name, go deeper into object
        obj = obj[name];
      }
    } else if(n == names.length - 1) {
      // new value, last name in the field, set value
      obj[name] = value;
    } else {
      // new value, not last name, go deeper
      // get next name
      var next = names[n + 1];

      // blank next value indicates array-appending, so create array
      if(next.length === 0) {
         obj[name] = [];
      } else {
        // if next name is a number create an array, otherwise a map
        var isNum = ((next - 0) == next && next.length > 0);
        obj[name] = isNum ? [] : {};
      }
      obj = obj[name];
    }
  });
};

/**
 * Serializes a form to a JSON object. Object properties will be separated
 * using the given separator (defaults to '.') and by square brackets.
 *
 * @param input the jquery form to serialize.
 * @param sep the object-property separator (defaults to '.').
 * @param dict a dictionary of names to replace (name=replace).
 *
 * @return the JSON-serialized form.
 */
form.serialize = function(input, sep, dict) {
  var rval = {};

  // add all fields in the form to the object
  sep = sep || '.';
  $.each(input.serializeArray(), function() {
    _addField(rval, this.name.split(sep), this.value || '', dict);
  });

  return rval;
};

})(jQuery);
/**
 * Hash-based Message Authentication Code implementation. Requires a message
 * digest object that can be obtained, for example, from forge.md.sha1 or
 * forge.md.md5.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.
 */
var forge = require('./forge');
require('./md');
require('./util');

/* HMAC API */
var hmac = module.exports = forge.hmac = forge.hmac || {};

/**
 * Creates an HMAC object that uses the given message digest object.
 *
 * @return an HMAC object.
 */
hmac.create = function() {
  // the hmac key to use
  var _key = null;

  // the message digest to use
  var _md = null;

  // the inner padding
  var _ipadding = null;

  // the outer padding
  var _opadding = null;

  // hmac context
  var ctx = {};

  /**
   * Starts or restarts the HMAC with the given key and message digest.
   *
   * @param md the message digest to use, null to reuse the previous one,
   *           a string to use builtin 'sha1', 'md5', 'sha256'.
   * @param key the key to use as a string, array of bytes, byte buffer,
   *           or null to reuse the previous key.
   */
  ctx.start = function(md, key) {
    if(md !== null) {
      if(typeof md === 'string') {
        // create builtin message digest
        md = md.toLowerCase();
        if(md in forge.md.algorithms) {
          _md = forge.md.algorithms[md].create();
        } else {
          throw new Error('Unknown hash algorithm "' + md + '"');
        }
      } else {
        // store message digest
        _md = md;
      }
    }

    if(key === null) {
      // reuse previous key
      key = _key;
    } else {
      if(typeof key === 'string') {
        // convert string into byte buffer
        key = forge.util.createBuffer(key);
      } else if(forge.util.isArray(key)) {
        // convert byte array into byte buffer
        var tmp = key;
        key = forge.util.createBuffer();
        for(var i = 0; i < tmp.length; ++i) {
          key.putByte(tmp[i]);
        }
      }

      // if key is longer than blocksize, hash it
      var keylen = key.length();
      if(keylen > _md.blockLength) {
        _md.start();
        _md.update(key.bytes());
        key = _md.digest();
      }

      // mix key into inner and outer padding
      // ipadding = [0x36 * blocksize] ^ key
      // opadding = [0x5C * blocksize] ^ key
      _ipadding = forge.util.createBuffer();
      _opadding = forge.util.createBuffer();
      keylen = key.length();
      for(var i = 0; i < keylen; ++i) {
        var tmp = key.at(i);
        _ipadding.putByte(0x36 ^ tmp);
        _opadding.putByte(0x5C ^ tmp);
      }

      // if key is shorter than blocksize, add additional padding
      if(keylen < _md.blockLength) {
        var tmp = _md.blockLength - keylen;
        for(var i = 0; i < tmp; ++i) {
          _ipadding.putByte(0x36);
          _opadding.putByte(0x5C);
        }
      }
      _key = key;
      _ipadding = _ipadding.bytes();
      _opadding = _opadding.bytes();
    }

    // digest is done like so: hash(opadding | hash(ipadding | message))

    // prepare to do inner hash
    // hash(ipadding | message)
    _md.start();
    _md.update(_ipadding);
  };

  /**
   * Updates the HMAC with the given message bytes.
   *
   * @param bytes the bytes to update with.
   */
  ctx.update = function(bytes) {
    _md.update(bytes);
  };

  /**
   * Produces the Message Authentication Code (MAC).
   *
   * @return a byte buffer containing the digest value.
   */
  ctx.getMac = function() {
    // digest is done like so: hash(opadding | hash(ipadding | message))
    // here we do the outer hashing
    var inner = _md.digest().bytes();
    _md.start();
    _md.update(_opadding);
    _md.update(inner);
    return _md.digest();
  };
  // alias for getMac
  ctx.digest = ctx.getMac;

  return ctx;
};
/**
 * HTTP client-side implementation that uses forge.net sockets.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc. All rights reserved.
 */
var forge = require('./forge');
require('./tls');
require('./util');

// define http namespace
var http = module.exports = forge.http = forge.http || {};

// logging category
var cat = 'forge.http';

// normalizes an http header field name
var _normalize = function(name) {
  return name.toLowerCase().replace(/(^.)|(-.)/g,
    function(a) {return a.toUpperCase();});
};

/**
 * Gets the local storage ID for the given client.
 *
 * @param client the client to get the local storage ID for.
 *
 * @return the local storage ID to use.
 */
var _getStorageId = function(client) {
  // TODO: include browser in ID to avoid sharing cookies between
  // browsers (if this is undesirable)
  // navigator.userAgent
  return 'forge.http.' +
    client.url.protocol.slice(0, -1) + '.' +
    client.url.hostname + '.' +
    client.url.port;
};

/**
 * Loads persistent cookies from disk for the given client.
 *
 * @param client the client.
 */
var _loadCookies = function(client) {
  if(client.persistCookies) {
    try {
      var cookies = forge.util.getItem(
        client.socketPool.flashApi,
        _getStorageId(client), 'cookies');
      client.cookies = cookies || {};
    } catch(ex) {
      // no flash storage available, just silently fail
      // TODO: i assume we want this logged somewhere or
      // should it actually generate an error
      //forge.log.error(cat, ex);
    }
  }
};

/**
 * Saves persistent cookies on disk for the given client.
 *
 * @param client the client.
 */
var _saveCookies = function(client) {
  if(client.persistCookies) {
    try {
      forge.util.setItem(
        client.socketPool.flashApi,
        _getStorageId(client), 'cookies', client.cookies);
    } catch(ex) {
      // no flash storage available, just silently fail
      // TODO: i assume we want this logged somewhere or
      // should it actually generate an error
      //forge.log.error(cat, ex);
    }
  }

  // FIXME: remove me
  _loadCookies(client);
};

/**
 * Clears persistent cookies on disk for the given client.
 *
 * @param client the client.
 */
var _clearCookies = function(client) {
  if(client.persistCookies) {
    try {
      // only thing stored is 'cookies', so clear whole storage
      forge.util.clearItems(
        client.socketPool.flashApi,
        _getStorageId(client));
    } catch(ex) {
      // no flash storage available, just silently fail
      // TODO: i assume we want this logged somewhere or
      // should it actually generate an error
      //forge.log.error(cat, ex);
    }
  }
};

/**
 * Connects and sends a request.
 *
 * @param client the http client.
 * @param socket the socket to use.
 */
var _doRequest = function(client, socket) {
  if(socket.isConnected()) {
    // already connected
    socket.options.request.connectTime = +new Date();
    socket.connected({
      type: 'connect',
      id: socket.id
    });
  } else {
    // connect
    socket.options.request.connectTime = +new Date();
    socket.connect({
      host: client.url.hostname,
      port: client.url.port,
      policyPort: client.policyPort,
      policyUrl: client.policyUrl
    });
  }
};

/**
 * Handles the next request or marks a socket as idle.
 *
 * @param client the http client.
 * @param socket the socket.
 */
var _handleNextRequest = function(client, socket) {
  // clear buffer
  socket.buffer.clear();

  // get pending request
  var pending = null;
  while(pending === null && client.requests.length > 0) {
    pending = client.requests.shift();
    if(pending.request.aborted) {
      pending = null;
    }
  }

  // mark socket idle if no pending requests
  if(pending === null) {
    if(socket.options !== null) {
      socket.options = null;
    }
    client.idle.push(socket);
  } else {
    // handle pending request, allow 1 retry
    socket.retries = 1;
    socket.options = pending;
    _doRequest(client, socket);
  }
};

/**
 * Sets up a socket for use with an http client.
 *
 * @param client the parent http client.
 * @param socket the socket to set up.
 * @param tlsOptions if the socket must use TLS, the TLS options.
 */
var _initSocket = function(client, socket, tlsOptions) {
  // no socket options yet
  socket.options = null;

  // set up handlers
  socket.connected = function(e) {
    // socket primed by caching TLS session, handle next request
    if(socket.options === null) {
      _handleNextRequest(client, socket);
    } else {
      // socket in use
      var request = socket.options.request;
      request.connectTime = +new Date() - request.connectTime;
      e.socket = socket;
      socket.options.connected(e);
      if(request.aborted) {
        socket.close();
      } else {
        var out = request.toString();
        if(request.body) {
          out += request.body;
        }
        request.time = +new Date();
        socket.send(out);
        request.time = +new Date() - request.time;
        socket.options.response.time = +new Date();
        socket.sending = true;
      }
    }
  };
  socket.closed = function(e) {
    if(socket.sending) {
      socket.sending = false;
      if(socket.retries > 0) {
        --socket.retries;
        _doRequest(client, socket);
      } else {
        // error, closed during send
        socket.error({
          id: socket.id,
          type: 'ioError',
          message: 'Connection closed during send. Broken pipe.',
          bytesAvailable: 0
        });
      }
    } else {
      // handle unspecified content-length transfer
      var response = socket.options.response;
      if(response.readBodyUntilClose) {
        response.time = +new Date() - response.time;
        response.bodyReceived = true;
        socket.options.bodyReady({
          request: socket.options.request,
          response: response,
          socket: socket
        });
      }
      socket.options.closed(e);
      _handleNextRequest(client, socket);
    }
  };
  socket.data = function(e) {
    socket.sending = false;
    var request = socket.options.request;
    if(request.aborted) {
      socket.close();
    } else {
      // receive all bytes available
      var response = socket.options.response;
      var bytes = socket.receive(e.bytesAvailable);
      if(bytes !== null) {
        // receive header and then body
        socket.buffer.putBytes(bytes);
        if(!response.headerReceived) {
          response.readHeader(socket.buffer);
          if(response.headerReceived) {
            socket.options.headerReady({
              request: socket.options.request,
              response: response,
              socket: socket
            });
          }
        }
        if(response.headerReceived && !response.bodyReceived) {
          response.readBody(socket.buffer);
        }
        if(response.bodyReceived) {
          socket.options.bodyReady({
            request: socket.options.request,
            response: response,
            socket: socket
          });
          // close connection if requested or by default on http/1.0
          var value = response.getField('Connection') || '';
          if(value.indexOf('close') != -1 ||
            (response.version === 'HTTP/1.0' &&
            response.getField('Keep-Alive') === null)) {
            socket.close();
          } else {
            _handleNextRequest(client, socket);
          }
        }
      }
    }
  };
  socket.error = function(e) {
    // do error callback, include request
    socket.options.error({
      type: e.type,
      message: e.message,
      request: socket.options.request,
      response: socket.options.response,
      socket: socket
    });
    socket.close();
  };

  // wrap socket for TLS
  if(tlsOptions) {
    socket = forge.tls.wrapSocket({
      sessionId: null,
      sessionCache: {},
      caStore: tlsOptions.caStore,
      cipherSuites: tlsOptions.cipherSuites,
      socket: socket,
      virtualHost: tlsOptions.virtualHost,
      verify: tlsOptions.verify,
      getCertificate: tlsOptions.getCertificate,
      getPrivateKey: tlsOptions.getPrivateKey,
      getSignature: tlsOptions.getSignature,
      deflate: tlsOptions.deflate || null,
      inflate: tlsOptions.inflate || null
    });

    socket.options = null;
    socket.buffer = forge.util.createBuffer();
    client.sockets.push(socket);
    if(tlsOptions.prime) {
      // prime socket by connecting and caching TLS session, will do
      // next request from there
      socket.connect({
        host: client.url.hostname,
        port: client.url.port,
        policyPort: client.policyPort,
        policyUrl: client.policyUrl
      });
    } else {
      // do not prime socket, just add as idle
      client.idle.push(socket);
    }
  } else {
    // no need to prime non-TLS sockets
    socket.buffer = forge.util.createBuffer();
    client.sockets.push(socket);
    client.idle.push(socket);
  }
};

/**
 * Checks to see if the given cookie has expired. If the cookie's max-age
 * plus its created time is less than the time now, it has expired, unless
 * its max-age is set to -1 which indicates it will never expire.
 *
 * @param cookie the cookie to check.
 *
 * @return true if it has expired, false if not.
 */
var _hasCookieExpired = function(cookie) {
  var rval = false;

  if(cookie.maxAge !== -1) {
    var now = _getUtcTime(new Date());
    var expires = cookie.created + cookie.maxAge;
    if(expires <= now) {
      rval = true;
    }
  }

  return rval;
};

/**
 * Adds cookies in the given client to the given request.
 *
 * @param client the client.
 * @param request the request.
 */
var _writeCookies = function(client, request) {
  var expired = [];
  var url = client.url;
  var cookies = client.cookies;
  for(var name in cookies) {
    // get cookie paths
    var paths = cookies[name];
    for(var p in paths) {
      var cookie = paths[p];
      if(_hasCookieExpired(cookie)) {
        // store for clean up
        expired.push(cookie);
      } else if(request.path.indexOf(cookie.path) === 0) {
        // path or path's ancestor must match cookie.path
        request.addCookie(cookie);
      }
    }
  }

  // clean up expired cookies
  for(var i = 0; i < expired.length; ++i) {
    var cookie = expired[i];
    client.removeCookie(cookie.name, cookie.path);
  }
};

/**
 * Gets cookies from the given response and adds the to the given client.
 *
 * @param client the client.
 * @param response the response.
 */
var _readCookies = function(client, response) {
  var cookies = response.getCookies();
  for(var i = 0; i < cookies.length; ++i) {
    try {
      client.setCookie(cookies[i]);
    } catch(ex) {
      // ignore failure to add other-domain, etc. cookies
    }
  }
};

/**
 * Creates an http client that uses forge.net sockets as a backend and
 * forge.tls for security.
 *
 * @param options:
 *   url: the url to connect to (scheme://host:port).
 *   socketPool: the flash socket pool to use.
 *   policyPort: the flash policy port to use (if other than the
 *     socket pool default), use 0 for flash default.
 *   policyUrl: the flash policy file URL to use (if provided will
 *     be used instead of a policy port).
 *   connections: number of connections to use to handle requests.
 *   caCerts: an array of certificates to trust for TLS, certs may
 *     be PEM-formatted or cert objects produced via forge.pki.
 *   cipherSuites: an optional array of cipher suites to use,
 *     see forge.tls.CipherSuites.
 *   virtualHost: the virtual server name to use in a TLS SNI
 *     extension, if not provided the url host will be used.
 *   verify: a custom TLS certificate verify callback to use.
 *   getCertificate: an optional callback used to get a client-side
 *     certificate (see forge.tls for details).
 *   getPrivateKey: an optional callback used to get a client-side
 *     private key (see forge.tls for details).
 *   getSignature: an optional callback used to get a client-side
 *     signature (see forge.tls for details).
 *   persistCookies: true to use persistent cookies via flash local
 *     storage, false to only keep cookies in javascript.
 *   primeTlsSockets: true to immediately connect TLS sockets on
 *     their creation so that they will cache TLS sessions for reuse.
 *
 * @return the client.
 */
http.createClient = function(options) {
  // create CA store to share with all TLS connections
  var caStore = null;
  if(options.caCerts) {
    caStore = forge.pki.createCaStore(options.caCerts);
  }

  // get scheme, host, and port from url
  options.url = (options.url ||
    window.location.protocol + '//' + window.location.host);
  var url;
  try {
    url = new URL(options.url);
  } catch(e) {
    var error = new Error('Invalid url.');
    error.details = {url: options.url};
    throw error;
  }

  // default to 1 connection
  options.connections = options.connections || 1;

  // create client
  var sp = options.socketPool;
  var client = {
    // url
    url: url,
    // socket pool
    socketPool: sp,
    // the policy port to use
    policyPort: options.policyPort,
    // policy url to use
    policyUrl: options.policyUrl,
    // queue of requests to service
    requests: [],
    // all sockets
    sockets: [],
    // idle sockets
    idle: [],
    // whether or not the connections are secure
    secure: (url.protocol === 'https:'),
    // cookie jar (key'd off of name and then path, there is only 1 domain
    // and one setting for secure per client so name+path is unique)
    cookies: {},
    // default to flash storage of cookies
    persistCookies: (typeof(options.persistCookies) === 'undefined') ?
      true : options.persistCookies
  };

  // load cookies from disk
  _loadCookies(client);

  /**
   * A default certificate verify function that checks a certificate common
   * name against the client's URL host.
   *
   * @param c the TLS connection.
   * @param verified true if cert is verified, otherwise alert number.
   * @param depth the chain depth.
   * @param certs the cert chain.
   *
   * @return true if verified and the common name matches the host, error
   *         otherwise.
   */
  var _defaultCertificateVerify = function(c, verified, depth, certs) {
    if(depth === 0 && verified === true) {
      // compare common name to url host
      var cn = certs[depth].subject.getField('CN');
      if(cn === null || client.url.hostname !== cn.value) {
        verified = {
          message: 'Certificate common name does not match url host.'
        };
      }
    }
    return verified;
  };

  // determine if TLS is used
  var tlsOptions = null;
  if(client.secure) {
    tlsOptions = {
      caStore: caStore,
      cipherSuites: options.cipherSuites || null,
      virtualHost: options.virtualHost || url.hostname,
      verify: options.verify || _defaultCertificateVerify,
      getCertificate: options.getCertificate || null,
      getPrivateKey: options.getPrivateKey || null,
      getSignature: options.getSignature || null,
      prime: options.primeTlsSockets || false
    };

    // if socket pool uses a flash api, then add deflate support to TLS
    if(sp.flashApi !== null) {
      tlsOptions.deflate = function(bytes) {
        // strip 2 byte zlib header and 4 byte trailer
        return forge.util.deflate(sp.flashApi, bytes, true);
      };
      tlsOptions.inflate = function(bytes) {
        return forge.util.inflate(sp.flashApi, bytes, true);
      };
    }
  }

  // create and initialize sockets
  for(var i = 0; i < options.connections; ++i) {
    _initSocket(client, sp.createSocket(), tlsOptions);
  }

  /**
   * Sends a request. A method 'abort' will be set on the request that
   * can be called to attempt to abort the request.
   *
   * @param options:
   *          request: the request to send.
   *          connected: a callback for when the connection is open.
   *          closed: a callback for when the connection is closed.
   *          headerReady: a callback for when the response header arrives.
   *          bodyReady: a callback for when the response body arrives.
   *          error: a callback for if an error occurs.
   */
  client.send = function(options) {
    // add host header if not set
    if(options.request.getField('Host') === null) {
      options.request.setField('Host', client.url.origin);
    }

    // set default dummy handlers
    var opts = {};
    opts.request = options.request;
    opts.connected = options.connected || function() {};
    opts.closed = options.close || function() {};
    opts.headerReady = function(e) {
      // read cookies
      _readCookies(client, e.response);
      if(options.headerReady) {
        options.headerReady(e);
      }
    };
    opts.bodyReady = options.bodyReady || function() {};
    opts.error = options.error || function() {};

    // create response
    opts.response = http.createResponse();
    opts.response.time = 0;
    opts.response.flashApi = client.socketPool.flashApi;
    opts.request.flashApi = client.socketPool.flashApi;

    // create abort function
    opts.request.abort = function() {
      // set aborted, clear handlers
      opts.request.aborted = true;
      opts.connected = function() {};
      opts.closed = function() {};
      opts.headerReady = function() {};
      opts.bodyReady = function() {};
      opts.error = function() {};
    };

    // add cookies to request
    _writeCookies(client, opts.request);

    // queue request options if there are no idle sockets
    if(client.idle.length === 0) {
      client.requests.push(opts);
    } else {
      // use an idle socket, prefer an idle *connected* socket first
      var socket = null;
      var len = client.idle.length;
      for(var i = 0; socket === null && i < len; ++i) {
        socket = client.idle[i];
        if(socket.isConnected()) {
          client.idle.splice(i, 1);
        } else {
          socket = null;
        }
      }
      // no connected socket available, get unconnected socket
      if(socket === null) {
        socket = client.idle.pop();
      }
      socket.options = opts;
      _doRequest(client, socket);
    }
  };

  /**
   * Destroys this client.
   */
  client.destroy = function() {
    // clear pending requests, close and destroy sockets
    client.requests = [];
    for(var i = 0; i < client.sockets.length; ++i) {
      client.sockets[i].close();
      client.sockets[i].destroy();
    }
    client.socketPool = null;
    client.sockets = [];
    client.idle = [];
  };

  /**
   * Sets a cookie for use with all connections made by this client. Any
   * cookie with the same name will be replaced. If the cookie's value
   * is undefined, null, or the blank string, the cookie will be removed.
   *
   * If the cookie's domain doesn't match this client's url host or the
   * cookie's secure flag doesn't match this client's url scheme, then
   * setting the cookie will fail with an exception.
   *
   * @param cookie the cookie with parameters:
   *   name: the name of the cookie.
   *   value: the value of the cookie.
   *   comment: an optional comment string.
   *   maxAge: the age of the cookie in seconds relative to created time.
   *   secure: true if the cookie must be sent over a secure protocol.
   *   httpOnly: true to restrict access to the cookie from javascript
   *     (inaffective since the cookies are stored in javascript).
   *   path: the path for the cookie.
   *   domain: optional domain the cookie belongs to (must start with dot).
   *   version: optional version of the cookie.
   *   created: creation time, in UTC seconds, of the cookie.
   */
  client.setCookie = function(cookie) {
    var rval;
    if(typeof(cookie.name) !== 'undefined') {
      if(cookie.value === null || typeof(cookie.value) === 'undefined' ||
        cookie.value === '') {
        // remove cookie
        rval = client.removeCookie(cookie.name, cookie.path);
      } else {
        // set cookie defaults
        cookie.comment = cookie.comment || '';
        cookie.maxAge = cookie.maxAge || 0;
        cookie.secure = (typeof(cookie.secure) === 'undefined') ?
          true : cookie.secure;
        cookie.httpOnly = cookie.httpOnly || true;
        cookie.path = cookie.path || '/';
        cookie.domain = cookie.domain || null;
        cookie.version = cookie.version || null;
        cookie.created = _getUtcTime(new Date());

        // do secure check
        if(cookie.secure !== client.secure) {
          var error = new Error('Http client url scheme is incompatible ' +
            'with cookie secure flag.');
          error.url = client.url;
          error.cookie = cookie;
          throw error;
        }
        // make sure url host is within cookie.domain
        if(!http.withinCookieDomain(client.url, cookie)) {
          var error = new Error('Http client url scheme is incompatible ' +
            'with cookie secure flag.');
          error.url = client.url;
          error.cookie = cookie;
          throw error;
        }

        // add new cookie
        if(!(cookie.name in client.cookies)) {
          client.cookies[cookie.name] = {};
        }
        client.cookies[cookie.name][cookie.path] = cookie;
        rval = true;

        // save cookies
        _saveCookies(client);
      }
    }

    return rval;
  };

  /**
   * Gets a cookie by its name.
   *
   * @param name the name of the cookie to retrieve.
   * @param path an optional path for the cookie (if there are multiple
   *          cookies with the same name but different paths).
   *
   * @return the cookie or null if not found.
   */
  client.getCookie = function(name, path) {
    var rval = null;
    if(name in client.cookies) {
      var paths = client.cookies[name];

      // get path-specific cookie
      if(path) {
        if(path in paths) {
          rval = paths[path];
        }
      } else {
        // get first cookie
        for(var p in paths) {
          rval = paths[p];
          break;
        }
      }
    }
    return rval;
  };

  /**
   * Removes a cookie.
   *
   * @param name the name of the cookie to remove.
   * @param path an optional path for the cookie (if there are multiple
   *          cookies with the same name but different paths).
   *
   * @return true if a cookie was removed, false if not.
   */
  client.removeCookie = function(name, path) {
    var rval = false;
    if(name in client.cookies) {
      // delete the specific path
      if(path) {
        var paths = client.cookies[name];
        if(path in paths) {
          rval = true;
          delete client.cookies[name][path];
          // clean up entry if empty
          var empty = true;
          for(var i in client.cookies[name]) {
            empty = false;
            break;
          }
          if(empty) {
            delete client.cookies[name];
          }
        }
      } else {
        // delete all cookies with the given name
        rval = true;
        delete client.cookies[name];
      }
    }
    if(rval) {
      // save cookies
      _saveCookies(client);
    }
    return rval;
  };

  /**
   * Clears all cookies stored in this client.
   */
  client.clearCookies = function() {
    client.cookies = {};
    _clearCookies(client);
  };

  if(forge.log) {
    forge.log.debug('forge.http', 'created client', options);
  }

  return client;
};

/**
 * Trims the whitespace off of the beginning and end of a string.
 *
 * @param str the string to trim.
 *
 * @return the trimmed string.
 */
var _trimString = function(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
};

/**
 * Creates an http header object.
 *
 * @return the http header object.
 */
var _createHeader = function() {
  var header = {
    fields: {},
    setField: function(name, value) {
      // normalize field name, trim value
      header.fields[_normalize(name)] = [_trimString('' + value)];
    },
    appendField: function(name, value) {
      name = _normalize(name);
      if(!(name in header.fields)) {
        header.fields[name] = [];
      }
      header.fields[name].push(_trimString('' + value));
    },
    getField: function(name, index) {
      var rval = null;
      name = _normalize(name);
      if(name in header.fields) {
        index = index || 0;
        rval = header.fields[name][index];
      }
      return rval;
    }
  };
  return header;
};

/**
 * Gets the time in utc seconds given a date.
 *
 * @param d the date to use.
 *
 * @return the time in utc seconds.
 */
var _getUtcTime = function(d) {
  var utc = +d + d.getTimezoneOffset() * 60000;
  return Math.floor(+new Date() / 1000);
};

/**
 * Creates an http request.
 *
 * @param options:
 *          version: the version.
 *          method: the method.
 *          path: the path.
 *          body: the body.
 *          headers: custom header fields to add,
 *            eg: [{'Content-Length': 0}].
 *
 * @return the http request.
 */
http.createRequest = function(options) {
  options = options || {};
  var request = _createHeader();
  request.version = options.version || 'HTTP/1.1';
  request.method = options.method || null;
  request.path = options.path || null;
  request.body = options.body || null;
  request.bodyDeflated = false;
  request.flashApi = null;

  // add custom headers
  var headers = options.headers || [];
  if(!forge.util.isArray(headers)) {
    headers = [headers];
  }
  for(var i = 0; i < headers.length; ++i) {
    for(var name in headers[i]) {
      request.appendField(name, headers[i][name]);
    }
  }

  /**
   * Adds a cookie to the request 'Cookie' header.
   *
   * @param cookie a cookie to add.
   */
  request.addCookie = function(cookie) {
    var value = '';
    var field = request.getField('Cookie');
    if(field !== null) {
      // separate cookies by semi-colons
      value = field + '; ';
    }

    // get current time in utc seconds
    var now = _getUtcTime(new Date());

    // output cookie name and value
    value += cookie.name + '=' + cookie.value;
    request.setField('Cookie', value);
  };

  /**
   * Converts an http request into a string that can be sent as an
   * HTTP request. Does not include any data.
   *
   * @return the string representation of the request.
   */
  request.toString = function() {
    /* Sample request header:
      GET /some/path/?query HTTP/1.1
      Host: www.someurl.com
      Connection: close
      Accept-Encoding: deflate
      Accept: image/gif, text/html
      User-Agent: Mozilla 4.0
     */

    // set default headers
    if(request.getField('User-Agent') === null) {
      request.setField('User-Agent', 'forge.http 1.0');
    }
    if(request.getField('Accept') === null) {
      request.setField('Accept', '*/*');
    }
    if(request.getField('Connection') === null) {
      request.setField('Connection', 'keep-alive');
      request.setField('Keep-Alive', '115');
    }

    // add Accept-Encoding if not specified
    if(request.flashApi !== null &&
      request.getField('Accept-Encoding') === null) {
      request.setField('Accept-Encoding', 'deflate');
    }

    // if the body isn't null, deflate it if its larger than 100 bytes
    if(request.flashApi !== null && request.body !== null &&
      request.getField('Content-Encoding') === null &&
      !request.bodyDeflated && request.body.length > 100) {
      // use flash to compress data
      request.body = forge.util.deflate(request.flashApi, request.body);
      request.bodyDeflated = true;
      request.setField('Content-Encoding', 'deflate');
      request.setField('Content-Length', request.body.length);
    } else if(request.body !== null) {
      // set content length for body
      request.setField('Content-Length', request.body.length);
    }

    // build start line
    var rval =
      request.method.toUpperCase() + ' ' + request.path + ' ' +
      request.version + '\r\n';

    // add each header
    for(var name in request.fields) {
      var fields = request.fields[name];
      for(var i = 0; i < fields.length; ++i) {
        rval += name + ': ' + fields[i] + '\r\n';
      }
    }
    // final terminating CRLF
    rval += '\r\n';

    return rval;
  };

  return request;
};

/**
 * Creates an empty http response header.
 *
 * @return the empty http response header.
 */
http.createResponse = function() {
  // private vars
  var _first = true;
  var _chunkSize = 0;
  var _chunksFinished = false;

  // create response
  var response = _createHeader();
  response.version = null;
  response.code = 0;
  response.message = null;
  response.body = null;
  response.headerReceived = false;
  response.bodyReceived = false;
  response.flashApi = null;

  /**
   * Reads a line that ends in CRLF from a byte buffer.
   *
   * @param b the byte buffer.
   *
   * @return the line or null if none was found.
   */
  var _readCrlf = function(b) {
    var line = null;
    var i = b.data.indexOf('\r\n', b.read);
    if(i != -1) {
      // read line, skip CRLF
      line = b.getBytes(i - b.read);
      b.getBytes(2);
    }
    return line;
  };

  /**
   * Parses a header field and appends it to the response.
   *
   * @param line the header field line.
   */
  var _parseHeader = function(line) {
    var tmp = line.indexOf(':');
    var name = line.substring(0, tmp++);
    response.appendField(
      name, (tmp < line.length) ? line.substring(tmp) : '');
  };

  /**
   * Reads an http response header from a buffer of bytes.
   *
   * @param b the byte buffer to parse the header from.
   *
   * @return true if the whole header was read, false if not.
   */
  response.readHeader = function(b) {
    // read header lines (each ends in CRLF)
    var line = '';
    while(!response.headerReceived && line !== null) {
      line = _readCrlf(b);
      if(line !== null) {
        // parse first line
        if(_first) {
          _first = false;
          var tmp = line.split(' ');
          if(tmp.length >= 3) {
            response.version = tmp[0];
            response.code = parseInt(tmp[1], 10);
            response.message = tmp.slice(2).join(' ');
          } else {
            // invalid header
            var error = new Error('Invalid http response header.');
            error.details = {'line': line};
            throw error;
          }
        } else if(line.length === 0) {
          // handle final line, end of header
          response.headerReceived = true;
        } else {
          _parseHeader(line);
        }
      }
    }

    return response.headerReceived;
  };

  /**
   * Reads some chunked http response entity-body from the given buffer of
   * bytes.
   *
   * @param b the byte buffer to read from.
   *
   * @return true if the whole body was read, false if not.
   */
  var _readChunkedBody = function(b) {
    /* Chunked transfer-encoding sends data in a series of chunks,
      followed by a set of 0-N http trailers.
      The format is as follows:

      chunk-size (in hex) CRLF
      chunk data (with "chunk-size" many bytes) CRLF
      ... (N many chunks)
      chunk-size (of 0 indicating the last chunk) CRLF
      N many http trailers followed by CRLF
      blank line + CRLF (terminates the trailers)

      If there are no http trailers, then after the chunk-size of 0,
      there is still a single CRLF (indicating the blank line + CRLF
      that terminates the trailers). In other words, you always terminate
      the trailers with blank line + CRLF, regardless of 0-N trailers. */

      /* From RFC-2616, section 3.6.1, here is the pseudo-code for
      implementing chunked transfer-encoding:

      length := 0
      read chunk-size, chunk-extension (if any) and CRLF
      while (chunk-size > 0) {
        read chunk-data and CRLF
        append chunk-data to entity-body
        length := length + chunk-size
        read chunk-size and CRLF
      }
      read entity-header
      while (entity-header not empty) {
        append entity-header to existing header fields
        read entity-header
      }
      Content-Length := length
      Remove "chunked" from Transfer-Encoding
    */

    var line = '';
    while(line !== null && b.length() > 0) {
      // if in the process of reading a chunk
      if(_chunkSize > 0) {
        // if there are not enough bytes to read chunk and its
        // trailing CRLF,  we must wait for more data to be received
        if(_chunkSize + 2 > b.length()) {
          break;
        }

        // read chunk data, skip CRLF
        response.body += b.getBytes(_chunkSize);
        b.getBytes(2);
        _chunkSize = 0;
      } else if(!_chunksFinished) {
        // more chunks, read next chunk-size line
        line = _readCrlf(b);
        if(line !== null) {
          // parse chunk-size (ignore any chunk extension)
          _chunkSize = parseInt(line.split(';', 1)[0], 16);
          _chunksFinished = (_chunkSize === 0);
        }
      } else {
        // chunks finished, read next trailer
        line = _readCrlf(b);
        while(line !== null) {
          if(line.length > 0) {
            // parse trailer
            _parseHeader(line);
            // read next trailer
            line = _readCrlf(b);
          } else {
            // body received
            response.bodyReceived = true;
            line = null;
          }
        }
      }
    }

    return response.bodyReceived;
  };

  /**
   * Reads an http response body from a buffer of bytes.
   *
   * @param b the byte buffer to read from.
   *
   * @return true if the whole body was read, false if not.
   */
  response.readBody = function(b) {
    var contentLength = response.getField('Content-Length');
    var transferEncoding = response.getField('Transfer-Encoding');
    if(contentLength !== null) {
      contentLength = parseInt(contentLength);
    }

    // read specified length
    if(contentLength !== null && contentLength >= 0) {
      response.body = response.body || '';
      response.body += b.getBytes(contentLength);
      response.bodyReceived = (response.body.length === contentLength);
    } else if(transferEncoding !== null) {
      // read chunked encoding
      if(transferEncoding.indexOf('chunked') != -1) {
        response.body = response.body || '';
        _readChunkedBody(b);
      } else {
        var error = new Error('Unknown Transfer-Encoding.');
        error.details = {'transferEncoding': transferEncoding};
        throw error;
      }
    } else if((contentLength !== null && contentLength < 0) ||
      (contentLength === null &&
      response.getField('Content-Type') !== null)) {
      // read all data in the buffer
      response.body = response.body || '';
      response.body += b.getBytes();
      response.readBodyUntilClose = true;
    } else {
      // no body
      response.body = null;
      response.bodyReceived = true;
    }

    if(response.bodyReceived) {
      response.time = +new Date() - response.time;
    }

    if(response.flashApi !== null &&
      response.bodyReceived && response.body !== null &&
      response.getField('Content-Encoding') === 'deflate') {
      // inflate using flash api
      response.body = forge.util.inflate(
        response.flashApi, response.body);
    }

    return response.bodyReceived;
  };

   /**
    * Parses an array of cookies from the 'Set-Cookie' field, if present.
    *
    * @return the array of cookies.
    */
   response.getCookies = function() {
     var rval = [];

     // get Set-Cookie field
     if('Set-Cookie' in response.fields) {
       var field = response.fields['Set-Cookie'];

       // get current local time in seconds
       var now = +new Date() / 1000;

       // regex for parsing 'name1=value1; name2=value2; name3'
       var regex = /\s*([^=]*)=?([^;]*)(;|$)/g;

       // examples:
       // Set-Cookie: cookie1_name=cookie1_value; max-age=0; path=/
       // Set-Cookie: c2=v2; expires=Thu, 21-Aug-2008 23:47:25 GMT; path=/
       for(var i = 0; i < field.length; ++i) {
         var fv = field[i];
         var m;
         regex.lastIndex = 0;
         var first = true;
         var cookie = {};
         do {
           m = regex.exec(fv);
           if(m !== null) {
             var name = _trimString(m[1]);
             var value = _trimString(m[2]);

             // cookie_name=value
             if(first) {
               cookie.name = name;
               cookie.value = value;
               first = false;
             } else {
               // property_name=value
               name = name.toLowerCase();
               switch(name) {
               case 'expires':
                 // replace hyphens w/spaces so date will parse
                 value = value.replace(/-/g, ' ');
                 var secs = Date.parse(value) / 1000;
                 cookie.maxAge = Math.max(0, secs - now);
                 break;
               case 'max-age':
                 cookie.maxAge = parseInt(value, 10);
                 break;
               case 'secure':
                 cookie.secure = true;
                 break;
               case 'httponly':
                 cookie.httpOnly = true;
                 break;
               default:
                 if(name !== '') {
                   cookie[name] = value;
                 }
               }
             }
           }
         } while(m !== null && m[0] !== '');
         rval.push(cookie);
       }
     }

     return rval;
  };

  /**
   * Converts an http response into a string that can be sent as an
   * HTTP response. Does not include any data.
   *
   * @return the string representation of the response.
   */
  response.toString = function() {
    /* Sample response header:
      HTTP/1.0 200 OK
      Host: www.someurl.com
      Connection: close
     */

    // build start line
    var rval =
      response.version + ' ' + response.code + ' ' + response.message + '\r\n';

    // add each header
    for(var name in response.fields) {
      var fields = response.fields[name];
      for(var i = 0; i < fields.length; ++i) {
        rval += name + ': ' + fields[i] + '\r\n';
      }
    }
    // final terminating CRLF
    rval += '\r\n';

    return rval;
  };

  return response;
};

/**
 * Returns true if the given url is within the given cookie's domain.
 *
 * @param url the url to check.
 * @param cookie the cookie or cookie domain to check.
 */
http.withinCookieDomain = function(url, cookie) {
  var rval = false;

  // cookie may be null, a cookie object, or a domain string
  var domain = (cookie === null || typeof cookie === 'string') ?
    cookie : cookie.domain;

  // any domain will do
  if(domain === null) {
    rval = true;
  } else if(domain.charAt(0) === '.') {
    // ensure domain starts with a '.'
    // parse URL as necessary
    if(typeof url === 'string') {
      url = new URL(url);
    }

    // add '.' to front of URL hostname to match against domain
    var host = '.' + url.hostname;

    // if the host ends with domain then it falls within it
    var idx = host.lastIndexOf(domain);
    if(idx !== -1 && (idx + domain.length === host.length)) {
      rval = true;
    }
  }

  return rval;
};
/**
 * Node.js module for Forge with extra utils and networking.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */
module.exports = require('./forge');
// require core forge
require('./index');
// additional utils and networking support
require('./form');
require('./socket');
require('./tlssocket');
require('./http');
require('./xhr');
/**
 * Node.js module for Forge.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */
module.exports = require('./forge');
require('./aes');
require('./aesCipherSuites');
require('./asn1');
require('./cipher');
require('./des');
require('./ed25519');
require('./hmac');
require('./kem');
require('./log');
require('./md.all');
require('./mgf1');
require('./pbkdf2');
require('./pem');
require('./pkcs1');
require('./pkcs12');
require('./pkcs7');
require('./pki');
require('./prime');
require('./prng');
require('./pss');
require('./random');
require('./rc2');
require('./ssh');
require('./tls');
require('./util');
// Copyright (c) 2005  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.

// Basic JavaScript BN library - subset useful for RSA encryption.

/*
Licensing (LICENSE)
-------------------

This software is covered under the following copyright:
*/
/*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */
/*
Address all questions regarding this license to:

  Tom Wu
  tjw@cs.Stanford.EDU
*/
var forge = require('./forge');

module.exports = forge.jsbn = forge.jsbn || {};

// Bits per digit
var dbits;

// JavaScript engine analysis
var canary = 0xdeadbeefcafe;
var j_lm = ((canary&0xffffff)==0xefcafe);

// (public) Constructor
function BigInteger(a,b,c) {
  this.data = [];
  if(a != null)
    if("number" == typeof a) this.fromNumber(a,b,c);
    else if(b == null && "string" != typeof a) this.fromString(a,256);
    else this.fromString(a,b);
}
forge.jsbn.BigInteger = BigInteger;

// return new, unset BigInteger
function nbi() { return new BigInteger(null); }

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i,x,w,j,c,n) {
  while(--n >= 0) {
    var v = x*this.data[i++]+w.data[j]+c;
    c = Math.floor(v/0x4000000);
    w.data[j++] = v&0x3ffffff;
  }
  return c;
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i,x,w,j,c,n) {
  var xl = x&0x7fff, xh = x>>15;
  while(--n >= 0) {
    var l = this.data[i]&0x7fff;
    var h = this.data[i++]>>15;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x7fff)<<15)+w.data[j]+(c&0x3fffffff);
    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
    w.data[j++] = l&0x3fffffff;
  }
  return c;
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i,x,w,j,c,n) {
  var xl = x&0x3fff, xh = x>>14;
  while(--n >= 0) {
    var l = this.data[i]&0x3fff;
    var h = this.data[i++]>>14;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x3fff)<<14)+w.data[j]+c;
    c = (l>>28)+(m>>14)+xh*h;
    w.data[j++] = l&0xfffffff;
  }
  return c;
}

// node.js (no browser)
if(typeof(navigator) === 'undefined')
{
   BigInteger.prototype.am = am3;
   dbits = 28;
} else if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
  BigInteger.prototype.am = am2;
  dbits = 30;
} else if(j_lm && (navigator.appName != "Netscape")) {
  BigInteger.prototype.am = am1;
  dbits = 26;
} else { // Mozilla/Netscape seems to prefer am3
  BigInteger.prototype.am = am3;
  dbits = 28;
}

BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1<<dbits)-1);
BigInteger.prototype.DV = (1<<dbits);

var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2,BI_FP);
BigInteger.prototype.F1 = BI_FP-dbits;
BigInteger.prototype.F2 = 2*dbits-BI_FP;

// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr,vv;
rr = "0".charCodeAt(0);
for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

function int2char(n) { return BI_RM.charAt(n); }
function intAt(s,i) {
  var c = BI_RC[s.charCodeAt(i)];
  return (c==null)?-1:c;
}

// (protected) copy this to r
function bnpCopyTo(r) {
  for(var i = this.t-1; i >= 0; --i) r.data[i] = this.data[i];
  r.t = this.t;
  r.s = this.s;
}

// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
  this.t = 1;
  this.s = (x<0)?-1:0;
  if(x > 0) this.data[0] = x;
  else if(x < -1) this.data[0] = x+this.DV;
  else this.t = 0;
}

// return bigint initialized to value
function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

// (protected) set from string and radix
function bnpFromString(s,b) {
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 256) k = 8; // byte array
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else { this.fromRadix(s,b); return; }
  this.t = 0;
  this.s = 0;
  var i = s.length, mi = false, sh = 0;
  while(--i >= 0) {
    var x = (k==8)?s[i]&0xff:intAt(s,i);
    if(x < 0) {
      if(s.charAt(i) == "-") mi = true;
      continue;
    }
    mi = false;
    if(sh == 0)
      this.data[this.t++] = x;
    else if(sh+k > this.DB) {
      this.data[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
      this.data[this.t++] = (x>>(this.DB-sh));
    } else
      this.data[this.t-1] |= x<<sh;
    sh += k;
    if(sh >= this.DB) sh -= this.DB;
  }
  if(k == 8 && (s[0]&0x80) != 0) {
    this.s = -1;
    if(sh > 0) this.data[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
  }
  this.clamp();
  if(mi) BigInteger.ZERO.subTo(this,this);
}

// (protected) clamp off excess high words
function bnpClamp() {
  var c = this.s&this.DM;
  while(this.t > 0 && this.data[this.t-1] == c) --this.t;
}

// (public) return string representation in given radix
function bnToString(b) {
  if(this.s < 0) return "-"+this.negate().toString(b);
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else return this.toRadix(b);
  var km = (1<<k)-1, d, m = false, r = "", i = this.t;
  var p = this.DB-(i*this.DB)%k;
  if(i-- > 0) {
    if(p < this.DB && (d = this.data[i]>>p) > 0) { m = true; r = int2char(d); }
    while(i >= 0) {
      if(p < k) {
        d = (this.data[i]&((1<<p)-1))<<(k-p);
        d |= this.data[--i]>>(p+=this.DB-k);
      } else {
        d = (this.data[i]>>(p-=k))&km;
        if(p <= 0) { p += this.DB; --i; }
      }
      if(d > 0) m = true;
      if(m) r += int2char(d);
    }
  }
  return m?r:"0";
}

// (public) -this
function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

// (public) |this|
function bnAbs() { return (this.s<0)?this.negate():this; }

// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
  var r = this.s-a.s;
  if(r != 0) return r;
  var i = this.t;
  r = i-a.t;
  if(r != 0) return (this.s<0)?-r:r;
  while(--i >= 0) if((r=this.data[i]-a.data[i]) != 0) return r;
  return 0;
}

// returns bit length of the integer x
function nbits(x) {
  var r = 1, t;
  if((t=x>>>16) != 0) { x = t; r += 16; }
  if((t=x>>8) != 0) { x = t; r += 8; }
  if((t=x>>4) != 0) { x = t; r += 4; }
  if((t=x>>2) != 0) { x = t; r += 2; }
  if((t=x>>1) != 0) { x = t; r += 1; }
  return r;
}

// (public) return the number of bits in "this"
function bnBitLength() {
  if(this.t <= 0) return 0;
  return this.DB*(this.t-1)+nbits(this.data[this.t-1]^(this.s&this.DM));
}

// (protected) r = this << n*DB
function bnpDLShiftTo(n,r) {
  var i;
  for(i = this.t-1; i >= 0; --i) r.data[i+n] = this.data[i];
  for(i = n-1; i >= 0; --i) r.data[i] = 0;
  r.t = this.t+n;
  r.s = this.s;
}

// (protected) r = this >> n*DB
function bnpDRShiftTo(n,r) {
  for(var i = n; i < this.t; ++i) r.data[i-n] = this.data[i];
  r.t = Math.max(this.t-n,0);
  r.s = this.s;
}

// (protected) r = this << n
function bnpLShiftTo(n,r) {
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<cbs)-1;
  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
  for(i = this.t-1; i >= 0; --i) {
    r.data[i+ds+1] = (this.data[i]>>cbs)|c;
    c = (this.data[i]&bm)<<bs;
  }
  for(i = ds-1; i >= 0; --i) r.data[i] = 0;
  r.data[ds] = c;
  r.t = this.t+ds+1;
  r.s = this.s;
  r.clamp();
}

// (protected) r = this >> n
function bnpRShiftTo(n,r) {
  r.s = this.s;
  var ds = Math.floor(n/this.DB);
  if(ds >= this.t) { r.t = 0; return; }
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<bs)-1;
  r.data[0] = this.data[ds]>>bs;
  for(var i = ds+1; i < this.t; ++i) {
    r.data[i-ds-1] |= (this.data[i]&bm)<<cbs;
    r.data[i-ds] = this.data[i]>>bs;
  }
  if(bs > 0) r.data[this.t-ds-1] |= (this.s&bm)<<cbs;
  r.t = this.t-ds;
  r.clamp();
}

// (protected) r = this - a
function bnpSubTo(a,r) {
  var i = 0, c = 0, m = Math.min(a.t,this.t);
  while(i < m) {
    c += this.data[i]-a.data[i];
    r.data[i++] = c&this.DM;
    c >>= this.DB;
  }
  if(a.t < this.t) {
    c -= a.s;
    while(i < this.t) {
      c += this.data[i];
      r.data[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += this.s;
  } else {
    c += this.s;
    while(i < a.t) {
      c -= a.data[i];
      r.data[i++] = c&this.DM;
      c >>= this.DB;
    }
    c -= a.s;
  }
  r.s = (c<0)?-1:0;
  if(c < -1) r.data[i++] = this.DV+c;
  else if(c > 0) r.data[i++] = c;
  r.t = i;
  r.clamp();
}

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a,r) {
  var x = this.abs(), y = a.abs();
  var i = x.t;
  r.t = i+y.t;
  while(--i >= 0) r.data[i] = 0;
  for(i = 0; i < y.t; ++i) r.data[i+x.t] = x.am(0,y.data[i],r,i,0,x.t);
  r.s = 0;
  r.clamp();
  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
}

// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
  var x = this.abs();
  var i = r.t = 2*x.t;
  while(--i >= 0) r.data[i] = 0;
  for(i = 0; i < x.t-1; ++i) {
    var c = x.am(i,x.data[i],r,2*i,0,1);
    if((r.data[i+x.t]+=x.am(i+1,2*x.data[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
      r.data[i+x.t] -= x.DV;
      r.data[i+x.t+1] = 1;
    }
  }
  if(r.t > 0) r.data[r.t-1] += x.am(i,x.data[i],r,2*i,0,1);
  r.s = 0;
  r.clamp();
}

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m,q,r) {
  var pm = m.abs();
  if(pm.t <= 0) return;
  var pt = this.abs();
  if(pt.t < pm.t) {
    if(q != null) q.fromInt(0);
    if(r != null) this.copyTo(r);
    return;
  }
  if(r == null) r = nbi();
  var y = nbi(), ts = this.s, ms = m.s;
  var nsh = this.DB-nbits(pm.data[pm.t-1]);	// normalize modulus
  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); } else { pm.copyTo(y); pt.copyTo(r); }
  var ys = y.t;
  var y0 = y.data[ys-1];
  if(y0 == 0) return;
  var yt = y0*(1<<this.F1)+((ys>1)?y.data[ys-2]>>this.F2:0);
  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
  y.dlShiftTo(j,t);
  if(r.compareTo(t) >= 0) {
    r.data[r.t++] = 1;
    r.subTo(t,r);
  }
  BigInteger.ONE.dlShiftTo(ys,t);
  t.subTo(y,y);	// "negative" y so we can replace sub with am later
  while(y.t < ys) y.data[y.t++] = 0;
  while(--j >= 0) {
    // Estimate quotient digit
    var qd = (r.data[--i]==y0)?this.DM:Math.floor(r.data[i]*d1+(r.data[i-1]+e)*d2);
    if((r.data[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
      y.dlShiftTo(j,t);
      r.subTo(t,r);
      while(r.data[i] < --qd) r.subTo(t,r);
    }
  }
  if(q != null) {
    r.drShiftTo(ys,q);
    if(ts != ms) BigInteger.ZERO.subTo(q,q);
  }
  r.t = ys;
  r.clamp();
  if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
  if(ts < 0) BigInteger.ZERO.subTo(r,r);
}

// (public) this mod a
function bnMod(a) {
  var r = nbi();
  this.abs().divRemTo(a,null,r);
  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
  return r;
}

// Modular reduction using "classic" algorithm
function Classic(m) { this.m = m; }
function cConvert(x) {
  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
  else return x;
}
function cRevert(x) { return x; }
function cReduce(x) { x.divRemTo(this.m,null,x); }
function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
  if(this.t < 1) return 0;
  var x = this.data[0];
  if((x&1) == 0) return 0;
  var y = x&3;		// y == 1/x mod 2^2
  y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
  y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
  // last step - calculate inverse mod DV directly;
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
  y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
  // we really want the negative inverse, and -DV < y < DV
  return (y>0)?this.DV-y:-y;
}

// Montgomery reduction
function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp&0x7fff;
  this.mph = this.mp>>15;
  this.um = (1<<(m.DB-15))-1;
  this.mt2 = 2*m.t;
}

// xR mod m
function montConvert(x) {
  var r = nbi();
  x.abs().dlShiftTo(this.m.t,r);
  r.divRemTo(this.m,null,r);
  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
  return r;
}

// x/R mod m
function montRevert(x) {
  var r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
}

// x = x/R mod m (HAC 14.32)
function montReduce(x) {
  while(x.t <= this.mt2)	// pad x so am has enough room later
    x.data[x.t++] = 0;
  for(var i = 0; i < this.m.t; ++i) {
    // faster way of calculating u0 = x.data[i]*mp mod DV
    var j = x.data[i]&0x7fff;
    var u0 = (j*this.mpl+(((j*this.mph+(x.data[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
    // use am to combine the multiply-shift-add into one call
    j = i+this.m.t;
    x.data[j] += this.m.am(0,u0,x,i,0,this.m.t);
    // propagate carry
    while(x.data[j] >= x.DV) { x.data[j] -= x.DV; x.data[++j]++; }
  }
  x.clamp();
  x.drShiftTo(this.m.t,x);
  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
}

// r = "x^2/R mod m"; x != r
function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

// r = "xy/R mod m"; x,y != r
function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;

// (protected) true iff this is even
function bnpIsEven() { return ((this.t>0)?(this.data[0]&1):this.s) == 0; }

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e,z) {
  if(e > 0xffffffff || e < 1) return BigInteger.ONE;
  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
  g.copyTo(r);
  while(--i >= 0) {
    z.sqrTo(r,r2);
    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
    else { var t = r; r = r2; r2 = t; }
  }
  return z.revert(r);
}

// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e,m) {
  var z;
  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
  return this.exp(e,z);
}

// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;

// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;

// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

// jsbn2 lib

//Copyright (c) 2005-2009  Tom Wu
//All Rights Reserved.
//See "LICENSE" for details (See jsbn.js for LICENSE).

//Extended JavaScript BN functions, required for RSA private ops.

//Version 1.1: new BigInteger("0", 10) returns "proper" zero

//(public)
function bnClone() { var r = nbi(); this.copyTo(r); return r; }

//(public) return value as integer
function bnIntValue() {
if(this.s < 0) {
 if(this.t == 1) return this.data[0]-this.DV;
 else if(this.t == 0) return -1;
} else if(this.t == 1) return this.data[0];
else if(this.t == 0) return 0;
// assumes 16 < DB < 32
return ((this.data[1]&((1<<(32-this.DB))-1))<<this.DB)|this.data[0];
}

//(public) return value as byte
function bnByteValue() { return (this.t==0)?this.s:(this.data[0]<<24)>>24; }

//(public) return value as short (assumes DB>=16)
function bnShortValue() { return (this.t==0)?this.s:(this.data[0]<<16)>>16; }

//(protected) return x s.t. r^x < DV
function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

//(public) 0 if this == 0, 1 if this > 0
function bnSigNum() {
if(this.s < 0) return -1;
else if(this.t <= 0 || (this.t == 1 && this.data[0] <= 0)) return 0;
else return 1;
}

//(protected) convert to radix string
function bnpToRadix(b) {
if(b == null) b = 10;
if(this.signum() == 0 || b < 2 || b > 36) return "0";
var cs = this.chunkSize(b);
var a = Math.pow(b,cs);
var d = nbv(a), y = nbi(), z = nbi(), r = "";
this.divRemTo(d,y,z);
while(y.signum() > 0) {
 r = (a+z.intValue()).toString(b).substr(1) + r;
 y.divRemTo(d,y,z);
}
return z.intValue().toString(b) + r;
}

//(protected) convert from radix string
function bnpFromRadix(s,b) {
this.fromInt(0);
if(b == null) b = 10;
var cs = this.chunkSize(b);
var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
for(var i = 0; i < s.length; ++i) {
 var x = intAt(s,i);
 if(x < 0) {
   if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
   continue;
 }
 w = b*w+x;
 if(++j >= cs) {
   this.dMultiply(d);
   this.dAddOffset(w,0);
   j = 0;
   w = 0;
 }
}
if(j > 0) {
 this.dMultiply(Math.pow(b,j));
 this.dAddOffset(w,0);
}
if(mi) BigInteger.ZERO.subTo(this,this);
}

//(protected) alternate constructor
function bnpFromNumber(a,b,c) {
if("number" == typeof b) {
 // new BigInteger(int,int,RNG)
 if(a < 2) this.fromInt(1);
 else {
   this.fromNumber(a,c);
   if(!this.testBit(a-1))  // force MSB set
     this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);
   if(this.isEven()) this.dAddOffset(1,0); // force odd
   while(!this.isProbablePrime(b)) {
     this.dAddOffset(2,0);
     if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);
   }
 }
} else {
 // new BigInteger(int,RNG)
 var x = new Array(), t = a&7;
 x.length = (a>>3)+1;
 b.nextBytes(x);
 if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
 this.fromString(x,256);
}
}

//(public) convert to bigendian byte array
function bnToByteArray() {
var i = this.t, r = new Array();
r[0] = this.s;
var p = this.DB-(i*this.DB)%8, d, k = 0;
if(i-- > 0) {
 if(p < this.DB && (d = this.data[i]>>p) != (this.s&this.DM)>>p)
   r[k++] = d|(this.s<<(this.DB-p));
 while(i >= 0) {
   if(p < 8) {
     d = (this.data[i]&((1<<p)-1))<<(8-p);
     d |= this.data[--i]>>(p+=this.DB-8);
   } else {
     d = (this.data[i]>>(p-=8))&0xff;
     if(p <= 0) { p += this.DB; --i; }
   }
   if((d&0x80) != 0) d |= -256;
   if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
   if(k > 0 || d != this.s) r[k++] = d;
 }
}
return r;
}

function bnEquals(a) { return(this.compareTo(a)==0); }
function bnMin(a) { return(this.compareTo(a)<0)?this:a; }
function bnMax(a) { return(this.compareTo(a)>0)?this:a; }

//(protected) r = this op a (bitwise)
function bnpBitwiseTo(a,op,r) {
var i, f, m = Math.min(a.t,this.t);
for(i = 0; i < m; ++i) r.data[i] = op(this.data[i],a.data[i]);
if(a.t < this.t) {
 f = a.s&this.DM;
 for(i = m; i < this.t; ++i) r.data[i] = op(this.data[i],f);
 r.t = this.t;
} else {
 f = this.s&this.DM;
 for(i = m; i < a.t; ++i) r.data[i] = op(f,a.data[i]);
 r.t = a.t;
}
r.s = op(this.s,a.s);
r.clamp();
}

//(public) this & a
function op_and(x,y) { return x&y; }
function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

//(public) this | a
function op_or(x,y) { return x|y; }
function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

//(public) this ^ a
function op_xor(x,y) { return x^y; }
function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

//(public) this & ~a
function op_andnot(x,y) { return x&~y; }
function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

//(public) ~this
function bnNot() {
var r = nbi();
for(var i = 0; i < this.t; ++i) r.data[i] = this.DM&~this.data[i];
r.t = this.t;
r.s = ~this.s;
return r;
}

//(public) this << n
function bnShiftLeft(n) {
var r = nbi();
if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
return r;
}

//(public) this >> n
function bnShiftRight(n) {
var r = nbi();
if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
return r;
}

//return index of lowest 1-bit in x, x < 2^31
function lbit(x) {
if(x == 0) return -1;
var r = 0;
if((x&0xffff) == 0) { x >>= 16; r += 16; }
if((x&0xff) == 0) { x >>= 8; r += 8; }
if((x&0xf) == 0) { x >>= 4; r += 4; }
if((x&3) == 0) { x >>= 2; r += 2; }
if((x&1) == 0) ++r;
return r;
}

//(public) returns index of lowest 1-bit (or -1 if none)
function bnGetLowestSetBit() {
for(var i = 0; i < this.t; ++i)
 if(this.data[i] != 0) return i*this.DB+lbit(this.data[i]);
if(this.s < 0) return this.t*this.DB;
return -1;
}

//return number of 1 bits in x
function cbit(x) {
var r = 0;
while(x != 0) { x &= x-1; ++r; }
return r;
}

//(public) return number of set bits
function bnBitCount() {
var r = 0, x = this.s&this.DM;
for(var i = 0; i < this.t; ++i) r += cbit(this.data[i]^x);
return r;
}

//(public) true iff nth bit is set
function bnTestBit(n) {
var j = Math.floor(n/this.DB);
if(j >= this.t) return(this.s!=0);
return((this.data[j]&(1<<(n%this.DB)))!=0);
}

//(protected) this op (1<<n)
function bnpChangeBit(n,op) {
var r = BigInteger.ONE.shiftLeft(n);
this.bitwiseTo(r,op,r);
return r;
}

//(public) this | (1<<n)
function bnSetBit(n) { return this.changeBit(n,op_or); }

//(public) this & ~(1<<n)
function bnClearBit(n) { return this.changeBit(n,op_andnot); }

//(public) this ^ (1<<n)
function bnFlipBit(n) { return this.changeBit(n,op_xor); }

//(protected) r = this + a
function bnpAddTo(a,r) {
var i = 0, c = 0, m = Math.min(a.t,this.t);
while(i < m) {
 c += this.data[i]+a.data[i];
 r.data[i++] = c&this.DM;
 c >>= this.DB;
}
if(a.t < this.t) {
 c += a.s;
 while(i < this.t) {
   c += this.data[i];
   r.data[i++] = c&this.DM;
   c >>= this.DB;
 }
 c += this.s;
} else {
 c += this.s;
 while(i < a.t) {
   c += a.data[i];
   r.data[i++] = c&this.DM;
   c >>= this.DB;
 }
 c += a.s;
}
r.s = (c<0)?-1:0;
if(c > 0) r.data[i++] = c;
else if(c < -1) r.data[i++] = this.DV+c;
r.t = i;
r.clamp();
}

//(public) this + a
function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

//(public) this - a
function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

//(public) this * a
function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

//(public) this / a
function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

//(public) this % a
function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

//(public) [this/a,this%a]
function bnDivideAndRemainder(a) {
var q = nbi(), r = nbi();
this.divRemTo(a,q,r);
return new Array(q,r);
}

//(protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
this.data[this.t] = this.am(0,n-1,this,0,0,this.t);
++this.t;
this.clamp();
}

//(protected) this += n << w words, this >= 0
function bnpDAddOffset(n,w) {
if(n == 0) return;
while(this.t <= w) this.data[this.t++] = 0;
this.data[w] += n;
while(this.data[w] >= this.DV) {
 this.data[w] -= this.DV;
 if(++w >= this.t) this.data[this.t++] = 0;
 ++this.data[w];
}
}

//A "null" reducer
function NullExp() {}
function nNop(x) { return x; }
function nMulTo(x,y,r) { x.multiplyTo(y,r); }
function nSqrTo(x,r) { x.squareTo(r); }

NullExp.prototype.convert = nNop;
NullExp.prototype.revert = nNop;
NullExp.prototype.mulTo = nMulTo;
NullExp.prototype.sqrTo = nSqrTo;

//(public) this^e
function bnPow(e) { return this.exp(e,new NullExp()); }

//(protected) r = lower n words of "this * a", a.t <= n
//"this" should be the larger one if appropriate.
function bnpMultiplyLowerTo(a,n,r) {
var i = Math.min(this.t+a.t,n);
r.s = 0; // assumes a,this >= 0
r.t = i;
while(i > 0) r.data[--i] = 0;
var j;
for(j = r.t-this.t; i < j; ++i) r.data[i+this.t] = this.am(0,a.data[i],r,i,0,this.t);
for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a.data[i],r,i,0,n-i);
r.clamp();
}

//(protected) r = "this * a" without lower n words, n > 0
//"this" should be the larger one if appropriate.
function bnpMultiplyUpperTo(a,n,r) {
--n;
var i = r.t = this.t+a.t-n;
r.s = 0; // assumes a,this >= 0
while(--i >= 0) r.data[i] = 0;
for(i = Math.max(n-this.t,0); i < a.t; ++i)
 r.data[this.t+i-n] = this.am(n-i,a.data[i],r,0,0,this.t+i-n);
r.clamp();
r.drShiftTo(1,r);
}

//Barrett modular reduction
function Barrett(m) {
// setup Barrett
this.r2 = nbi();
this.q3 = nbi();
BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
this.mu = this.r2.divide(m);
this.m = m;
}

function barrettConvert(x) {
if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
else if(x.compareTo(this.m) < 0) return x;
else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
}

function barrettRevert(x) { return x; }

//x = x mod m (HAC 14.42)
function barrettReduce(x) {
x.drShiftTo(this.m.t-1,this.r2);
if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
x.subTo(this.r2,x);
while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
}

//r = x^2 mod m; x != r
function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

//r = x*y mod m; x,y != r
function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

Barrett.prototype.convert = barrettConvert;
Barrett.prototype.revert = barrettRevert;
Barrett.prototype.reduce = barrettReduce;
Barrett.prototype.mulTo = barrettMulTo;
Barrett.prototype.sqrTo = barrettSqrTo;

//(public) this^e % m (HAC 14.85)
function bnModPow(e,m) {
var i = e.bitLength(), k, r = nbv(1), z;
if(i <= 0) return r;
else if(i < 18) k = 1;
else if(i < 48) k = 3;
else if(i < 144) k = 4;
else if(i < 768) k = 5;
else k = 6;
if(i < 8)
 z = new Classic(m);
else if(m.isEven())
 z = new Barrett(m);
else
 z = new Montgomery(m);

// precomputation
var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
g[1] = z.convert(this);
if(k > 1) {
 var g2 = nbi();
 z.sqrTo(g[1],g2);
 while(n <= km) {
   g[n] = nbi();
   z.mulTo(g2,g[n-2],g[n]);
   n += 2;
 }
}

var j = e.t-1, w, is1 = true, r2 = nbi(), t;
i = nbits(e.data[j])-1;
while(j >= 0) {
 if(i >= k1) w = (e.data[j]>>(i-k1))&km;
 else {
   w = (e.data[j]&((1<<(i+1))-1))<<(k1-i);
   if(j > 0) w |= e.data[j-1]>>(this.DB+i-k1);
 }

 n = k;
 while((w&1) == 0) { w >>= 1; --n; }
 if((i -= n) < 0) { i += this.DB; --j; }
 if(is1) {  // ret == 1, don't bother squaring or multiplying it
   g[w].copyTo(r);
   is1 = false;
 } else {
   while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
   if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
   z.mulTo(r2,g[w],r);
 }

 while(j >= 0 && (e.data[j]&(1<<i)) == 0) {
   z.sqrTo(r,r2); t = r; r = r2; r2 = t;
   if(--i < 0) { i = this.DB-1; --j; }
 }
}
return z.revert(r);
}

//(public) gcd(this,a) (HAC 14.54)
function bnGCD(a) {
var x = (this.s<0)?this.negate():this.clone();
var y = (a.s<0)?a.negate():a.clone();
if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
var i = x.getLowestSetBit(), g = y.getLowestSetBit();
if(g < 0) return x;
if(i < g) g = i;
if(g > 0) {
 x.rShiftTo(g,x);
 y.rShiftTo(g,y);
}
while(x.signum() > 0) {
 if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
 if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
 if(x.compareTo(y) >= 0) {
   x.subTo(y,x);
   x.rShiftTo(1,x);
 } else {
   y.subTo(x,y);
   y.rShiftTo(1,y);
 }
}
if(g > 0) y.lShiftTo(g,y);
return y;
}

//(protected) this % n, n < 2^26
function bnpModInt(n) {
if(n <= 0) return 0;
var d = this.DV%n, r = (this.s<0)?n-1:0;
if(this.t > 0)
 if(d == 0) r = this.data[0]%n;
 else for(var i = this.t-1; i >= 0; --i) r = (d*r+this.data[i])%n;
return r;
}

//(public) 1/this % m (HAC 14.61)
function bnModInverse(m) {
var ac = m.isEven();
if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
var u = m.clone(), v = this.clone();
var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
while(u.signum() != 0) {
 while(u.isEven()) {
   u.rShiftTo(1,u);
   if(ac) {
     if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
     a.rShiftTo(1,a);
   } else if(!b.isEven()) b.subTo(m,b);
   b.rShiftTo(1,b);
 }
 while(v.isEven()) {
   v.rShiftTo(1,v);
   if(ac) {
     if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
     c.rShiftTo(1,c);
   } else if(!d.isEven()) d.subTo(m,d);
   d.rShiftTo(1,d);
 }
 if(u.compareTo(v) >= 0) {
   u.subTo(v,u);
   if(ac) a.subTo(c,a);
   b.subTo(d,b);
 } else {
   v.subTo(u,v);
   if(ac) c.subTo(a,c);
   d.subTo(b,d);
 }
}
if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
if(d.compareTo(m) >= 0) return d.subtract(m);
if(d.signum() < 0) d.addTo(m,d); else return d;
if(d.signum() < 0) return d.add(m); else return d;
}

var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];
var lplim = (1<<26)/lowprimes[lowprimes.length-1];

//(public) test primality with certainty >= 1-.5^t
function bnIsProbablePrime(t) {
var i, x = this.abs();
if(x.t == 1 && x.data[0] <= lowprimes[lowprimes.length-1]) {
 for(i = 0; i < lowprimes.length; ++i)
   if(x.data[0] == lowprimes[i]) return true;
 return false;
}
if(x.isEven()) return false;
i = 1;
while(i < lowprimes.length) {
 var m = lowprimes[i], j = i+1;
 while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
 m = x.modInt(m);
 while(i < j) if(m%lowprimes[i++] == 0) return false;
}
return x.millerRabin(t);
}

//(protected) true if probably prime (HAC 4.24, Miller-Rabin)
function bnpMillerRabin(t) {
var n1 = this.subtract(BigInteger.ONE);
var k = n1.getLowestSetBit();
if(k <= 0) return false;
var r = n1.shiftRight(k);
var prng = bnGetPrng();
var a;
for(var i = 0; i < t; ++i) {
 // select witness 'a' at random from between 1 and n1
 do {
   a = new BigInteger(this.bitLength(), prng);
 }
 while(a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);
 var y = a.modPow(r,this);
 if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
   var j = 1;
   while(j++ < k && y.compareTo(n1) != 0) {
     y = y.modPowInt(2,this);
     if(y.compareTo(BigInteger.ONE) == 0) return false;
   }
   if(y.compareTo(n1) != 0) return false;
 }
}
return true;
}

// get pseudo random number generator
function bnGetPrng() {
  // create prng with api that matches BigInteger secure random
  return {
    // x is an array to fill with bytes
    nextBytes: function(x) {
      for(var i = 0; i < x.length; ++i) {
        x[i] = Math.floor(Math.random() * 0x0100);
      }
    }
  };
}

//protected
BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.fromNumber = bnpFromNumber;
BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
BigInteger.prototype.changeBit = bnpChangeBit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
BigInteger.prototype.modInt = bnpModInt;
BigInteger.prototype.millerRabin = bnpMillerRabin;

//public
BigInteger.prototype.clone = bnClone;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.byteValue = bnByteValue;
BigInteger.prototype.shortValue = bnShortValue;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.toByteArray = bnToByteArray;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.min = bnMin;
BigInteger.prototype.max = bnMax;
BigInteger.prototype.and = bnAnd;
BigInteger.prototype.or = bnOr;
BigInteger.prototype.xor = bnXor;
BigInteger.prototype.andNot = bnAndNot;
BigInteger.prototype.not = bnNot;
BigInteger.prototype.shiftLeft = bnShiftLeft;
BigInteger.prototype.shiftRight = bnShiftRight;
BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
BigInteger.prototype.bitCount = bnBitCount;
BigInteger.prototype.testBit = bnTestBit;
BigInteger.prototype.setBit = bnSetBit;
BigInteger.prototype.clearBit = bnClearBit;
BigInteger.prototype.flipBit = bnFlipBit;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.remainder = bnRemainder;
BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
BigInteger.prototype.modPow = bnModPow;
BigInteger.prototype.modInverse = bnModInverse;
BigInteger.prototype.pow = bnPow;
BigInteger.prototype.gcd = bnGCD;
BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

//BigInteger interfaces not implemented in jsbn:

//BigInteger(int signum, byte[] magnitude)
//double doubleValue()
//float floatValue()
//int hashCode()
//long longValue()
//static BigInteger valueOf(long val)
/**
 * Javascript implementation of RSA-KEM.
 *
 * @author Lautaro Cozzani Rodriguez
 * @author Dave Longley
 *
 * Copyright (c) 2014 Lautaro Cozzani <lautaro.cozzani@scytl.com>
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./util');
require('./random');
require('./jsbn');

module.exports = forge.kem = forge.kem || {};

var BigInteger = forge.jsbn.BigInteger;

/**
 * The API for the RSA Key Encapsulation Mechanism (RSA-KEM) from ISO 18033-2.
 */
forge.kem.rsa = {};

/**
 * Creates an RSA KEM API object for generating a secret asymmetric key.
 *
 * The symmetric key may be generated via a call to 'encrypt', which will
 * produce a ciphertext to be transmitted to the recipient and a key to be
 * kept secret. The ciphertext is a parameter to be passed to 'decrypt' which
 * will produce the same secret key for the recipient to use to decrypt a
 * message that was encrypted with the secret key.
 *
 * @param kdf the KDF API to use (eg: new forge.kem.kdf1()).
 * @param options the options to use.
 *          [prng] a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync".
 */
forge.kem.rsa.create = function(kdf, options) {
  options = options || {};
  var prng = options.prng || forge.random;

  var kem = {};

  /**
   * Generates a secret key and its encapsulation.
   *
   * @param publicKey the RSA public key to encrypt with.
   * @param keyLength the length, in bytes, of the secret key to generate.
   *
   * @return an object with:
   *   encapsulation: the ciphertext for generating the secret key, as a
   *     binary-encoded string of bytes.
   *   key: the secret key to use for encrypting a message.
   */
  kem.encrypt = function(publicKey, keyLength) {
    // generate a random r where 1 < r < n
    var byteLength = Math.ceil(publicKey.n.bitLength() / 8);
    var r;
    do {
      r = new BigInteger(
        forge.util.bytesToHex(prng.getBytesSync(byteLength)),
        16).mod(publicKey.n);
    } while(r.compareTo(BigInteger.ONE) <= 0);

    // prepend r with zeros
    r = forge.util.hexToBytes(r.toString(16));
    var zeros = byteLength - r.length;
    if(zeros > 0) {
      r = forge.util.fillString(String.fromCharCode(0), zeros) + r;
    }

    // encrypt the random
    var encapsulation = publicKey.encrypt(r, 'NONE');

    // generate the secret key
    var key = kdf.generate(r, keyLength);

    return {encapsulation: encapsulation, key: key};
  };

  /**
   * Decrypts an encapsulated secret key.
   *
   * @param privateKey the RSA private key to decrypt with.
   * @param encapsulation the ciphertext for generating the secret key, as
   *          a binary-encoded string of bytes.
   * @param keyLength the length, in bytes, of the secret key to generate.
   *
   * @return the secret key as a binary-encoded string of bytes.
   */
  kem.decrypt = function(privateKey, encapsulation, keyLength) {
    // decrypt the encapsulation and generate the secret key
    var r = privateKey.decrypt(encapsulation, 'NONE');
    return kdf.generate(r, keyLength);
  };

  return kem;
};

// TODO: add forge.kem.kdf.create('KDF1', {md: ..., ...}) API?

/**
 * Creates a key derivation API object that implements KDF1 per ISO 18033-2.
 *
 * @param md the hash API to use.
 * @param [digestLength] an optional digest length that must be positive and
 *          less than or equal to md.digestLength.
 *
 * @return a KDF1 API object.
 */
forge.kem.kdf1 = function(md, digestLength) {
  _createKDF(this, md, 0, digestLength || md.digestLength);
};

/**
 * Creates a key derivation API object that implements KDF2 per ISO 18033-2.
 *
 * @param md the hash API to use.
 * @param [digestLength] an optional digest length that must be positive and
 *          less than or equal to md.digestLength.
 *
 * @return a KDF2 API object.
 */
forge.kem.kdf2 = function(md, digestLength) {
  _createKDF(this, md, 1, digestLength || md.digestLength);
};

/**
 * Creates a KDF1 or KDF2 API object.
 *
 * @param md the hash API to use.
 * @param counterStart the starting index for the counter.
 * @param digestLength the digest length to use.
 *
 * @return the KDF API object.
 */
function _createKDF(kdf, md, counterStart, digestLength) {
  /**
   * Generate a key of the specified length.
   *
   * @param x the binary-encoded byte string to generate a key from.
   * @param length the number of bytes to generate (the size of the key).
   *
   * @return the key as a binary-encoded string.
   */
  kdf.generate = function(x, length) {
    var key = new forge.util.ByteBuffer();

    // run counter from counterStart to ceil(length / Hash.len)
    var k = Math.ceil(length / digestLength) + counterStart;

    var c = new forge.util.ByteBuffer();
    for(var i = counterStart; i < k; ++i) {
      // I2OSP(i, 4): convert counter to an octet string of 4 octets
      c.putInt32(i);

      // digest 'x' and the counter and add the result to the key
      md.start();
      md.update(x + c.getBytes());
      var hash = md.digest();
      key.putBytes(hash.getBytes(digestLength));
    }

    // truncate to the correct key length
    key.truncate(key.length() - length);
    return key.getBytes();
  };
}
/**
 * Cross-browser support for logging in a web application.
 *
 * @author David I. Lehn <dlehn@digitalbazaar.com>
 *
 * Copyright (c) 2008-2013 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./util');

/* LOG API */
module.exports = forge.log = forge.log || {};

/**
 * Application logging system.
 *
 * Each logger level available as it's own function of the form:
 *   forge.log.level(category, args...)
 * The category is an arbitrary string, and the args are the same as
 * Firebug's console.log API. By default the call will be output as:
 *   'LEVEL [category] <args[0]>, args[1], ...'
 * This enables proper % formatting via the first argument.
 * Each category is enabled by default but can be enabled or disabled with
 * the setCategoryEnabled() function.
 */
// list of known levels
forge.log.levels = [
  'none', 'error', 'warning', 'info', 'debug', 'verbose', 'max'];
// info on the levels indexed by name:
//   index: level index
//   name: uppercased display name
var sLevelInfo = {};
// list of loggers
var sLoggers = [];
/**
 * Standard console logger. If no console support is enabled this will
 * remain null. Check before using.
 */
var sConsoleLogger = null;

// logger flags
/**
 * Lock the level at the current value. Used in cases where user config may
 * set the level such that only critical messages are seen but more verbose
 * messages are needed for debugging or other purposes.
 */
forge.log.LEVEL_LOCKED = (1 << 1);
/**
 * Always call log function. By default, the logging system will check the
 * message level against logger.level before calling the log function. This
 * flag allows the function to do its own check.
 */
forge.log.NO_LEVEL_CHECK = (1 << 2);
/**
 * Perform message interpolation with the passed arguments. "%" style
 * fields in log messages will be replaced by arguments as needed. Some
 * loggers, such as Firebug, may do this automatically. The original log
 * message will be available as 'message' and the interpolated version will
 * be available as 'fullMessage'.
 */
forge.log.INTERPOLATE = (1 << 3);

// setup each log level
for(var i = 0; i < forge.log.levels.length; ++i) {
  var level = forge.log.levels[i];
  sLevelInfo[level] = {
    index: i,
    name: level.toUpperCase()
  };
}

/**
 * Message logger. Will dispatch a message to registered loggers as needed.
 *
 * @param message message object
 */
forge.log.logMessage = function(message) {
  var messageLevelIndex = sLevelInfo[message.level].index;
  for(var i = 0; i < sLoggers.length; ++i) {
    var logger = sLoggers[i];
    if(logger.flags & forge.log.NO_LEVEL_CHECK) {
      logger.f(message);
    } else {
      // get logger level
      var loggerLevelIndex = sLevelInfo[logger.level].index;
      // check level
      if(messageLevelIndex <= loggerLevelIndex) {
        // message critical enough, call logger
        logger.f(logger, message);
      }
    }
  }
};

/**
 * Sets the 'standard' key on a message object to:
 * "LEVEL [category] " + message
 *
 * @param message a message log object
 */
forge.log.prepareStandard = function(message) {
  if(!('standard' in message)) {
    message.standard =
      sLevelInfo[message.level].name +
      //' ' + +message.timestamp +
      ' [' + message.category + '] ' +
      message.message;
  }
};

/**
 * Sets the 'full' key on a message object to the original message
 * interpolated via % formatting with the message arguments.
 *
 * @param message a message log object.
 */
forge.log.prepareFull = function(message) {
  if(!('full' in message)) {
    // copy args and insert message at the front
    var args = [message.message];
    args = args.concat([] || message['arguments']);
    // format the message
    message.full = forge.util.format.apply(this, args);
  }
};

/**
 * Applies both preparseStandard() and prepareFull() to a message object and
 * store result in 'standardFull'.
 *
 * @param message a message log object.
 */
forge.log.prepareStandardFull = function(message) {
  if(!('standardFull' in message)) {
    // FIXME implement 'standardFull' logging
    forge.log.prepareStandard(message);
    message.standardFull = message.standard;
  }
};

// create log level functions
if(true) {
  // levels for which we want functions
  var levels = ['error', 'warning', 'info', 'debug', 'verbose'];
  for(var i = 0; i < levels.length; ++i) {
    // wrap in a function to ensure proper level var is passed
    (function(level) {
      // create function for this level
      forge.log[level] = function(category, message/*, args...*/) {
        // convert arguments to real array, remove category and message
        var args = Array.prototype.slice.call(arguments).slice(2);
        // create message object
        // Note: interpolation and standard formatting is done lazily
        var msg = {
          timestamp: new Date(),
          level: level,
          category: category,
          message: message,
          'arguments': args
          /*standard*/
          /*full*/
          /*fullMessage*/
        };
        // process this message
        forge.log.logMessage(msg);
      };
    })(levels[i]);
  }
}

/**
 * Creates a new logger with specified custom logging function.
 *
 * The logging function has a signature of:
 *   function(logger, message)
 * logger: current logger
 * message: object:
 *   level: level id
 *   category: category
 *   message: string message
 *   arguments: Array of extra arguments
 *   fullMessage: interpolated message and arguments if INTERPOLATE flag set
 *
 * @param logFunction a logging function which takes a log message object
 *          as a parameter.
 *
 * @return a logger object.
 */
forge.log.makeLogger = function(logFunction) {
  var logger = {
    flags: 0,
    f: logFunction
  };
  forge.log.setLevel(logger, 'none');
  return logger;
};

/**
 * Sets the current log level on a logger.
 *
 * @param logger the target logger.
 * @param level the new maximum log level as a string.
 *
 * @return true if set, false if not.
 */
forge.log.setLevel = function(logger, level) {
  var rval = false;
  if(logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {
    for(var i = 0; i < forge.log.levels.length; ++i) {
      var aValidLevel = forge.log.levels[i];
      if(level == aValidLevel) {
        // set level
        logger.level = level;
        rval = true;
        break;
      }
    }
  }

  return rval;
};

/**
 * Locks the log level at its current value.
 *
 * @param logger the target logger.
 * @param lock boolean lock value, default to true.
 */
forge.log.lock = function(logger, lock) {
  if(typeof lock === 'undefined' || lock) {
    logger.flags |= forge.log.LEVEL_LOCKED;
  } else {
    logger.flags &= ~forge.log.LEVEL_LOCKED;
  }
};

/**
 * Adds a logger.
 *
 * @param logger the logger object.
 */
forge.log.addLogger = function(logger) {
  sLoggers.push(logger);
};

// setup the console logger if possible, else create fake console.log
if(typeof(console) !== 'undefined' && 'log' in console) {
  var logger;
  if(console.error && console.warn && console.info && console.debug) {
    // looks like Firebug-style logging is available
    // level handlers map
    var levelHandlers = {
      error: console.error,
      warning: console.warn,
      info: console.info,
      debug: console.debug,
      verbose: console.debug
    };
    var f = function(logger, message) {
      forge.log.prepareStandard(message);
      var handler = levelHandlers[message.level];
      // prepend standard message and concat args
      var args = [message.standard];
      args = args.concat(message['arguments'].slice());
      // apply to low-level console function
      handler.apply(console, args);
    };
    logger = forge.log.makeLogger(f);
  } else {
    // only appear to have basic console.log
    var f = function(logger, message) {
      forge.log.prepareStandardFull(message);
      console.log(message.standardFull);
    };
    logger = forge.log.makeLogger(f);
  }
  forge.log.setLevel(logger, 'debug');
  forge.log.addLogger(logger);
  sConsoleLogger = logger;
} else {
  // define fake console.log to avoid potential script errors on
  // browsers that do not have console logging
  console = {
    log: function() {}
  };
}

/*
 * Check for logging control query vars in current URL.
 *
 * console.level=<level-name>
 * Set's the console log level by name.  Useful to override defaults and
 * allow more verbose logging before a user config is loaded.
 *
 * console.lock=<true|false>
 * Lock the console log level at whatever level it is set at.  This is run
 * after console.level is processed.  Useful to force a level of verbosity
 * that could otherwise be limited by a user config.
 */
if(sConsoleLogger !== null &&
  typeof window !== 'undefined' && window.location
) {
  var query = new URL(window.location.href).searchParams;
  if(query.has('console.level')) {
    // set with last value
    forge.log.setLevel(
      sConsoleLogger, query.get('console.level').slice(-1)[0]);
  }
  if(query.has('console.lock')) {
    // set with last value
    var lock = query.get('console.lock').slice(-1)[0];
    if(lock == 'true') {
      forge.log.lock(sConsoleLogger);
    }
  }
}

// provide public access to console logger
forge.log.consoleLogger = sConsoleLogger;
/**
 * Node.js module for all known Forge message digests.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2017 Digital Bazaar, Inc.
 */
module.exports = require('./md');

require('./md5');
require('./sha1');
require('./sha256');
require('./sha512');
/**
 * Node.js module for Forge message digests.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2017 Digital Bazaar, Inc.
 */
var forge = require('./forge');

module.exports = forge.md = forge.md || {};
forge.md.algorithms = forge.md.algorithms || {};
/**
 * Message Digest Algorithm 5 with 128-bit digest (MD5) implementation.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./md');
require('./util');

var md5 = module.exports = forge.md5 = forge.md5 || {};
forge.md.md5 = forge.md.algorithms.md5 = md5;

/**
 * Creates an MD5 message digest object.
 *
 * @return a message digest object.
 */
md5.create = function() {
  // do initialization as necessary
  if(!_initialized) {
    _init();
  }

  // MD5 state contains four 32-bit integers
  var _state = null;

  // input buffer
  var _input = forge.util.createBuffer();

  // used for word storage
  var _w = new Array(16);

  // message digest object
  var md = {
    algorithm: 'md5',
    blockLength: 64,
    digestLength: 16,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };

  /**
   * Starts the digest.
   *
   * @return this digest object.
   */
  md.start = function() {
    // up to 56-bit message length for convenience
    md.messageLength = 0;

    // full message length (set md.messageLength64 for backwards-compatibility)
    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;
    for(var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }
    _input = forge.util.createBuffer();
    _state = {
      h0: 0x67452301,
      h1: 0xEFCDAB89,
      h2: 0x98BADCFE,
      h3: 0x10325476
    };
    return md;
  };
  // start digest automatically for first time
  md.start();

  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
  md.update = function(msg, encoding) {
    if(encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    }

    // update message length
    var len = msg.length;
    md.messageLength += len;
    len = [(len / 0x100000000) >>> 0, len >>> 0];
    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = (len[1] / 0x100000000) >>> 0;
    }

    // add bytes to input buffer
    _input.putBytes(msg);

    // process bytes
    _update(_state, _w, _input);

    // compact input buffer every 2K or if empty
    if(_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };

  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
  md.digest = function() {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate MD5 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */

    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes());

    // compute remaining size to be digested (include message length size)
    var remaining = (
      md.fullMessageLength[md.fullMessageLength.length - 1] +
      md.messageLengthSize);

    // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes
    var overflow = remaining & (md.blockLength - 1);
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

    // serialize message length in bits in little-endian order; since length
    // is stored in bytes we multiply by 8 and add carry
    var bits, carry = 0;
    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      bits = md.fullMessageLength[i] * 8 + carry;
      carry = (bits / 0x100000000) >>> 0;
      finalBlock.putInt32Le(bits >>> 0);
    }

    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3
    };
    _update(s2, _w, finalBlock);
    var rval = forge.util.createBuffer();
    rval.putInt32Le(s2.h0);
    rval.putInt32Le(s2.h1);
    rval.putInt32Le(s2.h2);
    rval.putInt32Le(s2.h3);
    return rval;
  };

  return md;
};

// padding, constant tables for calculating md5
var _padding = null;
var _g = null;
var _r = null;
var _k = null;
var _initialized = false;

/**
 * Initializes the constant tables.
 */
function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

  // g values
  _g = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12,
    5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2,
    0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9];

  // rounds table
  _r = [
    7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
    5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
    4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
    6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21];

  // get the result of abs(sin(i + 1)) as a 32-bit integer
  _k = new Array(64);
  for(var i = 0; i < 64; ++i) {
    _k[i] = Math.floor(Math.abs(Math.sin(i + 1)) * 0x100000000);
  }

  // now initialized
  _initialized = true;
}

/**
 * Updates an MD5 state with the given byte buffer.
 *
 * @param s the MD5 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t, a, b, c, d, f, r, i;
  var len = bytes.length();
  while(len >= 64) {
    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;

    // round 1
    for(i = 0; i < 16; ++i) {
      w[i] = bytes.getInt32Le();
      f = d ^ (b & (c ^ d));
      t = (a + f + _k[i] + w[i]);
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += (t << r) | (t >>> (32 - r));
    }
    // round 2
    for(; i < 32; ++i) {
      f = c ^ (d & (b ^ c));
      t = (a + f + _k[i] + w[_g[i]]);
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += (t << r) | (t >>> (32 - r));
    }
    // round 3
    for(; i < 48; ++i) {
      f = b ^ c ^ d;
      t = (a + f + _k[i] + w[_g[i]]);
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += (t << r) | (t >>> (32 - r));
    }
    // round 4
    for(; i < 64; ++i) {
      f = c ^ (b | ~d);
      t = (a + f + _k[i] + w[_g[i]]);
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += (t << r) | (t >>> (32 - r));
    }

    // update hash state
    s.h0 = (s.h0 + a) | 0;
    s.h1 = (s.h1 + b) | 0;
    s.h2 = (s.h2 + c) | 0;
    s.h3 = (s.h3 + d) | 0;

    len -= 64;
  }
}
/**
 * Node.js module for Forge mask generation functions.
 *
 * @author Stefan Siegl
 *
 * Copyright 2012 Stefan Siegl <stesie@brokenpipe.de>
 */
var forge = require('./forge');
require('./mgf1');

module.exports = forge.mgf = forge.mgf || {};
forge.mgf.mgf1 = forge.mgf1;
/**
 * Javascript implementation of mask generation function MGF1.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./util');

forge.mgf = forge.mgf || {};
var mgf1 = module.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};

/**
 * Creates a MGF1 mask generation function object.
 *
 * @param md the message digest API to use (eg: forge.md.sha1.create()).
 *
 * @return a mask generation function object.
 */
mgf1.create = function(md) {
  var mgf = {
    /**
     * Generate mask of specified length.
     *
     * @param {String} seed The seed for mask generation.
     * @param maskLen Number of bytes to generate.
     * @return {String} The generated mask.
     */
    generate: function(seed, maskLen) {
      /* 2. Let T be the empty octet string. */
      var t = new forge.util.ByteBuffer();

      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */
      var len = Math.ceil(maskLen / md.digestLength);
      for(var i = 0; i < len; i++) {
        /* a. Convert counter to an octet string C of length 4 octets */
        var c = new forge.util.ByteBuffer();
        c.putInt32(i);

        /* b. Concatenate the hash of the seed mgfSeed and C to the octet
         * string T: */
        md.start();
        md.update(seed + c.getBytes());
        t.putBuffer(md.digest());
      }

      /* Output the leading maskLen octets of T as the octet string mask. */
      t.truncate(t.length() - maskLen);
      return t.getBytes();
    }
  };

  return mgf;
};
/**
 * Object IDs for ASN.1.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
var forge = require('./forge');

forge.pki = forge.pki || {};
var oids = module.exports = forge.pki.oids = forge.oids = forge.oids || {};

// set id to name mapping and name to id mapping
function _IN(id, name) {
  oids[id] = name;
  oids[name] = id;
}
// set id to name mapping only
function _I_(id, name) {
  oids[id] = name;
}

// algorithm OIDs
_IN('1.2.840.113549.1.1.1', 'rsaEncryption');
// Note: md2 & md4 not implemented
//_IN('1.2.840.113549.1.1.2', 'md2WithRSAEncryption');
//_IN('1.2.840.113549.1.1.3', 'md4WithRSAEncryption');
_IN('1.2.840.113549.1.1.4', 'md5WithRSAEncryption');
_IN('1.2.840.113549.1.1.5', 'sha1WithRSAEncryption');
_IN('1.2.840.113549.1.1.7', 'RSAES-OAEP');
_IN('1.2.840.113549.1.1.8', 'mgf1');
_IN('1.2.840.113549.1.1.9', 'pSpecified');
_IN('1.2.840.113549.1.1.10', 'RSASSA-PSS');
_IN('1.2.840.113549.1.1.11', 'sha256WithRSAEncryption');
_IN('1.2.840.113549.1.1.12', 'sha384WithRSAEncryption');
_IN('1.2.840.113549.1.1.13', 'sha512WithRSAEncryption');
// Edwards-curve Digital Signature Algorithm (EdDSA) Ed25519
_IN('1.3.101.112', 'EdDSA25519');

_IN('1.2.840.10040.4.3', 'dsa-with-sha1');

_IN('1.3.14.3.2.7', 'desCBC');

_IN('1.3.14.3.2.26', 'sha1');
// Deprecated equivalent of sha1WithRSAEncryption
_IN('1.3.14.3.2.29', 'sha1WithRSASignature');
_IN('2.16.840.1.101.3.4.2.1', 'sha256');
_IN('2.16.840.1.101.3.4.2.2', 'sha384');
_IN('2.16.840.1.101.3.4.2.3', 'sha512');
_IN('2.16.840.1.101.3.4.2.4', 'sha224');
_IN('2.16.840.1.101.3.4.2.5', 'sha512-224');
_IN('2.16.840.1.101.3.4.2.6', 'sha512-256');
_IN('1.2.840.113549.2.2', 'md2');
_IN('1.2.840.113549.2.5', 'md5');

// pkcs#7 content types
_IN('1.2.840.113549.1.7.1', 'data');
_IN('1.2.840.113549.1.7.2', 'signedData');
_IN('1.2.840.113549.1.7.3', 'envelopedData');
_IN('1.2.840.113549.1.7.4', 'signedAndEnvelopedData');
_IN('1.2.840.113549.1.7.5', 'digestedData');
_IN('1.2.840.113549.1.7.6', 'encryptedData');

// pkcs#9 oids
_IN('1.2.840.113549.1.9.1', 'emailAddress');
_IN('1.2.840.113549.1.9.2', 'unstructuredName');
_IN('1.2.840.113549.1.9.3', 'contentType');
_IN('1.2.840.113549.1.9.4', 'messageDigest');
_IN('1.2.840.113549.1.9.5', 'signingTime');
_IN('1.2.840.113549.1.9.6', 'counterSignature');
_IN('1.2.840.113549.1.9.7', 'challengePassword');
_IN('1.2.840.113549.1.9.8', 'unstructuredAddress');
_IN('1.2.840.113549.1.9.14', 'extensionRequest');

_IN('1.2.840.113549.1.9.20', 'friendlyName');
_IN('1.2.840.113549.1.9.21', 'localKeyId');
_IN('1.2.840.113549.1.9.22.1', 'x509Certificate');

// pkcs#12 safe bags
_IN('1.2.840.113549.1.12.10.1.1', 'keyBag');
_IN('1.2.840.113549.1.12.10.1.2', 'pkcs8ShroudedKeyBag');
_IN('1.2.840.113549.1.12.10.1.3', 'certBag');
_IN('1.2.840.113549.1.12.10.1.4', 'crlBag');
_IN('1.2.840.113549.1.12.10.1.5', 'secretBag');
_IN('1.2.840.113549.1.12.10.1.6', 'safeContentsBag');

// password-based-encryption for pkcs#12
_IN('1.2.840.113549.1.5.13', 'pkcs5PBES2');
_IN('1.2.840.113549.1.5.12', 'pkcs5PBKDF2');

_IN('1.2.840.113549.1.12.1.1', 'pbeWithSHAAnd128BitRC4');
_IN('1.2.840.113549.1.12.1.2', 'pbeWithSHAAnd40BitRC4');
_IN('1.2.840.113549.1.12.1.3', 'pbeWithSHAAnd3-KeyTripleDES-CBC');
_IN('1.2.840.113549.1.12.1.4', 'pbeWithSHAAnd2-KeyTripleDES-CBC');
_IN('1.2.840.113549.1.12.1.5', 'pbeWithSHAAnd128BitRC2-CBC');
_IN('1.2.840.113549.1.12.1.6', 'pbewithSHAAnd40BitRC2-CBC');

// hmac OIDs
_IN('1.2.840.113549.2.7', 'hmacWithSHA1');
_IN('1.2.840.113549.2.8', 'hmacWithSHA224');
_IN('1.2.840.113549.2.9', 'hmacWithSHA256');
_IN('1.2.840.113549.2.10', 'hmacWithSHA384');
_IN('1.2.840.113549.2.11', 'hmacWithSHA512');

// symmetric key algorithm oids
_IN('1.2.840.113549.3.7', 'des-EDE3-CBC');
_IN('2.16.840.1.101.3.4.1.2', 'aes128-CBC');
_IN('2.16.840.1.101.3.4.1.22', 'aes192-CBC');
_IN('2.16.840.1.101.3.4.1.42', 'aes256-CBC');

// certificate issuer/subject OIDs
_IN('2.5.4.3', 'commonName');
_IN('2.5.4.4', 'surname');
_IN('2.5.4.5', 'serialNumber');
_IN('2.5.4.6', 'countryName');
_IN('2.5.4.7', 'localityName');
_IN('2.5.4.8', 'stateOrProvinceName');
_IN('2.5.4.9', 'streetAddress');
_IN('2.5.4.10', 'organizationName');
_IN('2.5.4.11', 'organizationalUnitName');
_IN('2.5.4.12', 'title');
_IN('2.5.4.13', 'description');
_IN('2.5.4.15', 'businessCategory');
_IN('2.5.4.17', 'postalCode');
_IN('2.5.4.42', 'givenName');
_IN('1.3.6.1.4.1.311.60.2.1.2', 'jurisdictionOfIncorporationStateOrProvinceName');
_IN('1.3.6.1.4.1.311.60.2.1.3', 'jurisdictionOfIncorporationCountryName');

// X.509 extension OIDs
_IN('2.16.840.1.113730.1.1', 'nsCertType');
_IN('2.16.840.1.113730.1.13', 'nsComment'); // deprecated in theory; still widely used
_I_('2.5.29.1', 'authorityKeyIdentifier'); // deprecated, use .35
_I_('2.5.29.2', 'keyAttributes'); // obsolete use .37 or .15
_I_('2.5.29.3', 'certificatePolicies'); // deprecated, use .32
_I_('2.5.29.4', 'keyUsageRestriction'); // obsolete use .37 or .15
_I_('2.5.29.5', 'policyMapping'); // deprecated use .33
_I_('2.5.29.6', 'subtreesConstraint'); // obsolete use .30
_I_('2.5.29.7', 'subjectAltName'); // deprecated use .17
_I_('2.5.29.8', 'issuerAltName'); // deprecated use .18
_I_('2.5.29.9', 'subjectDirectoryAttributes');
_I_('2.5.29.10', 'basicConstraints'); // deprecated use .19
_I_('2.5.29.11', 'nameConstraints'); // deprecated use .30
_I_('2.5.29.12', 'policyConstraints'); // deprecated use .36
_I_('2.5.29.13', 'basicConstraints'); // deprecated use .19
_IN('2.5.29.14', 'subjectKeyIdentifier');
_IN('2.5.29.15', 'keyUsage');
_I_('2.5.29.16', 'privateKeyUsagePeriod');
_IN('2.5.29.17', 'subjectAltName');
_IN('2.5.29.18', 'issuerAltName');
_IN('2.5.29.19', 'basicConstraints');
_I_('2.5.29.20', 'cRLNumber');
_I_('2.5.29.21', 'cRLReason');
_I_('2.5.29.22', 'expirationDate');
_I_('2.5.29.23', 'instructionCode');
_I_('2.5.29.24', 'invalidityDate');
_I_('2.5.29.25', 'cRLDistributionPoints'); // deprecated use .31
_I_('2.5.29.26', 'issuingDistributionPoint'); // deprecated use .28
_I_('2.5.29.27', 'deltaCRLIndicator');
_I_('2.5.29.28', 'issuingDistributionPoint');
_I_('2.5.29.29', 'certificateIssuer');
_I_('2.5.29.30', 'nameConstraints');
_IN('2.5.29.31', 'cRLDistributionPoints');
_IN('2.5.29.32', 'certificatePolicies');
_I_('2.5.29.33', 'policyMappings');
_I_('2.5.29.34', 'policyConstraints'); // deprecated use .36
_IN('2.5.29.35', 'authorityKeyIdentifier');
_I_('2.5.29.36', 'policyConstraints');
_IN('2.5.29.37', 'extKeyUsage');
_I_('2.5.29.46', 'freshestCRL');
_I_('2.5.29.54', 'inhibitAnyPolicy');

// extKeyUsage purposes
_IN('1.3.6.1.4.1.11129.2.4.2', 'timestampList');
_IN('1.3.6.1.5.5.7.1.1', 'authorityInfoAccess');
_IN('1.3.6.1.5.5.7.3.1', 'serverAuth');
_IN('1.3.6.1.5.5.7.3.2', 'clientAuth');
_IN('1.3.6.1.5.5.7.3.3', 'codeSigning');
_IN('1.3.6.1.5.5.7.3.4', 'emailProtection');
_IN('1.3.6.1.5.5.7.3.8', 'timeStamping');
/**
 * Password-based encryption functions.
 *
 * @author Dave Longley
 * @author Stefan Siegl <stesie@brokenpipe.de>
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * An EncryptedPrivateKeyInfo:
 *
 * EncryptedPrivateKeyInfo ::= SEQUENCE {
 *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,
 *   encryptedData        EncryptedData }
 *
 * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * EncryptedData ::= OCTET STRING
 */
var forge = require('./forge');
require('./aes');
require('./asn1');
require('./des');
require('./md');
require('./oids');
require('./pbkdf2');
require('./pem');
require('./random');
require('./rc2');
require('./rsa');
require('./util');

if(typeof BigInteger === 'undefined') {
  var BigInteger = forge.jsbn.BigInteger;
}

// shortcut for asn.1 API
var asn1 = forge.asn1;

/* Password-based encryption implementation. */
var pki = forge.pki = forge.pki || {};
module.exports = pki.pbe = forge.pbe = forge.pbe || {};
var oids = pki.oids;

// validator for an EncryptedPrivateKeyInfo structure
// Note: Currently only works w/algorithm params
var encryptedPrivateKeyValidator = {
  name: 'EncryptedPrivateKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encryptionOid'
    }, {
      name: 'AlgorithmIdentifier.parameters',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'encryptionParams'
    }]
  }, {
    // encryptedData
    name: 'EncryptedPrivateKeyInfo.encryptedData',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'encryptedData'
  }]
};

// validator for a PBES2Algorithms structure
// Note: Currently only works w/PBKDF2 + AES encryption schemes
var PBES2AlgorithmsValidator = {
  name: 'PBES2Algorithms',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'PBES2Algorithms.keyDerivationFunc',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'PBES2Algorithms.keyDerivationFunc.oid',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'kdfOid'
    }, {
      name: 'PBES2Algorithms.params',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'PBES2Algorithms.params.salt',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: 'kdfSalt'
      }, {
        name: 'PBES2Algorithms.params.iterationCount',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: 'kdfIterationCount'
      }, {
        name: 'PBES2Algorithms.params.keyLength',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        optional: true,
        capture: 'keyLength'
      }, {
        // prf
        name: 'PBES2Algorithms.params.prf',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        optional: true,
        value: [{
          name: 'PBES2Algorithms.params.prf.algorithm',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: 'prfOid'
        }]
      }]
    }]
  }, {
    name: 'PBES2Algorithms.encryptionScheme',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'PBES2Algorithms.encryptionScheme.oid',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encOid'
    }, {
      name: 'PBES2Algorithms.encryptionScheme.iv',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OCTETSTRING,
      constructed: false,
      capture: 'encIv'
    }]
  }]
};

var pkcs12PbeParamsValidator = {
  name: 'pkcs-12PbeParams',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'pkcs-12PbeParams.salt',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'salt'
  }, {
    name: 'pkcs-12PbeParams.iterations',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'iterations'
  }]
};

/**
 * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.
 *
 * PBES2Algorithms ALGORITHM-IDENTIFIER ::=
 *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}
 *
 * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}
 *
 * PBES2-params ::= SEQUENCE {
 *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
 *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
 * }
 *
 * PBES2-KDFs ALGORITHM-IDENTIFIER ::=
 *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }
 *
 * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }
 *
 * PBKDF2-params ::= SEQUENCE {
 *   salt CHOICE {
 *     specified OCTET STRING,
 *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}
 *   },
 *   iterationCount INTEGER (1..MAX),
 *   keyLength INTEGER (1..MAX) OPTIONAL,
 *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1
 * }
 *
 * @param obj the ASN.1 PrivateKeyInfo object.
 * @param password the password to encrypt with.
 * @param options:
 *          algorithm the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
 *          count the iteration count to use.
 *          saltSize the salt size to use.
 *          prfAlgorithm the PRF message digest algorithm to use
 *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')
 *
 * @return the ASN.1 EncryptedPrivateKeyInfo.
 */
pki.encryptPrivateKeyInfo = function(obj, password, options) {
  // set default options
  options = options || {};
  options.saltSize = options.saltSize || 8;
  options.count = options.count || 2048;
  options.algorithm = options.algorithm || 'aes128';
  options.prfAlgorithm = options.prfAlgorithm || 'sha1';

  // generate PBE params
  var salt = forge.random.getBytesSync(options.saltSize);
  var count = options.count;
  var countBytes = asn1.integerToDer(count);
  var dkLen;
  var encryptionAlgorithm;
  var encryptedData;
  if(options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {
    // do PBES2
    var ivLen, encOid, cipherFn;
    switch(options.algorithm) {
    case 'aes128':
      dkLen = 16;
      ivLen = 16;
      encOid = oids['aes128-CBC'];
      cipherFn = forge.aes.createEncryptionCipher;
      break;
    case 'aes192':
      dkLen = 24;
      ivLen = 16;
      encOid = oids['aes192-CBC'];
      cipherFn = forge.aes.createEncryptionCipher;
      break;
    case 'aes256':
      dkLen = 32;
      ivLen = 16;
      encOid = oids['aes256-CBC'];
      cipherFn = forge.aes.createEncryptionCipher;
      break;
    case 'des':
      dkLen = 8;
      ivLen = 8;
      encOid = oids['desCBC'];
      cipherFn = forge.des.createEncryptionCipher;
      break;
    default:
      var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
      error.algorithm = options.algorithm;
      throw error;
    }

    // get PRF message digest
    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();
    var md = prfAlgorithmToMessageDigest(prfAlgorithm);

    // encrypt private key using pbe SHA-1 and AES/DES
    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
    var iv = forge.random.getBytesSync(ivLen);
    var cipher = cipherFn(dk);
    cipher.start(iv);
    cipher.update(asn1.toDer(obj));
    cipher.finish();
    encryptedData = cipher.output.getBytes();

    // get PBKDF2-params
    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);

    encryptionAlgorithm = asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(oids['pkcs5PBES2']).getBytes()),
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // keyDerivationFunc
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
            asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()),
          // PBKDF2-params
          params
        ]),
        // encryptionScheme
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
            asn1.oidToDer(encOid).getBytes()),
          // iv
          asn1.create(
            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)
        ])
      ])
    ]);
  } else if(options.algorithm === '3des') {
    // Do PKCS12 PBE
    dkLen = 24;

    var saltBytes = new forge.util.ByteBuffer(salt);
    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);
    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);
    var cipher = forge.des.createEncryptionCipher(dk);
    cipher.start(iv);
    cipher.update(asn1.toDer(obj));
    cipher.finish();
    encryptedData = cipher.output.getBytes();

    encryptionAlgorithm = asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),
      // pkcs-12PbeParams
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // salt
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),
        // iteration count
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
          countBytes.getBytes())
      ])
    ]);
  } else {
    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
    error.algorithm = options.algorithm;
    throw error;
  }

  // EncryptedPrivateKeyInfo
  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // encryptionAlgorithm
    encryptionAlgorithm,
    // encryptedData
    asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)
  ]);
  return rval;
};

/**
 * Decrypts a ASN.1 PrivateKeyInfo object.
 *
 * @param obj the ASN.1 EncryptedPrivateKeyInfo object.
 * @param password the password to decrypt with.
 *
 * @return the ASN.1 PrivateKeyInfo on success, null on failure.
 */
pki.decryptPrivateKeyInfo = function(obj, password) {
  var rval = null;

  // get PBE params
  var capture = {};
  var errors = [];
  if(!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {
    var error = new Error('Cannot read encrypted private key. ' +
      'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
    error.errors = errors;
    throw error;
  }

  // get cipher
  var oid = asn1.derToOid(capture.encryptionOid);
  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);

  // get encrypted data
  var encrypted = forge.util.createBuffer(capture.encryptedData);

  cipher.update(encrypted);
  if(cipher.finish()) {
    rval = asn1.fromDer(cipher.output);
  }

  return rval;
};

/**
 * Converts a EncryptedPrivateKeyInfo to PEM format.
 *
 * @param epki the EncryptedPrivateKeyInfo.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted encrypted private key.
 */
pki.encryptedPrivateKeyToPem = function(epki, maxline) {
  // convert to DER, then PEM-encode
  var msg = {
    type: 'ENCRYPTED PRIVATE KEY',
    body: asn1.toDer(epki).getBytes()
  };
  return forge.pem.encode(msg, {maxline: maxline});
};

/**
 * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption
 * is not performed.
 *
 * @param pem the EncryptedPrivateKeyInfo in PEM-format.
 *
 * @return the ASN.1 EncryptedPrivateKeyInfo.
 */
pki.encryptedPrivateKeyFromPem = function(pem) {
  var msg = forge.pem.decode(pem)[0];

  if(msg.type !== 'ENCRYPTED PRIVATE KEY') {
    var error = new Error('Could not convert encrypted private key from PEM; ' +
      'PEM header type is "ENCRYPTED PRIVATE KEY".');
    error.headerType = msg.type;
    throw error;
  }
  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert encrypted private key from PEM; ' +
      'PEM is encrypted.');
  }

  // convert DER to ASN.1 object
  return asn1.fromDer(msg.body);
};

/**
 * Encrypts an RSA private key. By default, the key will be wrapped in
 * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.
 * This is the standard, preferred way to encrypt a private key.
 *
 * To produce a non-standard PEM-encrypted private key that uses encapsulated
 * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL
 * private key encryption), set the 'legacy' option to true. Note: Using this
 * option will cause the iteration count to be forced to 1.
 *
 * Note: The 'des' algorithm is supported, but it is not considered to be
 * secure because it only uses a single 56-bit key. If possible, it is highly
 * recommended that a different algorithm be used.
 *
 * @param rsaKey the RSA key to encrypt.
 * @param password the password to use.
 * @param options:
 *          algorithm: the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des', 'des').
 *          count: the iteration count to use.
 *          saltSize: the salt size to use.
 *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated
 *            headers (DEK-Info) private key.
 *
 * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.
 */
pki.encryptRsaPrivateKey = function(rsaKey, password, options) {
  // standard PKCS#8
  options = options || {};
  if(!options.legacy) {
    // encrypt PrivateKeyInfo
    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));
    rval = pki.encryptPrivateKeyInfo(rval, password, options);
    return pki.encryptedPrivateKeyToPem(rval);
  }

  // legacy non-PKCS#8
  var algorithm;
  var iv;
  var dkLen;
  var cipherFn;
  switch(options.algorithm) {
  case 'aes128':
    algorithm = 'AES-128-CBC';
    dkLen = 16;
    iv = forge.random.getBytesSync(16);
    cipherFn = forge.aes.createEncryptionCipher;
    break;
  case 'aes192':
    algorithm = 'AES-192-CBC';
    dkLen = 24;
    iv = forge.random.getBytesSync(16);
    cipherFn = forge.aes.createEncryptionCipher;
    break;
  case 'aes256':
    algorithm = 'AES-256-CBC';
    dkLen = 32;
    iv = forge.random.getBytesSync(16);
    cipherFn = forge.aes.createEncryptionCipher;
    break;
  case '3des':
    algorithm = 'DES-EDE3-CBC';
    dkLen = 24;
    iv = forge.random.getBytesSync(8);
    cipherFn = forge.des.createEncryptionCipher;
    break;
  case 'des':
    algorithm = 'DES-CBC';
    dkLen = 8;
    iv = forge.random.getBytesSync(8);
    cipherFn = forge.des.createEncryptionCipher;
    break;
  default:
    var error = new Error('Could not encrypt RSA private key; unsupported ' +
      'encryption algorithm "' + options.algorithm + '".');
    error.algorithm = options.algorithm;
    throw error;
  }

  // encrypt private key using OpenSSL legacy key derivation
  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
  var cipher = cipherFn(dk);
  cipher.start(iv);
  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));
  cipher.finish();

  var msg = {
    type: 'RSA PRIVATE KEY',
    procType: {
      version: '4',
      type: 'ENCRYPTED'
    },
    dekInfo: {
      algorithm: algorithm,
      parameters: forge.util.bytesToHex(iv).toUpperCase()
    },
    body: cipher.output.getBytes()
  };
  return forge.pem.encode(msg);
};

/**
 * Decrypts an RSA private key.
 *
 * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.
 * @param password the password to use.
 *
 * @return the RSA key on success, null on failure.
 */
pki.decryptRsaPrivateKey = function(pem, password) {
  var rval = null;

  var msg = forge.pem.decode(pem)[0];

  if(msg.type !== 'ENCRYPTED PRIVATE KEY' &&
    msg.type !== 'PRIVATE KEY' &&
    msg.type !== 'RSA PRIVATE KEY') {
    var error = new Error('Could not convert private key from PEM; PEM header type ' +
      'is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".');
    error.headerType = error;
    throw error;
  }

  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
    var dkLen;
    var cipherFn;
    switch(msg.dekInfo.algorithm) {
    case 'DES-CBC':
      dkLen = 8;
      cipherFn = forge.des.createDecryptionCipher;
      break;
    case 'DES-EDE3-CBC':
      dkLen = 24;
      cipherFn = forge.des.createDecryptionCipher;
      break;
    case 'AES-128-CBC':
      dkLen = 16;
      cipherFn = forge.aes.createDecryptionCipher;
      break;
    case 'AES-192-CBC':
      dkLen = 24;
      cipherFn = forge.aes.createDecryptionCipher;
      break;
    case 'AES-256-CBC':
      dkLen = 32;
      cipherFn = forge.aes.createDecryptionCipher;
      break;
    case 'RC2-40-CBC':
      dkLen = 5;
      cipherFn = function(key) {
        return forge.rc2.createDecryptionCipher(key, 40);
      };
      break;
    case 'RC2-64-CBC':
      dkLen = 8;
      cipherFn = function(key) {
        return forge.rc2.createDecryptionCipher(key, 64);
      };
      break;
    case 'RC2-128-CBC':
      dkLen = 16;
      cipherFn = function(key) {
        return forge.rc2.createDecryptionCipher(key, 128);
      };
      break;
    default:
      var error = new Error('Could not decrypt private key; unsupported ' +
        'encryption algorithm "' + msg.dekInfo.algorithm + '".');
      error.algorithm = msg.dekInfo.algorithm;
      throw error;
    }

    // use OpenSSL legacy key derivation
    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);
    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
    var cipher = cipherFn(dk);
    cipher.start(iv);
    cipher.update(forge.util.createBuffer(msg.body));
    if(cipher.finish()) {
      rval = cipher.output.getBytes();
    } else {
      return rval;
    }
  } else {
    rval = msg.body;
  }

  if(msg.type === 'ENCRYPTED PRIVATE KEY') {
    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);
  } else {
    // decryption already performed above
    rval = asn1.fromDer(rval);
  }

  if(rval !== null) {
    rval = pki.privateKeyFromAsn1(rval);
  }

  return rval;
};

/**
 * Derives a PKCS#12 key.
 *
 * @param password the password to derive the key material from, null or
 *          undefined for none.
 * @param salt the salt, as a ByteBuffer, to use.
 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
 * @param iter the iteration count.
 * @param n the number of bytes to derive from the password.
 * @param md the message digest to use, defaults to SHA-1.
 *
 * @return a ByteBuffer with the bytes derived from the password.
 */
pki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {
  var j, l;

  if(typeof md === 'undefined' || md === null) {
    if(!('sha1' in forge.md)) {
      throw new Error('"sha1" hash algorithm unavailable.');
    }
    md = forge.md.sha1.create();
  }

  var u = md.digestLength;
  var v = md.blockLength;
  var result = new forge.util.ByteBuffer();

  /* Convert password to Unicode byte buffer + trailing 0-byte. */
  var passBuf = new forge.util.ByteBuffer();
  if(password !== null && password !== undefined) {
    for(l = 0; l < password.length; l++) {
      passBuf.putInt16(password.charCodeAt(l));
    }
    passBuf.putInt16(0);
  }

  /* Length of salt and password in BYTES. */
  var p = passBuf.length();
  var s = salt.length();

  /* 1. Construct a string, D (the "diversifier"), by concatenating
        v copies of ID. */
  var D = new forge.util.ByteBuffer();
  D.fillWithByte(id, v);

  /* 2. Concatenate copies of the salt together to create a string S of length
        v * ceil(s / v) bytes (the final copy of the salt may be trunacted
        to create S).
        Note that if the salt is the empty string, then so is S. */
  var Slen = v * Math.ceil(s / v);
  var S = new forge.util.ByteBuffer();
  for(l = 0; l < Slen; l++) {
    S.putByte(salt.at(l % s));
  }

  /* 3. Concatenate copies of the password together to create a string P of
        length v * ceil(p / v) bytes (the final copy of the password may be
        truncated to create P).
        Note that if the password is the empty string, then so is P. */
  var Plen = v * Math.ceil(p / v);
  var P = new forge.util.ByteBuffer();
  for(l = 0; l < Plen; l++) {
    P.putByte(passBuf.at(l % p));
  }

  /* 4. Set I=S||P to be the concatenation of S and P. */
  var I = S;
  I.putBuffer(P);

  /* 5. Set c=ceil(n / u). */
  var c = Math.ceil(n / u);

  /* 6. For i=1, 2, ..., c, do the following: */
  for(var i = 1; i <= c; i++) {
    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */
    var buf = new forge.util.ByteBuffer();
    buf.putBytes(D.bytes());
    buf.putBytes(I.bytes());
    for(var round = 0; round < iter; round++) {
      md.start();
      md.update(buf.getBytes());
      buf = md.digest();
    }

    /* b) Concatenate copies of Ai to create a string B of length v bytes (the
          final copy of Ai may be truncated to create B). */
    var B = new forge.util.ByteBuffer();
    for(l = 0; l < v; l++) {
      B.putByte(buf.at(l % u));
    }

    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,
          where k=ceil(s / v) + ceil(p / v), modify I by setting
          Ij=(Ij+B+1) mod 2v for each j.  */
    var k = Math.ceil(s / v) + Math.ceil(p / v);
    var Inew = new forge.util.ByteBuffer();
    for(j = 0; j < k; j++) {
      var chunk = new forge.util.ByteBuffer(I.getBytes(v));
      var x = 0x1ff;
      for(l = B.length() - 1; l >= 0; l--) {
        x = x >> 8;
        x += B.at(l) + chunk.at(l);
        chunk.setAt(l, x & 0xff);
      }
      Inew.putBuffer(chunk);
    }
    I = Inew;

    /* Add Ai to A. */
    result.putBuffer(buf);
  }

  result.truncate(result.length() - n);
  return result;
};

/**
 * Get new Forge cipher object instance.
 *
 * @param oid the OID (in string notation).
 * @param params the ASN.1 params object.
 * @param password the password to decrypt with.
 *
 * @return new cipher object instance.
 */
pki.pbe.getCipher = function(oid, params, password) {
  switch(oid) {
  case pki.oids['pkcs5PBES2']:
    return pki.pbe.getCipherForPBES2(oid, params, password);

  case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
  case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
    return pki.pbe.getCipherForPKCS12PBE(oid, params, password);

  default:
    var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');
    error.oid = oid;
    error.supportedOids = [
      'pkcs5PBES2',
      'pbeWithSHAAnd3-KeyTripleDES-CBC',
      'pbewithSHAAnd40BitRC2-CBC'
    ];
    throw error;
  }
};

/**
 * Get new Forge cipher object instance according to PBES2 params block.
 *
 * The returned cipher instance is already started using the IV
 * from PBES2 parameter block.
 *
 * @param oid the PKCS#5 PBKDF2 OID (in string notation).
 * @param params the ASN.1 PBES2-params object.
 * @param password the password to decrypt with.
 *
 * @return new cipher object instance.
 */
pki.pbe.getCipherForPBES2 = function(oid, params, password) {
  // get PBE params
  var capture = {};
  var errors = [];
  if(!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {
    var error = new Error('Cannot read password-based-encryption algorithm ' +
      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
    error.errors = errors;
    throw error;
  }

  // check oids
  oid = asn1.derToOid(capture.kdfOid);
  if(oid !== pki.oids['pkcs5PBKDF2']) {
    var error = new Error('Cannot read encrypted private key. ' +
      'Unsupported key derivation function OID.');
    error.oid = oid;
    error.supportedOids = ['pkcs5PBKDF2'];
    throw error;
  }
  oid = asn1.derToOid(capture.encOid);
  if(oid !== pki.oids['aes128-CBC'] &&
    oid !== pki.oids['aes192-CBC'] &&
    oid !== pki.oids['aes256-CBC'] &&
    oid !== pki.oids['des-EDE3-CBC'] &&
    oid !== pki.oids['desCBC']) {
    var error = new Error('Cannot read encrypted private key. ' +
      'Unsupported encryption scheme OID.');
    error.oid = oid;
    error.supportedOids = [
      'aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];
    throw error;
  }

  // set PBE params
  var salt = capture.kdfSalt;
  var count = forge.util.createBuffer(capture.kdfIterationCount);
  count = count.getInt(count.length() << 3);
  var dkLen;
  var cipherFn;
  switch(pki.oids[oid]) {
  case 'aes128-CBC':
    dkLen = 16;
    cipherFn = forge.aes.createDecryptionCipher;
    break;
  case 'aes192-CBC':
    dkLen = 24;
    cipherFn = forge.aes.createDecryptionCipher;
    break;
  case 'aes256-CBC':
    dkLen = 32;
    cipherFn = forge.aes.createDecryptionCipher;
    break;
  case 'des-EDE3-CBC':
    dkLen = 24;
    cipherFn = forge.des.createDecryptionCipher;
    break;
  case 'desCBC':
    dkLen = 8;
    cipherFn = forge.des.createDecryptionCipher;
    break;
  }

  // get PRF message digest
  var md = prfOidToMessageDigest(capture.prfOid);

  // decrypt private key using pbe with chosen PRF and AES/DES
  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
  var iv = capture.encIv;
  var cipher = cipherFn(dk);
  cipher.start(iv);

  return cipher;
};

/**
 * Get new Forge cipher object instance for PKCS#12 PBE.
 *
 * The returned cipher instance is already started using the key & IV
 * derived from the provided password and PKCS#12 PBE salt.
 *
 * @param oid The PKCS#12 PBE OID (in string notation).
 * @param params The ASN.1 PKCS#12 PBE-params object.
 * @param password The password to decrypt with.
 *
 * @return the new cipher object instance.
 */
pki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {
  // get PBE params
  var capture = {};
  var errors = [];
  if(!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {
    var error = new Error('Cannot read password-based-encryption algorithm ' +
      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
    error.errors = errors;
    throw error;
  }

  var salt = forge.util.createBuffer(capture.salt);
  var count = forge.util.createBuffer(capture.iterations);
  count = count.getInt(count.length() << 3);

  var dkLen, dIvLen, cipherFn;
  switch(oid) {
    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
      dkLen = 24;
      dIvLen = 8;
      cipherFn = forge.des.startDecrypting;
      break;

    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
      dkLen = 5;
      dIvLen = 8;
      cipherFn = function(key, iv) {
        var cipher = forge.rc2.createDecryptionCipher(key, 40);
        cipher.start(iv, null);
        return cipher;
      };
      break;

    default:
      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');
      error.oid = oid;
      throw error;
  }

  // get PRF message digest
  var md = prfOidToMessageDigest(capture.prfOid);
  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);
  md.start();
  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);

  return cipherFn(key, iv);
};

/**
 * OpenSSL's legacy key derivation function.
 *
 * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html
 *
 * @param password the password to derive the key from.
 * @param salt the salt to use, null for none.
 * @param dkLen the number of bytes needed for the derived key.
 * @param [options] the options to use:
 *          [md] an optional message digest object to use.
 */
pki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {
  if(typeof md === 'undefined' || md === null) {
    if(!('md5' in forge.md)) {
      throw new Error('"md5" hash algorithm unavailable.');
    }
    md = forge.md.md5.create();
  }
  if(salt === null) {
    salt = '';
  }
  var digests = [hash(md, password + salt)];
  for(var length = 16, i = 1; length < dkLen; ++i, length += 16) {
    digests.push(hash(md, digests[i - 1] + password + salt));
  }
  return digests.join('').substr(0, dkLen);
};

function hash(md, bytes) {
  return md.start().update(bytes).digest().getBytes();
}

function prfOidToMessageDigest(prfOid) {
  // get PRF algorithm, default to SHA-1
  var prfAlgorithm;
  if(!prfOid) {
    prfAlgorithm = 'hmacWithSHA1';
  } else {
    prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];
    if(!prfAlgorithm) {
      var error = new Error('Unsupported PRF OID.');
      error.oid = prfOid;
      error.supported = [
        'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',
        'hmacWithSHA512'];
      throw error;
    }
  }
  return prfAlgorithmToMessageDigest(prfAlgorithm);
}

function prfAlgorithmToMessageDigest(prfAlgorithm) {
  var factory = forge.md;
  switch(prfAlgorithm) {
  case 'hmacWithSHA224':
    factory = forge.md.sha512;
  case 'hmacWithSHA1':
  case 'hmacWithSHA256':
  case 'hmacWithSHA384':
  case 'hmacWithSHA512':
    prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();
    break;
  default:
    var error = new Error('Unsupported PRF algorithm.');
    error.algorithm = prfAlgorithm;
    error.supported = [
      'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',
      'hmacWithSHA512'];
    throw error;
  }
  if(!factory || !(prfAlgorithm in factory)) {
    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);
  }
  return factory[prfAlgorithm].create();
}

function createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {
  var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // salt
    asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),
    // iteration count
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      countBytes.getBytes())
  ]);
  // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm
  if(prfAlgorithm !== 'hmacWithSHA1') {
    params.value.push(
      // key length
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
        forge.util.hexToBytes(dkLen.toString(16))),
      // AlgorithmIdentifier
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // algorithm
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()),
        // parameters (null)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
      ]));
  }
  return params;
}
/**
 * Password-Based Key-Derivation Function #2 implementation.
 *
 * See RFC 2898 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./hmac');
require('./md');
require('./util');

var pkcs5 = forge.pkcs5 = forge.pkcs5 || {};

var crypto;
if(forge.util.isNodejs && !forge.options.usePureJavaScript) {
  crypto = require('crypto');
}

/**
 * Derives a key from a password.
 *
 * @param p the password as a binary-encoded string of bytes.
 * @param s the salt as a binary-encoded string of bytes.
 * @param c the iteration count, a positive integer.
 * @param dkLen the intended length, in bytes, of the derived key,
 *          (max: 2^32 - 1) * hash length of the PRF.
 * @param [md] the message digest (or algorithm identifier as a string) to use
 *          in the PRF, defaults to SHA-1.
 * @param [callback(err, key)] presence triggers asynchronous version, called
 *          once the operation completes.
 *
 * @return the derived key, as a binary-encoded string of bytes, for the
 *           synchronous version (if no callback is specified).
 */
module.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function(
  p, s, c, dkLen, md, callback) {
  if(typeof md === 'function') {
    callback = md;
    md = null;
  }

  // use native implementation if possible and not disabled, note that
  // some node versions only support SHA-1, others allow digest to be changed
  if(forge.util.isNodejs && !forge.options.usePureJavaScript &&
    crypto.pbkdf2 && (md === null || typeof md !== 'object') &&
    (crypto.pbkdf2Sync.length > 4 || (!md || md === 'sha1'))) {
    if(typeof md !== 'string') {
      // default prf to SHA-1
      md = 'sha1';
    }
    p = Buffer.from(p, 'binary');
    s = Buffer.from(s, 'binary');
    if(!callback) {
      if(crypto.pbkdf2Sync.length === 4) {
        return crypto.pbkdf2Sync(p, s, c, dkLen).toString('binary');
      }
      return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');
    }
    if(crypto.pbkdf2Sync.length === 4) {
      return crypto.pbkdf2(p, s, c, dkLen, function(err, key) {
        if(err) {
          return callback(err);
        }
        callback(null, key.toString('binary'));
      });
    }
    return crypto.pbkdf2(p, s, c, dkLen, md, function(err, key) {
      if(err) {
        return callback(err);
      }
      callback(null, key.toString('binary'));
    });
  }

  if(typeof md === 'undefined' || md === null) {
    // default prf to SHA-1
    md = 'sha1';
  }
  if(typeof md === 'string') {
    if(!(md in forge.md.algorithms)) {
      throw new Error('Unknown hash algorithm: ' + md);
    }
    md = forge.md[md].create();
  }

  var hLen = md.digestLength;

  /* 1. If dkLen > (2^32 - 1) * hLen, output "derived key too long" and
    stop. */
  if(dkLen > (0xFFFFFFFF * hLen)) {
    var err = new Error('Derived key is too long.');
    if(callback) {
      return callback(err);
    }
    throw err;
  }

  /* 2. Let len be the number of hLen-octet blocks in the derived key,
    rounding up, and let r be the number of octets in the last
    block:

    len = CEIL(dkLen / hLen),
    r = dkLen - (len - 1) * hLen. */
  var len = Math.ceil(dkLen / hLen);
  var r = dkLen - (len - 1) * hLen;

  /* 3. For each block of the derived key apply the function F defined
    below to the password P, the salt S, the iteration count c, and
    the block index to compute the block:

    T_1 = F(P, S, c, 1),
    T_2 = F(P, S, c, 2),
    ...
    T_len = F(P, S, c, len),

    where the function F is defined as the exclusive-or sum of the
    first c iterates of the underlying pseudorandom function PRF
    applied to the password P and the concatenation of the salt S
    and the block index i:

    F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c

    where

    u_1 = PRF(P, S || INT(i)),
    u_2 = PRF(P, u_1),
    ...
    u_c = PRF(P, u_{c-1}).

    Here, INT(i) is a four-octet encoding of the integer i, most
    significant octet first. */
  var prf = forge.hmac.create();
  prf.start(md, p);
  var dk = '';
  var xor, u_c, u_c1;

  // sync version
  if(!callback) {
    for(var i = 1; i <= len; ++i) {
      // PRF(P, S || INT(i)) (first iteration)
      prf.start(null, null);
      prf.update(s);
      prf.update(forge.util.int32ToBytes(i));
      xor = u_c1 = prf.digest().getBytes();

      // PRF(P, u_{c-1}) (other iterations)
      for(var j = 2; j <= c; ++j) {
        prf.start(null, null);
        prf.update(u_c1);
        u_c = prf.digest().getBytes();
        // F(p, s, c, i)
        xor = forge.util.xorBytes(xor, u_c, hLen);
        u_c1 = u_c;
      }

      /* 4. Concatenate the blocks and extract the first dkLen octets to
        produce a derived key DK:

        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
      dk += (i < len) ? xor : xor.substr(0, r);
    }
    /* 5. Output the derived key DK. */
    return dk;
  }

  // async version
  var i = 1, j;
  function outer() {
    if(i > len) {
      // done
      return callback(null, dk);
    }

    // PRF(P, S || INT(i)) (first iteration)
    prf.start(null, null);
    prf.update(s);
    prf.update(forge.util.int32ToBytes(i));
    xor = u_c1 = prf.digest().getBytes();

    // PRF(P, u_{c-1}) (other iterations)
    j = 2;
    inner();
  }

  function inner() {
    if(j <= c) {
      prf.start(null, null);
      prf.update(u_c1);
      u_c = prf.digest().getBytes();
      // F(p, s, c, i)
      xor = forge.util.xorBytes(xor, u_c, hLen);
      u_c1 = u_c;
      ++j;
      return forge.util.setImmediate(inner);
    }

    /* 4. Concatenate the blocks and extract the first dkLen octets to
      produce a derived key DK:

      DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
    dk += (i < len) ? xor : xor.substr(0, r);

    ++i;
    outer();
  }

  outer();
};
/**
 * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.
 *
 * See: RFC 1421.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
 *
 * A Forge PEM object has the following fields:
 *
 * type: identifies the type of message (eg: "RSA PRIVATE KEY").
 *
 * procType: identifies the type of processing performed on the message,
 *   it has two subfields: version and type, eg: 4,ENCRYPTED.
 *
 * contentDomain: identifies the type of content in the message, typically
 *   only uses the value: "RFC822".
 *
 * dekInfo: identifies the message encryption algorithm and mode and includes
 *   any parameters for the algorithm, it has two subfields: algorithm and
 *   parameters, eg: DES-CBC,F8143EDE5960C597.
 *
 * headers: contains all other PEM encapsulated headers -- where order is
 *   significant (for pairing data like recipient ID + key info).
 *
 * body: the binary-encoded body.
 */
var forge = require('./forge');
require('./util');

// shortcut for pem API
var pem = module.exports = forge.pem = forge.pem || {};

/**
 * Encodes (serializes) the given PEM object.
 *
 * @param msg the PEM message object to encode.
 * @param options the options to use:
 *          maxline the maximum characters per line for the body, (default: 64).
 *
 * @return the PEM-formatted string.
 */
pem.encode = function(msg, options) {
  options = options || {};
  var rval = '-----BEGIN ' + msg.type + '-----\r\n';

  // encode special headers
  var header;
  if(msg.procType) {
    header = {
      name: 'Proc-Type',
      values: [String(msg.procType.version), msg.procType.type]
    };
    rval += foldHeader(header);
  }
  if(msg.contentDomain) {
    header = {name: 'Content-Domain', values: [msg.contentDomain]};
    rval += foldHeader(header);
  }
  if(msg.dekInfo) {
    header = {name: 'DEK-Info', values: [msg.dekInfo.algorithm]};
    if(msg.dekInfo.parameters) {
      header.values.push(msg.dekInfo.parameters);
    }
    rval += foldHeader(header);
  }

  if(msg.headers) {
    // encode all other headers
    for(var i = 0; i < msg.headers.length; ++i) {
      rval += foldHeader(msg.headers[i]);
    }
  }

  // terminate header
  if(msg.procType) {
    rval += '\r\n';
  }

  // add body
  rval += forge.util.encode64(msg.body, options.maxline || 64) + '\r\n';

  rval += '-----END ' + msg.type + '-----\r\n';
  return rval;
};

/**
 * Decodes (deserializes) all PEM messages found in the given string.
 *
 * @param str the PEM-formatted string to decode.
 *
 * @return the PEM message objects in an array.
 */
pem.decode = function(str) {
  var rval = [];

  // split string into PEM messages (be lenient w/EOF on BEGIN line)
  var rMessage = /\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g;
  var rHeader = /([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/;
  var rCRLF = /\r?\n/;
  var match;
  while(true) {
    match = rMessage.exec(str);
    if(!match) {
      break;
    }

    // accept "NEW CERTIFICATE REQUEST" as "CERTIFICATE REQUEST"
    // https://datatracker.ietf.org/doc/html/rfc7468#section-7
    var type = match[1];
    if(type === 'NEW CERTIFICATE REQUEST') {
      type = 'CERTIFICATE REQUEST';
    }

    var msg = {
      type: type,
      procType: null,
      contentDomain: null,
      dekInfo: null,
      headers: [],
      body: forge.util.decode64(match[3])
    };
    rval.push(msg);

    // no headers
    if(!match[2]) {
      continue;
    }

    // parse headers
    var lines = match[2].split(rCRLF);
    var li = 0;
    while(match && li < lines.length) {
      // get line, trim any rhs whitespace
      var line = lines[li].replace(/\s+$/, '');

      // RFC2822 unfold any following folded lines
      for(var nl = li + 1; nl < lines.length; ++nl) {
        var next = lines[nl];
        if(!/\s/.test(next[0])) {
          break;
        }
        line += next;
        li = nl;
      }

      // parse header
      match = line.match(rHeader);
      if(match) {
        var header = {name: match[1], values: []};
        var values = match[2].split(',');
        for(var vi = 0; vi < values.length; ++vi) {
          header.values.push(ltrim(values[vi]));
        }

        // Proc-Type must be the first header
        if(!msg.procType) {
          if(header.name !== 'Proc-Type') {
            throw new Error('Invalid PEM formatted message. The first ' +
              'encapsulated header must be "Proc-Type".');
          } else if(header.values.length !== 2) {
            throw new Error('Invalid PEM formatted message. The "Proc-Type" ' +
              'header must have two subfields.');
          }
          msg.procType = {version: values[0], type: values[1]};
        } else if(!msg.contentDomain && header.name === 'Content-Domain') {
          // special-case Content-Domain
          msg.contentDomain = values[0] || '';
        } else if(!msg.dekInfo && header.name === 'DEK-Info') {
          // special-case DEK-Info
          if(header.values.length === 0) {
            throw new Error('Invalid PEM formatted message. The "DEK-Info" ' +
              'header must have at least one subfield.');
          }
          msg.dekInfo = {algorithm: values[0], parameters: values[1] || null};
        } else {
          msg.headers.push(header);
        }
      }

      ++li;
    }

    if(msg.procType === 'ENCRYPTED' && !msg.dekInfo) {
      throw new Error('Invalid PEM formatted message. The "DEK-Info" ' +
        'header must be present if "Proc-Type" is "ENCRYPTED".');
    }
  }

  if(rval.length === 0) {
    throw new Error('Invalid PEM formatted message.');
  }

  return rval;
};

function foldHeader(header) {
  var rval = header.name + ': ';

  // ensure values with CRLF are folded
  var values = [];
  var insertSpace = function(match, $1) {
    return ' ' + $1;
  };
  for(var i = 0; i < header.values.length; ++i) {
    values.push(header.values[i].replace(/^(\S+\r\n)/, insertSpace));
  }
  rval += values.join(',') + '\r\n';

  // do folding
  var length = 0;
  var candidate = -1;
  for(var i = 0; i < rval.length; ++i, ++length) {
    if(length > 65 && candidate !== -1) {
      var insert = rval[candidate];
      if(insert === ',') {
        ++candidate;
        rval = rval.substr(0, candidate) + '\r\n ' + rval.substr(candidate);
      } else {
        rval = rval.substr(0, candidate) +
          '\r\n' + insert + rval.substr(candidate + 1);
      }
      length = (i - candidate - 1);
      candidate = -1;
      ++i;
    } else if(rval[i] === ' ' || rval[i] === '\t' || rval[i] === ',') {
      candidate = i;
    }
  }

  return rval;
}

function ltrim(str) {
  return str.replace(/^\s+/, '');
}
/**
 * Partial implementation of PKCS#1 v2.2: RSA-OEAP
 *
 * Modified but based on the following MIT and BSD licensed code:
 *
 * https://github.com/kjur/jsjws/blob/master/rsa.js:
 *
 * The 'jsjws'(JSON Web Signature JavaScript Library) License
 *
 * Copyright (c) 2012 Kenji Urushima
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:
 *
 * RSAES-OAEP.js
 * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $
 * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)
 * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.
 * Contact: ellis@nukinetics.com
 * Distributed under the BSD License.
 *
 * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125
 *
 * @author Evan Jones (http://evanjones.ca/)
 * @author Dave Longley
 *
 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./util');
require('./random');
require('./sha1');

// shortcut for PKCS#1 API
var pkcs1 = module.exports = forge.pkcs1 = forge.pkcs1 || {};

/**
 * Encode the given RSAES-OAEP message (M) using key, with optional label (L)
 * and seed.
 *
 * This method does not perform RSA encryption, it only encodes the message
 * using RSAES-OAEP.
 *
 * @param key the RSA key to use.
 * @param message the message to encode.
 * @param options the options to use:
 *          label an optional label to use.
 *          seed the seed to use.
 *          md the message digest object to use, undefined for SHA-1.
 *          mgf1 optional mgf1 parameters:
 *            md the message digest object to use for MGF1.
 *
 * @return the encoded message bytes.
 */
pkcs1.encode_rsa_oaep = function(key, message, options) {
  // parse arguments
  var label;
  var seed;
  var md;
  var mgf1Md;
  // legacy args (label, seed, md)
  if(typeof options === 'string') {
    label = options;
    seed = arguments[3] || undefined;
    md = arguments[4] || undefined;
  } else if(options) {
    label = options.label || undefined;
    seed = options.seed || undefined;
    md = options.md || undefined;
    if(options.mgf1 && options.mgf1.md) {
      mgf1Md = options.mgf1.md;
    }
  }

  // default OAEP to SHA-1 message digest
  if(!md) {
    md = forge.md.sha1.create();
  } else {
    md.start();
  }

  // default MGF-1 to same as OAEP
  if(!mgf1Md) {
    mgf1Md = md;
  }

  // compute length in bytes and check output
  var keyLength = Math.ceil(key.n.bitLength() / 8);
  var maxLength = keyLength - 2 * md.digestLength - 2;
  if(message.length > maxLength) {
    var error = new Error('RSAES-OAEP input message length is too long.');
    error.length = message.length;
    error.maxLength = maxLength;
    throw error;
  }

  if(!label) {
    label = '';
  }
  md.update(label, 'raw');
  var lHash = md.digest();

  var PS = '';
  var PS_length = maxLength - message.length;
  for(var i = 0; i < PS_length; i++) {
    PS += '\x00';
  }

  var DB = lHash.getBytes() + PS + '\x01' + message;

  if(!seed) {
    seed = forge.random.getBytes(md.digestLength);
  } else if(seed.length !== md.digestLength) {
    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' +
      'match the digest length.');
    error.seedLength = seed.length;
    error.digestLength = md.digestLength;
    throw error;
  }

  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
  var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);

  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
  var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);

  // return encoded message
  return '\x00' + maskedSeed + maskedDB;
};

/**
 * Decode the given RSAES-OAEP encoded message (EM) using key, with optional
 * label (L).
 *
 * This method does not perform RSA decryption, it only decodes the message
 * using RSAES-OAEP.
 *
 * @param key the RSA key to use.
 * @param em the encoded message to decode.
 * @param options the options to use:
 *          label an optional label to use.
 *          md the message digest object to use for OAEP, undefined for SHA-1.
 *          mgf1 optional mgf1 parameters:
 *            md the message digest object to use for MGF1.
 *
 * @return the decoded message bytes.
 */
pkcs1.decode_rsa_oaep = function(key, em, options) {
  // parse args
  var label;
  var md;
  var mgf1Md;
  // legacy args
  if(typeof options === 'string') {
    label = options;
    md = arguments[3] || undefined;
  } else if(options) {
    label = options.label || undefined;
    md = options.md || undefined;
    if(options.mgf1 && options.mgf1.md) {
      mgf1Md = options.mgf1.md;
    }
  }

  // compute length in bytes
  var keyLength = Math.ceil(key.n.bitLength() / 8);

  if(em.length !== keyLength) {
    var error = new Error('RSAES-OAEP encoded message length is invalid.');
    error.length = em.length;
    error.expectedLength = keyLength;
    throw error;
  }

  // default OAEP to SHA-1 message digest
  if(md === undefined) {
    md = forge.md.sha1.create();
  } else {
    md.start();
  }

  // default MGF-1 to same as OAEP
  if(!mgf1Md) {
    mgf1Md = md;
  }

  if(keyLength < 2 * md.digestLength + 2) {
    throw new Error('RSAES-OAEP key is too short for the hash function.');
  }

  if(!label) {
    label = '';
  }
  md.update(label, 'raw');
  var lHash = md.digest().getBytes();

  // split the message into its parts
  var y = em.charAt(0);
  var maskedSeed = em.substring(1, md.digestLength + 1);
  var maskedDB = em.substring(1 + md.digestLength);

  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
  var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);

  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
  var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);

  var lHashPrime = db.substring(0, md.digestLength);

  // constant time check that all values match what is expected
  var error = (y !== '\x00');

  // constant time check lHash vs lHashPrime
  for(var i = 0; i < md.digestLength; ++i) {
    error |= (lHash.charAt(i) !== lHashPrime.charAt(i));
  }

  // "constant time" find the 0x1 byte separating the padding (zeros) from the
  // message
  // TODO: It must be possible to do this in a better/smarter way?
  var in_ps = 1;
  var index = md.digestLength;
  for(var j = md.digestLength; j < db.length; j++) {
    var code = db.charCodeAt(j);

    var is_0 = (code & 0x1) ^ 0x1;

    // non-zero if not 0 or 1 in the ps section
    var error_mask = in_ps ? 0xfffe : 0x0000;
    error |= (code & error_mask);

    // latch in_ps to zero after we find 0x1
    in_ps = in_ps & is_0;
    index += in_ps;
  }

  if(error || db.charCodeAt(index) !== 0x1) {
    throw new Error('Invalid RSAES-OAEP padding.');
  }

  return db.substring(index + 1);
};

function rsa_mgf1(seed, maskLength, hash) {
  // default to SHA-1 message digest
  if(!hash) {
    hash = forge.md.sha1.create();
  }
  var t = '';
  var count = Math.ceil(maskLength / hash.digestLength);
  for(var i = 0; i < count; ++i) {
    var c = String.fromCharCode(
      (i >> 24) & 0xFF, (i >> 16) & 0xFF, (i >> 8) & 0xFF, i & 0xFF);
    hash.start();
    hash.update(seed + c);
    t += hash.digest().getBytes();
  }
  return t.substring(0, maskLength);
}
/**
 * Javascript implementation of PKCS#12.
 *
 * @author Dave Longley
 * @author Stefan Siegl <stesie@brokenpipe.de>
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * The ASN.1 representation of PKCS#12 is as follows
 * (see ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12-tc1.pdf for details)
 *
 * PFX ::= SEQUENCE {
 *   version  INTEGER {v3(3)}(v3,...),
 *   authSafe ContentInfo,
 *   macData  MacData OPTIONAL
 * }
 *
 * MacData ::= SEQUENCE {
 *   mac DigestInfo,
 *   macSalt OCTET STRING,
 *   iterations INTEGER DEFAULT 1
 * }
 * Note: The iterations default is for historical reasons and its use is
 * deprecated. A higher value, like 1024, is recommended.
 *
 * DigestInfo is defined in PKCS#7 as follows:
 *
 * DigestInfo ::= SEQUENCE {
 *   digestAlgorithm DigestAlgorithmIdentifier,
 *   digest Digest
 * }
 *
 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of SHA1 there is none.
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *    algorithm OBJECT IDENTIFIER,
 *    parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * Digest ::= OCTET STRING
 *
 *
 * ContentInfo ::= SEQUENCE {
 *   contentType ContentType,
 *   content     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL
 * }
 *
 * ContentType ::= OBJECT IDENTIFIER
 *
 * AuthenticatedSafe ::= SEQUENCE OF ContentInfo
 * -- Data if unencrypted
 * -- EncryptedData if password-encrypted
 * -- EnvelopedData if public key-encrypted
 *
 *
 * SafeContents ::= SEQUENCE OF SafeBag
 *
 * SafeBag ::= SEQUENCE {
 *   bagId     BAG-TYPE.&id ({PKCS12BagSet})
 *   bagValue  [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),
 *   bagAttributes SET OF PKCS12Attribute OPTIONAL
 * }
 *
 * PKCS12Attribute ::= SEQUENCE {
 *   attrId ATTRIBUTE.&id ({PKCS12AttrSet}),
 *   attrValues SET OF ATTRIBUTE.&Type ({PKCS12AttrSet}{@attrId})
 * } -- This type is compatible with the X.500 type 'Attribute'
 *
 * PKCS12AttrSet ATTRIBUTE ::= {
 *   friendlyName | -- from PKCS #9
 *   localKeyId, -- from PKCS #9
 *   ... -- Other attributes are allowed
 * }
 *
 * CertBag ::= SEQUENCE {
 *   certId    BAG-TYPE.&id   ({CertTypes}),
 *   certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})
 * }
 *
 * x509Certificate BAG-TYPE ::= {OCTET STRING IDENTIFIED BY {certTypes 1}}
 *   -- DER-encoded X.509 certificate stored in OCTET STRING
 *
 * sdsiCertificate BAG-TYPE ::= {IA5String IDENTIFIED BY {certTypes 2}}
 * -- Base64-encoded SDSI certificate stored in IA5String
 *
 * CertTypes BAG-TYPE ::= {
 *   x509Certificate |
 *   sdsiCertificate,
 *   ... -- For future extensions
 * }
 */
var forge = require('./forge');
require('./asn1');
require('./hmac');
require('./oids');
require('./pkcs7asn1');
require('./pbe');
require('./random');
require('./rsa');
require('./sha1');
require('./util');
require('./x509');

// shortcut for asn.1 & PKI API
var asn1 = forge.asn1;
var pki = forge.pki;

// shortcut for PKCS#12 API
var p12 = module.exports = forge.pkcs12 = forge.pkcs12 || {};

var contentInfoValidator = {
  name: 'ContentInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,  // a ContentInfo
  constructed: true,
  value: [{
    name: 'ContentInfo.contentType',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'contentType'
  }, {
    name: 'ContentInfo.content',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    constructed: true,
    captureAsn1: 'content'
  }]
};

var pfxValidator = {
  name: 'PFX',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'PFX.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  },
  contentInfoValidator, {
    name: 'PFX.macData',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    optional: true,
    captureAsn1: 'mac',
    value: [{
      name: 'PFX.macData.mac',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,  // DigestInfo
      constructed: true,
      value: [{
        name: 'PFX.macData.mac.digestAlgorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,  // DigestAlgorithmIdentifier
        constructed: true,
        value: [{
          name: 'PFX.macData.mac.digestAlgorithm.algorithm',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: 'macAlgorithm'
        }, {
          name: 'PFX.macData.mac.digestAlgorithm.parameters',
          tagClass: asn1.Class.UNIVERSAL,
          captureAsn1: 'macAlgorithmParameters'
        }]
      }, {
        name: 'PFX.macData.mac.digest',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: 'macDigest'
      }]
    }, {
      name: 'PFX.macData.macSalt',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OCTETSTRING,
      constructed: false,
      capture: 'macSalt'
    }, {
      name: 'PFX.macData.iterations',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      optional: true,
      capture: 'macIterations'
    }]
  }]
};

var safeBagValidator = {
  name: 'SafeBag',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'SafeBag.bagId',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'bagId'
  }, {
    name: 'SafeBag.bagValue',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    constructed: true,
    captureAsn1: 'bagValue'
  }, {
    name: 'SafeBag.bagAttributes',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    optional: true,
    capture: 'bagAttributes'
  }]
};

var attributeValidator = {
  name: 'Attribute',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'Attribute.attrId',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'oid'
  }, {
    name: 'Attribute.attrValues',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    capture: 'values'
  }]
};

var certBagValidator = {
  name: 'CertBag',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'CertBag.certId',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'certId'
  }, {
    name: 'CertBag.certValue',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    constructed: true,
    /* So far we only support X.509 certificates (which are wrapped in
       an OCTET STRING, hence hard code that here). */
    value: [{
      name: 'CertBag.certValue[0]',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.OCTETSTRING,
      constructed: false,
      capture: 'cert'
    }]
  }]
};

/**
 * Search SafeContents structure for bags with matching attributes.
 *
 * The search can optionally be narrowed by a certain bag type.
 *
 * @param safeContents the SafeContents structure to search in.
 * @param attrName the name of the attribute to compare against.
 * @param attrValue the attribute value to search for.
 * @param [bagType] bag type to narrow search by.
 *
 * @return an array of matching bags.
 */
function _getBagsByAttribute(safeContents, attrName, attrValue, bagType) {
  var result = [];

  for(var i = 0; i < safeContents.length; i++) {
    for(var j = 0; j < safeContents[i].safeBags.length; j++) {
      var bag = safeContents[i].safeBags[j];
      if(bagType !== undefined && bag.type !== bagType) {
        continue;
      }
      // only filter by bag type, no attribute specified
      if(attrName === null) {
        result.push(bag);
        continue;
      }
      if(bag.attributes[attrName] !== undefined &&
        bag.attributes[attrName].indexOf(attrValue) >= 0) {
        result.push(bag);
      }
    }
  }

  return result;
}

/**
 * Converts a PKCS#12 PFX in ASN.1 notation into a PFX object.
 *
 * @param obj The PKCS#12 PFX in ASN.1 notation.
 * @param strict true to use strict DER decoding, false not to (default: true).
 * @param {String} password Password to decrypt with (optional).
 *
 * @return PKCS#12 PFX object.
 */
p12.pkcs12FromAsn1 = function(obj, strict, password) {
  // handle args
  if(typeof strict === 'string') {
    password = strict;
    strict = true;
  } else if(strict === undefined) {
    strict = true;
  }

  // validate PFX and capture data
  var capture = {};
  var errors = [];
  if(!asn1.validate(obj, pfxValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#12 PFX. ' +
      'ASN.1 object is not an PKCS#12 PFX.');
    error.errors = error;
    throw error;
  }

  var pfx = {
    version: capture.version.charCodeAt(0),
    safeContents: [],

    /**
     * Gets bags with matching attributes.
     *
     * @param filter the attributes to filter by:
     *          [localKeyId] the localKeyId to search for.
     *          [localKeyIdHex] the localKeyId in hex to search for.
     *          [friendlyName] the friendly name to search for.
     *          [bagType] bag type to narrow each attribute search by.
     *
     * @return a map of attribute type to an array of matching bags or, if no
     *           attribute was given but a bag type, the map key will be the
     *           bag type.
     */
    getBags: function(filter) {
      var rval = {};

      var localKeyId;
      if('localKeyId' in filter) {
        localKeyId = filter.localKeyId;
      } else if('localKeyIdHex' in filter) {
        localKeyId = forge.util.hexToBytes(filter.localKeyIdHex);
      }

      // filter on bagType only
      if(localKeyId === undefined && !('friendlyName' in filter) &&
        'bagType' in filter) {
        rval[filter.bagType] = _getBagsByAttribute(
          pfx.safeContents, null, null, filter.bagType);
      }

      if(localKeyId !== undefined) {
        rval.localKeyId = _getBagsByAttribute(
          pfx.safeContents, 'localKeyId',
          localKeyId, filter.bagType);
      }
      if('friendlyName' in filter) {
        rval.friendlyName = _getBagsByAttribute(
          pfx.safeContents, 'friendlyName',
          filter.friendlyName, filter.bagType);
      }

      return rval;
    },

    /**
     * DEPRECATED: use getBags() instead.
     *
     * Get bags with matching friendlyName attribute.
     *
     * @param friendlyName the friendly name to search for.
     * @param [bagType] bag type to narrow search by.
     *
     * @return an array of bags with matching friendlyName attribute.
     */
    getBagsByFriendlyName: function(friendlyName, bagType) {
      return _getBagsByAttribute(
        pfx.safeContents, 'friendlyName', friendlyName, bagType);
    },

    /**
     * DEPRECATED: use getBags() instead.
     *
     * Get bags with matching localKeyId attribute.
     *
     * @param localKeyId the localKeyId to search for.
     * @param [bagType] bag type to narrow search by.
     *
     * @return an array of bags with matching localKeyId attribute.
     */
    getBagsByLocalKeyId: function(localKeyId, bagType) {
      return _getBagsByAttribute(
        pfx.safeContents, 'localKeyId', localKeyId, bagType);
    }
  };

  if(capture.version.charCodeAt(0) !== 3) {
    var error = new Error('PKCS#12 PFX of version other than 3 not supported.');
    error.version = capture.version.charCodeAt(0);
    throw error;
  }

  if(asn1.derToOid(capture.contentType) !== pki.oids.data) {
    var error = new Error('Only PKCS#12 PFX in password integrity mode supported.');
    error.oid = asn1.derToOid(capture.contentType);
    throw error;
  }

  var data = capture.content.value[0];
  if(data.tagClass !== asn1.Class.UNIVERSAL ||
     data.type !== asn1.Type.OCTETSTRING) {
    throw new Error('PKCS#12 authSafe content data is not an OCTET STRING.');
  }
  data = _decodePkcs7Data(data);

  // check for MAC
  if(capture.mac) {
    var md = null;
    var macKeyBytes = 0;
    var macAlgorithm = asn1.derToOid(capture.macAlgorithm);
    switch(macAlgorithm) {
    case pki.oids.sha1:
      md = forge.md.sha1.create();
      macKeyBytes = 20;
      break;
    case pki.oids.sha256:
      md = forge.md.sha256.create();
      macKeyBytes = 32;
      break;
    case pki.oids.sha384:
      md = forge.md.sha384.create();
      macKeyBytes = 48;
      break;
    case pki.oids.sha512:
      md = forge.md.sha512.create();
      macKeyBytes = 64;
      break;
    case pki.oids.md5:
      md = forge.md.md5.create();
      macKeyBytes = 16;
      break;
    }
    if(md === null) {
      throw new Error('PKCS#12 uses unsupported MAC algorithm: ' + macAlgorithm);
    }

    // verify MAC (iterations default to 1)
    var macSalt = new forge.util.ByteBuffer(capture.macSalt);
    var macIterations = (('macIterations' in capture) ?
      parseInt(forge.util.bytesToHex(capture.macIterations), 16) : 1);
    var macKey = p12.generateKey(
      password, macSalt, 3, macIterations, macKeyBytes, md);
    var mac = forge.hmac.create();
    mac.start(md, macKey);
    mac.update(data.value);
    var macValue = mac.getMac();
    if(macValue.getBytes() !== capture.macDigest) {
      throw new Error('PKCS#12 MAC could not be verified. Invalid password?');
    }
  }

  _decodeAuthenticatedSafe(pfx, data.value, strict, password);
  return pfx;
};

/**
 * Decodes PKCS#7 Data. PKCS#7 (RFC 2315) defines "Data" as an OCTET STRING,
 * but it is sometimes an OCTET STRING that is composed/constructed of chunks,
 * each its own OCTET STRING. This is BER-encoding vs. DER-encoding. This
 * function transforms this corner-case into the usual simple,
 * non-composed/constructed OCTET STRING.
 *
 * This function may be moved to ASN.1 at some point to better deal with
 * more BER-encoding issues, should they arise.
 *
 * @param data the ASN.1 Data object to transform.
 */
function _decodePkcs7Data(data) {
  // handle special case of "chunked" data content: an octet string composed
  // of other octet strings
  if(data.composed || data.constructed) {
    var value = forge.util.createBuffer();
    for(var i = 0; i < data.value.length; ++i) {
      value.putBytes(data.value[i].value);
    }
    data.composed = data.constructed = false;
    data.value = value.getBytes();
  }
  return data;
}

/**
 * Decode PKCS#12 AuthenticatedSafe (BER encoded) into PFX object.
 *
 * The AuthenticatedSafe is a BER-encoded SEQUENCE OF ContentInfo.
 *
 * @param pfx The PKCS#12 PFX object to fill.
 * @param {String} authSafe BER-encoded AuthenticatedSafe.
 * @param strict true to use strict DER decoding, false not to.
 * @param {String} password Password to decrypt with (optional).
 */
function _decodeAuthenticatedSafe(pfx, authSafe, strict, password) {
  authSafe = asn1.fromDer(authSafe, strict);  /* actually it's BER encoded */

  if(authSafe.tagClass !== asn1.Class.UNIVERSAL ||
     authSafe.type !== asn1.Type.SEQUENCE ||
     authSafe.constructed !== true) {
    throw new Error('PKCS#12 AuthenticatedSafe expected to be a ' +
      'SEQUENCE OF ContentInfo');
  }

  for(var i = 0; i < authSafe.value.length; i++) {
    var contentInfo = authSafe.value[i];

    // validate contentInfo and capture data
    var capture = {};
    var errors = [];
    if(!asn1.validate(contentInfo, contentInfoValidator, capture, errors)) {
      var error = new Error('Cannot read ContentInfo.');
      error.errors = errors;
      throw error;
    }

    var obj = {
      encrypted: false
    };
    var safeContents = null;
    var data = capture.content.value[0];
    switch(asn1.derToOid(capture.contentType)) {
    case pki.oids.data:
      if(data.tagClass !== asn1.Class.UNIVERSAL ||
         data.type !== asn1.Type.OCTETSTRING) {
        throw new Error('PKCS#12 SafeContents Data is not an OCTET STRING.');
      }
      safeContents = _decodePkcs7Data(data).value;
      break;
    case pki.oids.encryptedData:
      safeContents = _decryptSafeContents(data, password);
      obj.encrypted = true;
      break;
    default:
      var error = new Error('Unsupported PKCS#12 contentType.');
      error.contentType = asn1.derToOid(capture.contentType);
      throw error;
    }

    obj.safeBags = _decodeSafeContents(safeContents, strict, password);
    pfx.safeContents.push(obj);
  }
}

/**
 * Decrypt PKCS#7 EncryptedData structure.
 *
 * @param data ASN.1 encoded EncryptedContentInfo object.
 * @param password The user-provided password.
 *
 * @return The decrypted SafeContents (ASN.1 object).
 */
function _decryptSafeContents(data, password) {
  var capture = {};
  var errors = [];
  if(!asn1.validate(
    data, forge.pkcs7.asn1.encryptedDataValidator, capture, errors)) {
    var error = new Error('Cannot read EncryptedContentInfo.');
    error.errors = errors;
    throw error;
  }

  var oid = asn1.derToOid(capture.contentType);
  if(oid !== pki.oids.data) {
    var error = new Error(
      'PKCS#12 EncryptedContentInfo ContentType is not Data.');
    error.oid = oid;
    throw error;
  }

  // get cipher
  oid = asn1.derToOid(capture.encAlgorithm);
  var cipher = pki.pbe.getCipher(oid, capture.encParameter, password);

  // get encrypted data
  var encryptedContentAsn1 = _decodePkcs7Data(capture.encryptedContentAsn1);
  var encrypted = forge.util.createBuffer(encryptedContentAsn1.value);

  cipher.update(encrypted);
  if(!cipher.finish()) {
    throw new Error('Failed to decrypt PKCS#12 SafeContents.');
  }

  return cipher.output.getBytes();
}

/**
 * Decode PKCS#12 SafeContents (BER-encoded) into array of Bag objects.
 *
 * The safeContents is a BER-encoded SEQUENCE OF SafeBag.
 *
 * @param {String} safeContents BER-encoded safeContents.
 * @param strict true to use strict DER decoding, false not to.
 * @param {String} password Password to decrypt with (optional).
 *
 * @return {Array} Array of Bag objects.
 */
function _decodeSafeContents(safeContents, strict, password) {
  // if strict and no safe contents, return empty safes
  if(!strict && safeContents.length === 0) {
    return [];
  }

  // actually it's BER-encoded
  safeContents = asn1.fromDer(safeContents, strict);

  if(safeContents.tagClass !== asn1.Class.UNIVERSAL ||
    safeContents.type !== asn1.Type.SEQUENCE ||
    safeContents.constructed !== true) {
    throw new Error(
      'PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag.');
  }

  var res = [];
  for(var i = 0; i < safeContents.value.length; i++) {
    var safeBag = safeContents.value[i];

    // validate SafeBag and capture data
    var capture = {};
    var errors = [];
    if(!asn1.validate(safeBag, safeBagValidator, capture, errors)) {
      var error = new Error('Cannot read SafeBag.');
      error.errors = errors;
      throw error;
    }

    /* Create bag object and push to result array. */
    var bag = {
      type: asn1.derToOid(capture.bagId),
      attributes: _decodeBagAttributes(capture.bagAttributes)
    };
    res.push(bag);

    var validator, decoder;
    var bagAsn1 = capture.bagValue.value[0];
    switch(bag.type) {
      case pki.oids.pkcs8ShroudedKeyBag:
        /* bagAsn1 has a EncryptedPrivateKeyInfo, which we need to decrypt.
           Afterwards we can handle it like a keyBag,
           which is a PrivateKeyInfo. */
        bagAsn1 = pki.decryptPrivateKeyInfo(bagAsn1, password);
        if(bagAsn1 === null) {
          throw new Error(
            'Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?');
        }

        /* fall through */
      case pki.oids.keyBag:
        /* A PKCS#12 keyBag is a simple PrivateKeyInfo as understood by our
           PKI module, hence we don't have to do validation/capturing here,
           just pass what we already got. */
        try {
          bag.key = pki.privateKeyFromAsn1(bagAsn1);
        } catch(e) {
          // ignore unknown key type, pass asn1 value
          bag.key = null;
          bag.asn1 = bagAsn1;
        }
        continue;  /* Nothing more to do. */

      case pki.oids.certBag:
        /* A PKCS#12 certBag can wrap both X.509 and sdsi certificates.
           Therefore put the SafeBag content through another validator to
           capture the fields.  Afterwards check & store the results. */
        validator = certBagValidator;
        decoder = function() {
          if(asn1.derToOid(capture.certId) !== pki.oids.x509Certificate) {
            var error = new Error(
              'Unsupported certificate type, only X.509 supported.');
            error.oid = asn1.derToOid(capture.certId);
            throw error;
          }

          // true=produce cert hash
          var certAsn1 = asn1.fromDer(capture.cert, strict);
          try {
            bag.cert = pki.certificateFromAsn1(certAsn1, true);
          } catch(e) {
            // ignore unknown cert type, pass asn1 value
            bag.cert = null;
            bag.asn1 = certAsn1;
          }
        };
        break;

      default:
        var error = new Error('Unsupported PKCS#12 SafeBag type.');
        error.oid = bag.type;
        throw error;
    }

    /* Validate SafeBag value (i.e. CertBag, etc.) and capture data if needed. */
    if(validator !== undefined &&
       !asn1.validate(bagAsn1, validator, capture, errors)) {
      var error = new Error('Cannot read PKCS#12 ' + validator.name);
      error.errors = errors;
      throw error;
    }

    /* Call decoder function from above to store the results. */
    decoder();
  }

  return res;
}

/**
 * Decode PKCS#12 SET OF PKCS12Attribute into JavaScript object.
 *
 * @param attributes SET OF PKCS12Attribute (ASN.1 object).
 *
 * @return the decoded attributes.
 */
function _decodeBagAttributes(attributes) {
  var decodedAttrs = {};

  if(attributes !== undefined) {
    for(var i = 0; i < attributes.length; ++i) {
      var capture = {};
      var errors = [];
      if(!asn1.validate(attributes[i], attributeValidator, capture, errors)) {
        var error = new Error('Cannot read PKCS#12 BagAttribute.');
        error.errors = errors;
        throw error;
      }

      var oid = asn1.derToOid(capture.oid);
      if(pki.oids[oid] === undefined) {
        // unsupported attribute type, ignore.
        continue;
      }

      decodedAttrs[pki.oids[oid]] = [];
      for(var j = 0; j < capture.values.length; ++j) {
        decodedAttrs[pki.oids[oid]].push(capture.values[j].value);
      }
    }
  }

  return decodedAttrs;
}

/**
 * Wraps a private key and certificate in a PKCS#12 PFX wrapper. If a
 * password is provided then the private key will be encrypted.
 *
 * An entire certificate chain may also be included. To do this, pass
 * an array for the "cert" parameter where the first certificate is
 * the one that is paired with the private key and each subsequent one
 * verifies the previous one. The certificates may be in PEM format or
 * have been already parsed by Forge.
 *
 * @todo implement password-based-encryption for the whole package
 *
 * @param key the private key.
 * @param cert the certificate (may be an array of certificates in order
 *          to specify a certificate chain).
 * @param password the password to use, null for none.
 * @param options:
 *          algorithm the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
 *          count the iteration count to use.
 *          saltSize the salt size to use.
 *          useMac true to include a MAC, false not to, defaults to true.
 *          localKeyId the local key ID to use, in hex.
 *          friendlyName the friendly name to use.
 *          generateLocalKeyId true to generate a random local key ID,
 *            false not to, defaults to true.
 *
 * @return the PKCS#12 PFX ASN.1 object.
 */
p12.toPkcs12Asn1 = function(key, cert, password, options) {
  // set default options
  options = options || {};
  options.saltSize = options.saltSize || 8;
  options.count = options.count || 2048;
  options.algorithm = options.algorithm || options.encAlgorithm || 'aes128';
  if(!('useMac' in options)) {
    options.useMac = true;
  }
  if(!('localKeyId' in options)) {
    options.localKeyId = null;
  }
  if(!('generateLocalKeyId' in options)) {
    options.generateLocalKeyId = true;
  }

  var localKeyId = options.localKeyId;
  var bagAttrs;
  if(localKeyId !== null) {
    localKeyId = forge.util.hexToBytes(localKeyId);
  } else if(options.generateLocalKeyId) {
    // use SHA-1 of paired cert, if available
    if(cert) {
      var pairedCert = forge.util.isArray(cert) ? cert[0] : cert;
      if(typeof pairedCert === 'string') {
        pairedCert = pki.certificateFromPem(pairedCert);
      }
      var sha1 = forge.md.sha1.create();
      sha1.update(asn1.toDer(pki.certificateToAsn1(pairedCert)).getBytes());
      localKeyId = sha1.digest().getBytes();
    } else {
      // FIXME: consider using SHA-1 of public key (which can be generated
      // from private key components), see: cert.generateSubjectKeyIdentifier
      // generate random bytes
      localKeyId = forge.random.getBytes(20);
    }
  }

  var attrs = [];
  if(localKeyId !== null) {
    attrs.push(
      // localKeyID
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // attrId
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          asn1.oidToDer(pki.oids.localKeyId).getBytes()),
        // attrValues
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
            localKeyId)
        ])
      ]));
  }
  if('friendlyName' in options) {
    attrs.push(
      // friendlyName
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // attrId
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          asn1.oidToDer(pki.oids.friendlyName).getBytes()),
        // attrValues
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BMPSTRING, false,
            options.friendlyName)
        ])
      ]));
  }

  if(attrs.length > 0) {
    bagAttrs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, attrs);
  }

  // collect contents for AuthenticatedSafe
  var contents = [];

  // create safe bag(s) for certificate chain
  var chain = [];
  if(cert !== null) {
    if(forge.util.isArray(cert)) {
      chain = cert;
    } else {
      chain = [cert];
    }
  }

  var certSafeBags = [];
  for(var i = 0; i < chain.length; ++i) {
    // convert cert from PEM as necessary
    cert = chain[i];
    if(typeof cert === 'string') {
      cert = pki.certificateFromPem(cert);
    }

    // SafeBag
    var certBagAttrs = (i === 0) ? bagAttrs : undefined;
    var certAsn1 = pki.certificateToAsn1(cert);
    var certSafeBag =
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // bagId
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          asn1.oidToDer(pki.oids.certBag).getBytes()),
        // bagValue
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
          // CertBag
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // certId
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
              asn1.oidToDer(pki.oids.x509Certificate).getBytes()),
            // certValue (x509Certificate)
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
              asn1.create(
                asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
                asn1.toDer(certAsn1).getBytes())
            ])])]),
        // bagAttributes (OPTIONAL)
        certBagAttrs
      ]);
    certSafeBags.push(certSafeBag);
  }

  if(certSafeBags.length > 0) {
    // SafeContents
    var certSafeContents = asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, certSafeBags);

    // ContentInfo
    var certCI =
      // PKCS#7 ContentInfo
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // contentType
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          // OID for the content type is 'data'
          asn1.oidToDer(pki.oids.data).getBytes()),
        // content
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
          asn1.create(
            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
            asn1.toDer(certSafeContents).getBytes())
        ])
      ]);
    contents.push(certCI);
  }

  // create safe contents for private key
  var keyBag = null;
  if(key !== null) {
    // SafeBag
    var pkAsn1 = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(key));
    if(password === null) {
      // no encryption
      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // bagId
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          asn1.oidToDer(pki.oids.keyBag).getBytes()),
        // bagValue
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
          // PrivateKeyInfo
          pkAsn1
        ]),
        // bagAttributes (OPTIONAL)
        bagAttrs
      ]);
    } else {
      // encrypted PrivateKeyInfo
      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // bagId
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          asn1.oidToDer(pki.oids.pkcs8ShroudedKeyBag).getBytes()),
        // bagValue
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
          // EncryptedPrivateKeyInfo
          pki.encryptPrivateKeyInfo(pkAsn1, password, options)
        ]),
        // bagAttributes (OPTIONAL)
        bagAttrs
      ]);
    }

    // SafeContents
    var keySafeContents =
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [keyBag]);

    // ContentInfo
    var keyCI =
      // PKCS#7 ContentInfo
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // contentType
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          // OID for the content type is 'data'
          asn1.oidToDer(pki.oids.data).getBytes()),
        // content
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
          asn1.create(
            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
            asn1.toDer(keySafeContents).getBytes())
        ])
      ]);
    contents.push(keyCI);
  }

  // create AuthenticatedSafe by stringing together the contents
  var safe = asn1.create(
    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, contents);

  var macData;
  if(options.useMac) {
    // MacData
    var sha1 = forge.md.sha1.create();
    var macSalt = new forge.util.ByteBuffer(
      forge.random.getBytes(options.saltSize));
    var count = options.count;
    // 160-bit key
    var key = p12.generateKey(password, macSalt, 3, count, 20);
    var mac = forge.hmac.create();
    mac.start(sha1, key);
    mac.update(asn1.toDer(safe).getBytes());
    var macValue = mac.getMac();
    macData = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // mac DigestInfo
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // digestAlgorithm
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // algorithm = SHA-1
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
            asn1.oidToDer(pki.oids.sha1).getBytes()),
          // parameters = Null
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
        ]),
        // digest
        asn1.create(
          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING,
          false, macValue.getBytes())
      ]),
      // macSalt OCTET STRING
      asn1.create(
        asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, macSalt.getBytes()),
      // iterations INTEGER (XXX: Only support count < 65536)
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
        asn1.integerToDer(count).getBytes()
      )
    ]);
  }

  // PFX
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // version (3)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      asn1.integerToDer(3).getBytes()),
    // PKCS#7 ContentInfo
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // contentType
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        // OID for the content type is 'data'
        asn1.oidToDer(pki.oids.data).getBytes()),
      // content
      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
        asn1.create(
          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
          asn1.toDer(safe).getBytes())
      ])
    ]),
    macData
  ]);
};

/**
 * Derives a PKCS#12 key.
 *
 * @param password the password to derive the key material from, null or
 *          undefined for none.
 * @param salt the salt, as a ByteBuffer, to use.
 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
 * @param iter the iteration count.
 * @param n the number of bytes to derive from the password.
 * @param md the message digest to use, defaults to SHA-1.
 *
 * @return a ByteBuffer with the bytes derived from the password.
 */
p12.generateKey = forge.pbe.generatePkcs12Key;
/**
 * Javascript implementation of PKCS#7 v1.5.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
 *
 * Currently this implementation only supports ContentType of EnvelopedData,
 * EncryptedData, or SignedData at the root level. The top level elements may
 * contain only a ContentInfo of ContentType Data, i.e. plain data. Further
 * nesting is not (yet) supported.
 *
 * The Forge validators for PKCS #7's ASN.1 structures are available from
 * a separate file pkcs7asn1.js, since those are referenced from other
 * PKCS standards like PKCS #12.
 */
var forge = require('./forge');
require('./aes');
require('./asn1');
require('./des');
require('./oids');
require('./pem');
require('./pkcs7asn1');
require('./random');
require('./util');
require('./x509');

// shortcut for ASN.1 API
var asn1 = forge.asn1;

// shortcut for PKCS#7 API
var p7 = module.exports = forge.pkcs7 = forge.pkcs7 || {};

/**
 * Converts a PKCS#7 message from PEM format.
 *
 * @param pem the PEM-formatted PKCS#7 message.
 *
 * @return the PKCS#7 message.
 */
p7.messageFromPem = function(pem) {
  var msg = forge.pem.decode(pem)[0];

  if(msg.type !== 'PKCS7') {
    var error = new Error('Could not convert PKCS#7 message from PEM; PEM ' +
      'header type is not "PKCS#7".');
    error.headerType = msg.type;
    throw error;
  }
  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert PKCS#7 message from PEM; PEM is encrypted.');
  }

  // convert DER to ASN.1 object
  var obj = asn1.fromDer(msg.body);

  return p7.messageFromAsn1(obj);
};

/**
 * Converts a PKCS#7 message to PEM format.
 *
 * @param msg The PKCS#7 message object
 * @param maxline The maximum characters per line, defaults to 64.
 *
 * @return The PEM-formatted PKCS#7 message.
 */
p7.messageToPem = function(msg, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var pemObj = {
    type: 'PKCS7',
    body: asn1.toDer(msg.toAsn1()).getBytes()
  };
  return forge.pem.encode(pemObj, {maxline: maxline});
};

/**
 * Converts a PKCS#7 message from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a ContentInfo.
 *
 * @return the PKCS#7 message.
 */
p7.messageFromAsn1 = function(obj) {
  // validate root level ContentInfo and capture data
  var capture = {};
  var errors = [];
  if(!asn1.validate(obj, p7.asn1.contentInfoValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#7 message. ' +
      'ASN.1 object is not an PKCS#7 ContentInfo.');
    error.errors = errors;
    throw error;
  }

  var contentType = asn1.derToOid(capture.contentType);
  var msg;

  switch(contentType) {
    case forge.pki.oids.envelopedData:
      msg = p7.createEnvelopedData();
      break;

    case forge.pki.oids.encryptedData:
      msg = p7.createEncryptedData();
      break;

    case forge.pki.oids.signedData:
      msg = p7.createSignedData();
      break;

    default:
      throw new Error('Cannot read PKCS#7 message. ContentType with OID ' +
        contentType + ' is not (yet) supported.');
  }

  msg.fromAsn1(capture.content.value[0]);
  return msg;
};

p7.createSignedData = function() {
  var msg = null;
  msg = {
    type: forge.pki.oids.signedData,
    version: 1,
    certificates: [],
    crls: [],
    // TODO: add json-formatted signer stuff here?
    signers: [],
    // populated during sign()
    digestAlgorithmIdentifiers: [],
    contentInfo: null,
    signerInfos: [],

    fromAsn1: function(obj) {
      // validate SignedData content block and capture data.
      _fromAsn1(msg, obj, p7.asn1.signedDataValidator);
      msg.certificates = [];
      msg.crls = [];
      msg.digestAlgorithmIdentifiers = [];
      msg.contentInfo = null;
      msg.signerInfos = [];

      if(msg.rawCapture.certificates) {
        var certs = msg.rawCapture.certificates.value;
        for(var i = 0; i < certs.length; ++i) {
          msg.certificates.push(forge.pki.certificateFromAsn1(certs[i]));
        }
      }

      // TODO: parse crls
    },

    toAsn1: function() {
      // degenerate case with no content
      if(!msg.contentInfo) {
        msg.sign();
      }

      var certs = [];
      for(var i = 0; i < msg.certificates.length; ++i) {
        certs.push(forge.pki.certificateToAsn1(msg.certificates[i]));
      }

      var crls = [];
      // TODO: implement CRLs

      // [0] SignedData
      var signedData = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // Version
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
            asn1.integerToDer(msg.version).getBytes()),
          // DigestAlgorithmIdentifiers
          asn1.create(
            asn1.Class.UNIVERSAL, asn1.Type.SET, true,
            msg.digestAlgorithmIdentifiers),
          // ContentInfo
          msg.contentInfo
        ])
      ]);
      if(certs.length > 0) {
        // [0] IMPLICIT ExtendedCertificatesAndCertificates OPTIONAL
        signedData.value[0].value.push(
          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, certs));
      }
      if(crls.length > 0) {
        // [1] IMPLICIT CertificateRevocationLists OPTIONAL
        signedData.value[0].value.push(
          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, crls));
      }
      // SignerInfos
      signedData.value[0].value.push(
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true,
          msg.signerInfos));

      // ContentInfo
      return asn1.create(
        asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // ContentType
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
            asn1.oidToDer(msg.type).getBytes()),
          // [0] SignedData
          signedData
        ]);
    },

    /**
     * Add (another) entity to list of signers.
     *
     * Note: If authenticatedAttributes are provided, then, per RFC 2315,
     * they must include at least two attributes: content type and
     * message digest. The message digest attribute value will be
     * auto-calculated during signing and will be ignored if provided.
     *
     * Here's an example of providing these two attributes:
     *
     * forge.pkcs7.createSignedData();
     * p7.addSigner({
     *   issuer: cert.issuer.attributes,
     *   serialNumber: cert.serialNumber,
     *   key: privateKey,
     *   digestAlgorithm: forge.pki.oids.sha1,
     *   authenticatedAttributes: [{
     *     type: forge.pki.oids.contentType,
     *     value: forge.pki.oids.data
     *   }, {
     *     type: forge.pki.oids.messageDigest
     *   }]
     * });
     *
     * TODO: Support [subjectKeyIdentifier] as signer's ID.
     *
     * @param signer the signer information:
     *          key the signer's private key.
     *          [certificate] a certificate containing the public key
     *            associated with the signer's private key; use this option as
     *            an alternative to specifying signer.issuer and
     *            signer.serialNumber.
     *          [issuer] the issuer attributes (eg: cert.issuer.attributes).
     *          [serialNumber] the signer's certificate's serial number in
     *           hexadecimal (eg: cert.serialNumber).
     *          [digestAlgorithm] the message digest OID, as a string, to use
     *            (eg: forge.pki.oids.sha1).
     *          [authenticatedAttributes] an optional array of attributes
     *            to also sign along with the content.
     */
    addSigner: function(signer) {
      var issuer = signer.issuer;
      var serialNumber = signer.serialNumber;
      if(signer.certificate) {
        var cert = signer.certificate;
        if(typeof cert === 'string') {
          cert = forge.pki.certificateFromPem(cert);
        }
        issuer = cert.issuer.attributes;
        serialNumber = cert.serialNumber;
      }
      var key = signer.key;
      if(!key) {
        throw new Error(
          'Could not add PKCS#7 signer; no private key specified.');
      }
      if(typeof key === 'string') {
        key = forge.pki.privateKeyFromPem(key);
      }

      // ensure OID known for digest algorithm
      var digestAlgorithm = signer.digestAlgorithm || forge.pki.oids.sha1;
      switch(digestAlgorithm) {
      case forge.pki.oids.sha1:
      case forge.pki.oids.sha256:
      case forge.pki.oids.sha384:
      case forge.pki.oids.sha512:
      case forge.pki.oids.md5:
        break;
      default:
        throw new Error(
          'Could not add PKCS#7 signer; unknown message digest algorithm: ' +
          digestAlgorithm);
      }

      // if authenticatedAttributes is present, then the attributes
      // must contain at least PKCS #9 content-type and message-digest
      var authenticatedAttributes = signer.authenticatedAttributes || [];
      if(authenticatedAttributes.length > 0) {
        var contentType = false;
        var messageDigest = false;
        for(var i = 0; i < authenticatedAttributes.length; ++i) {
          var attr = authenticatedAttributes[i];
          if(!contentType && attr.type === forge.pki.oids.contentType) {
            contentType = true;
            if(messageDigest) {
              break;
            }
            continue;
          }
          if(!messageDigest && attr.type === forge.pki.oids.messageDigest) {
            messageDigest = true;
            if(contentType) {
              break;
            }
            continue;
          }
        }

        if(!contentType || !messageDigest) {
          throw new Error('Invalid signer.authenticatedAttributes. If ' +
            'signer.authenticatedAttributes is specified, then it must ' +
            'contain at least two attributes, PKCS #9 content-type and ' +
            'PKCS #9 message-digest.');
        }
      }

      msg.signers.push({
        key: key,
        version: 1,
        issuer: issuer,
        serialNumber: serialNumber,
        digestAlgorithm: digestAlgorithm,
        signatureAlgorithm: forge.pki.oids.rsaEncryption,
        signature: null,
        authenticatedAttributes: authenticatedAttributes,
        unauthenticatedAttributes: []
      });
    },

    /**
     * Signs the content.
     * @param options Options to apply when signing:
     *    [detached] boolean. If signing should be done in detached mode. Defaults to false.
     */
    sign: function(options) {
      options = options || {};
      // auto-generate content info
      if(typeof msg.content !== 'object' || msg.contentInfo === null) {
        // use Data ContentInfo
        msg.contentInfo = asn1.create(
          asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // ContentType
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
              asn1.oidToDer(forge.pki.oids.data).getBytes())
          ]);

        // add actual content, if present
        if('content' in msg) {
          var content;
          if(msg.content instanceof forge.util.ByteBuffer) {
            content = msg.content.bytes();
          } else if(typeof msg.content === 'string') {
            content = forge.util.encodeUtf8(msg.content);
          }

          if (options.detached) {
            msg.detachedContent = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, content);
          } else {
            msg.contentInfo.value.push(
              // [0] EXPLICIT content
              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
                  content)
              ]));
          }
        }
      }

      // no signers, return early (degenerate case for certificate container)
      if(msg.signers.length === 0) {
        return;
      }

      // generate digest algorithm identifiers
      var mds = addDigestAlgorithmIds();

      // generate signerInfos
      addSignerInfos(mds);
    },

    verify: function() {
      throw new Error('PKCS#7 signature verification not yet implemented.');
    },

    /**
     * Add a certificate.
     *
     * @param cert the certificate to add.
     */
    addCertificate: function(cert) {
      // convert from PEM
      if(typeof cert === 'string') {
        cert = forge.pki.certificateFromPem(cert);
      }
      msg.certificates.push(cert);
    },

    /**
     * Add a certificate revokation list.
     *
     * @param crl the certificate revokation list to add.
     */
    addCertificateRevokationList: function(crl) {
      throw new Error('PKCS#7 CRL support not yet implemented.');
    }
  };
  return msg;

  function addDigestAlgorithmIds() {
    var mds = {};

    for(var i = 0; i < msg.signers.length; ++i) {
      var signer = msg.signers[i];
      var oid = signer.digestAlgorithm;
      if(!(oid in mds)) {
        // content digest
        mds[oid] = forge.md[forge.pki.oids[oid]].create();
      }
      if(signer.authenticatedAttributes.length === 0) {
        // no custom attributes to digest; use content message digest
        signer.md = mds[oid];
      } else {
        // custom attributes to be digested; use own message digest
        // TODO: optimize to just copy message digest state if that
        // feature is ever supported with message digests
        signer.md = forge.md[forge.pki.oids[oid]].create();
      }
    }

    // add unique digest algorithm identifiers
    msg.digestAlgorithmIdentifiers = [];
    for(var oid in mds) {
      msg.digestAlgorithmIdentifiers.push(
        // AlgorithmIdentifier
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // algorithm
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
            asn1.oidToDer(oid).getBytes()),
          // parameters (null)
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
        ]));
    }

    return mds;
  }

  function addSignerInfos(mds) {
    var content;

    if (msg.detachedContent) {
      // Signature has been made in detached mode.
      content = msg.detachedContent;
    } else {
      // Note: ContentInfo is a SEQUENCE with 2 values, second value is
      // the content field and is optional for a ContentInfo but required here
      // since signers are present
      // get ContentInfo content
      content = msg.contentInfo.value[1];
      // skip [0] EXPLICIT content wrapper
      content = content.value[0];
    }

    if(!content) {
      throw new Error(
        'Could not sign PKCS#7 message; there is no content to sign.');
    }

    // get ContentInfo content type
    var contentType = asn1.derToOid(msg.contentInfo.value[0].value);

    // serialize content
    var bytes = asn1.toDer(content);

    // skip identifier and length per RFC 2315 9.3
    // skip identifier (1 byte)
    bytes.getByte();
    // read and discard length bytes
    asn1.getBerValueLength(bytes);
    bytes = bytes.getBytes();

    // digest content DER value bytes
    for(var oid in mds) {
      mds[oid].start().update(bytes);
    }

    // sign content
    var signingTime = new Date();
    for(var i = 0; i < msg.signers.length; ++i) {
      var signer = msg.signers[i];

      if(signer.authenticatedAttributes.length === 0) {
        // if ContentInfo content type is not "Data", then
        // authenticatedAttributes must be present per RFC 2315
        if(contentType !== forge.pki.oids.data) {
          throw new Error(
            'Invalid signer; authenticatedAttributes must be present ' +
            'when the ContentInfo content type is not PKCS#7 Data.');
        }
      } else {
        // process authenticated attributes
        // [0] IMPLICIT
        signer.authenticatedAttributesAsn1 = asn1.create(
          asn1.Class.CONTEXT_SPECIFIC, 0, true, []);

        // per RFC 2315, attributes are to be digested using a SET container
        // not the above [0] IMPLICIT container
        var attrsAsn1 = asn1.create(
          asn1.Class.UNIVERSAL, asn1.Type.SET, true, []);

        for(var ai = 0; ai < signer.authenticatedAttributes.length; ++ai) {
          var attr = signer.authenticatedAttributes[ai];
          if(attr.type === forge.pki.oids.messageDigest) {
            // use content message digest as value
            attr.value = mds[signer.digestAlgorithm].digest();
          } else if(attr.type === forge.pki.oids.signingTime) {
            // auto-populate signing time if not already set
            if(!attr.value) {
              attr.value = signingTime;
            }
          }

          // convert to ASN.1 and push onto Attributes SET (for signing) and
          // onto authenticatedAttributesAsn1 to complete SignedData ASN.1
          // TODO: optimize away duplication
          attrsAsn1.value.push(_attributeToAsn1(attr));
          signer.authenticatedAttributesAsn1.value.push(_attributeToAsn1(attr));
        }

        // DER-serialize and digest SET OF attributes only
        bytes = asn1.toDer(attrsAsn1).getBytes();
        signer.md.start().update(bytes);
      }

      // sign digest
      signer.signature = signer.key.sign(signer.md, 'RSASSA-PKCS1-V1_5');
    }

    // add signer info
    msg.signerInfos = _signersToAsn1(msg.signers);
  }
};

/**
 * Creates an empty PKCS#7 message of type EncryptedData.
 *
 * @return the message.
 */
p7.createEncryptedData = function() {
  var msg = null;
  msg = {
    type: forge.pki.oids.encryptedData,
    version: 0,
    encryptedContent: {
      algorithm: forge.pki.oids['aes256-CBC']
    },

    /**
     * Reads an EncryptedData content block (in ASN.1 format)
     *
     * @param obj The ASN.1 representation of the EncryptedData content block
     */
    fromAsn1: function(obj) {
      // Validate EncryptedData content block and capture data.
      _fromAsn1(msg, obj, p7.asn1.encryptedDataValidator);
    },

    /**
     * Decrypt encrypted content
     *
     * @param key The (symmetric) key as a byte buffer
     */
    decrypt: function(key) {
      if(key !== undefined) {
        msg.encryptedContent.key = key;
      }
      _decryptContent(msg);
    }
  };
  return msg;
};

/**
 * Creates an empty PKCS#7 message of type EnvelopedData.
 *
 * @return the message.
 */
p7.createEnvelopedData = function() {
  var msg = null;
  msg = {
    type: forge.pki.oids.envelopedData,
    version: 0,
    recipients: [],
    encryptedContent: {
      algorithm: forge.pki.oids['aes256-CBC']
    },

    /**
     * Reads an EnvelopedData content block (in ASN.1 format)
     *
     * @param obj the ASN.1 representation of the EnvelopedData content block.
     */
    fromAsn1: function(obj) {
      // validate EnvelopedData content block and capture data
      var capture = _fromAsn1(msg, obj, p7.asn1.envelopedDataValidator);
      msg.recipients = _recipientsFromAsn1(capture.recipientInfos.value);
    },

    toAsn1: function() {
      // ContentInfo
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // ContentType
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          asn1.oidToDer(msg.type).getBytes()),
        // [0] EnvelopedData
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // Version
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
              asn1.integerToDer(msg.version).getBytes()),
            // RecipientInfos
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true,
              _recipientsToAsn1(msg.recipients)),
            // EncryptedContentInfo
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true,
              _encryptedContentToAsn1(msg.encryptedContent))
          ])
        ])
      ]);
    },

    /**
     * Find recipient by X.509 certificate's issuer.
     *
     * @param cert the certificate with the issuer to look for.
     *
     * @return the recipient object.
     */
    findRecipient: function(cert) {
      var sAttr = cert.issuer.attributes;

      for(var i = 0; i < msg.recipients.length; ++i) {
        var r = msg.recipients[i];
        var rAttr = r.issuer;

        if(r.serialNumber !== cert.serialNumber) {
          continue;
        }

        if(rAttr.length !== sAttr.length) {
          continue;
        }

        var match = true;
        for(var j = 0; j < sAttr.length; ++j) {
          if(rAttr[j].type !== sAttr[j].type ||
            rAttr[j].value !== sAttr[j].value) {
            match = false;
            break;
          }
        }

        if(match) {
          return r;
        }
      }

      return null;
    },

    /**
     * Decrypt enveloped content
     *
     * @param recipient The recipient object related to the private key
     * @param privKey The (RSA) private key object
     */
    decrypt: function(recipient, privKey) {
      if(msg.encryptedContent.key === undefined && recipient !== undefined &&
        privKey !== undefined) {
        switch(recipient.encryptedContent.algorithm) {
          case forge.pki.oids.rsaEncryption:
          case forge.pki.oids.desCBC:
            var key = privKey.decrypt(recipient.encryptedContent.content);
            msg.encryptedContent.key = forge.util.createBuffer(key);
            break;

          default:
            throw new Error('Unsupported asymmetric cipher, ' +
              'OID ' + recipient.encryptedContent.algorithm);
        }
      }

      _decryptContent(msg);
    },

    /**
     * Add (another) entity to list of recipients.
     *
     * @param cert The certificate of the entity to add.
     */
    addRecipient: function(cert) {
      msg.recipients.push({
        version: 0,
        issuer: cert.issuer.attributes,
        serialNumber: cert.serialNumber,
        encryptedContent: {
          // We simply assume rsaEncryption here, since forge.pki only
          // supports RSA so far.  If the PKI module supports other
          // ciphers one day, we need to modify this one as well.
          algorithm: forge.pki.oids.rsaEncryption,
          key: cert.publicKey
        }
      });
    },

    /**
     * Encrypt enveloped content.
     *
     * This function supports two optional arguments, cipher and key, which
     * can be used to influence symmetric encryption.  Unless cipher is
     * provided, the cipher specified in encryptedContent.algorithm is used
     * (defaults to AES-256-CBC).  If no key is provided, encryptedContent.key
     * is (re-)used.  If that one's not set, a random key will be generated
     * automatically.
     *
     * @param [key] The key to be used for symmetric encryption.
     * @param [cipher] The OID of the symmetric cipher to use.
     */
    encrypt: function(key, cipher) {
      // Part 1: Symmetric encryption
      if(msg.encryptedContent.content === undefined) {
        cipher = cipher || msg.encryptedContent.algorithm;
        key = key || msg.encryptedContent.key;

        var keyLen, ivLen, ciphFn;
        switch(cipher) {
          case forge.pki.oids['aes128-CBC']:
            keyLen = 16;
            ivLen = 16;
            ciphFn = forge.aes.createEncryptionCipher;
            break;

          case forge.pki.oids['aes192-CBC']:
            keyLen = 24;
            ivLen = 16;
            ciphFn = forge.aes.createEncryptionCipher;
            break;

          case forge.pki.oids['aes256-CBC']:
            keyLen = 32;
            ivLen = 16;
            ciphFn = forge.aes.createEncryptionCipher;
            break;

          case forge.pki.oids['des-EDE3-CBC']:
            keyLen = 24;
            ivLen = 8;
            ciphFn = forge.des.createEncryptionCipher;
            break;

          default:
            throw new Error('Unsupported symmetric cipher, OID ' + cipher);
        }

        if(key === undefined) {
          key = forge.util.createBuffer(forge.random.getBytes(keyLen));
        } else if(key.length() != keyLen) {
          throw new Error('Symmetric key has wrong length; ' +
            'got ' + key.length() + ' bytes, expected ' + keyLen + '.');
        }

        // Keep a copy of the key & IV in the object, so the caller can
        // use it for whatever reason.
        msg.encryptedContent.algorithm = cipher;
        msg.encryptedContent.key = key;
        msg.encryptedContent.parameter = forge.util.createBuffer(
          forge.random.getBytes(ivLen));

        var ciph = ciphFn(key);
        ciph.start(msg.encryptedContent.parameter.copy());
        ciph.update(msg.content);

        // The finish function does PKCS#7 padding by default, therefore
        // no action required by us.
        if(!ciph.finish()) {
          throw new Error('Symmetric encryption failed.');
        }

        msg.encryptedContent.content = ciph.output;
      }

      // Part 2: asymmetric encryption for each recipient
      for(var i = 0; i < msg.recipients.length; ++i) {
        var recipient = msg.recipients[i];

        // Nothing to do, encryption already done.
        if(recipient.encryptedContent.content !== undefined) {
          continue;
        }

        switch(recipient.encryptedContent.algorithm) {
          case forge.pki.oids.rsaEncryption:
            recipient.encryptedContent.content =
              recipient.encryptedContent.key.encrypt(
                msg.encryptedContent.key.data);
            break;

          default:
            throw new Error('Unsupported asymmetric cipher, OID ' +
              recipient.encryptedContent.algorithm);
        }
      }
    }
  };
  return msg;
};

/**
 * Converts a single recipient from an ASN.1 object.
 *
 * @param obj the ASN.1 RecipientInfo.
 *
 * @return the recipient object.
 */
function _recipientFromAsn1(obj) {
  // validate EnvelopedData content block and capture data
  var capture = {};
  var errors = [];
  if(!asn1.validate(obj, p7.asn1.recipientInfoValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#7 RecipientInfo. ' +
      'ASN.1 object is not an PKCS#7 RecipientInfo.');
    error.errors = errors;
    throw error;
  }

  return {
    version: capture.version.charCodeAt(0),
    issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
    serialNumber: forge.util.createBuffer(capture.serial).toHex(),
    encryptedContent: {
      algorithm: asn1.derToOid(capture.encAlgorithm),
      parameter: capture.encParameter ? capture.encParameter.value : undefined,
      content: capture.encKey
    }
  };
}

/**
 * Converts a single recipient object to an ASN.1 object.
 *
 * @param obj the recipient object.
 *
 * @return the ASN.1 RecipientInfo.
 */
function _recipientToAsn1(obj) {
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // Version
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      asn1.integerToDer(obj.version).getBytes()),
    // IssuerAndSerialNumber
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // Name
      forge.pki.distinguishedNameToAsn1({attributes: obj.issuer}),
      // Serial
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
        forge.util.hexToBytes(obj.serialNumber))
    ]),
    // KeyEncryptionAlgorithmIdentifier
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // Algorithm
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(obj.encryptedContent.algorithm).getBytes()),
      // Parameter, force NULL, only RSA supported for now.
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
    ]),
    // EncryptedKey
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
      obj.encryptedContent.content)
  ]);
}

/**
 * Map a set of RecipientInfo ASN.1 objects to recipient objects.
 *
 * @param infos an array of ASN.1 representations RecipientInfo (i.e. SET OF).
 *
 * @return an array of recipient objects.
 */
function _recipientsFromAsn1(infos) {
  var ret = [];
  for(var i = 0; i < infos.length; ++i) {
    ret.push(_recipientFromAsn1(infos[i]));
  }
  return ret;
}

/**
 * Map an array of recipient objects to ASN.1 RecipientInfo objects.
 *
 * @param recipients an array of recipientInfo objects.
 *
 * @return an array of ASN.1 RecipientInfos.
 */
function _recipientsToAsn1(recipients) {
  var ret = [];
  for(var i = 0; i < recipients.length; ++i) {
    ret.push(_recipientToAsn1(recipients[i]));
  }
  return ret;
}

/**
 * Converts a single signer from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a SignerInfo.
 *
 * @return the signer object.
 */
function _signerFromAsn1(obj) {
  // validate EnvelopedData content block and capture data
  var capture = {};
  var errors = [];
  if(!asn1.validate(obj, p7.asn1.signerInfoValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#7 SignerInfo. ' +
      'ASN.1 object is not an PKCS#7 SignerInfo.');
    error.errors = errors;
    throw error;
  }

  var rval = {
    version: capture.version.charCodeAt(0),
    issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
    serialNumber: forge.util.createBuffer(capture.serial).toHex(),
    digestAlgorithm: asn1.derToOid(capture.digestAlgorithm),
    signatureAlgorithm: asn1.derToOid(capture.signatureAlgorithm),
    signature: capture.signature,
    authenticatedAttributes: [],
    unauthenticatedAttributes: []
  };

  // TODO: convert attributes
  var authenticatedAttributes = capture.authenticatedAttributes || [];
  var unauthenticatedAttributes = capture.unauthenticatedAttributes || [];

  return rval;
}

/**
 * Converts a single signerInfo object to an ASN.1 object.
 *
 * @param obj the signerInfo object.
 *
 * @return the ASN.1 representation of a SignerInfo.
 */
function _signerToAsn1(obj) {
  // SignerInfo
  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // version
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      asn1.integerToDer(obj.version).getBytes()),
    // issuerAndSerialNumber
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // name
      forge.pki.distinguishedNameToAsn1({attributes: obj.issuer}),
      // serial
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
        forge.util.hexToBytes(obj.serialNumber))
    ]),
    // digestAlgorithm
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // algorithm
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(obj.digestAlgorithm).getBytes()),
      // parameters (null)
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
    ])
  ]);

  // authenticatedAttributes (OPTIONAL)
  if(obj.authenticatedAttributesAsn1) {
    // add ASN.1 previously generated during signing
    rval.value.push(obj.authenticatedAttributesAsn1);
  }

  // digestEncryptionAlgorithm
  rval.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // algorithm
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
      asn1.oidToDer(obj.signatureAlgorithm).getBytes()),
    // parameters (null)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
  ]));

  // encryptedDigest
  rval.value.push(asn1.create(
    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, obj.signature));

  // unauthenticatedAttributes (OPTIONAL)
  if(obj.unauthenticatedAttributes.length > 0) {
    // [1] IMPLICIT
    var attrsAsn1 = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, []);
    for(var i = 0; i < obj.unauthenticatedAttributes.length; ++i) {
      var attr = obj.unauthenticatedAttributes[i];
      attrsAsn1.values.push(_attributeToAsn1(attr));
    }
    rval.value.push(attrsAsn1);
  }

  return rval;
}

/**
 * Map a set of SignerInfo ASN.1 objects to an array of signer objects.
 *
 * @param signerInfoAsn1s an array of ASN.1 SignerInfos (i.e. SET OF).
 *
 * @return an array of signers objects.
 */
function _signersFromAsn1(signerInfoAsn1s) {
  var ret = [];
  for(var i = 0; i < signerInfoAsn1s.length; ++i) {
    ret.push(_signerFromAsn1(signerInfoAsn1s[i]));
  }
  return ret;
}

/**
 * Map an array of signer objects to ASN.1 objects.
 *
 * @param signers an array of signer objects.
 *
 * @return an array of ASN.1 SignerInfos.
 */
function _signersToAsn1(signers) {
  var ret = [];
  for(var i = 0; i < signers.length; ++i) {
    ret.push(_signerToAsn1(signers[i]));
  }
  return ret;
}

/**
 * Convert an attribute object to an ASN.1 Attribute.
 *
 * @param attr the attribute object.
 *
 * @return the ASN.1 Attribute.
 */
function _attributeToAsn1(attr) {
  var value;

  // TODO: generalize to support more attributes
  if(attr.type === forge.pki.oids.contentType) {
    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
      asn1.oidToDer(attr.value).getBytes());
  } else if(attr.type === forge.pki.oids.messageDigest) {
    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
      attr.value.bytes());
  } else if(attr.type === forge.pki.oids.signingTime) {
    /* Note per RFC 2985: Dates between 1 January 1950 and 31 December 2049
      (inclusive) MUST be encoded as UTCTime. Any dates with year values
      before 1950 or after 2049 MUST be encoded as GeneralizedTime. [Further,]
      UTCTime values MUST be expressed in Greenwich Mean Time (Zulu) and MUST
      include seconds (i.e., times are YYMMDDHHMMSSZ), even where the
      number of seconds is zero.  Midnight (GMT) must be represented as
      "YYMMDD000000Z". */
    // TODO: make these module-level constants
    var jan_1_1950 = new Date('1950-01-01T00:00:00Z');
    var jan_1_2050 = new Date('2050-01-01T00:00:00Z');
    var date = attr.value;
    if(typeof date === 'string') {
      // try to parse date
      var timestamp = Date.parse(date);
      if(!isNaN(timestamp)) {
        date = new Date(timestamp);
      } else if(date.length === 13) {
        // YYMMDDHHMMSSZ (13 chars for UTCTime)
        date = asn1.utcTimeToDate(date);
      } else {
        // assume generalized time
        date = asn1.generalizedTimeToDate(date);
      }
    }

    if(date >= jan_1_1950 && date < jan_1_2050) {
      value = asn1.create(
        asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false,
        asn1.dateToUtcTime(date));
    } else {
      value = asn1.create(
        asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false,
        asn1.dateToGeneralizedTime(date));
    }
  }

  // TODO: expose as common API call
  // create a RelativeDistinguishedName set
  // each value in the set is an AttributeTypeAndValue first
  // containing the type (an OID) and second the value
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // AttributeType
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
      asn1.oidToDer(attr.type).getBytes()),
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
      // AttributeValue
      value
    ])
  ]);
}

/**
 * Map messages encrypted content to ASN.1 objects.
 *
 * @param ec The encryptedContent object of the message.
 *
 * @return ASN.1 representation of the encryptedContent object (SEQUENCE).
 */
function _encryptedContentToAsn1(ec) {
  return [
    // ContentType, always Data for the moment
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
      asn1.oidToDer(forge.pki.oids.data).getBytes()),
    // ContentEncryptionAlgorithmIdentifier
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // Algorithm
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(ec.algorithm).getBytes()),
      // Parameters (IV)
      !ec.parameter ?
        undefined :
        asn1.create(
          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
          ec.parameter.getBytes())
    ]),
    // [0] EncryptedContent
    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
        ec.content.getBytes())
    ])
  ];
}

/**
 * Reads the "common part" of an PKCS#7 content block (in ASN.1 format)
 *
 * This function reads the "common part" of the PKCS#7 content blocks
 * EncryptedData and EnvelopedData, i.e. version number and symmetrically
 * encrypted content block.
 *
 * The result of the ASN.1 validate and capture process is returned
 * to allow the caller to extract further data, e.g. the list of recipients
 * in case of a EnvelopedData object.
 *
 * @param msg the PKCS#7 object to read the data to.
 * @param obj the ASN.1 representation of the content block.
 * @param validator the ASN.1 structure validator object to use.
 *
 * @return the value map captured by validator object.
 */
function _fromAsn1(msg, obj, validator) {
  var capture = {};
  var errors = [];
  if(!asn1.validate(obj, validator, capture, errors)) {
    var error = new Error('Cannot read PKCS#7 message. ' +
      'ASN.1 object is not a supported PKCS#7 message.');
    error.errors = error;
    throw error;
  }

  // Check contentType, so far we only support (raw) Data.
  var contentType = asn1.derToOid(capture.contentType);
  if(contentType !== forge.pki.oids.data) {
    throw new Error('Unsupported PKCS#7 message. ' +
      'Only wrapped ContentType Data supported.');
  }

  if(capture.encryptedContent) {
    var content = '';
    if(forge.util.isArray(capture.encryptedContent)) {
      for(var i = 0; i < capture.encryptedContent.length; ++i) {
        if(capture.encryptedContent[i].type !== asn1.Type.OCTETSTRING) {
          throw new Error('Malformed PKCS#7 message, expecting encrypted ' +
            'content constructed of only OCTET STRING objects.');
        }
        content += capture.encryptedContent[i].value;
      }
    } else {
      content = capture.encryptedContent;
    }
    msg.encryptedContent = {
      algorithm: asn1.derToOid(capture.encAlgorithm),
      parameter: forge.util.createBuffer(capture.encParameter.value),
      content: forge.util.createBuffer(content)
    };
  }

  if(capture.content) {
    var content = '';
    if(forge.util.isArray(capture.content)) {
      for(var i = 0; i < capture.content.length; ++i) {
        if(capture.content[i].type !== asn1.Type.OCTETSTRING) {
          throw new Error('Malformed PKCS#7 message, expecting ' +
            'content constructed of only OCTET STRING objects.');
        }
        content += capture.content[i].value;
      }
    } else {
      content = capture.content;
    }
    msg.content = forge.util.createBuffer(content);
  }

  msg.version = capture.version.charCodeAt(0);
  msg.rawCapture = capture;

  return capture;
}

/**
 * Decrypt the symmetrically encrypted content block of the PKCS#7 message.
 *
 * Decryption is skipped in case the PKCS#7 message object already has a
 * (decrypted) content attribute.  The algorithm, key and cipher parameters
 * (probably the iv) are taken from the encryptedContent attribute of the
 * message object.
 *
 * @param The PKCS#7 message object.
 */
function _decryptContent(msg) {
  if(msg.encryptedContent.key === undefined) {
    throw new Error('Symmetric key not available.');
  }

  if(msg.content === undefined) {
    var ciph;

    switch(msg.encryptedContent.algorithm) {
      case forge.pki.oids['aes128-CBC']:
      case forge.pki.oids['aes192-CBC']:
      case forge.pki.oids['aes256-CBC']:
        ciph = forge.aes.createDecryptionCipher(msg.encryptedContent.key);
        break;

      case forge.pki.oids['desCBC']:
      case forge.pki.oids['des-EDE3-CBC']:
        ciph = forge.des.createDecryptionCipher(msg.encryptedContent.key);
        break;

      default:
        throw new Error('Unsupported symmetric cipher, OID ' +
          msg.encryptedContent.algorithm);
    }
    ciph.start(msg.encryptedContent.parameter);
    ciph.update(msg.encryptedContent.content);

    if(!ciph.finish()) {
      throw new Error('Symmetric decryption failed.');
    }

    msg.content = ciph.output;
  }
}
/**
 * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.
 *
 * @author Dave Longley
 * @author Stefan Siegl
 *
 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * The ASN.1 representation of PKCS#7 is as follows
 * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):
 *
 * A PKCS#7 message consists of a ContentInfo on root level, which may
 * contain any number of further ContentInfo nested into it.
 *
 * ContentInfo ::= SEQUENCE {
 *   contentType                ContentType,
 *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL
 * }
 *
 * ContentType ::= OBJECT IDENTIFIER
 *
 * EnvelopedData ::= SEQUENCE {
 *   version                    Version,
 *   recipientInfos             RecipientInfos,
 *   encryptedContentInfo       EncryptedContentInfo
 * }
 *
 * EncryptedData ::= SEQUENCE {
 *   version                    Version,
 *   encryptedContentInfo       EncryptedContentInfo
 * }
 *
 * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
 *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }
 *
 * SignedData ::= SEQUENCE {
 *   version           INTEGER,
 *   digestAlgorithms  DigestAlgorithmIdentifiers,
 *   contentInfo       ContentInfo,
 *   certificates      [0] IMPLICIT Certificates OPTIONAL,
 *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,
 *   signerInfos       SignerInfos
 * }
 *
 * SignerInfos ::= SET OF SignerInfo
 *
 * SignerInfo ::= SEQUENCE {
 *   version                    Version,
 *   issuerAndSerialNumber      IssuerAndSerialNumber,
 *   digestAlgorithm            DigestAlgorithmIdentifier,
 *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,
 *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,
 *   encryptedDigest            EncryptedDigest,
 *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL
 * }
 *
 * EncryptedDigest ::= OCTET STRING
 *
 * Attributes ::= SET OF Attribute
 *
 * Attribute ::= SEQUENCE {
 *   attrType    OBJECT IDENTIFIER,
 *   attrValues  SET OF AttributeValue
 * }
 *
 * AttributeValue ::= ANY
 *
 * Version ::= INTEGER
 *
 * RecipientInfos ::= SET OF RecipientInfo
 *
 * EncryptedContentInfo ::= SEQUENCE {
 *   contentType                 ContentType,
 *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
 *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL
 * }
 *
 * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of AES and DES3, there is only one,
 * the IV.
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *    algorithm OBJECT IDENTIFIER,
 *    parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * EncryptedContent ::= OCTET STRING
 *
 * RecipientInfo ::= SEQUENCE {
 *   version                     Version,
 *   issuerAndSerialNumber       IssuerAndSerialNumber,
 *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,
 *   encryptedKey                EncryptedKey
 * }
 *
 * IssuerAndSerialNumber ::= SEQUENCE {
 *   issuer                      Name,
 *   serialNumber                CertificateSerialNumber
 * }
 *
 * CertificateSerialNumber ::= INTEGER
 *
 * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * EncryptedKey ::= OCTET STRING
 */
var forge = require('./forge');
require('./asn1');
require('./util');

// shortcut for ASN.1 API
var asn1 = forge.asn1;

// shortcut for PKCS#7 API
var p7v = module.exports = forge.pkcs7asn1 = forge.pkcs7asn1 || {};
forge.pkcs7 = forge.pkcs7 || {};
forge.pkcs7.asn1 = p7v;

var contentInfoValidator = {
  name: 'ContentInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'ContentInfo.ContentType',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'contentType'
  }, {
    name: 'ContentInfo.content',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    optional: true,
    captureAsn1: 'content'
  }]
};
p7v.contentInfoValidator = contentInfoValidator;

var encryptedContentInfoValidator = {
  name: 'EncryptedContentInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EncryptedContentInfo.contentType',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'contentType'
  }, {
    name: 'EncryptedContentInfo.contentEncryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encAlgorithm'
    }, {
      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.parameter',
      tagClass: asn1.Class.UNIVERSAL,
      captureAsn1: 'encParameter'
    }]
  }, {
    name: 'EncryptedContentInfo.encryptedContent',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    /* The PKCS#7 structure output by OpenSSL somewhat differs from what
     * other implementations do generate.
     *
     * OpenSSL generates a structure like this:
     * SEQUENCE {
     *    ...
     *    [0]
     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
     *       ...
     * }
     *
     * Whereas other implementations (and this PKCS#7 module) generate:
     * SEQUENCE {
     *    ...
     *    [0] {
     *       OCTET STRING
     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
     *          ...
     *    }
     * }
     *
     * In order to support both, we just capture the context specific
     * field here.  The OCTET STRING bit is removed below.
     */
    capture: 'encryptedContent',
    captureAsn1: 'encryptedContentAsn1'
  }]
};

p7v.envelopedDataValidator = {
  name: 'EnvelopedData',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EnvelopedData.Version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }, {
    name: 'EnvelopedData.RecipientInfos',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    captureAsn1: 'recipientInfos'
  }].concat(encryptedContentInfoValidator)
};

p7v.encryptedDataValidator = {
  name: 'EncryptedData',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EncryptedData.Version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }].concat(encryptedContentInfoValidator)
};

var signerValidator = {
  name: 'SignerInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'SignerInfo.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false
  }, {
    name: 'SignerInfo.issuerAndSerialNumber',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'SignerInfo.issuerAndSerialNumber.issuer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'issuer'
    }, {
      name: 'SignerInfo.issuerAndSerialNumber.serialNumber',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      capture: 'serial'
    }]
  }, {
    name: 'SignerInfo.digestAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'SignerInfo.digestAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'digestAlgorithm'
    }, {
      name: 'SignerInfo.digestAlgorithm.parameter',
      tagClass: asn1.Class.UNIVERSAL,
      constructed: false,
      captureAsn1: 'digestParameter',
      optional: true
    }]
  }, {
    name: 'SignerInfo.authenticatedAttributes',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    optional: true,
    capture: 'authenticatedAttributes'
  }, {
    name: 'SignerInfo.digestEncryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    capture: 'signatureAlgorithm'
  }, {
    name: 'SignerInfo.encryptedDigest',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'signature'
  }, {
    name: 'SignerInfo.unauthenticatedAttributes',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 1,
    constructed: true,
    optional: true,
    capture: 'unauthenticatedAttributes'
  }]
};

p7v.signedDataValidator = {
  name: 'SignedData',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'SignedData.Version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }, {
    name: 'SignedData.DigestAlgorithms',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    captureAsn1: 'digestAlgorithms'
  },
  contentInfoValidator,
  {
    name: 'SignedData.Certificates',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    optional: true,
    captureAsn1: 'certificates'
  }, {
    name: 'SignedData.CertificateRevocationLists',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 1,
    optional: true,
    captureAsn1: 'crls'
  }, {
    name: 'SignedData.SignerInfos',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    capture: 'signerInfos',
    optional: true,
    value: [signerValidator]
  }]
};

p7v.recipientInfoValidator = {
  name: 'RecipientInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'RecipientInfo.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }, {
    name: 'RecipientInfo.issuerAndSerial',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'RecipientInfo.issuerAndSerial.issuer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'issuer'
    }, {
      name: 'RecipientInfo.issuerAndSerial.serialNumber',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      capture: 'serial'
    }]
  }, {
    name: 'RecipientInfo.keyEncryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'RecipientInfo.keyEncryptionAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encAlgorithm'
    }, {
      name: 'RecipientInfo.keyEncryptionAlgorithm.parameter',
      tagClass: asn1.Class.UNIVERSAL,
      constructed: false,
      captureAsn1: 'encParameter',
      optional: true
    }]
  }, {
    name: 'RecipientInfo.encryptedKey',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'encKey'
  }]
};
/**
 * Javascript implementation of a basic Public Key Infrastructure, including
 * support for RSA public and private keys.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./asn1');
require('./oids');
require('./pbe');
require('./pem');
require('./pbkdf2');
require('./pkcs12');
require('./pss');
require('./rsa');
require('./util');
require('./x509');

// shortcut for asn.1 API
var asn1 = forge.asn1;

/* Public Key Infrastructure (PKI) implementation. */
var pki = module.exports = forge.pki = forge.pki || {};

/**
 * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.
 *
 * Converts PEM-formatted data to DER.
 *
 * @param pem the PEM-formatted data.
 *
 * @return the DER-formatted data.
 */
pki.pemToDer = function(pem) {
  var msg = forge.pem.decode(pem)[0];
  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert PEM to DER; PEM is encrypted.');
  }
  return forge.util.createBuffer(msg.body);
};

/**
 * Converts an RSA private key from PEM format.
 *
 * @param pem the PEM-formatted private key.
 *
 * @return the private key.
 */
pki.privateKeyFromPem = function(pem) {
  var msg = forge.pem.decode(pem)[0];

  if(msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {
    var error = new Error('Could not convert private key from PEM; PEM ' +
      'header type is not "PRIVATE KEY" or "RSA PRIVATE KEY".');
    error.headerType = msg.type;
    throw error;
  }
  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert private key from PEM; PEM is encrypted.');
  }

  // convert DER to ASN.1 object
  var obj = asn1.fromDer(msg.body);

  return pki.privateKeyFromAsn1(obj);
};

/**
 * Converts an RSA private key to PEM format.
 *
 * @param key the private key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted private key.
 */
pki.privateKeyToPem = function(key, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'RSA PRIVATE KEY',
    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()
  };
  return forge.pem.encode(msg, {maxline: maxline});
};

/**
 * Converts a PrivateKeyInfo to PEM format.
 *
 * @param pki the PrivateKeyInfo.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted private key.
 */
pki.privateKeyInfoToPem = function(pki, maxline) {
  // convert to DER, then PEM-encode
  var msg = {
    type: 'PRIVATE KEY',
    body: asn1.toDer(pki).getBytes()
  };
  return forge.pem.encode(msg, {maxline: maxline});
};
/**
 * Prime number generation API.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./util');
require('./jsbn');
require('./random');

(function() {

// forge.prime already defined
if(forge.prime) {
  module.exports = forge.prime;
  return;
}

/* PRIME API */
var prime = module.exports = forge.prime = forge.prime || {};

var BigInteger = forge.jsbn.BigInteger;

// primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];
var THIRTY = new BigInteger(null);
THIRTY.fromInt(30);
var op_or = function(x, y) {return x|y;};

/**
 * Generates a random probable prime with the given number of bits.
 *
 * Alternative algorithms can be specified by name as a string or as an
 * object with custom options like so:
 *
 * {
 *   name: 'PRIMEINC',
 *   options: {
 *     maxBlockTime: <the maximum amount of time to block the main
 *       thread before allowing I/O other JS to run>,
 *     millerRabinTests: <the number of miller-rabin tests to run>,
 *     workerScript: <the worker script URL>,
 *     workers: <the number of web workers (if supported) to use,
 *       -1 to use estimated cores minus one>.
 *     workLoad: the size of the work load, ie: number of possible prime
 *       numbers for each web worker to check per work assignment,
 *       (default: 100).
 *   }
 * }
 *
 * @param bits the number of bits for the prime number.
 * @param options the options to use.
 *          [algorithm] the algorithm to use (default: 'PRIMEINC').
 *          [prng] a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync".
 *
 * @return callback(err, num) called once the operation completes.
 */
prime.generateProbablePrime = function(bits, options, callback) {
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};

  // default to PRIMEINC algorithm
  var algorithm = options.algorithm || 'PRIMEINC';
  if(typeof algorithm === 'string') {
    algorithm = {name: algorithm};
  }
  algorithm.options = algorithm.options || {};

  // create prng with api that matches BigInteger secure random
  var prng = options.prng || forge.random;
  var rng = {
    // x is an array to fill with bytes
    nextBytes: function(x) {
      var b = prng.getBytesSync(x.length);
      for(var i = 0; i < x.length; ++i) {
        x[i] = b.charCodeAt(i);
      }
    }
  };

  if(algorithm.name === 'PRIMEINC') {
    return primeincFindPrime(bits, rng, algorithm.options, callback);
  }

  throw new Error('Invalid prime generation algorithm: ' + algorithm.name);
};

function primeincFindPrime(bits, rng, options, callback) {
  if('workers' in options) {
    return primeincFindPrimeWithWorkers(bits, rng, options, callback);
  }
  return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
}

function primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {
  // initialize random number
  var num = generateRandom(bits, rng);

  /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The
  number we are given is always aligned at 30k + 1. Each time the number is
  determined not to be prime we add to get to the next 'i', eg: if the number
  was at 30k + 1 we add 6. */
  var deltaIdx = 0;

  // get required number of MR tests
  var mrTests = getMillerRabinTests(num.bitLength());
  if('millerRabinTests' in options) {
    mrTests = options.millerRabinTests;
  }

  // find prime nearest to 'num' for maxBlockTime ms
  // 10 ms gives 5ms of leeway for other calculations before dropping
  // below 60fps (1000/60 == 16.67), but in reality, the number will
  // likely be higher due to an 'atomic' big int modPow
  var maxBlockTime = 10;
  if('maxBlockTime' in options) {
    maxBlockTime = options.maxBlockTime;
  }

  _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
}

function _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback) {
  var start = +new Date();
  do {
    // overflow, regenerate random number
    if(num.bitLength() > bits) {
      num = generateRandom(bits, rng);
    }
    // do primality test
    if(num.isProbablePrime(mrTests)) {
      return callback(null, num);
    }
    // get next potential prime
    num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
  } while(maxBlockTime < 0 || (+new Date() - start < maxBlockTime));

  // keep trying later
  forge.util.setImmediate(function() {
    _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
  });
}

// NOTE: This algorithm is indeterminate in nature because workers
// run in parallel looking at different segments of numbers. Even if this
// algorithm is run twice with the same input from a predictable RNG, it
// may produce different outputs.
function primeincFindPrimeWithWorkers(bits, rng, options, callback) {
  // web workers unavailable
  if(typeof Worker === 'undefined') {
    return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
  }

  // initialize random number
  var num = generateRandom(bits, rng);

  // use web workers to generate keys
  var numWorkers = options.workers;
  var workLoad = options.workLoad || 100;
  var range = workLoad * 30 / 8;
  var workerScript = options.workerScript || 'forge/prime.worker.js';
  if(numWorkers === -1) {
    return forge.util.estimateCores(function(err, cores) {
      if(err) {
        // default to 2
        cores = 2;
      }
      numWorkers = cores - 1;
      generate();
    });
  }
  generate();

  function generate() {
    // require at least 1 worker
    numWorkers = Math.max(1, numWorkers);

    // TODO: consider optimizing by starting workers outside getPrime() ...
    // note that in order to clean up they will have to be made internally
    // asynchronous which may actually be slower

    // start workers immediately
    var workers = [];
    for(var i = 0; i < numWorkers; ++i) {
      // FIXME: fix path or use blob URLs
      workers[i] = new Worker(workerScript);
    }
    var running = numWorkers;

    // listen for requests from workers and assign ranges to find prime
    for(var i = 0; i < numWorkers; ++i) {
      workers[i].addEventListener('message', workerMessage);
    }

    /* Note: The distribution of random numbers is unknown. Therefore, each
    web worker is continuously allocated a range of numbers to check for a
    random number until one is found.

    Every 30 numbers will be checked just 8 times, because prime numbers
    have the form:

    30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)

    Therefore, if we want a web worker to run N checks before asking for
    a new range of numbers, each range must contain N*30/8 numbers.

    For 100 checks (workLoad), this is a range of 375. */

    var found = false;
    function workerMessage(e) {
      // ignore message, prime already found
      if(found) {
        return;
      }

      --running;
      var data = e.data;
      if(data.found) {
        // terminate all workers
        for(var i = 0; i < workers.length; ++i) {
          workers[i].terminate();
        }
        found = true;
        return callback(null, new BigInteger(data.prime, 16));
      }

      // overflow, regenerate random number
      if(num.bitLength() > bits) {
        num = generateRandom(bits, rng);
      }

      // assign new range to check
      var hex = num.toString(16);

      // start prime search
      e.target.postMessage({
        hex: hex,
        workLoad: workLoad
      });

      num.dAddOffset(range, 0);
    }
  }
}

/**
 * Generates a random number using the given number of bits and RNG.
 *
 * @param bits the number of bits for the number.
 * @param rng the random number generator to use.
 *
 * @return the random number.
 */
function generateRandom(bits, rng) {
  var num = new BigInteger(bits, rng);
  // force MSB set
  var bits1 = bits - 1;
  if(!num.testBit(bits1)) {
    num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);
  }
  // align number on 30k+1 boundary
  num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);
  return num;
}

/**
 * Returns the required number of Miller-Rabin tests to generate a
 * prime with an error probability of (1/2)^80.
 *
 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
 *
 * @param bits the bit size.
 *
 * @return the required number of iterations.
 */
function getMillerRabinTests(bits) {
  if(bits <= 100) return 27;
  if(bits <= 150) return 18;
  if(bits <= 200) return 15;
  if(bits <= 250) return 12;
  if(bits <= 300) return 9;
  if(bits <= 350) return 8;
  if(bits <= 400) return 7;
  if(bits <= 500) return 6;
  if(bits <= 600) return 5;
  if(bits <= 800) return 4;
  if(bits <= 1250) return 3;
  return 2;
}

})();
/**
 * RSA Key Generation Worker.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2013 Digital Bazaar, Inc.
 */
// worker is built using CommonJS syntax to include all code in one worker file
//importScripts('jsbn.js');
var forge = require('./forge');
require('./jsbn');

// prime constants
var LOW_PRIMES = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];
var LP_LIMIT = (1 << 26) / LOW_PRIMES[LOW_PRIMES.length - 1];

var BigInteger = forge.jsbn.BigInteger;
var BIG_TWO = new BigInteger(null);
BIG_TWO.fromInt(2);

self.addEventListener('message', function(e) {
  var result = findPrime(e.data);
  self.postMessage(result);
});

// start receiving ranges to check
self.postMessage({found: false});

// primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];

function findPrime(data) {
  // TODO: abstract based on data.algorithm (PRIMEINC vs. others)

  // create BigInteger from given random bytes
  var num = new BigInteger(data.hex, 16);

  /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The
    number we are given is always aligned at 30k + 1. Each time the number is
    determined not to be prime we add to get to the next 'i', eg: if the number
    was at 30k + 1 we add 6. */
  var deltaIdx = 0;

  // find nearest prime
  var workLoad = data.workLoad;
  for(var i = 0; i < workLoad; ++i) {
    // do primality test
    if(isProbablePrime(num)) {
      return {found: true, prime: num.toString(16)};
    }
    // get next potential prime
    num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
  }

  return {found: false};
}

function isProbablePrime(n) {
  // divide by low primes, ignore even checks, etc (n alread aligned properly)
  var i = 1;
  while(i < LOW_PRIMES.length) {
    var m = LOW_PRIMES[i];
    var j = i + 1;
    while(j < LOW_PRIMES.length && m < LP_LIMIT) {
      m *= LOW_PRIMES[j++];
    }
    m = n.modInt(m);
    while(i < j) {
      if(m % LOW_PRIMES[i++] === 0) {
        return false;
      }
    }
  }
  return runMillerRabin(n);
}

// HAC 4.24, Miller-Rabin
function runMillerRabin(n) {
  // n1 = n - 1
  var n1 = n.subtract(BigInteger.ONE);

  // get s and d such that n1 = 2^s * d
  var s = n1.getLowestSetBit();
  if(s <= 0) {
    return false;
  }
  var d = n1.shiftRight(s);

  var k = _getMillerRabinTests(n.bitLength());
  var prng = getPrng();
  var a;
  for(var i = 0; i < k; ++i) {
    // select witness 'a' at random from between 1 and n - 1
    do {
      a = new BigInteger(n.bitLength(), prng);
    } while(a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);

    /* See if 'a' is a composite witness. */

    // x = a^d mod n
    var x = a.modPow(d, n);

    // probably prime
    if(x.compareTo(BigInteger.ONE) === 0 || x.compareTo(n1) === 0) {
      continue;
    }

    var j = s;
    while(--j) {
      // x = x^2 mod a
      x = x.modPowInt(2, n);

      // 'n' is composite because no previous x == -1 mod n
      if(x.compareTo(BigInteger.ONE) === 0) {
        return false;
      }
      // x == -1 mod n, so probably prime
      if(x.compareTo(n1) === 0) {
        break;
      }
    }

    // 'x' is first_x^(n1/2) and is not +/- 1, so 'n' is not prime
    if(j === 0) {
      return false;
    }
  }

  return true;
}

// get pseudo random number generator
function getPrng() {
  // create prng with api that matches BigInteger secure random
  return {
    // x is an array to fill with bytes
    nextBytes: function(x) {
      for(var i = 0; i < x.length; ++i) {
        x[i] = Math.floor(Math.random() * 0xFF);
      }
    }
  };
}

/**
 * Returns the required number of Miller-Rabin tests to generate a
 * prime with an error probability of (1/2)^80.
 *
 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
 *
 * @param bits the bit size.
 *
 * @return the required number of iterations.
 */
function _getMillerRabinTests(bits) {
  if(bits <= 100) return 27;
  if(bits <= 150) return 18;
  if(bits <= 200) return 15;
  if(bits <= 250) return 12;
  if(bits <= 300) return 9;
  if(bits <= 350) return 8;
  if(bits <= 400) return 7;
  if(bits <= 500) return 6;
  if(bits <= 600) return 5;
  if(bits <= 800) return 4;
  if(bits <= 1250) return 3;
  return 2;
}
/**
 * A javascript implementation of a cryptographically-secure
 * Pseudo Random Number Generator (PRNG). The Fortuna algorithm is followed
 * here though the use of SHA-256 is not enforced; when generating an
 * a PRNG context, the hashing algorithm and block cipher used for
 * the generator are specified via a plugin.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./util');

var _crypto = null;
if(forge.util.isNodejs && !forge.options.usePureJavaScript &&
  !process.versions['node-webkit']) {
  _crypto = require('crypto');
}

/* PRNG API */
var prng = module.exports = forge.prng = forge.prng || {};

/**
 * Creates a new PRNG context.
 *
 * A PRNG plugin must be passed in that will provide:
 *
 * 1. A function that initializes the key and seed of a PRNG context. It
 *   will be given a 16 byte key and a 16 byte seed. Any key expansion
 *   or transformation of the seed from a byte string into an array of
 *   integers (or similar) should be performed.
 * 2. The cryptographic function used by the generator. It takes a key and
 *   a seed.
 * 3. A seed increment function. It takes the seed and returns seed + 1.
 * 4. An api to create a message digest.
 *
 * For an example, see random.js.
 *
 * @param plugin the PRNG plugin to use.
 */
prng.create = function(plugin) {
  var ctx = {
    plugin: plugin,
    key: null,
    seed: null,
    time: null,
    // number of reseeds so far
    reseeds: 0,
    // amount of data generated so far
    generated: 0,
    // no initial key bytes
    keyBytes: ''
  };

  // create 32 entropy pools (each is a message digest)
  var md = plugin.md;
  var pools = new Array(32);
  for(var i = 0; i < 32; ++i) {
    pools[i] = md.create();
  }
  ctx.pools = pools;

  // entropy pools are written to cyclically, starting at index 0
  ctx.pool = 0;

  /**
   * Generates random bytes. The bytes may be generated synchronously or
   * asynchronously. Web workers must use the asynchronous interface or
   * else the behavior is undefined.
   *
   * @param count the number of random bytes to generate.
   * @param [callback(err, bytes)] called once the operation completes.
   *
   * @return count random bytes as a string.
   */
  ctx.generate = function(count, callback) {
    // do synchronously
    if(!callback) {
      return ctx.generateSync(count);
    }

    // simple generator using counter-based CBC
    var cipher = ctx.plugin.cipher;
    var increment = ctx.plugin.increment;
    var formatKey = ctx.plugin.formatKey;
    var formatSeed = ctx.plugin.formatSeed;
    var b = forge.util.createBuffer();

    // paranoid deviation from Fortuna:
    // reset key for every request to protect previously
    // generated random bytes should the key be discovered;
    // there is no 100ms based reseeding because of this
    // forced reseed for every `generate` call
    ctx.key = null;

    generate();

    function generate(err) {
      if(err) {
        return callback(err);
      }

      // sufficient bytes generated
      if(b.length() >= count) {
        return callback(null, b.getBytes(count));
      }

      // if amount of data generated is greater than 1 MiB, trigger reseed
      if(ctx.generated > 0xfffff) {
        ctx.key = null;
      }

      if(ctx.key === null) {
        // prevent stack overflow
        return forge.util.nextTick(function() {
          _reseed(generate);
        });
      }

      // generate the random bytes
      var bytes = cipher(ctx.key, ctx.seed);
      ctx.generated += bytes.length;
      b.putBytes(bytes);

      // generate bytes for a new key and seed
      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));

      forge.util.setImmediate(generate);
    }
  };

  /**
   * Generates random bytes synchronously.
   *
   * @param count the number of random bytes to generate.
   *
   * @return count random bytes as a string.
   */
  ctx.generateSync = function(count) {
    // simple generator using counter-based CBC
    var cipher = ctx.plugin.cipher;
    var increment = ctx.plugin.increment;
    var formatKey = ctx.plugin.formatKey;
    var formatSeed = ctx.plugin.formatSeed;

    // paranoid deviation from Fortuna:
    // reset key for every request to protect previously
    // generated random bytes should the key be discovered;
    // there is no 100ms based reseeding because of this
    // forced reseed for every `generateSync` call
    ctx.key = null;

    var b = forge.util.createBuffer();
    while(b.length() < count) {
      // if amount of data generated is greater than 1 MiB, trigger reseed
      if(ctx.generated > 0xfffff) {
        ctx.key = null;
      }

      if(ctx.key === null) {
        _reseedSync();
      }

      // generate the random bytes
      var bytes = cipher(ctx.key, ctx.seed);
      ctx.generated += bytes.length;
      b.putBytes(bytes);

      // generate bytes for a new key and seed
      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
    }

    return b.getBytes(count);
  };

  /**
   * Private function that asynchronously reseeds a generator.
   *
   * @param callback(err) called once the operation completes.
   */
  function _reseed(callback) {
    if(ctx.pools[0].messageLength >= 32) {
      _seed();
      return callback();
    }
    // not enough seed data...
    var needed = (32 - ctx.pools[0].messageLength) << 5;
    ctx.seedFile(needed, function(err, bytes) {
      if(err) {
        return callback(err);
      }
      ctx.collect(bytes);
      _seed();
      callback();
    });
  }

  /**
   * Private function that synchronously reseeds a generator.
   */
  function _reseedSync() {
    if(ctx.pools[0].messageLength >= 32) {
      return _seed();
    }
    // not enough seed data...
    var needed = (32 - ctx.pools[0].messageLength) << 5;
    ctx.collect(ctx.seedFileSync(needed));
    _seed();
  }

  /**
   * Private function that seeds a generator once enough bytes are available.
   */
  function _seed() {
    // update reseed count
    ctx.reseeds = (ctx.reseeds === 0xffffffff) ? 0 : ctx.reseeds + 1;

    // goal is to update `key` via:
    // key = hash(key + s)
    //   where 's' is all collected entropy from selected pools, then...

    // create a plugin-based message digest
    var md = ctx.plugin.md.create();

    // consume current key bytes
    md.update(ctx.keyBytes);

    // digest the entropy of pools whose index k meet the
    // condition 'n mod 2^k == 0' where n is the number of reseeds
    var _2powK = 1;
    for(var k = 0; k < 32; ++k) {
      if(ctx.reseeds % _2powK === 0) {
        md.update(ctx.pools[k].digest().getBytes());
        ctx.pools[k].start();
      }
      _2powK = _2powK << 1;
    }

    // get digest for key bytes
    ctx.keyBytes = md.digest().getBytes();

    // paranoid deviation from Fortuna:
    // update `seed` via `seed = hash(key)`
    // instead of initializing to zero once and only
    // ever incrementing it
    md.start();
    md.update(ctx.keyBytes);
    var seedBytes = md.digest().getBytes();

    // update state
    ctx.key = ctx.plugin.formatKey(ctx.keyBytes);
    ctx.seed = ctx.plugin.formatSeed(seedBytes);
    ctx.generated = 0;
  }

  /**
   * The built-in default seedFile. This seedFile is used when entropy
   * is needed immediately.
   *
   * @param needed the number of bytes that are needed.
   *
   * @return the random bytes.
   */
  function defaultSeedFile(needed) {
    // use window.crypto.getRandomValues strong source of entropy if available
    var getRandomValues = null;
    var globalScope = forge.util.globalScope;
    var _crypto = globalScope.crypto || globalScope.msCrypto;
    if(_crypto && _crypto.getRandomValues) {
      getRandomValues = function(arr) {
        return _crypto.getRandomValues(arr);
      };
    }

    var b = forge.util.createBuffer();
    if(getRandomValues) {
      while(b.length() < needed) {
        // max byte length is 65536 before QuotaExceededError is thrown
        // http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues
        var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);
        var entropy = new Uint32Array(Math.floor(count));
        try {
          getRandomValues(entropy);
          for(var i = 0; i < entropy.length; ++i) {
            b.putInt32(entropy[i]);
          }
        } catch(e) {
          /* only ignore QuotaExceededError */
          if(!(typeof QuotaExceededError !== 'undefined' &&
            e instanceof QuotaExceededError)) {
            throw e;
          }
        }
      }
    }

    // be sad and add some weak random data
    if(b.length() < needed) {
      /* Draws from Park-Miller "minimal standard" 31 bit PRNG,
      implemented with David G. Carta's optimization: with 32 bit math
      and without division (Public Domain). */
      var hi, lo, next;
      var seed = Math.floor(Math.random() * 0x010000);
      while(b.length() < needed) {
        lo = 16807 * (seed & 0xFFFF);
        hi = 16807 * (seed >> 16);
        lo += (hi & 0x7FFF) << 16;
        lo += hi >> 15;
        lo = (lo & 0x7FFFFFFF) + (lo >> 31);
        seed = lo & 0xFFFFFFFF;

        // consume lower 3 bytes of seed
        for(var i = 0; i < 3; ++i) {
          // throw in more pseudo random
          next = seed >>> (i << 3);
          next ^= Math.floor(Math.random() * 0x0100);
          b.putByte(next & 0xFF);
        }
      }
    }

    return b.getBytes(needed);
  }
  // initialize seed file APIs
  if(_crypto) {
    // use nodejs async API
    ctx.seedFile = function(needed, callback) {
      _crypto.randomBytes(needed, function(err, bytes) {
        if(err) {
          return callback(err);
        }
        callback(null, bytes.toString());
      });
    };
    // use nodejs sync API
    ctx.seedFileSync = function(needed) {
      return _crypto.randomBytes(needed).toString();
    };
  } else {
    ctx.seedFile = function(needed, callback) {
      try {
        callback(null, defaultSeedFile(needed));
      } catch(e) {
        callback(e);
      }
    };
    ctx.seedFileSync = defaultSeedFile;
  }

  /**
   * Adds entropy to a prng ctx's accumulator.
   *
   * @param bytes the bytes of entropy as a string.
   */
  ctx.collect = function(bytes) {
    // iterate over pools distributing entropy cyclically
    var count = bytes.length;
    for(var i = 0; i < count; ++i) {
      ctx.pools[ctx.pool].update(bytes.substr(i, 1));
      ctx.pool = (ctx.pool === 31) ? 0 : ctx.pool + 1;
    }
  };

  /**
   * Collects an integer of n bits.
   *
   * @param i the integer entropy.
   * @param n the number of bits in the integer.
   */
  ctx.collectInt = function(i, n) {
    var bytes = '';
    for(var x = 0; x < n; x += 8) {
      bytes += String.fromCharCode((i >> x) & 0xFF);
    }
    ctx.collect(bytes);
  };

  /**
   * Registers a Web Worker to receive immediate entropy from the main thread.
   * This method is required until Web Workers can access the native crypto
   * API. This method should be called twice for each created worker, once in
   * the main thread, and once in the worker itself.
   *
   * @param worker the worker to register.
   */
  ctx.registerWorker = function(worker) {
    // worker receives random bytes
    if(worker === self) {
      ctx.seedFile = function(needed, callback) {
        function listener(e) {
          var data = e.data;
          if(data.forge && data.forge.prng) {
            self.removeEventListener('message', listener);
            callback(data.forge.prng.err, data.forge.prng.bytes);
          }
        }
        self.addEventListener('message', listener);
        self.postMessage({forge: {prng: {needed: needed}}});
      };
    } else {
      // main thread sends random bytes upon request
      var listener = function(e) {
        var data = e.data;
        if(data.forge && data.forge.prng) {
          ctx.seedFile(data.forge.prng.needed, function(err, bytes) {
            worker.postMessage({forge: {prng: {err: err, bytes: bytes}}});
          });
        }
      };
      // TODO: do we need to remove the event listener when the worker dies?
      worker.addEventListener('message', listener);
    }
  };

  return ctx;
};
/**
 * Javascript implementation of PKCS#1 PSS signature padding.
 *
 * @author Stefan Siegl
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 */
var forge = require('./forge');
require('./random');
require('./util');

// shortcut for PSS API
var pss = module.exports = forge.pss = forge.pss || {};

/**
 * Creates a PSS signature scheme object.
 *
 * There are several ways to provide a salt for encoding:
 *
 * 1. Specify the saltLength only and the built-in PRNG will generate it.
 * 2. Specify the saltLength and a custom PRNG with 'getBytesSync' defined that
 *   will be used.
 * 3. Specify the salt itself as a forge.util.ByteBuffer.
 *
 * @param options the options to use:
 *          md the message digest object to use, a forge md instance.
 *          mgf the mask generation function to use, a forge mgf instance.
 *          [saltLength] the length of the salt in octets.
 *          [prng] the pseudo-random number generator to use to produce a salt.
 *          [salt] the salt to use when encoding.
 *
 * @return a signature scheme object.
 */
pss.create = function(options) {
  // backwards compatibility w/legacy args: hash, mgf, sLen
  if(arguments.length === 3) {
    options = {
      md: arguments[0],
      mgf: arguments[1],
      saltLength: arguments[2]
    };
  }

  var hash = options.md;
  var mgf = options.mgf;
  var hLen = hash.digestLength;

  var salt_ = options.salt || null;
  if(typeof salt_ === 'string') {
    // assume binary-encoded string
    salt_ = forge.util.createBuffer(salt_);
  }

  var sLen;
  if('saltLength' in options) {
    sLen = options.saltLength;
  } else if(salt_ !== null) {
    sLen = salt_.length();
  } else {
    throw new Error('Salt length not specified or specific salt not given.');
  }

  if(salt_ !== null && salt_.length() !== sLen) {
    throw new Error('Given salt length does not match length of given salt.');
  }

  var prng = options.prng || forge.random;

  var pssobj = {};

  /**
   * Encodes a PSS signature.
   *
   * This function implements EMSA-PSS-ENCODE as per RFC 3447, section 9.1.1.
   *
   * @param md the message digest object with the hash to sign.
   * @param modsBits the length of the RSA modulus in bits.
   *
   * @return the encoded message as a binary-encoded string of length
   *           ceil((modBits - 1) / 8).
   */
  pssobj.encode = function(md, modBits) {
    var i;
    var emBits = modBits - 1;
    var emLen = Math.ceil(emBits / 8);

    /* 2. Let mHash = Hash(M), an octet string of length hLen. */
    var mHash = md.digest().getBytes();

    /* 3. If emLen < hLen + sLen + 2, output "encoding error" and stop. */
    if(emLen < hLen + sLen + 2) {
      throw new Error('Message is too long to encrypt.');
    }

    /* 4. Generate a random octet string salt of length sLen; if sLen = 0,
     *    then salt is the empty string. */
    var salt;
    if(salt_ === null) {
      salt = prng.getBytesSync(sLen);
    } else {
      salt = salt_.bytes();
    }

    /* 5. Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt; */
    var m_ = new forge.util.ByteBuffer();
    m_.fillWithByte(0, 8);
    m_.putBytes(mHash);
    m_.putBytes(salt);

    /* 6. Let H = Hash(M'), an octet string of length hLen. */
    hash.start();
    hash.update(m_.getBytes());
    var h = hash.digest().getBytes();

    /* 7. Generate an octet string PS consisting of emLen - sLen - hLen - 2
     *    zero octets.  The length of PS may be 0. */
    var ps = new forge.util.ByteBuffer();
    ps.fillWithByte(0, emLen - sLen - hLen - 2);

    /* 8. Let DB = PS || 0x01 || salt; DB is an octet string of length
     *    emLen - hLen - 1. */
    ps.putByte(0x01);
    ps.putBytes(salt);
    var db = ps.getBytes();

    /* 9. Let dbMask = MGF(H, emLen - hLen - 1). */
    var maskLen = emLen - hLen - 1;
    var dbMask = mgf.generate(h, maskLen);

    /* 10. Let maskedDB = DB \xor dbMask. */
    var maskedDB = '';
    for(i = 0; i < maskLen; i++) {
      maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));
    }

    /* 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in
     *     maskedDB to zero. */
    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;
    maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) +
      maskedDB.substr(1);

    /* 12. Let EM = maskedDB || H || 0xbc.
     * 13. Output EM. */
    return maskedDB + h + String.fromCharCode(0xbc);
  };

  /**
   * Verifies a PSS signature.
   *
   * This function implements EMSA-PSS-VERIFY as per RFC 3447, section 9.1.2.
   *
   * @param mHash the message digest hash, as a binary-encoded string, to
   *         compare against the signature.
   * @param em the encoded message, as a binary-encoded string
   *          (RSA decryption result).
   * @param modsBits the length of the RSA modulus in bits.
   *
   * @return true if the signature was verified, false if not.
   */
  pssobj.verify = function(mHash, em, modBits) {
    var i;
    var emBits = modBits - 1;
    var emLen = Math.ceil(emBits / 8);

    /* c. Convert the message representative m to an encoded message EM
     *    of length emLen = ceil((modBits - 1) / 8) octets, where modBits
     *    is the length in bits of the RSA modulus n */
    em = em.substr(-emLen);

    /* 3. If emLen < hLen + sLen + 2, output "inconsistent" and stop. */
    if(emLen < hLen + sLen + 2) {
      throw new Error('Inconsistent parameters to PSS signature verification.');
    }

    /* 4. If the rightmost octet of EM does not have hexadecimal value
     *    0xbc, output "inconsistent" and stop. */
    if(em.charCodeAt(emLen - 1) !== 0xbc) {
      throw new Error('Encoded message does not end in 0xBC.');
    }

    /* 5. Let maskedDB be the leftmost emLen - hLen - 1 octets of EM, and
     *    let H be the next hLen octets. */
    var maskLen = emLen - hLen - 1;
    var maskedDB = em.substr(0, maskLen);
    var h = em.substr(maskLen, hLen);

    /* 6. If the leftmost 8emLen - emBits bits of the leftmost octet in
     *    maskedDB are not all equal to zero, output "inconsistent" and stop. */
    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;
    if((maskedDB.charCodeAt(0) & mask) !== 0) {
      throw new Error('Bits beyond keysize not zero as expected.');
    }

    /* 7. Let dbMask = MGF(H, emLen - hLen - 1). */
    var dbMask = mgf.generate(h, maskLen);

    /* 8. Let DB = maskedDB \xor dbMask. */
    var db = '';
    for(i = 0; i < maskLen; i++) {
      db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));
    }

    /* 9. Set the leftmost 8emLen - emBits bits of the leftmost octet
     * in DB to zero. */
    db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);

    /* 10. If the emLen - hLen - sLen - 2 leftmost octets of DB are not zero
     * or if the octet at position emLen - hLen - sLen - 1 (the leftmost
     * position is "position 1") does not have hexadecimal value 0x01,
     * output "inconsistent" and stop. */
    var checkLen = emLen - hLen - sLen - 2;
    for(i = 0; i < checkLen; i++) {
      if(db.charCodeAt(i) !== 0x00) {
        throw new Error('Leftmost octets not zero as expected');
      }
    }

    if(db.charCodeAt(checkLen) !== 0x01) {
      throw new Error('Inconsistent PSS signature, 0x01 marker not found');
    }

    /* 11. Let salt be the last sLen octets of DB. */
    var salt = db.substr(-sLen);

    /* 12.  Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt */
    var m_ = new forge.util.ByteBuffer();
    m_.fillWithByte(0, 8);
    m_.putBytes(mHash);
    m_.putBytes(salt);

    /* 13. Let H' = Hash(M'), an octet string of length hLen. */
    hash.start();
    hash.update(m_.getBytes());
    var h_ = hash.digest().getBytes();

    /* 14. If H = H', output "consistent." Otherwise, output "inconsistent." */
    return h === h_;
  };

  return pssobj;
};
/**
 * An API for getting cryptographically-secure random bytes. The bytes are
 * generated using the Fortuna algorithm devised by Bruce Schneier and
 * Niels Ferguson.
 *
 * Getting strong random bytes is not yet easy to do in javascript. The only
 * truish random entropy that can be collected is from the mouse, keyboard, or
 * from timing with respect to page loads, etc. This generator makes a poor
 * attempt at providing random bytes when those sources haven't yet provided
 * enough entropy to initially seed or to reseed the PRNG.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./aes');
require('./sha256');
require('./prng');
require('./util');

(function() {

// forge.random already defined
if(forge.random && forge.random.getBytes) {
  module.exports = forge.random;
  return;
}

(function(jQuery) {

// the default prng plugin, uses AES-128
var prng_aes = {};
var _prng_aes_output = new Array(4);
var _prng_aes_buffer = forge.util.createBuffer();
prng_aes.formatKey = function(key) {
  // convert the key into 32-bit integers
  var tmp = forge.util.createBuffer(key);
  key = new Array(4);
  key[0] = tmp.getInt32();
  key[1] = tmp.getInt32();
  key[2] = tmp.getInt32();
  key[3] = tmp.getInt32();

  // return the expanded key
  return forge.aes._expandKey(key, false);
};
prng_aes.formatSeed = function(seed) {
  // convert seed into 32-bit integers
  var tmp = forge.util.createBuffer(seed);
  seed = new Array(4);
  seed[0] = tmp.getInt32();
  seed[1] = tmp.getInt32();
  seed[2] = tmp.getInt32();
  seed[3] = tmp.getInt32();
  return seed;
};
prng_aes.cipher = function(key, seed) {
  forge.aes._updateBlock(key, seed, _prng_aes_output, false);
  _prng_aes_buffer.putInt32(_prng_aes_output[0]);
  _prng_aes_buffer.putInt32(_prng_aes_output[1]);
  _prng_aes_buffer.putInt32(_prng_aes_output[2]);
  _prng_aes_buffer.putInt32(_prng_aes_output[3]);
  return _prng_aes_buffer.getBytes();
};
prng_aes.increment = function(seed) {
  // FIXME: do we care about carry or signed issues?
  ++seed[3];
  return seed;
};
prng_aes.md = forge.md.sha256;

/**
 * Creates a new PRNG.
 */
function spawnPrng() {
  var ctx = forge.prng.create(prng_aes);

  /**
   * Gets random bytes. If a native secure crypto API is unavailable, this
   * method tries to make the bytes more unpredictable by drawing from data that
   * can be collected from the user of the browser, eg: mouse movement.
   *
   * If a callback is given, this method will be called asynchronously.
   *
   * @param count the number of random bytes to get.
   * @param [callback(err, bytes)] called once the operation completes.
   *
   * @return the random bytes in a string.
   */
  ctx.getBytes = function(count, callback) {
    return ctx.generate(count, callback);
  };

  /**
   * Gets random bytes asynchronously. If a native secure crypto API is
   * unavailable, this method tries to make the bytes more unpredictable by
   * drawing from data that can be collected from the user of the browser,
   * eg: mouse movement.
   *
   * @param count the number of random bytes to get.
   *
   * @return the random bytes in a string.
   */
  ctx.getBytesSync = function(count) {
    return ctx.generate(count);
  };

  return ctx;
}

// create default prng context
var _ctx = spawnPrng();

// add other sources of entropy only if window.crypto.getRandomValues is not
// available -- otherwise this source will be automatically used by the prng
var getRandomValues = null;
var globalScope = forge.util.globalScope;
var _crypto = globalScope.crypto || globalScope.msCrypto;
if(_crypto && _crypto.getRandomValues) {
  getRandomValues = function(arr) {
    return _crypto.getRandomValues(arr);
  };
}

if(forge.options.usePureJavaScript ||
  (!forge.util.isNodejs && !getRandomValues)) {
  // if this is a web worker, do not use weak entropy, instead register to
  // receive strong entropy asynchronously from the main thread
  if(typeof window === 'undefined' || window.document === undefined) {
    // FIXME:
  }

  // get load time entropy
  _ctx.collectInt(+new Date(), 32);

  // add some entropy from navigator object
  if(typeof(navigator) !== 'undefined') {
    var _navBytes = '';
    for(var key in navigator) {
      try {
        if(typeof(navigator[key]) == 'string') {
          _navBytes += navigator[key];
        }
      } catch(e) {
        /* Some navigator keys might not be accessible, e.g. the geolocation
          attribute throws an exception if touched in Mozilla chrome://
          context.

          Silently ignore this and just don't use this as a source of
          entropy. */
      }
    }
    _ctx.collect(_navBytes);
    _navBytes = null;
  }

  // add mouse and keyboard collectors if jquery is available
  if(jQuery) {
    // set up mouse entropy capture
    jQuery().mousemove(function(e) {
      // add mouse coords
      _ctx.collectInt(e.clientX, 16);
      _ctx.collectInt(e.clientY, 16);
    });

    // set up keyboard entropy capture
    jQuery().keypress(function(e) {
      _ctx.collectInt(e.charCode, 8);
    });
  }
}

/* Random API */
if(!forge.random) {
  forge.random = _ctx;
} else {
  // extend forge.random with _ctx
  for(var key in _ctx) {
    forge.random[key] = _ctx[key];
  }
}

// expose spawn PRNG
forge.random.createInstance = spawnPrng;

module.exports = forge.random;

})(typeof(jQuery) !== 'undefined' ? jQuery : null);

})();
/**
 * RC2 implementation.
 *
 * @author Stefan Siegl
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * Information on the RC2 cipher is available from RFC #2268,
 * http://www.ietf.org/rfc/rfc2268.txt
 */
var forge = require('./forge');
require('./util');

var piTable = [
  0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,
  0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,
  0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,
  0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,
  0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,
  0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,
  0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,
  0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,
  0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,
  0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,
  0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,
  0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,
  0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,
  0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,
  0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,
  0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad
];

var s = [1, 2, 3, 5];

/**
 * Rotate a word left by given number of bits.
 *
 * Bits that are shifted out on the left are put back in on the right
 * hand side.
 *
 * @param word The word to shift left.
 * @param bits The number of bits to shift by.
 * @return The rotated word.
 */
var rol = function(word, bits) {
  return ((word << bits) & 0xffff) | ((word & 0xffff) >> (16 - bits));
};

/**
 * Rotate a word right by given number of bits.
 *
 * Bits that are shifted out on the right are put back in on the left
 * hand side.
 *
 * @param word The word to shift right.
 * @param bits The number of bits to shift by.
 * @return The rotated word.
 */
var ror = function(word, bits) {
  return ((word & 0xffff) >> bits) | ((word << (16 - bits)) & 0xffff);
};

/* RC2 API */
module.exports = forge.rc2 = forge.rc2 || {};

/**
 * Perform RC2 key expansion as per RFC #2268, section 2.
 *
 * @param key variable-length user key (between 1 and 128 bytes)
 * @param effKeyBits number of effective key bits (default: 128)
 * @return the expanded RC2 key (ByteBuffer of 128 bytes)
 */
forge.rc2.expandKey = function(key, effKeyBits) {
  if(typeof key === 'string') {
    key = forge.util.createBuffer(key);
  }
  effKeyBits = effKeyBits || 128;

  /* introduce variables that match the names used in RFC #2268 */
  var L = key;
  var T = key.length();
  var T1 = effKeyBits;
  var T8 = Math.ceil(T1 / 8);
  var TM = 0xff >> (T1 & 0x07);
  var i;

  for(i = T; i < 128; i++) {
    L.putByte(piTable[(L.at(i - 1) + L.at(i - T)) & 0xff]);
  }

  L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);

  for(i = 127 - T8; i >= 0; i--) {
    L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);
  }

  return L;
};

/**
 * Creates a RC2 cipher object.
 *
 * @param key the symmetric key to use (as base for key generation).
 * @param bits the number of effective key bits.
 * @param encrypt false for decryption, true for encryption.
 *
 * @return the cipher.
 */
var createCipher = function(key, bits, encrypt) {
  var _finish = false, _input = null, _output = null, _iv = null;
  var mixRound, mashRound;
  var i, j, K = [];

  /* Expand key and fill into K[] Array */
  key = forge.rc2.expandKey(key, bits);
  for(i = 0; i < 64; i++) {
    K.push(key.getInt16Le());
  }

  if(encrypt) {
    /**
     * Perform one mixing round "in place".
     *
     * @param R Array of four words to perform mixing on.
     */
    mixRound = function(R) {
      for(i = 0; i < 4; i++) {
        R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +
          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);
        R[i] = rol(R[i], s[i]);
        j++;
      }
    };

    /**
     * Perform one mashing round "in place".
     *
     * @param R Array of four words to perform mashing on.
     */
    mashRound = function(R) {
      for(i = 0; i < 4; i++) {
        R[i] += K[R[(i + 3) % 4] & 63];
      }
    };
  } else {
    /**
     * Perform one r-mixing round "in place".
     *
     * @param R Array of four words to perform mixing on.
     */
    mixRound = function(R) {
      for(i = 3; i >= 0; i--) {
        R[i] = ror(R[i], s[i]);
        R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +
          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);
        j--;
      }
    };

    /**
     * Perform one r-mashing round "in place".
     *
     * @param R Array of four words to perform mashing on.
     */
    mashRound = function(R) {
      for(i = 3; i >= 0; i--) {
        R[i] -= K[R[(i + 3) % 4] & 63];
      }
    };
  }

  /**
   * Run the specified cipher execution plan.
   *
   * This function takes four words from the input buffer, applies the IV on
   * it (if requested) and runs the provided execution plan.
   *
   * The plan must be put together in form of a array of arrays.  Where the
   * outer one is simply a list of steps to perform and the inner one needs
   * to have two elements: the first one telling how many rounds to perform,
   * the second one telling what to do (i.e. the function to call).
   *
   * @param {Array} plan The plan to execute.
   */
  var runPlan = function(plan) {
    var R = [];

    /* Get data from input buffer and fill the four words into R */
    for(i = 0; i < 4; i++) {
      var val = _input.getInt16Le();

      if(_iv !== null) {
        if(encrypt) {
          /* We're encrypting, apply the IV first. */
          val ^= _iv.getInt16Le();
        } else {
          /* We're decryption, keep cipher text for next block. */
          _iv.putInt16Le(val);
        }
      }

      R.push(val & 0xffff);
    }

    /* Reset global "j" variable as per spec. */
    j = encrypt ? 0 : 63;

    /* Run execution plan. */
    for(var ptr = 0; ptr < plan.length; ptr++) {
      for(var ctr = 0; ctr < plan[ptr][0]; ctr++) {
        plan[ptr][1](R);
      }
    }

    /* Write back result to output buffer. */
    for(i = 0; i < 4; i++) {
      if(_iv !== null) {
        if(encrypt) {
          /* We're encrypting in CBC-mode, feed back encrypted bytes into
             IV buffer to carry it forward to next block. */
          _iv.putInt16Le(R[i]);
        } else {
          R[i] ^= _iv.getInt16Le();
        }
      }

      _output.putInt16Le(R[i]);
    }
  };

  /* Create cipher object */
  var cipher = null;
  cipher = {
    /**
     * Starts or restarts the encryption or decryption process, whichever
     * was previously configured.
     *
     * To use the cipher in CBC mode, iv may be given either as a string
     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.
     *
     * @param iv the initialization vector to use, null for ECB mode.
     * @param output the output the buffer to write to, null to create one.
     */
    start: function(iv, output) {
      if(iv) {
        /* CBC mode */
        if(typeof iv === 'string') {
          iv = forge.util.createBuffer(iv);
        }
      }

      _finish = false;
      _input = forge.util.createBuffer();
      _output = output || new forge.util.createBuffer();
      _iv = iv;

      cipher.output = _output;
    },

    /**
     * Updates the next block.
     *
     * @param input the buffer to read from.
     */
    update: function(input) {
      if(!_finish) {
        // not finishing, so fill the input buffer with more input
        _input.putBuffer(input);
      }

      while(_input.length() >= 8) {
        runPlan([
            [ 5, mixRound ],
            [ 1, mashRound ],
            [ 6, mixRound ],
            [ 1, mashRound ],
            [ 5, mixRound ]
          ]);
      }
    },

    /**
     * Finishes encrypting or decrypting.
     *
     * @param pad a padding function to use, null for PKCS#7 padding,
     *           signature(blockSize, buffer, decrypt).
     *
     * @return true if successful, false on error.
     */
    finish: function(pad) {
      var rval = true;

      if(encrypt) {
        if(pad) {
          rval = pad(8, _input, !encrypt);
        } else {
          // add PKCS#7 padding to block (each pad byte is the
          // value of the number of pad bytes)
          var padding = (_input.length() === 8) ? 8 : (8 - _input.length());
          _input.fillWithByte(padding, padding);
        }
      }

      if(rval) {
        // do final update
        _finish = true;
        cipher.update();
      }

      if(!encrypt) {
        // check for error: input data not a multiple of block size
        rval = (_input.length() === 0);
        if(rval) {
          if(pad) {
            rval = pad(8, _output, !encrypt);
          } else {
            // ensure padding byte count is valid
            var len = _output.length();
            var count = _output.at(len - 1);

            if(count > len) {
              rval = false;
            } else {
              // trim off padding bytes
              _output.truncate(count);
            }
          }
        }
      }

      return rval;
    }
  };

  return cipher;
};

/**
 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
 * given symmetric key. The output will be stored in the 'output' member
 * of the returned cipher.
 *
 * The key and iv may be given as a string of bytes or a byte buffer.
 * The cipher is initialized to use 128 effective key bits.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 *
 * @return the cipher.
 */
forge.rc2.startEncrypting = function(key, iv, output) {
  var cipher = forge.rc2.createEncryptionCipher(key, 128);
  cipher.start(iv, output);
  return cipher;
};

/**
 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
 * given symmetric key.
 *
 * The key may be given as a string of bytes or a byte buffer.
 *
 * To start encrypting call start() on the cipher with an iv and optional
 * output buffer.
 *
 * @param key the symmetric key to use.
 *
 * @return the cipher.
 */
forge.rc2.createEncryptionCipher = function(key, bits) {
  return createCipher(key, bits, true);
};

/**
 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
 * given symmetric key. The output will be stored in the 'output' member
 * of the returned cipher.
 *
 * The key and iv may be given as a string of bytes or a byte buffer.
 * The cipher is initialized to use 128 effective key bits.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 *
 * @return the cipher.
 */
forge.rc2.startDecrypting = function(key, iv, output) {
  var cipher = forge.rc2.createDecryptionCipher(key, 128);
  cipher.start(iv, output);
  return cipher;
};

/**
 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
 * given symmetric key.
 *
 * The key may be given as a string of bytes or a byte buffer.
 *
 * To start decrypting call start() on the cipher with an iv and optional
 * output buffer.
 *
 * @param key the symmetric key to use.
 *
 * @return the cipher.
 */
forge.rc2.createDecryptionCipher = function(key, bits) {
  return createCipher(key, bits, false);
};
/**
 * Javascript implementation of basic RSA algorithms.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 *
 * The only algorithm currently supported for PKI is RSA.
 *
 * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo
 * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier
 * and a subjectPublicKey of type bit string.
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of RSA, there aren't any.
 *
 * SubjectPublicKeyInfo ::= SEQUENCE {
 *   algorithm AlgorithmIdentifier,
 *   subjectPublicKey BIT STRING
 * }
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *   algorithm OBJECT IDENTIFIER,
 *   parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * For an RSA public key, the subjectPublicKey is:
 *
 * RSAPublicKey ::= SEQUENCE {
 *   modulus            INTEGER,    -- n
 *   publicExponent     INTEGER     -- e
 * }
 *
 * PrivateKeyInfo ::= SEQUENCE {
 *   version                   Version,
 *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
 *   privateKey                PrivateKey,
 *   attributes           [0]  IMPLICIT Attributes OPTIONAL
 * }
 *
 * Version ::= INTEGER
 * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
 * PrivateKey ::= OCTET STRING
 * Attributes ::= SET OF Attribute
 *
 * An RSA private key as the following structure:
 *
 * RSAPrivateKey ::= SEQUENCE {
 *   version Version,
 *   modulus INTEGER, -- n
 *   publicExponent INTEGER, -- e
 *   privateExponent INTEGER, -- d
 *   prime1 INTEGER, -- p
 *   prime2 INTEGER, -- q
 *   exponent1 INTEGER, -- d mod (p-1)
 *   exponent2 INTEGER, -- d mod (q-1)
 *   coefficient INTEGER -- (inverse of q) mod p
 * }
 *
 * Version ::= INTEGER
 *
 * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1
 */
var forge = require('./forge');
require('./asn1');
require('./jsbn');
require('./oids');
require('./pkcs1');
require('./prime');
require('./random');
require('./util');

if(typeof BigInteger === 'undefined') {
  var BigInteger = forge.jsbn.BigInteger;
}

var _crypto = forge.util.isNodejs ? require('crypto') : null;

// shortcut for asn.1 API
var asn1 = forge.asn1;

// shortcut for util API
var util = forge.util;

/*
 * RSA encryption and decryption, see RFC 2313.
 */
forge.pki = forge.pki || {};
module.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};
var pki = forge.pki;

// for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];

// validator for a PrivateKeyInfo structure
var privateKeyValidator = {
  // PrivateKeyInfo
  name: 'PrivateKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    // Version (INTEGER)
    name: 'PrivateKeyInfo.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyVersion'
  }, {
    // privateKeyAlgorithm
    name: 'PrivateKeyInfo.privateKeyAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'privateKeyOid'
    }]
  }, {
    // PrivateKey
    name: 'PrivateKeyInfo',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'privateKey'
  }]
};

// validator for an RSA private key
var rsaPrivateKeyValidator = {
  // RSAPrivateKey
  name: 'RSAPrivateKey',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    // Version (INTEGER)
    name: 'RSAPrivateKey.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyVersion'
  }, {
    // modulus (n)
    name: 'RSAPrivateKey.modulus',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyModulus'
  }, {
    // publicExponent (e)
    name: 'RSAPrivateKey.publicExponent',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPublicExponent'
  }, {
    // privateExponent (d)
    name: 'RSAPrivateKey.privateExponent',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPrivateExponent'
  }, {
    // prime1 (p)
    name: 'RSAPrivateKey.prime1',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPrime1'
  }, {
    // prime2 (q)
    name: 'RSAPrivateKey.prime2',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPrime2'
  }, {
    // exponent1 (d mod (p-1))
    name: 'RSAPrivateKey.exponent1',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyExponent1'
  }, {
    // exponent2 (d mod (q-1))
    name: 'RSAPrivateKey.exponent2',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyExponent2'
  }, {
    // coefficient ((inverse of q) mod p)
    name: 'RSAPrivateKey.coefficient',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyCoefficient'
  }]
};

// validator for an RSA public key
var rsaPublicKeyValidator = {
  // RSAPublicKey
  name: 'RSAPublicKey',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    // modulus (n)
    name: 'RSAPublicKey.modulus',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'publicKeyModulus'
  }, {
    // publicExponent (e)
    name: 'RSAPublicKey.exponent',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'publicKeyExponent'
  }]
};

// validator for an SubjectPublicKeyInfo structure
// Note: Currently only works with an RSA public key
var publicKeyValidator = forge.pki.rsa.publicKeyValidator = {
  name: 'SubjectPublicKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  captureAsn1: 'subjectPublicKeyInfo',
  value: [{
    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'publicKeyOid'
    }]
  }, {
    // subjectPublicKey
    name: 'SubjectPublicKeyInfo.subjectPublicKey',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.BITSTRING,
    constructed: false,
    value: [{
      // RSAPublicKey
      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      optional: true,
      captureAsn1: 'rsaPublicKey'
    }]
  }]
};

// validator for a DigestInfo structure
var digestInfoValidator = {
  name: 'DigestInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'DigestInfo.DigestAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'DigestInfo.DigestAlgorithm.algorithmIdentifier',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'algorithmIdentifier'
    }, {
      // NULL paramters
      name: 'DigestInfo.DigestAlgorithm.parameters',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.NULL,
      // captured only to check existence for md2 and md5
      capture: 'parameters',
      optional: true,
      constructed: false
    }]
  }, {
    // digest
    name: 'DigestInfo.digest',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'digest'
  }]
};

/**
 * Wrap digest in DigestInfo object.
 *
 * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.
 *
 * DigestInfo ::= SEQUENCE {
 *   digestAlgorithm DigestAlgorithmIdentifier,
 *   digest Digest
 * }
 *
 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
 * Digest ::= OCTET STRING
 *
 * @param md the message digest object with the hash to sign.
 *
 * @return the encoded message (ready for RSA encrytion)
 */
var emsaPkcs1v15encode = function(md) {
  // get the oid for the algorithm
  var oid;
  if(md.algorithm in pki.oids) {
    oid = pki.oids[md.algorithm];
  } else {
    var error = new Error('Unknown message digest algorithm.');
    error.algorithm = md.algorithm;
    throw error;
  }
  var oidBytes = asn1.oidToDer(oid).getBytes();

  // create the digest info
  var digestInfo = asn1.create(
    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
  var digestAlgorithm = asn1.create(
    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
  digestAlgorithm.value.push(asn1.create(
    asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes));
  digestAlgorithm.value.push(asn1.create(
    asn1.Class.UNIVERSAL, asn1.Type.NULL, false, ''));
  var digest = asn1.create(
    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING,
    false, md.digest().getBytes());
  digestInfo.value.push(digestAlgorithm);
  digestInfo.value.push(digest);

  // encode digest info
  return asn1.toDer(digestInfo).getBytes();
};

/**
 * Performs x^c mod n (RSA encryption or decryption operation).
 *
 * @param x the number to raise and mod.
 * @param key the key to use.
 * @param pub true if the key is public, false if private.
 *
 * @return the result of x^c mod n.
 */
var _modPow = function(x, key, pub) {
  if(pub) {
    return x.modPow(key.e, key.n);
  }

  if(!key.p || !key.q) {
    // allow calculation without CRT params (slow)
    return x.modPow(key.d, key.n);
  }

  // pre-compute dP, dQ, and qInv if necessary
  if(!key.dP) {
    key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));
  }
  if(!key.dQ) {
    key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));
  }
  if(!key.qInv) {
    key.qInv = key.q.modInverse(key.p);
  }

  /* Chinese remainder theorem (CRT) states:

    Suppose n1, n2, ..., nk are positive integers which are pairwise
    coprime (n1 and n2 have no common factors other than 1). For any
    integers x1, x2, ..., xk there exists an integer x solving the
    system of simultaneous congruences (where ~= means modularly
    congruent so a ~= b mod n means a mod n = b mod n):

    x ~= x1 mod n1
    x ~= x2 mod n2
    ...
    x ~= xk mod nk

    This system of congruences has a single simultaneous solution x
    between 0 and n - 1. Furthermore, each xk solution and x itself
    is congruent modulo the product n = n1*n2*...*nk.
    So x1 mod n = x2 mod n = xk mod n = x mod n.

    The single simultaneous solution x can be solved with the following
    equation:

    x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.

    Where x is less than n, xi = x mod ni.

    For RSA we are only concerned with k = 2. The modulus n = pq, where
    p and q are coprime. The RSA decryption algorithm is:

    y = x^d mod n

    Given the above:

    x1 = x^d mod p
    r1 = n/p = q
    s1 = q^-1 mod p
    x2 = x^d mod q
    r2 = n/q = p
    s2 = p^-1 mod q

    So y = (x1r1s1 + x2r2s2) mod n
         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n

    According to Fermat's Little Theorem, if the modulus P is prime,
    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.
    Since A is not divisible by P it follows that if:
    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:

    A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort
    to calculate). In order to calculate x^d mod p more quickly the
    exponent d mod (p - 1) is stored in the RSA private key (the same
    is done for x^d mod q). These values are referred to as dP and dQ
    respectively. Therefore we now have:

    y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n

    Since we'll be reducing x^dP by modulo p (same for q) we can also
    reduce x by p (and q respectively) before hand. Therefore, let

    xp = ((x mod p)^dP mod p), and
    xq = ((x mod q)^dQ mod q), yielding:

    y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n

    This can be further reduced to a simple algorithm that only
    requires 1 inverse (the q inverse is used) to be used and stored.
    The algorithm is called Garner's algorithm. If qInv is the
    inverse of q, we simply calculate:

    y = (qInv*(xp - xq) mod p) * q + xq

    However, there are two further complications. First, we need to
    ensure that xp > xq to prevent signed BigIntegers from being used
    so we add p until this is true (since we will be mod'ing with
    p anyway). Then, there is a known timing attack on algorithms
    using the CRT. To mitigate this risk, "cryptographic blinding"
    should be used. This requires simply generating a random number r
    between 0 and n-1 and its inverse and multiplying x by r^e before
    calculating y and then multiplying y by r^-1 afterwards. Note that
    r must be coprime with n (gcd(r, n) === 1) in order to have an
    inverse.
  */

  // cryptographic blinding
  var r;
  do {
    r = new BigInteger(
      forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)),
      16);
  } while(r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));
  x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);

  // calculate xp and xq
  var xp = x.mod(key.p).modPow(key.dP, key.p);
  var xq = x.mod(key.q).modPow(key.dQ, key.q);

  // xp must be larger than xq to avoid signed bit usage
  while(xp.compareTo(xq) < 0) {
    xp = xp.add(key.p);
  }

  // do last step
  var y = xp.subtract(xq)
    .multiply(key.qInv).mod(key.p)
    .multiply(key.q).add(xq);

  // remove effect of random for cryptographic blinding
  y = y.multiply(r.modInverse(key.n)).mod(key.n);

  return y;
};

/**
 * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or
 * 'encrypt' on a public key object instead.
 *
 * Performs RSA encryption.
 *
 * The parameter bt controls whether to put padding bytes before the
 * message passed in. Set bt to either true or false to disable padding
 * completely (in order to handle e.g. EMSA-PSS encoding seperately before),
 * signaling whether the encryption operation is a public key operation
 * (i.e. encrypting data) or not, i.e. private key operation (data signing).
 *
 * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01
 * (for signing) or 0x02 (for encryption). The key operation mode (private
 * or public) is derived from this flag in that case).
 *
 * @param m the message to encrypt as a byte string.
 * @param key the RSA key to use.
 * @param bt for PKCS#1 v1.5 padding, the block type to use
 *   (0x01 for private key, 0x02 for public),
 *   to disable padding: true = public key, false = private key.
 *
 * @return the encrypted bytes as a string.
 */
pki.rsa.encrypt = function(m, key, bt) {
  var pub = bt;
  var eb;

  // get the length of the modulus in bytes
  var k = Math.ceil(key.n.bitLength() / 8);

  if(bt !== false && bt !== true) {
    // legacy, default to PKCS#1 v1.5 padding
    pub = (bt === 0x02);
    eb = _encodePkcs1_v1_5(m, key, bt);
  } else {
    eb = forge.util.createBuffer();
    eb.putBytes(m);
  }

  // load encryption block as big integer 'x'
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
  var x = new BigInteger(eb.toHex(), 16);

  // do RSA encryption
  var y = _modPow(x, key, pub);

  // convert y into the encrypted data byte string, if y is shorter in
  // bytes than k, then prepend zero bytes to fill up ed
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
  var yhex = y.toString(16);
  var ed = forge.util.createBuffer();
  var zeros = k - Math.ceil(yhex.length / 2);
  while(zeros > 0) {
    ed.putByte(0x00);
    --zeros;
  }
  ed.putBytes(forge.util.hexToBytes(yhex));
  return ed.getBytes();
};

/**
 * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or
 * 'verify' on a public key object instead.
 *
 * Performs RSA decryption.
 *
 * The parameter ml controls whether to apply PKCS#1 v1.5 padding
 * or not.  Set ml = false to disable padding removal completely
 * (in order to handle e.g. EMSA-PSS later on) and simply pass back
 * the RSA encryption block.
 *
 * @param ed the encrypted data to decrypt in as a byte string.
 * @param key the RSA key to use.
 * @param pub true for a public key operation, false for private.
 * @param ml the message length, if known, false to disable padding.
 *
 * @return the decrypted message as a byte string.
 */
pki.rsa.decrypt = function(ed, key, pub, ml) {
  // get the length of the modulus in bytes
  var k = Math.ceil(key.n.bitLength() / 8);

  // error if the length of the encrypted data ED is not k
  if(ed.length !== k) {
    var error = new Error('Encrypted message length is invalid.');
    error.length = ed.length;
    error.expected = k;
    throw error;
  }

  // convert encrypted data into a big integer
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
  var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);

  // y must be less than the modulus or it wasn't the result of
  // a previous mod operation (encryption) using that modulus
  if(y.compareTo(key.n) >= 0) {
    throw new Error('Encrypted message is invalid.');
  }

  // do RSA decryption
  var x = _modPow(y, key, pub);

  // create the encryption block, if x is shorter in bytes than k, then
  // prepend zero bytes to fill up eb
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
  var xhex = x.toString(16);
  var eb = forge.util.createBuffer();
  var zeros = k - Math.ceil(xhex.length / 2);
  while(zeros > 0) {
    eb.putByte(0x00);
    --zeros;
  }
  eb.putBytes(forge.util.hexToBytes(xhex));

  if(ml !== false) {
    // legacy, default to PKCS#1 v1.5 padding
    return _decodePkcs1_v1_5(eb.getBytes(), key, pub);
  }

  // return message
  return eb.getBytes();
};

/**
 * Creates an RSA key-pair generation state object. It is used to allow
 * key-generation to be performed in steps. It also allows for a UI to
 * display progress updates.
 *
 * @param bits the size for the private key in bits, defaults to 2048.
 * @param e the public exponent to use, defaults to 65537 (0x10001).
 * @param [options] the options to use.
 *          prng a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync".
 *          algorithm the algorithm to use (default: 'PRIMEINC').
 *
 * @return the state object to use to generate the key-pair.
 */
pki.rsa.createKeyPairGenerationState = function(bits, e, options) {
  // TODO: migrate step-based prime generation code to forge.prime

  // set default bits
  if(typeof(bits) === 'string') {
    bits = parseInt(bits, 10);
  }
  bits = bits || 2048;

  // create prng with api that matches BigInteger secure random
  options = options || {};
  var prng = options.prng || forge.random;
  var rng = {
    // x is an array to fill with bytes
    nextBytes: function(x) {
      var b = prng.getBytesSync(x.length);
      for(var i = 0; i < x.length; ++i) {
        x[i] = b.charCodeAt(i);
      }
    }
  };

  var algorithm = options.algorithm || 'PRIMEINC';

  // create PRIMEINC algorithm state
  var rval;
  if(algorithm === 'PRIMEINC') {
    rval = {
      algorithm: algorithm,
      state: 0,
      bits: bits,
      rng: rng,
      eInt: e || 65537,
      e: new BigInteger(null),
      p: null,
      q: null,
      qBits: bits >> 1,
      pBits: bits - (bits >> 1),
      pqState: 0,
      num: null,
      keys: null
    };
    rval.e.fromInt(rval.eInt);
  } else {
    throw new Error('Invalid key generation algorithm: ' + algorithm);
  }

  return rval;
};

/**
 * Attempts to runs the key-generation algorithm for at most n seconds
 * (approximately) using the given state. When key-generation has completed,
 * the keys will be stored in state.keys.
 *
 * To use this function to update a UI while generating a key or to prevent
 * causing browser lockups/warnings, set "n" to a value other than 0. A
 * simple pattern for generating a key and showing a progress indicator is:
 *
 * var state = pki.rsa.createKeyPairGenerationState(2048);
 * var step = function() {
 *   // step key-generation, run algorithm for 100 ms, repeat
 *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {
 *     setTimeout(step, 1);
 *   } else {
 *     // key-generation complete
 *     // TODO: turn off progress indicator here
 *     // TODO: use the generated key-pair in "state.keys"
 *   }
 * };
 * // TODO: turn on progress indicator here
 * setTimeout(step, 0);
 *
 * @param state the state to use.
 * @param n the maximum number of milliseconds to run the algorithm for, 0
 *          to run the algorithm to completion.
 *
 * @return true if the key-generation completed, false if not.
 */
pki.rsa.stepKeyPairGenerationState = function(state, n) {
  // set default algorithm if not set
  if(!('algorithm' in state)) {
    state.algorithm = 'PRIMEINC';
  }

  // TODO: migrate step-based prime generation code to forge.prime
  // TODO: abstract as PRIMEINC algorithm

  // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)
  // with some minor optimizations and designed to run in steps

  // local state vars
  var THIRTY = new BigInteger(null);
  THIRTY.fromInt(30);
  var deltaIdx = 0;
  var op_or = function(x, y) {return x | y;};

  // keep stepping until time limit is reached or done
  var t1 = +new Date();
  var t2;
  var total = 0;
  while(state.keys === null && (n <= 0 || total < n)) {
    // generate p or q
    if(state.state === 0) {
      /* Note: All primes are of the form:

        30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i

        When we generate a random number, we always align it at 30k + 1. Each
        time the number is determined not to be prime we add to get to the
        next 'i', eg: if the number was at 30k + 1 we add 6. */
      var bits = (state.p === null) ? state.pBits : state.qBits;
      var bits1 = bits - 1;

      // get a random number
      if(state.pqState === 0) {
        state.num = new BigInteger(bits, state.rng);
        // force MSB set
        if(!state.num.testBit(bits1)) {
          state.num.bitwiseTo(
            BigInteger.ONE.shiftLeft(bits1), op_or, state.num);
        }
        // align number on 30k+1 boundary
        state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);
        deltaIdx = 0;

        ++state.pqState;
      } else if(state.pqState === 1) {
        // try to make the number a prime
        if(state.num.bitLength() > bits) {
          // overflow, try again
          state.pqState = 0;
          // do primality test
        } else if(state.num.isProbablePrime(
          _getMillerRabinTests(state.num.bitLength()))) {
          ++state.pqState;
        } else {
          // get next potential prime
          state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
        }
      } else if(state.pqState === 2) {
        // ensure number is coprime with e
        state.pqState =
          (state.num.subtract(BigInteger.ONE).gcd(state.e)
            .compareTo(BigInteger.ONE) === 0) ? 3 : 0;
      } else if(state.pqState === 3) {
        // store p or q
        state.pqState = 0;
        if(state.p === null) {
          state.p = state.num;
        } else {
          state.q = state.num;
        }

        // advance state if both p and q are ready
        if(state.p !== null && state.q !== null) {
          ++state.state;
        }
        state.num = null;
      }
    } else if(state.state === 1) {
      // ensure p is larger than q (swap them if not)
      if(state.p.compareTo(state.q) < 0) {
        state.num = state.p;
        state.p = state.q;
        state.q = state.num;
      }
      ++state.state;
    } else if(state.state === 2) {
      // compute phi: (p - 1)(q - 1) (Euler's totient function)
      state.p1 = state.p.subtract(BigInteger.ONE);
      state.q1 = state.q.subtract(BigInteger.ONE);
      state.phi = state.p1.multiply(state.q1);
      ++state.state;
    } else if(state.state === 3) {
      // ensure e and phi are coprime
      if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {
        // phi and e are coprime, advance
        ++state.state;
      } else {
        // phi and e aren't coprime, so generate a new p and q
        state.p = null;
        state.q = null;
        state.state = 0;
      }
    } else if(state.state === 4) {
      // create n, ensure n is has the right number of bits
      state.n = state.p.multiply(state.q);

      // ensure n is right number of bits
      if(state.n.bitLength() === state.bits) {
        // success, advance
        ++state.state;
      } else {
        // failed, get new q
        state.q = null;
        state.state = 0;
      }
    } else if(state.state === 5) {
      // set keys
      var d = state.e.modInverse(state.phi);
      state.keys = {
        privateKey: pki.rsa.setPrivateKey(
          state.n, state.e, d, state.p, state.q,
          d.mod(state.p1), d.mod(state.q1),
          state.q.modInverse(state.p)),
        publicKey: pki.rsa.setPublicKey(state.n, state.e)
      };
    }

    // update timing
    t2 = +new Date();
    total += t2 - t1;
    t1 = t2;
  }

  return state.keys !== null;
};

/**
 * Generates an RSA public-private key pair in a single call.
 *
 * To generate a key-pair in steps (to allow for progress updates and to
 * prevent blocking or warnings in slow browsers) then use the key-pair
 * generation state functions.
 *
 * To generate a key-pair asynchronously (either through web-workers, if
 * available, or by breaking up the work on the main thread), pass a
 * callback function.
 *
 * @param [bits] the size for the private key in bits, defaults to 2048.
 * @param [e] the public exponent to use, defaults to 65537.
 * @param [options] options for key-pair generation, if given then 'bits'
 *            and 'e' must *not* be given:
 *          bits the size for the private key in bits, (default: 2048).
 *          e the public exponent to use, (default: 65537 (0x10001)).
 *          workerScript the worker script URL.
 *          workers the number of web workers (if supported) to use,
 *            (default: 2).
 *          workLoad the size of the work load, ie: number of possible prime
 *            numbers for each web worker to check per work assignment,
 *            (default: 100).
 *          prng a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync". Disables use of native APIs.
 *          algorithm the algorithm to use (default: 'PRIMEINC').
 * @param [callback(err, keypair)] called once the operation completes.
 *
 * @return an object with privateKey and publicKey properties.
 */
pki.rsa.generateKeyPair = function(bits, e, options, callback) {
  // (bits), (options), (callback)
  if(arguments.length === 1) {
    if(typeof bits === 'object') {
      options = bits;
      bits = undefined;
    } else if(typeof bits === 'function') {
      callback = bits;
      bits = undefined;
    }
  } else if(arguments.length === 2) {
    // (bits, e), (bits, options), (bits, callback), (options, callback)
    if(typeof bits === 'number') {
      if(typeof e === 'function') {
        callback = e;
        e = undefined;
      } else if(typeof e !== 'number') {
        options = e;
        e = undefined;
      }
    } else {
      options = bits;
      callback = e;
      bits = undefined;
      e = undefined;
    }
  } else if(arguments.length === 3) {
    // (bits, e, options), (bits, e, callback), (bits, options, callback)
    if(typeof e === 'number') {
      if(typeof options === 'function') {
        callback = options;
        options = undefined;
      }
    } else {
      callback = options;
      options = e;
      e = undefined;
    }
  }
  options = options || {};
  if(bits === undefined) {
    bits = options.bits || 2048;
  }
  if(e === undefined) {
    e = options.e || 0x10001;
  }

  // use native code if permitted, available, and parameters are acceptable
  if(!forge.options.usePureJavaScript && !options.prng &&
    bits >= 256 && bits <= 16384 && (e === 0x10001 || e === 3)) {
    if(callback) {
      // try native async
      if(_detectNodeCrypto('generateKeyPair')) {
        return _crypto.generateKeyPair('rsa', {
          modulusLength: bits,
          publicExponent: e,
          publicKeyEncoding: {
            type: 'spki',
            format: 'pem'
          },
          privateKeyEncoding: {
            type: 'pkcs8',
            format: 'pem'
          }
        }, function(err, pub, priv) {
          if(err) {
            return callback(err);
          }
          callback(null, {
            privateKey: pki.privateKeyFromPem(priv),
            publicKey: pki.publicKeyFromPem(pub)
          });
        });
      }
      if(_detectSubtleCrypto('generateKey') &&
        _detectSubtleCrypto('exportKey')) {
        // use standard native generateKey
        return util.globalScope.crypto.subtle.generateKey({
          name: 'RSASSA-PKCS1-v1_5',
          modulusLength: bits,
          publicExponent: _intToUint8Array(e),
          hash: {name: 'SHA-256'}
        }, true /* key can be exported*/, ['sign', 'verify'])
        .then(function(pair) {
          return util.globalScope.crypto.subtle.exportKey(
            'pkcs8', pair.privateKey);
        // avoiding catch(function(err) {...}) to support IE <= 8
        }).then(undefined, function(err) {
          callback(err);
        }).then(function(pkcs8) {
          if(pkcs8) {
            var privateKey = pki.privateKeyFromAsn1(
              asn1.fromDer(forge.util.createBuffer(pkcs8)));
            callback(null, {
              privateKey: privateKey,
              publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
            });
          }
        });
      }
      if(_detectSubtleMsCrypto('generateKey') &&
        _detectSubtleMsCrypto('exportKey')) {
        var genOp = util.globalScope.msCrypto.subtle.generateKey({
          name: 'RSASSA-PKCS1-v1_5',
          modulusLength: bits,
          publicExponent: _intToUint8Array(e),
          hash: {name: 'SHA-256'}
        }, true /* key can be exported*/, ['sign', 'verify']);
        genOp.oncomplete = function(e) {
          var pair = e.target.result;
          var exportOp = util.globalScope.msCrypto.subtle.exportKey(
            'pkcs8', pair.privateKey);
          exportOp.oncomplete = function(e) {
            var pkcs8 = e.target.result;
            var privateKey = pki.privateKeyFromAsn1(
              asn1.fromDer(forge.util.createBuffer(pkcs8)));
            callback(null, {
              privateKey: privateKey,
              publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
            });
          };
          exportOp.onerror = function(err) {
            callback(err);
          };
        };
        genOp.onerror = function(err) {
          callback(err);
        };
        return;
      }
    } else {
      // try native sync
      if(_detectNodeCrypto('generateKeyPairSync')) {
        var keypair = _crypto.generateKeyPairSync('rsa', {
          modulusLength: bits,
          publicExponent: e,
          publicKeyEncoding: {
            type: 'spki',
            format: 'pem'
          },
          privateKeyEncoding: {
            type: 'pkcs8',
            format: 'pem'
          }
        });
        return {
          privateKey: pki.privateKeyFromPem(keypair.privateKey),
          publicKey: pki.publicKeyFromPem(keypair.publicKey)
        };
      }
    }
  }

  // use JavaScript implementation
  var state = pki.rsa.createKeyPairGenerationState(bits, e, options);
  if(!callback) {
    pki.rsa.stepKeyPairGenerationState(state, 0);
    return state.keys;
  }
  _generateKeyPair(state, options, callback);
};

/**
 * Sets an RSA public key from BigIntegers modulus and exponent.
 *
 * @param n the modulus.
 * @param e the exponent.
 *
 * @return the public key.
 */
pki.setRsaPublicKey = pki.rsa.setPublicKey = function(n, e) {
  var key = {
    n: n,
    e: e
  };

  /**
   * Encrypts the given data with this public key. Newer applications
   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for
   * legacy applications.
   *
   * @param data the byte string to encrypt.
   * @param scheme the encryption scheme to use:
   *          'RSAES-PKCS1-V1_5' (default),
   *          'RSA-OAEP',
   *          'RAW', 'NONE', or null to perform raw RSA encryption,
   *          an object with an 'encode' property set to a function
   *          with the signature 'function(data, key)' that returns
   *          a binary-encoded string representing the encoded data.
   * @param schemeOptions any scheme-specific options.
   *
   * @return the encrypted byte string.
   */
  key.encrypt = function(data, scheme, schemeOptions) {
    if(typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    } else if(scheme === undefined) {
      scheme = 'RSAES-PKCS1-V1_5';
    }

    if(scheme === 'RSAES-PKCS1-V1_5') {
      scheme = {
        encode: function(m, key, pub) {
          return _encodePkcs1_v1_5(m, key, 0x02).getBytes();
        }
      };
    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
      scheme = {
        encode: function(m, key) {
          return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);
        }
      };
    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
      scheme = {encode: function(e) {return e;}};
    } else if(typeof scheme === 'string') {
      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
    }

    // do scheme-based encoding then rsa encryption
    var e = scheme.encode(data, key, true);
    return pki.rsa.encrypt(e, key, true);
  };

  /**
   * Verifies the given signature against the given digest.
   *
   * PKCS#1 supports multiple (currently two) signature schemes:
   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
   *
   * By default this implementation uses the "old scheme", i.e.
   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the
   * signature is an OCTET STRING that holds a DigestInfo.
   *
   * DigestInfo ::= SEQUENCE {
   *   digestAlgorithm DigestAlgorithmIdentifier,
   *   digest Digest
   * }
   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
   * Digest ::= OCTET STRING
   *
   * To perform PSS signature verification, provide an instance
   * of Forge PSS object as the scheme parameter.
   *
   * @param digest the message digest hash to compare against the signature,
   *          as a binary-encoded string.
   * @param signature the signature to verify, as a binary-encoded string.
   * @param scheme signature verification scheme to use:
   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
   *          a Forge PSS object for RSASSA-PSS,
   *          'NONE' or null for none, DigestInfo will not be expected, but
   *            PKCS#1 v1.5 padding will still be used.
   * @param options optional verify options
   *          _parseAllDigestBytes testing flag to control parsing of all
   *            digest bytes. Unsupported and not for general usage.
   *            (default: true)
   *
   * @return true if the signature was verified, false if not.
   */
  key.verify = function(digest, signature, scheme, options) {
    if(typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    } else if(scheme === undefined) {
      scheme = 'RSASSA-PKCS1-V1_5';
    }
    if(options === undefined) {
      options = {
        _parseAllDigestBytes: true
      };
    }
    if(!('_parseAllDigestBytes' in options)) {
      options._parseAllDigestBytes = true;
    }

    if(scheme === 'RSASSA-PKCS1-V1_5') {
      scheme = {
        verify: function(digest, d) {
          // remove padding
          d = _decodePkcs1_v1_5(d, key, true);
          // d is ASN.1 BER-encoded DigestInfo
          var obj = asn1.fromDer(d, {
            parseAllBytes: options._parseAllDigestBytes
          });

          // validate DigestInfo
          var capture = {};
          var errors = [];
          if(!asn1.validate(obj, digestInfoValidator, capture, errors)) {
            var error = new Error(
              'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 ' +
              'DigestInfo value.');
            error.errors = errors;
            throw error;
          }
          // check hash algorithm identifier
          // see PKCS1-v1-5DigestAlgorithms in RFC 8017
          // FIXME: add support to vaidator for strict value choices
          var oid = asn1.derToOid(capture.algorithmIdentifier);
          if(!(oid === forge.oids.md2 ||
            oid === forge.oids.md5 ||
            oid === forge.oids.sha1 ||
            oid === forge.oids.sha224 ||
            oid === forge.oids.sha256 ||
            oid === forge.oids.sha384 ||
            oid === forge.oids.sha512 ||
            oid === forge.oids['sha512-224'] ||
            oid === forge.oids['sha512-256'])) {
            var error = new Error(
              'Unknown RSASSA-PKCS1-v1_5 DigestAlgorithm identifier.');
            error.oid = oid;
            throw error;
          }

          // special check for md2 and md5 that NULL parameters exist
          if(oid === forge.oids.md2 || oid === forge.oids.md5) {
            if(!('parameters' in capture)) {
              throw new Error(
                'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 ' +
                'DigestInfo value. ' +
                'Missing algorithm identifer NULL parameters.');
            }
          }

          // compare the given digest to the decrypted one
          return digest === capture.digest;
        }
      };
    } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
      scheme = {
        verify: function(digest, d) {
          // remove padding
          d = _decodePkcs1_v1_5(d, key, true);
          return digest === d;
        }
      };
    }

    // do rsa decryption w/o any decoding, then verify -- which does decoding
    var d = pki.rsa.decrypt(signature, key, true, false);
    return scheme.verify(digest, d, key.n.bitLength());
  };

  return key;
};

/**
 * Sets an RSA private key from BigIntegers modulus, exponent, primes,
 * prime exponents, and modular multiplicative inverse.
 *
 * @param n the modulus.
 * @param e the public exponent.
 * @param d the private exponent ((inverse of e) mod n).
 * @param p the first prime.
 * @param q the second prime.
 * @param dP exponent1 (d mod (p-1)).
 * @param dQ exponent2 (d mod (q-1)).
 * @param qInv ((inverse of q) mod p)
 *
 * @return the private key.
 */
pki.setRsaPrivateKey = pki.rsa.setPrivateKey = function(
  n, e, d, p, q, dP, dQ, qInv) {
  var key = {
    n: n,
    e: e,
    d: d,
    p: p,
    q: q,
    dP: dP,
    dQ: dQ,
    qInv: qInv
  };

  /**
   * Decrypts the given data with this private key. The decryption scheme
   * must match the one used to encrypt the data.
   *
   * @param data the byte string to decrypt.
   * @param scheme the decryption scheme to use:
   *          'RSAES-PKCS1-V1_5' (default),
   *          'RSA-OAEP',
   *          'RAW', 'NONE', or null to perform raw RSA decryption.
   * @param schemeOptions any scheme-specific options.
   *
   * @return the decrypted byte string.
   */
  key.decrypt = function(data, scheme, schemeOptions) {
    if(typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    } else if(scheme === undefined) {
      scheme = 'RSAES-PKCS1-V1_5';
    }

    // do rsa decryption w/o any decoding
    var d = pki.rsa.decrypt(data, key, false, false);

    if(scheme === 'RSAES-PKCS1-V1_5') {
      scheme = {decode: _decodePkcs1_v1_5};
    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
      scheme = {
        decode: function(d, key) {
          return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);
        }
      };
    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
      scheme = {decode: function(d) {return d;}};
    } else {
      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
    }

    // decode according to scheme
    return scheme.decode(d, key, false);
  };

  /**
   * Signs the given digest, producing a signature.
   *
   * PKCS#1 supports multiple (currently two) signature schemes:
   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
   *
   * By default this implementation uses the "old scheme", i.e.
   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide
   * an instance of Forge PSS object as the scheme parameter.
   *
   * @param md the message digest object with the hash to sign.
   * @param scheme the signature scheme to use:
   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
   *          a Forge PSS object for RSASSA-PSS,
   *          'NONE' or null for none, DigestInfo will not be used but
   *            PKCS#1 v1.5 padding will still be used.
   *
   * @return the signature as a byte string.
   */
  key.sign = function(md, scheme) {
    /* Note: The internal implementation of RSA operations is being
      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy
      code like the use of an encoding block identifier 'bt' will eventually
      be removed. */

    // private key operation
    var bt = false;

    if(typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    }

    if(scheme === undefined || scheme === 'RSASSA-PKCS1-V1_5') {
      scheme = {encode: emsaPkcs1v15encode};
      bt = 0x01;
    } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
      scheme = {encode: function() {return md;}};
      bt = 0x01;
    }

    // encode and then encrypt
    var d = scheme.encode(md, key.n.bitLength());
    return pki.rsa.encrypt(d, key, bt);
  };

  return key;
};

/**
 * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.
 *
 * @param rsaKey the ASN.1 RSAPrivateKey.
 *
 * @return the ASN.1 PrivateKeyInfo.
 */
pki.wrapRsaPrivateKey = function(rsaKey) {
  // PrivateKeyInfo
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // version (0)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      asn1.integerToDer(0).getBytes()),
    // privateKeyAlgorithm
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      asn1.create(
        asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
    ]),
    // PrivateKey
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
      asn1.toDer(rsaKey).getBytes())
  ]);
};

/**
 * Converts a private key from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a PrivateKeyInfo containing an
 *          RSAPrivateKey or an RSAPrivateKey.
 *
 * @return the private key.
 */
pki.privateKeyFromAsn1 = function(obj) {
  // get PrivateKeyInfo
  var capture = {};
  var errors = [];
  if(asn1.validate(obj, privateKeyValidator, capture, errors)) {
    obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));
  }

  // get RSAPrivateKey
  capture = {};
  errors = [];
  if(!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {
    var error = new Error('Cannot read private key. ' +
      'ASN.1 object does not contain an RSAPrivateKey.');
    error.errors = errors;
    throw error;
  }

  // Note: Version is currently ignored.
  // capture.privateKeyVersion
  // FIXME: inefficient, get a BigInteger that uses byte strings
  var n, e, d, p, q, dP, dQ, qInv;
  n = forge.util.createBuffer(capture.privateKeyModulus).toHex();
  e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();
  d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();
  p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();
  q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();
  dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();
  dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();
  qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();

  // set private key
  return pki.setRsaPrivateKey(
    new BigInteger(n, 16),
    new BigInteger(e, 16),
    new BigInteger(d, 16),
    new BigInteger(p, 16),
    new BigInteger(q, 16),
    new BigInteger(dP, 16),
    new BigInteger(dQ, 16),
    new BigInteger(qInv, 16));
};

/**
 * Converts a private key to an ASN.1 RSAPrivateKey.
 *
 * @param key the private key.
 *
 * @return the ASN.1 representation of an RSAPrivateKey.
 */
pki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function(key) {
  // RSAPrivateKey
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // version (0 = only 2 primes, 1 multiple primes)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      asn1.integerToDer(0).getBytes()),
    // modulus (n)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      _bnToBytes(key.n)),
    // publicExponent (e)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      _bnToBytes(key.e)),
    // privateExponent (d)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      _bnToBytes(key.d)),
    // privateKeyPrime1 (p)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      _bnToBytes(key.p)),
    // privateKeyPrime2 (q)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      _bnToBytes(key.q)),
    // privateKeyExponent1 (dP)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      _bnToBytes(key.dP)),
    // privateKeyExponent2 (dQ)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      _bnToBytes(key.dQ)),
    // coefficient (qInv)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      _bnToBytes(key.qInv))
  ]);
};

/**
 * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.
 *
 * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.
 *
 * @return the public key.
 */
pki.publicKeyFromAsn1 = function(obj) {
  // get SubjectPublicKeyInfo
  var capture = {};
  var errors = [];
  if(asn1.validate(obj, publicKeyValidator, capture, errors)) {
    // get oid
    var oid = asn1.derToOid(capture.publicKeyOid);
    if(oid !== pki.oids.rsaEncryption) {
      var error = new Error('Cannot read public key. Unknown OID.');
      error.oid = oid;
      throw error;
    }
    obj = capture.rsaPublicKey;
  }

  // get RSA params
  errors = [];
  if(!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {
    var error = new Error('Cannot read public key. ' +
      'ASN.1 object does not contain an RSAPublicKey.');
    error.errors = errors;
    throw error;
  }

  // FIXME: inefficient, get a BigInteger that uses byte strings
  var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();
  var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();

  // set public key
  return pki.setRsaPublicKey(
    new BigInteger(n, 16),
    new BigInteger(e, 16));
};

/**
 * Converts a public key to an ASN.1 SubjectPublicKeyInfo.
 *
 * @param key the public key.
 *
 * @return the asn1 representation of a SubjectPublicKeyInfo.
 */
pki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function(key) {
  // SubjectPublicKeyInfo
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // AlgorithmIdentifier
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // algorithm
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),
      // parameters (null)
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
    ]),
    // subjectPublicKey
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [
      pki.publicKeyToRSAPublicKey(key)
    ])
  ]);
};

/**
 * Converts a public key to an ASN.1 RSAPublicKey.
 *
 * @param key the public key.
 *
 * @return the asn1 representation of a RSAPublicKey.
 */
pki.publicKeyToRSAPublicKey = function(key) {
  // RSAPublicKey
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // modulus (n)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      _bnToBytes(key.n)),
    // publicExponent (e)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      _bnToBytes(key.e))
  ]);
};

/**
 * Encodes a message using PKCS#1 v1.5 padding.
 *
 * @param m the message to encode.
 * @param key the RSA key to use.
 * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02
 *          (for encryption).
 *
 * @return the padded byte buffer.
 */
function _encodePkcs1_v1_5(m, key, bt) {
  var eb = forge.util.createBuffer();

  // get the length of the modulus in bytes
  var k = Math.ceil(key.n.bitLength() / 8);

  /* use PKCS#1 v1.5 padding */
  if(m.length > (k - 11)) {
    var error = new Error('Message is too long for PKCS#1 v1.5 padding.');
    error.length = m.length;
    error.max = k - 11;
    throw error;
  }

  /* A block type BT, a padding string PS, and the data D shall be
    formatted into an octet string EB, the encryption block:

    EB = 00 || BT || PS || 00 || D

    The block type BT shall be a single octet indicating the structure of
    the encryption block. For this version of the document it shall have
    value 00, 01, or 02. For a private-key operation, the block type
    shall be 00 or 01. For a public-key operation, it shall be 02.

    The padding string PS shall consist of k-3-||D|| octets. For block
    type 00, the octets shall have value 00; for block type 01, they
    shall have value FF; and for block type 02, they shall be
    pseudorandomly generated and nonzero. This makes the length of the
    encryption block EB equal to k. */

  // build the encryption block
  eb.putByte(0x00);
  eb.putByte(bt);

  // create the padding
  var padNum = k - 3 - m.length;
  var padByte;
  // private key op
  if(bt === 0x00 || bt === 0x01) {
    padByte = (bt === 0x00) ? 0x00 : 0xFF;
    for(var i = 0; i < padNum; ++i) {
      eb.putByte(padByte);
    }
  } else {
    // public key op
    // pad with random non-zero values
    while(padNum > 0) {
      var numZeros = 0;
      var padBytes = forge.random.getBytes(padNum);
      for(var i = 0; i < padNum; ++i) {
        padByte = padBytes.charCodeAt(i);
        if(padByte === 0) {
          ++numZeros;
        } else {
          eb.putByte(padByte);
        }
      }
      padNum = numZeros;
    }
  }

  // zero followed by message
  eb.putByte(0x00);
  eb.putBytes(m);

  return eb;
}

/**
 * Decodes a message using PKCS#1 v1.5 padding.
 *
 * @param em the message to decode.
 * @param key the RSA key to use.
 * @param pub true if the key is a public key, false if it is private.
 * @param ml the message length, if specified.
 *
 * @return the decoded bytes.
 */
function _decodePkcs1_v1_5(em, key, pub, ml) {
  // get the length of the modulus in bytes
  var k = Math.ceil(key.n.bitLength() / 8);

  /* It is an error if any of the following conditions occurs:

    1. The encryption block EB cannot be parsed unambiguously.
    2. The padding string PS consists of fewer than eight octets
      or is inconsisent with the block type BT.
    3. The decryption process is a public-key operation and the block
      type BT is not 00 or 01, or the decryption process is a
      private-key operation and the block type is not 02.
   */

  // parse the encryption block
  var eb = forge.util.createBuffer(em);
  var first = eb.getByte();
  var bt = eb.getByte();
  if(first !== 0x00 ||
    (pub && bt !== 0x00 && bt !== 0x01) ||
    (!pub && bt != 0x02) ||
    (pub && bt === 0x00 && typeof(ml) === 'undefined')) {
    throw new Error('Encryption block is invalid.');
  }

  var padNum = 0;
  if(bt === 0x00) {
    // check all padding bytes for 0x00
    padNum = k - 3 - ml;
    for(var i = 0; i < padNum; ++i) {
      if(eb.getByte() !== 0x00) {
        throw new Error('Encryption block is invalid.');
      }
    }
  } else if(bt === 0x01) {
    // find the first byte that isn't 0xFF, should be after all padding
    padNum = 0;
    while(eb.length() > 1) {
      if(eb.getByte() !== 0xFF) {
        --eb.read;
        break;
      }
      ++padNum;
    }
  } else if(bt === 0x02) {
    // look for 0x00 byte
    padNum = 0;
    while(eb.length() > 1) {
      if(eb.getByte() === 0x00) {
        --eb.read;
        break;
      }
      ++padNum;
    }
  }

  // zero must be 0x00 and padNum must be (k - 3 - message length)
  var zero = eb.getByte();
  if(zero !== 0x00 || padNum !== (k - 3 - eb.length())) {
    throw new Error('Encryption block is invalid.');
  }

  return eb.getBytes();
}

/**
 * Runs the key-generation algorithm asynchronously, either in the background
 * via Web Workers, or using the main thread and setImmediate.
 *
 * @param state the key-pair generation state.
 * @param [options] options for key-pair generation:
 *          workerScript the worker script URL.
 *          workers the number of web workers (if supported) to use,
 *            (default: 2, -1 to use estimated cores minus one).
 *          workLoad the size of the work load, ie: number of possible prime
 *            numbers for each web worker to check per work assignment,
 *            (default: 100).
 * @param callback(err, keypair) called once the operation completes.
 */
function _generateKeyPair(state, options, callback) {
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};

  var opts = {
    algorithm: {
      name: options.algorithm || 'PRIMEINC',
      options: {
        workers: options.workers || 2,
        workLoad: options.workLoad || 100,
        workerScript: options.workerScript
      }
    }
  };
  if('prng' in options) {
    opts.prng = options.prng;
  }

  generate();

  function generate() {
    // find p and then q (done in series to simplify)
    getPrime(state.pBits, function(err, num) {
      if(err) {
        return callback(err);
      }
      state.p = num;
      if(state.q !== null) {
        return finish(err, state.q);
      }
      getPrime(state.qBits, finish);
    });
  }

  function getPrime(bits, callback) {
    forge.prime.generateProbablePrime(bits, opts, callback);
  }

  function finish(err, num) {
    if(err) {
      return callback(err);
    }

    // set q
    state.q = num;

    // ensure p is larger than q (swap them if not)
    if(state.p.compareTo(state.q) < 0) {
      var tmp = state.p;
      state.p = state.q;
      state.q = tmp;
    }

    // ensure p is coprime with e
    if(state.p.subtract(BigInteger.ONE).gcd(state.e)
      .compareTo(BigInteger.ONE) !== 0) {
      state.p = null;
      generate();
      return;
    }

    // ensure q is coprime with e
    if(state.q.subtract(BigInteger.ONE).gcd(state.e)
      .compareTo(BigInteger.ONE) !== 0) {
      state.q = null;
      getPrime(state.qBits, finish);
      return;
    }

    // compute phi: (p - 1)(q - 1) (Euler's totient function)
    state.p1 = state.p.subtract(BigInteger.ONE);
    state.q1 = state.q.subtract(BigInteger.ONE);
    state.phi = state.p1.multiply(state.q1);

    // ensure e and phi are coprime
    if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
      // phi and e aren't coprime, so generate a new p and q
      state.p = state.q = null;
      generate();
      return;
    }

    // create n, ensure n is has the right number of bits
    state.n = state.p.multiply(state.q);
    if(state.n.bitLength() !== state.bits) {
      // failed, get new q
      state.q = null;
      getPrime(state.qBits, finish);
      return;
    }

    // set keys
    var d = state.e.modInverse(state.phi);
    state.keys = {
      privateKey: pki.rsa.setPrivateKey(
        state.n, state.e, d, state.p, state.q,
        d.mod(state.p1), d.mod(state.q1),
        state.q.modInverse(state.p)),
      publicKey: pki.rsa.setPublicKey(state.n, state.e)
    };

    callback(null, state.keys);
  }
}

/**
 * Converts a positive BigInteger into 2's-complement big-endian bytes.
 *
 * @param b the big integer to convert.
 *
 * @return the bytes.
 */
function _bnToBytes(b) {
  // prepend 0x00 if first byte >= 0x80
  var hex = b.toString(16);
  if(hex[0] >= '8') {
    hex = '00' + hex;
  }
  var bytes = forge.util.hexToBytes(hex);

  // ensure integer is minimally-encoded
  if(bytes.length > 1 &&
    // leading 0x00 for positive integer
    ((bytes.charCodeAt(0) === 0 &&
    (bytes.charCodeAt(1) & 0x80) === 0) ||
    // leading 0xFF for negative integer
    (bytes.charCodeAt(0) === 0xFF &&
    (bytes.charCodeAt(1) & 0x80) === 0x80))) {
    return bytes.substr(1);
  }
  return bytes;
}

/**
 * Returns the required number of Miller-Rabin tests to generate a
 * prime with an error probability of (1/2)^80.
 *
 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
 *
 * @param bits the bit size.
 *
 * @return the required number of iterations.
 */
function _getMillerRabinTests(bits) {
  if(bits <= 100) return 27;
  if(bits <= 150) return 18;
  if(bits <= 200) return 15;
  if(bits <= 250) return 12;
  if(bits <= 300) return 9;
  if(bits <= 350) return 8;
  if(bits <= 400) return 7;
  if(bits <= 500) return 6;
  if(bits <= 600) return 5;
  if(bits <= 800) return 4;
  if(bits <= 1250) return 3;
  return 2;
}

/**
 * Performs feature detection on the Node crypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */
function _detectNodeCrypto(fn) {
  return forge.util.isNodejs && typeof _crypto[fn] === 'function';
}

/**
 * Performs feature detection on the SubtleCrypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */
function _detectSubtleCrypto(fn) {
  return (typeof util.globalScope !== 'undefined' &&
    typeof util.globalScope.crypto === 'object' &&
    typeof util.globalScope.crypto.subtle === 'object' &&
    typeof util.globalScope.crypto.subtle[fn] === 'function');
}

/**
 * Performs feature detection on the deprecated Microsoft Internet Explorer
 * outdated SubtleCrypto interface. This function should only be used after
 * checking for the modern, standard SubtleCrypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */
function _detectSubtleMsCrypto(fn) {
  return (typeof util.globalScope !== 'undefined' &&
    typeof util.globalScope.msCrypto === 'object' &&
    typeof util.globalScope.msCrypto.subtle === 'object' &&
    typeof util.globalScope.msCrypto.subtle[fn] === 'function');
}

function _intToUint8Array(x) {
  var bytes = forge.util.hexToBytes(x.toString(16));
  var buffer = new Uint8Array(bytes.length);
  for(var i = 0; i < bytes.length; ++i) {
    buffer[i] = bytes.charCodeAt(i);
  }
  return buffer;
}

function _privateKeyFromJwk(jwk) {
  if(jwk.kty !== 'RSA') {
    throw new Error(
      'Unsupported key algorithm "' + jwk.kty + '"; algorithm must be "RSA".');
  }
  return pki.setRsaPrivateKey(
    _base64ToBigInt(jwk.n),
    _base64ToBigInt(jwk.e),
    _base64ToBigInt(jwk.d),
    _base64ToBigInt(jwk.p),
    _base64ToBigInt(jwk.q),
    _base64ToBigInt(jwk.dp),
    _base64ToBigInt(jwk.dq),
    _base64ToBigInt(jwk.qi));
}

function _publicKeyFromJwk(jwk) {
  if(jwk.kty !== 'RSA') {
    throw new Error('Key algorithm must be "RSA".');
  }
  return pki.setRsaPublicKey(
    _base64ToBigInt(jwk.n),
    _base64ToBigInt(jwk.e));
}

function _base64ToBigInt(b64) {
  return new BigInteger(forge.util.bytesToHex(forge.util.decode64(b64)), 16);
}
/**
 * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./md');
require('./util');

var sha1 = module.exports = forge.sha1 = forge.sha1 || {};
forge.md.sha1 = forge.md.algorithms.sha1 = sha1;

/**
 * Creates a SHA-1 message digest object.
 *
 * @return a message digest object.
 */
sha1.create = function() {
  // do initialization as necessary
  if(!_initialized) {
    _init();
  }

  // SHA-1 state contains five 32-bit integers
  var _state = null;

  // input buffer
  var _input = forge.util.createBuffer();

  // used for word storage
  var _w = new Array(80);

  // message digest object
  var md = {
    algorithm: 'sha1',
    blockLength: 64,
    digestLength: 20,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };

  /**
   * Starts the digest.
   *
   * @return this digest object.
   */
  md.start = function() {
    // up to 56-bit message length for convenience
    md.messageLength = 0;

    // full message length (set md.messageLength64 for backwards-compatibility)
    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;
    for(var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }
    _input = forge.util.createBuffer();
    _state = {
      h0: 0x67452301,
      h1: 0xEFCDAB89,
      h2: 0x98BADCFE,
      h3: 0x10325476,
      h4: 0xC3D2E1F0
    };
    return md;
  };
  // start digest automatically for first time
  md.start();

  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
  md.update = function(msg, encoding) {
    if(encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    }

    // update message length
    var len = msg.length;
    md.messageLength += len;
    len = [(len / 0x100000000) >>> 0, len >>> 0];
    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = ((len[1] / 0x100000000) >>> 0);
    }

    // add bytes to input buffer
    _input.putBytes(msg);

    // process bytes
    _update(_state, _w, _input);

    // compact input buffer every 2K or if empty
    if(_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };

  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
  md.digest = function() {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-1 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */

    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes());

    // compute remaining size to be digested (include message length size)
    var remaining = (
      md.fullMessageLength[md.fullMessageLength.length - 1] +
      md.messageLengthSize);

    // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes
    var overflow = remaining & (md.blockLength - 1);
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

    // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int
    var next, carry;
    var bits = md.fullMessageLength[0] * 8;
    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = (next / 0x100000000) >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }
    finalBlock.putInt32(bits);

    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3,
      h4: _state.h4
    };
    _update(s2, _w, finalBlock);
    var rval = forge.util.createBuffer();
    rval.putInt32(s2.h0);
    rval.putInt32(s2.h1);
    rval.putInt32(s2.h2);
    rval.putInt32(s2.h3);
    rval.putInt32(s2.h4);
    return rval;
  };

  return md;
};

// sha-1 padding bytes not initialized yet
var _padding = null;
var _initialized = false;

/**
 * Initializes the constant tables.
 */
function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

  // now initialized
  _initialized = true;
}

/**
 * Updates a SHA-1 state with the given byte buffer.
 *
 * @param s the SHA-1 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t, a, b, c, d, e, f, i;
  var len = bytes.length();
  while(len >= 64) {
    // the w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 80 32-bit words according to SHA-1 algorithm
    // and for 32-79 using Max Locktyukhin's optimization

    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4;

    // round 1
    for(i = 0; i < 16; ++i) {
      t = bytes.getInt32();
      w[i] = t;
      f = d ^ (b & (c ^ d));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    for(; i < 20; ++i) {
      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
      t = (t << 1) | (t >>> 31);
      w[i] = t;
      f = d ^ (b & (c ^ d));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    // round 2
    for(; i < 32; ++i) {
      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
      t = (t << 1) | (t >>> 31);
      w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    for(; i < 40; ++i) {
      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
      t = (t << 2) | (t >>> 30);
      w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    // round 3
    for(; i < 60; ++i) {
      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
      t = (t << 2) | (t >>> 30);
      w[i] = t;
      f = (b & c) | (d & (b ^ c));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    // round 4
    for(; i < 80; ++i) {
      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
      t = (t << 2) | (t >>> 30);
      w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }

    // update hash state
    s.h0 = (s.h0 + a) | 0;
    s.h1 = (s.h1 + b) | 0;
    s.h2 = (s.h2 + c) | 0;
    s.h3 = (s.h3 + d) | 0;
    s.h4 = (s.h4 + e) | 0;

    len -= 64;
  }
}
/**
 * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.
 *
 * See FIPS 180-2 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./md');
require('./util');

var sha256 = module.exports = forge.sha256 = forge.sha256 || {};
forge.md.sha256 = forge.md.algorithms.sha256 = sha256;

/**
 * Creates a SHA-256 message digest object.
 *
 * @return a message digest object.
 */
sha256.create = function() {
  // do initialization as necessary
  if(!_initialized) {
    _init();
  }

  // SHA-256 state contains eight 32-bit integers
  var _state = null;

  // input buffer
  var _input = forge.util.createBuffer();

  // used for word storage
  var _w = new Array(64);

  // message digest object
  var md = {
    algorithm: 'sha256',
    blockLength: 64,
    digestLength: 32,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };

  /**
   * Starts the digest.
   *
   * @return this digest object.
   */
  md.start = function() {
    // up to 56-bit message length for convenience
    md.messageLength = 0;

    // full message length (set md.messageLength64 for backwards-compatibility)
    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;
    for(var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }
    _input = forge.util.createBuffer();
    _state = {
      h0: 0x6A09E667,
      h1: 0xBB67AE85,
      h2: 0x3C6EF372,
      h3: 0xA54FF53A,
      h4: 0x510E527F,
      h5: 0x9B05688C,
      h6: 0x1F83D9AB,
      h7: 0x5BE0CD19
    };
    return md;
  };
  // start digest automatically for first time
  md.start();

  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
  md.update = function(msg, encoding) {
    if(encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    }

    // update message length
    var len = msg.length;
    md.messageLength += len;
    len = [(len / 0x100000000) >>> 0, len >>> 0];
    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = ((len[1] / 0x100000000) >>> 0);
    }

    // add bytes to input buffer
    _input.putBytes(msg);

    // process bytes
    _update(_state, _w, _input);

    // compact input buffer every 2K or if empty
    if(_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };

  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
  md.digest = function() {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-256 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */

    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes());

    // compute remaining size to be digested (include message length size)
    var remaining = (
      md.fullMessageLength[md.fullMessageLength.length - 1] +
      md.messageLengthSize);

    // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes
    var overflow = remaining & (md.blockLength - 1);
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

    // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int
    var next, carry;
    var bits = md.fullMessageLength[0] * 8;
    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = (next / 0x100000000) >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }
    finalBlock.putInt32(bits);

    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3,
      h4: _state.h4,
      h5: _state.h5,
      h6: _state.h6,
      h7: _state.h7
    };
    _update(s2, _w, finalBlock);
    var rval = forge.util.createBuffer();
    rval.putInt32(s2.h0);
    rval.putInt32(s2.h1);
    rval.putInt32(s2.h2);
    rval.putInt32(s2.h3);
    rval.putInt32(s2.h4);
    rval.putInt32(s2.h5);
    rval.putInt32(s2.h6);
    rval.putInt32(s2.h7);
    return rval;
  };

  return md;
};

// sha-256 padding bytes not initialized yet
var _padding = null;
var _initialized = false;

// table of constants
var _k = null;

/**
 * Initializes the constant tables.
 */
function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

  // create K table for SHA-256
  _k = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

  // now initialized
  _initialized = true;
}

/**
 * Updates a SHA-256 state with the given byte buffer.
 *
 * @param s the SHA-256 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
  var len = bytes.length();
  while(len >= 64) {
    // the w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 64 32-bit words according to SHA-256
    for(i = 0; i < 16; ++i) {
      w[i] = bytes.getInt32();
    }
    for(; i < 64; ++i) {
      // XOR word 2 words ago rot right 17, rot right 19, shft right 10
      t1 = w[i - 2];
      t1 =
        ((t1 >>> 17) | (t1 << 15)) ^
        ((t1 >>> 19) | (t1 << 13)) ^
        (t1 >>> 10);
      // XOR word 15 words ago rot right 7, rot right 18, shft right 3
      t2 = w[i - 15];
      t2 =
        ((t2 >>> 7) | (t2 << 25)) ^
        ((t2 >>> 18) | (t2 << 14)) ^
        (t2 >>> 3);
      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32
      w[i] = (t1 + w[i - 7] + t2 + w[i - 16]) | 0;
    }

    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4;
    f = s.h5;
    g = s.h6;
    h = s.h7;

    // round function
    for(i = 0; i < 64; ++i) {
      // Sum1(e)
      s1 =
        ((e >>> 6) | (e << 26)) ^
        ((e >>> 11) | (e << 21)) ^
        ((e >>> 25) | (e << 7));
      // Ch(e, f, g) (optimized the same way as SHA-1)
      ch = g ^ (e & (f ^ g));
      // Sum0(a)
      s0 =
        ((a >>> 2) | (a << 30)) ^
        ((a >>> 13) | (a << 19)) ^
        ((a >>> 22) | (a << 10));
      // Maj(a, b, c) (optimized the same way as SHA-1)
      maj = (a & b) | (c & (a ^ b));

      // main algorithm
      t1 = h + s1 + ch + _k[i] + w[i];
      t2 = s0 + maj;
      h = g;
      g = f;
      f = e;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      // can't truncate with `| 0`
      e = (d + t1) >>> 0;
      d = c;
      c = b;
      b = a;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      // can't truncate with `| 0`
      a = (t1 + t2) >>> 0;
    }

    // update hash state
    s.h0 = (s.h0 + a) | 0;
    s.h1 = (s.h1 + b) | 0;
    s.h2 = (s.h2 + c) | 0;
    s.h3 = (s.h3 + d) | 0;
    s.h4 = (s.h4 + e) | 0;
    s.h5 = (s.h5 + f) | 0;
    s.h6 = (s.h6 + g) | 0;
    s.h7 = (s.h7 + h) | 0;
    len -= 64;
  }
}
/**
 * Secure Hash Algorithm with a 1024-bit block size implementation.
 *
 * This includes: SHA-512, SHA-384, SHA-512/224, and SHA-512/256. For
 * SHA-256 (block size 512 bits), see sha256.js.
 *
 * See FIPS 180-4 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2014-2015 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./md');
require('./util');

var sha512 = module.exports = forge.sha512 = forge.sha512 || {};

// SHA-512
forge.md.sha512 = forge.md.algorithms.sha512 = sha512;

// SHA-384
var sha384 = forge.sha384 = forge.sha512.sha384 = forge.sha512.sha384 || {};
sha384.create = function() {
  return sha512.create('SHA-384');
};
forge.md.sha384 = forge.md.algorithms.sha384 = sha384;

// SHA-512/256
forge.sha512.sha256 = forge.sha512.sha256 || {
  create: function() {
    return sha512.create('SHA-512/256');
  }
};
forge.md['sha512/256'] = forge.md.algorithms['sha512/256'] =
  forge.sha512.sha256;

// SHA-512/224
forge.sha512.sha224 = forge.sha512.sha224 || {
  create: function() {
    return sha512.create('SHA-512/224');
  }
};
forge.md['sha512/224'] = forge.md.algorithms['sha512/224'] =
  forge.sha512.sha224;

/**
 * Creates a SHA-2 message digest object.
 *
 * @param algorithm the algorithm to use (SHA-512, SHA-384, SHA-512/224,
 *          SHA-512/256).
 *
 * @return a message digest object.
 */
sha512.create = function(algorithm) {
  // do initialization as necessary
  if(!_initialized) {
    _init();
  }

  if(typeof algorithm === 'undefined') {
    algorithm = 'SHA-512';
  }

  if(!(algorithm in _states)) {
    throw new Error('Invalid SHA-512 algorithm: ' + algorithm);
  }

  // SHA-512 state contains eight 64-bit integers (each as two 32-bit ints)
  var _state = _states[algorithm];
  var _h = null;

  // input buffer
  var _input = forge.util.createBuffer();

  // used for 64-bit word storage
  var _w = new Array(80);
  for(var wi = 0; wi < 80; ++wi) {
    _w[wi] = new Array(2);
  }

  // determine digest length by algorithm name (default)
  var digestLength = 64;
  switch(algorithm) {
    case 'SHA-384':
      digestLength = 48;
      break;
    case 'SHA-512/256':
      digestLength = 32;
      break;
    case 'SHA-512/224':
      digestLength = 28;
      break;
  }

  // message digest object
  var md = {
    // SHA-512 => sha512
    algorithm: algorithm.replace('-', '').toLowerCase(),
    blockLength: 128,
    digestLength: digestLength,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 16
  };

  /**
   * Starts the digest.
   *
   * @return this digest object.
   */
  md.start = function() {
    // up to 56-bit message length for convenience
    md.messageLength = 0;

    // full message length (set md.messageLength128 for backwards-compatibility)
    md.fullMessageLength = md.messageLength128 = [];
    var int32s = md.messageLengthSize / 4;
    for(var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }
    _input = forge.util.createBuffer();
    _h = new Array(_state.length);
    for(var i = 0; i < _state.length; ++i) {
      _h[i] = _state[i].slice(0);
    }
    return md;
  };
  // start digest automatically for first time
  md.start();

  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
  md.update = function(msg, encoding) {
    if(encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    }

    // update message length
    var len = msg.length;
    md.messageLength += len;
    len = [(len / 0x100000000) >>> 0, len >>> 0];
    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = ((len[1] / 0x100000000) >>> 0);
    }

    // add bytes to input buffer
    _input.putBytes(msg);

    // process bytes
    _update(_h, _w, _input);

    // compact input buffer every 2K or if empty
    if(_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };

  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
  md.digest = function() {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-512 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 896 mod 1024. In other words,
    the data to be digested must be a multiple of 1024 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 16 bytes (128
    bits), that means that the last segment of the data must have 112 bytes
    (896 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 896 mod 1024 because
    1024 - 128 = 896.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 896 mod 1024, then 1024 padding bits must be added. */

    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes());

    // compute remaining size to be digested (include message length size)
    var remaining = (
      md.fullMessageLength[md.fullMessageLength.length - 1] +
      md.messageLengthSize);

    // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes
    var overflow = remaining & (md.blockLength - 1);
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

    // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int
    var next, carry;
    var bits = md.fullMessageLength[0] * 8;
    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = (next / 0x100000000) >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }
    finalBlock.putInt32(bits);

    var h = new Array(_h.length);
    for(var i = 0; i < _h.length; ++i) {
      h[i] = _h[i].slice(0);
    }
    _update(h, _w, finalBlock);
    var rval = forge.util.createBuffer();
    var hlen;
    if(algorithm === 'SHA-512') {
      hlen = h.length;
    } else if(algorithm === 'SHA-384') {
      hlen = h.length - 2;
    } else {
      hlen = h.length - 4;
    }
    for(var i = 0; i < hlen; ++i) {
      rval.putInt32(h[i][0]);
      if(i !== hlen - 1 || algorithm !== 'SHA-512/224') {
        rval.putInt32(h[i][1]);
      }
    }
    return rval;
  };

  return md;
};

// sha-512 padding bytes not initialized yet
var _padding = null;
var _initialized = false;

// table of constants
var _k = null;

// initial hash states
var _states = null;

/**
 * Initializes the constant tables.
 */
function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 128);

  // create K table for SHA-512
  _k = [
    [0x428a2f98, 0xd728ae22], [0x71374491, 0x23ef65cd],
    [0xb5c0fbcf, 0xec4d3b2f], [0xe9b5dba5, 0x8189dbbc],
    [0x3956c25b, 0xf348b538], [0x59f111f1, 0xb605d019],
    [0x923f82a4, 0xaf194f9b], [0xab1c5ed5, 0xda6d8118],
    [0xd807aa98, 0xa3030242], [0x12835b01, 0x45706fbe],
    [0x243185be, 0x4ee4b28c], [0x550c7dc3, 0xd5ffb4e2],
    [0x72be5d74, 0xf27b896f], [0x80deb1fe, 0x3b1696b1],
    [0x9bdc06a7, 0x25c71235], [0xc19bf174, 0xcf692694],
    [0xe49b69c1, 0x9ef14ad2], [0xefbe4786, 0x384f25e3],
    [0x0fc19dc6, 0x8b8cd5b5], [0x240ca1cc, 0x77ac9c65],
    [0x2de92c6f, 0x592b0275], [0x4a7484aa, 0x6ea6e483],
    [0x5cb0a9dc, 0xbd41fbd4], [0x76f988da, 0x831153b5],
    [0x983e5152, 0xee66dfab], [0xa831c66d, 0x2db43210],
    [0xb00327c8, 0x98fb213f], [0xbf597fc7, 0xbeef0ee4],
    [0xc6e00bf3, 0x3da88fc2], [0xd5a79147, 0x930aa725],
    [0x06ca6351, 0xe003826f], [0x14292967, 0x0a0e6e70],
    [0x27b70a85, 0x46d22ffc], [0x2e1b2138, 0x5c26c926],
    [0x4d2c6dfc, 0x5ac42aed], [0x53380d13, 0x9d95b3df],
    [0x650a7354, 0x8baf63de], [0x766a0abb, 0x3c77b2a8],
    [0x81c2c92e, 0x47edaee6], [0x92722c85, 0x1482353b],
    [0xa2bfe8a1, 0x4cf10364], [0xa81a664b, 0xbc423001],
    [0xc24b8b70, 0xd0f89791], [0xc76c51a3, 0x0654be30],
    [0xd192e819, 0xd6ef5218], [0xd6990624, 0x5565a910],
    [0xf40e3585, 0x5771202a], [0x106aa070, 0x32bbd1b8],
    [0x19a4c116, 0xb8d2d0c8], [0x1e376c08, 0x5141ab53],
    [0x2748774c, 0xdf8eeb99], [0x34b0bcb5, 0xe19b48a8],
    [0x391c0cb3, 0xc5c95a63], [0x4ed8aa4a, 0xe3418acb],
    [0x5b9cca4f, 0x7763e373], [0x682e6ff3, 0xd6b2b8a3],
    [0x748f82ee, 0x5defb2fc], [0x78a5636f, 0x43172f60],
    [0x84c87814, 0xa1f0ab72], [0x8cc70208, 0x1a6439ec],
    [0x90befffa, 0x23631e28], [0xa4506ceb, 0xde82bde9],
    [0xbef9a3f7, 0xb2c67915], [0xc67178f2, 0xe372532b],
    [0xca273ece, 0xea26619c], [0xd186b8c7, 0x21c0c207],
    [0xeada7dd6, 0xcde0eb1e], [0xf57d4f7f, 0xee6ed178],
    [0x06f067aa, 0x72176fba], [0x0a637dc5, 0xa2c898a6],
    [0x113f9804, 0xbef90dae], [0x1b710b35, 0x131c471b],
    [0x28db77f5, 0x23047d84], [0x32caab7b, 0x40c72493],
    [0x3c9ebe0a, 0x15c9bebc], [0x431d67c4, 0x9c100d4c],
    [0x4cc5d4be, 0xcb3e42b6], [0x597f299c, 0xfc657e2a],
    [0x5fcb6fab, 0x3ad6faec], [0x6c44198c, 0x4a475817]
  ];

  // initial hash states
  _states = {};
  _states['SHA-512'] = [
    [0x6a09e667, 0xf3bcc908],
    [0xbb67ae85, 0x84caa73b],
    [0x3c6ef372, 0xfe94f82b],
    [0xa54ff53a, 0x5f1d36f1],
    [0x510e527f, 0xade682d1],
    [0x9b05688c, 0x2b3e6c1f],
    [0x1f83d9ab, 0xfb41bd6b],
    [0x5be0cd19, 0x137e2179]
  ];
  _states['SHA-384'] = [
    [0xcbbb9d5d, 0xc1059ed8],
    [0x629a292a, 0x367cd507],
    [0x9159015a, 0x3070dd17],
    [0x152fecd8, 0xf70e5939],
    [0x67332667, 0xffc00b31],
    [0x8eb44a87, 0x68581511],
    [0xdb0c2e0d, 0x64f98fa7],
    [0x47b5481d, 0xbefa4fa4]
  ];
  _states['SHA-512/256'] = [
    [0x22312194, 0xFC2BF72C],
    [0x9F555FA3, 0xC84C64C2],
    [0x2393B86B, 0x6F53B151],
    [0x96387719, 0x5940EABD],
    [0x96283EE2, 0xA88EFFE3],
    [0xBE5E1E25, 0x53863992],
    [0x2B0199FC, 0x2C85B8AA],
    [0x0EB72DDC, 0x81C52CA2]
  ];
  _states['SHA-512/224'] = [
    [0x8C3D37C8, 0x19544DA2],
    [0x73E19966, 0x89DCD4D6],
    [0x1DFAB7AE, 0x32FF9C82],
    [0x679DD514, 0x582F9FCF],
    [0x0F6D2B69, 0x7BD44DA8],
    [0x77E36F73, 0x04C48942],
    [0x3F9D85A8, 0x6A1D36C8],
    [0x1112E6AD, 0x91D692A1]
  ];

  // now initialized
  _initialized = true;
}

/**
 * Updates a SHA-512 state with the given byte buffer.
 *
 * @param s the SHA-512 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
function _update(s, w, bytes) {
  // consume 512 bit (128 byte) chunks
  var t1_hi, t1_lo;
  var t2_hi, t2_lo;
  var s0_hi, s0_lo;
  var s1_hi, s1_lo;
  var ch_hi, ch_lo;
  var maj_hi, maj_lo;
  var a_hi, a_lo;
  var b_hi, b_lo;
  var c_hi, c_lo;
  var d_hi, d_lo;
  var e_hi, e_lo;
  var f_hi, f_lo;
  var g_hi, g_lo;
  var h_hi, h_lo;
  var i, hi, lo, w2, w7, w15, w16;
  var len = bytes.length();
  while(len >= 128) {
    // the w array will be populated with sixteen 64-bit big-endian words
    // and then extended into 64 64-bit words according to SHA-512
    for(i = 0; i < 16; ++i) {
      w[i][0] = bytes.getInt32() >>> 0;
      w[i][1] = bytes.getInt32() >>> 0;
    }
    for(; i < 80; ++i) {
      // for word 2 words ago: ROTR 19(x) ^ ROTR 61(x) ^ SHR 6(x)
      w2 = w[i - 2];
      hi = w2[0];
      lo = w2[1];

      // high bits
      t1_hi = (
        ((hi >>> 19) | (lo << 13)) ^ // ROTR 19
        ((lo >>> 29) | (hi << 3)) ^ // ROTR 61/(swap + ROTR 29)
        (hi >>> 6)) >>> 0; // SHR 6
      // low bits
      t1_lo = (
        ((hi << 13) | (lo >>> 19)) ^ // ROTR 19
        ((lo << 3) | (hi >>> 29)) ^ // ROTR 61/(swap + ROTR 29)
        ((hi << 26) | (lo >>> 6))) >>> 0; // SHR 6

      // for word 15 words ago: ROTR 1(x) ^ ROTR 8(x) ^ SHR 7(x)
      w15 = w[i - 15];
      hi = w15[0];
      lo = w15[1];

      // high bits
      t2_hi = (
        ((hi >>> 1) | (lo << 31)) ^ // ROTR 1
        ((hi >>> 8) | (lo << 24)) ^ // ROTR 8
        (hi >>> 7)) >>> 0; // SHR 7
      // low bits
      t2_lo = (
        ((hi << 31) | (lo >>> 1)) ^ // ROTR 1
        ((hi << 24) | (lo >>> 8)) ^ // ROTR 8
        ((hi << 25) | (lo >>> 7))) >>> 0; // SHR 7

      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^64 (carry lo overflow)
      w7 = w[i - 7];
      w16 = w[i - 16];
      lo = (t1_lo + w7[1] + t2_lo + w16[1]);
      w[i][0] = (t1_hi + w7[0] + t2_hi + w16[0] +
        ((lo / 0x100000000) >>> 0)) >>> 0;
      w[i][1] = lo >>> 0;
    }

    // initialize hash value for this chunk
    a_hi = s[0][0];
    a_lo = s[0][1];
    b_hi = s[1][0];
    b_lo = s[1][1];
    c_hi = s[2][0];
    c_lo = s[2][1];
    d_hi = s[3][0];
    d_lo = s[3][1];
    e_hi = s[4][0];
    e_lo = s[4][1];
    f_hi = s[5][0];
    f_lo = s[5][1];
    g_hi = s[6][0];
    g_lo = s[6][1];
    h_hi = s[7][0];
    h_lo = s[7][1];

    // round function
    for(i = 0; i < 80; ++i) {
      // Sum1(e) = ROTR 14(e) ^ ROTR 18(e) ^ ROTR 41(e)
      s1_hi = (
        ((e_hi >>> 14) | (e_lo << 18)) ^ // ROTR 14
        ((e_hi >>> 18) | (e_lo << 14)) ^ // ROTR 18
        ((e_lo >>> 9) | (e_hi << 23))) >>> 0; // ROTR 41/(swap + ROTR 9)
      s1_lo = (
        ((e_hi << 18) | (e_lo >>> 14)) ^ // ROTR 14
        ((e_hi << 14) | (e_lo >>> 18)) ^ // ROTR 18
        ((e_lo << 23) | (e_hi >>> 9))) >>> 0; // ROTR 41/(swap + ROTR 9)

      // Ch(e, f, g) (optimized the same way as SHA-1)
      ch_hi = (g_hi ^ (e_hi & (f_hi ^ g_hi))) >>> 0;
      ch_lo = (g_lo ^ (e_lo & (f_lo ^ g_lo))) >>> 0;

      // Sum0(a) = ROTR 28(a) ^ ROTR 34(a) ^ ROTR 39(a)
      s0_hi = (
        ((a_hi >>> 28) | (a_lo << 4)) ^ // ROTR 28
        ((a_lo >>> 2) | (a_hi << 30)) ^ // ROTR 34/(swap + ROTR 2)
        ((a_lo >>> 7) | (a_hi << 25))) >>> 0; // ROTR 39/(swap + ROTR 7)
      s0_lo = (
        ((a_hi << 4) | (a_lo >>> 28)) ^ // ROTR 28
        ((a_lo << 30) | (a_hi >>> 2)) ^ // ROTR 34/(swap + ROTR 2)
        ((a_lo << 25) | (a_hi >>> 7))) >>> 0; // ROTR 39/(swap + ROTR 7)

      // Maj(a, b, c) (optimized the same way as SHA-1)
      maj_hi = ((a_hi & b_hi) | (c_hi & (a_hi ^ b_hi))) >>> 0;
      maj_lo = ((a_lo & b_lo) | (c_lo & (a_lo ^ b_lo))) >>> 0;

      // main algorithm
      // t1 = (h + s1 + ch + _k[i] + _w[i]) modulo 2^64 (carry lo overflow)
      lo = (h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1]);
      t1_hi = (h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] +
        ((lo / 0x100000000) >>> 0)) >>> 0;
      t1_lo = lo >>> 0;

      // t2 = s0 + maj modulo 2^64 (carry lo overflow)
      lo = s0_lo + maj_lo;
      t2_hi = (s0_hi + maj_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
      t2_lo = lo >>> 0;

      h_hi = g_hi;
      h_lo = g_lo;

      g_hi = f_hi;
      g_lo = f_lo;

      f_hi = e_hi;
      f_lo = e_lo;

      // e = (d + t1) modulo 2^64 (carry lo overflow)
      lo = d_lo + t1_lo;
      e_hi = (d_hi + t1_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
      e_lo = lo >>> 0;

      d_hi = c_hi;
      d_lo = c_lo;

      c_hi = b_hi;
      c_lo = b_lo;

      b_hi = a_hi;
      b_lo = a_lo;

      // a = (t1 + t2) modulo 2^64 (carry lo overflow)
      lo = t1_lo + t2_lo;
      a_hi = (t1_hi + t2_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
      a_lo = lo >>> 0;
    }

    // update hash state (additional modulo 2^64)
    lo = s[0][1] + a_lo;
    s[0][0] = (s[0][0] + a_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
    s[0][1] = lo >>> 0;

    lo = s[1][1] + b_lo;
    s[1][0] = (s[1][0] + b_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
    s[1][1] = lo >>> 0;

    lo = s[2][1] + c_lo;
    s[2][0] = (s[2][0] + c_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
    s[2][1] = lo >>> 0;

    lo = s[3][1] + d_lo;
    s[3][0] = (s[3][0] + d_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
    s[3][1] = lo >>> 0;

    lo = s[4][1] + e_lo;
    s[4][0] = (s[4][0] + e_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
    s[4][1] = lo >>> 0;

    lo = s[5][1] + f_lo;
    s[5][0] = (s[5][0] + f_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
    s[5][1] = lo >>> 0;

    lo = s[6][1] + g_lo;
    s[6][0] = (s[6][0] + g_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
    s[6][1] = lo >>> 0;

    lo = s[7][1] + h_lo;
    s[7][0] = (s[7][0] + h_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
    s[7][1] = lo >>> 0;

    len -= 128;
  }
}
/**
 * Socket implementation that uses flash SocketPool class as a backend.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./util');

// define net namespace
var net = module.exports = forge.net = forge.net || {};

// map of flash ID to socket pool
net.socketPools = {};

/**
 * Creates a flash socket pool.
 *
 * @param options:
 *          flashId: the dom ID for the flash object element.
 *          policyPort: the default policy port for sockets, 0 to use the
 *            flash default.
 *          policyUrl: the default policy file URL for sockets (if provided
 *            used instead of a policy port).
 *          msie: true if the browser is msie, false if not.
 *
 * @return the created socket pool.
 */
net.createSocketPool = function(options) {
  // set default
  options.msie = options.msie || false;

  // initialize the flash interface
  var spId = options.flashId;
  var api = document.getElementById(spId);
  api.init({marshallExceptions: !options.msie});

  // create socket pool entry
  var sp = {
    // ID of the socket pool
    id: spId,
    // flash interface
    flashApi: api,
    // map of socket ID to sockets
    sockets: {},
    // default policy port
    policyPort: options.policyPort || 0,
    // default policy URL
    policyUrl: options.policyUrl || null
  };
  net.socketPools[spId] = sp;

  // create event handler, subscribe to flash events
  if(options.msie === true) {
    sp.handler = function(e) {
      if(e.id in sp.sockets) {
        // get handler function
        var f;
        switch(e.type) {
        case 'connect':
          f = 'connected';
          break;
        case 'close':
          f = 'closed';
          break;
        case 'socketData':
          f = 'data';
          break;
        default:
          f = 'error';
          break;
        }
        /* IE calls javascript on the thread of the external object
          that triggered the event (in this case flash) ... which will
          either run concurrently with other javascript or pre-empt any
          running javascript in the middle of its execution (BAD!) ...
          calling setTimeout() will schedule the javascript to run on
          the javascript thread and solve this EVIL problem. */
        setTimeout(function() {sp.sockets[e.id][f](e);}, 0);
      }
    };
  } else {
    sp.handler = function(e) {
      if(e.id in sp.sockets) {
        // get handler function
        var f;
        switch(e.type) {
        case 'connect':
          f = 'connected';
          break;
        case 'close':
          f = 'closed';
          break;
        case 'socketData':
          f = 'data';
          break;
        default:
          f = 'error';
          break;
        }
        sp.sockets[e.id][f](e);
      }
    };
  }
  var handler = 'forge.net.socketPools[\'' + spId + '\'].handler';
  api.subscribe('connect', handler);
  api.subscribe('close', handler);
  api.subscribe('socketData', handler);
  api.subscribe('ioError', handler);
  api.subscribe('securityError', handler);

  /**
   * Destroys a socket pool. The socket pool still needs to be cleaned
   * up via net.cleanup().
   */
  sp.destroy = function() {
    delete net.socketPools[options.flashId];
    for(var id in sp.sockets) {
      sp.sockets[id].destroy();
    }
    sp.sockets = {};
    api.cleanup();
  };

  /**
   * Creates a new socket.
   *
   * @param options:
   *          connected: function(event) called when the socket connects.
   *          closed: function(event) called when the socket closes.
   *          data: function(event) called when socket data has arrived,
   *            it can be read from the socket using receive().
   *          error: function(event) called when a socket error occurs.
   */
   sp.createSocket = function(options) {
     // default to empty options
     options = options || {};

     // create flash socket
     var id = api.create();

     // create javascript socket wrapper
     var socket = {
       id: id,
       // set handlers
       connected: options.connected || function(e) {},
       closed: options.closed || function(e) {},
       data: options.data || function(e) {},
       error: options.error || function(e) {}
     };

     /**
      * Destroys this socket.
      */
     socket.destroy = function() {
       api.destroy(id);
       delete sp.sockets[id];
     };

     /**
      * Connects this socket.
      *
      * @param options:
      *          host: the host to connect to.
      *          port: the port to connect to.
      *          policyPort: the policy port to use (if non-default), 0 to
      *            use the flash default.
      *          policyUrl: the policy file URL to use (instead of port).
      */
     socket.connect = function(options) {
       // give precedence to policy URL over policy port
       // if no policy URL and passed port isn't 0, use default port,
       // otherwise use 0 for the port
       var policyUrl = options.policyUrl || null;
       var policyPort = 0;
       if(policyUrl === null && options.policyPort !== 0) {
         policyPort = options.policyPort || sp.policyPort;
       }
       api.connect(id, options.host, options.port, policyPort, policyUrl);
     };

     /**
      * Closes this socket.
      */
     socket.close = function() {
       api.close(id);
       socket.closed({
         id: socket.id,
         type: 'close',
         bytesAvailable: 0
       });
     };

     /**
      * Determines if the socket is connected or not.
      *
      * @return true if connected, false if not.
      */
     socket.isConnected = function() {
       return api.isConnected(id);
     };

     /**
      * Writes bytes to this socket.
      *
      * @param bytes the bytes (as a string) to write.
      *
      * @return true on success, false on failure.
      */
     socket.send = function(bytes) {
       return api.send(id, forge.util.encode64(bytes));
     };

     /**
      * Reads bytes from this socket (non-blocking). Fewer than the number
      * of bytes requested may be read if enough bytes are not available.
      *
      * This method should be called from the data handler if there are
      * enough bytes available. To see how many bytes are available, check
      * the 'bytesAvailable' property on the event in the data handler or
      * call the bytesAvailable() function on the socket. If the browser is
      * msie, then the bytesAvailable() function should be used to avoid
      * race conditions. Otherwise, using the property on the data handler's
      * event may be quicker.
      *
      * @param count the maximum number of bytes to read.
      *
      * @return the bytes read (as a string) or null on error.
      */
     socket.receive = function(count) {
       var rval = api.receive(id, count).rval;
       return (rval === null) ? null : forge.util.decode64(rval);
     };

     /**
      * Gets the number of bytes available for receiving on the socket.
      *
      * @return the number of bytes available for receiving.
      */
     socket.bytesAvailable = function() {
       return api.getBytesAvailable(id);
     };

     // store and return socket
     sp.sockets[id] = socket;
     return socket;
  };

  return sp;
};

/**
 * Destroys a flash socket pool.
 *
 * @param options:
 *          flashId: the dom ID for the flash object element.
 */
net.destroySocketPool = function(options) {
  if(options.flashId in net.socketPools) {
    var sp = net.socketPools[options.flashId];
    sp.destroy();
  }
};

/**
 * Creates a new socket.
 *
 * @param options:
 *          flashId: the dom ID for the flash object element.
 *          connected: function(event) called when the socket connects.
 *          closed: function(event) called when the socket closes.
 *          data: function(event) called when socket data has arrived, it
 *            can be read from the socket using receive().
 *          error: function(event) called when a socket error occurs.
 *
 * @return the created socket.
 */
net.createSocket = function(options) {
  var socket = null;
  if(options.flashId in net.socketPools) {
    // get related socket pool
    var sp = net.socketPools[options.flashId];
    socket = sp.createSocket(options);
  }
  return socket;
};
/**
 * Functions to output keys in SSH-friendly formats.
 *
 * This is part of the Forge project which may be used under the terms of
 * either the BSD License or the GNU General Public License (GPL) Version 2.
 *
 * See: https://github.com/digitalbazaar/forge/blob/cbebca3780658703d925b61b2caffb1d263a6c1d/LICENSE
 *
 * @author https://github.com/shellac
 */
var forge = require('./forge');
require('./aes');
require('./hmac');
require('./md5');
require('./sha1');
require('./util');

var ssh = module.exports = forge.ssh = forge.ssh || {};

/**
 * Encodes (and optionally encrypts) a private RSA key as a Putty PPK file.
 *
 * @param privateKey the key.
 * @param passphrase a passphrase to protect the key (falsy for no encryption).
 * @param comment a comment to include in the key file.
 *
 * @return the PPK file as a string.
 */
ssh.privateKeyToPutty = function(privateKey, passphrase, comment) {
  comment = comment || '';
  passphrase = passphrase || '';
  var algorithm = 'ssh-rsa';
  var encryptionAlgorithm = (passphrase === '') ? 'none' : 'aes256-cbc';

  var ppk = 'PuTTY-User-Key-File-2: ' + algorithm + '\r\n';
  ppk += 'Encryption: ' + encryptionAlgorithm + '\r\n';
  ppk += 'Comment: ' + comment + '\r\n';

  // public key into buffer for ppk
  var pubbuffer = forge.util.createBuffer();
  _addStringToBuffer(pubbuffer, algorithm);
  _addBigIntegerToBuffer(pubbuffer, privateKey.e);
  _addBigIntegerToBuffer(pubbuffer, privateKey.n);

  // write public key
  var pub = forge.util.encode64(pubbuffer.bytes(), 64);
  var length = Math.floor(pub.length / 66) + 1; // 66 = 64 + \r\n
  ppk += 'Public-Lines: ' + length + '\r\n';
  ppk += pub;

  // private key into a buffer
  var privbuffer = forge.util.createBuffer();
  _addBigIntegerToBuffer(privbuffer, privateKey.d);
  _addBigIntegerToBuffer(privbuffer, privateKey.p);
  _addBigIntegerToBuffer(privbuffer, privateKey.q);
  _addBigIntegerToBuffer(privbuffer, privateKey.qInv);

  // optionally encrypt the private key
  var priv;
  if(!passphrase) {
    // use the unencrypted buffer
    priv = forge.util.encode64(privbuffer.bytes(), 64);
  } else {
    // encrypt RSA key using passphrase
    var encLen = privbuffer.length() + 16 - 1;
    encLen -= encLen % 16;

    // pad private key with sha1-d data -- needs to be a multiple of 16
    var padding = _sha1(privbuffer.bytes());

    padding.truncate(padding.length() - encLen + privbuffer.length());
    privbuffer.putBuffer(padding);

    var aeskey = forge.util.createBuffer();
    aeskey.putBuffer(_sha1('\x00\x00\x00\x00', passphrase));
    aeskey.putBuffer(_sha1('\x00\x00\x00\x01', passphrase));

    // encrypt some bytes using CBC mode
    // key is 40 bytes, so truncate *by* 8 bytes
    var cipher = forge.aes.createEncryptionCipher(aeskey.truncate(8), 'CBC');
    cipher.start(forge.util.createBuffer().fillWithByte(0, 16));
    cipher.update(privbuffer.copy());
    cipher.finish();
    var encrypted = cipher.output;

    // Note: this appears to differ from Putty -- is forge wrong, or putty?
    // due to padding we finish as an exact multiple of 16
    encrypted.truncate(16); // all padding

    priv = forge.util.encode64(encrypted.bytes(), 64);
  }

  // output private key
  length = Math.floor(priv.length / 66) + 1; // 64 + \r\n
  ppk += '\r\nPrivate-Lines: ' + length + '\r\n';
  ppk += priv;

  // MAC
  var mackey = _sha1('putty-private-key-file-mac-key', passphrase);

  var macbuffer = forge.util.createBuffer();
  _addStringToBuffer(macbuffer, algorithm);
  _addStringToBuffer(macbuffer, encryptionAlgorithm);
  _addStringToBuffer(macbuffer, comment);
  macbuffer.putInt32(pubbuffer.length());
  macbuffer.putBuffer(pubbuffer);
  macbuffer.putInt32(privbuffer.length());
  macbuffer.putBuffer(privbuffer);

  var hmac = forge.hmac.create();
  hmac.start('sha1', mackey);
  hmac.update(macbuffer.bytes());

  ppk += '\r\nPrivate-MAC: ' + hmac.digest().toHex() + '\r\n';

  return ppk;
};

/**
 * Encodes a public RSA key as an OpenSSH file.
 *
 * @param key the key.
 * @param comment a comment.
 *
 * @return the public key in OpenSSH format.
 */
ssh.publicKeyToOpenSSH = function(key, comment) {
  var type = 'ssh-rsa';
  comment = comment || '';

  var buffer = forge.util.createBuffer();
  _addStringToBuffer(buffer, type);
  _addBigIntegerToBuffer(buffer, key.e);
  _addBigIntegerToBuffer(buffer, key.n);

  return type + ' ' + forge.util.encode64(buffer.bytes()) + ' ' + comment;
};

/**
 * Encodes a private RSA key as an OpenSSH file.
 *
 * @param key the key.
 * @param passphrase a passphrase to protect the key (falsy for no encryption).
 *
 * @return the public key in OpenSSH format.
 */
ssh.privateKeyToOpenSSH = function(privateKey, passphrase) {
  if(!passphrase) {
    return forge.pki.privateKeyToPem(privateKey);
  }
  // OpenSSH private key is just a legacy format, it seems
  return forge.pki.encryptRsaPrivateKey(privateKey, passphrase,
    {legacy: true, algorithm: 'aes128'});
};

/**
 * Gets the SSH fingerprint for the given public key.
 *
 * @param options the options to use.
 *          [md] the message digest object to use (defaults to forge.md.md5).
 *          [encoding] an alternative output encoding, such as 'hex'
 *            (defaults to none, outputs a byte buffer).
 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
 *            output, eg: ':' (defaults to none).
 *
 * @return the fingerprint as a byte buffer or other encoding based on options.
 */
ssh.getPublicKeyFingerprint = function(key, options) {
  options = options || {};
  var md = options.md || forge.md.md5.create();

  var type = 'ssh-rsa';
  var buffer = forge.util.createBuffer();
  _addStringToBuffer(buffer, type);
  _addBigIntegerToBuffer(buffer, key.e);
  _addBigIntegerToBuffer(buffer, key.n);

  // hash public key bytes
  md.start();
  md.update(buffer.getBytes());
  var digest = md.digest();
  if(options.encoding === 'hex') {
    var hex = digest.toHex();
    if(options.delimiter) {
      return hex.match(/.{2}/g).join(options.delimiter);
    }
    return hex;
  } else if(options.encoding === 'binary') {
    return digest.getBytes();
  } else if(options.encoding) {
    throw new Error('Unknown encoding "' + options.encoding + '".');
  }
  return digest;
};

/**
 * Adds len(val) then val to a buffer.
 *
 * @param buffer the buffer to add to.
 * @param val a big integer.
 */
function _addBigIntegerToBuffer(buffer, val) {
  var hexVal = val.toString(16);
  // ensure 2s complement +ve
  if(hexVal[0] >= '8') {
    hexVal = '00' + hexVal;
  }
  var bytes = forge.util.hexToBytes(hexVal);
  buffer.putInt32(bytes.length);
  buffer.putBytes(bytes);
}

/**
 * Adds len(val) then val to a buffer.
 *
 * @param buffer the buffer to add to.
 * @param val a string.
 */
function _addStringToBuffer(buffer, val) {
  buffer.putInt32(val.length);
  buffer.putString(val);
}

/**
 * Hashes the arguments into one value using SHA-1.
 *
 * @return the sha1 hash of the provided arguments.
 */
function _sha1() {
  var sha = forge.md.sha1.create();
  var num = arguments.length;
  for (var i = 0; i < num; ++i) {
    sha.update(arguments[i]);
  }
  return sha.digest();
}
/**
 * A Javascript implementation of Transport Layer Security (TLS).
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
 *
 * The TLS Handshake Protocol involves the following steps:
 *
 * - Exchange hello messages to agree on algorithms, exchange random values,
 * and check for session resumption.
 *
 * - Exchange the necessary cryptographic parameters to allow the client and
 * server to agree on a premaster secret.
 *
 * - Exchange certificates and cryptographic information to allow the client
 * and server to authenticate themselves.
 *
 * - Generate a master secret from the premaster secret and exchanged random
 * values.
 *
 * - Provide security parameters to the record layer.
 *
 * - Allow the client and server to verify that their peer has calculated the
 * same security parameters and that the handshake occurred without tampering
 * by an attacker.
 *
 * Up to 4 different messages may be sent during a key exchange. The server
 * certificate, the server key exchange, the client certificate, and the
 * client key exchange.
 *
 * A typical handshake (from the client's perspective).
 *
 * 1. Client sends ClientHello.
 * 2. Client receives ServerHello.
 * 3. Client receives optional Certificate.
 * 4. Client receives optional ServerKeyExchange.
 * 5. Client receives ServerHelloDone.
 * 6. Client sends optional Certificate.
 * 7. Client sends ClientKeyExchange.
 * 8. Client sends optional CertificateVerify.
 * 9. Client sends ChangeCipherSpec.
 * 10. Client sends Finished.
 * 11. Client receives ChangeCipherSpec.
 * 12. Client receives Finished.
 * 13. Client sends/receives application data.
 *
 * To reuse an existing session:
 *
 * 1. Client sends ClientHello with session ID for reuse.
 * 2. Client receives ServerHello with same session ID if reusing.
 * 3. Client receives ChangeCipherSpec message if reusing.
 * 4. Client receives Finished.
 * 5. Client sends ChangeCipherSpec.
 * 6. Client sends Finished.
 *
 * Note: Client ignores HelloRequest if in the middle of a handshake.
 *
 * Record Layer:
 *
 * The record layer fragments information blocks into TLSPlaintext records
 * carrying data in chunks of 2^14 bytes or less. Client message boundaries are
 * not preserved in the record layer (i.e., multiple client messages of the
 * same ContentType MAY be coalesced into a single TLSPlaintext record, or a
 * single message MAY be fragmented across several records).
 *
 * struct {
 *   uint8 major;
 *   uint8 minor;
 * } ProtocolVersion;
 *
 * struct {
 *   ContentType type;
 *   ProtocolVersion version;
 *   uint16 length;
 *   opaque fragment[TLSPlaintext.length];
 * } TLSPlaintext;
 *
 * type:
 *   The higher-level protocol used to process the enclosed fragment.
 *
 * version:
 *   The version of the protocol being employed. TLS Version 1.2 uses version
 *   {3, 3}. TLS Version 1.0 uses version {3, 1}. Note that a client that
 *   supports multiple versions of TLS may not know what version will be
 *   employed before it receives the ServerHello.
 *
 * length:
 *   The length (in bytes) of the following TLSPlaintext.fragment. The length
 *   MUST NOT exceed 2^14 = 16384 bytes.
 *
 * fragment:
 *   The application data. This data is transparent and treated as an
 *   independent block to be dealt with by the higher-level protocol specified
 *   by the type field.
 *
 * Implementations MUST NOT send zero-length fragments of Handshake, Alert, or
 * ChangeCipherSpec content types. Zero-length fragments of Application data
 * MAY be sent as they are potentially useful as a traffic analysis
 * countermeasure.
 *
 * Note: Data of different TLS record layer content types MAY be interleaved.
 * Application data is generally of lower precedence for transmission than
 * other content types. However, records MUST be delivered to the network in
 * the same order as they are protected by the record layer. Recipients MUST
 * receive and process interleaved application layer traffic during handshakes
 * subsequent to the first one on a connection.
 *
 * struct {
 *   ContentType type;       // same as TLSPlaintext.type
 *   ProtocolVersion version;// same as TLSPlaintext.version
 *   uint16 length;
 *   opaque fragment[TLSCompressed.length];
 * } TLSCompressed;
 *
 * length:
 *   The length (in bytes) of the following TLSCompressed.fragment.
 *   The length MUST NOT exceed 2^14 + 1024.
 *
 * fragment:
 *   The compressed form of TLSPlaintext.fragment.
 *
 * Note: A CompressionMethod.null operation is an identity operation; no fields
 * are altered. In this implementation, since no compression is supported,
 * uncompressed records are always the same as compressed records.
 *
 * Encryption Information:
 *
 * The encryption and MAC functions translate a TLSCompressed structure into a
 * TLSCiphertext. The decryption functions reverse the process. The MAC of the
 * record also includes a sequence number so that missing, extra, or repeated
 * messages are detectable.
 *
 * struct {
 *   ContentType type;
 *   ProtocolVersion version;
 *   uint16 length;
 *   select (SecurityParameters.cipher_type) {
 *     case stream: GenericStreamCipher;
 *     case block:  GenericBlockCipher;
 *     case aead:   GenericAEADCipher;
 *   } fragment;
 * } TLSCiphertext;
 *
 * type:
 *   The type field is identical to TLSCompressed.type.
 *
 * version:
 *   The version field is identical to TLSCompressed.version.
 *
 * length:
 *   The length (in bytes) of the following TLSCiphertext.fragment.
 *   The length MUST NOT exceed 2^14 + 2048.
 *
 * fragment:
 *   The encrypted form of TLSCompressed.fragment, with the MAC.
 *
 * Note: Only CBC Block Ciphers are supported by this implementation.
 *
 * The TLSCompressed.fragment structures are converted to/from block
 * TLSCiphertext.fragment structures.
 *
 * struct {
 *   opaque IV[SecurityParameters.record_iv_length];
 *   block-ciphered struct {
 *     opaque content[TLSCompressed.length];
 *     opaque MAC[SecurityParameters.mac_length];
 *     uint8 padding[GenericBlockCipher.padding_length];
 *     uint8 padding_length;
 *   };
 * } GenericBlockCipher;
 *
 * The MAC is generated as described in Section 6.2.3.1.
 *
 * IV:
 *   The Initialization Vector (IV) SHOULD be chosen at random, and MUST be
 *   unpredictable. Note that in versions of TLS prior to 1.1, there was no
 *   IV field, and the last ciphertext block of the previous record (the "CBC
 *   residue") was used as the IV. This was changed to prevent the attacks
 *   described in [CBCATT]. For block ciphers, the IV length is of length
 *   SecurityParameters.record_iv_length, which is equal to the
 *   SecurityParameters.block_size.
 *
 * padding:
 *   Padding that is added to force the length of the plaintext to be an
 *   integral multiple of the block cipher's block length. The padding MAY be
 *   any length up to 255 bytes, as long as it results in the
 *   TLSCiphertext.length being an integral multiple of the block length.
 *   Lengths longer than necessary might be desirable to frustrate attacks on
 *   a protocol that are based on analysis of the lengths of exchanged
 *   messages. Each uint8 in the padding data vector MUST be filled with the
 *   padding length value. The receiver MUST check this padding and MUST use
 *   the bad_record_mac alert to indicate padding errors.
 *
 * padding_length:
 *   The padding length MUST be such that the total size of the
 *   GenericBlockCipher structure is a multiple of the cipher's block length.
 *   Legal values range from zero to 255, inclusive. This length specifies the
 *   length of the padding field exclusive of the padding_length field itself.
 *
 * The encrypted data length (TLSCiphertext.length) is one more than the sum of
 * SecurityParameters.block_length, TLSCompressed.length,
 * SecurityParameters.mac_length, and padding_length.
 *
 * Example: If the block length is 8 bytes, the content length
 * (TLSCompressed.length) is 61 bytes, and the MAC length is 20 bytes, then the
 * length before padding is 82 bytes (this does not include the IV. Thus, the
 * padding length modulo 8 must be equal to 6 in order to make the total length
 * an even multiple of 8 bytes (the block length). The padding length can be
 * 6, 14, 22, and so on, through 254. If the padding length were the minimum
 * necessary, 6, the padding would be 6 bytes, each containing the value 6.
 * Thus, the last 8 octets of the GenericBlockCipher before block encryption
 * would be xx 06 06 06 06 06 06 06, where xx is the last octet of the MAC.
 *
 * Note: With block ciphers in CBC mode (Cipher Block Chaining), it is critical
 * that the entire plaintext of the record be known before any ciphertext is
 * transmitted. Otherwise, it is possible for the attacker to mount the attack
 * described in [CBCATT].
 *
 * Implementation note: Canvel et al. [CBCTIME] have demonstrated a timing
 * attack on CBC padding based on the time required to compute the MAC. In
 * order to defend against this attack, implementations MUST ensure that
 * record processing time is essentially the same whether or not the padding
 * is correct. In general, the best way to do this is to compute the MAC even
 * if the padding is incorrect, and only then reject the packet. For instance,
 * if the pad appears to be incorrect, the implementation might assume a
 * zero-length pad and then compute the MAC. This leaves a small timing
 * channel, since MAC performance depends, to some extent, on the size of the
 * data fragment, but it is not believed to be large enough to be exploitable,
 * due to the large block size of existing MACs and the small size of the
 * timing signal.
 */
var forge = require('./forge');
require('./asn1');
require('./hmac');
require('./md5');
require('./pem');
require('./pki');
require('./random');
require('./sha1');
require('./util');

/**
 * Generates pseudo random bytes by mixing the result of two hash functions,
 * MD5 and SHA-1.
 *
 * prf_TLS1(secret, label, seed) =
 *   P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed);
 *
 * Each P_hash function functions as follows:
 *
 * P_hash(secret, seed) = HMAC_hash(secret, A(1) + seed) +
 *                        HMAC_hash(secret, A(2) + seed) +
 *                        HMAC_hash(secret, A(3) + seed) + ...
 * A() is defined as:
 *   A(0) = seed
 *   A(i) = HMAC_hash(secret, A(i-1))
 *
 * The '+' operator denotes concatenation.
 *
 * As many iterations A(N) as are needed are performed to generate enough
 * pseudo random byte output. If an iteration creates more data than is
 * necessary, then it is truncated.
 *
 * Therefore:
 * A(1) = HMAC_hash(secret, A(0))
 *      = HMAC_hash(secret, seed)
 * A(2) = HMAC_hash(secret, A(1))
 *      = HMAC_hash(secret, HMAC_hash(secret, seed))
 *
 * Therefore:
 * P_hash(secret, seed) =
 *   HMAC_hash(secret, HMAC_hash(secret, A(0)) + seed) +
 *   HMAC_hash(secret, HMAC_hash(secret, A(1)) + seed) +
 *   ...
 *
 * Therefore:
 * P_hash(secret, seed) =
 *   HMAC_hash(secret, HMAC_hash(secret, seed) + seed) +
 *   HMAC_hash(secret, HMAC_hash(secret, HMAC_hash(secret, seed)) + seed) +
 *   ...
 *
 * @param secret the secret to use.
 * @param label the label to use.
 * @param seed the seed value to use.
 * @param length the number of bytes to generate.
 *
 * @return the pseudo random bytes in a byte buffer.
 */
var prf_TLS1 = function(secret, label, seed, length) {
  var rval = forge.util.createBuffer();

  /* For TLS 1.0, the secret is split in half, into two secrets of equal
    length. If the secret has an odd length then the last byte of the first
    half will be the same as the first byte of the second. The length of the
    two secrets is half of the secret rounded up. */
  var idx = (secret.length >> 1);
  var slen = idx + (secret.length & 1);
  var s1 = secret.substr(0, slen);
  var s2 = secret.substr(idx, slen);
  var ai = forge.util.createBuffer();
  var hmac = forge.hmac.create();
  seed = label + seed;

  // determine the number of iterations that must be performed to generate
  // enough output bytes, md5 creates 16 byte hashes, sha1 creates 20
  var md5itr = Math.ceil(length / 16);
  var sha1itr = Math.ceil(length / 20);

  // do md5 iterations
  hmac.start('MD5', s1);
  var md5bytes = forge.util.createBuffer();
  ai.putBytes(seed);
  for(var i = 0; i < md5itr; ++i) {
    // HMAC_hash(secret, A(i-1))
    hmac.start(null, null);
    hmac.update(ai.getBytes());
    ai.putBuffer(hmac.digest());

    // HMAC_hash(secret, A(i) + seed)
    hmac.start(null, null);
    hmac.update(ai.bytes() + seed);
    md5bytes.putBuffer(hmac.digest());
  }

  // do sha1 iterations
  hmac.start('SHA1', s2);
  var sha1bytes = forge.util.createBuffer();
  ai.clear();
  ai.putBytes(seed);
  for(var i = 0; i < sha1itr; ++i) {
    // HMAC_hash(secret, A(i-1))
    hmac.start(null, null);
    hmac.update(ai.getBytes());
    ai.putBuffer(hmac.digest());

    // HMAC_hash(secret, A(i) + seed)
    hmac.start(null, null);
    hmac.update(ai.bytes() + seed);
    sha1bytes.putBuffer(hmac.digest());
  }

  // XOR the md5 bytes with the sha1 bytes
  rval.putBytes(forge.util.xorBytes(
    md5bytes.getBytes(), sha1bytes.getBytes(), length));

  return rval;
};

/**
 * Generates pseudo random bytes using a SHA256 algorithm. For TLS 1.2.
 *
 * @param secret the secret to use.
 * @param label the label to use.
 * @param seed the seed value to use.
 * @param length the number of bytes to generate.
 *
 * @return the pseudo random bytes in a byte buffer.
 */
var prf_sha256 = function(secret, label, seed, length) {
   // FIXME: implement me for TLS 1.2
};

/**
 * Gets a MAC for a record using the SHA-1 hash algorithm.
 *
 * @param key the mac key.
 * @param state the sequence number (array of two 32-bit integers).
 * @param record the record.
 *
 * @return the sha-1 hash (20 bytes) for the given record.
 */
var hmac_sha1 = function(key, seqNum, record) {
  /* MAC is computed like so:
  HMAC_hash(
    key, seqNum +
      TLSCompressed.type +
      TLSCompressed.version +
      TLSCompressed.length +
      TLSCompressed.fragment)
  */
  var hmac = forge.hmac.create();
  hmac.start('SHA1', key);
  var b = forge.util.createBuffer();
  b.putInt32(seqNum[0]);
  b.putInt32(seqNum[1]);
  b.putByte(record.type);
  b.putByte(record.version.major);
  b.putByte(record.version.minor);
  b.putInt16(record.length);
  b.putBytes(record.fragment.bytes());
  hmac.update(b.getBytes());
  return hmac.digest().getBytes();
};

/**
 * Compresses the TLSPlaintext record into a TLSCompressed record using the
 * deflate algorithm.
 *
 * @param c the TLS connection.
 * @param record the TLSPlaintext record to compress.
 * @param s the ConnectionState to use.
 *
 * @return true on success, false on failure.
 */
var deflate = function(c, record, s) {
  var rval = false;

  try {
    var bytes = c.deflate(record.fragment.getBytes());
    record.fragment = forge.util.createBuffer(bytes);
    record.length = bytes.length;
    rval = true;
  } catch(ex) {
    // deflate error, fail out
  }

  return rval;
};

/**
 * Decompresses the TLSCompressed record into a TLSPlaintext record using the
 * deflate algorithm.
 *
 * @param c the TLS connection.
 * @param record the TLSCompressed record to decompress.
 * @param s the ConnectionState to use.
 *
 * @return true on success, false on failure.
 */
var inflate = function(c, record, s) {
  var rval = false;

  try {
    var bytes = c.inflate(record.fragment.getBytes());
    record.fragment = forge.util.createBuffer(bytes);
    record.length = bytes.length;
    rval = true;
  } catch(ex) {
    // inflate error, fail out
  }

  return rval;
};

/**
 * Reads a TLS variable-length vector from a byte buffer.
 *
 * Variable-length vectors are defined by specifying a subrange of legal
 * lengths, inclusively, using the notation <floor..ceiling>. When these are
 * encoded, the actual length precedes the vector's contents in the byte
 * stream. The length will be in the form of a number consuming as many bytes
 * as required to hold the vector's specified maximum (ceiling) length. A
 * variable-length vector with an actual length field of zero is referred to
 * as an empty vector.
 *
 * @param b the byte buffer.
 * @param lenBytes the number of bytes required to store the length.
 *
 * @return the resulting byte buffer.
 */
var readVector = function(b, lenBytes) {
  var len = 0;
  switch(lenBytes) {
  case 1:
    len = b.getByte();
    break;
  case 2:
    len = b.getInt16();
    break;
  case 3:
    len = b.getInt24();
    break;
  case 4:
    len = b.getInt32();
    break;
  }

  // read vector bytes into a new buffer
  return forge.util.createBuffer(b.getBytes(len));
};

/**
 * Writes a TLS variable-length vector to a byte buffer.
 *
 * @param b the byte buffer.
 * @param lenBytes the number of bytes required to store the length.
 * @param v the byte buffer vector.
 */
var writeVector = function(b, lenBytes, v) {
  // encode length at the start of the vector, where the number of bytes for
  // the length is the maximum number of bytes it would take to encode the
  // vector's ceiling
  b.putInt(v.length(), lenBytes << 3);
  b.putBuffer(v);
};

/**
 * The tls implementation.
 */
var tls = {};

/**
 * Version: TLS 1.2 = 3.3, TLS 1.1 = 3.2, TLS 1.0 = 3.1. Both TLS 1.1 and
 * TLS 1.2 were still too new (ie: openSSL didn't implement them) at the time
 * of this implementation so TLS 1.0 was implemented instead.
 */
tls.Versions = {
  TLS_1_0: {major: 3, minor: 1},
  TLS_1_1: {major: 3, minor: 2},
  TLS_1_2: {major: 3, minor: 3}
};
tls.SupportedVersions = [
  tls.Versions.TLS_1_1,
  tls.Versions.TLS_1_0
];
tls.Version = tls.SupportedVersions[0];

/**
 * Maximum fragment size. True maximum is 16384, but we fragment before that
 * to allow for unusual small increases during compression.
 */
tls.MaxFragment = 16384 - 1024;

/**
 * Whether this entity is considered the "client" or "server".
 * enum { server, client } ConnectionEnd;
 */
tls.ConnectionEnd = {
  server: 0,
  client: 1
};

/**
 * Pseudo-random function algorithm used to generate keys from the master
 * secret.
 * enum { tls_prf_sha256 } PRFAlgorithm;
 */
tls.PRFAlgorithm = {
  tls_prf_sha256: 0
};

/**
 * Bulk encryption algorithms.
 * enum { null, rc4, des3, aes } BulkCipherAlgorithm;
 */
tls.BulkCipherAlgorithm = {
  none: null,
  rc4: 0,
  des3: 1,
  aes: 2
};

/**
 * Cipher types.
 * enum { stream, block, aead } CipherType;
 */
tls.CipherType = {
  stream: 0,
  block: 1,
  aead: 2
};

/**
 * MAC (Message Authentication Code) algorithms.
 * enum { null, hmac_md5, hmac_sha1, hmac_sha256,
 *   hmac_sha384, hmac_sha512} MACAlgorithm;
 */
tls.MACAlgorithm = {
  none: null,
  hmac_md5: 0,
  hmac_sha1: 1,
  hmac_sha256: 2,
  hmac_sha384: 3,
  hmac_sha512: 4
};

/**
 * Compression algorithms.
 * enum { null(0), deflate(1), (255) } CompressionMethod;
 */
tls.CompressionMethod = {
  none: 0,
  deflate: 1
};

/**
 * TLS record content types.
 * enum {
 *   change_cipher_spec(20), alert(21), handshake(22),
 *   application_data(23), (255)
 * } ContentType;
 */
tls.ContentType = {
  change_cipher_spec: 20,
  alert: 21,
  handshake: 22,
  application_data: 23,
  heartbeat: 24
};

/**
 * TLS handshake types.
 * enum {
 *   hello_request(0), client_hello(1), server_hello(2),
 *   certificate(11), server_key_exchange (12),
 *   certificate_request(13), server_hello_done(14),
 *   certificate_verify(15), client_key_exchange(16),
 *   finished(20), (255)
 * } HandshakeType;
 */
tls.HandshakeType = {
  hello_request: 0,
  client_hello: 1,
  server_hello: 2,
  certificate: 11,
  server_key_exchange: 12,
  certificate_request: 13,
  server_hello_done: 14,
  certificate_verify: 15,
  client_key_exchange: 16,
  finished: 20
};

/**
 * TLS Alert Protocol.
 *
 * enum { warning(1), fatal(2), (255) } AlertLevel;
 *
 * enum {
 *   close_notify(0),
 *   unexpected_message(10),
 *   bad_record_mac(20),
 *   decryption_failed(21),
 *   record_overflow(22),
 *   decompression_failure(30),
 *   handshake_failure(40),
 *   bad_certificate(42),
 *   unsupported_certificate(43),
 *   certificate_revoked(44),
 *   certificate_expired(45),
 *   certificate_unknown(46),
 *   illegal_parameter(47),
 *   unknown_ca(48),
 *   access_denied(49),
 *   decode_error(50),
 *   decrypt_error(51),
 *   export_restriction(60),
 *   protocol_version(70),
 *   insufficient_security(71),
 *   internal_error(80),
 *   user_canceled(90),
 *   no_renegotiation(100),
 *   (255)
 * } AlertDescription;
 *
 * struct {
 *   AlertLevel level;
 *   AlertDescription description;
 * } Alert;
 */
tls.Alert = {};
tls.Alert.Level = {
  warning: 1,
  fatal: 2
};
tls.Alert.Description = {
  close_notify: 0,
  unexpected_message: 10,
  bad_record_mac: 20,
  decryption_failed: 21,
  record_overflow: 22,
  decompression_failure: 30,
  handshake_failure: 40,
  bad_certificate: 42,
  unsupported_certificate: 43,
  certificate_revoked: 44,
  certificate_expired: 45,
  certificate_unknown: 46,
  illegal_parameter: 47,
  unknown_ca: 48,
  access_denied: 49,
  decode_error: 50,
  decrypt_error: 51,
  export_restriction: 60,
  protocol_version: 70,
  insufficient_security: 71,
  internal_error: 80,
  user_canceled: 90,
  no_renegotiation: 100
};

/**
 * TLS Heartbeat Message types.
 * enum {
 *   heartbeat_request(1),
 *   heartbeat_response(2),
 *   (255)
 * } HeartbeatMessageType;
 */
tls.HeartbeatMessageType = {
  heartbeat_request: 1,
  heartbeat_response: 2
};

/**
 * Supported cipher suites.
 */
tls.CipherSuites = {};

/**
 * Gets a supported cipher suite from its 2 byte ID.
 *
 * @param twoBytes two bytes in a string.
 *
 * @return the matching supported cipher suite or null.
 */
tls.getCipherSuite = function(twoBytes) {
  var rval = null;
  for(var key in tls.CipherSuites) {
    var cs = tls.CipherSuites[key];
    if(cs.id[0] === twoBytes.charCodeAt(0) &&
      cs.id[1] === twoBytes.charCodeAt(1)) {
      rval = cs;
      break;
    }
  }
  return rval;
};

/**
 * Called when an unexpected record is encountered.
 *
 * @param c the connection.
 * @param record the record.
 */
tls.handleUnexpected = function(c, record) {
  // if connection is client and closed, ignore unexpected messages
  var ignore = (!c.open && c.entity === tls.ConnectionEnd.client);
  if(!ignore) {
    c.error(c, {
      message: 'Unexpected message. Received TLS record out of order.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.unexpected_message
      }
    });
  }
};

/**
 * Called when a client receives a HelloRequest record.
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
tls.handleHelloRequest = function(c, record, length) {
  // ignore renegotiation requests from the server during a handshake, but
  // if handshaking, send a warning alert that renegotation is denied
  if(!c.handshaking && c.handshakes > 0) {
    // send alert warning
    tls.queue(c, tls.createAlert(c, {
       level: tls.Alert.Level.warning,
       description: tls.Alert.Description.no_renegotiation
    }));
    tls.flush(c);
  }

  // continue
  c.process();
};

/**
 * Parses a hello message from a ClientHello or ServerHello record.
 *
 * @param record the record to parse.
 *
 * @return the parsed message.
 */
tls.parseHelloMessage = function(c, record, length) {
  var msg = null;

  var client = (c.entity === tls.ConnectionEnd.client);

  // minimum of 38 bytes in message
  if(length < 38) {
    c.error(c, {
      message: client ?
        'Invalid ServerHello message. Message too short.' :
        'Invalid ClientHello message. Message too short.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.illegal_parameter
      }
    });
  } else {
    // use 'remaining' to calculate # of remaining bytes in the message
    var b = record.fragment;
    var remaining = b.length();
    msg = {
      version: {
        major: b.getByte(),
        minor: b.getByte()
      },
      random: forge.util.createBuffer(b.getBytes(32)),
      session_id: readVector(b, 1),
      extensions: []
    };
    if(client) {
      msg.cipher_suite = b.getBytes(2);
      msg.compression_method = b.getByte();
    } else {
      msg.cipher_suites = readVector(b, 2);
      msg.compression_methods = readVector(b, 1);
    }

    // read extensions if there are any bytes left in the message
    remaining = length - (remaining - b.length());
    if(remaining > 0) {
      // parse extensions
      var exts = readVector(b, 2);
      while(exts.length() > 0) {
        msg.extensions.push({
          type: [exts.getByte(), exts.getByte()],
          data: readVector(exts, 2)
        });
      }

      // TODO: make extension support modular
      if(!client) {
        for(var i = 0; i < msg.extensions.length; ++i) {
          var ext = msg.extensions[i];

          // support SNI extension
          if(ext.type[0] === 0x00 && ext.type[1] === 0x00) {
            // get server name list
            var snl = readVector(ext.data, 2);
            while(snl.length() > 0) {
              // read server name type
              var snType = snl.getByte();

              // only HostName type (0x00) is known, break out if
              // another type is detected
              if(snType !== 0x00) {
                break;
              }

              // add host name to server name list
              c.session.extensions.server_name.serverNameList.push(
                readVector(snl, 2).getBytes());
            }
          }
        }
      }
    }

    // version already set, do not allow version change
    if(c.session.version) {
      if(msg.version.major !== c.session.version.major ||
        msg.version.minor !== c.session.version.minor) {
        return c.error(c, {
          message: 'TLS version change is disallowed during renegotiation.',
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.protocol_version
          }
        });
      }
    }

    // get the chosen (ServerHello) cipher suite
    if(client) {
      // FIXME: should be checking configured acceptable cipher suites
      c.session.cipherSuite = tls.getCipherSuite(msg.cipher_suite);
    } else {
      // get a supported preferred (ClientHello) cipher suite
      // choose the first supported cipher suite
      var tmp = forge.util.createBuffer(msg.cipher_suites.bytes());
      while(tmp.length() > 0) {
        // FIXME: should be checking configured acceptable suites
        // cipher suites take up 2 bytes
        c.session.cipherSuite = tls.getCipherSuite(tmp.getBytes(2));
        if(c.session.cipherSuite !== null) {
          break;
        }
      }
    }

    // cipher suite not supported
    if(c.session.cipherSuite === null) {
      return c.error(c, {
        message: 'No cipher suites in common.',
        send: true,
        alert: {
          level: tls.Alert.Level.fatal,
          description: tls.Alert.Description.handshake_failure
        },
        cipherSuite: forge.util.bytesToHex(msg.cipher_suite)
      });
    }

    // TODO: handle compression methods
    if(client) {
      c.session.compressionMethod = msg.compression_method;
    } else {
      // no compression
      c.session.compressionMethod = tls.CompressionMethod.none;
    }
  }

  return msg;
};

/**
 * Creates security parameters for the given connection based on the given
 * hello message.
 *
 * @param c the TLS connection.
 * @param msg the hello message.
 */
tls.createSecurityParameters = function(c, msg) {
  /* Note: security params are from TLS 1.2, some values like prf_algorithm
  are ignored for TLS 1.0/1.1 and the builtin as specified in the spec is
  used. */

  // TODO: handle other options from server when more supported

  // get client and server randoms
  var client = (c.entity === tls.ConnectionEnd.client);
  var msgRandom = msg.random.bytes();
  var cRandom = client ? c.session.sp.client_random : msgRandom;
  var sRandom = client ? msgRandom : tls.createRandom().getBytes();

  // create new security parameters
  c.session.sp = {
    entity: c.entity,
    prf_algorithm: tls.PRFAlgorithm.tls_prf_sha256,
    bulk_cipher_algorithm: null,
    cipher_type: null,
    enc_key_length: null,
    block_length: null,
    fixed_iv_length: null,
    record_iv_length: null,
    mac_algorithm: null,
    mac_length: null,
    mac_key_length: null,
    compression_algorithm: c.session.compressionMethod,
    pre_master_secret: null,
    master_secret: null,
    client_random: cRandom,
    server_random: sRandom
  };
};

/**
 * Called when a client receives a ServerHello record.
 *
 * When a ServerHello message will be sent:
 *   The server will send this message in response to a client hello message
 *   when it was able to find an acceptable set of algorithms. If it cannot
 *   find such a match, it will respond with a handshake failure alert.
 *
 * uint24 length;
 * struct {
 *   ProtocolVersion server_version;
 *   Random random;
 *   SessionID session_id;
 *   CipherSuite cipher_suite;
 *   CompressionMethod compression_method;
 *   select(extensions_present) {
 *     case false:
 *       struct {};
 *     case true:
 *       Extension extensions<0..2^16-1>;
 *   };
 * } ServerHello;
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
tls.handleServerHello = function(c, record, length) {
  var msg = tls.parseHelloMessage(c, record, length);
  if(c.fail) {
    return;
  }

  // ensure server version is compatible
  if(msg.version.minor <= c.version.minor) {
    c.version.minor = msg.version.minor;
  } else {
    return c.error(c, {
      message: 'Incompatible TLS version.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.protocol_version
      }
    });
  }

  // indicate session version has been set
  c.session.version = c.version;

  // get the session ID from the message
  var sessionId = msg.session_id.bytes();

  // if the session ID is not blank and matches the cached one, resume
  // the session
  if(sessionId.length > 0 && sessionId === c.session.id) {
    // resuming session, expect a ChangeCipherSpec next
    c.expect = SCC;
    c.session.resuming = true;

    // get new server random
    c.session.sp.server_random = msg.random.bytes();
  } else {
    // not resuming, expect a server Certificate message next
    c.expect = SCE;
    c.session.resuming = false;

    // create new security parameters
    tls.createSecurityParameters(c, msg);
  }

  // set new session ID
  c.session.id = sessionId;

  // continue
  c.process();
};

/**
 * Called when a server receives a ClientHello record.
 *
 * When a ClientHello message will be sent:
 *   When a client first connects to a server it is required to send the
 *   client hello as its first message. The client can also send a client
 *   hello in response to a hello request or on its own initiative in order
 *   to renegotiate the security parameters in an existing connection.
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
tls.handleClientHello = function(c, record, length) {
  var msg = tls.parseHelloMessage(c, record, length);
  if(c.fail) {
    return;
  }

  // get the session ID from the message
  var sessionId = msg.session_id.bytes();

  // see if the given session ID is in the cache
  var session = null;
  if(c.sessionCache) {
    session = c.sessionCache.getSession(sessionId);
    if(session === null) {
      // session ID not found
      sessionId = '';
    } else if(session.version.major !== msg.version.major ||
      session.version.minor > msg.version.minor) {
      // if session version is incompatible with client version, do not resume
      session = null;
      sessionId = '';
    }
  }

  // no session found to resume, generate a new session ID
  if(sessionId.length === 0) {
    sessionId = forge.random.getBytes(32);
  }

  // update session
  c.session.id = sessionId;
  c.session.clientHelloVersion = msg.version;
  c.session.sp = {};
  if(session) {
    // use version and security parameters from resumed session
    c.version = c.session.version = session.version;
    c.session.sp = session.sp;
  } else {
    // use highest compatible minor version
    var version;
    for(var i = 1; i < tls.SupportedVersions.length; ++i) {
      version = tls.SupportedVersions[i];
      if(version.minor <= msg.version.minor) {
        break;
      }
    }
    c.version = {major: version.major, minor: version.minor};
    c.session.version = c.version;
  }

  // if a session is set, resume it
  if(session !== null) {
    // resuming session, expect a ChangeCipherSpec next
    c.expect = CCC;
    c.session.resuming = true;

    // get new client random
    c.session.sp.client_random = msg.random.bytes();
  } else {
    // not resuming, expect a Certificate or ClientKeyExchange
    c.expect = (c.verifyClient !== false) ? CCE : CKE;
    c.session.resuming = false;

    // create new security parameters
    tls.createSecurityParameters(c, msg);
  }

  // connection now open
  c.open = true;

  // queue server hello
  tls.queue(c, tls.createRecord(c, {
    type: tls.ContentType.handshake,
    data: tls.createServerHello(c)
  }));

  if(c.session.resuming) {
    // queue change cipher spec message
    tls.queue(c, tls.createRecord(c, {
      type: tls.ContentType.change_cipher_spec,
      data: tls.createChangeCipherSpec()
    }));

    // create pending state
    c.state.pending = tls.createConnectionState(c);

    // change current write state to pending write state
    c.state.current.write = c.state.pending.write;

    // queue finished
    tls.queue(c, tls.createRecord(c, {
      type: tls.ContentType.handshake,
      data: tls.createFinished(c)
    }));
  } else {
    // queue server certificate
    tls.queue(c, tls.createRecord(c, {
      type: tls.ContentType.handshake,
      data: tls.createCertificate(c)
    }));

    if(!c.fail) {
      // queue server key exchange
      tls.queue(c, tls.createRecord(c, {
        type: tls.ContentType.handshake,
        data: tls.createServerKeyExchange(c)
      }));

      // request client certificate if set
      if(c.verifyClient !== false) {
        // queue certificate request
        tls.queue(c, tls.createRecord(c, {
          type: tls.ContentType.handshake,
          data: tls.createCertificateRequest(c)
        }));
      }

      // queue server hello done
      tls.queue(c, tls.createRecord(c, {
        type: tls.ContentType.handshake,
        data: tls.createServerHelloDone(c)
      }));
    }
  }

  // send records
  tls.flush(c);

  // continue
  c.process();
};

/**
 * Called when a client receives a Certificate record.
 *
 * When this message will be sent:
 *   The server must send a certificate whenever the agreed-upon key exchange
 *   method is not an anonymous one. This message will always immediately
 *   follow the server hello message.
 *
 * Meaning of this message:
 *   The certificate type must be appropriate for the selected cipher suite's
 *   key exchange algorithm, and is generally an X.509v3 certificate. It must
 *   contain a key which matches the key exchange method, as follows. Unless
 *   otherwise specified, the signing algorithm for the certificate must be
 *   the same as the algorithm for the certificate key. Unless otherwise
 *   specified, the public key may be of any length.
 *
 * opaque ASN.1Cert<1..2^24-1>;
 * struct {
 *   ASN.1Cert certificate_list<1..2^24-1>;
 * } Certificate;
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
tls.handleCertificate = function(c, record, length) {
  // minimum of 3 bytes in message
  if(length < 3) {
    return c.error(c, {
      message: 'Invalid Certificate message. Message too short.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.illegal_parameter
      }
    });
  }

  var b = record.fragment;
  var msg = {
    certificate_list: readVector(b, 3)
  };

  /* The sender's certificate will be first in the list (chain), each
    subsequent one that follows will certify the previous one, but root
    certificates (self-signed) that specify the certificate authority may
    be omitted under the assumption that clients must already possess it. */
  var cert, asn1;
  var certs = [];
  try {
    while(msg.certificate_list.length() > 0) {
      // each entry in msg.certificate_list is a vector with 3 len bytes
      cert = readVector(msg.certificate_list, 3);
      asn1 = forge.asn1.fromDer(cert);
      cert = forge.pki.certificateFromAsn1(asn1, true);
      certs.push(cert);
    }
  } catch(ex) {
    return c.error(c, {
      message: 'Could not parse certificate list.',
      cause: ex,
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.bad_certificate
      }
    });
  }

  // ensure at least 1 certificate was provided if in client-mode
  // or if verifyClient was set to true to require a certificate
  // (as opposed to 'optional')
  var client = (c.entity === tls.ConnectionEnd.client);
  if((client || c.verifyClient === true) && certs.length === 0) {
    // error, no certificate
    c.error(c, {
      message: client ?
        'No server certificate provided.' :
        'No client certificate provided.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.illegal_parameter
      }
    });
  } else if(certs.length === 0) {
    // no certs to verify
    // expect a ServerKeyExchange or ClientKeyExchange message next
    c.expect = client ? SKE : CKE;
  } else {
    // save certificate in session
    if(client) {
      c.session.serverCertificate = certs[0];
    } else {
      c.session.clientCertificate = certs[0];
    }

    if(tls.verifyCertificateChain(c, certs)) {
      // expect a ServerKeyExchange or ClientKeyExchange message next
      c.expect = client ? SKE : CKE;
    }
  }

  // continue
  c.process();
};

/**
 * Called when a client receives a ServerKeyExchange record.
 *
 * When this message will be sent:
 *   This message will be sent immediately after the server certificate
 *   message (or the server hello message, if this is an anonymous
 *   negotiation).
 *
 *   The server key exchange message is sent by the server only when the
 *   server certificate message (if sent) does not contain enough data to
 *   allow the client to exchange a premaster secret.
 *
 * Meaning of this message:
 *   This message conveys cryptographic information to allow the client to
 *   communicate the premaster secret: either an RSA public key to encrypt
 *   the premaster secret with, or a Diffie-Hellman public key with which the
 *   client can complete a key exchange (with the result being the premaster
 *   secret.)
 *
 * enum {
 *   dhe_dss, dhe_rsa, dh_anon, rsa, dh_dss, dh_rsa
 * } KeyExchangeAlgorithm;
 *
 * struct {
 *   opaque dh_p<1..2^16-1>;
 *   opaque dh_g<1..2^16-1>;
 *   opaque dh_Ys<1..2^16-1>;
 * } ServerDHParams;
 *
 * struct {
 *   select(KeyExchangeAlgorithm) {
 *     case dh_anon:
 *       ServerDHParams params;
 *     case dhe_dss:
 *     case dhe_rsa:
 *       ServerDHParams params;
 *       digitally-signed struct {
 *         opaque client_random[32];
 *         opaque server_random[32];
 *         ServerDHParams params;
 *       } signed_params;
 *     case rsa:
 *     case dh_dss:
 *     case dh_rsa:
 *       struct {};
 *   };
 * } ServerKeyExchange;
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
tls.handleServerKeyExchange = function(c, record, length) {
  // this implementation only supports RSA, no Diffie-Hellman support
  // so any length > 0 is invalid
  if(length > 0) {
    return c.error(c, {
      message: 'Invalid key parameters. Only RSA is supported.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.unsupported_certificate
      }
    });
  }

  // expect an optional CertificateRequest message next
  c.expect = SCR;

  // continue
  c.process();
};

/**
 * Called when a client receives a ClientKeyExchange record.
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
tls.handleClientKeyExchange = function(c, record, length) {
  // this implementation only supports RSA, no Diffie-Hellman support
  // so any length < 48 is invalid
  if(length < 48) {
    return c.error(c, {
      message: 'Invalid key parameters. Only RSA is supported.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.unsupported_certificate
      }
    });
  }

  var b = record.fragment;
  var msg = {
    enc_pre_master_secret: readVector(b, 2).getBytes()
  };

  // do rsa decryption
  var privateKey = null;
  if(c.getPrivateKey) {
    try {
      privateKey = c.getPrivateKey(c, c.session.serverCertificate);
      privateKey = forge.pki.privateKeyFromPem(privateKey);
    } catch(ex) {
      c.error(c, {
        message: 'Could not get private key.',
        cause: ex,
        send: true,
        alert: {
          level: tls.Alert.Level.fatal,
          description: tls.Alert.Description.internal_error
        }
      });
    }
  }

  if(privateKey === null) {
    return c.error(c, {
      message: 'No private key set.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.internal_error
      }
    });
  }

  try {
    // decrypt 48-byte pre-master secret
    var sp = c.session.sp;
    sp.pre_master_secret = privateKey.decrypt(msg.enc_pre_master_secret);

    // ensure client hello version matches first 2 bytes
    var version = c.session.clientHelloVersion;
    if(version.major !== sp.pre_master_secret.charCodeAt(0) ||
      version.minor !== sp.pre_master_secret.charCodeAt(1)) {
      // error, do not send alert (see BLEI attack below)
      throw new Error('TLS version rollback attack detected.');
    }
  } catch(ex) {
    /* Note: Daniel Bleichenbacher [BLEI] can be used to attack a
      TLS server which is using PKCS#1 encoded RSA, so instead of
      failing here, we generate 48 random bytes and use that as
      the pre-master secret. */
    sp.pre_master_secret = forge.random.getBytes(48);
  }

  // expect a CertificateVerify message if a Certificate was received that
  // does not have fixed Diffie-Hellman params, otherwise expect
  // ChangeCipherSpec
  c.expect = CCC;
  if(c.session.clientCertificate !== null) {
    // only RSA support, so expect CertificateVerify
    // TODO: support Diffie-Hellman
    c.expect = CCV;
  }

  // continue
  c.process();
};

/**
 * Called when a client receives a CertificateRequest record.
 *
 * When this message will be sent:
 *   A non-anonymous server can optionally request a certificate from the
 *   client, if appropriate for the selected cipher suite. This message, if
 *   sent, will immediately follow the Server Key Exchange message (if it is
 *   sent; otherwise, the Server Certificate message).
 *
 * enum {
 *   rsa_sign(1), dss_sign(2), rsa_fixed_dh(3), dss_fixed_dh(4),
 *   rsa_ephemeral_dh_RESERVED(5), dss_ephemeral_dh_RESERVED(6),
 *   fortezza_dms_RESERVED(20), (255)
 * } ClientCertificateType;
 *
 * opaque DistinguishedName<1..2^16-1>;
 *
 * struct {
 *   ClientCertificateType certificate_types<1..2^8-1>;
 *   SignatureAndHashAlgorithm supported_signature_algorithms<2^16-1>;
 *   DistinguishedName certificate_authorities<0..2^16-1>;
 * } CertificateRequest;
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
tls.handleCertificateRequest = function(c, record, length) {
  // minimum of 3 bytes in message
  if(length < 3) {
    return c.error(c, {
      message: 'Invalid CertificateRequest. Message too short.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.illegal_parameter
      }
    });
  }

  // TODO: TLS 1.2+ has different format including
  // SignatureAndHashAlgorithm after cert types
  var b = record.fragment;
  var msg = {
    certificate_types: readVector(b, 1),
    certificate_authorities: readVector(b, 2)
  };

  // save certificate request in session
  c.session.certificateRequest = msg;

  // expect a ServerHelloDone message next
  c.expect = SHD;

  // continue
  c.process();
};

/**
 * Called when a server receives a CertificateVerify record.
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
tls.handleCertificateVerify = function(c, record, length) {
  if(length < 2) {
    return c.error(c, {
      message: 'Invalid CertificateVerify. Message too short.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.illegal_parameter
      }
    });
  }

  // rewind to get full bytes for message so it can be manually
  // digested below (special case for CertificateVerify messages because
  // they must be digested *after* handling as opposed to all others)
  var b = record.fragment;
  b.read -= 4;
  var msgBytes = b.bytes();
  b.read += 4;

  var msg = {
    signature: readVector(b, 2).getBytes()
  };

  // TODO: add support for DSA

  // generate data to verify
  var verify = forge.util.createBuffer();
  verify.putBuffer(c.session.md5.digest());
  verify.putBuffer(c.session.sha1.digest());
  verify = verify.getBytes();

  try {
    var cert = c.session.clientCertificate;
    /*b = forge.pki.rsa.decrypt(
      msg.signature, cert.publicKey, true, verify.length);
    if(b !== verify) {*/
    if(!cert.publicKey.verify(verify, msg.signature, 'NONE')) {
      throw new Error('CertificateVerify signature does not match.');
    }

    // digest message now that it has been handled
    c.session.md5.update(msgBytes);
    c.session.sha1.update(msgBytes);
  } catch(ex) {
    return c.error(c, {
      message: 'Bad signature in CertificateVerify.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.handshake_failure
      }
    });
  }

  // expect ChangeCipherSpec
  c.expect = CCC;

  // continue
  c.process();
};

/**
 * Called when a client receives a ServerHelloDone record.
 *
 * When this message will be sent:
 *   The server hello done message is sent by the server to indicate the end
 *   of the server hello and associated messages. After sending this message
 *   the server will wait for a client response.
 *
 * Meaning of this message:
 *   This message means that the server is done sending messages to support
 *   the key exchange, and the client can proceed with its phase of the key
 *   exchange.
 *
 *   Upon receipt of the server hello done message the client should verify
 *   that the server provided a valid certificate if required and check that
 *   the server hello parameters are acceptable.
 *
 * struct {} ServerHelloDone;
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
tls.handleServerHelloDone = function(c, record, length) {
  // len must be 0 bytes
  if(length > 0) {
    return c.error(c, {
      message: 'Invalid ServerHelloDone message. Invalid length.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.record_overflow
      }
    });
  }

  if(c.serverCertificate === null) {
    // no server certificate was provided
    var error = {
      message: 'No server certificate provided. Not enough security.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.insufficient_security
      }
    };

    // call application callback
    var depth = 0;
    var ret = c.verify(c, error.alert.description, depth, []);
    if(ret !== true) {
      // check for custom alert info
      if(ret || ret === 0) {
        // set custom message and alert description
        if(typeof ret === 'object' && !forge.util.isArray(ret)) {
          if(ret.message) {
            error.message = ret.message;
          }
          if(ret.alert) {
            error.alert.description = ret.alert;
          }
        } else if(typeof ret === 'number') {
          // set custom alert description
          error.alert.description = ret;
        }
      }

      // send error
      return c.error(c, error);
    }
  }

  // create client certificate message if requested
  if(c.session.certificateRequest !== null) {
    record = tls.createRecord(c, {
      type: tls.ContentType.handshake,
      data: tls.createCertificate(c)
    });
    tls.queue(c, record);
  }

  // create client key exchange message
  record = tls.createRecord(c, {
     type: tls.ContentType.handshake,
     data: tls.createClientKeyExchange(c)
  });
  tls.queue(c, record);

  // expect no messages until the following callback has been called
  c.expect = SER;

  // create callback to handle client signature (for client-certs)
  var callback = function(c, signature) {
    if(c.session.certificateRequest !== null &&
      c.session.clientCertificate !== null) {
      // create certificate verify message
      tls.queue(c, tls.createRecord(c, {
        type: tls.ContentType.handshake,
        data: tls.createCertificateVerify(c, signature)
      }));
    }

    // create change cipher spec message
    tls.queue(c, tls.createRecord(c, {
      type: tls.ContentType.change_cipher_spec,
      data: tls.createChangeCipherSpec()
    }));

    // create pending state
    c.state.pending = tls.createConnectionState(c);

    // change current write state to pending write state
    c.state.current.write = c.state.pending.write;

    // create finished message
    tls.queue(c, tls.createRecord(c, {
      type: tls.ContentType.handshake,
      data: tls.createFinished(c)
    }));

    // expect a server ChangeCipherSpec message next
    c.expect = SCC;

    // send records
    tls.flush(c);

    // continue
    c.process();
  };

  // if there is no certificate request or no client certificate, do
  // callback immediately
  if(c.session.certificateRequest === null ||
    c.session.clientCertificate === null) {
    return callback(c, null);
  }

  // otherwise get the client signature
  tls.getClientSignature(c, callback);
};

/**
 * Called when a ChangeCipherSpec record is received.
 *
 * @param c the connection.
 * @param record the record.
 */
tls.handleChangeCipherSpec = function(c, record) {
  if(record.fragment.getByte() !== 0x01) {
    return c.error(c, {
      message: 'Invalid ChangeCipherSpec message received.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.illegal_parameter
      }
    });
  }

  // create pending state if:
  // 1. Resuming session in client mode OR
  // 2. NOT resuming session in server mode
  var client = (c.entity === tls.ConnectionEnd.client);
  if((c.session.resuming && client) || (!c.session.resuming && !client)) {
    c.state.pending = tls.createConnectionState(c);
  }

  // change current read state to pending read state
  c.state.current.read = c.state.pending.read;

  // clear pending state if:
  // 1. NOT resuming session in client mode OR
  // 2. resuming a session in server mode
  if((!c.session.resuming && client) || (c.session.resuming && !client)) {
    c.state.pending = null;
  }

  // expect a Finished record next
  c.expect = client ? SFI : CFI;

  // continue
  c.process();
};

/**
 * Called when a Finished record is received.
 *
 * When this message will be sent:
 *   A finished message is always sent immediately after a change
 *   cipher spec message to verify that the key exchange and
 *   authentication processes were successful. It is essential that a
 *   change cipher spec message be received between the other
 *   handshake messages and the Finished message.
 *
 * Meaning of this message:
 *   The finished message is the first protected with the just-
 *   negotiated algorithms, keys, and secrets. Recipients of finished
 *   messages must verify that the contents are correct.  Once a side
 *   has sent its Finished message and received and validated the
 *   Finished message from its peer, it may begin to send and receive
 *   application data over the connection.
 *
 * struct {
 *   opaque verify_data[verify_data_length];
 * } Finished;
 *
 * verify_data
 *   PRF(master_secret, finished_label, Hash(handshake_messages))
 *     [0..verify_data_length-1];
 *
 * finished_label
 *   For Finished messages sent by the client, the string
 *   "client finished". For Finished messages sent by the server, the
 *   string "server finished".
 *
 * verify_data_length depends on the cipher suite. If it is not specified
 * by the cipher suite, then it is 12. Versions of TLS < 1.2 always used
 * 12 bytes.
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
tls.handleFinished = function(c, record, length) {
  // rewind to get full bytes for message so it can be manually
  // digested below (special case for Finished messages because they
  // must be digested *after* handling as opposed to all others)
  var b = record.fragment;
  b.read -= 4;
  var msgBytes = b.bytes();
  b.read += 4;

  // message contains only verify_data
  var vd = record.fragment.getBytes();

  // ensure verify data is correct
  b = forge.util.createBuffer();
  b.putBuffer(c.session.md5.digest());
  b.putBuffer(c.session.sha1.digest());

  // set label based on entity type
  var client = (c.entity === tls.ConnectionEnd.client);
  var label = client ? 'server finished' : 'client finished';

  // TODO: determine prf function and verify length for TLS 1.2
  var sp = c.session.sp;
  var vdl = 12;
  var prf = prf_TLS1;
  b = prf(sp.master_secret, label, b.getBytes(), vdl);
  if(b.getBytes() !== vd) {
    return c.error(c, {
      message: 'Invalid verify_data in Finished message.',
      send: true,
      alert: {
        level: tls.Alert.Level.fatal,
        description: tls.Alert.Description.decrypt_error
      }
    });
  }

  // digest finished message now that it has been handled
  c.session.md5.update(msgBytes);
  c.session.sha1.update(msgBytes);

  // resuming session as client or NOT resuming session as server
  if((c.session.resuming && client) || (!c.session.resuming && !client)) {
    // create change cipher spec message
    tls.queue(c, tls.createRecord(c, {
      type: tls.ContentType.change_cipher_spec,
      data: tls.createChangeCipherSpec()
    }));

    // change current write state to pending write state, clear pending
    c.state.current.write = c.state.pending.write;
    c.state.pending = null;

    // create finished message
    tls.queue(c, tls.createRecord(c, {
      type: tls.ContentType.handshake,
      data: tls.createFinished(c)
    }));
  }

  // expect application data next
  c.expect = client ? SAD : CAD;

  // handshake complete
  c.handshaking = false;
  ++c.handshakes;

  // save access to peer certificate
  c.peerCertificate = client ?
    c.session.serverCertificate : c.session.clientCertificate;

  // send records
  tls.flush(c);

  // now connected
  c.isConnected = true;
  c.connected(c);

  // continue
  c.process();
};

/**
 * Called when an Alert record is received.
 *
 * @param c the connection.
 * @param record the record.
 */
tls.handleAlert = function(c, record) {
  // read alert
  var b = record.fragment;
  var alert = {
    level: b.getByte(),
    description: b.getByte()
  };

  // TODO: consider using a table?
  // get appropriate message
  var msg;
  switch(alert.description) {
  case tls.Alert.Description.close_notify:
    msg = 'Connection closed.';
    break;
  case tls.Alert.Description.unexpected_message:
    msg = 'Unexpected message.';
    break;
  case tls.Alert.Description.bad_record_mac:
    msg = 'Bad record MAC.';
    break;
  case tls.Alert.Description.decryption_failed:
    msg = 'Decryption failed.';
    break;
  case tls.Alert.Description.record_overflow:
    msg = 'Record overflow.';
    break;
  case tls.Alert.Description.decompression_failure:
    msg = 'Decompression failed.';
    break;
  case tls.Alert.Description.handshake_failure:
    msg = 'Handshake failure.';
    break;
  case tls.Alert.Description.bad_certificate:
    msg = 'Bad certificate.';
    break;
  case tls.Alert.Description.unsupported_certificate:
    msg = 'Unsupported certificate.';
    break;
  case tls.Alert.Description.certificate_revoked:
    msg = 'Certificate revoked.';
    break;
  case tls.Alert.Description.certificate_expired:
    msg = 'Certificate expired.';
    break;
  case tls.Alert.Description.certificate_unknown:
    msg = 'Certificate unknown.';
    break;
  case tls.Alert.Description.illegal_parameter:
    msg = 'Illegal parameter.';
    break;
  case tls.Alert.Description.unknown_ca:
    msg = 'Unknown certificate authority.';
    break;
  case tls.Alert.Description.access_denied:
    msg = 'Access denied.';
    break;
  case tls.Alert.Description.decode_error:
    msg = 'Decode error.';
    break;
  case tls.Alert.Description.decrypt_error:
    msg = 'Decrypt error.';
    break;
  case tls.Alert.Description.export_restriction:
    msg = 'Export restriction.';
    break;
  case tls.Alert.Description.protocol_version:
    msg = 'Unsupported protocol version.';
    break;
  case tls.Alert.Description.insufficient_security:
    msg = 'Insufficient security.';
    break;
  case tls.Alert.Description.internal_error:
    msg = 'Internal error.';
    break;
  case tls.Alert.Description.user_canceled:
    msg = 'User canceled.';
    break;
  case tls.Alert.Description.no_renegotiation:
    msg = 'Renegotiation not supported.';
    break;
  default:
    msg = 'Unknown error.';
    break;
  }

  // close connection on close_notify, not an error
  if(alert.description === tls.Alert.Description.close_notify) {
    return c.close();
  }

  // call error handler
  c.error(c, {
    message: msg,
    send: false,
    // origin is the opposite end
    origin: (c.entity === tls.ConnectionEnd.client) ? 'server' : 'client',
    alert: alert
  });

  // continue
  c.process();
};

/**
 * Called when a Handshake record is received.
 *
 * @param c the connection.
 * @param record the record.
 */
tls.handleHandshake = function(c, record) {
  // get the handshake type and message length
  var b = record.fragment;
  var type = b.getByte();
  var length = b.getInt24();

  // see if the record fragment doesn't yet contain the full message
  if(length > b.length()) {
    // cache the record, clear its fragment, and reset the buffer read
    // pointer before the type and length were read
    c.fragmented = record;
    record.fragment = forge.util.createBuffer();
    b.read -= 4;

    // continue
    return c.process();
  }

  // full message now available, clear cache, reset read pointer to
  // before type and length
  c.fragmented = null;
  b.read -= 4;

  // save the handshake bytes for digestion after handler is found
  // (include type and length of handshake msg)
  var bytes = b.bytes(length + 4);

  // restore read pointer
  b.read += 4;

  // handle expected message
  if(type in hsTable[c.entity][c.expect]) {
    // initialize server session
    if(c.entity === tls.ConnectionEnd.server && !c.open && !c.fail) {
      c.handshaking = true;
      c.session = {
        version: null,
        extensions: {
          server_name: {
            serverNameList: []
          }
        },
        cipherSuite: null,
        compressionMethod: null,
        serverCertificate: null,
        clientCertificate: null,
        md5: forge.md.md5.create(),
        sha1: forge.md.sha1.create()
      };
    }

    /* Update handshake messages digest. Finished and CertificateVerify
      messages are not digested here. They can't be digested as part of
      the verify_data that they contain. These messages are manually
      digested in their handlers. HelloRequest messages are simply never
      included in the handshake message digest according to spec. */
    if(type !== tls.HandshakeType.hello_request &&
      type !== tls.HandshakeType.certificate_verify &&
      type !== tls.HandshakeType.finished) {
      c.session.md5.update(bytes);
      c.session.sha1.update(bytes);
    }

    // handle specific handshake type record
    hsTable[c.entity][c.expect][type](c, record, length);
  } else {
    // unexpected record
    tls.handleUnexpected(c, record);
  }
};

/**
 * Called when an ApplicationData record is received.
 *
 * @param c the connection.
 * @param record the record.
 */
tls.handleApplicationData = function(c, record) {
  // buffer data, notify that its ready
  c.data.putBuffer(record.fragment);
  c.dataReady(c);

  // continue
  c.process();
};

/**
 * Called when a Heartbeat record is received.
 *
 * @param c the connection.
 * @param record the record.
 */
tls.handleHeartbeat = function(c, record) {
  // get the heartbeat type and payload
  var b = record.fragment;
  var type = b.getByte();
  var length = b.getInt16();
  var payload = b.getBytes(length);

  if(type === tls.HeartbeatMessageType.heartbeat_request) {
    // discard request during handshake or if length is too large
    if(c.handshaking || length > payload.length) {
      // continue
      return c.process();
    }
    // retransmit payload
    tls.queue(c, tls.createRecord(c, {
      type: tls.ContentType.heartbeat,
      data: tls.createHeartbeat(
        tls.HeartbeatMessageType.heartbeat_response, payload)
    }));
    tls.flush(c);
  } else if(type === tls.HeartbeatMessageType.heartbeat_response) {
    // check payload against expected payload, discard heartbeat if no match
    if(payload !== c.expectedHeartbeatPayload) {
      // continue
      return c.process();
    }

    // notify that a valid heartbeat was received
    if(c.heartbeatReceived) {
      c.heartbeatReceived(c, forge.util.createBuffer(payload));
    }
  }

  // continue
  c.process();
};

/**
 * The transistional state tables for receiving TLS records. It maps the
 * current TLS engine state and a received record to a function to handle the
 * record and update the state.
 *
 * For instance, if the current state is SHE, then the TLS engine is expecting
 * a ServerHello record. Once a record is received, the handler function is
 * looked up using the state SHE and the record's content type.
 *
 * The resulting function will either be an error handler or a record handler.
 * The function will take whatever action is appropriate and update the state
 * for the next record.
 *
 * The states are all based on possible server record types. Note that the
 * client will never specifically expect to receive a HelloRequest or an alert
 * from the server so there is no state that reflects this. These messages may
 * occur at any time.
 *
 * There are two tables for mapping states because there is a second tier of
 * types for handshake messages. Once a record with a content type of handshake
 * is received, the handshake record handler will look up the handshake type in
 * the secondary map to get its appropriate handler.
 *
 * Valid message orders are as follows:
 *
 * =======================FULL HANDSHAKE======================
 * Client                                               Server
 *
 * ClientHello                  -------->
 *                                                 ServerHello
 *                                                Certificate*
 *                                          ServerKeyExchange*
 *                                         CertificateRequest*
 *                              <--------      ServerHelloDone
 * Certificate*
 * ClientKeyExchange
 * CertificateVerify*
 * [ChangeCipherSpec]
 * Finished                     -------->
 *                                          [ChangeCipherSpec]
 *                              <--------             Finished
 * Application Data             <------->     Application Data
 *
 * =====================SESSION RESUMPTION=====================
 * Client                                                Server
 *
 * ClientHello                   -------->
 *                                                  ServerHello
 *                                           [ChangeCipherSpec]
 *                               <--------             Finished
 * [ChangeCipherSpec]
 * Finished                      -------->
 * Application Data              <------->     Application Data
 */
// client expect states (indicate which records are expected to be received)
var SHE = 0; // rcv server hello
var SCE = 1; // rcv server certificate
var SKE = 2; // rcv server key exchange
var SCR = 3; // rcv certificate request
var SHD = 4; // rcv server hello done
var SCC = 5; // rcv change cipher spec
var SFI = 6; // rcv finished
var SAD = 7; // rcv application data
var SER = 8; // not expecting any messages at this point

// server expect states
var CHE = 0; // rcv client hello
var CCE = 1; // rcv client certificate
var CKE = 2; // rcv client key exchange
var CCV = 3; // rcv certificate verify
var CCC = 4; // rcv change cipher spec
var CFI = 5; // rcv finished
var CAD = 6; // rcv application data
var CER = 7; // not expecting any messages at this point

// map client current expect state and content type to function
var __ = tls.handleUnexpected;
var R0 = tls.handleChangeCipherSpec;
var R1 = tls.handleAlert;
var R2 = tls.handleHandshake;
var R3 = tls.handleApplicationData;
var R4 = tls.handleHeartbeat;
var ctTable = [];
ctTable[tls.ConnectionEnd.client] = [
//      CC,AL,HS,AD,HB
/*SHE*/[__,R1,R2,__,R4],
/*SCE*/[__,R1,R2,__,R4],
/*SKE*/[__,R1,R2,__,R4],
/*SCR*/[__,R1,R2,__,R4],
/*SHD*/[__,R1,R2,__,R4],
/*SCC*/[R0,R1,__,__,R4],
/*SFI*/[__,R1,R2,__,R4],
/*SAD*/[__,R1,R2,R3,R4],
/*SER*/[__,R1,R2,__,R4]
];

// map server current expect state and content type to function
ctTable[tls.ConnectionEnd.server] = [
//      CC,AL,HS,AD
/*CHE*/[__,R1,R2,__,R4],
/*CCE*/[__,R1,R2,__,R4],
/*CKE*/[__,R1,R2,__,R4],
/*CCV*/[__,R1,R2,__,R4],
/*CCC*/[R0,R1,__,__,R4],
/*CFI*/[__,R1,R2,__,R4],
/*CAD*/[__,R1,R2,R3,R4],
/*CER*/[__,R1,R2,__,R4]
];

// map client current expect state and handshake type to function
var H0 = tls.handleHelloRequest;
var H1 = tls.handleServerHello;
var H2 = tls.handleCertificate;
var H3 = tls.handleServerKeyExchange;
var H4 = tls.handleCertificateRequest;
var H5 = tls.handleServerHelloDone;
var H6 = tls.handleFinished;
var hsTable = [];
hsTable[tls.ConnectionEnd.client] = [
//      HR,01,SH,03,04,05,06,07,08,09,10,SC,SK,CR,HD,15,CK,17,18,19,FI
/*SHE*/[__,__,H1,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
/*SCE*/[H0,__,__,__,__,__,__,__,__,__,__,H2,H3,H4,H5,__,__,__,__,__,__],
/*SKE*/[H0,__,__,__,__,__,__,__,__,__,__,__,H3,H4,H5,__,__,__,__,__,__],
/*SCR*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,H4,H5,__,__,__,__,__,__],
/*SHD*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,H5,__,__,__,__,__,__],
/*SCC*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
/*SFI*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H6],
/*SAD*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
/*SER*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__]
];

// map server current expect state and handshake type to function
// Note: CAD[CH] does not map to FB because renegotation is prohibited
var H7 = tls.handleClientHello;
var H8 = tls.handleClientKeyExchange;
var H9 = tls.handleCertificateVerify;
hsTable[tls.ConnectionEnd.server] = [
//      01,CH,02,03,04,05,06,07,08,09,10,CC,12,13,14,CV,CK,17,18,19,FI
/*CHE*/[__,H7,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
/*CCE*/[__,__,__,__,__,__,__,__,__,__,__,H2,__,__,__,__,__,__,__,__,__],
/*CKE*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H8,__,__,__,__],
/*CCV*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H9,__,__,__,__,__],
/*CCC*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
/*CFI*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H6],
/*CAD*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
/*CER*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__]
];

/**
 * Generates the master_secret and keys using the given security parameters.
 *
 * The security parameters for a TLS connection state are defined as such:
 *
 * struct {
 *   ConnectionEnd          entity;
 *   PRFAlgorithm           prf_algorithm;
 *   BulkCipherAlgorithm    bulk_cipher_algorithm;
 *   CipherType             cipher_type;
 *   uint8                  enc_key_length;
 *   uint8                  block_length;
 *   uint8                  fixed_iv_length;
 *   uint8                  record_iv_length;
 *   MACAlgorithm           mac_algorithm;
 *   uint8                  mac_length;
 *   uint8                  mac_key_length;
 *   CompressionMethod      compression_algorithm;
 *   opaque                 master_secret[48];
 *   opaque                 client_random[32];
 *   opaque                 server_random[32];
 * } SecurityParameters;
 *
 * Note that this definition is from TLS 1.2. In TLS 1.0 some of these
 * parameters are ignored because, for instance, the PRFAlgorithm is a
 * builtin-fixed algorithm combining iterations of MD5 and SHA-1 in TLS 1.0.
 *
 * The Record Protocol requires an algorithm to generate keys required by the
 * current connection state.
 *
 * The master secret is expanded into a sequence of secure bytes, which is then
 * split to a client write MAC key, a server write MAC key, a client write
 * encryption key, and a server write encryption key. In TLS 1.0 a client write
 * IV and server write IV are also generated. Each of these is generated from
 * the byte sequence in that order. Unused values are empty. In TLS 1.2, some
 * AEAD ciphers may additionally require a client write IV and a server write
 * IV (see Section 6.2.3.3).
 *
 * When keys, MAC keys, and IVs are generated, the master secret is used as an
 * entropy source.
 *
 * To generate the key material, compute:
 *
 * master_secret = PRF(pre_master_secret, "master secret",
 *                     ClientHello.random + ServerHello.random)
 *
 * key_block = PRF(SecurityParameters.master_secret,
 *                 "key expansion",
 *                 SecurityParameters.server_random +
 *                 SecurityParameters.client_random);
 *
 * until enough output has been generated. Then, the key_block is
 * partitioned as follows:
 *
 * client_write_MAC_key[SecurityParameters.mac_key_length]
 * server_write_MAC_key[SecurityParameters.mac_key_length]
 * client_write_key[SecurityParameters.enc_key_length]
 * server_write_key[SecurityParameters.enc_key_length]
 * client_write_IV[SecurityParameters.fixed_iv_length]
 * server_write_IV[SecurityParameters.fixed_iv_length]
 *
 * In TLS 1.2, the client_write_IV and server_write_IV are only generated for
 * implicit nonce techniques as described in Section 3.2.1 of [AEAD]. This
 * implementation uses TLS 1.0 so IVs are generated.
 *
 * Implementation note: The currently defined cipher suite which requires the
 * most material is AES_256_CBC_SHA256. It requires 2 x 32 byte keys and 2 x 32
 * byte MAC keys, for a total 128 bytes of key material. In TLS 1.0 it also
 * requires 2 x 16 byte IVs, so it actually takes 160 bytes of key material.
 *
 * @param c the connection.
 * @param sp the security parameters to use.
 *
 * @return the security keys.
 */
tls.generateKeys = function(c, sp) {
  // TLS_RSA_WITH_AES_128_CBC_SHA (required to be compliant with TLS 1.2) &
  // TLS_RSA_WITH_AES_256_CBC_SHA are the only cipher suites implemented
  // at present

  // TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA is required to be compliant with
  // TLS 1.0 but we don't care right now because AES is better and we have
  // an implementation for it

  // TODO: TLS 1.2 implementation
  /*
  // determine the PRF
  var prf;
  switch(sp.prf_algorithm) {
  case tls.PRFAlgorithm.tls_prf_sha256:
    prf = prf_sha256;
    break;
  default:
    // should never happen
    throw new Error('Invalid PRF');
  }
  */

  // TLS 1.0/1.1 implementation
  var prf = prf_TLS1;

  // concatenate server and client random
  var random = sp.client_random + sp.server_random;

  // only create master secret if session is new
  if(!c.session.resuming) {
    // create master secret, clean up pre-master secret
    sp.master_secret = prf(
      sp.pre_master_secret, 'master secret', random, 48).bytes();
    sp.pre_master_secret = null;
  }

  // generate the amount of key material needed
  random = sp.server_random + sp.client_random;
  var length = 2 * sp.mac_key_length + 2 * sp.enc_key_length;

  // include IV for TLS/1.0
  var tls10 = (c.version.major === tls.Versions.TLS_1_0.major &&
    c.version.minor === tls.Versions.TLS_1_0.minor);
  if(tls10) {
    length += 2 * sp.fixed_iv_length;
  }
  var km = prf(sp.master_secret, 'key expansion', random, length);

  // split the key material into the MAC and encryption keys
  var rval = {
    client_write_MAC_key: km.getBytes(sp.mac_key_length),
    server_write_MAC_key: km.getBytes(sp.mac_key_length),
    client_write_key: km.getBytes(sp.enc_key_length),
    server_write_key: km.getBytes(sp.enc_key_length)
  };

  // include TLS 1.0 IVs
  if(tls10) {
    rval.client_write_IV = km.getBytes(sp.fixed_iv_length);
    rval.server_write_IV = km.getBytes(sp.fixed_iv_length);
  }

  return rval;
};

/**
 * Creates a new initialized TLS connection state. A connection state has
 * a read mode and a write mode.
 *
 * compression state:
 *   The current state of the compression algorithm.
 *
 * cipher state:
 *   The current state of the encryption algorithm. This will consist of the
 *   scheduled key for that connection. For stream ciphers, this will also
 *   contain whatever state information is necessary to allow the stream to
 *   continue to encrypt or decrypt data.
 *
 * MAC key:
 *   The MAC key for the connection.
 *
 * sequence number:
 *   Each connection state contains a sequence number, which is maintained
 *   separately for read and write states. The sequence number MUST be set to
 *   zero whenever a connection state is made the active state. Sequence
 *   numbers are of type uint64 and may not exceed 2^64-1. Sequence numbers do
 *   not wrap. If a TLS implementation would need to wrap a sequence number,
 *   it must renegotiate instead. A sequence number is incremented after each
 *   record: specifically, the first record transmitted under a particular
 *   connection state MUST use sequence number 0.
 *
 * @param c the connection.
 *
 * @return the new initialized TLS connection state.
 */
tls.createConnectionState = function(c) {
  var client = (c.entity === tls.ConnectionEnd.client);

  var createMode = function() {
    var mode = {
      // two 32-bit numbers, first is most significant
      sequenceNumber: [0, 0],
      macKey: null,
      macLength: 0,
      macFunction: null,
      cipherState: null,
      cipherFunction: function(record) {return true;},
      compressionState: null,
      compressFunction: function(record) {return true;},
      updateSequenceNumber: function() {
        if(mode.sequenceNumber[1] === 0xFFFFFFFF) {
          mode.sequenceNumber[1] = 0;
          ++mode.sequenceNumber[0];
        } else {
          ++mode.sequenceNumber[1];
        }
      }
    };
    return mode;
  };
  var state = {
    read: createMode(),
    write: createMode()
  };

  // update function in read mode will decrypt then decompress a record
  state.read.update = function(c, record) {
    if(!state.read.cipherFunction(record, state.read)) {
      c.error(c, {
        message: 'Could not decrypt record or bad MAC.',
        send: true,
        alert: {
          level: tls.Alert.Level.fatal,
          // doesn't matter if decryption failed or MAC was
          // invalid, return the same error so as not to reveal
          // which one occurred
          description: tls.Alert.Description.bad_record_mac
        }
      });
    } else if(!state.read.compressFunction(c, record, state.read)) {
      c.error(c, {
        message: 'Could not decompress record.',
        send: true,
        alert: {
          level: tls.Alert.Level.fatal,
          description: tls.Alert.Description.decompression_failure
        }
      });
    }
    return !c.fail;
  };

  // update function in write mode will compress then encrypt a record
  state.write.update = function(c, record) {
    if(!state.write.compressFunction(c, record, state.write)) {
      // error, but do not send alert since it would require
      // compression as well
      c.error(c, {
        message: 'Could not compress record.',
        send: false,
        alert: {
          level: tls.Alert.Level.fatal,
          description: tls.Alert.Description.internal_error
        }
      });
    } else if(!state.write.cipherFunction(record, state.write)) {
      // error, but do not send alert since it would require
      // encryption as well
      c.error(c, {
        message: 'Could not encrypt record.',
        send: false,
        alert: {
          level: tls.Alert.Level.fatal,
          description: tls.Alert.Description.internal_error
        }
      });
    }
    return !c.fail;
  };

  // handle security parameters
  if(c.session) {
    var sp = c.session.sp;
    c.session.cipherSuite.initSecurityParameters(sp);

    // generate keys
    sp.keys = tls.generateKeys(c, sp);
    state.read.macKey = client ?
      sp.keys.server_write_MAC_key : sp.keys.client_write_MAC_key;
    state.write.macKey = client ?
      sp.keys.client_write_MAC_key : sp.keys.server_write_MAC_key;

    // cipher suite setup
    c.session.cipherSuite.initConnectionState(state, c, sp);

    // compression setup
    switch(sp.compression_algorithm) {
    case tls.CompressionMethod.none:
      break;
    case tls.CompressionMethod.deflate:
      state.read.compressFunction = inflate;
      state.write.compressFunction = deflate;
      break;
    default:
      throw new Error('Unsupported compression algorithm.');
    }
  }

  return state;
};

/**
 * Creates a Random structure.
 *
 * struct {
 *   uint32 gmt_unix_time;
 *   opaque random_bytes[28];
 * } Random;
 *
 * gmt_unix_time:
 *   The current time and date in standard UNIX 32-bit format (seconds since
 *   the midnight starting Jan 1, 1970, UTC, ignoring leap seconds) according
 *   to the sender's internal clock. Clocks are not required to be set
 *   correctly by the basic TLS protocol; higher-level or application
 *   protocols may define additional requirements. Note that, for historical
 *   reasons, the data element is named using GMT, the predecessor of the
 *   current worldwide time base, UTC.
 * random_bytes:
 *   28 bytes generated by a secure random number generator.
 *
 * @return the Random structure as a byte array.
 */
tls.createRandom = function() {
  // get UTC milliseconds
  var d = new Date();
  var utc = +d + d.getTimezoneOffset() * 60000;
  var rval = forge.util.createBuffer();
  rval.putInt32(utc);
  rval.putBytes(forge.random.getBytes(28));
  return rval;
};

/**
 * Creates a TLS record with the given type and data.
 *
 * @param c the connection.
 * @param options:
 *   type: the record type.
 *   data: the plain text data in a byte buffer.
 *
 * @return the created record.
 */
tls.createRecord = function(c, options) {
  if(!options.data) {
    return null;
  }
  var record = {
    type: options.type,
    version: {
      major: c.version.major,
      minor: c.version.minor
    },
    length: options.data.length(),
    fragment: options.data
  };
  return record;
};

/**
 * Creates a TLS alert record.
 *
 * @param c the connection.
 * @param alert:
 *   level: the TLS alert level.
 *   description: the TLS alert description.
 *
 * @return the created alert record.
 */
tls.createAlert = function(c, alert) {
  var b = forge.util.createBuffer();
  b.putByte(alert.level);
  b.putByte(alert.description);
  return tls.createRecord(c, {
    type: tls.ContentType.alert,
    data: b
  });
};

/* The structure of a TLS handshake message.
 *
 * struct {
 *    HandshakeType msg_type;    // handshake type
 *    uint24 length;             // bytes in message
 *    select(HandshakeType) {
 *       case hello_request:       HelloRequest;
 *       case client_hello:        ClientHello;
 *       case server_hello:        ServerHello;
 *       case certificate:         Certificate;
 *       case server_key_exchange: ServerKeyExchange;
 *       case certificate_request: CertificateRequest;
 *       case server_hello_done:   ServerHelloDone;
 *       case certificate_verify:  CertificateVerify;
 *       case client_key_exchange: ClientKeyExchange;
 *       case finished:            Finished;
 *    } body;
 * } Handshake;
 */

/**
 * Creates a ClientHello message.
 *
 * opaque SessionID<0..32>;
 * enum { null(0), deflate(1), (255) } CompressionMethod;
 * uint8 CipherSuite[2];
 *
 * struct {
 *   ProtocolVersion client_version;
 *   Random random;
 *   SessionID session_id;
 *   CipherSuite cipher_suites<2..2^16-2>;
 *   CompressionMethod compression_methods<1..2^8-1>;
 *   select(extensions_present) {
 *     case false:
 *       struct {};
 *     case true:
 *       Extension extensions<0..2^16-1>;
 *   };
 * } ClientHello;
 *
 * The extension format for extended client hellos and server hellos is:
 *
 * struct {
 *   ExtensionType extension_type;
 *   opaque extension_data<0..2^16-1>;
 * } Extension;
 *
 * Here:
 *
 * - "extension_type" identifies the particular extension type.
 * - "extension_data" contains information specific to the particular
 * extension type.
 *
 * The extension types defined in this document are:
 *
 * enum {
 *   server_name(0), max_fragment_length(1),
 *   client_certificate_url(2), trusted_ca_keys(3),
 *   truncated_hmac(4), status_request(5), (65535)
 * } ExtensionType;
 *
 * @param c the connection.
 *
 * @return the ClientHello byte buffer.
 */
tls.createClientHello = function(c) {
  // save hello version
  c.session.clientHelloVersion = {
    major: c.version.major,
    minor: c.version.minor
  };

  // create supported cipher suites
  var cipherSuites = forge.util.createBuffer();
  for(var i = 0; i < c.cipherSuites.length; ++i) {
    var cs = c.cipherSuites[i];
    cipherSuites.putByte(cs.id[0]);
    cipherSuites.putByte(cs.id[1]);
  }
  var cSuites = cipherSuites.length();

  // create supported compression methods, null always supported, but
  // also support deflate if connection has inflate and deflate methods
  var compressionMethods = forge.util.createBuffer();
  compressionMethods.putByte(tls.CompressionMethod.none);
  // FIXME: deflate support disabled until issues with raw deflate data
  // without zlib headers are resolved
  /*
  if(c.inflate !== null && c.deflate !== null) {
    compressionMethods.putByte(tls.CompressionMethod.deflate);
  }
  */
  var cMethods = compressionMethods.length();

  // create TLS SNI (server name indication) extension if virtual host
  // has been specified, see RFC 3546
  var extensions = forge.util.createBuffer();
  if(c.virtualHost) {
    // create extension struct
    var ext = forge.util.createBuffer();
    ext.putByte(0x00); // type server_name (ExtensionType is 2 bytes)
    ext.putByte(0x00);

    /* In order to provide the server name, clients MAY include an
     * extension of type "server_name" in the (extended) client hello.
     * The "extension_data" field of this extension SHALL contain
     * "ServerNameList" where:
     *
     * struct {
     *   NameType name_type;
     *   select(name_type) {
     *     case host_name: HostName;
     *   } name;
     * } ServerName;
     *
     * enum {
     *   host_name(0), (255)
     * } NameType;
     *
     * opaque HostName<1..2^16-1>;
     *
     * struct {
     *   ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     */
    var serverName = forge.util.createBuffer();
    serverName.putByte(0x00); // type host_name
    writeVector(serverName, 2, forge.util.createBuffer(c.virtualHost));

    // ServerNameList is in extension_data
    var snList = forge.util.createBuffer();
    writeVector(snList, 2, serverName);
    writeVector(ext, 2, snList);
    extensions.putBuffer(ext);
  }
  var extLength = extensions.length();
  if(extLength > 0) {
    // add extension vector length
    extLength += 2;
  }

  // determine length of the handshake message
  // cipher suites and compression methods size will need to be
  // updated if more get added to the list
  var sessionId = c.session.id;
  var length =
    sessionId.length + 1 + // session ID vector
    2 +                    // version (major + minor)
    4 + 28 +               // random time and random bytes
    2 + cSuites +          // cipher suites vector
    1 + cMethods +         // compression methods vector
    extLength;             // extensions vector

  // build record fragment
  var rval = forge.util.createBuffer();
  rval.putByte(tls.HandshakeType.client_hello);
  rval.putInt24(length);                     // handshake length
  rval.putByte(c.version.major);             // major version
  rval.putByte(c.version.minor);             // minor version
  rval.putBytes(c.session.sp.client_random); // random time + bytes
  writeVector(rval, 1, forge.util.createBuffer(sessionId));
  writeVector(rval, 2, cipherSuites);
  writeVector(rval, 1, compressionMethods);
  if(extLength > 0) {
    writeVector(rval, 2, extensions);
  }
  return rval;
};

/**
 * Creates a ServerHello message.
 *
 * @param c the connection.
 *
 * @return the ServerHello byte buffer.
 */
tls.createServerHello = function(c) {
  // determine length of the handshake message
  var sessionId = c.session.id;
  var length =
    sessionId.length + 1 + // session ID vector
    2 +                    // version (major + minor)
    4 + 28 +               // random time and random bytes
    2 +                    // chosen cipher suite
    1;                     // chosen compression method

  // build record fragment
  var rval = forge.util.createBuffer();
  rval.putByte(tls.HandshakeType.server_hello);
  rval.putInt24(length);                     // handshake length
  rval.putByte(c.version.major);             // major version
  rval.putByte(c.version.minor);             // minor version
  rval.putBytes(c.session.sp.server_random); // random time + bytes
  writeVector(rval, 1, forge.util.createBuffer(sessionId));
  rval.putByte(c.session.cipherSuite.id[0]);
  rval.putByte(c.session.cipherSuite.id[1]);
  rval.putByte(c.session.compressionMethod);
  return rval;
};

/**
 * Creates a Certificate message.
 *
 * When this message will be sent:
 *   This is the first message the client can send after receiving a server
 *   hello done message and the first message the server can send after
 *   sending a ServerHello. This client message is only sent if the server
 *   requests a certificate. If no suitable certificate is available, the
 *   client should send a certificate message containing no certificates. If
 *   client authentication is required by the server for the handshake to
 *   continue, it may respond with a fatal handshake failure alert.
 *
 * opaque ASN.1Cert<1..2^24-1>;
 *
 * struct {
 *   ASN.1Cert certificate_list<0..2^24-1>;
 * } Certificate;
 *
 * @param c the connection.
 *
 * @return the Certificate byte buffer.
 */
tls.createCertificate = function(c) {
  // TODO: check certificate request to ensure types are supported

  // get a certificate (a certificate as a PEM string)
  var client = (c.entity === tls.ConnectionEnd.client);
  var cert = null;
  if(c.getCertificate) {
    var hint;
    if(client) {
      hint = c.session.certificateRequest;
    } else {
      hint = c.session.extensions.server_name.serverNameList;
    }
    cert = c.getCertificate(c, hint);
  }

  // buffer to hold certificate list
  var certList = forge.util.createBuffer();
  if(cert !== null) {
    try {
      // normalize cert to a chain of certificates
      if(!forge.util.isArray(cert)) {
        cert = [cert];
      }
      var asn1 = null;
      for(var i = 0; i < cert.length; ++i) {
        var msg = forge.pem.decode(cert[i])[0];
        if(msg.type !== 'CERTIFICATE' &&
          msg.type !== 'X509 CERTIFICATE' &&
          msg.type !== 'TRUSTED CERTIFICATE') {
          var error = new Error('Could not convert certificate from PEM; PEM ' +
            'header type is not "CERTIFICATE", "X509 CERTIFICATE", or ' +
            '"TRUSTED CERTIFICATE".');
          error.headerType = msg.type;
          throw error;
        }
        if(msg.procType && msg.procType.type === 'ENCRYPTED') {
          throw new Error('Could not convert certificate from PEM; PEM is encrypted.');
        }

        var der = forge.util.createBuffer(msg.body);
        if(asn1 === null) {
          asn1 = forge.asn1.fromDer(der.bytes(), false);
        }

        // certificate entry is itself a vector with 3 length bytes
        var certBuffer = forge.util.createBuffer();
        writeVector(certBuffer, 3, der);

        // add cert vector to cert list vector
        certList.putBuffer(certBuffer);
      }

      // save certificate
      cert = forge.pki.certificateFromAsn1(asn1);
      if(client) {
        c.session.clientCertificate = cert;
      } else {
        c.session.serverCertificate = cert;
      }
    } catch(ex) {
      return c.error(c, {
        message: 'Could not send certificate list.',
        cause: ex,
        send: true,
        alert: {
          level: tls.Alert.Level.fatal,
          description: tls.Alert.Description.bad_certificate
        }
      });
    }
  }

  // determine length of the handshake message
  var length = 3 + certList.length(); // cert list vector

  // build record fragment
  var rval = forge.util.createBuffer();
  rval.putByte(tls.HandshakeType.certificate);
  rval.putInt24(length);
  writeVector(rval, 3, certList);
  return rval;
};

/**
 * Creates a ClientKeyExchange message.
 *
 * When this message will be sent:
 *   This message is always sent by the client. It will immediately follow the
 *   client certificate message, if it is sent. Otherwise it will be the first
 *   message sent by the client after it receives the server hello done
 *   message.
 *
 * Meaning of this message:
 *   With this message, the premaster secret is set, either though direct
 *   transmission of the RSA-encrypted secret, or by the transmission of
 *   Diffie-Hellman parameters which will allow each side to agree upon the
 *   same premaster secret. When the key exchange method is DH_RSA or DH_DSS,
 *   client certification has been requested, and the client was able to
 *   respond with a certificate which contained a Diffie-Hellman public key
 *   whose parameters (group and generator) matched those specified by the
 *   server in its certificate, this message will not contain any data.
 *
 * Meaning of this message:
 *   If RSA is being used for key agreement and authentication, the client
 *   generates a 48-byte premaster secret, encrypts it using the public key
 *   from the server's certificate or the temporary RSA key provided in a
 *   server key exchange message, and sends the result in an encrypted
 *   premaster secret message. This structure is a variant of the client
 *   key exchange message, not a message in itself.
 *
 * struct {
 *   select(KeyExchangeAlgorithm) {
 *     case rsa: EncryptedPreMasterSecret;
 *     case diffie_hellman: ClientDiffieHellmanPublic;
 *   } exchange_keys;
 * } ClientKeyExchange;
 *
 * struct {
 *   ProtocolVersion client_version;
 *   opaque random[46];
 * } PreMasterSecret;
 *
 * struct {
 *   public-key-encrypted PreMasterSecret pre_master_secret;
 * } EncryptedPreMasterSecret;
 *
 * A public-key-encrypted element is encoded as a vector <0..2^16-1>.
 *
 * @param c the connection.
 *
 * @return the ClientKeyExchange byte buffer.
 */
tls.createClientKeyExchange = function(c) {
  // create buffer to encrypt
  var b = forge.util.createBuffer();

  // add highest client-supported protocol to help server avoid version
  // rollback attacks
  b.putByte(c.session.clientHelloVersion.major);
  b.putByte(c.session.clientHelloVersion.minor);

  // generate and add 46 random bytes
  b.putBytes(forge.random.getBytes(46));

  // save pre-master secret
  var sp = c.session.sp;
  sp.pre_master_secret = b.getBytes();

  // RSA-encrypt the pre-master secret
  var key = c.session.serverCertificate.publicKey;
  b = key.encrypt(sp.pre_master_secret);

  /* Note: The encrypted pre-master secret will be stored in a
    public-key-encrypted opaque vector that has the length prefixed using
    2 bytes, so include those 2 bytes in the handshake message length. This
    is done as a minor optimization instead of calling writeVector(). */

  // determine length of the handshake message
  var length = b.length + 2;

  // build record fragment
  var rval = forge.util.createBuffer();
  rval.putByte(tls.HandshakeType.client_key_exchange);
  rval.putInt24(length);
  // add vector length bytes
  rval.putInt16(b.length);
  rval.putBytes(b);
  return rval;
};

/**
 * Creates a ServerKeyExchange message.
 *
 * @param c the connection.
 *
 * @return the ServerKeyExchange byte buffer.
 */
tls.createServerKeyExchange = function(c) {
  // this implementation only supports RSA, no Diffie-Hellman support,
  // so this record is empty

  // determine length of the handshake message
  var length = 0;

  // build record fragment
  var rval = forge.util.createBuffer();
  if(length > 0) {
    rval.putByte(tls.HandshakeType.server_key_exchange);
    rval.putInt24(length);
  }
  return rval;
};

/**
 * Gets the signed data used to verify a client-side certificate. See
 * tls.createCertificateVerify() for details.
 *
 * @param c the connection.
 * @param callback the callback to call once the signed data is ready.
 */
tls.getClientSignature = function(c, callback) {
  // generate data to RSA encrypt
  var b = forge.util.createBuffer();
  b.putBuffer(c.session.md5.digest());
  b.putBuffer(c.session.sha1.digest());
  b = b.getBytes();

  // create default signing function as necessary
  c.getSignature = c.getSignature || function(c, b, callback) {
    // do rsa encryption, call callback
    var privateKey = null;
    if(c.getPrivateKey) {
      try {
        privateKey = c.getPrivateKey(c, c.session.clientCertificate);
        privateKey = forge.pki.privateKeyFromPem(privateKey);
      } catch(ex) {
        c.error(c, {
          message: 'Could not get private key.',
          cause: ex,
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.internal_error
          }
        });
      }
    }
    if(privateKey === null) {
      c.error(c, {
        message: 'No private key set.',
        send: true,
        alert: {
          level: tls.Alert.Level.fatal,
          description: tls.Alert.Description.internal_error
        }
      });
    } else {
      b = privateKey.sign(b, null);
    }
    callback(c, b);
  };

  // get client signature
  c.getSignature(c, b, callback);
};

/**
 * Creates a CertificateVerify message.
 *
 * Meaning of this message:
 *   This structure conveys the client's Diffie-Hellman public value
 *   (Yc) if it was not already included in the client's certificate.
 *   The encoding used for Yc is determined by the enumerated
 *   PublicValueEncoding. This structure is a variant of the client
 *   key exchange message, not a message in itself.
 *
 * When this message will be sent:
 *   This message is used to provide explicit verification of a client
 *   certificate. This message is only sent following a client
 *   certificate that has signing capability (i.e. all certificates
 *   except those containing fixed Diffie-Hellman parameters). When
 *   sent, it will immediately follow the client key exchange message.
 *
 * struct {
 *   Signature signature;
 * } CertificateVerify;
 *
 * CertificateVerify.signature.md5_hash
 *   MD5(handshake_messages);
 *
 * Certificate.signature.sha_hash
 *   SHA(handshake_messages);
 *
 * Here handshake_messages refers to all handshake messages sent or
 * received starting at client hello up to but not including this
 * message, including the type and length fields of the handshake
 * messages.
 *
 * select(SignatureAlgorithm) {
 *   case anonymous: struct { };
 *   case rsa:
 *     digitally-signed struct {
 *       opaque md5_hash[16];
 *       opaque sha_hash[20];
 *     };
 *   case dsa:
 *     digitally-signed struct {
 *       opaque sha_hash[20];
 *     };
 * } Signature;
 *
 * In digital signing, one-way hash functions are used as input for a
 * signing algorithm. A digitally-signed element is encoded as an opaque
 * vector <0..2^16-1>, where the length is specified by the signing
 * algorithm and key.
 *
 * In RSA signing, a 36-byte structure of two hashes (one SHA and one
 * MD5) is signed (encrypted with the private key). It is encoded with
 * PKCS #1 block type 0 or type 1 as described in [PKCS1].
 *
 * In DSS, the 20 bytes of the SHA hash are run directly through the
 * Digital Signing Algorithm with no additional hashing.
 *
 * @param c the connection.
 * @param signature the signature to include in the message.
 *
 * @return the CertificateVerify byte buffer.
 */
tls.createCertificateVerify = function(c, signature) {
  /* Note: The signature will be stored in a "digitally-signed" opaque
    vector that has the length prefixed using 2 bytes, so include those
    2 bytes in the handshake message length. This is done as a minor
    optimization instead of calling writeVector(). */

  // determine length of the handshake message
  var length = signature.length + 2;

  // build record fragment
  var rval = forge.util.createBuffer();
  rval.putByte(tls.HandshakeType.certificate_verify);
  rval.putInt24(length);
  // add vector length bytes
  rval.putInt16(signature.length);
  rval.putBytes(signature);
  return rval;
};

/**
 * Creates a CertificateRequest message.
 *
 * @param c the connection.
 *
 * @return the CertificateRequest byte buffer.
 */
tls.createCertificateRequest = function(c) {
  // TODO: support other certificate types
  var certTypes = forge.util.createBuffer();

  // common RSA certificate type
  certTypes.putByte(0x01);

  // add distinguished names from CA store
  var cAs = forge.util.createBuffer();
  for(var key in c.caStore.certs) {
    var cert = c.caStore.certs[key];
    var dn = forge.pki.distinguishedNameToAsn1(cert.subject);
    var byteBuffer = forge.asn1.toDer(dn);
    cAs.putInt16(byteBuffer.length());
    cAs.putBuffer(byteBuffer);
  }

  // TODO: TLS 1.2+ has a different format

  // determine length of the handshake message
  var length =
    1 + certTypes.length() +
    2 + cAs.length();

  // build record fragment
  var rval = forge.util.createBuffer();
  rval.putByte(tls.HandshakeType.certificate_request);
  rval.putInt24(length);
  writeVector(rval, 1, certTypes);
  writeVector(rval, 2, cAs);
  return rval;
};

/**
 * Creates a ServerHelloDone message.
 *
 * @param c the connection.
 *
 * @return the ServerHelloDone byte buffer.
 */
tls.createServerHelloDone = function(c) {
  // build record fragment
  var rval = forge.util.createBuffer();
  rval.putByte(tls.HandshakeType.server_hello_done);
  rval.putInt24(0);
  return rval;
};

/**
 * Creates a ChangeCipherSpec message.
 *
 * The change cipher spec protocol exists to signal transitions in
 * ciphering strategies. The protocol consists of a single message,
 * which is encrypted and compressed under the current (not the pending)
 * connection state. The message consists of a single byte of value 1.
 *
 * struct {
 *   enum { change_cipher_spec(1), (255) } type;
 * } ChangeCipherSpec;
 *
 * @return the ChangeCipherSpec byte buffer.
 */
tls.createChangeCipherSpec = function() {
  var rval = forge.util.createBuffer();
  rval.putByte(0x01);
  return rval;
};

/**
 * Creates a Finished message.
 *
 * struct {
 *   opaque verify_data[12];
 * } Finished;
 *
 * verify_data
 *   PRF(master_secret, finished_label, MD5(handshake_messages) +
 *   SHA-1(handshake_messages)) [0..11];
 *
 * finished_label
 *   For Finished messages sent by the client, the string "client
 *   finished". For Finished messages sent by the server, the
 *   string "server finished".
 *
 * handshake_messages
 *   All of the data from all handshake messages up to but not
 *   including this message. This is only data visible at the
 *   handshake layer and does not include record layer headers.
 *   This is the concatenation of all the Handshake structures as
 *   defined in 7.4 exchanged thus far.
 *
 * @param c the connection.
 *
 * @return the Finished byte buffer.
 */
tls.createFinished = function(c) {
  // generate verify_data
  var b = forge.util.createBuffer();
  b.putBuffer(c.session.md5.digest());
  b.putBuffer(c.session.sha1.digest());

  // TODO: determine prf function and verify length for TLS 1.2
  var client = (c.entity === tls.ConnectionEnd.client);
  var sp = c.session.sp;
  var vdl = 12;
  var prf = prf_TLS1;
  var label = client ? 'client finished' : 'server finished';
  b = prf(sp.master_secret, label, b.getBytes(), vdl);

  // build record fragment
  var rval = forge.util.createBuffer();
  rval.putByte(tls.HandshakeType.finished);
  rval.putInt24(b.length());
  rval.putBuffer(b);
  return rval;
};

/**
 * Creates a HeartbeatMessage (See RFC 6520).
 *
 * struct {
 *   HeartbeatMessageType type;
 *   uint16 payload_length;
 *   opaque payload[HeartbeatMessage.payload_length];
 *   opaque padding[padding_length];
 * } HeartbeatMessage;
 *
 * The total length of a HeartbeatMessage MUST NOT exceed 2^14 or
 * max_fragment_length when negotiated as defined in [RFC6066].
 *
 * type: The message type, either heartbeat_request or heartbeat_response.
 *
 * payload_length: The length of the payload.
 *
 * payload: The payload consists of arbitrary content.
 *
 * padding: The padding is random content that MUST be ignored by the
 *   receiver. The length of a HeartbeatMessage is TLSPlaintext.length
 *   for TLS and DTLSPlaintext.length for DTLS. Furthermore, the
 *   length of the type field is 1 byte, and the length of the
 *   payload_length is 2. Therefore, the padding_length is
 *   TLSPlaintext.length - payload_length - 3 for TLS and
 *   DTLSPlaintext.length - payload_length - 3 for DTLS. The
 *   padding_length MUST be at least 16.
 *
 * The sender of a HeartbeatMessage MUST use a random padding of at
 * least 16 bytes. The padding of a received HeartbeatMessage message
 * MUST be ignored.
 *
 * If the payload_length of a received HeartbeatMessage is too large,
 * the received HeartbeatMessage MUST be discarded silently.
 *
 * @param c the connection.
 * @param type the tls.HeartbeatMessageType.
 * @param payload the heartbeat data to send as the payload.
 * @param [payloadLength] the payload length to use, defaults to the
 *          actual payload length.
 *
 * @return the HeartbeatRequest byte buffer.
 */
tls.createHeartbeat = function(type, payload, payloadLength) {
  if(typeof payloadLength === 'undefined') {
    payloadLength = payload.length;
  }
  // build record fragment
  var rval = forge.util.createBuffer();
  rval.putByte(type);               // heartbeat message type
  rval.putInt16(payloadLength);     // payload length
  rval.putBytes(payload);           // payload
  // padding
  var plaintextLength = rval.length();
  var paddingLength = Math.max(16, plaintextLength - payloadLength - 3);
  rval.putBytes(forge.random.getBytes(paddingLength));
  return rval;
};

/**
 * Fragments, compresses, encrypts, and queues a record for delivery.
 *
 * @param c the connection.
 * @param record the record to queue.
 */
tls.queue = function(c, record) {
  // error during record creation
  if(!record) {
    return;
  }

  if(record.fragment.length() === 0) {
    if(record.type === tls.ContentType.handshake ||
      record.type === tls.ContentType.alert ||
      record.type === tls.ContentType.change_cipher_spec) {
      // Empty handshake, alert of change cipher spec messages are not allowed per the TLS specification and should not be sent.
      return;
    }
  }

  // if the record is a handshake record, update handshake hashes
  if(record.type === tls.ContentType.handshake) {
    var bytes = record.fragment.bytes();
    c.session.md5.update(bytes);
    c.session.sha1.update(bytes);
    bytes = null;
  }

  // handle record fragmentation
  var records;
  if(record.fragment.length() <= tls.MaxFragment) {
    records = [record];
  } else {
    // fragment data as long as it is too long
    records = [];
    var data = record.fragment.bytes();
    while(data.length > tls.MaxFragment) {
      records.push(tls.createRecord(c, {
        type: record.type,
        data: forge.util.createBuffer(data.slice(0, tls.MaxFragment))
      }));
      data = data.slice(tls.MaxFragment);
    }
    // add last record
    if(data.length > 0) {
      records.push(tls.createRecord(c, {
        type: record.type,
        data: forge.util.createBuffer(data)
      }));
    }
  }

  // compress and encrypt all fragmented records
  for(var i = 0; i < records.length && !c.fail; ++i) {
    // update the record using current write state
    var rec = records[i];
    var s = c.state.current.write;
    if(s.update(c, rec)) {
      // store record
      c.records.push(rec);
    }
  }
};

/**
 * Flushes all queued records to the output buffer and calls the
 * tlsDataReady() handler on the given connection.
 *
 * @param c the connection.
 *
 * @return true on success, false on failure.
 */
tls.flush = function(c) {
  for(var i = 0; i < c.records.length; ++i) {
    var record = c.records[i];

    // add record header and fragment
    c.tlsData.putByte(record.type);
    c.tlsData.putByte(record.version.major);
    c.tlsData.putByte(record.version.minor);
    c.tlsData.putInt16(record.fragment.length());
    c.tlsData.putBuffer(c.records[i].fragment);
  }
  c.records = [];
  return c.tlsDataReady(c);
};

/**
 * Maps a pki.certificateError to a tls.Alert.Description.
 *
 * @param error the error to map.
 *
 * @return the alert description.
 */
var _certErrorToAlertDesc = function(error) {
  switch(error) {
  case true:
    return true;
  case forge.pki.certificateError.bad_certificate:
    return tls.Alert.Description.bad_certificate;
  case forge.pki.certificateError.unsupported_certificate:
    return tls.Alert.Description.unsupported_certificate;
  case forge.pki.certificateError.certificate_revoked:
    return tls.Alert.Description.certificate_revoked;
  case forge.pki.certificateError.certificate_expired:
    return tls.Alert.Description.certificate_expired;
  case forge.pki.certificateError.certificate_unknown:
    return tls.Alert.Description.certificate_unknown;
  case forge.pki.certificateError.unknown_ca:
    return tls.Alert.Description.unknown_ca;
  default:
    return tls.Alert.Description.bad_certificate;
  }
};

/**
 * Maps a tls.Alert.Description to a pki.certificateError.
 *
 * @param desc the alert description.
 *
 * @return the certificate error.
 */
var _alertDescToCertError = function(desc) {
  switch(desc) {
  case true:
    return true;
  case tls.Alert.Description.bad_certificate:
    return forge.pki.certificateError.bad_certificate;
  case tls.Alert.Description.unsupported_certificate:
    return forge.pki.certificateError.unsupported_certificate;
  case tls.Alert.Description.certificate_revoked:
    return forge.pki.certificateError.certificate_revoked;
  case tls.Alert.Description.certificate_expired:
    return forge.pki.certificateError.certificate_expired;
  case tls.Alert.Description.certificate_unknown:
    return forge.pki.certificateError.certificate_unknown;
  case tls.Alert.Description.unknown_ca:
    return forge.pki.certificateError.unknown_ca;
  default:
    return forge.pki.certificateError.bad_certificate;
  }
};

/**
 * Verifies a certificate chain against the given connection's
 * Certificate Authority store.
 *
 * @param c the TLS connection.
 * @param chain the certificate chain to verify, with the root or highest
 *          authority at the end.
 *
 * @return true if successful, false if not.
 */
tls.verifyCertificateChain = function(c, chain) {
  try {
    // Make a copy of c.verifyOptions so that we can modify options.verify
    // without modifying c.verifyOptions.
    var options = {};
    for (var key in c.verifyOptions) {
      options[key] = c.verifyOptions[key];
    }

    options.verify = function(vfd, depth, chain) {
      // convert pki.certificateError to tls alert description
      var desc = _certErrorToAlertDesc(vfd);

      // call application callback
      var ret = c.verify(c, vfd, depth, chain);
      if(ret !== true) {
        if(typeof ret === 'object' && !forge.util.isArray(ret)) {
          // throw custom error
          var error = new Error('The application rejected the certificate.');
          error.send = true;
          error.alert = {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.bad_certificate
          };
          if(ret.message) {
            error.message = ret.message;
          }
          if(ret.alert) {
            error.alert.description = ret.alert;
          }
          throw error;
        }

        // convert tls alert description to pki.certificateError
        if(ret !== vfd) {
          ret = _alertDescToCertError(ret);
        }
      }

      return ret;
    };

    // verify chain
    forge.pki.verifyCertificateChain(c.caStore, chain, options);
  } catch(ex) {
    // build tls error if not already customized
    var err = ex;
    if(typeof err !== 'object' || forge.util.isArray(err)) {
      err = {
        send: true,
        alert: {
          level: tls.Alert.Level.fatal,
          description: _certErrorToAlertDesc(ex)
        }
      };
    }
    if(!('send' in err)) {
      err.send = true;
    }
    if(!('alert' in err)) {
      err.alert = {
        level: tls.Alert.Level.fatal,
        description: _certErrorToAlertDesc(err.error)
      };
    }

    // send error
    c.error(c, err);
  }

  return !c.fail;
};

/**
 * Creates a new TLS session cache.
 *
 * @param cache optional map of session ID to cached session.
 * @param capacity the maximum size for the cache (default: 100).
 *
 * @return the new TLS session cache.
 */
tls.createSessionCache = function(cache, capacity) {
  var rval = null;

  // assume input is already a session cache object
  if(cache && cache.getSession && cache.setSession && cache.order) {
    rval = cache;
  } else {
    // create cache
    rval = {};
    rval.cache = cache || {};
    rval.capacity = Math.max(capacity || 100, 1);
    rval.order = [];

    // store order for sessions, delete session overflow
    for(var key in cache) {
      if(rval.order.length <= capacity) {
        rval.order.push(key);
      } else {
        delete cache[key];
      }
    }

    // get a session from a session ID (or get any session)
    rval.getSession = function(sessionId) {
      var session = null;
      var key = null;

      // if session ID provided, use it
      if(sessionId) {
        key = forge.util.bytesToHex(sessionId);
      } else if(rval.order.length > 0) {
        // get first session from cache
        key = rval.order[0];
      }

      if(key !== null && key in rval.cache) {
        // get cached session and remove from cache
        session = rval.cache[key];
        delete rval.cache[key];
        for(var i in rval.order) {
          if(rval.order[i] === key) {
            rval.order.splice(i, 1);
            break;
          }
        }
      }

      return session;
    };

    // set a session in the cache
    rval.setSession = function(sessionId, session) {
      // remove session from cache if at capacity
      if(rval.order.length === rval.capacity) {
        var key = rval.order.shift();
        delete rval.cache[key];
      }
      // add session to cache
      var key = forge.util.bytesToHex(sessionId);
      rval.order.push(key);
      rval.cache[key] = session;
    };
  }

  return rval;
};

/**
 * Creates a new TLS connection.
 *
 * See public createConnection() docs for more details.
 *
 * @param options the options for this connection.
 *
 * @return the new TLS connection.
 */
tls.createConnection = function(options) {
  var caStore = null;
  if(options.caStore) {
    // if CA store is an array, convert it to a CA store object
    if(forge.util.isArray(options.caStore)) {
      caStore = forge.pki.createCaStore(options.caStore);
    } else {
      caStore = options.caStore;
    }
  } else {
    // create empty CA store
    caStore = forge.pki.createCaStore();
  }

  // setup default cipher suites
  var cipherSuites = options.cipherSuites || null;
  if(cipherSuites === null) {
    cipherSuites = [];
    for(var key in tls.CipherSuites) {
      cipherSuites.push(tls.CipherSuites[key]);
    }
  }

  // set default entity
  var entity = (options.server || false) ?
    tls.ConnectionEnd.server : tls.ConnectionEnd.client;

  // create session cache if requested
  var sessionCache = options.sessionCache ?
    tls.createSessionCache(options.sessionCache) : null;

  // create TLS connection
  var c = {
    version: {major: tls.Version.major, minor: tls.Version.minor},
    entity: entity,
    sessionId: options.sessionId,
    caStore: caStore,
    sessionCache: sessionCache,
    cipherSuites: cipherSuites,
    connected: options.connected,
    virtualHost: options.virtualHost || null,
    verifyClient: options.verifyClient || false,
    verify: options.verify || function(cn, vfd, dpth, cts) {return vfd;},
    verifyOptions: options.verifyOptions || {},
    getCertificate: options.getCertificate || null,
    getPrivateKey: options.getPrivateKey || null,
    getSignature: options.getSignature || null,
    input: forge.util.createBuffer(),
    tlsData: forge.util.createBuffer(),
    data: forge.util.createBuffer(),
    tlsDataReady: options.tlsDataReady,
    dataReady: options.dataReady,
    heartbeatReceived: options.heartbeatReceived,
    closed: options.closed,
    error: function(c, ex) {
      // set origin if not set
      ex.origin = ex.origin ||
        ((c.entity === tls.ConnectionEnd.client) ? 'client' : 'server');

      // send TLS alert
      if(ex.send) {
        tls.queue(c, tls.createAlert(c, ex.alert));
        tls.flush(c);
      }

      // error is fatal by default
      var fatal = (ex.fatal !== false);
      if(fatal) {
        // set fail flag
        c.fail = true;
      }

      // call error handler first
      options.error(c, ex);

      if(fatal) {
        // fatal error, close connection, do not clear fail
        c.close(false);
      }
    },
    deflate: options.deflate || null,
    inflate: options.inflate || null
  };

  /**
   * Resets a closed TLS connection for reuse. Called in c.close().
   *
   * @param clearFail true to clear the fail flag (default: true).
   */
  c.reset = function(clearFail) {
    c.version = {major: tls.Version.major, minor: tls.Version.minor};
    c.record = null;
    c.session = null;
    c.peerCertificate = null;
    c.state = {
      pending: null,
      current: null
    };
    c.expect = (c.entity === tls.ConnectionEnd.client) ? SHE : CHE;
    c.fragmented = null;
    c.records = [];
    c.open = false;
    c.handshakes = 0;
    c.handshaking = false;
    c.isConnected = false;
    c.fail = !(clearFail || typeof(clearFail) === 'undefined');
    c.input.clear();
    c.tlsData.clear();
    c.data.clear();
    c.state.current = tls.createConnectionState(c);
  };

  // do initial reset of connection
  c.reset();

  /**
   * Updates the current TLS engine state based on the given record.
   *
   * @param c the TLS connection.
   * @param record the TLS record to act on.
   */
  var _update = function(c, record) {
    // get record handler (align type in table by subtracting lowest)
    var aligned = record.type - tls.ContentType.change_cipher_spec;
    var handlers = ctTable[c.entity][c.expect];
    if(aligned in handlers) {
      handlers[aligned](c, record);
    } else {
      // unexpected record
      tls.handleUnexpected(c, record);
    }
  };

  /**
   * Reads the record header and initializes the next record on the given
   * connection.
   *
   * @param c the TLS connection with the next record.
   *
   * @return 0 if the input data could be processed, otherwise the
   *         number of bytes required for data to be processed.
   */
  var _readRecordHeader = function(c) {
    var rval = 0;

    // get input buffer and its length
    var b = c.input;
    var len = b.length();

    // need at least 5 bytes to initialize a record
    if(len < 5) {
      rval = 5 - len;
    } else {
      // enough bytes for header
      // initialize record
      c.record = {
        type: b.getByte(),
        version: {
          major: b.getByte(),
          minor: b.getByte()
        },
        length: b.getInt16(),
        fragment: forge.util.createBuffer(),
        ready: false
      };

      // check record version
      var compatibleVersion = (c.record.version.major === c.version.major);
      if(compatibleVersion && c.session && c.session.version) {
        // session version already set, require same minor version
        compatibleVersion = (c.record.version.minor === c.version.minor);
      }
      if(!compatibleVersion) {
        c.error(c, {
          message: 'Incompatible TLS version.',
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.protocol_version
          }
        });
      }
    }

    return rval;
  };

  /**
   * Reads the next record's contents and appends its message to any
   * previously fragmented message.
   *
   * @param c the TLS connection with the next record.
   *
   * @return 0 if the input data could be processed, otherwise the
   *         number of bytes required for data to be processed.
   */
  var _readRecord = function(c) {
    var rval = 0;

    // ensure there is enough input data to get the entire record
    var b = c.input;
    var len = b.length();
    if(len < c.record.length) {
      // not enough data yet, return how much is required
      rval = c.record.length - len;
    } else {
      // there is enough data to parse the pending record
      // fill record fragment and compact input buffer
      c.record.fragment.putBytes(b.getBytes(c.record.length));
      b.compact();

      // update record using current read state
      var s = c.state.current.read;
      if(s.update(c, c.record)) {
        // see if there is a previously fragmented message that the
        // new record's message fragment should be appended to
        if(c.fragmented !== null) {
          // if the record type matches a previously fragmented
          // record, append the record fragment to it
          if(c.fragmented.type === c.record.type) {
            // concatenate record fragments
            c.fragmented.fragment.putBuffer(c.record.fragment);
            c.record = c.fragmented;
          } else {
            // error, invalid fragmented record
            c.error(c, {
              message: 'Invalid fragmented record.',
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description:
                  tls.Alert.Description.unexpected_message
              }
            });
          }
        }

        // record is now ready
        c.record.ready = true;
      }
    }

    return rval;
  };

  /**
   * Performs a handshake using the TLS Handshake Protocol, as a client.
   *
   * This method should only be called if the connection is in client mode.
   *
   * @param sessionId the session ID to use, null to start a new one.
   */
  c.handshake = function(sessionId) {
    // error to call this in non-client mode
    if(c.entity !== tls.ConnectionEnd.client) {
      // not fatal error
      c.error(c, {
        message: 'Cannot initiate handshake as a server.',
        fatal: false
      });
    } else if(c.handshaking) {
      // handshake is already in progress, fail but not fatal error
      c.error(c, {
        message: 'Handshake already in progress.',
        fatal: false
      });
    } else {
      // clear fail flag on reuse
      if(c.fail && !c.open && c.handshakes === 0) {
        c.fail = false;
      }

      // now handshaking
      c.handshaking = true;

      // default to blank (new session)
      sessionId = sessionId || '';

      // if a session ID was specified, try to find it in the cache
      var session = null;
      if(sessionId.length > 0) {
        if(c.sessionCache) {
          session = c.sessionCache.getSession(sessionId);
        }

        // matching session not found in cache, clear session ID
        if(session === null) {
          sessionId = '';
        }
      }

      // no session given, grab a session from the cache, if available
      if(sessionId.length === 0 && c.sessionCache) {
        session = c.sessionCache.getSession();
        if(session !== null) {
          sessionId = session.id;
        }
      }

      // set up session
      c.session = {
        id: sessionId,
        version: null,
        cipherSuite: null,
        compressionMethod: null,
        serverCertificate: null,
        certificateRequest: null,
        clientCertificate: null,
        sp: {},
        md5: forge.md.md5.create(),
        sha1: forge.md.sha1.create()
      };

      // use existing session information
      if(session) {
        // only update version on connection, session version not yet set
        c.version = session.version;
        c.session.sp = session.sp;
      }

      // generate new client random
      c.session.sp.client_random = tls.createRandom().getBytes();

      // connection now open
      c.open = true;

      // send hello
      tls.queue(c, tls.createRecord(c, {
        type: tls.ContentType.handshake,
        data: tls.createClientHello(c)
      }));
      tls.flush(c);
    }
  };

  /**
   * Called when TLS protocol data has been received from somewhere and should
   * be processed by the TLS engine.
   *
   * @param data the TLS protocol data, as a string, to process.
   *
   * @return 0 if the data could be processed, otherwise the number of bytes
   *         required for data to be processed.
   */
  c.process = function(data) {
    var rval = 0;

    // buffer input data
    if(data) {
      c.input.putBytes(data);
    }

    // process next record if no failure, process will be called after
    // each record is handled (since handling can be asynchronous)
    if(!c.fail) {
      // reset record if ready and now empty
      if(c.record !== null &&
        c.record.ready && c.record.fragment.isEmpty()) {
        c.record = null;
      }

      // if there is no pending record, try to read record header
      if(c.record === null) {
        rval = _readRecordHeader(c);
      }

      // read the next record (if record not yet ready)
      if(!c.fail && c.record !== null && !c.record.ready) {
        rval = _readRecord(c);
      }

      // record ready to be handled, update engine state
      if(!c.fail && c.record !== null && c.record.ready) {
        _update(c, c.record);
      }
    }

    return rval;
  };

  /**
   * Requests that application data be packaged into a TLS record. The
   * tlsDataReady handler will be called when the TLS record(s) have been
   * prepared.
   *
   * @param data the application data, as a raw 'binary' encoded string, to
   *          be sent; to send utf-16/utf-8 string data, use the return value
   *          of util.encodeUtf8(str).
   *
   * @return true on success, false on failure.
   */
  c.prepare = function(data) {
    tls.queue(c, tls.createRecord(c, {
      type: tls.ContentType.application_data,
      data: forge.util.createBuffer(data)
    }));
    return tls.flush(c);
  };

  /**
   * Requests that a heartbeat request be packaged into a TLS record for
   * transmission. The tlsDataReady handler will be called when TLS record(s)
   * have been prepared.
   *
   * When a heartbeat response has been received, the heartbeatReceived
   * handler will be called with the matching payload. This handler can
   * be used to clear a retransmission timer, etc.
   *
   * @param payload the heartbeat data to send as the payload in the message.
   * @param [payloadLength] the payload length to use, defaults to the
   *          actual payload length.
   *
   * @return true on success, false on failure.
   */
  c.prepareHeartbeatRequest = function(payload, payloadLength) {
    if(payload instanceof forge.util.ByteBuffer) {
      payload = payload.bytes();
    }
    if(typeof payloadLength === 'undefined') {
      payloadLength = payload.length;
    }
    c.expectedHeartbeatPayload = payload;
    tls.queue(c, tls.createRecord(c, {
      type: tls.ContentType.heartbeat,
      data: tls.createHeartbeat(
        tls.HeartbeatMessageType.heartbeat_request, payload, payloadLength)
    }));
    return tls.flush(c);
  };

  /**
   * Closes the connection (sends a close_notify alert).
   *
   * @param clearFail true to clear the fail flag (default: true).
   */
  c.close = function(clearFail) {
    // save session if connection didn't fail
    if(!c.fail && c.sessionCache && c.session) {
      // only need to preserve session ID, version, and security params
      var session = {
        id: c.session.id,
        version: c.session.version,
        sp: c.session.sp
      };
      session.sp.keys = null;
      c.sessionCache.setSession(session.id, session);
    }

    if(c.open) {
      // connection no longer open, clear input
      c.open = false;
      c.input.clear();

      // if connected or handshaking, send an alert
      if(c.isConnected || c.handshaking) {
        c.isConnected = c.handshaking = false;

        // send close_notify alert
        tls.queue(c, tls.createAlert(c, {
          level: tls.Alert.Level.warning,
          description: tls.Alert.Description.close_notify
        }));
        tls.flush(c);
      }

      // call handler
      c.closed(c);
    }

    // reset TLS connection, do not clear fail flag
    c.reset(clearFail);
  };

  return c;
};

/* TLS API */
module.exports = forge.tls = forge.tls || {};

// expose non-functions
for(var key in tls) {
  if(typeof tls[key] !== 'function') {
    forge.tls[key] = tls[key];
  }
}

// expose prf_tls1 for testing
forge.tls.prf_tls1 = prf_TLS1;

// expose sha1 hmac method
forge.tls.hmac_sha1 = hmac_sha1;

// expose session cache creation
forge.tls.createSessionCache = tls.createSessionCache;

/**
 * Creates a new TLS connection. This does not make any assumptions about the
 * transport layer that TLS is working on top of, ie: it does not assume there
 * is a TCP/IP connection or establish one. A TLS connection is totally
 * abstracted away from the layer is runs on top of, it merely establishes a
 * secure channel between a client" and a "server".
 *
 * A TLS connection contains 4 connection states: pending read and write, and
 * current read and write.
 *
 * At initialization, the current read and write states will be null. Only once
 * the security parameters have been set and the keys have been generated can
 * the pending states be converted into current states. Current states will be
 * updated for each record processed.
 *
 * A custom certificate verify callback may be provided to check information
 * like the common name on the server's certificate. It will be called for
 * every certificate in the chain. It has the following signature:
 *
 * variable func(c, certs, index, preVerify)
 * Where:
 * c         The TLS connection
 * verified  Set to true if certificate was verified, otherwise the alert
 *           tls.Alert.Description for why the certificate failed.
 * depth     The current index in the chain, where 0 is the server's cert.
 * certs     The certificate chain, *NOTE* if the server was anonymous then
 *           the chain will be empty.
 *
 * The function returns true on success and on failure either the appropriate
 * tls.Alert.Description or an object with 'alert' set to the appropriate
 * tls.Alert.Description and 'message' set to a custom error message. If true
 * is not returned then the connection will abort using, in order of
 * availability, first the returned alert description, second the preVerify
 * alert description, and lastly the default 'bad_certificate'.
 *
 * There are three callbacks that can be used to make use of client-side
 * certificates where each takes the TLS connection as the first parameter:
 *
 * getCertificate(conn, hint)
 *   The second parameter is a hint as to which certificate should be
 *   returned. If the connection entity is a client, then the hint will be
 *   the CertificateRequest message from the server that is part of the
 *   TLS protocol. If the connection entity is a server, then it will be
 *   the servername list provided via an SNI extension the ClientHello, if
 *   one was provided (empty array if not). The hint can be examined to
 *   determine which certificate to use (advanced). Most implementations
 *   will just return a certificate. The return value must be a
 *   PEM-formatted certificate or an array of PEM-formatted certificates
 *   that constitute a certificate chain, with the first in the array/chain
 *   being the client's certificate.
 * getPrivateKey(conn, certificate)
 *   The second parameter is an forge.pki X.509 certificate object that
 *   is associated with the requested private key. The return value must
 *   be a PEM-formatted private key.
 * getSignature(conn, bytes, callback)
 *   This callback can be used instead of getPrivateKey if the private key
 *   is not directly accessible in javascript or should not be. For
 *   instance, a secure external web service could provide the signature
 *   in exchange for appropriate credentials. The second parameter is a
 *   string of bytes to be signed that are part of the TLS protocol. These
 *   bytes are used to verify that the private key for the previously
 *   provided client-side certificate is accessible to the client. The
 *   callback is a function that takes 2 parameters, the TLS connection
 *   and the RSA encrypted (signed) bytes as a string. This callback must
 *   be called once the signature is ready.
 *
 * @param options the options for this connection:
 *   server: true if the connection is server-side, false for client.
 *   sessionId: a session ID to reuse, null for a new connection.
 *   caStore: an array of certificates to trust.
 *   sessionCache: a session cache to use.
 *   cipherSuites: an optional array of cipher suites to use,
 *     see tls.CipherSuites.
 *   connected: function(conn) called when the first handshake completes.
 *   virtualHost: the virtual server name to use in a TLS SNI extension.
 *   verifyClient: true to require a client certificate in server mode,
 *     'optional' to request one, false not to (default: false).
 *   verify: a handler used to custom verify certificates in the chain.
 *   verifyOptions: an object with options for the certificate chain validation.
 *     See documentation of pki.verifyCertificateChain for possible options.
 *     verifyOptions.verify is ignored. If you wish to specify a verify handler
 *     use the verify key.
 *   getCertificate: an optional callback used to get a certificate or
 *     a chain of certificates (as an array).
 *   getPrivateKey: an optional callback used to get a private key.
 *   getSignature: an optional callback used to get a signature.
 *   tlsDataReady: function(conn) called when TLS protocol data has been
 *     prepared and is ready to be used (typically sent over a socket
 *     connection to its destination), read from conn.tlsData buffer.
 *   dataReady: function(conn) called when application data has
 *     been parsed from a TLS record and should be consumed by the
 *     application, read from conn.data buffer.
 *   closed: function(conn) called when the connection has been closed.
 *   error: function(conn, error) called when there was an error.
 *   deflate: function(inBytes) if provided, will deflate TLS records using
 *     the deflate algorithm if the server supports it.
 *   inflate: function(inBytes) if provided, will inflate TLS records using
 *     the deflate algorithm if the server supports it.
 *
 * @return the new TLS connection.
 */
forge.tls.createConnection = tls.createConnection;
/**
 * Socket wrapping functions for TLS.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2012 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./tls');

/**
 * Wraps a forge.net socket with a TLS layer.
 *
 * @param options:
 *   sessionId: a session ID to reuse, null for a new connection if no session
 *     cache is provided or it is empty.
 *   caStore: an array of certificates to trust.
 *   sessionCache: a session cache to use.
 *   cipherSuites: an optional array of cipher suites to use, see
 *     tls.CipherSuites.
 *   socket: the socket to wrap.
 *   virtualHost: the virtual server name to use in a TLS SNI extension.
 *   verify: a handler used to custom verify certificates in the chain.
 *   getCertificate: an optional callback used to get a certificate.
 *   getPrivateKey: an optional callback used to get a private key.
 *   getSignature: an optional callback used to get a signature.
 *   deflate: function(inBytes) if provided, will deflate TLS records using
 *     the deflate algorithm if the server supports it.
 *   inflate: function(inBytes) if provided, will inflate TLS records using
 *     the deflate algorithm if the server supports it.
 *
 * @return the TLS-wrapped socket.
 */
forge.tls.wrapSocket = function(options) {
  // get raw socket
  var socket = options.socket;

  // create TLS socket
  var tlsSocket = {
    id: socket.id,
    // set handlers
    connected: socket.connected || function(e) {},
    closed: socket.closed || function(e) {},
    data: socket.data || function(e) {},
    error: socket.error || function(e) {}
  };

  // create TLS connection
  var c = forge.tls.createConnection({
    server: false,
    sessionId: options.sessionId || null,
    caStore: options.caStore || [],
    sessionCache: options.sessionCache || null,
    cipherSuites: options.cipherSuites || null,
    virtualHost: options.virtualHost,
    verify: options.verify,
    getCertificate: options.getCertificate,
    getPrivateKey: options.getPrivateKey,
    getSignature: options.getSignature,
    deflate: options.deflate,
    inflate: options.inflate,
    connected: function(c) {
      // first handshake complete, call handler
      if(c.handshakes === 1) {
        tlsSocket.connected({
          id: socket.id,
          type: 'connect',
          bytesAvailable: c.data.length()
        });
      }
    },
    tlsDataReady: function(c) {
      // send TLS data over socket
      return socket.send(c.tlsData.getBytes());
    },
    dataReady: function(c) {
      // indicate application data is ready
      tlsSocket.data({
        id: socket.id,
        type: 'socketData',
        bytesAvailable: c.data.length()
      });
    },
    closed: function(c) {
      // close socket
      socket.close();
    },
    error: function(c, e) {
      // send error, close socket
      tlsSocket.error({
        id: socket.id,
        type: 'tlsError',
        message: e.message,
        bytesAvailable: 0,
        error: e
      });
      socket.close();
    }
  });

  // handle doing handshake after connecting
  socket.connected = function(e) {
    c.handshake(options.sessionId);
  };

  // handle closing TLS connection
  socket.closed = function(e) {
    if(c.open && c.handshaking) {
      // error
      tlsSocket.error({
        id: socket.id,
        type: 'ioError',
        message: 'Connection closed during handshake.',
        bytesAvailable: 0
      });
    }
    c.close();

    // call socket handler
    tlsSocket.closed({
      id: socket.id,
      type: 'close',
      bytesAvailable: 0
    });
  };

  // handle error on socket
  socket.error = function(e) {
    // error
    tlsSocket.error({
      id: socket.id,
      type: e.type,
      message: e.message,
      bytesAvailable: 0
    });
    c.close();
  };

  // handle receiving raw TLS data from socket
  var _requiredBytes = 0;
  socket.data = function(e) {
    // drop data if connection not open
    if(!c.open) {
      socket.receive(e.bytesAvailable);
    } else {
      // only receive if there are enough bytes available to
      // process a record
      if(e.bytesAvailable >= _requiredBytes) {
        var count = Math.max(e.bytesAvailable, _requiredBytes);
        var data = socket.receive(count);
        if(data !== null) {
          _requiredBytes = c.process(data);
        }
      }
    }
  };

  /**
   * Destroys this socket.
   */
  tlsSocket.destroy = function() {
    socket.destroy();
  };

  /**
   * Sets this socket's TLS session cache. This should be called before
   * the socket is connected or after it is closed.
   *
   * The cache is an object mapping session IDs to internal opaque state.
   * An application might need to change the cache used by a particular
   * tlsSocket between connections if it accesses multiple TLS hosts.
   *
   * @param cache the session cache to use.
   */
  tlsSocket.setSessionCache = function(cache) {
    c.sessionCache = tls.createSessionCache(cache);
  };

  /**
   * Connects this socket.
   *
   * @param options:
   *           host: the host to connect to.
   *           port: the port to connect to.
   *           policyPort: the policy port to use (if non-default), 0 to
   *              use the flash default.
   *           policyUrl: the policy file URL to use (instead of port).
   */
  tlsSocket.connect = function(options) {
    socket.connect(options);
  };

  /**
   * Closes this socket.
   */
  tlsSocket.close = function() {
    c.close();
  };

  /**
   * Determines if the socket is connected or not.
   *
   * @return true if connected, false if not.
   */
  tlsSocket.isConnected = function() {
    return c.isConnected && socket.isConnected();
  };

  /**
   * Writes bytes to this socket.
   *
   * @param bytes the bytes (as a string) to write.
   *
   * @return true on success, false on failure.
   */
  tlsSocket.send = function(bytes) {
    return c.prepare(bytes);
  };

  /**
   * Reads bytes from this socket (non-blocking). Fewer than the number of
   * bytes requested may be read if enough bytes are not available.
   *
   * This method should be called from the data handler if there are enough
   * bytes available. To see how many bytes are available, check the
   * 'bytesAvailable' property on the event in the data handler or call the
   * bytesAvailable() function on the socket. If the browser is msie, then the
   * bytesAvailable() function should be used to avoid race conditions.
   * Otherwise, using the property on the data handler's event may be quicker.
   *
   * @param count the maximum number of bytes to read.
   *
   * @return the bytes read (as a string) or null on error.
   */
  tlsSocket.receive = function(count) {
    return c.data.getBytes(count);
  };

  /**
   * Gets the number of bytes available for receiving on the socket.
   *
   * @return the number of bytes available for receiving.
   */
  tlsSocket.bytesAvailable = function() {
    return c.data.length();
  };

  return tlsSocket;
};
/**
 * Utility functions for web applications.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2018 Digital Bazaar, Inc.
 */
var forge = require('./forge');
var baseN = require('./baseN');

/* Utilities API */
var util = module.exports = forge.util = forge.util || {};

// define setImmediate and nextTick
(function() {
  // use native nextTick (unless we're in webpack)
  // webpack (or better node-libs-browser polyfill) sets process.browser.
  // this way we can detect webpack properly
  if(typeof process !== 'undefined' && process.nextTick && !process.browser) {
    util.nextTick = process.nextTick;
    if(typeof setImmediate === 'function') {
      util.setImmediate = setImmediate;
    } else {
      // polyfill setImmediate with nextTick, older versions of node
      // (those w/o setImmediate) won't totally starve IO
      util.setImmediate = util.nextTick;
    }
    return;
  }

  // polyfill nextTick with native setImmediate
  if(typeof setImmediate === 'function') {
    util.setImmediate = function() { return setImmediate.apply(undefined, arguments); };
    util.nextTick = function(callback) {
      return setImmediate(callback);
    };
    return;
  }

  /* Note: A polyfill upgrade pattern is used here to allow combining
  polyfills. For example, MutationObserver is fast, but blocks UI updates,
  so it needs to allow UI updates periodically, so it falls back on
  postMessage or setTimeout. */

  // polyfill with setTimeout
  util.setImmediate = function(callback) {
    setTimeout(callback, 0);
  };

  // upgrade polyfill to use postMessage
  if(typeof window !== 'undefined' &&
    typeof window.postMessage === 'function') {
    var msg = 'forge.setImmediate';
    var callbacks = [];
    util.setImmediate = function(callback) {
      callbacks.push(callback);
      // only send message when one hasn't been sent in
      // the current turn of the event loop
      if(callbacks.length === 1) {
        window.postMessage(msg, '*');
      }
    };
    function handler(event) {
      if(event.source === window && event.data === msg) {
        event.stopPropagation();
        var copy = callbacks.slice();
        callbacks.length = 0;
        copy.forEach(function(callback) {
          callback();
        });
      }
    }
    window.addEventListener('message', handler, true);
  }

  // upgrade polyfill to use MutationObserver
  if(typeof MutationObserver !== 'undefined') {
    // polyfill with MutationObserver
    var now = Date.now();
    var attr = true;
    var div = document.createElement('div');
    var callbacks = [];
    new MutationObserver(function() {
      var copy = callbacks.slice();
      callbacks.length = 0;
      copy.forEach(function(callback) {
        callback();
      });
    }).observe(div, {attributes: true});
    var oldSetImmediate = util.setImmediate;
    util.setImmediate = function(callback) {
      if(Date.now() - now > 15) {
        now = Date.now();
        oldSetImmediate(callback);
      } else {
        callbacks.push(callback);
        // only trigger observer when it hasn't been triggered in
        // the current turn of the event loop
        if(callbacks.length === 1) {
          div.setAttribute('a', attr = !attr);
        }
      }
    };
  }

  util.nextTick = util.setImmediate;
})();

// check if running under Node.js
util.isNodejs =
  typeof process !== 'undefined' && process.versions && process.versions.node;


// 'self' will also work in Web Workers (instance of WorkerGlobalScope) while
// it will point to `window` in the main thread.
// To remain compatible with older browsers, we fall back to 'window' if 'self'
// is not available.
util.globalScope = (function() {
  if(util.isNodejs) {
    return global;
  }

  return typeof self === 'undefined' ? window : self;
})();

// define isArray
util.isArray = Array.isArray || function(x) {
  return Object.prototype.toString.call(x) === '[object Array]';
};

// define isArrayBuffer
util.isArrayBuffer = function(x) {
  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;
};

// define isArrayBufferView
util.isArrayBufferView = function(x) {
  return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;
};

/**
 * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for
 * algorithms where bit manipulation, JavaScript limitations, and/or algorithm
 * design only allow for byte operations of a limited size.
 *
 * @param n number of bits.
 *
 * Throw Error if n invalid.
 */
function _checkBitsParam(n) {
  if(!(n === 8 || n === 16 || n === 24 || n === 32)) {
    throw new Error('Only 8, 16, 24, or 32 bits supported: ' + n);
  }
}

// TODO: set ByteBuffer to best available backing
util.ByteBuffer = ByteStringBuffer;

/** Buffer w/BinaryString backing */

/**
 * Constructor for a binary string backed byte buffer.
 *
 * @param [b] the bytes to wrap (either encoded as string, one byte per
 *          character, or as an ArrayBuffer or Typed Array).
 */
function ByteStringBuffer(b) {
  // TODO: update to match DataBuffer API

  // the data in this buffer
  this.data = '';
  // the pointer for reading from this buffer
  this.read = 0;

  if(typeof b === 'string') {
    this.data = b;
  } else if(util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
    if(typeof Buffer !== 'undefined' && b instanceof Buffer) {
      this.data = b.toString('binary');
    } else {
      // convert native buffer to forge buffer
      // FIXME: support native buffers internally instead
      var arr = new Uint8Array(b);
      try {
        this.data = String.fromCharCode.apply(null, arr);
      } catch(e) {
        for(var i = 0; i < arr.length; ++i) {
          this.putByte(arr[i]);
        }
      }
    }
  } else if(b instanceof ByteStringBuffer ||
    (typeof b === 'object' && typeof b.data === 'string' &&
    typeof b.read === 'number')) {
    // copy existing buffer
    this.data = b.data;
    this.read = b.read;
  }

  // used for v8 optimization
  this._constructedStringLength = 0;
}
util.ByteStringBuffer = ByteStringBuffer;

/* Note: This is an optimization for V8-based browsers. When V8 concatenates
  a string, the strings are only joined logically using a "cons string" or
  "constructed/concatenated string". These containers keep references to one
  another and can result in very large memory usage. For example, if a 2MB
  string is constructed by concatenating 4 bytes together at a time, the
  memory usage will be ~44MB; so ~22x increase. The strings are only joined
  together when an operation requiring their joining takes place, such as
  substr(). This function is called when adding data to this buffer to ensure
  these types of strings are periodically joined to reduce the memory
  footprint. */
var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;
util.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {
  this._constructedStringLength += x;
  if(this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {
    // this substr() should cause the constructed string to join
    this.data.substr(0, 1);
    this._constructedStringLength = 0;
  }
};

/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */
util.ByteStringBuffer.prototype.length = function() {
  return this.data.length - this.read;
};

/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */
util.ByteStringBuffer.prototype.isEmpty = function() {
  return this.length() <= 0;
};

/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putByte = function(b) {
  return this.putBytes(String.fromCharCode(b));
};

/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
  b = String.fromCharCode(b);
  var d = this.data;
  while(n > 0) {
    if(n & 1) {
      d += b;
    }
    n >>>= 1;
    if(n > 0) {
      b += b;
    }
  }
  this.data = d;
  this._optimizeConstructedString(n);
  return this;
};

/**
 * Puts bytes in this buffer.
 *
 * @param bytes the bytes (as a binary encoded string) to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putBytes = function(bytes) {
  this.data += bytes;
  this._optimizeConstructedString(bytes.length);
  return this;
};

/**
 * Puts a UTF-16 encoded string into this buffer.
 *
 * @param str the string to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putString = function(str) {
  return this.putBytes(util.encodeUtf8(str));
};

/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt16 = function(i) {
  return this.putBytes(
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt24 = function(i) {
  return this.putBytes(
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt32 = function(i) {
  return this.putBytes(
    String.fromCharCode(i >> 24 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt16Le = function(i) {
  return this.putBytes(
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF));
};

/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt24Le = function(i) {
  return this.putBytes(
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF));
};

/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt32Le = function(i) {
  return this.putBytes(
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 24 & 0xFF));
};

/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt = function(i, n) {
  _checkBitsParam(n);
  var bytes = '';
  do {
    n -= 8;
    bytes += String.fromCharCode((i >> n) & 0xFF);
  } while(n > 0);
  return this.putBytes(bytes);
};

/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
  // putInt checks n
  if(i < 0) {
    i += 2 << (n - 1);
  }
  return this.putInt(i, n);
};

/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putBuffer = function(buffer) {
  return this.putBytes(buffer.getBytes());
};

/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */
util.ByteStringBuffer.prototype.getByte = function() {
  return this.data.charCodeAt(this.read++);
};

/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.ByteStringBuffer.prototype.getInt16 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 8 ^
    this.data.charCodeAt(this.read + 1));
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.ByteStringBuffer.prototype.getInt24 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 16 ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2));
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.ByteStringBuffer.prototype.getInt32 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 24 ^
    this.data.charCodeAt(this.read + 1) << 16 ^
    this.data.charCodeAt(this.read + 2) << 8 ^
    this.data.charCodeAt(this.read + 3));
  this.read += 4;
  return rval;
};

/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.ByteStringBuffer.prototype.getInt16Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8);
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.ByteStringBuffer.prototype.getInt24Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2) << 16);
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.ByteStringBuffer.prototype.getInt32Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2) << 16 ^
    this.data.charCodeAt(this.read + 3) << 24);
  this.read += 4;
  return rval;
};

/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by ceil(n/8).
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.ByteStringBuffer.prototype.getInt = function(n) {
  _checkBitsParam(n);
  var rval = 0;
  do {
    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
    rval = (rval << 8) + this.data.charCodeAt(this.read++);
    n -= 8;
  } while(n > 0);
  return rval;
};

/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.ByteStringBuffer.prototype.getSignedInt = function(n) {
  // getInt checks n
  var x = this.getInt(n);
  var max = 2 << (n - 2);
  if(x >= max) {
    x -= max << 1;
  }
  return x;
};

/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer. Note that the resulting string is binary encoded (in node.js this
 * encoding is referred to as `binary`, it is *not* `utf8`).
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */
util.ByteStringBuffer.prototype.getBytes = function(count) {
  var rval;
  if(count) {
    // read count bytes
    count = Math.min(this.length(), count);
    rval = this.data.slice(this.read, this.read + count);
    this.read += count;
  } else if(count === 0) {
    rval = '';
  } else {
    // read all bytes, optimize to only copy when needed
    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
    this.clear();
  }
  return rval;
};

/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */
util.ByteStringBuffer.prototype.bytes = function(count) {
  return (typeof(count) === 'undefined' ?
    this.data.slice(this.read) :
    this.data.slice(this.read, this.read + count));
};

/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */
util.ByteStringBuffer.prototype.at = function(i) {
  return this.data.charCodeAt(this.read + i);
};

/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.setAt = function(i, b) {
  this.data = this.data.substr(0, this.read + i) +
    String.fromCharCode(b) +
    this.data.substr(this.read + i + 1);
  return this;
};

/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */
util.ByteStringBuffer.prototype.last = function() {
  return this.data.charCodeAt(this.data.length - 1);
};

/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */
util.ByteStringBuffer.prototype.copy = function() {
  var c = util.createBuffer(this.data);
  c.read = this.read;
  return c;
};

/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.compact = function() {
  if(this.read > 0) {
    this.data = this.data.slice(this.read);
    this.read = 0;
  }
  return this;
};

/**
 * Clears this buffer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.clear = function() {
  this.data = '';
  this.read = 0;
  return this;
};

/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.truncate = function(count) {
  var len = Math.max(0, this.length() - count);
  this.data = this.data.substr(this.read, len);
  this.read = 0;
  return this;
};

/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */
util.ByteStringBuffer.prototype.toHex = function() {
  var rval = '';
  for(var i = this.read; i < this.data.length; ++i) {
    var b = this.data.charCodeAt(i);
    if(b < 16) {
      rval += '0';
    }
    rval += b.toString(16);
  }
  return rval;
};

/**
 * Converts this buffer to a UTF-16 string (standard JavaScript string).
 *
 * @return a UTF-16 string.
 */
util.ByteStringBuffer.prototype.toString = function() {
  return util.decodeUtf8(this.bytes());
};

/** End Buffer w/BinaryString backing */

/** Buffer w/UInt8Array backing */

/**
 * FIXME: Experimental. Do not use yet.
 *
 * Constructor for an ArrayBuffer-backed byte buffer.
 *
 * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
 * TypedArray.
 *
 * If a string is given, its encoding should be provided as an option,
 * otherwise it will default to 'binary'. A 'binary' string is encoded such
 * that each character is one byte in length and size.
 *
 * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
 * *directly* without any copying. Note that, if a write to the buffer requires
 * more space, the buffer will allocate a new backing ArrayBuffer to
 * accommodate. The starting read and write offsets for the buffer may be
 * given as options.
 *
 * @param [b] the initial bytes for this buffer.
 * @param options the options to use:
 *          [readOffset] the starting read offset to use (default: 0).
 *          [writeOffset] the starting write offset to use (default: the
 *            length of the first parameter).
 *          [growSize] the minimum amount, in bytes, to grow the buffer by to
 *            accommodate writes (default: 1024).
 *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
 *            first parameter, if it is a string (default: 'binary').
 */
function DataBuffer(b, options) {
  // default options
  options = options || {};

  // pointers for read from/write to buffer
  this.read = options.readOffset || 0;
  this.growSize = options.growSize || 1024;

  var isArrayBuffer = util.isArrayBuffer(b);
  var isArrayBufferView = util.isArrayBufferView(b);
  if(isArrayBuffer || isArrayBufferView) {
    // use ArrayBuffer directly
    if(isArrayBuffer) {
      this.data = new DataView(b);
    } else {
      // TODO: adjust read/write offset based on the type of view
      // or specify that this must be done in the options ... that the
      // offsets are byte-based
      this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
    }
    this.write = ('writeOffset' in options ?
      options.writeOffset : this.data.byteLength);
    return;
  }

  // initialize to empty array buffer and add any given bytes using putBytes
  this.data = new DataView(new ArrayBuffer(0));
  this.write = 0;

  if(b !== null && b !== undefined) {
    this.putBytes(b);
  }

  if('writeOffset' in options) {
    this.write = options.writeOffset;
  }
}
util.DataBuffer = DataBuffer;

/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */
util.DataBuffer.prototype.length = function() {
  return this.write - this.read;
};

/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */
util.DataBuffer.prototype.isEmpty = function() {
  return this.length() <= 0;
};

/**
 * Ensures this buffer has enough empty space to accommodate the given number
 * of bytes. An optional parameter may be given that indicates a minimum
 * amount to grow the buffer if necessary. If the parameter is not given,
 * the buffer will be grown by some previously-specified default amount
 * or heuristic.
 *
 * @param amount the number of bytes to accommodate.
 * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
 *          necessary.
 */
util.DataBuffer.prototype.accommodate = function(amount, growSize) {
  if(this.length() >= amount) {
    return this;
  }
  growSize = Math.max(growSize || this.growSize, amount);

  // grow buffer
  var src = new Uint8Array(
    this.data.buffer, this.data.byteOffset, this.data.byteLength);
  var dst = new Uint8Array(this.length() + growSize);
  dst.set(src);
  this.data = new DataView(dst.buffer);

  return this;
};

/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putByte = function(b) {
  this.accommodate(1);
  this.data.setUint8(this.write++, b);
  return this;
};

/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.fillWithByte = function(b, n) {
  this.accommodate(n);
  for(var i = 0; i < n; ++i) {
    this.data.setUint8(b);
  }
  return this;
};

/**
 * Puts bytes in this buffer. The bytes may be given as a string, an
 * ArrayBuffer, a DataView, or a TypedArray.
 *
 * @param bytes the bytes to put.
 * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
 *          'utf16', 'hex'), if it is a string (default: 'binary').
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putBytes = function(bytes, encoding) {
  if(util.isArrayBufferView(bytes)) {
    var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    var len = src.byteLength - src.byteOffset;
    this.accommodate(len);
    var dst = new Uint8Array(this.data.buffer, this.write);
    dst.set(src);
    this.write += len;
    return this;
  }

  if(util.isArrayBuffer(bytes)) {
    var src = new Uint8Array(bytes);
    this.accommodate(src.byteLength);
    var dst = new Uint8Array(this.data.buffer);
    dst.set(src, this.write);
    this.write += src.byteLength;
    return this;
  }

  // bytes is a util.DataBuffer or equivalent
  if(bytes instanceof util.DataBuffer ||
    (typeof bytes === 'object' &&
    typeof bytes.read === 'number' && typeof bytes.write === 'number' &&
    util.isArrayBufferView(bytes.data))) {
    var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
    this.accommodate(src.byteLength);
    var dst = new Uint8Array(bytes.data.byteLength, this.write);
    dst.set(src);
    this.write += src.byteLength;
    return this;
  }

  if(bytes instanceof util.ByteStringBuffer) {
    // copy binary string and process as the same as a string parameter below
    bytes = bytes.data;
    encoding = 'binary';
  }

  // string conversion
  encoding = encoding || 'binary';
  if(typeof bytes === 'string') {
    var view;

    // decode from string
    if(encoding === 'hex') {
      this.accommodate(Math.ceil(bytes.length / 2));
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.hex.decode(bytes, view, this.write);
      return this;
    }
    if(encoding === 'base64') {
      this.accommodate(Math.ceil(bytes.length / 4) * 3);
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.base64.decode(bytes, view, this.write);
      return this;
    }

    // encode text as UTF-8 bytes
    if(encoding === 'utf8') {
      // encode as UTF-8 then decode string as raw binary
      bytes = util.encodeUtf8(bytes);
      encoding = 'binary';
    }

    // decode string as raw binary
    if(encoding === 'binary' || encoding === 'raw') {
      // one byte per character
      this.accommodate(bytes.length);
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.raw.decode(view);
      return this;
    }

    // encode text as UTF-16 bytes
    if(encoding === 'utf16') {
      // two bytes per character
      this.accommodate(bytes.length * 2);
      view = new Uint16Array(this.data.buffer, this.write);
      this.write += util.text.utf16.encode(view);
      return this;
    }

    throw new Error('Invalid encoding: ' + encoding);
  }

  throw Error('Invalid parameter: ' + bytes);
};

/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putBuffer = function(buffer) {
  this.putBytes(buffer);
  buffer.clear();
  return this;
};

/**
 * Puts a string into this buffer.
 *
 * @param str the string to put.
 * @param [encoding] the encoding for the string (default: 'utf16').
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putString = function(str) {
  return this.putBytes(str, 'utf16');
};

/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt16 = function(i) {
  this.accommodate(2);
  this.data.setInt16(this.write, i);
  this.write += 2;
  return this;
};

/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt24 = function(i) {
  this.accommodate(3);
  this.data.setInt16(this.write, i >> 8 & 0xFFFF);
  this.data.setInt8(this.write, i >> 16 & 0xFF);
  this.write += 3;
  return this;
};

/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt32 = function(i) {
  this.accommodate(4);
  this.data.setInt32(this.write, i);
  this.write += 4;
  return this;
};

/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt16Le = function(i) {
  this.accommodate(2);
  this.data.setInt16(this.write, i, true);
  this.write += 2;
  return this;
};

/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt24Le = function(i) {
  this.accommodate(3);
  this.data.setInt8(this.write, i >> 16 & 0xFF);
  this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);
  this.write += 3;
  return this;
};

/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt32Le = function(i) {
  this.accommodate(4);
  this.data.setInt32(this.write, i, true);
  this.write += 4;
  return this;
};

/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt = function(i, n) {
  _checkBitsParam(n);
  this.accommodate(n / 8);
  do {
    n -= 8;
    this.data.setInt8(this.write++, (i >> n) & 0xFF);
  } while(n > 0);
  return this;
};

/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putSignedInt = function(i, n) {
  _checkBitsParam(n);
  this.accommodate(n / 8);
  if(i < 0) {
    i += 2 << (n - 1);
  }
  return this.putInt(i, n);
};

/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */
util.DataBuffer.prototype.getByte = function() {
  return this.data.getInt8(this.read++);
};

/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.DataBuffer.prototype.getInt16 = function() {
  var rval = this.data.getInt16(this.read);
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.DataBuffer.prototype.getInt24 = function() {
  var rval = (
    this.data.getInt16(this.read) << 8 ^
    this.data.getInt8(this.read + 2));
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.DataBuffer.prototype.getInt32 = function() {
  var rval = this.data.getInt32(this.read);
  this.read += 4;
  return rval;
};

/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.DataBuffer.prototype.getInt16Le = function() {
  var rval = this.data.getInt16(this.read, true);
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.DataBuffer.prototype.getInt24Le = function() {
  var rval = (
    this.data.getInt8(this.read) ^
    this.data.getInt16(this.read + 1, true) << 8);
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.DataBuffer.prototype.getInt32Le = function() {
  var rval = this.data.getInt32(this.read, true);
  this.read += 4;
  return rval;
};

/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.DataBuffer.prototype.getInt = function(n) {
  _checkBitsParam(n);
  var rval = 0;
  do {
    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
    rval = (rval << 8) + this.data.getInt8(this.read++);
    n -= 8;
  } while(n > 0);
  return rval;
};

/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.DataBuffer.prototype.getSignedInt = function(n) {
  // getInt checks n
  var x = this.getInt(n);
  var max = 2 << (n - 2);
  if(x >= max) {
    x -= max << 1;
  }
  return x;
};

/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer.
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */
util.DataBuffer.prototype.getBytes = function(count) {
  // TODO: deprecate this method, it is poorly named and
  // this.toString('binary') replaces it
  // add a toTypedArray()/toArrayBuffer() function
  var rval;
  if(count) {
    // read count bytes
    count = Math.min(this.length(), count);
    rval = this.data.slice(this.read, this.read + count);
    this.read += count;
  } else if(count === 0) {
    rval = '';
  } else {
    // read all bytes, optimize to only copy when needed
    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
    this.clear();
  }
  return rval;
};

/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */
util.DataBuffer.prototype.bytes = function(count) {
  // TODO: deprecate this method, it is poorly named, add "getString()"
  return (typeof(count) === 'undefined' ?
    this.data.slice(this.read) :
    this.data.slice(this.read, this.read + count));
};

/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */
util.DataBuffer.prototype.at = function(i) {
  return this.data.getUint8(this.read + i);
};

/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.setAt = function(i, b) {
  this.data.setUint8(i, b);
  return this;
};

/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */
util.DataBuffer.prototype.last = function() {
  return this.data.getUint8(this.write - 1);
};

/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */
util.DataBuffer.prototype.copy = function() {
  return new util.DataBuffer(this);
};

/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.compact = function() {
  if(this.read > 0) {
    var src = new Uint8Array(this.data.buffer, this.read);
    var dst = new Uint8Array(src.byteLength);
    dst.set(src);
    this.data = new DataView(dst);
    this.write -= this.read;
    this.read = 0;
  }
  return this;
};

/**
 * Clears this buffer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.clear = function() {
  this.data = new DataView(new ArrayBuffer(0));
  this.read = this.write = 0;
  return this;
};

/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.truncate = function(count) {
  this.write = Math.max(0, this.length() - count);
  this.read = Math.min(this.read, this.write);
  return this;
};

/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */
util.DataBuffer.prototype.toHex = function() {
  var rval = '';
  for(var i = this.read; i < this.data.byteLength; ++i) {
    var b = this.data.getUint8(i);
    if(b < 16) {
      rval += '0';
    }
    rval += b.toString(16);
  }
  return rval;
};

/**
 * Converts this buffer to a string, using the given encoding. If no
 * encoding is given, 'utf8' (UTF-8) is used.
 *
 * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
 *          'base64' (default: 'utf8').
 *
 * @return a string representation of the bytes in this buffer.
 */
util.DataBuffer.prototype.toString = function(encoding) {
  var view = new Uint8Array(this.data, this.read, this.length());
  encoding = encoding || 'utf8';

  // encode to string
  if(encoding === 'binary' || encoding === 'raw') {
    return util.binary.raw.encode(view);
  }
  if(encoding === 'hex') {
    return util.binary.hex.encode(view);
  }
  if(encoding === 'base64') {
    return util.binary.base64.encode(view);
  }

  // decode to text
  if(encoding === 'utf8') {
    return util.text.utf8.decode(view);
  }
  if(encoding === 'utf16') {
    return util.text.utf16.decode(view);
  }

  throw new Error('Invalid encoding: ' + encoding);
};

/** End Buffer w/UInt8Array backing */

/**
 * Creates a buffer that stores bytes. A value may be given to populate the
 * buffer with data. This value can either be string of encoded bytes or a
 * regular string of characters. When passing a string of binary encoded
 * bytes, the encoding `raw` should be given. This is also the default. When
 * passing a string of characters, the encoding `utf8` should be given.
 *
 * @param [input] a string with encoded bytes to store in the buffer.
 * @param [encoding] (default: 'raw', other: 'utf8').
 */
util.createBuffer = function(input, encoding) {
  // TODO: deprecate, use new ByteBuffer() instead
  encoding = encoding || 'raw';
  if(input !== undefined && encoding === 'utf8') {
    input = util.encodeUtf8(input);
  }
  return new util.ByteBuffer(input);
};

/**
 * Fills a string with a particular value. If you want the string to be a byte
 * string, pass in String.fromCharCode(theByte).
 *
 * @param c the character to fill the string with, use String.fromCharCode
 *          to fill the string with a byte value.
 * @param n the number of characters of value c to fill with.
 *
 * @return the filled string.
 */
util.fillString = function(c, n) {
  var s = '';
  while(n > 0) {
    if(n & 1) {
      s += c;
    }
    n >>>= 1;
    if(n > 0) {
      c += c;
    }
  }
  return s;
};

/**
 * Performs a per byte XOR between two byte strings and returns the result as a
 * string of bytes.
 *
 * @param s1 first string of bytes.
 * @param s2 second string of bytes.
 * @param n the number of bytes to XOR.
 *
 * @return the XOR'd result.
 */
util.xorBytes = function(s1, s2, n) {
  var s3 = '';
  var b = '';
  var t = '';
  var i = 0;
  var c = 0;
  for(; n > 0; --n, ++i) {
    b = s1.charCodeAt(i) ^ s2.charCodeAt(i);
    if(c >= 10) {
      s3 += t;
      t = '';
      c = 0;
    }
    t += String.fromCharCode(b);
    ++c;
  }
  s3 += t;
  return s3;
};

/**
 * Converts a hex string into a 'binary' encoded string of bytes.
 *
 * @param hex the hexadecimal string to convert.
 *
 * @return the binary-encoded string of bytes.
 */
util.hexToBytes = function(hex) {
  // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
  var rval = '';
  var i = 0;
  if(hex.length & 1 == 1) {
    // odd number of characters, convert first character alone
    i = 1;
    rval += String.fromCharCode(parseInt(hex[0], 16));
  }
  // convert 2 characters (1 byte) at a time
  for(; i < hex.length; i += 2) {
    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
  }
  return rval;
};

/**
 * Converts a 'binary' encoded string of bytes to hex.
 *
 * @param bytes the byte string to convert.
 *
 * @return the string of hexadecimal characters.
 */
util.bytesToHex = function(bytes) {
  // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
  return util.createBuffer(bytes).toHex();
};

/**
 * Converts an 32-bit integer to 4-big-endian byte string.
 *
 * @param i the integer.
 *
 * @return the byte string.
 */
util.int32ToBytes = function(i) {
  return (
    String.fromCharCode(i >> 24 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

// base64 characters, reverse mapping
var _base64 =
  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
var _base64Idx = [
/*43 -43 = 0*/
/*'+',  1,  2,  3,'/' */
   62, -1, -1, -1, 63,

/*'0','1','2','3','4','5','6','7','8','9' */
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61,

/*15, 16, 17,'=', 19, 20, 21 */
  -1, -1, -1, 64, -1, -1, -1,

/*65 - 43 = 22*/
/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,

/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,

/*91 - 43 = 48 */
/*48, 49, 50, 51, 52, 53 */
  -1, -1, -1, -1, -1, -1,

/*97 - 43 = 54*/
/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,

/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
   39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
];

// base58 characters (Bitcoin alphabet)
var _base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

/**
 * Base64 encodes a 'binary' encoded string of bytes.
 *
 * @param input the binary encoded string of bytes to base64-encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output.
 */
util.encode64 = function(input, maxline) {
  // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
  var line = '';
  var output = '';
  var chr1, chr2, chr3;
  var i = 0;
  while(i < input.length) {
    chr1 = input.charCodeAt(i++);
    chr2 = input.charCodeAt(i++);
    chr3 = input.charCodeAt(i++);

    // encode 4 character group
    line += _base64.charAt(chr1 >> 2);
    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
    if(isNaN(chr2)) {
      line += '==';
    } else {
      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
    }

    if(maxline && line.length > maxline) {
      output += line.substr(0, maxline) + '\r\n';
      line = line.substr(maxline);
    }
  }
  output += line;
  return output;
};

/**
 * Base64 decodes a string into a 'binary' encoded string of bytes.
 *
 * @param input the base64-encoded input.
 *
 * @return the binary encoded string.
 */
util.decode64 = function(input) {
  // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."

  // remove all non-base64 characters
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

  var output = '';
  var enc1, enc2, enc3, enc4;
  var i = 0;

  while(i < input.length) {
    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

    output += String.fromCharCode((enc1 << 2) | (enc2 >> 4));
    if(enc3 !== 64) {
      // decoded at least 2 bytes
      output += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));
      if(enc4 !== 64) {
        // decoded 3 bytes
        output += String.fromCharCode(((enc3 & 3) << 6) | enc4);
      }
    }
  }

  return output;
};

/**
 * Encodes the given string of characters (a standard JavaScript
 * string) as a binary encoded string where the bytes represent
 * a UTF-8 encoded string of characters. Non-ASCII characters will be
 * encoded as multiple bytes according to UTF-8.
 *
 * @param str a standard string of characters to encode.
 *
 * @return the binary encoded string.
 */
util.encodeUtf8 = function(str) {
  return unescape(encodeURIComponent(str));
};

/**
 * Decodes a binary encoded string that contains bytes that
 * represent a UTF-8 encoded string of characters -- into a
 * string of characters (a standard JavaScript string).
 *
 * @param str the binary encoded string to decode.
 *
 * @return the resulting standard string of characters.
 */
util.decodeUtf8 = function(str) {
  return decodeURIComponent(escape(str));
};

// binary encoding/decoding tools
// FIXME: Experimental. Do not use yet.
util.binary = {
  raw: {},
  hex: {},
  base64: {},
  base58: {},
  baseN : {
    encode: baseN.encode,
    decode: baseN.decode
  }
};

/**
 * Encodes a Uint8Array as a binary-encoded string. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param bytes the Uint8Array to encode.
 *
 * @return the binary-encoded string.
 */
util.binary.raw.encode = function(bytes) {
  return String.fromCharCode.apply(null, bytes);
};

/**
 * Decodes a binary-encoded string to a Uint8Array. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param str the binary-encoded string to decode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.binary.raw.decode = function(str, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(str.length);
  }
  offset = offset || 0;
  var j = offset;
  for(var i = 0; i < str.length; ++i) {
    out[j++] = str.charCodeAt(i);
  }
  return output ? (j - offset) : out;
};

/**
 * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
 * ByteBuffer as a string of hexadecimal characters.
 *
 * @param bytes the bytes to convert.
 *
 * @return the string of hexadecimal characters.
 */
util.binary.hex.encode = util.bytesToHex;

/**
 * Decodes a hex-encoded string to a Uint8Array.
 *
 * @param hex the hexadecimal string to convert.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.binary.hex.decode = function(hex, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(Math.ceil(hex.length / 2));
  }
  offset = offset || 0;
  var i = 0, j = offset;
  if(hex.length & 1) {
    // odd number of characters, convert first character alone
    i = 1;
    out[j++] = parseInt(hex[0], 16);
  }
  // convert 2 characters (1 byte) at a time
  for(; i < hex.length; i += 2) {
    out[j++] = parseInt(hex.substr(i, 2), 16);
  }
  return output ? (j - offset) : out;
};

/**
 * Base64-encodes a Uint8Array.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output string.
 */
util.binary.base64.encode = function(input, maxline) {
  var line = '';
  var output = '';
  var chr1, chr2, chr3;
  var i = 0;
  while(i < input.byteLength) {
    chr1 = input[i++];
    chr2 = input[i++];
    chr3 = input[i++];

    // encode 4 character group
    line += _base64.charAt(chr1 >> 2);
    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
    if(isNaN(chr2)) {
      line += '==';
    } else {
      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
    }

    if(maxline && line.length > maxline) {
      output += line.substr(0, maxline) + '\r\n';
      line = line.substr(maxline);
    }
  }
  output += line;
  return output;
};

/**
 * Decodes a base64-encoded string to a Uint8Array.
 *
 * @param input the base64-encoded input string.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.binary.base64.decode = function(input, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(Math.ceil(input.length / 4) * 3);
  }

  // remove all non-base64 characters
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

  offset = offset || 0;
  var enc1, enc2, enc3, enc4;
  var i = 0, j = offset;

  while(i < input.length) {
    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

    out[j++] = (enc1 << 2) | (enc2 >> 4);
    if(enc3 !== 64) {
      // decoded at least 2 bytes
      out[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);
      if(enc4 !== 64) {
        // decoded 3 bytes
        out[j++] = ((enc3 & 3) << 6) | enc4;
      }
    }
  }

  // make sure result is the exact decoded length
  return output ? (j - offset) : out.subarray(0, j);
};

// add support for base58 encoding/decoding with Bitcoin alphabet
util.binary.base58.encode = function(input, maxline) {
  return util.binary.baseN.encode(input, _base58, maxline);
};
util.binary.base58.decode = function(input, maxline) {
  return util.binary.baseN.decode(input, _base58, maxline);
};

// text encoding/decoding tools
// FIXME: Experimental. Do not use yet.
util.text = {
  utf8: {},
  utf16: {}
};

/**
 * Encodes the given string as UTF-8 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.text.utf8.encode = function(str, output, offset) {
  str = util.encodeUtf8(str);
  var out = output;
  if(!out) {
    out = new Uint8Array(str.length);
  }
  offset = offset || 0;
  var j = offset;
  for(var i = 0; i < str.length; ++i) {
    out[j++] = str.charCodeAt(i);
  }
  return output ? (j - offset) : out;
};

/**
 * Decodes the UTF-8 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */
util.text.utf8.decode = function(bytes) {
  return util.decodeUtf8(String.fromCharCode.apply(null, bytes));
};

/**
 * Encodes the given string as UTF-16 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.text.utf16.encode = function(str, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(str.length * 2);
  }
  var view = new Uint16Array(out.buffer);
  offset = offset || 0;
  var j = offset;
  var k = offset;
  for(var i = 0; i < str.length; ++i) {
    view[k++] = str.charCodeAt(i);
    j += 2;
  }
  return output ? (j - offset) : out;
};

/**
 * Decodes the UTF-16 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */
util.text.utf16.decode = function(bytes) {
  return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
};

/**
 * Deflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true to return only raw deflate data, false to include zlib
 *          header and trailer.
 *
 * @return the deflated data as a string.
 */
util.deflate = function(api, bytes, raw) {
  bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);

  // strip zlib header and trailer if necessary
  if(raw) {
    // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
    // there is a 4-byte DICT (alder-32) block before the data if
    // its 5th bit is set
    var start = 2;
    var flg = bytes.charCodeAt(1);
    if(flg & 0x20) {
      start = 6;
    }
    // zlib trailer is 4 bytes of adler-32
    bytes = bytes.substring(start, bytes.length - 4);
  }

  return bytes;
};

/**
 * Inflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true if the incoming data has no zlib header or trailer and is
 *          raw DEFLATE data.
 *
 * @return the inflated data as a string, null on error.
 */
util.inflate = function(api, bytes, raw) {
  // TODO: add zlib header and trailer if necessary/possible
  var rval = api.inflate(util.encode64(bytes)).rval;
  return (rval === null) ? null : util.decode64(rval);
};

/**
 * Sets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param obj the storage object, null to remove.
 */
var _setStorageObject = function(api, id, obj) {
  if(!api) {
    throw new Error('WebStorage not available.');
  }

  var rval;
  if(obj === null) {
    rval = api.removeItem(id);
  } else {
    // json-encode and base64-encode object
    obj = util.encode64(JSON.stringify(obj));
    rval = api.setItem(id, obj);
  }

  // handle potential flash error
  if(typeof(rval) !== 'undefined' && rval.rval !== true) {
    var error = new Error(rval.error.message);
    error.id = rval.error.id;
    error.name = rval.error.name;
    throw error;
  }
};

/**
 * Gets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 *
 * @return the storage object entry or null if none exists.
 */
var _getStorageObject = function(api, id) {
  if(!api) {
    throw new Error('WebStorage not available.');
  }

  // get the existing entry
  var rval = api.getItem(id);

  /* Note: We check api.init because we can't do (api == localStorage)
    on IE because of "Class doesn't support Automation" exception. Only
    the flash api has an init method so this works too, but we need a
    better solution in the future. */

  // flash returns item wrapped in an object, handle special case
  if(api.init) {
    if(rval.rval === null) {
      if(rval.error) {
        var error = new Error(rval.error.message);
        error.id = rval.error.id;
        error.name = rval.error.name;
        throw error;
      }
      // no error, but also no item
      rval = null;
    } else {
      rval = rval.rval;
    }
  }

  // handle decoding
  if(rval !== null) {
    // base64-decode and json-decode data
    rval = JSON.parse(util.decode64(rval));
  }

  return rval;
};

/**
 * Stores an item in local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 */
var _setItem = function(api, id, key, data) {
  // get storage object
  var obj = _getStorageObject(api, id);
  if(obj === null) {
    // create a new storage object
    obj = {};
  }
  // update key
  obj[key] = data;

  // set storage object
  _setStorageObject(api, id, obj);
};

/**
 * Gets an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 *
 * @return the item.
 */
var _getItem = function(api, id, key) {
  // get storage object
  var rval = _getStorageObject(api, id);
  if(rval !== null) {
    // return data at key
    rval = (key in rval) ? rval[key] : null;
  }

  return rval;
};

/**
 * Removes an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 */
var _removeItem = function(api, id, key) {
  // get storage object
  var obj = _getStorageObject(api, id);
  if(obj !== null && key in obj) {
    // remove key
    delete obj[key];

    // see if entry has no keys remaining
    var empty = true;
    for(var prop in obj) {
      empty = false;
      break;
    }
    if(empty) {
      // remove entry entirely if no keys are left
      obj = null;
    }

    // set storage object
    _setStorageObject(api, id, obj);
  }
};

/**
 * Clears the local disk storage identified by the given ID.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 */
var _clearItems = function(api, id) {
  _setStorageObject(api, id, null);
};

/**
 * Calls a storage function.
 *
 * @param func the function to call.
 * @param args the arguments for the function.
 * @param location the location argument.
 *
 * @return the return value from the function.
 */
var _callStorageFunction = function(func, args, location) {
  var rval = null;

  // default storage types
  if(typeof(location) === 'undefined') {
    location = ['web', 'flash'];
  }

  // apply storage types in order of preference
  var type;
  var done = false;
  var exception = null;
  for(var idx in location) {
    type = location[idx];
    try {
      if(type === 'flash' || type === 'both') {
        if(args[0] === null) {
          throw new Error('Flash local storage not available.');
        }
        rval = func.apply(this, args);
        done = (type === 'flash');
      }
      if(type === 'web' || type === 'both') {
        args[0] = localStorage;
        rval = func.apply(this, args);
        done = true;
      }
    } catch(ex) {
      exception = ex;
    }
    if(done) {
      break;
    }
  }

  if(!done) {
    throw exception;
  }

  return rval;
};

/**
 * Stores an item on local disk.
 *
 * The available types of local storage include 'flash', 'web', and 'both'.
 *
 * The type 'flash' refers to flash local storage (SharedObject). In order
 * to use flash local storage, the 'api' parameter must be valid. The type
 * 'web' refers to WebStorage, if supported by the browser. The type 'both'
 * refers to storing using both 'flash' and 'web', not just one or the
 * other.
 *
 * The location array should list the storage types to use in order of
 * preference:
 *
 * ['flash']: flash only storage
 * ['web']: web only storage
 * ['both']: try to store in both
 * ['flash','web']: store in flash first, but if not available, 'web'
 * ['web','flash']: store in web first, but if not available, 'flash'
 *
 * The location array defaults to: ['web', 'flash']
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 * @param location an array with the preferred types of storage to use.
 */
util.setItem = function(api, id, key, data, location) {
  _callStorageFunction(_setItem, arguments, location);
};

/**
 * Gets an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 *
 * @return the item.
 */
util.getItem = function(api, id, key, location) {
  return _callStorageFunction(_getItem, arguments, location);
};

/**
 * Removes an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 */
util.removeItem = function(api, id, key, location) {
  _callStorageFunction(_removeItem, arguments, location);
};

/**
 * Clears the local disk storage identified by the given ID.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface if flash is available.
 * @param id the storage ID to use.
 * @param location an array with the preferred types of storage to use.
 */
util.clearItems = function(api, id, location) {
  _callStorageFunction(_clearItems, arguments, location);
};

/**
 * Check if an object is empty.
 *
 * Taken from:
 * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
 *
 * @param object the object to check.
 */
util.isEmpty = function(obj) {
  for(var prop in obj) {
    if(obj.hasOwnProperty(prop)) {
      return false;
    }
  }
  return true;
};

/**
 * Format with simple printf-style interpolation.
 *
 * %%: literal '%'
 * %s,%o: convert next argument into a string.
 *
 * @param format the string to format.
 * @param ... arguments to interpolate into the format string.
 */
util.format = function(format) {
  var re = /%./g;
  // current match
  var match;
  // current part
  var part;
  // current arg index
  var argi = 0;
  // collected parts to recombine later
  var parts = [];
  // last index found
  var last = 0;
  // loop while matches remain
  while((match = re.exec(format))) {
    part = format.substring(last, re.lastIndex - 2);
    // don't add empty strings (ie, parts between %s%s)
    if(part.length > 0) {
      parts.push(part);
    }
    last = re.lastIndex;
    // switch on % code
    var code = match[0][1];
    switch(code) {
    case 's':
    case 'o':
      // check if enough arguments were given
      if(argi < arguments.length) {
        parts.push(arguments[argi++ + 1]);
      } else {
        parts.push('<?>');
      }
      break;
    // FIXME: do proper formating for numbers, etc
    //case 'f':
    //case 'd':
    case '%':
      parts.push('%');
      break;
    default:
      parts.push('<%' + code + '?>');
    }
  }
  // add trailing part of format string
  parts.push(format.substring(last));
  return parts.join('');
};

/**
 * Formats a number.
 *
 * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
 */
util.formatNumber = function(number, decimals, dec_point, thousands_sep) {
  // http://kevin.vanzonneveld.net
  // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // +     bugfix by: Michael White (http://crestidg.com)
  // +     bugfix by: Benjamin Lupton
  // +     bugfix by: Allan Jensen (http://www.winternet.no)
  // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  // *     example 1: number_format(1234.5678, 2, '.', '');
  // *     returns 1: 1234.57

  var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
  var d = dec_point === undefined ? ',' : dec_point;
  var t = thousands_sep === undefined ?
   '.' : thousands_sep, s = n < 0 ? '-' : '';
  var i = parseInt((n = Math.abs(+n || 0).toFixed(c)), 10) + '';
  var j = (i.length > 3) ? i.length % 3 : 0;
  return s + (j ? i.substr(0, j) + t : '') +
    i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + t) +
    (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');
};

/**
 * Formats a byte size.
 *
 * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
 */
util.formatSize = function(size) {
  if(size >= 1073741824) {
    size = util.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';
  } else if(size >= 1048576) {
    size = util.formatNumber(size / 1048576, 2, '.', '') + ' MiB';
  } else if(size >= 1024) {
    size = util.formatNumber(size / 1024, 0) + ' KiB';
  } else {
    size = util.formatNumber(size, 0) + ' bytes';
  }
  return size;
};

/**
 * Converts an IPv4 or IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv4 or IPv6 address to convert.
 *
 * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
 *         be parsed.
 */
util.bytesFromIP = function(ip) {
  if(ip.indexOf('.') !== -1) {
    return util.bytesFromIPv4(ip);
  }
  if(ip.indexOf(':') !== -1) {
    return util.bytesFromIPv6(ip);
  }
  return null;
};

/**
 * Converts an IPv4 string representation into bytes (in network order).
 *
 * @param ip the IPv4 address to convert.
 *
 * @return the 4-byte address or null if the address can't be parsed.
 */
util.bytesFromIPv4 = function(ip) {
  ip = ip.split('.');
  if(ip.length !== 4) {
    return null;
  }
  var b = util.createBuffer();
  for(var i = 0; i < ip.length; ++i) {
    var num = parseInt(ip[i], 10);
    if(isNaN(num)) {
      return null;
    }
    b.putByte(num);
  }
  return b.getBytes();
};

/**
 * Converts an IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv6 address to convert.
 *
 * @return the 16-byte address or null if the address can't be parsed.
 */
util.bytesFromIPv6 = function(ip) {
  var blanks = 0;
  ip = ip.split(':').filter(function(e) {
    if(e.length === 0) ++blanks;
    return true;
  });
  var zeros = (8 - ip.length + blanks) * 2;
  var b = util.createBuffer();
  for(var i = 0; i < 8; ++i) {
    if(!ip[i] || ip[i].length === 0) {
      b.fillWithByte(0, zeros);
      zeros = 0;
      continue;
    }
    var bytes = util.hexToBytes(ip[i]);
    if(bytes.length < 2) {
      b.putByte(0);
    }
    b.putBytes(bytes);
  }
  return b.getBytes();
};

/**
 * Converts 4-bytes into an IPv4 string representation or 16-bytes into
 * an IPv6 string representation. The bytes must be in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
 *         respectively, are given, otherwise null.
 */
util.bytesToIP = function(bytes) {
  if(bytes.length === 4) {
    return util.bytesToIPv4(bytes);
  }
  if(bytes.length === 16) {
    return util.bytesToIPv6(bytes);
  }
  return null;
};

/**
 * Converts 4-bytes into an IPv4 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 string representation or null for an invalid # of bytes.
 */
util.bytesToIPv4 = function(bytes) {
  if(bytes.length !== 4) {
    return null;
  }
  var ip = [];
  for(var i = 0; i < bytes.length; ++i) {
    ip.push(bytes.charCodeAt(i));
  }
  return ip.join('.');
};

/**
 * Converts 16-bytes into an IPv16 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv16 string representation or null for an invalid # of bytes.
 */
util.bytesToIPv6 = function(bytes) {
  if(bytes.length !== 16) {
    return null;
  }
  var ip = [];
  var zeroGroups = [];
  var zeroMaxGroup = 0;
  for(var i = 0; i < bytes.length; i += 2) {
    var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);
    // canonicalize zero representation
    while(hex[0] === '0' && hex !== '0') {
      hex = hex.substr(1);
    }
    if(hex === '0') {
      var last = zeroGroups[zeroGroups.length - 1];
      var idx = ip.length;
      if(!last || idx !== last.end + 1) {
        zeroGroups.push({start: idx, end: idx});
      } else {
        last.end = idx;
        if((last.end - last.start) >
          (zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start)) {
          zeroMaxGroup = zeroGroups.length - 1;
        }
      }
    }
    ip.push(hex);
  }
  if(zeroGroups.length > 0) {
    var group = zeroGroups[zeroMaxGroup];
    // only shorten group of length > 0
    if(group.end - group.start > 0) {
      ip.splice(group.start, group.end - group.start + 1, '');
      if(group.start === 0) {
        ip.unshift('');
      }
      if(group.end === 7) {
        ip.push('');
      }
    }
  }
  return ip.join(':');
};

/**
 * Estimates the number of processes that can be run concurrently. If
 * creating Web Workers, keep in mind that the main JavaScript process needs
 * its own core.
 *
 * @param options the options to use:
 *          update true to force an update (not use the cached value).
 * @param callback(err, max) called once the operation completes.
 */
util.estimateCores = function(options, callback) {
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};
  if('cores' in util && !options.update) {
    return callback(null, util.cores);
  }
  if(typeof navigator !== 'undefined' &&
    'hardwareConcurrency' in navigator &&
    navigator.hardwareConcurrency > 0) {
    util.cores = navigator.hardwareConcurrency;
    return callback(null, util.cores);
  }
  if(typeof Worker === 'undefined') {
    // workers not available
    util.cores = 1;
    return callback(null, util.cores);
  }
  if(typeof Blob === 'undefined') {
    // can't estimate, default to 2
    util.cores = 2;
    return callback(null, util.cores);
  }

  // create worker concurrency estimation code as blob
  var blobUrl = URL.createObjectURL(new Blob(['(',
    function() {
      self.addEventListener('message', function(e) {
        // run worker for 4 ms
        var st = Date.now();
        var et = st + 4;
        while(Date.now() < et);
        self.postMessage({st: st, et: et});
      });
    }.toString(),
  ')()'], {type: 'application/javascript'}));

  // take 5 samples using 16 workers
  sample([], 5, 16);

  function sample(max, samples, numWorkers) {
    if(samples === 0) {
      // get overlap average
      var avg = Math.floor(max.reduce(function(avg, x) {
        return avg + x;
      }, 0) / max.length);
      util.cores = Math.max(1, avg);
      URL.revokeObjectURL(blobUrl);
      return callback(null, util.cores);
    }
    map(numWorkers, function(err, results) {
      max.push(reduce(numWorkers, results));
      sample(max, samples - 1, numWorkers);
    });
  }

  function map(numWorkers, callback) {
    var workers = [];
    var results = [];
    for(var i = 0; i < numWorkers; ++i) {
      var worker = new Worker(blobUrl);
      worker.addEventListener('message', function(e) {
        results.push(e.data);
        if(results.length === numWorkers) {
          for(var i = 0; i < numWorkers; ++i) {
            workers[i].terminate();
          }
          callback(null, results);
        }
      });
      workers.push(worker);
    }
    for(var i = 0; i < numWorkers; ++i) {
      workers[i].postMessage(i);
    }
  }

  function reduce(numWorkers, results) {
    // find overlapping time windows
    var overlaps = [];
    for(var n = 0; n < numWorkers; ++n) {
      var r1 = results[n];
      var overlap = overlaps[n] = [];
      for(var i = 0; i < numWorkers; ++i) {
        if(n === i) {
          continue;
        }
        var r2 = results[i];
        if((r1.st > r2.st && r1.st < r2.et) ||
          (r2.st > r1.st && r2.st < r1.et)) {
          overlap.push(i);
        }
      }
    }
    // get maximum overlaps ... don't include overlapping worker itself
    // as the main JS process was also being scheduled during the work and
    // would have to be subtracted from the estimate anyway
    return overlaps.reduce(function(max, overlap) {
      return Math.max(max, overlap.length);
    }, 0);
  }
};
/**
 * Javascript implementation of X.509 and related components (such as
 * Certification Signing Requests) of a Public Key Infrastructure.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 *
 * The ASN.1 representation of an X.509v3 certificate is as follows
 * (see RFC 2459):
 *
 * Certificate ::= SEQUENCE {
 *   tbsCertificate       TBSCertificate,
 *   signatureAlgorithm   AlgorithmIdentifier,
 *   signatureValue       BIT STRING
 * }
 *
 * TBSCertificate ::= SEQUENCE {
 *   version         [0]  EXPLICIT Version DEFAULT v1,
 *   serialNumber         CertificateSerialNumber,
 *   signature            AlgorithmIdentifier,
 *   issuer               Name,
 *   validity             Validity,
 *   subject              Name,
 *   subjectPublicKeyInfo SubjectPublicKeyInfo,
 *   issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
 *                        -- If present, version shall be v2 or v3
 *   subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
 *                        -- If present, version shall be v2 or v3
 *   extensions      [3]  EXPLICIT Extensions OPTIONAL
 *                        -- If present, version shall be v3
 * }
 *
 * Version ::= INTEGER  { v1(0), v2(1), v3(2) }
 *
 * CertificateSerialNumber ::= INTEGER
 *
 * Name ::= CHOICE {
 *   // only one possible choice for now
 *   RDNSequence
 * }
 *
 * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
 *
 * RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
 *
 * AttributeTypeAndValue ::= SEQUENCE {
 *   type     AttributeType,
 *   value    AttributeValue
 * }
 * AttributeType ::= OBJECT IDENTIFIER
 * AttributeValue ::= ANY DEFINED BY AttributeType
 *
 * Validity ::= SEQUENCE {
 *   notBefore      Time,
 *   notAfter       Time
 * }
 *
 * Time ::= CHOICE {
 *   utcTime        UTCTime,
 *   generalTime    GeneralizedTime
 * }
 *
 * UniqueIdentifier ::= BIT STRING
 *
 * SubjectPublicKeyInfo ::= SEQUENCE {
 *   algorithm            AlgorithmIdentifier,
 *   subjectPublicKey     BIT STRING
 * }
 *
 * Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension
 *
 * Extension ::= SEQUENCE {
 *   extnID      OBJECT IDENTIFIER,
 *   critical    BOOLEAN DEFAULT FALSE,
 *   extnValue   OCTET STRING
 * }
 *
 * The only key algorithm currently supported for PKI is RSA.
 *
 * RSASSA-PSS signatures are described in RFC 3447 and RFC 4055.
 *
 * PKCS#10 v1.7 describes certificate signing requests:
 *
 * CertificationRequestInfo:
 *
 * CertificationRequestInfo ::= SEQUENCE {
 *   version       INTEGER { v1(0) } (v1,...),
 *   subject       Name,
 *   subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
 *   attributes    [0] Attributes{{ CRIAttributes }}
 * }
 *
 * Attributes { ATTRIBUTE:IOSet } ::= SET OF Attribute{{ IOSet }}
 *
 * CRIAttributes  ATTRIBUTE  ::= {
 *   ... -- add any locally defined attributes here -- }
 *
 * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
 *   type   ATTRIBUTE.&id({IOSet}),
 *   values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})
 * }
 *
 * CertificationRequest ::= SEQUENCE {
 *   certificationRequestInfo CertificationRequestInfo,
 *   signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},
 *   signature          BIT STRING
 * }
 */
var forge = require('./forge');
require('./aes');
require('./asn1');
require('./des');
require('./md');
require('./mgf');
require('./oids');
require('./pem');
require('./pss');
require('./rsa');
require('./util');

// shortcut for asn.1 API
var asn1 = forge.asn1;

/* Public Key Infrastructure (PKI) implementation. */
var pki = module.exports = forge.pki = forge.pki || {};
var oids = pki.oids;

// short name OID mappings
var _shortNames = {};
_shortNames['CN'] = oids['commonName'];
_shortNames['commonName'] = 'CN';
_shortNames['C'] = oids['countryName'];
_shortNames['countryName'] = 'C';
_shortNames['L'] = oids['localityName'];
_shortNames['localityName'] = 'L';
_shortNames['ST'] = oids['stateOrProvinceName'];
_shortNames['stateOrProvinceName'] = 'ST';
_shortNames['O'] = oids['organizationName'];
_shortNames['organizationName'] = 'O';
_shortNames['OU'] = oids['organizationalUnitName'];
_shortNames['organizationalUnitName'] = 'OU';
_shortNames['E'] = oids['emailAddress'];
_shortNames['emailAddress'] = 'E';

// validator for an SubjectPublicKeyInfo structure
// Note: Currently only works with an RSA public key
var publicKeyValidator = forge.pki.rsa.publicKeyValidator;

// validator for an X.509v3 certificate
var x509CertificateValidator = {
  name: 'Certificate',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'Certificate.TBSCertificate',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    captureAsn1: 'tbsCertificate',
    value: [{
      name: 'Certificate.TBSCertificate.version',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 0,
      constructed: true,
      optional: true,
      value: [{
        name: 'Certificate.TBSCertificate.version.integer',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: 'certVersion'
      }]
    }, {
      name: 'Certificate.TBSCertificate.serialNumber',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      capture: 'certSerialNumber'
    }, {
      name: 'Certificate.TBSCertificate.signature',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'Certificate.TBSCertificate.signature.algorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'certinfoSignatureOid'
      }, {
        name: 'Certificate.TBSCertificate.signature.parameters',
        tagClass: asn1.Class.UNIVERSAL,
        optional: true,
        captureAsn1: 'certinfoSignatureParams'
      }]
    }, {
      name: 'Certificate.TBSCertificate.issuer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'certIssuer'
    }, {
      name: 'Certificate.TBSCertificate.validity',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      // Note: UTC and generalized times may both appear so the capture
      // names are based on their detected order, the names used below
      // are only for the common case, which validity time really means
      // "notBefore" and which means "notAfter" will be determined by order
      value: [{
        // notBefore (Time) (UTC time case)
        name: 'Certificate.TBSCertificate.validity.notBefore (utc)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.UTCTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity1UTCTime'
      }, {
        // notBefore (Time) (generalized time case)
        name: 'Certificate.TBSCertificate.validity.notBefore (generalized)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.GENERALIZEDTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity2GeneralizedTime'
      }, {
        // notAfter (Time) (only UTC time is supported)
        name: 'Certificate.TBSCertificate.validity.notAfter (utc)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.UTCTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity3UTCTime'
      }, {
        // notAfter (Time) (only UTC time is supported)
        name: 'Certificate.TBSCertificate.validity.notAfter (generalized)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.GENERALIZEDTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity4GeneralizedTime'
      }]
    }, {
      // Name (subject) (RDNSequence)
      name: 'Certificate.TBSCertificate.subject',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'certSubject'
    },
    // SubjectPublicKeyInfo
    publicKeyValidator,
    {
      // issuerUniqueID (optional)
      name: 'Certificate.TBSCertificate.issuerUniqueID',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 1,
      constructed: true,
      optional: true,
      value: [{
        name: 'Certificate.TBSCertificate.issuerUniqueID.id',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.BITSTRING,
        constructed: false,
        // TODO: support arbitrary bit length ids
        captureBitStringValue: 'certIssuerUniqueId'
      }]
    }, {
      // subjectUniqueID (optional)
      name: 'Certificate.TBSCertificate.subjectUniqueID',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 2,
      constructed: true,
      optional: true,
      value: [{
        name: 'Certificate.TBSCertificate.subjectUniqueID.id',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.BITSTRING,
        constructed: false,
        // TODO: support arbitrary bit length ids
        captureBitStringValue: 'certSubjectUniqueId'
      }]
    }, {
      // Extensions (optional)
      name: 'Certificate.TBSCertificate.extensions',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 3,
      constructed: true,
      captureAsn1: 'certExtensions',
      optional: true
    }]
  }, {
    // AlgorithmIdentifier (signature algorithm)
    name: 'Certificate.signatureAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      // algorithm
      name: 'Certificate.signatureAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'certSignatureOid'
    }, {
      name: 'Certificate.TBSCertificate.signature.parameters',
      tagClass: asn1.Class.UNIVERSAL,
      optional: true,
      captureAsn1: 'certSignatureParams'
    }]
  }, {
    // SignatureValue
    name: 'Certificate.signatureValue',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.BITSTRING,
    constructed: false,
    captureBitStringValue: 'certSignature'
  }]
};

var rsassaPssParameterValidator = {
  name: 'rsapss',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'rsapss.hashAlgorithm',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    value: [{
      name: 'rsapss.hashAlgorithm.AlgorithmIdentifier',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.SEQUENCE,
      constructed: true,
      optional: true,
      value: [{
        name: 'rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'hashOid'
        /* parameter block omitted, for SHA1 NULL anyhow. */
      }]
    }]
  }, {
    name: 'rsapss.maskGenAlgorithm',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 1,
    constructed: true,
    value: [{
      name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.SEQUENCE,
      constructed: true,
      optional: true,
      value: [{
        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'maskGenOid'
      }, {
        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: 'maskGenHashOid'
          /* parameter block omitted, for SHA1 NULL anyhow. */
        }]
      }]
    }]
  }, {
    name: 'rsapss.saltLength',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 2,
    optional: true,
    value: [{
      name: 'rsapss.saltLength.saltLength',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.INTEGER,
      constructed: false,
      capture: 'saltLength'
    }]
  }, {
    name: 'rsapss.trailerField',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 3,
    optional: true,
    value: [{
      name: 'rsapss.trailer.trailer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.INTEGER,
      constructed: false,
      capture: 'trailer'
    }]
  }]
};

// validator for a CertificationRequestInfo structure
var certificationRequestInfoValidator = {
  name: 'CertificationRequestInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  captureAsn1: 'certificationRequestInfo',
  value: [{
    name: 'CertificationRequestInfo.integer',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'certificationRequestInfoVersion'
  }, {
    // Name (subject) (RDNSequence)
    name: 'CertificationRequestInfo.subject',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    captureAsn1: 'certificationRequestInfoSubject'
  },
  // SubjectPublicKeyInfo
  publicKeyValidator,
  {
    name: 'CertificationRequestInfo.attributes',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    optional: true,
    capture: 'certificationRequestInfoAttributes',
    value: [{
      name: 'CertificationRequestInfo.attributes',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'CertificationRequestInfo.attributes.type',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false
      }, {
        name: 'CertificationRequestInfo.attributes.value',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SET,
        constructed: true
      }]
    }]
  }]
};

// validator for a CertificationRequest structure
var certificationRequestValidator = {
  name: 'CertificationRequest',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  captureAsn1: 'csr',
  value: [
    certificationRequestInfoValidator, {
      // AlgorithmIdentifier (signature algorithm)
      name: 'CertificationRequest.signatureAlgorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        // algorithm
        name: 'CertificationRequest.signatureAlgorithm.algorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'csrSignatureOid'
      }, {
        name: 'CertificationRequest.signatureAlgorithm.parameters',
        tagClass: asn1.Class.UNIVERSAL,
        optional: true,
        captureAsn1: 'csrSignatureParams'
      }]
    }, {
      // signature
      name: 'CertificationRequest.signature',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.BITSTRING,
      constructed: false,
      captureBitStringValue: 'csrSignature'
    }
  ]
};

/**
 * Converts an RDNSequence of ASN.1 DER-encoded RelativeDistinguishedName
 * sets into an array with objects that have type and value properties.
 *
 * @param rdn the RDNSequence to convert.
 * @param md a message digest to append type and value to if provided.
 */
pki.RDNAttributesAsArray = function(rdn, md) {
  var rval = [];

  // each value in 'rdn' in is a SET of RelativeDistinguishedName
  var set, attr, obj;
  for(var si = 0; si < rdn.value.length; ++si) {
    // get the RelativeDistinguishedName set
    set = rdn.value[si];

    // each value in the SET is an AttributeTypeAndValue sequence
    // containing first a type (an OID) and second a value (defined by
    // the OID)
    for(var i = 0; i < set.value.length; ++i) {
      obj = {};
      attr = set.value[i];
      obj.type = asn1.derToOid(attr.value[0].value);
      obj.value = attr.value[1].value;
      obj.valueTagClass = attr.value[1].type;
      // if the OID is known, get its name and short name
      if(obj.type in oids) {
        obj.name = oids[obj.type];
        if(obj.name in _shortNames) {
          obj.shortName = _shortNames[obj.name];
        }
      }
      if(md) {
        md.update(obj.type);
        md.update(obj.value);
      }
      rval.push(obj);
    }
  }

  return rval;
};

/**
 * Converts ASN.1 CRIAttributes into an array with objects that have type and
 * value properties.
 *
 * @param attributes the CRIAttributes to convert.
 */
pki.CRIAttributesAsArray = function(attributes) {
  var rval = [];

  // each value in 'attributes' in is a SEQUENCE with an OID and a SET
  for(var si = 0; si < attributes.length; ++si) {
    // get the attribute sequence
    var seq = attributes[si];

    // each value in the SEQUENCE containing first a type (an OID) and
    // second a set of values (defined by the OID)
    var type = asn1.derToOid(seq.value[0].value);
    var values = seq.value[1].value;
    for(var vi = 0; vi < values.length; ++vi) {
      var obj = {};
      obj.type = type;
      obj.value = values[vi].value;
      obj.valueTagClass = values[vi].type;
      // if the OID is known, get its name and short name
      if(obj.type in oids) {
        obj.name = oids[obj.type];
        if(obj.name in _shortNames) {
          obj.shortName = _shortNames[obj.name];
        }
      }
      // parse extensions
      if(obj.type === oids.extensionRequest) {
        obj.extensions = [];
        for(var ei = 0; ei < obj.value.length; ++ei) {
          obj.extensions.push(pki.certificateExtensionFromAsn1(obj.value[ei]));
        }
      }
      rval.push(obj);
    }
  }

  return rval;
};

/**
 * Gets an issuer or subject attribute from its name, type, or short name.
 *
 * @param obj the issuer or subject object.
 * @param options a short name string or an object with:
 *          shortName the short name for the attribute.
 *          name the name for the attribute.
 *          type the type for the attribute.
 *
 * @return the attribute.
 */
function _getAttribute(obj, options) {
  if(typeof options === 'string') {
    options = {shortName: options};
  }

  var rval = null;
  var attr;
  for(var i = 0; rval === null && i < obj.attributes.length; ++i) {
    attr = obj.attributes[i];
    if(options.type && options.type === attr.type) {
      rval = attr;
    } else if(options.name && options.name === attr.name) {
      rval = attr;
    } else if(options.shortName && options.shortName === attr.shortName) {
      rval = attr;
    }
  }
  return rval;
}

/**
 * Converts signature parameters from ASN.1 structure.
 *
 * Currently only RSASSA-PSS supported.  The PKCS#1 v1.5 signature scheme had
 * no parameters.
 *
 * RSASSA-PSS-params  ::=  SEQUENCE  {
 *   hashAlgorithm      [0] HashAlgorithm DEFAULT
 *                             sha1Identifier,
 *   maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT
 *                             mgf1SHA1Identifier,
 *   saltLength         [2] INTEGER DEFAULT 20,
 *   trailerField       [3] INTEGER DEFAULT 1
 * }
 *
 * HashAlgorithm  ::=  AlgorithmIdentifier
 *
 * MaskGenAlgorithm  ::=  AlgorithmIdentifier
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *   algorithm OBJECT IDENTIFIER,
 *   parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * @param oid The OID specifying the signature algorithm
 * @param obj The ASN.1 structure holding the parameters
 * @param fillDefaults Whether to use return default values where omitted
 * @return signature parameter object
 */
var _readSignatureParameters = function(oid, obj, fillDefaults) {
  var params = {};

  if(oid !== oids['RSASSA-PSS']) {
    return params;
  }

  if(fillDefaults) {
    params = {
      hash: {
        algorithmOid: oids['sha1']
      },
      mgf: {
        algorithmOid: oids['mgf1'],
        hash: {
          algorithmOid: oids['sha1']
        }
      },
      saltLength: 20
    };
  }

  var capture = {};
  var errors = [];
  if(!asn1.validate(obj, rsassaPssParameterValidator, capture, errors)) {
    var error = new Error('Cannot read RSASSA-PSS parameter block.');
    error.errors = errors;
    throw error;
  }

  if(capture.hashOid !== undefined) {
    params.hash = params.hash || {};
    params.hash.algorithmOid = asn1.derToOid(capture.hashOid);
  }

  if(capture.maskGenOid !== undefined) {
    params.mgf = params.mgf || {};
    params.mgf.algorithmOid = asn1.derToOid(capture.maskGenOid);
    params.mgf.hash = params.mgf.hash || {};
    params.mgf.hash.algorithmOid = asn1.derToOid(capture.maskGenHashOid);
  }

  if(capture.saltLength !== undefined) {
    params.saltLength = capture.saltLength.charCodeAt(0);
  }

  return params;
};

/**
 * Create signature digest for OID.
 *
 * @param options
 *   signatureOid: the OID specifying the signature algorithm.
 *   type: a human readable type for error messages
 * @return a created md instance. throws if unknown oid.
 */
var _createSignatureDigest = function(options) {
  switch(oids[options.signatureOid]) {
    case 'sha1WithRSAEncryption':
    // deprecated alias
    case 'sha1WithRSASignature':
      return forge.md.sha1.create();
    case 'md5WithRSAEncryption':
      return forge.md.md5.create();
    case 'sha256WithRSAEncryption':
      return forge.md.sha256.create();
    case 'sha384WithRSAEncryption':
      return forge.md.sha384.create();
    case 'sha512WithRSAEncryption':
      return forge.md.sha512.create();
    case 'RSASSA-PSS':
      return forge.md.sha256.create();
    default:
      var error = new Error(
        'Could not compute ' + options.type + ' digest. ' +
        'Unknown signature OID.');
      error.signatureOid = options.signatureOid;
      throw error;
  }
};

/**
 * Verify signature on certificate or CSR.
 *
 * @param options:
 *   certificate the certificate or CSR to verify.
 *   md the signature digest.
 *   signature the signature
 * @return a created md instance. throws if unknown oid.
 */
var _verifySignature = function(options) {
  var cert = options.certificate;
  var scheme;

  switch(cert.signatureOid) {
    case oids.sha1WithRSAEncryption:
    // deprecated alias
    case oids.sha1WithRSASignature:
      /* use PKCS#1 v1.5 padding scheme */
      break;
    case oids['RSASSA-PSS']:
      var hash, mgf;

      /* initialize mgf */
      hash = oids[cert.signatureParameters.mgf.hash.algorithmOid];
      if(hash === undefined || forge.md[hash] === undefined) {
        var error = new Error('Unsupported MGF hash function.');
        error.oid = cert.signatureParameters.mgf.hash.algorithmOid;
        error.name = hash;
        throw error;
      }

      mgf = oids[cert.signatureParameters.mgf.algorithmOid];
      if(mgf === undefined || forge.mgf[mgf] === undefined) {
        var error = new Error('Unsupported MGF function.');
        error.oid = cert.signatureParameters.mgf.algorithmOid;
        error.name = mgf;
        throw error;
      }

      mgf = forge.mgf[mgf].create(forge.md[hash].create());

      /* initialize hash function */
      hash = oids[cert.signatureParameters.hash.algorithmOid];
      if(hash === undefined || forge.md[hash] === undefined) {
        var error = new Error('Unsupported RSASSA-PSS hash function.');
        error.oid = cert.signatureParameters.hash.algorithmOid;
        error.name = hash;
        throw error;
      }

      scheme = forge.pss.create(
        forge.md[hash].create(), mgf, cert.signatureParameters.saltLength
      );
      break;
  }

  // verify signature on cert using public key
  return cert.publicKey.verify(
    options.md.digest().getBytes(), options.signature, scheme
  );
};

/**
 * Converts an X.509 certificate from PEM format.
 *
 * Note: If the certificate is to be verified then compute hash should
 * be set to true. This will scan the TBSCertificate part of the ASN.1
 * object while it is converted so it doesn't need to be converted back
 * to ASN.1-DER-encoding later.
 *
 * @param pem the PEM-formatted certificate.
 * @param computeHash true to compute the hash for verification.
 * @param strict true to be strict when checking ASN.1 value lengths, false to
 *          allow truncated values (default: true).
 *
 * @return the certificate.
 */
pki.certificateFromPem = function(pem, computeHash, strict) {
  var msg = forge.pem.decode(pem)[0];

  if(msg.type !== 'CERTIFICATE' &&
    msg.type !== 'X509 CERTIFICATE' &&
    msg.type !== 'TRUSTED CERTIFICATE') {
    var error = new Error(
      'Could not convert certificate from PEM; PEM header type ' +
      'is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".');
    error.headerType = msg.type;
    throw error;
  }
  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error(
      'Could not convert certificate from PEM; PEM is encrypted.');
  }

  // convert DER to ASN.1 object
  var obj = asn1.fromDer(msg.body, strict);

  return pki.certificateFromAsn1(obj, computeHash);
};

/**
 * Converts an X.509 certificate to PEM format.
 *
 * @param cert the certificate.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted certificate.
 */
pki.certificateToPem = function(cert, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'CERTIFICATE',
    body: asn1.toDer(pki.certificateToAsn1(cert)).getBytes()
  };
  return forge.pem.encode(msg, {maxline: maxline});
};

/**
 * Converts an RSA public key from PEM format.
 *
 * @param pem the PEM-formatted public key.
 *
 * @return the public key.
 */
pki.publicKeyFromPem = function(pem) {
  var msg = forge.pem.decode(pem)[0];

  if(msg.type !== 'PUBLIC KEY' && msg.type !== 'RSA PUBLIC KEY') {
    var error = new Error('Could not convert public key from PEM; PEM header ' +
      'type is not "PUBLIC KEY" or "RSA PUBLIC KEY".');
    error.headerType = msg.type;
    throw error;
  }
  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert public key from PEM; PEM is encrypted.');
  }

  // convert DER to ASN.1 object
  var obj = asn1.fromDer(msg.body);

  return pki.publicKeyFromAsn1(obj);
};

/**
 * Converts an RSA public key to PEM format (using a SubjectPublicKeyInfo).
 *
 * @param key the public key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted public key.
 */
pki.publicKeyToPem = function(key, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'PUBLIC KEY',
    body: asn1.toDer(pki.publicKeyToAsn1(key)).getBytes()
  };
  return forge.pem.encode(msg, {maxline: maxline});
};

/**
 * Converts an RSA public key to PEM format (using an RSAPublicKey).
 *
 * @param key the public key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted public key.
 */
pki.publicKeyToRSAPublicKeyPem = function(key, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'RSA PUBLIC KEY',
    body: asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes()
  };
  return forge.pem.encode(msg, {maxline: maxline});
};

/**
 * Gets a fingerprint for the given public key.
 *
 * @param options the options to use.
 *          [md] the message digest object to use (defaults to forge.md.sha1).
 *          [type] the type of fingerprint, such as 'RSAPublicKey',
 *            'SubjectPublicKeyInfo' (defaults to 'RSAPublicKey').
 *          [encoding] an alternative output encoding, such as 'hex'
 *            (defaults to none, outputs a byte buffer).
 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
 *            output, eg: ':' (defaults to none).
 *
 * @return the fingerprint as a byte buffer or other encoding based on options.
 */
pki.getPublicKeyFingerprint = function(key, options) {
  options = options || {};
  var md = options.md || forge.md.sha1.create();
  var type = options.type || 'RSAPublicKey';

  var bytes;
  switch(type) {
    case 'RSAPublicKey':
      bytes = asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes();
      break;
    case 'SubjectPublicKeyInfo':
      bytes = asn1.toDer(pki.publicKeyToAsn1(key)).getBytes();
      break;
    default:
      throw new Error('Unknown fingerprint type "' + options.type + '".');
  }

  // hash public key bytes
  md.start();
  md.update(bytes);
  var digest = md.digest();
  if(options.encoding === 'hex') {
    var hex = digest.toHex();
    if(options.delimiter) {
      return hex.match(/.{2}/g).join(options.delimiter);
    }
    return hex;
  } else if(options.encoding === 'binary') {
    return digest.getBytes();
  } else if(options.encoding) {
    throw new Error('Unknown encoding "' + options.encoding + '".');
  }
  return digest;
};

/**
 * Converts a PKCS#10 certification request (CSR) from PEM format.
 *
 * Note: If the certification request is to be verified then compute hash
 * should be set to true. This will scan the CertificationRequestInfo part of
 * the ASN.1 object while it is converted so it doesn't need to be converted
 * back to ASN.1-DER-encoding later.
 *
 * @param pem the PEM-formatted certificate.
 * @param computeHash true to compute the hash for verification.
 * @param strict true to be strict when checking ASN.1 value lengths, false to
 *          allow truncated values (default: true).
 *
 * @return the certification request (CSR).
 */
pki.certificationRequestFromPem = function(pem, computeHash, strict) {
  var msg = forge.pem.decode(pem)[0];

  if(msg.type !== 'CERTIFICATE REQUEST') {
    var error = new Error('Could not convert certification request from PEM; ' +
      'PEM header type is not "CERTIFICATE REQUEST".');
    error.headerType = msg.type;
    throw error;
  }
  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert certification request from PEM; ' +
      'PEM is encrypted.');
  }

  // convert DER to ASN.1 object
  var obj = asn1.fromDer(msg.body, strict);

  return pki.certificationRequestFromAsn1(obj, computeHash);
};

/**
 * Converts a PKCS#10 certification request (CSR) to PEM format.
 *
 * @param csr the certification request.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted certification request.
 */
pki.certificationRequestToPem = function(csr, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'CERTIFICATE REQUEST',
    body: asn1.toDer(pki.certificationRequestToAsn1(csr)).getBytes()
  };
  return forge.pem.encode(msg, {maxline: maxline});
};

/**
 * Creates an empty X.509v3 RSA certificate.
 *
 * @return the certificate.
 */
pki.createCertificate = function() {
  var cert = {};
  cert.version = 0x02;
  cert.serialNumber = '00';
  cert.signatureOid = null;
  cert.signature = null;
  cert.siginfo = {};
  cert.siginfo.algorithmOid = null;
  cert.validity = {};
  cert.validity.notBefore = new Date();
  cert.validity.notAfter = new Date();

  cert.issuer = {};
  cert.issuer.getField = function(sn) {
    return _getAttribute(cert.issuer, sn);
  };
  cert.issuer.addField = function(attr) {
    _fillMissingFields([attr]);
    cert.issuer.attributes.push(attr);
  };
  cert.issuer.attributes = [];
  cert.issuer.hash = null;

  cert.subject = {};
  cert.subject.getField = function(sn) {
    return _getAttribute(cert.subject, sn);
  };
  cert.subject.addField = function(attr) {
    _fillMissingFields([attr]);
    cert.subject.attributes.push(attr);
  };
  cert.subject.attributes = [];
  cert.subject.hash = null;

  cert.extensions = [];
  cert.publicKey = null;
  cert.md = null;

  /**
   * Sets the subject of this certificate.
   *
   * @param attrs the array of subject attributes to use.
   * @param uniqueId an optional a unique ID to use.
   */
  cert.setSubject = function(attrs, uniqueId) {
    // set new attributes, clear hash
    _fillMissingFields(attrs);
    cert.subject.attributes = attrs;
    delete cert.subject.uniqueId;
    if(uniqueId) {
      // TODO: support arbitrary bit length ids
      cert.subject.uniqueId = uniqueId;
    }
    cert.subject.hash = null;
  };

  /**
   * Sets the issuer of this certificate.
   *
   * @param attrs the array of issuer attributes to use.
   * @param uniqueId an optional a unique ID to use.
   */
  cert.setIssuer = function(attrs, uniqueId) {
    // set new attributes, clear hash
    _fillMissingFields(attrs);
    cert.issuer.attributes = attrs;
    delete cert.issuer.uniqueId;
    if(uniqueId) {
      // TODO: support arbitrary bit length ids
      cert.issuer.uniqueId = uniqueId;
    }
    cert.issuer.hash = null;
  };

  /**
   * Sets the extensions of this certificate.
   *
   * @param exts the array of extensions to use.
   */
  cert.setExtensions = function(exts) {
    for(var i = 0; i < exts.length; ++i) {
      _fillMissingExtensionFields(exts[i], {cert: cert});
    }
    // set new extensions
    cert.extensions = exts;
  };

  /**
   * Gets an extension by its name or id.
   *
   * @param options the name to use or an object with:
   *          name the name to use.
   *          id the id to use.
   *
   * @return the extension or null if not found.
   */
  cert.getExtension = function(options) {
    if(typeof options === 'string') {
      options = {name: options};
    }

    var rval = null;
    var ext;
    for(var i = 0; rval === null && i < cert.extensions.length; ++i) {
      ext = cert.extensions[i];
      if(options.id && ext.id === options.id) {
        rval = ext;
      } else if(options.name && ext.name === options.name) {
        rval = ext;
      }
    }
    return rval;
  };

  /**
   * Signs this certificate using the given private key.
   *
   * @param key the private key to sign with.
   * @param md the message digest object to use (defaults to forge.md.sha1).
   */
  cert.sign = function(key, md) {
    // TODO: get signature OID from private key
    cert.md = md || forge.md.sha1.create();
    var algorithmOid = oids[cert.md.algorithm + 'WithRSAEncryption'];
    if(!algorithmOid) {
      var error = new Error('Could not compute certificate digest. ' +
        'Unknown message digest algorithm OID.');
      error.algorithm = cert.md.algorithm;
      throw error;
    }
    cert.signatureOid = cert.siginfo.algorithmOid = algorithmOid;

    // get TBSCertificate, convert to DER
    cert.tbsCertificate = pki.getTBSCertificate(cert);
    var bytes = asn1.toDer(cert.tbsCertificate);

    // digest and sign
    cert.md.update(bytes.getBytes());
    cert.signature = key.sign(cert.md);
  };

  /**
   * Attempts verify the signature on the passed certificate using this
   * certificate's public key.
   *
   * @param child the certificate to verify.
   *
   * @return true if verified, false if not.
   */
  cert.verify = function(child) {
    var rval = false;

    if(!cert.issued(child)) {
      var issuer = child.issuer;
      var subject = cert.subject;
      var error = new Error(
        'The parent certificate did not issue the given child ' +
        'certificate; the child certificate\'s issuer does not match the ' +
        'parent\'s subject.');
      error.expectedIssuer = subject.attributes;
      error.actualIssuer = issuer.attributes;
      throw error;
    }

    var md = child.md;
    if(md === null) {
      // create digest for OID signature types
      md = _createSignatureDigest({
        signatureOid: child.signatureOid,
        type: 'certificate'
      });

      // produce DER formatted TBSCertificate and digest it
      var tbsCertificate = child.tbsCertificate || pki.getTBSCertificate(child);
      var bytes = asn1.toDer(tbsCertificate);
      md.update(bytes.getBytes());
    }

    if(md !== null) {
      rval = _verifySignature({
        certificate: cert, md: md, signature: child.signature
      });
    }

    return rval;
  };

  /**
   * Returns true if this certificate's issuer matches the passed
   * certificate's subject. Note that no signature check is performed.
   *
   * @param parent the certificate to check.
   *
   * @return true if this certificate's issuer matches the passed certificate's
   *         subject.
   */
  cert.isIssuer = function(parent) {
    var rval = false;

    var i = cert.issuer;
    var s = parent.subject;

    // compare hashes if present
    if(i.hash && s.hash) {
      rval = (i.hash === s.hash);
    } else if(i.attributes.length === s.attributes.length) {
      // all attributes are the same so issuer matches subject
      rval = true;
      var iattr, sattr;
      for(var n = 0; rval && n < i.attributes.length; ++n) {
        iattr = i.attributes[n];
        sattr = s.attributes[n];
        if(iattr.type !== sattr.type || iattr.value !== sattr.value) {
          // attribute mismatch
          rval = false;
        }
      }
    }

    return rval;
  };

  /**
   * Returns true if this certificate's subject matches the issuer of the
   * given certificate). Note that not signature check is performed.
   *
   * @param child the certificate to check.
   *
   * @return true if this certificate's subject matches the passed
   *         certificate's issuer.
   */
  cert.issued = function(child) {
    return child.isIssuer(cert);
  };

  /**
   * Generates the subjectKeyIdentifier for this certificate as byte buffer.
   *
   * @return the subjectKeyIdentifier for this certificate as byte buffer.
   */
  cert.generateSubjectKeyIdentifier = function() {
    /* See: 4.2.1.2 section of the the RFC3280, keyIdentifier is either:

      (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
        value of the BIT STRING subjectPublicKey (excluding the tag,
        length, and number of unused bits).

      (2) The keyIdentifier is composed of a four bit type field with
        the value 0100 followed by the least significant 60 bits of the
        SHA-1 hash of the value of the BIT STRING subjectPublicKey
        (excluding the tag, length, and number of unused bit string bits).
    */

    // skipping the tag, length, and number of unused bits is the same
    // as just using the RSAPublicKey (for RSA keys, which are the
    // only ones supported)
    return pki.getPublicKeyFingerprint(cert.publicKey, {type: 'RSAPublicKey'});
  };

  /**
   * Verifies the subjectKeyIdentifier extension value for this certificate
   * against its public key. If no extension is found, false will be
   * returned.
   *
   * @return true if verified, false if not.
   */
  cert.verifySubjectKeyIdentifier = function() {
    var oid = oids['subjectKeyIdentifier'];
    for(var i = 0; i < cert.extensions.length; ++i) {
      var ext = cert.extensions[i];
      if(ext.id === oid) {
        var ski = cert.generateSubjectKeyIdentifier().getBytes();
        return (forge.util.hexToBytes(ext.subjectKeyIdentifier) === ski);
      }
    }
    return false;
  };

  return cert;
};

/**
 * Converts an X.509v3 RSA certificate from an ASN.1 object.
 *
 * Note: If the certificate is to be verified then compute hash should
 * be set to true. There is currently no implementation for converting
 * a certificate back to ASN.1 so the TBSCertificate part of the ASN.1
 * object needs to be scanned before the cert object is created.
 *
 * @param obj the asn1 representation of an X.509v3 RSA certificate.
 * @param computeHash true to compute the hash for verification.
 *
 * @return the certificate.
 */
pki.certificateFromAsn1 = function(obj, computeHash) {
  // validate certificate and capture data
  var capture = {};
  var errors = [];
  if(!asn1.validate(obj, x509CertificateValidator, capture, errors)) {
    var error = new Error('Cannot read X.509 certificate. ' +
      'ASN.1 object is not an X509v3 Certificate.');
    error.errors = errors;
    throw error;
  }

  // get oid
  var oid = asn1.derToOid(capture.publicKeyOid);
  if(oid !== pki.oids.rsaEncryption) {
    throw new Error('Cannot read public key. OID is not RSA.');
  }

  // create certificate
  var cert = pki.createCertificate();
  cert.version = capture.certVersion ?
    capture.certVersion.charCodeAt(0) : 0;
  var serial = forge.util.createBuffer(capture.certSerialNumber);
  cert.serialNumber = serial.toHex();
  cert.signatureOid = forge.asn1.derToOid(capture.certSignatureOid);
  cert.signatureParameters = _readSignatureParameters(
    cert.signatureOid, capture.certSignatureParams, true);
  cert.siginfo.algorithmOid = forge.asn1.derToOid(capture.certinfoSignatureOid);
  cert.siginfo.parameters = _readSignatureParameters(cert.siginfo.algorithmOid,
    capture.certinfoSignatureParams, false);
  cert.signature = capture.certSignature;

  var validity = [];
  if(capture.certValidity1UTCTime !== undefined) {
    validity.push(asn1.utcTimeToDate(capture.certValidity1UTCTime));
  }
  if(capture.certValidity2GeneralizedTime !== undefined) {
    validity.push(asn1.generalizedTimeToDate(
      capture.certValidity2GeneralizedTime));
  }
  if(capture.certValidity3UTCTime !== undefined) {
    validity.push(asn1.utcTimeToDate(capture.certValidity3UTCTime));
  }
  if(capture.certValidity4GeneralizedTime !== undefined) {
    validity.push(asn1.generalizedTimeToDate(
      capture.certValidity4GeneralizedTime));
  }
  if(validity.length > 2) {
    throw new Error('Cannot read notBefore/notAfter validity times; more ' +
      'than two times were provided in the certificate.');
  }
  if(validity.length < 2) {
    throw new Error('Cannot read notBefore/notAfter validity times; they ' +
      'were not provided as either UTCTime or GeneralizedTime.');
  }
  cert.validity.notBefore = validity[0];
  cert.validity.notAfter = validity[1];

  // keep TBSCertificate to preserve signature when exporting
  cert.tbsCertificate = capture.tbsCertificate;

  if(computeHash) {
    // create digest for OID signature type
    cert.md = _createSignatureDigest({
      signatureOid: cert.signatureOid,
      type: 'certificate'
    });

    // produce DER formatted TBSCertificate and digest it
    var bytes = asn1.toDer(cert.tbsCertificate);
    cert.md.update(bytes.getBytes());
  }

  // handle issuer, build issuer message digest
  var imd = forge.md.sha1.create();
  var ibytes = asn1.toDer(capture.certIssuer);
  imd.update(ibytes.getBytes());
  cert.issuer.getField = function(sn) {
    return _getAttribute(cert.issuer, sn);
  };
  cert.issuer.addField = function(attr) {
    _fillMissingFields([attr]);
    cert.issuer.attributes.push(attr);
  };
  cert.issuer.attributes = pki.RDNAttributesAsArray(capture.certIssuer);
  if(capture.certIssuerUniqueId) {
    cert.issuer.uniqueId = capture.certIssuerUniqueId;
  }
  cert.issuer.hash = imd.digest().toHex();

  // handle subject, build subject message digest
  var smd = forge.md.sha1.create();
  var sbytes = asn1.toDer(capture.certSubject);
  smd.update(sbytes.getBytes());
  cert.subject.getField = function(sn) {
    return _getAttribute(cert.subject, sn);
  };
  cert.subject.addField = function(attr) {
    _fillMissingFields([attr]);
    cert.subject.attributes.push(attr);
  };
  cert.subject.attributes = pki.RDNAttributesAsArray(capture.certSubject);
  if(capture.certSubjectUniqueId) {
    cert.subject.uniqueId = capture.certSubjectUniqueId;
  }
  cert.subject.hash = smd.digest().toHex();

  // handle extensions
  if(capture.certExtensions) {
    cert.extensions = pki.certificateExtensionsFromAsn1(capture.certExtensions);
  } else {
    cert.extensions = [];
  }

  // convert RSA public key from ASN.1
  cert.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);

  return cert;
};

/**
 * Converts an ASN.1 extensions object (with extension sequences as its
 * values) into an array of extension objects with types and values.
 *
 * Supported extensions:
 *
 * id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
 * KeyUsage ::= BIT STRING {
 *   digitalSignature        (0),
 *   nonRepudiation          (1),
 *   keyEncipherment         (2),
 *   dataEncipherment        (3),
 *   keyAgreement            (4),
 *   keyCertSign             (5),
 *   cRLSign                 (6),
 *   encipherOnly            (7),
 *   decipherOnly            (8)
 * }
 *
 * id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }
 * BasicConstraints ::= SEQUENCE {
 *   cA                      BOOLEAN DEFAULT FALSE,
 *   pathLenConstraint       INTEGER (0..MAX) OPTIONAL
 * }
 *
 * subjectAltName EXTENSION ::= {
 *   SYNTAX GeneralNames
 *   IDENTIFIED BY id-ce-subjectAltName
 * }
 *
 * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
 *
 * GeneralName ::= CHOICE {
 *   otherName      [0] INSTANCE OF OTHER-NAME,
 *   rfc822Name     [1] IA5String,
 *   dNSName        [2] IA5String,
 *   x400Address    [3] ORAddress,
 *   directoryName  [4] Name,
 *   ediPartyName   [5] EDIPartyName,
 *   uniformResourceIdentifier [6] IA5String,
 *   IPAddress      [7] OCTET STRING,
 *   registeredID   [8] OBJECT IDENTIFIER
 * }
 *
 * OTHER-NAME ::= TYPE-IDENTIFIER
 *
 * EDIPartyName ::= SEQUENCE {
 *   nameAssigner [0] DirectoryString {ub-name} OPTIONAL,
 *   partyName    [1] DirectoryString {ub-name}
 * }
 *
 * @param exts the extensions ASN.1 with extension sequences to parse.
 *
 * @return the array.
 */
pki.certificateExtensionsFromAsn1 = function(exts) {
  var rval = [];
  for(var i = 0; i < exts.value.length; ++i) {
    // get extension sequence
    var extseq = exts.value[i];
    for(var ei = 0; ei < extseq.value.length; ++ei) {
      rval.push(pki.certificateExtensionFromAsn1(extseq.value[ei]));
    }
  }

  return rval;
};

/**
 * Parses a single certificate extension from ASN.1.
 *
 * @param ext the extension in ASN.1 format.
 *
 * @return the parsed extension as an object.
 */
pki.certificateExtensionFromAsn1 = function(ext) {
  // an extension has:
  // [0] extnID      OBJECT IDENTIFIER
  // [1] critical    BOOLEAN DEFAULT FALSE
  // [2] extnValue   OCTET STRING
  var e = {};
  e.id = asn1.derToOid(ext.value[0].value);
  e.critical = false;
  if(ext.value[1].type === asn1.Type.BOOLEAN) {
    e.critical = (ext.value[1].value.charCodeAt(0) !== 0x00);
    e.value = ext.value[2].value;
  } else {
    e.value = ext.value[1].value;
  }
  // if the oid is known, get its name
  if(e.id in oids) {
    e.name = oids[e.id];

    // handle key usage
    if(e.name === 'keyUsage') {
      // get value as BIT STRING
      var ev = asn1.fromDer(e.value);
      var b2 = 0x00;
      var b3 = 0x00;
      if(ev.value.length > 1) {
        // skip first byte, just indicates unused bits which
        // will be padded with 0s anyway
        // get bytes with flag bits
        b2 = ev.value.charCodeAt(1);
        b3 = ev.value.length > 2 ? ev.value.charCodeAt(2) : 0;
      }
      // set flags
      e.digitalSignature = (b2 & 0x80) === 0x80;
      e.nonRepudiation = (b2 & 0x40) === 0x40;
      e.keyEncipherment = (b2 & 0x20) === 0x20;
      e.dataEncipherment = (b2 & 0x10) === 0x10;
      e.keyAgreement = (b2 & 0x08) === 0x08;
      e.keyCertSign = (b2 & 0x04) === 0x04;
      e.cRLSign = (b2 & 0x02) === 0x02;
      e.encipherOnly = (b2 & 0x01) === 0x01;
      e.decipherOnly = (b3 & 0x80) === 0x80;
    } else if(e.name === 'basicConstraints') {
      // handle basic constraints
      // get value as SEQUENCE
      var ev = asn1.fromDer(e.value);
      // get cA BOOLEAN flag (defaults to false)
      if(ev.value.length > 0 && ev.value[0].type === asn1.Type.BOOLEAN) {
        e.cA = (ev.value[0].value.charCodeAt(0) !== 0x00);
      } else {
        e.cA = false;
      }
      // get path length constraint
      var value = null;
      if(ev.value.length > 0 && ev.value[0].type === asn1.Type.INTEGER) {
        value = ev.value[0].value;
      } else if(ev.value.length > 1) {
        value = ev.value[1].value;
      }
      if(value !== null) {
        e.pathLenConstraint = asn1.derToInteger(value);
      }
    } else if(e.name === 'extKeyUsage') {
      // handle extKeyUsage
      // value is a SEQUENCE of OIDs
      var ev = asn1.fromDer(e.value);
      for(var vi = 0; vi < ev.value.length; ++vi) {
        var oid = asn1.derToOid(ev.value[vi].value);
        if(oid in oids) {
          e[oids[oid]] = true;
        } else {
          e[oid] = true;
        }
      }
    } else if(e.name === 'nsCertType') {
      // handle nsCertType
      // get value as BIT STRING
      var ev = asn1.fromDer(e.value);
      var b2 = 0x00;
      if(ev.value.length > 1) {
        // skip first byte, just indicates unused bits which
        // will be padded with 0s anyway
        // get bytes with flag bits
        b2 = ev.value.charCodeAt(1);
      }
      // set flags
      e.client = (b2 & 0x80) === 0x80;
      e.server = (b2 & 0x40) === 0x40;
      e.email = (b2 & 0x20) === 0x20;
      e.objsign = (b2 & 0x10) === 0x10;
      e.reserved = (b2 & 0x08) === 0x08;
      e.sslCA = (b2 & 0x04) === 0x04;
      e.emailCA = (b2 & 0x02) === 0x02;
      e.objCA = (b2 & 0x01) === 0x01;
    } else if(
      e.name === 'subjectAltName' ||
      e.name === 'issuerAltName') {
      // handle subjectAltName/issuerAltName
      e.altNames = [];

      // ev is a SYNTAX SEQUENCE
      var gn;
      var ev = asn1.fromDer(e.value);
      for(var n = 0; n < ev.value.length; ++n) {
        // get GeneralName
        gn = ev.value[n];

        var altName = {
          type: gn.type,
          value: gn.value
        };
        e.altNames.push(altName);

        // Note: Support for types 1,2,6,7,8
        switch(gn.type) {
          // rfc822Name
          case 1:
          // dNSName
          case 2:
          // uniformResourceIdentifier (URI)
          case 6:
            break;
          // IPAddress
          case 7:
            // convert to IPv4/IPv6 string representation
            altName.ip = forge.util.bytesToIP(gn.value);
            break;
          // registeredID
          case 8:
            altName.oid = asn1.derToOid(gn.value);
            break;
          default:
            // unsupported
        }
      }
    } else if(e.name === 'subjectKeyIdentifier') {
      // value is an OCTETSTRING w/the hash of the key-type specific
      // public key structure (eg: RSAPublicKey)
      var ev = asn1.fromDer(e.value);
      e.subjectKeyIdentifier = forge.util.bytesToHex(ev.value);
    }
  }
  return e;
};

/**
 * Converts a PKCS#10 certification request (CSR) from an ASN.1 object.
 *
 * Note: If the certification request is to be verified then compute hash
 * should be set to true. There is currently no implementation for converting
 * a certificate back to ASN.1 so the CertificationRequestInfo part of the
 * ASN.1 object needs to be scanned before the csr object is created.
 *
 * @param obj the asn1 representation of a PKCS#10 certification request (CSR).
 * @param computeHash true to compute the hash for verification.
 *
 * @return the certification request (CSR).
 */
pki.certificationRequestFromAsn1 = function(obj, computeHash) {
  // validate certification request and capture data
  var capture = {};
  var errors = [];
  if(!asn1.validate(obj, certificationRequestValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#10 certificate request. ' +
      'ASN.1 object is not a PKCS#10 CertificationRequest.');
    error.errors = errors;
    throw error;
  }

  // get oid
  var oid = asn1.derToOid(capture.publicKeyOid);
  if(oid !== pki.oids.rsaEncryption) {
    throw new Error('Cannot read public key. OID is not RSA.');
  }

  // create certification request
  var csr = pki.createCertificationRequest();
  csr.version = capture.csrVersion ? capture.csrVersion.charCodeAt(0) : 0;
  csr.signatureOid = forge.asn1.derToOid(capture.csrSignatureOid);
  csr.signatureParameters = _readSignatureParameters(
    csr.signatureOid, capture.csrSignatureParams, true);
  csr.siginfo.algorithmOid = forge.asn1.derToOid(capture.csrSignatureOid);
  csr.siginfo.parameters = _readSignatureParameters(
    csr.siginfo.algorithmOid, capture.csrSignatureParams, false);
  csr.signature = capture.csrSignature;

  // keep CertificationRequestInfo to preserve signature when exporting
  csr.certificationRequestInfo = capture.certificationRequestInfo;

  if(computeHash) {
    // create digest for OID signature type
    csr.md = _createSignatureDigest({
      signatureOid: csr.signatureOid,
      type: 'certification request'
    });

    // produce DER formatted CertificationRequestInfo and digest it
    var bytes = asn1.toDer(csr.certificationRequestInfo);
    csr.md.update(bytes.getBytes());
  }

  // handle subject, build subject message digest
  var smd = forge.md.sha1.create();
  csr.subject.getField = function(sn) {
    return _getAttribute(csr.subject, sn);
  };
  csr.subject.addField = function(attr) {
    _fillMissingFields([attr]);
    csr.subject.attributes.push(attr);
  };
  csr.subject.attributes = pki.RDNAttributesAsArray(
    capture.certificationRequestInfoSubject, smd);
  csr.subject.hash = smd.digest().toHex();

  // convert RSA public key from ASN.1
  csr.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);

  // convert attributes from ASN.1
  csr.getAttribute = function(sn) {
    return _getAttribute(csr, sn);
  };
  csr.addAttribute = function(attr) {
    _fillMissingFields([attr]);
    csr.attributes.push(attr);
  };
  csr.attributes = pki.CRIAttributesAsArray(
    capture.certificationRequestInfoAttributes || []);

  return csr;
};

/**
 * Creates an empty certification request (a CSR or certificate signing
 * request). Once created, its public key and attributes can be set and then
 * it can be signed.
 *
 * @return the empty certification request.
 */
pki.createCertificationRequest = function() {
  var csr = {};
  csr.version = 0x00;
  csr.signatureOid = null;
  csr.signature = null;
  csr.siginfo = {};
  csr.siginfo.algorithmOid = null;

  csr.subject = {};
  csr.subject.getField = function(sn) {
    return _getAttribute(csr.subject, sn);
  };
  csr.subject.addField = function(attr) {
    _fillMissingFields([attr]);
    csr.subject.attributes.push(attr);
  };
  csr.subject.attributes = [];
  csr.subject.hash = null;

  csr.publicKey = null;
  csr.attributes = [];
  csr.getAttribute = function(sn) {
    return _getAttribute(csr, sn);
  };
  csr.addAttribute = function(attr) {
    _fillMissingFields([attr]);
    csr.attributes.push(attr);
  };
  csr.md = null;

  /**
   * Sets the subject of this certification request.
   *
   * @param attrs the array of subject attributes to use.
   */
  csr.setSubject = function(attrs) {
    // set new attributes
    _fillMissingFields(attrs);
    csr.subject.attributes = attrs;
    csr.subject.hash = null;
  };

  /**
   * Sets the attributes of this certification request.
   *
   * @param attrs the array of attributes to use.
   */
  csr.setAttributes = function(attrs) {
    // set new attributes
    _fillMissingFields(attrs);
    csr.attributes = attrs;
  };

  /**
   * Signs this certification request using the given private key.
   *
   * @param key the private key to sign with.
   * @param md the message digest object to use (defaults to forge.md.sha1).
   */
  csr.sign = function(key, md) {
    // TODO: get signature OID from private key
    csr.md = md || forge.md.sha1.create();
    var algorithmOid = oids[csr.md.algorithm + 'WithRSAEncryption'];
    if(!algorithmOid) {
      var error = new Error('Could not compute certification request digest. ' +
        'Unknown message digest algorithm OID.');
      error.algorithm = csr.md.algorithm;
      throw error;
    }
    csr.signatureOid = csr.siginfo.algorithmOid = algorithmOid;

    // get CertificationRequestInfo, convert to DER
    csr.certificationRequestInfo = pki.getCertificationRequestInfo(csr);
    var bytes = asn1.toDer(csr.certificationRequestInfo);

    // digest and sign
    csr.md.update(bytes.getBytes());
    csr.signature = key.sign(csr.md);
  };

  /**
   * Attempts verify the signature on the passed certification request using
   * its public key.
   *
   * A CSR that has been exported to a file in PEM format can be verified using
   * OpenSSL using this command:
   *
   * openssl req -in <the-csr-pem-file> -verify -noout -text
   *
   * @return true if verified, false if not.
   */
  csr.verify = function() {
    var rval = false;

    var md = csr.md;
    if(md === null) {
      md = _createSignatureDigest({
        signatureOid: csr.signatureOid,
        type: 'certification request'
      });

      // produce DER formatted CertificationRequestInfo and digest it
      var cri = csr.certificationRequestInfo ||
        pki.getCertificationRequestInfo(csr);
      var bytes = asn1.toDer(cri);
      md.update(bytes.getBytes());
    }

    if(md !== null) {
      rval = _verifySignature({
        certificate: csr, md: md, signature: csr.signature
      });
    }

    return rval;
  };

  return csr;
};

/**
 * Converts an X.509 subject or issuer to an ASN.1 RDNSequence.
 *
 * @param obj the subject or issuer (distinguished name).
 *
 * @return the ASN.1 RDNSequence.
 */
function _dnToAsn1(obj) {
  // create an empty RDNSequence
  var rval = asn1.create(
    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);

  // iterate over attributes
  var attr, set;
  var attrs = obj.attributes;
  for(var i = 0; i < attrs.length; ++i) {
    attr = attrs[i];
    var value = attr.value;

    // reuse tag class for attribute value if available
    var valueTagClass = asn1.Type.PRINTABLESTRING;
    if('valueTagClass' in attr) {
      valueTagClass = attr.valueTagClass;

      if(valueTagClass === asn1.Type.UTF8) {
        value = forge.util.encodeUtf8(value);
      }
      // FIXME: handle more encodings
    }

    // create a RelativeDistinguishedName set
    // each value in the set is an AttributeTypeAndValue first
    // containing the type (an OID) and second the value
    set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // AttributeType
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          asn1.oidToDer(attr.type).getBytes()),
        // AttributeValue
        asn1.create(asn1.Class.UNIVERSAL, valueTagClass, false, value)
      ])
    ]);
    rval.value.push(set);
  }

  return rval;
}

/**
 * Gets all printable attributes (typically of an issuer or subject) in a
 * simplified JSON format for display.
 *
 * @param attrs the attributes.
 *
 * @return the JSON for display.
 */
function _getAttributesAsJson(attrs) {
  var rval = {};
  for(var i = 0; i < attrs.length; ++i) {
    var attr = attrs[i];
    if(attr.shortName && (
      attr.valueTagClass === asn1.Type.UTF8 ||
      attr.valueTagClass === asn1.Type.PRINTABLESTRING ||
      attr.valueTagClass === asn1.Type.IA5STRING)) {
      var value = attr.value;
      if(attr.valueTagClass === asn1.Type.UTF8) {
        value = forge.util.encodeUtf8(attr.value);
      }
      if(!(attr.shortName in rval)) {
        rval[attr.shortName] = value;
      } else if(forge.util.isArray(rval[attr.shortName])) {
        rval[attr.shortName].push(value);
      } else {
        rval[attr.shortName] = [rval[attr.shortName], value];
      }
    }
  }
  return rval;
}

/**
 * Fills in missing fields in attributes.
 *
 * @param attrs the attributes to fill missing fields in.
 */
function _fillMissingFields(attrs) {
  var attr;
  for(var i = 0; i < attrs.length; ++i) {
    attr = attrs[i];

    // populate missing name
    if(typeof attr.name === 'undefined') {
      if(attr.type && attr.type in pki.oids) {
        attr.name = pki.oids[attr.type];
      } else if(attr.shortName && attr.shortName in _shortNames) {
        attr.name = pki.oids[_shortNames[attr.shortName]];
      }
    }

    // populate missing type (OID)
    if(typeof attr.type === 'undefined') {
      if(attr.name && attr.name in pki.oids) {
        attr.type = pki.oids[attr.name];
      } else {
        var error = new Error('Attribute type not specified.');
        error.attribute = attr;
        throw error;
      }
    }

    // populate missing shortname
    if(typeof attr.shortName === 'undefined') {
      if(attr.name && attr.name in _shortNames) {
        attr.shortName = _shortNames[attr.name];
      }
    }

    // convert extensions to value
    if(attr.type === oids.extensionRequest) {
      attr.valueConstructed = true;
      attr.valueTagClass = asn1.Type.SEQUENCE;
      if(!attr.value && attr.extensions) {
        attr.value = [];
        for(var ei = 0; ei < attr.extensions.length; ++ei) {
          attr.value.push(pki.certificateExtensionToAsn1(
            _fillMissingExtensionFields(attr.extensions[ei])));
        }
      }
    }

    if(typeof attr.value === 'undefined') {
      var error = new Error('Attribute value not specified.');
      error.attribute = attr;
      throw error;
    }
  }
}

/**
 * Fills in missing fields in certificate extensions.
 *
 * @param e the extension.
 * @param [options] the options to use.
 *          [cert] the certificate the extensions are for.
 *
 * @return the extension.
 */
function _fillMissingExtensionFields(e, options) {
  options = options || {};

  // populate missing name
  if(typeof e.name === 'undefined') {
    if(e.id && e.id in pki.oids) {
      e.name = pki.oids[e.id];
    }
  }

  // populate missing id
  if(typeof e.id === 'undefined') {
    if(e.name && e.name in pki.oids) {
      e.id = pki.oids[e.name];
    } else {
      var error = new Error('Extension ID not specified.');
      error.extension = e;
      throw error;
    }
  }

  if(typeof e.value !== 'undefined') {
    return e;
  }

  // handle missing value:

  // value is a BIT STRING
  if(e.name === 'keyUsage') {
    // build flags
    var unused = 0;
    var b2 = 0x00;
    var b3 = 0x00;
    if(e.digitalSignature) {
      b2 |= 0x80;
      unused = 7;
    }
    if(e.nonRepudiation) {
      b2 |= 0x40;
      unused = 6;
    }
    if(e.keyEncipherment) {
      b2 |= 0x20;
      unused = 5;
    }
    if(e.dataEncipherment) {
      b2 |= 0x10;
      unused = 4;
    }
    if(e.keyAgreement) {
      b2 |= 0x08;
      unused = 3;
    }
    if(e.keyCertSign) {
      b2 |= 0x04;
      unused = 2;
    }
    if(e.cRLSign) {
      b2 |= 0x02;
      unused = 1;
    }
    if(e.encipherOnly) {
      b2 |= 0x01;
      unused = 0;
    }
    if(e.decipherOnly) {
      b3 |= 0x80;
      unused = 7;
    }

    // create bit string
    var value = String.fromCharCode(unused);
    if(b3 !== 0) {
      value += String.fromCharCode(b2) + String.fromCharCode(b3);
    } else if(b2 !== 0) {
      value += String.fromCharCode(b2);
    }
    e.value = asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
  } else if(e.name === 'basicConstraints') {
    // basicConstraints is a SEQUENCE
    e.value = asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    // cA BOOLEAN flag defaults to false
    if(e.cA) {
      e.value.value.push(asn1.create(
        asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false,
        String.fromCharCode(0xFF)));
    }
    if('pathLenConstraint' in e) {
      e.value.value.push(asn1.create(
        asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
        asn1.integerToDer(e.pathLenConstraint).getBytes()));
    }
  } else if(e.name === 'extKeyUsage') {
    // extKeyUsage is a SEQUENCE of OIDs
    e.value = asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var seq = e.value.value;
    for(var key in e) {
      if(e[key] !== true) {
        continue;
      }
      // key is name in OID map
      if(key in oids) {
        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID,
          false, asn1.oidToDer(oids[key]).getBytes()));
      } else if(key.indexOf('.') !== -1) {
        // assume key is an OID
        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID,
          false, asn1.oidToDer(key).getBytes()));
      }
    }
  } else if(e.name === 'nsCertType') {
    // nsCertType is a BIT STRING
    // build flags
    var unused = 0;
    var b2 = 0x00;

    if(e.client) {
      b2 |= 0x80;
      unused = 7;
    }
    if(e.server) {
      b2 |= 0x40;
      unused = 6;
    }
    if(e.email) {
      b2 |= 0x20;
      unused = 5;
    }
    if(e.objsign) {
      b2 |= 0x10;
      unused = 4;
    }
    if(e.reserved) {
      b2 |= 0x08;
      unused = 3;
    }
    if(e.sslCA) {
      b2 |= 0x04;
      unused = 2;
    }
    if(e.emailCA) {
      b2 |= 0x02;
      unused = 1;
    }
    if(e.objCA) {
      b2 |= 0x01;
      unused = 0;
    }

    // create bit string
    var value = String.fromCharCode(unused);
    if(b2 !== 0) {
      value += String.fromCharCode(b2);
    }
    e.value = asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
  } else if(e.name === 'subjectAltName' || e.name === 'issuerAltName') {
    // SYNTAX SEQUENCE
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);

    var altName;
    for(var n = 0; n < e.altNames.length; ++n) {
      altName = e.altNames[n];
      var value = altName.value;
      // handle IP
      if(altName.type === 7 && altName.ip) {
        value = forge.util.bytesFromIP(altName.ip);
        if(value === null) {
          var error = new Error(
            'Extension "ip" value is not a valid IPv4 or IPv6 address.');
          error.extension = e;
          throw error;
        }
      } else if(altName.type === 8) {
        // handle OID
        if(altName.oid) {
          value = asn1.oidToDer(asn1.oidToDer(altName.oid));
        } else {
          // deprecated ... convert value to OID
          value = asn1.oidToDer(value);
        }
      }
      e.value.value.push(asn1.create(
        asn1.Class.CONTEXT_SPECIFIC, altName.type, false,
        value));
    }
  } else if(e.name === 'nsComment' && options.cert) {
    // sanity check value is ASCII (req'd) and not too big
    if(!(/^[\x00-\x7F]*$/.test(e.comment)) ||
      (e.comment.length < 1) || (e.comment.length > 128)) {
      throw new Error('Invalid "nsComment" content.');
    }
    // IA5STRING opaque comment
    e.value = asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.IA5STRING, false, e.comment);
  } else if(e.name === 'subjectKeyIdentifier' && options.cert) {
    var ski = options.cert.generateSubjectKeyIdentifier();
    e.subjectKeyIdentifier = ski.toHex();
    // OCTETSTRING w/digest
    e.value = asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, ski.getBytes());
  } else if(e.name === 'authorityKeyIdentifier' && options.cert) {
    // SYNTAX SEQUENCE
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var seq = e.value.value;

    if(e.keyIdentifier) {
      var keyIdentifier = (e.keyIdentifier === true ?
        options.cert.generateSubjectKeyIdentifier().getBytes() :
        e.keyIdentifier);
      seq.push(
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, false, keyIdentifier));
    }

    if(e.authorityCertIssuer) {
      var authorityCertIssuer = [
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 4, true, [
          _dnToAsn1(e.authorityCertIssuer === true ?
            options.cert.issuer : e.authorityCertIssuer)
        ])
      ];
      seq.push(
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, authorityCertIssuer));
    }

    if(e.serialNumber) {
      var serialNumber = forge.util.hexToBytes(e.serialNumber === true ?
        options.cert.serialNumber : e.serialNumber);
      seq.push(
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, false, serialNumber));
    }
  } else if(e.name === 'cRLDistributionPoints') {
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var seq = e.value.value;

    // Create sub SEQUENCE of DistributionPointName
    var subSeq = asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);

    // Create fullName CHOICE
    var fullNameGeneralNames = asn1.create(
      asn1.Class.CONTEXT_SPECIFIC, 0, true, []);
    var altName;
    for(var n = 0; n < e.altNames.length; ++n) {
      altName = e.altNames[n];
      var value = altName.value;
      // handle IP
      if(altName.type === 7 && altName.ip) {
        value = forge.util.bytesFromIP(altName.ip);
        if(value === null) {
          var error = new Error(
            'Extension "ip" value is not a valid IPv4 or IPv6 address.');
          error.extension = e;
          throw error;
        }
      } else if(altName.type === 8) {
        // handle OID
        if(altName.oid) {
          value = asn1.oidToDer(asn1.oidToDer(altName.oid));
        } else {
          // deprecated ... convert value to OID
          value = asn1.oidToDer(value);
        }
      }
      fullNameGeneralNames.value.push(asn1.create(
        asn1.Class.CONTEXT_SPECIFIC, altName.type, false,
        value));
    }

    // Add to the parent SEQUENCE
    subSeq.value.push(asn1.create(
      asn1.Class.CONTEXT_SPECIFIC, 0, true, [fullNameGeneralNames]));
    seq.push(subSeq);
  }

  // ensure value has been defined by now
  if(typeof e.value === 'undefined') {
    var error = new Error('Extension value not specified.');
    error.extension = e;
    throw error;
  }

  return e;
}

/**
 * Convert signature parameters object to ASN.1
 *
 * @param {String} oid Signature algorithm OID
 * @param params The signature parametrs object
 * @return ASN.1 object representing signature parameters
 */
function _signatureParametersToAsn1(oid, params) {
  switch(oid) {
    case oids['RSASSA-PSS']:
      var parts = [];

      if(params.hash.algorithmOid !== undefined) {
        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
              asn1.oidToDer(params.hash.algorithmOid).getBytes()),
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
          ])
        ]));
      }

      if(params.mgf.algorithmOid !== undefined) {
        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
              asn1.oidToDer(params.mgf.algorithmOid).getBytes()),
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
                asn1.oidToDer(params.mgf.hash.algorithmOid).getBytes()),
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
            ])
          ])
        ]));
      }

      if(params.saltLength !== undefined) {
        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
            asn1.integerToDer(params.saltLength).getBytes())
        ]));
      }

      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, parts);

    default:
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '');
  }
}

/**
 * Converts a certification request's attributes to an ASN.1 set of
 * CRIAttributes.
 *
 * @param csr certification request.
 *
 * @return the ASN.1 set of CRIAttributes.
 */
function _CRIAttributesToAsn1(csr) {
  // create an empty context-specific container
  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);

  // no attributes, return empty container
  if(csr.attributes.length === 0) {
    return rval;
  }

  // each attribute has a sequence with a type and a set of values
  var attrs = csr.attributes;
  for(var i = 0; i < attrs.length; ++i) {
    var attr = attrs[i];
    var value = attr.value;

    // reuse tag class for attribute value if available
    var valueTagClass = asn1.Type.UTF8;
    if('valueTagClass' in attr) {
      valueTagClass = attr.valueTagClass;
    }
    if(valueTagClass === asn1.Type.UTF8) {
      value = forge.util.encodeUtf8(value);
    }
    var valueConstructed = false;
    if('valueConstructed' in attr) {
      valueConstructed = attr.valueConstructed;
    }
    // FIXME: handle more encodings

    // create a RelativeDistinguishedName set
    // each value in the set is an AttributeTypeAndValue first
    // containing the type (an OID) and second the value
    var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // AttributeType
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(attr.type).getBytes()),
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
        // AttributeValue
        asn1.create(
          asn1.Class.UNIVERSAL, valueTagClass, valueConstructed, value)
      ])
    ]);
    rval.value.push(seq);
  }

  return rval;
}

var jan_1_1950 = new Date('1950-01-01T00:00:00Z');
var jan_1_2050 = new Date('2050-01-01T00:00:00Z');

/**
 * Converts a Date object to ASN.1
 * Handles the different format before and after 1st January 2050
 *
 * @param date date object.
 *
 * @return the ASN.1 object representing the date.
 */
function _dateToAsn1(date) {
  if(date >= jan_1_1950 && date < jan_1_2050) {
    return asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false,
      asn1.dateToUtcTime(date));
  } else {
    return asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false,
      asn1.dateToGeneralizedTime(date));
  }
}

/**
 * Gets the ASN.1 TBSCertificate part of an X.509v3 certificate.
 *
 * @param cert the certificate.
 *
 * @return the asn1 TBSCertificate.
 */
pki.getTBSCertificate = function(cert) {
  // TBSCertificate
  var notBefore = _dateToAsn1(cert.validity.notBefore);
  var notAfter = _dateToAsn1(cert.validity.notAfter);
  var tbs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // version
    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
      // integer
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
        asn1.integerToDer(cert.version).getBytes())
    ]),
    // serialNumber
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      forge.util.hexToBytes(cert.serialNumber)),
    // signature
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // algorithm
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(cert.siginfo.algorithmOid).getBytes()),
      // parameters
      _signatureParametersToAsn1(
        cert.siginfo.algorithmOid, cert.siginfo.parameters)
    ]),
    // issuer
    _dnToAsn1(cert.issuer),
    // validity
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      notBefore,
      notAfter
    ]),
    // subject
    _dnToAsn1(cert.subject),
    // SubjectPublicKeyInfo
    pki.publicKeyToAsn1(cert.publicKey)
  ]);

  if(cert.issuer.uniqueId) {
    // issuerUniqueID (optional)
    tbs.value.push(
      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
          // TODO: support arbitrary bit length ids
          String.fromCharCode(0x00) +
          cert.issuer.uniqueId
        )
      ])
    );
  }
  if(cert.subject.uniqueId) {
    // subjectUniqueID (optional)
    tbs.value.push(
      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
          // TODO: support arbitrary bit length ids
          String.fromCharCode(0x00) +
          cert.subject.uniqueId
        )
      ])
    );
  }

  if(cert.extensions.length > 0) {
    // extensions (optional)
    tbs.value.push(pki.certificateExtensionsToAsn1(cert.extensions));
  }

  return tbs;
};

/**
 * Gets the ASN.1 CertificationRequestInfo part of a
 * PKCS#10 CertificationRequest.
 *
 * @param csr the certification request.
 *
 * @return the asn1 CertificationRequestInfo.
 */
pki.getCertificationRequestInfo = function(csr) {
  // CertificationRequestInfo
  var cri = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // version
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
      asn1.integerToDer(csr.version).getBytes()),
    // subject
    _dnToAsn1(csr.subject),
    // SubjectPublicKeyInfo
    pki.publicKeyToAsn1(csr.publicKey),
    // attributes
    _CRIAttributesToAsn1(csr)
  ]);

  return cri;
};

/**
 * Converts a DistinguishedName (subject or issuer) to an ASN.1 object.
 *
 * @param dn the DistinguishedName.
 *
 * @return the asn1 representation of a DistinguishedName.
 */
pki.distinguishedNameToAsn1 = function(dn) {
  return _dnToAsn1(dn);
};

/**
 * Converts an X.509v3 RSA certificate to an ASN.1 object.
 *
 * @param cert the certificate.
 *
 * @return the asn1 representation of an X.509v3 RSA certificate.
 */
pki.certificateToAsn1 = function(cert) {
  // prefer cached TBSCertificate over generating one
  var tbsCertificate = cert.tbsCertificate || pki.getTBSCertificate(cert);

  // Certificate
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // TBSCertificate
    tbsCertificate,
    // AlgorithmIdentifier (signature algorithm)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // algorithm
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(cert.signatureOid).getBytes()),
      // parameters
      _signatureParametersToAsn1(cert.signatureOid, cert.signatureParameters)
    ]),
    // SignatureValue
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
      String.fromCharCode(0x00) + cert.signature)
  ]);
};

/**
 * Converts X.509v3 certificate extensions to ASN.1.
 *
 * @param exts the extensions to convert.
 *
 * @return the extensions in ASN.1 format.
 */
pki.certificateExtensionsToAsn1 = function(exts) {
  // create top-level extension container
  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 3, true, []);

  // create extension sequence (stores a sequence for each extension)
  var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
  rval.value.push(seq);

  for(var i = 0; i < exts.length; ++i) {
    seq.value.push(pki.certificateExtensionToAsn1(exts[i]));
  }

  return rval;
};

/**
 * Converts a single certificate extension to ASN.1.
 *
 * @param ext the extension to convert.
 *
 * @return the extension in ASN.1 format.
 */
pki.certificateExtensionToAsn1 = function(ext) {
  // create a sequence for each extension
  var extseq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);

  // extnID (OID)
  extseq.value.push(asn1.create(
    asn1.Class.UNIVERSAL, asn1.Type.OID, false,
    asn1.oidToDer(ext.id).getBytes()));

  // critical defaults to false
  if(ext.critical) {
    // critical BOOLEAN DEFAULT FALSE
    extseq.value.push(asn1.create(
      asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false,
      String.fromCharCode(0xFF)));
  }

  var value = ext.value;
  if(typeof ext.value !== 'string') {
    // value is asn.1
    value = asn1.toDer(value).getBytes();
  }

  // extnValue (OCTET STRING)
  extseq.value.push(asn1.create(
    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, value));

  return extseq;
};

/**
 * Converts a PKCS#10 certification request to an ASN.1 object.
 *
 * @param csr the certification request.
 *
 * @return the asn1 representation of a certification request.
 */
pki.certificationRequestToAsn1 = function(csr) {
  // prefer cached CertificationRequestInfo over generating one
  var cri = csr.certificationRequestInfo ||
    pki.getCertificationRequestInfo(csr);

  // Certificate
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // CertificationRequestInfo
    cri,
    // AlgorithmIdentifier (signature algorithm)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // algorithm
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(csr.signatureOid).getBytes()),
      // parameters
      _signatureParametersToAsn1(csr.signatureOid, csr.signatureParameters)
    ]),
    // signature
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
      String.fromCharCode(0x00) + csr.signature)
  ]);
};

/**
 * Creates a CA store.
 *
 * @param certs an optional array of certificate objects or PEM-formatted
 *          certificate strings to add to the CA store.
 *
 * @return the CA store.
 */
pki.createCaStore = function(certs) {
  // create CA store
  var caStore = {
    // stored certificates
    certs: {}
  };

  /**
   * Gets the certificate that issued the passed certificate or its
   * 'parent'.
   *
   * @param cert the certificate to get the parent for.
   *
   * @return the parent certificate or null if none was found.
   */
  caStore.getIssuer = function(cert) {
    var rval = getBySubject(cert.issuer);

    // see if there are multiple matches
    /*if(forge.util.isArray(rval)) {
      // TODO: resolve multiple matches by checking
      // authorityKey/subjectKey/issuerUniqueID/other identifiers, etc.
      // FIXME: or alternatively do authority key mapping
      // if possible (X.509v1 certs can't work?)
      throw new Error('Resolving multiple issuer matches not implemented yet.');
    }*/

    return rval;
  };

  /**
   * Adds a trusted certificate to the store.
   *
   * @param cert the certificate to add as a trusted certificate (either a
   *          pki.certificate object or a PEM-formatted certificate).
   */
  caStore.addCertificate = function(cert) {
    // convert from pem if necessary
    if(typeof cert === 'string') {
      cert = forge.pki.certificateFromPem(cert);
    }

    ensureSubjectHasHash(cert.subject);

    if(!caStore.hasCertificate(cert)) { // avoid duplicate certificates in store
      if(cert.subject.hash in caStore.certs) {
        // subject hash already exists, append to array
        var tmp = caStore.certs[cert.subject.hash];
        if(!forge.util.isArray(tmp)) {
          tmp = [tmp];
        }
        tmp.push(cert);
        caStore.certs[cert.subject.hash] = tmp;
      } else {
        caStore.certs[cert.subject.hash] = cert;
      }
    }
  };

  /**
   * Checks to see if the given certificate is in the store.
   *
   * @param cert the certificate to check (either a pki.certificate or a
   *          PEM-formatted certificate).
   *
   * @return true if the certificate is in the store, false if not.
   */
  caStore.hasCertificate = function(cert) {
    // convert from pem if necessary
    if(typeof cert === 'string') {
      cert = forge.pki.certificateFromPem(cert);
    }

    var match = getBySubject(cert.subject);
    if(!match) {
      return false;
    }
    if(!forge.util.isArray(match)) {
      match = [match];
    }
    // compare DER-encoding of certificates
    var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();
    for(var i = 0; i < match.length; ++i) {
      var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();
      if(der1 === der2) {
        return true;
      }
    }
    return false;
  };

  /**
   * Lists all of the certificates kept in the store.
   *
   * @return an array of all of the pki.certificate objects in the store.
   */
  caStore.listAllCertificates = function() {
    var certList = [];

    for(var hash in caStore.certs) {
      if(caStore.certs.hasOwnProperty(hash)) {
        var value = caStore.certs[hash];
        if(!forge.util.isArray(value)) {
          certList.push(value);
        } else {
          for(var i = 0; i < value.length; ++i) {
            certList.push(value[i]);
          }
        }
      }
    }

    return certList;
  };

  /**
   * Removes a certificate from the store.
   *
   * @param cert the certificate to remove (either a pki.certificate or a
   *          PEM-formatted certificate).
   *
   * @return the certificate that was removed or null if the certificate
   *           wasn't in store.
   */
  caStore.removeCertificate = function(cert) {
    var result;

    // convert from pem if necessary
    if(typeof cert === 'string') {
      cert = forge.pki.certificateFromPem(cert);
    }
    ensureSubjectHasHash(cert.subject);
    if(!caStore.hasCertificate(cert)) {
      return null;
    }

    var match = getBySubject(cert.subject);

    if(!forge.util.isArray(match)) {
      result = caStore.certs[cert.subject.hash];
      delete caStore.certs[cert.subject.hash];
      return result;
    }

    // compare DER-encoding of certificates
    var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();
    for(var i = 0; i < match.length; ++i) {
      var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();
      if(der1 === der2) {
        result = match[i];
        match.splice(i, 1);
      }
    }
    if(match.length === 0) {
      delete caStore.certs[cert.subject.hash];
    }

    return result;
  };

  function getBySubject(subject) {
    ensureSubjectHasHash(subject);
    return caStore.certs[subject.hash] || null;
  }

  function ensureSubjectHasHash(subject) {
    // produce subject hash if it doesn't exist
    if(!subject.hash) {
      var md = forge.md.sha1.create();
      subject.attributes = pki.RDNAttributesAsArray(_dnToAsn1(subject), md);
      subject.hash = md.digest().toHex();
    }
  }

  // auto-add passed in certs
  if(certs) {
    // parse PEM-formatted certificates as necessary
    for(var i = 0; i < certs.length; ++i) {
      var cert = certs[i];
      caStore.addCertificate(cert);
    }
  }

  return caStore;
};

/**
 * Certificate verification errors, based on TLS.
 */
pki.certificateError = {
  bad_certificate: 'forge.pki.BadCertificate',
  unsupported_certificate: 'forge.pki.UnsupportedCertificate',
  certificate_revoked: 'forge.pki.CertificateRevoked',
  certificate_expired: 'forge.pki.CertificateExpired',
  certificate_unknown: 'forge.pki.CertificateUnknown',
  unknown_ca: 'forge.pki.UnknownCertificateAuthority'
};

/**
 * Verifies a certificate chain against the given Certificate Authority store
 * with an optional custom verify callback.
 *
 * @param caStore a certificate store to verify against.
 * @param chain the certificate chain to verify, with the root or highest
 *          authority at the end (an array of certificates).
 * @param options a callback to be called for every certificate in the chain or
 *                  an object with:
 *                  verify a callback to be called for every certificate in the
 *                    chain
 *                  validityCheckDate the date against which the certificate
 *                    validity period should be checked. Pass null to not check
 *                    the validity period. By default, the current date is used.
 *
 * The verify callback has the following signature:
 *
 * verified - Set to true if certificate was verified, otherwise the
 *   pki.certificateError for why the certificate failed.
 * depth - The current index in the chain, where 0 is the end point's cert.
 * certs - The certificate chain, *NOTE* an empty chain indicates an anonymous
 *   end point.
 *
 * The function returns true on success and on failure either the appropriate
 * pki.certificateError or an object with 'error' set to the appropriate
 * pki.certificateError and 'message' set to a custom error message.
 *
 * @return true if successful, error thrown if not.
 */
pki.verifyCertificateChain = function(caStore, chain, options) {
  /* From: RFC3280 - Internet X.509 Public Key Infrastructure Certificate
    Section 6: Certification Path Validation
    See inline parentheticals related to this particular implementation.

    The primary goal of path validation is to verify the binding between
    a subject distinguished name or a subject alternative name and subject
    public key, as represented in the end entity certificate, based on the
    public key of the trust anchor. This requires obtaining a sequence of
    certificates that support that binding. That sequence should be provided
    in the passed 'chain'. The trust anchor should be in the given CA
    store. The 'end entity' certificate is the certificate provided by the
    end point (typically a server) and is the first in the chain.

    To meet this goal, the path validation process verifies, among other
    things, that a prospective certification path (a sequence of n
    certificates or a 'chain') satisfies the following conditions:

    (a) for all x in {1, ..., n-1}, the subject of certificate x is
          the issuer of certificate x+1;

    (b) certificate 1 is issued by the trust anchor;

    (c) certificate n is the certificate to be validated; and

    (d) for all x in {1, ..., n}, the certificate was valid at the
          time in question.

    Note that here 'n' is index 0 in the chain and 1 is the last certificate
    in the chain and it must be signed by a certificate in the connection's
    CA store.

    The path validation process also determines the set of certificate
    policies that are valid for this path, based on the certificate policies
    extension, policy mapping extension, policy constraints extension, and
    inhibit any-policy extension.

    Note: Policy mapping extension not supported (Not Required).

    Note: If the certificate has an unsupported critical extension, then it
    must be rejected.

    Note: A certificate is self-issued if the DNs that appear in the subject
    and issuer fields are identical and are not empty.

    The path validation algorithm assumes the following seven inputs are
    provided to the path processing logic. What this specific implementation
    will use is provided parenthetically:

    (a) a prospective certification path of length n (the 'chain')
    (b) the current date/time: ('now').
    (c) user-initial-policy-set: A set of certificate policy identifiers
          naming the policies that are acceptable to the certificate user.
          The user-initial-policy-set contains the special value any-policy
          if the user is not concerned about certificate policy
          (Not implemented. Any policy is accepted).
    (d) trust anchor information, describing a CA that serves as a trust
          anchor for the certification path. The trust anchor information
          includes:

      (1)  the trusted issuer name,
      (2)  the trusted public key algorithm,
      (3)  the trusted public key, and
      (4)  optionally, the trusted public key parameters associated
             with the public key.

      (Trust anchors are provided via certificates in the CA store).

      The trust anchor information may be provided to the path processing
      procedure in the form of a self-signed certificate. The trusted anchor
      information is trusted because it was delivered to the path processing
      procedure by some trustworthy out-of-band procedure. If the trusted
      public key algorithm requires parameters, then the parameters are
      provided along with the trusted public key (No parameters used in this
      implementation).

    (e) initial-policy-mapping-inhibit, which indicates if policy mapping is
          allowed in the certification path.
          (Not implemented, no policy checking)

    (f) initial-explicit-policy, which indicates if the path must be valid
          for at least one of the certificate policies in the user-initial-
          policy-set.
          (Not implemented, no policy checking)

    (g) initial-any-policy-inhibit, which indicates whether the
          anyPolicy OID should be processed if it is included in a
          certificate.
          (Not implemented, so any policy is valid provided that it is
          not marked as critical) */

  /* Basic Path Processing:

    For each certificate in the 'chain', the following is checked:

    1. The certificate validity period includes the current time.
    2. The certificate was signed by its parent (where the parent is either
       the next in the chain or from the CA store). Allow processing to
       continue to the next step if no parent is found but the certificate is
       in the CA store.
    3. TODO: The certificate has not been revoked.
    4. The certificate issuer name matches the parent's subject name.
    5. TODO: If the certificate is self-issued and not the final certificate
       in the chain, skip this step, otherwise verify that the subject name
       is within one of the permitted subtrees of X.500 distinguished names
       and that each of the alternative names in the subjectAltName extension
       (critical or non-critical) is within one of the permitted subtrees for
       that name type.
    6. TODO: If the certificate is self-issued and not the final certificate
       in the chain, skip this step, otherwise verify that the subject name
       is not within one of the excluded subtrees for X.500 distinguished
       names and none of the subjectAltName extension names are excluded for
       that name type.
    7. The other steps in the algorithm for basic path processing involve
       handling the policy extension which is not presently supported in this
       implementation. Instead, if a critical policy extension is found, the
       certificate is rejected as not supported.
    8. If the certificate is not the first or if its the only certificate in
       the chain (having no parent from the CA store or is self-signed) and it
       has a critical key usage extension, verify that the keyCertSign bit is
       set. If the key usage extension exists, verify that the basic
       constraints extension exists. If the basic constraints extension exists,
       verify that the cA flag is set. If pathLenConstraint is set, ensure that
       the number of certificates that precede in the chain (come earlier
       in the chain as implemented below), excluding the very first in the
       chain (typically the end-entity one), isn't greater than the
       pathLenConstraint. This constraint limits the number of intermediate
       CAs that may appear below a CA before only end-entity certificates
       may be issued. */

  // if a verify callback is passed as the third parameter, package it within
  // the options object. This is to support a legacy function signature that
  // expected the verify callback as the third parameter.
  if(typeof options === 'function') {
    options = {verify: options};
  }
  options = options || {};

  // copy cert chain references to another array to protect against changes
  // in verify callback
  chain = chain.slice(0);
  var certs = chain.slice(0);

  var validityCheckDate = options.validityCheckDate;
  // if no validityCheckDate is specified, default to the current date. Make
  // sure to maintain the value null because it indicates that the validity
  // period should not be checked.
  if(typeof validityCheckDate === 'undefined') {
    validityCheckDate = new Date();
  }

  // verify each cert in the chain using its parent, where the parent
  // is either the next in the chain or from the CA store
  var first = true;
  var error = null;
  var depth = 0;
  do {
    var cert = chain.shift();
    var parent = null;
    var selfSigned = false;

    if(validityCheckDate) {
      // 1. check valid time
      if(validityCheckDate < cert.validity.notBefore ||
         validityCheckDate > cert.validity.notAfter) {
        error = {
          message: 'Certificate is not valid yet or has expired.',
          error: pki.certificateError.certificate_expired,
          notBefore: cert.validity.notBefore,
          notAfter: cert.validity.notAfter,
          // TODO: we might want to reconsider renaming 'now' to
          // 'validityCheckDate' should this API be changed in the future.
          now: validityCheckDate
        };
      }
    }

    // 2. verify with parent from chain or CA store
    if(error === null) {
      parent = chain[0] || caStore.getIssuer(cert);
      if(parent === null) {
        // check for self-signed cert
        if(cert.isIssuer(cert)) {
          selfSigned = true;
          parent = cert;
        }
      }

      if(parent) {
        // FIXME: current CA store implementation might have multiple
        // certificates where the issuer can't be determined from the
        // certificate (happens rarely with, eg: old certificates) so normalize
        // by always putting parents into an array
        // TODO: there's may be an extreme degenerate case currently uncovered
        // where an old intermediate certificate seems to have a matching parent
        // but none of the parents actually verify ... but the intermediate
        // is in the CA and it should pass this check; needs investigation
        var parents = parent;
        if(!forge.util.isArray(parents)) {
          parents = [parents];
        }

        // try to verify with each possible parent (typically only one)
        var verified = false;
        while(!verified && parents.length > 0) {
          parent = parents.shift();
          try {
            verified = parent.verify(cert);
          } catch(ex) {
            // failure to verify, don't care why, try next one
          }
        }

        if(!verified) {
          error = {
            message: 'Certificate signature is invalid.',
            error: pki.certificateError.bad_certificate
          };
        }
      }

      if(error === null && (!parent || selfSigned) &&
        !caStore.hasCertificate(cert)) {
        // no parent issuer and certificate itself is not trusted
        error = {
          message: 'Certificate is not trusted.',
          error: pki.certificateError.unknown_ca
        };
      }
    }

    // TODO: 3. check revoked

    // 4. check for matching issuer/subject
    if(error === null && parent && !cert.isIssuer(parent)) {
      // parent is not issuer
      error = {
        message: 'Certificate issuer is invalid.',
        error: pki.certificateError.bad_certificate
      };
    }

    // 5. TODO: check names with permitted names tree

    // 6. TODO: check names against excluded names tree

    // 7. check for unsupported critical extensions
    if(error === null) {
      // supported extensions
      var se = {
        keyUsage: true,
        basicConstraints: true
      };
      for(var i = 0; error === null && i < cert.extensions.length; ++i) {
        var ext = cert.extensions[i];
        if(ext.critical && !(ext.name in se)) {
          error = {
            message:
              'Certificate has an unsupported critical extension.',
            error: pki.certificateError.unsupported_certificate
          };
        }
      }
    }

    // 8. check for CA if cert is not first or is the only certificate
    // remaining in chain with no parent or is self-signed
    if(error === null &&
      (!first || (chain.length === 0 && (!parent || selfSigned)))) {
      // first check keyUsage extension and then basic constraints
      var bcExt = cert.getExtension('basicConstraints');
      var keyUsageExt = cert.getExtension('keyUsage');
      if(keyUsageExt !== null) {
        // keyCertSign must be true and there must be a basic
        // constraints extension
        if(!keyUsageExt.keyCertSign || bcExt === null) {
          // bad certificate
          error = {
            message:
              'Certificate keyUsage or basicConstraints conflict ' +
              'or indicate that the certificate is not a CA. ' +
              'If the certificate is the only one in the chain or ' +
              'isn\'t the first then the certificate must be a ' +
              'valid CA.',
            error: pki.certificateError.bad_certificate
          };
        }
      }
      // basic constraints cA flag must be set
      if(error === null && bcExt !== null && !bcExt.cA) {
        // bad certificate
        error = {
          message:
            'Certificate basicConstraints indicates the certificate ' +
            'is not a CA.',
          error: pki.certificateError.bad_certificate
        };
      }
      // if error is not null and keyUsage is available, then we know it
      // has keyCertSign and there is a basic constraints extension too,
      // which means we can check pathLenConstraint (if it exists)
      if(error === null && keyUsageExt !== null &&
        'pathLenConstraint' in bcExt) {
        // pathLen is the maximum # of intermediate CA certs that can be
        // found between the current certificate and the end-entity (depth 0)
        // certificate; this number does not include the end-entity (depth 0,
        // last in the chain) even if it happens to be a CA certificate itself
        var pathLen = depth - 1;
        if(pathLen > bcExt.pathLenConstraint) {
          // pathLenConstraint violated, bad certificate
          error = {
            message:
              'Certificate basicConstraints pathLenConstraint violated.',
            error: pki.certificateError.bad_certificate
          };
        }
      }
    }

    // call application callback
    var vfd = (error === null) ? true : error.error;
    var ret = options.verify ? options.verify(vfd, depth, certs) : vfd;
    if(ret === true) {
      // clear any set error
      error = null;
    } else {
      // if passed basic tests, set default message and alert
      if(vfd === true) {
        error = {
          message: 'The application rejected the certificate.',
          error: pki.certificateError.bad_certificate
        };
      }

      // check for custom error info
      if(ret || ret === 0) {
        // set custom message and error
        if(typeof ret === 'object' && !forge.util.isArray(ret)) {
          if(ret.message) {
            error.message = ret.message;
          }
          if(ret.error) {
            error.error = ret.error;
          }
        } else if(typeof ret === 'string') {
          // set custom error
          error.error = ret;
        }
      }

      // throw error
      throw error;
    }

    // no longer first cert in chain
    first = false;
    ++depth;
  } while(chain.length > 0);

  return true;
};
/**
 * XmlHttpRequest implementation that uses TLS and flash SocketPool.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
var forge = require('./forge');
require('./socket');
require('./http');

/* XHR API */
var xhrApi = module.exports = forge.xhr = forge.xhr || {};

(function($) {

// logging category
var cat = 'forge.xhr';

/*
XMLHttpRequest interface definition from:
http://www.w3.org/TR/XMLHttpRequest

interface XMLHttpRequest {
  // event handler
  attribute EventListener onreadystatechange;

  // state
  const unsigned short UNSENT = 0;
  const unsigned short OPENED = 1;
  const unsigned short HEADERS_RECEIVED = 2;
  const unsigned short LOADING = 3;
  const unsigned short DONE = 4;
  readonly attribute unsigned short readyState;

  // request
  void open(in DOMString method, in DOMString url);
  void open(in DOMString method, in DOMString url, in boolean async);
  void open(in DOMString method, in DOMString url,
            in boolean async, in DOMString user);
  void open(in DOMString method, in DOMString url,
            in boolean async, in DOMString user, in DOMString password);
  void setRequestHeader(in DOMString header, in DOMString value);
  void send();
  void send(in DOMString data);
  void send(in Document data);
  void abort();

  // response
  DOMString getAllResponseHeaders();
  DOMString getResponseHeader(in DOMString header);
  readonly attribute DOMString responseText;
  readonly attribute Document responseXML;
  readonly attribute unsigned short status;
  readonly attribute DOMString statusText;
};
*/

// readyStates
var UNSENT = 0;
var OPENED = 1;
var HEADERS_RECEIVED = 2;
var LOADING = 3;
var DONE = 4;

// exceptions
var INVALID_STATE_ERR = 11;
var SYNTAX_ERR = 12;
var SECURITY_ERR = 18;
var NETWORK_ERR = 19;
var ABORT_ERR = 20;

// private flash socket pool vars
var _sp = null;
var _policyPort = 0;
var _policyUrl = null;

// default client (used if no special URL provided when creating an XHR)
var _client = null;

// all clients including the default, key'd by full base url
// (multiple cross-domain http clients are permitted so there may be more
// than one client in this map)
// TODO: provide optional clean up API for non-default clients
var _clients = {};

// the default maximum number of concurrents connections per client
var _maxConnections = 10;

var net = forge.net;
var http = forge.http;

/**
 * Initializes flash XHR support.
 *
 * @param options:
 *   url: the default base URL to connect to if xhr URLs are relative,
 *     ie: https://myserver.com.
 *   flashId: the dom ID of the flash SocketPool.
 *   policyPort: the port that provides the server's flash policy, 0 to use
 *     the flash default.
 *   policyUrl: the policy file URL to use instead of a policy port.
 *   msie: true if browser is internet explorer, false if not.
 *   connections: the maximum number of concurrent connections.
 *   caCerts: a list of PEM-formatted certificates to trust.
 *   cipherSuites: an optional array of cipher suites to use,
 *     see forge.tls.CipherSuites.
 *   verify: optional TLS certificate verify callback to use (see forge.tls
 *     for details).
 *   getCertificate: an optional callback used to get a client-side
 *     certificate (see forge.tls for details).
 *   getPrivateKey: an optional callback used to get a client-side private
 *     key (see forge.tls for details).
 *   getSignature: an optional callback used to get a client-side signature
 *     (see forge.tls for details).
 *   persistCookies: true to use persistent cookies via flash local storage,
 *     false to only keep cookies in javascript.
 *   primeTlsSockets: true to immediately connect TLS sockets on their
 *     creation so that they will cache TLS sessions for reuse.
 */
xhrApi.init = function(options) {
  forge.log.debug(cat, 'initializing', options);

  // update default policy port and max connections
  _policyPort = options.policyPort || _policyPort;
  _policyUrl = options.policyUrl || _policyUrl;
  _maxConnections = options.connections || _maxConnections;

  // create the flash socket pool
  _sp = net.createSocketPool({
    flashId: options.flashId,
    policyPort: _policyPort,
    policyUrl: _policyUrl,
    msie: options.msie || false
  });

  // create default http client
  _client = http.createClient({
    url: options.url || (
      window.location.protocol + '//' + window.location.host),
    socketPool: _sp,
    policyPort: _policyPort,
    policyUrl: _policyUrl,
    connections: options.connections || _maxConnections,
    caCerts: options.caCerts,
    cipherSuites: options.cipherSuites,
    persistCookies: options.persistCookies || true,
    primeTlsSockets: options.primeTlsSockets || false,
    verify: options.verify,
    getCertificate: options.getCertificate,
    getPrivateKey: options.getPrivateKey,
    getSignature: options.getSignature
  });
  _clients[_client.url.origin] = _client;

  forge.log.debug(cat, 'ready');
};

/**
 * Called to clean up the clients and socket pool.
 */
xhrApi.cleanup = function() {
  // destroy all clients
  for(var key in _clients) {
    _clients[key].destroy();
  }
  _clients = {};
  _client = null;

  // destroy socket pool
  _sp.destroy();
  _sp = null;
};

/**
 * Sets a cookie.
 *
 * @param cookie the cookie with parameters:
 *   name: the name of the cookie.
 *   value: the value of the cookie.
 *   comment: an optional comment string.
 *   maxAge: the age of the cookie in seconds relative to created time.
 *   secure: true if the cookie must be sent over a secure protocol.
 *   httpOnly: true to restrict access to the cookie from javascript
 *     (inaffective since the cookies are stored in javascript).
 *   path: the path for the cookie.
 *   domain: optional domain the cookie belongs to (must start with dot).
 *   version: optional version of the cookie.
 *   created: creation time, in UTC seconds, of the cookie.
 */
xhrApi.setCookie = function(cookie) {
  // default cookie expiration to never
  cookie.maxAge = cookie.maxAge || -1;

  // if the cookie's domain is set, use the appropriate client
  if(cookie.domain) {
    // add the cookies to the applicable domains
    for(var key in _clients) {
      var client = _clients[key];
      if(http.withinCookieDomain(client.url, cookie) &&
        client.secure === cookie.secure) {
        client.setCookie(cookie);
      }
    }
  } else {
    // use the default domain
    // FIXME: should a null domain cookie be added to all clients? should
    // this be an option?
    _client.setCookie(cookie);
  }
};

/**
 * Gets a cookie.
 *
 * @param name the name of the cookie.
 * @param path an optional path for the cookie (if there are multiple cookies
 *          with the same name but different paths).
 * @param domain an optional domain for the cookie (if not using the default
 *          domain).
 *
 * @return the cookie, cookies (if multiple matches), or null if not found.
 */
xhrApi.getCookie = function(name, path, domain) {
  var rval = null;

  if(domain) {
    // get the cookies from the applicable domains
    for(var key in _clients) {
      var client = _clients[key];
      if(http.withinCookieDomain(client.url, domain)) {
        var cookie = client.getCookie(name, path);
        if(cookie !== null) {
          if(rval === null) {
            rval = cookie;
          } else if(!forge.util.isArray(rval)) {
            rval = [rval, cookie];
          } else {
            rval.push(cookie);
          }
        }
      }
    }
  } else {
    // get cookie from default domain
    rval = _client.getCookie(name, path);
  }

  return rval;
};

/**
 * Removes a cookie.
 *
 * @param name the name of the cookie.
 * @param path an optional path for the cookie (if there are multiple cookies
 *          with the same name but different paths).
 * @param domain an optional domain for the cookie (if not using the default
 *          domain).
 *
 * @return true if a cookie was removed, false if not.
 */
xhrApi.removeCookie = function(name, path, domain) {
  var rval = false;

  if(domain) {
    // remove the cookies from the applicable domains
    for(var key in _clients) {
      var client = _clients[key];
      if(http.withinCookieDomain(client.url, domain)) {
        if(client.removeCookie(name, path)) {
           rval = true;
        }
      }
    }
  } else {
    // remove cookie from default domain
    rval = _client.removeCookie(name, path);
  }

  return rval;
};

/**
 * Creates a new XmlHttpRequest. By default the base URL, flash policy port,
 * etc, will be used. However, an XHR can be created to point at another
 * cross-domain URL.
 *
 * @param options:
 *   logWarningOnError: If true and an HTTP error status code is received then
 *     log a warning, otherwise log a verbose message.
 *   verbose: If true be very verbose in the output including the response
 *     event and response body, otherwise only include status, timing, and
 *     data size.
 *   logError: a multi-var log function for warnings that takes the log
 *     category as the first var.
 *   logWarning: a multi-var log function for warnings that takes the log
 *     category as the first var.
 *   logDebug: a multi-var log function for warnings that takes the log
 *     category as the first var.
 *   logVerbose: a multi-var log function for warnings that takes the log
 *     category as the first var.
 *   url: the default base URL to connect to if xhr URLs are relative,
 *     eg: https://myserver.com, and note that the following options will be
 *     ignored if the URL is absent or the same as the default base URL.
 *   policyPort: the port that provides the server's flash policy, 0 to use
 *     the flash default.
 *   policyUrl: the policy file URL to use instead of a policy port.
 *   connections: the maximum number of concurrent connections.
 *   caCerts: a list of PEM-formatted certificates to trust.
 *   cipherSuites: an optional array of cipher suites to use, see
 *     forge.tls.CipherSuites.
 *   verify: optional TLS certificate verify callback to use (see forge.tls
 *     for details).
 *   getCertificate: an optional callback used to get a client-side
 *     certificate.
 *   getPrivateKey: an optional callback used to get a client-side private key.
 *   getSignature: an optional callback used to get a client-side signature.
 *   persistCookies: true to use persistent cookies via flash local storage,
 *     false to only keep cookies in javascript.
 *   primeTlsSockets: true to immediately connect TLS sockets on their
 *     creation so that they will cache TLS sessions for reuse.
 *
 * @return the XmlHttpRequest.
 */
xhrApi.create = function(options) {
  // set option defaults
  options = $.extend({
    logWarningOnError: true,
    verbose: false,
    logError: function() {},
    logWarning: function() {},
    logDebug: function() {},
    logVerbose: function() {},
    url: null
  }, options || {});

  // private xhr state
  var _state = {
    // the http client to use
    client: null,
    // request storage
    request: null,
    // response storage
    response: null,
    // asynchronous, true if doing asynchronous communication
    asynchronous: true,
    // sendFlag, true if send has been called
    sendFlag: false,
    // errorFlag, true if a network error occurred
    errorFlag: false
  };

  // private log functions
  var _log = {
    error: options.logError || forge.log.error,
    warning: options.logWarning || forge.log.warning,
    debug: options.logDebug || forge.log.debug,
    verbose: options.logVerbose || forge.log.verbose
  };

  // create public xhr interface
  var xhr = {
    // an EventListener
    onreadystatechange: null,
    // readonly, the current readyState
    readyState: UNSENT,
    // a string with the response entity-body
    responseText: '',
    // a Document for response entity-bodies that are XML
    responseXML: null,
    // readonly, returns the HTTP status code (i.e. 404)
    status: 0,
    // readonly, returns the HTTP status message (i.e. 'Not Found')
    statusText: ''
  };

  // determine which http client to use
  if(options.url === null) {
    // use default
    _state.client = _client;
  } else {
    var url;
    try {
      url = new URL(options.url);
    } catch(e) {
      var error = new Error('Invalid url.');
      error.details = {
        url: options.url
      };
    }

    // find client
    if(url.origin in _clients) {
      // client found
      _state.client = _clients[url.origin];
    } else {
      // create client
      _state.client = http.createClient({
        url: options.url,
        socketPool: _sp,
        policyPort: options.policyPort || _policyPort,
        policyUrl: options.policyUrl || _policyUrl,
        connections: options.connections || _maxConnections,
        caCerts: options.caCerts,
        cipherSuites: options.cipherSuites,
        persistCookies: options.persistCookies || true,
        primeTlsSockets: options.primeTlsSockets || false,
        verify: options.verify,
        getCertificate: options.getCertificate,
        getPrivateKey: options.getPrivateKey,
        getSignature: options.getSignature
      });
      _clients[url.origin] = _state.client;
    }
  }

  /**
   * Opens the request. This method will create the HTTP request to send.
   *
   * @param method the HTTP method (i.e. 'GET').
   * @param url the relative url (the HTTP request path).
   * @param async always true, ignored.
   * @param user always null, ignored.
   * @param password always null, ignored.
   */
  xhr.open = function(method, url, async, user, password) {
    // 1. validate Document if one is associated
    // TODO: not implemented (not used yet)

    // 2. validate method token
    // 3. change method to uppercase if it matches a known
    // method (here we just require it to be uppercase, and
    // we do not allow the standard methods)
    // 4. disallow CONNECT, TRACE, or TRACK with a security error
    switch(method) {
    case 'DELETE':
    case 'GET':
    case 'HEAD':
    case 'OPTIONS':
    case 'PATCH':
    case 'POST':
    case 'PUT':
      // valid method
      break;
    case 'CONNECT':
    case 'TRACE':
    case 'TRACK':
      throw new Error('CONNECT, TRACE and TRACK methods are disallowed');
    default:
      throw new Error('Invalid method: ' + method);
    }

    // TODO: other validation steps in algorithm are not implemented

    // 19. set send flag to false
    // set response body to null
    // empty list of request headers
    // set request method to given method
    // set request URL
    // set username, password
    // set asychronous flag
    _state.sendFlag = false;
    xhr.responseText = '';
    xhr.responseXML = null;

    // custom: reset status and statusText
    xhr.status = 0;
    xhr.statusText = '';

    // create the HTTP request
    _state.request = http.createRequest({
      method: method,
      path: url
    });

    // 20. set state to OPENED
    xhr.readyState = OPENED;

    // 21. dispatch onreadystatechange
    if(xhr.onreadystatechange) {
       xhr.onreadystatechange();
    }
  };

  /**
   * Adds an HTTP header field to the request.
   *
   * @param header the name of the header field.
   * @param value the value of the header field.
   */
  xhr.setRequestHeader = function(header, value) {
    // 1. if state is not OPENED or send flag is true, raise exception
    if(xhr.readyState != OPENED || _state.sendFlag) {
      throw new Error('XHR not open or sending');
    }

    // TODO: other validation steps in spec aren't implemented

    // set header
    _state.request.setField(header, value);
  };

  /**
   * Sends the request and any associated data.
   *
   * @param data a string or Document object to send, null to send no data.
   */
  xhr.send = function(data) {
    // 1. if state is not OPENED or 2. send flag is true, raise
    // an invalid state exception
    if(xhr.readyState != OPENED || _state.sendFlag) {
      throw new Error('XHR not open or sending');
    }

    // 3. ignore data if method is GET or HEAD
    if(data &&
      _state.request.method !== 'GET' &&
      _state.request.method !== 'HEAD') {
      // handle non-IE case
      if(typeof(XMLSerializer) !== 'undefined') {
        if(data instanceof Document) {
          var xs = new XMLSerializer();
          _state.request.body = xs.serializeToString(data);
        } else {
          _state.request.body = data;
        }
      } else {
        // poorly implemented IE case
        if(typeof(data.xml) !== 'undefined') {
          _state.request.body = data.xml;
        } else {
          _state.request.body = data;
        }
      }
    }

    // 4. release storage mutex (not used)

    // 5. set error flag to false
    _state.errorFlag = false;

    // 6. if asynchronous is true (must be in this implementation)

    // 6.1 set send flag to true
    _state.sendFlag = true;

    // 6.2 dispatch onreadystatechange
    if(xhr.onreadystatechange) {
      xhr.onreadystatechange();
    }

    // create send options
    var options = {};
    options.request = _state.request;
    options.headerReady = function(e) {
      // make cookies available for ease of use/iteration
      xhr.cookies = _state.client.cookies;

      // TODO: update document.cookie with any cookies where the
      // script's domain matches

      // headers received
      xhr.readyState = HEADERS_RECEIVED;
      xhr.status = e.response.code;
      xhr.statusText = e.response.message;
      _state.response = e.response;
      if(xhr.onreadystatechange) {
        xhr.onreadystatechange();
      }
      if(!_state.response.aborted) {
        // now loading body
        xhr.readyState = LOADING;
        if(xhr.onreadystatechange) {
           xhr.onreadystatechange();
        }
      }
    };
    options.bodyReady = function(e) {
      xhr.readyState = DONE;
      var ct = e.response.getField('Content-Type');
      // Note: this null/undefined check is done outside because IE
      // dies otherwise on a "'null' is null" error
      if(ct) {
        if(ct.indexOf('text/xml') === 0 ||
          ct.indexOf('application/xml') === 0 ||
          ct.indexOf('+xml') !== -1) {
          try {
            var doc = new ActiveXObject('MicrosoftXMLDOM');
            doc.async = false;
            doc.loadXML(e.response.body);
            xhr.responseXML = doc;
          } catch(ex) {
            var parser = new DOMParser();
            xhr.responseXML = parser.parseFromString(ex.body, 'text/xml');
          }
        }
      }

      var length = 0;
      if(e.response.body !== null) {
        xhr.responseText = e.response.body;
        length = e.response.body.length;
      }
      // build logging output
      var req = _state.request;
      var output =
        req.method + ' ' + req.path + ' ' +
        xhr.status + ' ' + xhr.statusText + ' ' +
        length + 'B ' +
        (e.request.connectTime + e.request.time + e.response.time) +
        'ms';
      var lFunc;
      if(options.verbose) {
        lFunc = (xhr.status >= 400 && options.logWarningOnError) ?
          _log.warning : _log.verbose;
        lFunc(cat, output,
          e, e.response.body ? '\n' + e.response.body : '\nNo content');
      } else {
        lFunc = (xhr.status >= 400 && options.logWarningOnError) ?
          _log.warning : _log.debug;
        lFunc(cat, output);
      }
      if(xhr.onreadystatechange) {
        xhr.onreadystatechange();
      }
    };
    options.error = function(e) {
      var req = _state.request;
      _log.error(cat, req.method + ' ' + req.path, e);

      // 1. set response body to null
      xhr.responseText = '';
      xhr.responseXML = null;

      // 2. set error flag to true (and reset status)
      _state.errorFlag = true;
      xhr.status = 0;
      xhr.statusText = '';

      // 3. set state to done
      xhr.readyState = DONE;

      // 4. asyc flag is always true, so dispatch onreadystatechange
      if(xhr.onreadystatechange) {
        xhr.onreadystatechange();
      }
    };

    // 7. send request
    _state.client.send(options);
  };

  /**
   * Aborts the request.
   */
  xhr.abort = function() {
    // 1. abort send
    // 2. stop network activity
    _state.request.abort();

    // 3. set response to null
    xhr.responseText = '';
    xhr.responseXML = null;

    // 4. set error flag to true (and reset status)
    _state.errorFlag = true;
    xhr.status = 0;
    xhr.statusText = '';

    // 5. clear user headers
    _state.request = null;
    _state.response = null;

    // 6. if state is DONE or UNSENT, or if OPENED and send flag is false
    if(xhr.readyState === DONE || xhr.readyState === UNSENT ||
     (xhr.readyState === OPENED && !_state.sendFlag)) {
      // 7. set ready state to unsent
      xhr.readyState = UNSENT;
    } else {
      // 6.1 set state to DONE
      xhr.readyState = DONE;

      // 6.2 set send flag to false
      _state.sendFlag = false;

      // 6.3 dispatch onreadystatechange
      if(xhr.onreadystatechange) {
        xhr.onreadystatechange();
      }

      // 7. set state to UNSENT
      xhr.readyState = UNSENT;
    }
  };

  /**
   * Gets all response headers as a string.
   *
   * @return the HTTP-encoded response header fields.
   */
  xhr.getAllResponseHeaders = function() {
    var rval = '';
    if(_state.response !== null) {
      var fields = _state.response.fields;
      $.each(fields, function(name, array) {
        $.each(array, function(i, value) {
          rval += name + ': ' + value + '\r\n';
        });
      });
    }
    return rval;
  };

  /**
   * Gets a single header field value or, if there are multiple
   * fields with the same name, a comma-separated list of header
   * values.
   *
   * @return the header field value(s) or null.
   */
  xhr.getResponseHeader = function(header) {
    var rval = null;
    if(_state.response !== null) {
      if(header in _state.response.fields) {
        rval = _state.response.fields[header];
        if(forge.util.isArray(rval)) {
          rval = rval.join();
        }
      }
    }
    return rval;
  };

  return xhr;
};

})(jQuery);
You may use the Forge project under the terms of either the BSD License or the
GNU General Public License (GPL) Version 2.

The BSD License is recommended for most projects. It is simple and easy to
understand and it places almost no restrictions on what you can do with the
Forge project.

If the GPL suits your project better you are also free to use Forge under
that license.

You don't have to do anything special to choose one license or the other and
you don't have to notify anyone which license you are using. You are free to
use this project in commercial projects as long as the copyright header is
left intact.

If you are a commercial entity and use this set of libraries in your
commercial software then reasonable payment to Digital Bazaar, if you can
afford it, is not required but is expected and would be appreciated. If this
library saves you time, then it's saving you money. The cost of developing
the Forge software was on the order of several hundred hours and tens of
thousands of dollars. We are attempting to strike a balance between helping
the development community while not being taken advantage of by lucrative
commercial entities for our efforts.

-------------------------------------------------------------------------------
New BSD License (3-clause)
Copyright (c) 2010, Digital Bazaar, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Digital Bazaar, Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL DIGITAL BAZAAR BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-------------------------------------------------------------------------------
        GNU GENERAL PUBLIC LICENSE
           Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

          Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Lesser General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.

        GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change.

    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.

    c) If the modified program normally reads commands interactively
    when run, you must cause it, when started running for such
    interactive use in the most ordinary way, to print or display an
    announcement including an appropriate copyright notice and a
    notice that there is no warranty (or else, saying that you provide
    a warranty) and that users may redistribute the program under
    these conditions, and telling the user how to view a copy of this
    License.  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

    a) Accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of Sections
    1 and 2 above on a medium customarily used for software interchange; or,

    b) Accompany it with a written offer, valid for at least three
    years, to give any third party, for a charge no more than your
    cost of physically performing source distribution, a complete
    machine-readable copy of the corresponding source code, to be
    distributed under the terms of Sections 1 and 2 above on a medium
    customarily used for software interchange; or,

    c) Accompany it with the information you received as to the offer
    to distribute corresponding source code.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above.)

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

          NO WARRANTY

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

{
  "name": "node-forge",
  "version": "1.3.1",
  "description": "JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.",
  "homepage": "https://github.com/digitalbazaar/forge",
  "author": {
    "name": "Digital Bazaar, Inc.",
    "email": "support@digitalbazaar.com",
    "url": "http://digitalbazaar.com/"
  },
  "contributors": [
    "Dave Longley <dlongley@digitalbazaar.com>",
    "David I. Lehn <dlehn@digitalbazaar.com>",
    "Stefan Siegl <stesie@brokenpipe.de>",
    "Christoph Dorn <christoph@christophdorn.com>"
  ],
  "devDependencies": {
    "browserify": "^16.5.2",
    "commander": "^2.20.0",
    "cross-env": "^5.2.1",
    "eslint": "^7.27.0",
    "eslint-config-digitalbazaar": "^2.8.0",
    "express": "^4.16.2",
    "karma": "^4.4.1",
    "karma-browserify": "^7.0.0",
    "karma-chrome-launcher": "^3.1.0",
    "karma-edge-launcher": "^0.4.2",
    "karma-firefox-launcher": "^1.3.0",
    "karma-ie-launcher": "^1.0.0",
    "karma-mocha": "^1.3.0",
    "karma-mocha-reporter": "^2.2.5",
    "karma-safari-launcher": "^1.0.0",
    "karma-sauce-launcher": "^2.0.2",
    "karma-sourcemap-loader": "^0.3.8",
    "karma-tap-reporter": "0.0.6",
    "karma-webpack": "^4.0.2",
    "mocha": "^5.2.0",
    "mocha-lcov-reporter": "^1.2.0",
    "nodejs-websocket": "^1.7.1",
    "nyc": "^15.1.0",
    "opts": "^1.2.7",
    "webpack": "^4.44.1",
    "webpack-cli": "^3.3.12",
    "worker-loader": "^2.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/digitalbazaar/forge"
  },
  "bugs": {
    "url": "https://github.com/digitalbazaar/forge/issues",
    "email": "support@digitalbazaar.com"
  },
  "license": "(BSD-3-Clause OR GPL-2.0)",
  "main": "lib/index.js",
  "files": [
    "lib/*.js",
    "flash/swf/*.swf",
    "dist/*.min.js",
    "dist/*.min.js.map"
  ],
  "engines": {
    "node": ">= 6.13.0"
  },
  "keywords": [
    "aes",
    "asn",
    "asn.1",
    "cbc",
    "crypto",
    "cryptography",
    "csr",
    "des",
    "gcm",
    "hmac",
    "http",
    "https",
    "md5",
    "network",
    "pkcs",
    "pki",
    "prng",
    "rc2",
    "rsa",
    "sha1",
    "sha256",
    "sha384",
    "sha512",
    "ssh",
    "tls",
    "x.509",
    "x509"
  ],
  "scripts": {
    "prepublish": "npm run build",
    "build": "webpack",
    "test-build": "webpack --config webpack-tests.config.js",
    "test": "npm run test-node",
    "test-node": "cross-env NODE_ENV=test mocha -t 30000 -R ${REPORTER:-spec} tests/unit/index.js",
    "test-karma": "karma start",
    "test-karma-sauce": "karma start karma-sauce.conf",
    "test-server": "node tests/server.js",
    "test-server-ws": "node tests/websockets/server-ws.js",
    "test-server-webid": "node tests/websockets/server-webid.js",
    "coverage": "rm -rf coverage && nyc --reporter=lcov --reporter=text-summary npm test",
    "coverage-ci": "rm -rf coverage && nyc --reporter=lcovonly npm test",
    "coverage-report": "nyc report",
    "lint": "eslint *.js lib/*.js tests/*.js tests/**/*.js examples/*.js flash/*.js"
  },
  "nyc": {
    "exclude": [
      "tests"
    ]
  },
  "jspm": {
    "format": "amd"
  },
  "browser": {
    "buffer": false,
    "crypto": false,
    "process": false
  }
}
# Forge

[![npm package](https://nodei.co/npm/node-forge.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/node-forge/)

[![Build Status](https://github.com/digitalbazaar/forge/workflows/Main%20Checks/badge.svg)](https://github.com/digitalbazaar/forge/actions?query=workflow%3A%22Main+Checks%22)

A native implementation of [TLS][] (and various other cryptographic tools) in
[JavaScript][].

Introduction
------------

The Forge software is a fully native implementation of the [TLS][] protocol
in JavaScript, a set of cryptography utilities, and a set of tools for
developing Web Apps that utilize many network resources.

Performance
------------

Forge is fast. Benchmarks against other popular JavaScript cryptography
libraries can be found here:

* http://dominictarr.github.io/crypto-bench/
* http://cryptojs.altervista.org/test/simulate-threading-speed_test.html

Documentation
-------------

* [Introduction](#introduction)
* [Performance](#performance)
* [Installation](#installation)
* [Testing](#testing)
* [Contributing](#contributing)

### API

* [Options](#options)

### Transports

* [TLS](#tls)
* [HTTP](#http)
* [SSH](#ssh)
* [XHR](#xhr)
* [Sockets](#socket)

### Ciphers

* [CIPHER](#cipher)
* [AES](#aes)
* [DES](#des)
* [RC2](#rc2)

### PKI

* [ED25519](#ed25519)
* [RSA](#rsa)
* [RSA-KEM](#rsakem)
* [X.509](#x509)
* [PKCS#5](#pkcs5)
* [PKCS#7](#pkcs7)
* [PKCS#8](#pkcs8)
* [PKCS#10](#pkcs10)
* [PKCS#12](#pkcs12)
* [ASN.1](#asn)

### Message Digests

* [SHA1](#sha1)
* [SHA256](#sha256)
* [SHA384](#sha384)
* [SHA512](#sha512)
* [MD5](#md5)
* [HMAC](#hmac)

### Utilities

* [Prime](#prime)
* [PRNG](#prng)
* [Tasks](#task)
* [Utilities](#util)
* [Logging](#log)
* [Flash Networking Support](#flash)

### Other

* [Security Considerations](#security-considerations)
* [Library Background](#library-background)
* [Contact](#contact)
* [Donations](#donations)

---------------------------------------

Installation
------------

**Note**: Please see the [Security Considerations](#security-considerations)
section before using packaging systems and pre-built files.

Forge uses a [CommonJS][] module structure with a build process for browser
bundles. The older [0.6.x][] branch with standalone files is available but will
not be regularly updated.

### Node.js

If you want to use forge with [Node.js][], it is available through `npm`:

https://www.npmjs.com/package/node-forge

Installation:

    npm install node-forge

You can then use forge as a regular module:

```js
var forge = require('node-forge');
```

The npm package includes pre-built `forge.min.js`, `forge.all.min.js`, and
`prime.worker.min.js` using the [UMD][] format.

### jsDelivr CDN

To use it via [jsDelivr](https://www.jsdelivr.com/package/npm/node-forge) include this in your html:

```html
<script src="https://cdn.jsdelivr.net/npm/node-forge@1.0.0/dist/forge.min.js"></script>
```

### unpkg CDN

To use it via [unpkg](https://unpkg.com/#/) include this in your html:

```html
<script src="https://unpkg.com/node-forge@1.0.0/dist/forge.min.js"></script>
```

### Development Requirements

The core JavaScript has the following requirements to build and test:

* Building a browser bundle:
  * Node.js
  * npm
* Testing
  * Node.js
  * npm
  * Chrome, Firefox, Safari (optional)

Some special networking features can optionally use a Flash component.  See the
[Flash README](./flash/README.md) for details.

### Building for a web browser

To create single file bundles for use with browsers run the following:

    npm install
    npm run build

This will create single non-minimized and minimized files that can be
included in the browser:

    dist/forge.js
    dist/forge.min.js

A bundle that adds some utilities and networking support is also available:

    dist/forge.all.js
    dist/forge.all.min.js

Include the file via:

```html
<script src="YOUR_SCRIPT_PATH/forge.js"></script>
```
or
```html
<script src="YOUR_SCRIPT_PATH/forge.min.js"></script>
```

The above bundles will synchronously create a global 'forge' object.

**Note**: These bundles will not include any WebWorker scripts (eg:
`dist/prime.worker.js`), so these will need to be accessible from the browser
if any WebWorkers are used.

### Building a custom browser bundle

The build process uses [webpack][] and the [config](./webpack.config.js) file
can be modified to generate a file or files that only contain the parts of
forge you need.

[Browserify][] override support is also present in `package.json`.

Testing
-------

### Prepare to run tests

    npm install

### Running automated tests with Node.js

Forge natively runs in a [Node.js][] environment:

    npm test

### Running automated tests with Headless Chrome

Automated testing is done via [Karma][]. By default it will run the tests with
Headless Chrome.

    npm run test-karma

Is 'mocha' reporter output too verbose? Other reporters are available. Try
'dots', 'progress', or 'tap'.

    npm run test-karma -- --reporters progress

By default [webpack][] is used. [Browserify][] can also be used.

    BUNDLER=browserify npm run test-karma

### Running automated tests with one or more browsers

You can also specify one or more browsers to use.

    npm run test-karma -- --browsers Chrome,Firefox,Safari,ChromeHeadless

The reporter option and `BUNDLER` environment variable can also be used.

### Running manual tests in a browser

Testing in a browser uses [webpack][] to combine forge and all tests and then
loading the result in a browser. A simple web server is provided that will
output the HTTP or HTTPS URLs to load. It also will start a simple Flash Policy
Server. Unit tests and older legacy tests are provided. Custom ports can be
used by running `node tests/server.js` manually.

To run the unit tests in a browser a special forge build is required:

    npm run test-build

To run legacy browser based tests the main forge build is required:

    npm run build

The tests are run with a custom server that prints out the URLs to use:

    npm run test-server

### Running other tests

There are some other random tests and benchmarks available in the tests
directory.

### Coverage testing

To perform coverage testing of the unit tests, run the following. The results
will be put in the `coverage/` directory. Note that coverage testing can slow
down some tests considerably.

    npm install
    npm run coverage

Contributing
------------

Any contributions (eg: PRs) that are accepted will be brought under the same
license used by the rest of the Forge project. This license allows Forge to
be used under the terms of either the BSD License or the GNU General Public
License (GPL) Version 2.

See: [LICENSE](https://github.com/digitalbazaar/forge/blob/cbebca3780658703d925b61b2caffb1d263a6c1d/LICENSE)

If a contribution contains 3rd party source code with its own license, it
may retain it, so long as that license is compatible with the Forge license.

API
---

<a name="options" />

### Options

If at any time you wish to disable the use of native code, where available,
for particular forge features like its secure random number generator, you
may set the ```forge.options.usePureJavaScript``` flag to ```true```. It is
not recommended that you set this flag as native code is typically more
performant and may have stronger security properties. It may be useful to
set this flag to test certain features that you plan to run in environments
that are different from your testing environment.

To disable native code when including forge in the browser:

```js
// run this *after* including the forge script
forge.options.usePureJavaScript = true;
```

To disable native code when using Node.js:

```js
var forge = require('node-forge');
forge.options.usePureJavaScript = true;
```

Transports
----------

<a name="tls" />

### TLS

Provides a native javascript client and server-side [TLS][] implementation.

__Examples__

```js
// create TLS client
var client = forge.tls.createConnection({
  server: false,
  caStore: /* Array of PEM-formatted certs or a CA store object */,
  sessionCache: {},
  // supported cipher suites in order of preference
  cipherSuites: [
    forge.tls.CipherSuites.TLS_RSA_WITH_AES_128_CBC_SHA,
    forge.tls.CipherSuites.TLS_RSA_WITH_AES_256_CBC_SHA],
  virtualHost: 'example.com',
  verify: function(connection, verified, depth, certs) {
    if(depth === 0) {
      var cn = certs[0].subject.getField('CN').value;
      if(cn !== 'example.com') {
        verified = {
          alert: forge.tls.Alert.Description.bad_certificate,
          message: 'Certificate common name does not match hostname.'
        };
      }
    }
    return verified;
  },
  connected: function(connection) {
    console.log('connected');
    // send message to server
    connection.prepare(forge.util.encodeUtf8('Hi server!'));
    /* NOTE: experimental, start heartbeat retransmission timer
    myHeartbeatTimer = setInterval(function() {
      connection.prepareHeartbeatRequest(forge.util.createBuffer('1234'));
    }, 5*60*1000);*/
  },
  /* provide a client-side cert if you want
  getCertificate: function(connection, hint) {
    return myClientCertificate;
  },
  /* the private key for the client-side cert if provided */
  getPrivateKey: function(connection, cert) {
    return myClientPrivateKey;
  },
  tlsDataReady: function(connection) {
    // TLS data (encrypted) is ready to be sent to the server
    sendToServerSomehow(connection.tlsData.getBytes());
    // if you were communicating with the server below, you'd do:
    // server.process(connection.tlsData.getBytes());
  },
  dataReady: function(connection) {
    // clear data from the server is ready
    console.log('the server sent: ' +
      forge.util.decodeUtf8(connection.data.getBytes()));
    // close connection
    connection.close();
  },
  /* NOTE: experimental
  heartbeatReceived: function(connection, payload) {
    // restart retransmission timer, look at payload
    clearInterval(myHeartbeatTimer);
    myHeartbeatTimer = setInterval(function() {
      connection.prepareHeartbeatRequest(forge.util.createBuffer('1234'));
    }, 5*60*1000);
    payload.getBytes();
  },*/
  closed: function(connection) {
    console.log('disconnected');
  },
  error: function(connection, error) {
    console.log('uh oh', error);
  }
});

// start the handshake process
client.handshake();

// when encrypted TLS data is received from the server, process it
client.process(encryptedBytesFromServer);

// create TLS server
var server = forge.tls.createConnection({
  server: true,
  caStore: /* Array of PEM-formatted certs or a CA store object */,
  sessionCache: {},
  // supported cipher suites in order of preference
  cipherSuites: [
    forge.tls.CipherSuites.TLS_RSA_WITH_AES_128_CBC_SHA,
    forge.tls.CipherSuites.TLS_RSA_WITH_AES_256_CBC_SHA],
  // require a client-side certificate if you want
  verifyClient: true,
  verify: function(connection, verified, depth, certs) {
    if(depth === 0) {
      var cn = certs[0].subject.getField('CN').value;
      if(cn !== 'the-client') {
        verified = {
          alert: forge.tls.Alert.Description.bad_certificate,
          message: 'Certificate common name does not match expected client.'
        };
      }
    }
    return verified;
  },
  connected: function(connection) {
    console.log('connected');
    // send message to client
    connection.prepare(forge.util.encodeUtf8('Hi client!'));
    /* NOTE: experimental, start heartbeat retransmission timer
    myHeartbeatTimer = setInterval(function() {
      connection.prepareHeartbeatRequest(forge.util.createBuffer('1234'));
    }, 5*60*1000);*/
  },
  getCertificate: function(connection, hint) {
    return myServerCertificate;
  },
  getPrivateKey: function(connection, cert) {
    return myServerPrivateKey;
  },
  tlsDataReady: function(connection) {
    // TLS data (encrypted) is ready to be sent to the client
    sendToClientSomehow(connection.tlsData.getBytes());
    // if you were communicating with the client above you'd do:
    // client.process(connection.tlsData.getBytes());
  },
  dataReady: function(connection) {
    // clear data from the client is ready
    console.log('the client sent: ' +
      forge.util.decodeUtf8(connection.data.getBytes()));
    // close connection
    connection.close();
  },
  /* NOTE: experimental
  heartbeatReceived: function(connection, payload) {
    // restart retransmission timer, look at payload
    clearInterval(myHeartbeatTimer);
    myHeartbeatTimer = setInterval(function() {
      connection.prepareHeartbeatRequest(forge.util.createBuffer('1234'));
    }, 5*60*1000);
    payload.getBytes();
  },*/
  closed: function(connection) {
    console.log('disconnected');
  },
  error: function(connection, error) {
    console.log('uh oh', error);
  }
});

// when encrypted TLS data is received from the client, process it
server.process(encryptedBytesFromClient);
```

Connect to a TLS server using node's net.Socket:

```js
var socket = new net.Socket();

var client = forge.tls.createConnection({
  server: false,
  verify: function(connection, verified, depth, certs) {
    // skip verification for testing
    console.log('[tls] server certificate verified');
    return true;
  },
  connected: function(connection) {
    console.log('[tls] connected');
    // prepare some data to send (note that the string is interpreted as
    // 'binary' encoded, which works for HTTP which only uses ASCII, use
    // forge.util.encodeUtf8(str) otherwise
    client.prepare('GET / HTTP/1.0\r\n\r\n');
  },
  tlsDataReady: function(connection) {
    // encrypted data is ready to be sent to the server
    var data = connection.tlsData.getBytes();
    socket.write(data, 'binary'); // encoding should be 'binary'
  },
  dataReady: function(connection) {
    // clear data from the server is ready
    var data = connection.data.getBytes();
    console.log('[tls] data received from the server: ' + data);
  },
  closed: function() {
    console.log('[tls] disconnected');
  },
  error: function(connection, error) {
    console.log('[tls] error', error);
  }
});

socket.on('connect', function() {
  console.log('[socket] connected');
  client.handshake();
});
socket.on('data', function(data) {
  client.process(data.toString('binary')); // encoding should be 'binary'
});
socket.on('end', function() {
  console.log('[socket] disconnected');
});

// connect to google.com
socket.connect(443, 'google.com');

// or connect to gmail's imap server (but don't send the HTTP header above)
//socket.connect(993, 'imap.gmail.com');
```

<a name="http" />

### HTTP

Provides a native [JavaScript][] mini-implementation of an http client that
uses pooled sockets.

__Examples__

```js
// create an HTTP GET request
var request = forge.http.createRequest({method: 'GET', path: url.path});

// send the request somewhere
sendSomehow(request.toString());

// receive response
var buffer = forge.util.createBuffer();
var response = forge.http.createResponse();
var someAsyncDataHandler = function(bytes) {
  if(!response.bodyReceived) {
    buffer.putBytes(bytes);
    if(!response.headerReceived) {
      if(response.readHeader(buffer)) {
        console.log('HTTP response header: ' + response.toString());
      }
    }
    if(response.headerReceived && !response.bodyReceived) {
      if(response.readBody(buffer)) {
        console.log('HTTP response body: ' + response.body);
      }
    }
  }
};
```

<a name="ssh" />

### SSH

Provides some SSH utility functions.

__Examples__

```js
// encodes (and optionally encrypts) a private RSA key as a Putty PPK file
forge.ssh.privateKeyToPutty(privateKey, passphrase, comment);

// encodes a public RSA key as an OpenSSH file
forge.ssh.publicKeyToOpenSSH(key, comment);

// encodes a private RSA key as an OpenSSH file
forge.ssh.privateKeyToOpenSSH(privateKey, passphrase);

// gets the SSH public key fingerprint in a byte buffer
forge.ssh.getPublicKeyFingerprint(key);

// gets a hex-encoded, colon-delimited SSH public key fingerprint
forge.ssh.getPublicKeyFingerprint(key, {encoding: 'hex', delimiter: ':'});
```

<a name="xhr" />

### XHR

Provides an XmlHttpRequest implementation using forge.http as a backend.

__Examples__

```js
// TODO
```

<a name="socket" />

### Sockets

Provides an interface to create and use raw sockets provided via Flash.

__Examples__

```js
// TODO
```

Ciphers
-------

<a name="cipher" />

### CIPHER

Provides a basic API for block encryption and decryption. There is built-in
support for the ciphers: [AES][], [3DES][], and [DES][], and for the modes
of operation: [ECB][], [CBC][], [CFB][], [OFB][], [CTR][], and [GCM][].

These algorithms are currently supported:

* AES-ECB
* AES-CBC
* AES-CFB
* AES-OFB
* AES-CTR
* AES-GCM
* 3DES-ECB
* 3DES-CBC
* DES-ECB
* DES-CBC

When using an [AES][] algorithm, the key size will determine whether
AES-128, AES-192, or AES-256 is used (all are supported). When a [DES][]
algorithm is used, the key size will determine whether [3DES][] or regular
[DES][] is used. Use a [3DES][] algorithm to enforce Triple-DES.

__Examples__

```js
// generate a random key and IV
// Note: a key size of 16 bytes will use AES-128, 24 => AES-192, 32 => AES-256
var key = forge.random.getBytesSync(16);
var iv = forge.random.getBytesSync(16);

/* alternatively, generate a password-based 16-byte key
var salt = forge.random.getBytesSync(128);
var key = forge.pkcs5.pbkdf2('password', salt, numIterations, 16);
*/

// encrypt some bytes using CBC mode
// (other modes include: ECB, CFB, OFB, CTR, and GCM)
// Note: CBC and ECB modes use PKCS#7 padding as default
var cipher = forge.cipher.createCipher('AES-CBC', key);
cipher.start({iv: iv});
cipher.update(forge.util.createBuffer(someBytes));
cipher.finish();
var encrypted = cipher.output;
// outputs encrypted hex
console.log(encrypted.toHex());

// decrypt some bytes using CBC mode
// (other modes include: CFB, OFB, CTR, and GCM)
var decipher = forge.cipher.createDecipher('AES-CBC', key);
decipher.start({iv: iv});
decipher.update(encrypted);
var result = decipher.finish(); // check 'result' for true/false
// outputs decrypted hex
console.log(decipher.output.toHex());

// decrypt bytes using CBC mode and streaming
// Performance can suffer for large multi-MB inputs due to buffer
// manipulations. Stream processing in chunks can offer significant
// improvement. CPU intensive update() calls could also be performed with
// setImmediate/setTimeout to avoid blocking the main browser UI thread (not
// shown here). Optimal block size depends on the JavaScript VM and other
// factors. Encryption can use a simple technique for increased performance.
var encryptedBytes = encrypted.bytes();
var decipher = forge.cipher.createDecipher('AES-CBC', key);
decipher.start({iv: iv});
var length = encryptedBytes.length;
var chunkSize = 1024 * 64;
var index = 0;
var decrypted = '';
do {
  decrypted += decipher.output.getBytes();
  var buf = forge.util.createBuffer(encryptedBytes.substr(index, chunkSize));
  decipher.update(buf);
  index += chunkSize;
} while(index < length);
var result = decipher.finish();
assert(result);
decrypted += decipher.output.getBytes();
console.log(forge.util.bytesToHex(decrypted));

// encrypt some bytes using GCM mode
var cipher = forge.cipher.createCipher('AES-GCM', key);
cipher.start({
  iv: iv, // should be a 12-byte binary-encoded string or byte buffer
  additionalData: 'binary-encoded string', // optional
  tagLength: 128 // optional, defaults to 128 bits
});
cipher.update(forge.util.createBuffer(someBytes));
cipher.finish();
var encrypted = cipher.output;
var tag = cipher.mode.tag;
// outputs encrypted hex
console.log(encrypted.toHex());
// outputs authentication tag
console.log(tag.toHex());

// decrypt some bytes using GCM mode
var decipher = forge.cipher.createDecipher('AES-GCM', key);
decipher.start({
  iv: iv,
  additionalData: 'binary-encoded string', // optional
  tagLength: 128, // optional, defaults to 128 bits
  tag: tag // authentication tag from encryption
});
decipher.update(encrypted);
var pass = decipher.finish();
// pass is false if there was a failure (eg: authentication tag didn't match)
if(pass) {
  // outputs decrypted hex
  console.log(decipher.output.toHex());
}
```

Using forge in Node.js to match openssl's "enc" command line tool (**Note**: OpenSSL "enc" uses a non-standard file format with a custom key derivation function and a fixed iteration count of 1, which some consider less secure than alternatives such as [OpenPGP](https://tools.ietf.org/html/rfc4880)/[GnuPG](https://www.gnupg.org/)):

```js
var forge = require('node-forge');
var fs = require('fs');

// openssl enc -des3 -in input.txt -out input.enc
function encrypt(password) {
  var input = fs.readFileSync('input.txt', {encoding: 'binary'});

  // 3DES key and IV sizes
  var keySize = 24;
  var ivSize = 8;

  // get derived bytes
  // Notes:
  // 1. If using an alternative hash (eg: "-md sha1") pass
  //   "forge.md.sha1.create()" as the final parameter.
  // 2. If using "-nosalt", set salt to null.
  var salt = forge.random.getBytesSync(8);
  // var md = forge.md.sha1.create(); // "-md sha1"
  var derivedBytes = forge.pbe.opensslDeriveBytes(
    password, salt, keySize + ivSize/*, md*/);
  var buffer = forge.util.createBuffer(derivedBytes);
  var key = buffer.getBytes(keySize);
  var iv = buffer.getBytes(ivSize);

  var cipher = forge.cipher.createCipher('3DES-CBC', key);
  cipher.start({iv: iv});
  cipher.update(forge.util.createBuffer(input, 'binary'));
  cipher.finish();

  var output = forge.util.createBuffer();

  // if using a salt, prepend this to the output:
  if(salt !== null) {
    output.putBytes('Salted__'); // (add to match openssl tool output)
    output.putBytes(salt);
  }
  output.putBuffer(cipher.output);

  fs.writeFileSync('input.enc', output.getBytes(), {encoding: 'binary'});
}

// openssl enc -d -des3 -in input.enc -out input.dec.txt
function decrypt(password) {
  var input = fs.readFileSync('input.enc', {encoding: 'binary'});

  // parse salt from input
  input = forge.util.createBuffer(input, 'binary');
  // skip "Salted__" (if known to be present)
  input.getBytes('Salted__'.length);
  // read 8-byte salt
  var salt = input.getBytes(8);

  // Note: if using "-nosalt", skip above parsing and use
  // var salt = null;

  // 3DES key and IV sizes
  var keySize = 24;
  var ivSize = 8;

  var derivedBytes = forge.pbe.opensslDeriveBytes(
    password, salt, keySize + ivSize);
  var buffer = forge.util.createBuffer(derivedBytes);
  var key = buffer.getBytes(keySize);
  var iv = buffer.getBytes(ivSize);

  var decipher = forge.cipher.createDecipher('3DES-CBC', key);
  decipher.start({iv: iv});
  decipher.update(input);
  var result = decipher.finish(); // check 'result' for true/false

  fs.writeFileSync(
    'input.dec.txt', decipher.output.getBytes(), {encoding: 'binary'});
}
```

<a name="aes" />

### AES

Provides [AES][] encryption and decryption in [CBC][], [CFB][], [OFB][],
[CTR][], and [GCM][] modes. See [CIPHER](#cipher) for examples.

<a name="des" />

### DES

Provides [3DES][] and [DES][] encryption and decryption in [ECB][] and
[CBC][] modes. See [CIPHER](#cipher) for examples.

<a name="rc2" />

### RC2

__Examples__

```js
// generate a random key and IV
var key = forge.random.getBytesSync(16);
var iv = forge.random.getBytesSync(8);

// encrypt some bytes
var cipher = forge.rc2.createEncryptionCipher(key);
cipher.start(iv);
cipher.update(forge.util.createBuffer(someBytes));
cipher.finish();
var encrypted = cipher.output;
// outputs encrypted hex
console.log(encrypted.toHex());

// decrypt some bytes
var cipher = forge.rc2.createDecryptionCipher(key);
cipher.start(iv);
cipher.update(encrypted);
cipher.finish();
// outputs decrypted hex
console.log(cipher.output.toHex());
```

PKI
---

Provides [X.509][] certificate support, ED25519 key generation and
signing/verifying, and RSA public and private key encoding, decoding,
encryption/decryption, and signing/verifying.

<a name="ed25519" />

### ED25519

Special thanks to [TweetNaCl.js][] for providing the bulk of the implementation.

__Examples__

```js
var ed25519 = forge.pki.ed25519;

// generate a random ED25519 keypair
var keypair = ed25519.generateKeyPair();
// `keypair.publicKey` is a node.js Buffer or Uint8Array
// `keypair.privateKey` is a node.js Buffer or Uint8Array

// generate a random ED25519 keypair based on a random 32-byte seed
var seed = forge.random.getBytesSync(32);
var keypair = ed25519.generateKeyPair({seed: seed});

// generate a random ED25519 keypair based on a "password" 32-byte seed
var password = 'Mai9ohgh6ahxee0jutheew0pungoozil';
var seed = new forge.util.ByteBuffer(password, 'utf8');
var keypair = ed25519.generateKeyPair({seed: seed});

// sign a UTF-8 message
var signature = ED25519.sign({
  message: 'test',
  // also accepts `binary` if you want to pass a binary string
  encoding: 'utf8',
  // node.js Buffer, Uint8Array, forge ByteBuffer, binary string
  privateKey: privateKey
});
// `signature` is a node.js Buffer or Uint8Array

// sign a message passed as a buffer
var signature = ED25519.sign({
  // also accepts a forge ByteBuffer or Uint8Array
  message: Buffer.from('test', 'utf8'),
  privateKey: privateKey
});

// sign a message digest (shorter "message" == better performance)
var md = forge.md.sha256.create();
md.update('test', 'utf8');
var signature = ED25519.sign({
  md: md,
  privateKey: privateKey
});

// verify a signature on a UTF-8 message
var verified = ED25519.verify({
  message: 'test',
  encoding: 'utf8',
  // node.js Buffer, Uint8Array, forge ByteBuffer, or binary string
  signature: signature,
  // node.js Buffer, Uint8Array, forge ByteBuffer, or binary string
  publicKey: publicKey
});
// `verified` is true/false

// sign a message passed as a buffer
var verified = ED25519.verify({
  // also accepts a forge ByteBuffer or Uint8Array
  message: Buffer.from('test', 'utf8'),
  // node.js Buffer, Uint8Array, forge ByteBuffer, or binary string
  signature: signature,
  // node.js Buffer, Uint8Array, forge ByteBuffer, or binary string
  publicKey: publicKey
});

// verify a signature on a message digest
var md = forge.md.sha256.create();
md.update('test', 'utf8');
var verified = ED25519.verify({
  md: md,
  // node.js Buffer, Uint8Array, forge ByteBuffer, or binary string
  signature: signature,
  // node.js Buffer, Uint8Array, forge ByteBuffer, or binary string
  publicKey: publicKey
});
```

<a name="rsa" />

### RSA

__Examples__

```js
var rsa = forge.pki.rsa;

// generate an RSA key pair synchronously
// *NOT RECOMMENDED*: Can be significantly slower than async and may block
// JavaScript execution. Will use native Node.js 10.12.0+ API if possible.
var keypair = rsa.generateKeyPair({bits: 2048, e: 0x10001});

// generate an RSA key pair asynchronously (uses web workers if available)
// use workers: -1 to run a fast core estimator to optimize # of workers
// *RECOMMENDED*: Can be significantly faster than sync. Will use native
// Node.js 10.12.0+ or WebCrypto API if possible.
rsa.generateKeyPair({bits: 2048, workers: 2}, function(err, keypair) {
  // keypair.privateKey, keypair.publicKey
});

// generate an RSA key pair in steps that attempt to run for a specified period
// of time on the main JS thread
var state = rsa.createKeyPairGenerationState(2048, 0x10001);
var step = function() {
  // run for 100 ms
  if(!rsa.stepKeyPairGenerationState(state, 100)) {
    setTimeout(step, 1);
  }
  else {
    // done, turn off progress indicator, use state.keys
  }
};
// turn on progress indicator, schedule generation to run
setTimeout(step);

// sign data with a private key and output DigestInfo DER-encoded bytes
// (defaults to RSASSA PKCS#1 v1.5)
var md = forge.md.sha1.create();
md.update('sign this', 'utf8');
var signature = privateKey.sign(md);

// verify data with a public key
// (defaults to RSASSA PKCS#1 v1.5)
var verified = publicKey.verify(md.digest().bytes(), signature);

// sign data using RSASSA-PSS where PSS uses a SHA-1 hash, a SHA-1 based
// masking function MGF1, and a 20 byte salt
var md = forge.md.sha1.create();
md.update('sign this', 'utf8');
var pss = forge.pss.create({
  md: forge.md.sha1.create(),
  mgf: forge.mgf.mgf1.create(forge.md.sha1.create()),
  saltLength: 20
  // optionally pass 'prng' with a custom PRNG implementation
  // optionalls pass 'salt' with a forge.util.ByteBuffer w/custom salt
});
var signature = privateKey.sign(md, pss);

// verify RSASSA-PSS signature
var pss = forge.pss.create({
  md: forge.md.sha1.create(),
  mgf: forge.mgf.mgf1.create(forge.md.sha1.create()),
  saltLength: 20
  // optionally pass 'prng' with a custom PRNG implementation
});
var md = forge.md.sha1.create();
md.update('sign this', 'utf8');
publicKey.verify(md.digest().getBytes(), signature, pss);

// encrypt data with a public key (defaults to RSAES PKCS#1 v1.5)
var encrypted = publicKey.encrypt(bytes);

// decrypt data with a private key (defaults to RSAES PKCS#1 v1.5)
var decrypted = privateKey.decrypt(encrypted);

// encrypt data with a public key using RSAES PKCS#1 v1.5
var encrypted = publicKey.encrypt(bytes, 'RSAES-PKCS1-V1_5');

// decrypt data with a private key using RSAES PKCS#1 v1.5
var decrypted = privateKey.decrypt(encrypted, 'RSAES-PKCS1-V1_5');

// encrypt data with a public key using RSAES-OAEP
var encrypted = publicKey.encrypt(bytes, 'RSA-OAEP');

// decrypt data with a private key using RSAES-OAEP
var decrypted = privateKey.decrypt(encrypted, 'RSA-OAEP');

// encrypt data with a public key using RSAES-OAEP/SHA-256
var encrypted = publicKey.encrypt(bytes, 'RSA-OAEP', {
  md: forge.md.sha256.create()
});

// decrypt data with a private key using RSAES-OAEP/SHA-256
var decrypted = privateKey.decrypt(encrypted, 'RSA-OAEP', {
  md: forge.md.sha256.create()
});

// encrypt data with a public key using RSAES-OAEP/SHA-256/MGF1-SHA-1
// compatible with Java's RSA/ECB/OAEPWithSHA-256AndMGF1Padding
var encrypted = publicKey.encrypt(bytes, 'RSA-OAEP', {
  md: forge.md.sha256.create(),
  mgf1: {
    md: forge.md.sha1.create()
  }
});

// decrypt data with a private key using RSAES-OAEP/SHA-256/MGF1-SHA-1
// compatible with Java's RSA/ECB/OAEPWithSHA-256AndMGF1Padding
var decrypted = privateKey.decrypt(encrypted, 'RSA-OAEP', {
  md: forge.md.sha256.create(),
  mgf1: {
    md: forge.md.sha1.create()
  }
});

```

<a name="rsakem" />

### RSA-KEM

__Examples__

```js
// generate an RSA key pair asynchronously (uses web workers if available)
// use workers: -1 to run a fast core estimator to optimize # of workers
forge.rsa.generateKeyPair({bits: 2048, workers: -1}, function(err, keypair) {
  // keypair.privateKey, keypair.publicKey
});

// generate and encapsulate a 16-byte secret key
var kdf1 = new forge.kem.kdf1(forge.md.sha1.create());
var kem = forge.kem.rsa.create(kdf1);
var result = kem.encrypt(keypair.publicKey, 16);
// result has 'encapsulation' and 'key'

// encrypt some bytes
var iv = forge.random.getBytesSync(12);
var someBytes = 'hello world!';
var cipher = forge.cipher.createCipher('AES-GCM', result.key);
cipher.start({iv: iv});
cipher.update(forge.util.createBuffer(someBytes));
cipher.finish();
var encrypted = cipher.output.getBytes();
var tag = cipher.mode.tag.getBytes();

// send 'encrypted', 'iv', 'tag', and result.encapsulation to recipient

// decrypt encapsulated 16-byte secret key
var kdf1 = new forge.kem.kdf1(forge.md.sha1.create());
var kem = forge.kem.rsa.create(kdf1);
var key = kem.decrypt(keypair.privateKey, result.encapsulation, 16);

// decrypt some bytes
var decipher = forge.cipher.createDecipher('AES-GCM', key);
decipher.start({iv: iv, tag: tag});
decipher.update(forge.util.createBuffer(encrypted));
var pass = decipher.finish();
// pass is false if there was a failure (eg: authentication tag didn't match)
if(pass) {
  // outputs 'hello world!'
  console.log(decipher.output.getBytes());
}

```

<a name="x509" />

### X.509

__Examples__

```js
var pki = forge.pki;

// convert a PEM-formatted public key to a Forge public key
var publicKey = pki.publicKeyFromPem(pem);

// convert a Forge public key to PEM-format
var pem = pki.publicKeyToPem(publicKey);

// convert an ASN.1 SubjectPublicKeyInfo to a Forge public key
var publicKey = pki.publicKeyFromAsn1(subjectPublicKeyInfo);

// convert a Forge public key to an ASN.1 SubjectPublicKeyInfo
var subjectPublicKeyInfo = pki.publicKeyToAsn1(publicKey);

// gets a SHA-1 RSAPublicKey fingerprint a byte buffer
pki.getPublicKeyFingerprint(key);

// gets a SHA-1 SubjectPublicKeyInfo fingerprint a byte buffer
pki.getPublicKeyFingerprint(key, {type: 'SubjectPublicKeyInfo'});

// gets a hex-encoded, colon-delimited SHA-1 RSAPublicKey public key fingerprint
pki.getPublicKeyFingerprint(key, {encoding: 'hex', delimiter: ':'});

// gets a hex-encoded, colon-delimited SHA-1 SubjectPublicKeyInfo public key fingerprint
pki.getPublicKeyFingerprint(key, {
  type: 'SubjectPublicKeyInfo',
  encoding: 'hex',
  delimiter: ':'
});

// gets a hex-encoded, colon-delimited MD5 RSAPublicKey public key fingerprint
pki.getPublicKeyFingerprint(key, {
  md: forge.md.md5.create(),
  encoding: 'hex',
  delimiter: ':'
});

// creates a CA store
var caStore = pki.createCaStore([/* PEM-encoded cert */, ...]);

// add a certificate to the CA store
caStore.addCertificate(certObjectOrPemString);

// gets the issuer (its certificate) for the given certificate
var issuerCert = caStore.getIssuer(subjectCert);

// verifies a certificate chain against a CA store
pki.verifyCertificateChain(caStore, chain, customVerifyCallback);

// signs a certificate using the given private key
cert.sign(privateKey);

// signs a certificate using SHA-256 instead of SHA-1
cert.sign(privateKey, forge.md.sha256.create());

// verifies an issued certificate using the certificates public key
var verified = issuer.verify(issued);

// generate a keypair and create an X.509v3 certificate
var keys = pki.rsa.generateKeyPair(2048);
var cert = pki.createCertificate();
cert.publicKey = keys.publicKey;
// alternatively set public key from a csr
//cert.publicKey = csr.publicKey;
// NOTE: serialNumber is the hex encoded value of an ASN.1 INTEGER.
// Conforming CAs should ensure serialNumber is:
// - no more than 20 octets
// - non-negative (prefix a '00' if your value starts with a '1' bit)
cert.serialNumber = '01';
cert.validity.notBefore = new Date();
cert.validity.notAfter = new Date();
cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 1);
var attrs = [{
  name: 'commonName',
  value: 'example.org'
}, {
  name: 'countryName',
  value: 'US'
}, {
  shortName: 'ST',
  value: 'Virginia'
}, {
  name: 'localityName',
  value: 'Blacksburg'
}, {
  name: 'organizationName',
  value: 'Test'
}, {
  shortName: 'OU',
  value: 'Test'
}];
cert.setSubject(attrs);
// alternatively set subject from a csr
//cert.setSubject(csr.subject.attributes);
cert.setIssuer(attrs);
cert.setExtensions([{
  name: 'basicConstraints',
  cA: true
}, {
  name: 'keyUsage',
  keyCertSign: true,
  digitalSignature: true,
  nonRepudiation: true,
  keyEncipherment: true,
  dataEncipherment: true
}, {
  name: 'extKeyUsage',
  serverAuth: true,
  clientAuth: true,
  codeSigning: true,
  emailProtection: true,
  timeStamping: true
}, {
  name: 'nsCertType',
  client: true,
  server: true,
  email: true,
  objsign: true,
  sslCA: true,
  emailCA: true,
  objCA: true
}, {
  name: 'subjectAltName',
  altNames: [{
    type: 6, // URI
    value: 'http://example.org/webid#me'
  }, {
    type: 7, // IP
    ip: '127.0.0.1'
  }]
}, {
  name: 'subjectKeyIdentifier'
}]);
/* alternatively set extensions from a csr
var extensions = csr.getAttribute({name: 'extensionRequest'}).extensions;
// optionally add more extensions
extensions.push.apply(extensions, [{
  name: 'basicConstraints',
  cA: true
}, {
  name: 'keyUsage',
  keyCertSign: true,
  digitalSignature: true,
  nonRepudiation: true,
  keyEncipherment: true,
  dataEncipherment: true
}]);
cert.setExtensions(extensions);
*/
// self-sign certificate
cert.sign(keys.privateKey);

// convert a Forge certificate to PEM
var pem = pki.certificateToPem(cert);

// convert a Forge certificate from PEM
var cert = pki.certificateFromPem(pem);

// convert an ASN.1 X.509x3 object to a Forge certificate
var cert = pki.certificateFromAsn1(obj);

// convert a Forge certificate to an ASN.1 X.509v3 object
var asn1Cert = pki.certificateToAsn1(cert);
```

<a name="pkcs5" />

### PKCS#5

Provides the password-based key-derivation function from [PKCS#5][].

__Examples__

```js
// generate a password-based 16-byte key
// note an optional message digest can be passed as the final parameter
var salt = forge.random.getBytesSync(128);
var derivedKey = forge.pkcs5.pbkdf2('password', salt, numIterations, 16);

// generate key asynchronously
// note an optional message digest can be passed before the callback
forge.pkcs5.pbkdf2('password', salt, numIterations, 16, function(err, derivedKey) {
  // do something w/derivedKey
});
```

<a name="pkcs7" />

### PKCS#7

Provides cryptographically protected messages from [PKCS#7][].

__Examples__

```js
// convert a message from PEM
var p7 = forge.pkcs7.messageFromPem(pem);
// look at p7.recipients

// find a recipient by the issuer of a certificate
var recipient = p7.findRecipient(cert);

// decrypt
p7.decrypt(p7.recipients[0], privateKey);

// create a p7 enveloped message
var p7 = forge.pkcs7.createEnvelopedData();

// add a recipient
var cert = forge.pki.certificateFromPem(certPem);
p7.addRecipient(cert);

// set content
p7.content = forge.util.createBuffer('Hello');

// encrypt
p7.encrypt();

// convert message to PEM
var pem = forge.pkcs7.messageToPem(p7);

// create a degenerate PKCS#7 certificate container
// (CRLs not currently supported, only certificates)
var p7 = forge.pkcs7.createSignedData();
p7.addCertificate(certOrCertPem1);
p7.addCertificate(certOrCertPem2);
var pem = forge.pkcs7.messageToPem(p7);

// create PKCS#7 signed data with authenticatedAttributes
// attributes include: PKCS#9 content-type, message-digest, and signing-time
var p7 = forge.pkcs7.createSignedData();
p7.content = forge.util.createBuffer('Some content to be signed.', 'utf8');
p7.addCertificate(certOrCertPem);
p7.addSigner({
  key: privateKeyAssociatedWithCert,
  certificate: certOrCertPem,
  digestAlgorithm: forge.pki.oids.sha256,
  authenticatedAttributes: [{
    type: forge.pki.oids.contentType,
    value: forge.pki.oids.data
  }, {
    type: forge.pki.oids.messageDigest
    // value will be auto-populated at signing time
  }, {
    type: forge.pki.oids.signingTime,
    // value can also be auto-populated at signing time
    value: new Date()
  }]
});
p7.sign();
var pem = forge.pkcs7.messageToPem(p7);

// PKCS#7 Sign in detached mode.
// Includes the signature and certificate without the signed data.
p7.sign({detached: true});

```

<a name="pkcs8" />

### PKCS#8

__Examples__

```js
var pki = forge.pki;

// convert a PEM-formatted private key to a Forge private key
var privateKey = pki.privateKeyFromPem(pem);

// convert a Forge private key to PEM-format
var pem = pki.privateKeyToPem(privateKey);

// convert an ASN.1 PrivateKeyInfo or RSAPrivateKey to a Forge private key
var privateKey = pki.privateKeyFromAsn1(rsaPrivateKey);

// convert a Forge private key to an ASN.1 RSAPrivateKey
var rsaPrivateKey = pki.privateKeyToAsn1(privateKey);

// wrap an RSAPrivateKey ASN.1 object in a PKCS#8 ASN.1 PrivateKeyInfo
var privateKeyInfo = pki.wrapRsaPrivateKey(rsaPrivateKey);

// convert a PKCS#8 ASN.1 PrivateKeyInfo to PEM
var pem = pki.privateKeyInfoToPem(privateKeyInfo);

// encrypts a PrivateKeyInfo using a custom password and
// outputs an EncryptedPrivateKeyInfo
var encryptedPrivateKeyInfo = pki.encryptPrivateKeyInfo(
  privateKeyInfo, 'myCustomPasswordHere', {
    algorithm: 'aes256', // 'aes128', 'aes192', 'aes256', '3des'
  });

// decrypts an ASN.1 EncryptedPrivateKeyInfo that was encrypted
// with a custom password
var privateKeyInfo = pki.decryptPrivateKeyInfo(
  encryptedPrivateKeyInfo, 'myCustomPasswordHere');

// converts an EncryptedPrivateKeyInfo to PEM
var pem = pki.encryptedPrivateKeyToPem(encryptedPrivateKeyInfo);

// converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format
var encryptedPrivateKeyInfo = pki.encryptedPrivateKeyFromPem(pem);

// wraps and encrypts a Forge private key and outputs it in PEM format
var pem = pki.encryptRsaPrivateKey(privateKey, 'password');

// encrypts a Forge private key and outputs it in PEM format using OpenSSL's
// proprietary legacy format + encapsulated PEM headers (DEK-Info)
var pem = pki.encryptRsaPrivateKey(privateKey, 'password', {legacy: true});

// decrypts a PEM-formatted, encrypted private key
var privateKey = pki.decryptRsaPrivateKey(pem, 'password');

// sets an RSA public key from a private key
var publicKey = pki.setRsaPublicKey(privateKey.n, privateKey.e);
```

<a name="pkcs10" />

### PKCS#10

Provides certification requests or certificate signing requests (CSR) from
[PKCS#10][].

__Examples__

```js
// generate a key pair
var keys = forge.pki.rsa.generateKeyPair(2048);

// create a certification request (CSR)
var csr = forge.pki.createCertificationRequest();
csr.publicKey = keys.publicKey;
csr.setSubject([{
  name: 'commonName',
  value: 'example.org'
}, {
  name: 'countryName',
  value: 'US'
}, {
  shortName: 'ST',
  value: 'Virginia'
}, {
  name: 'localityName',
  value: 'Blacksburg'
}, {
  name: 'organizationName',
  value: 'Test'
}, {
  shortName: 'OU',
  value: 'Test'
}]);
// set (optional) attributes
csr.setAttributes([{
  name: 'challengePassword',
  value: 'password'
}, {
  name: 'unstructuredName',
  value: 'My Company, Inc.'
}, {
  name: 'extensionRequest',
  extensions: [{
    name: 'subjectAltName',
    altNames: [{
      // 2 is DNS type
      type: 2,
      value: 'test.domain.com'
    }, {
      type: 2,
      value: 'other.domain.com',
    }, {
      type: 2,
      value: 'www.domain.net'
    }]
  }]
}]);

// sign certification request
csr.sign(keys.privateKey);

// verify certification request
var verified = csr.verify();

// convert certification request to PEM-format
var pem = forge.pki.certificationRequestToPem(csr);

// convert a Forge certification request from PEM-format
var csr = forge.pki.certificationRequestFromPem(pem);

// get an attribute
csr.getAttribute({name: 'challengePassword'});

// get extensions array
csr.getAttribute({name: 'extensionRequest'}).extensions;

```

<a name="pkcs12" />

### PKCS#12

Provides the cryptographic archive file format from [PKCS#12][].

**Note for Chrome/Firefox/iOS/similar users**: If you have trouble importing
a PKCS#12 container, try using the TripleDES algorithm. It can be passed
to `forge.pkcs12.toPkcs12Asn1` using the `{algorithm: '3des'}` option.

__Examples__

```js
// decode p12 from base64
var p12Der = forge.util.decode64(p12b64);
// get p12 as ASN.1 object
var p12Asn1 = forge.asn1.fromDer(p12Der);
// decrypt p12 using the password 'password'
var p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'password');
// decrypt p12 using non-strict parsing mode (resolves some ASN.1 parse errors)
var p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, false, 'password');
// decrypt p12 using literally no password (eg: Mac OS X/apple push)
var p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1);
// decrypt p12 using an "empty" password (eg: OpenSSL with no password input)
var p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, '');
// p12.safeContents is an array of safe contents, each of
// which contains an array of safeBags

// get bags by friendlyName
var bags = p12.getBags({friendlyName: 'test'});
// bags are key'd by attribute type (here "friendlyName")
// and the key values are an array of matching objects
var cert = bags.friendlyName[0];

// get bags by localKeyId
var bags = p12.getBags({localKeyId: buffer});
// bags are key'd by attribute type (here "localKeyId")
// and the key values are an array of matching objects
var cert = bags.localKeyId[0];

// get bags by localKeyId (input in hex)
var bags = p12.getBags({localKeyIdHex: '7b59377ff142d0be4565e9ac3d396c01401cd879'});
// bags are key'd by attribute type (here "localKeyId", *not* "localKeyIdHex")
// and the key values are an array of matching objects
var cert = bags.localKeyId[0];

// get bags by type
var bags = p12.getBags({bagType: forge.pki.oids.certBag});
// bags are key'd by bagType and each bagType key's value
// is an array of matches (in this case, certificate objects)
var cert = bags[forge.pki.oids.certBag][0];

// get bags by friendlyName and filter on bag type
var bags = p12.getBags({
  friendlyName: 'test',
  bagType: forge.pki.oids.certBag
});

// get key bags
var bags = p12.getBags({bagType: forge.pki.oids.keyBag});
// get key
var bag = bags[forge.pki.oids.keyBag][0];
var key = bag.key;
// if the key is in a format unrecognized by forge then
// bag.key will be `null`, use bag.asn1 to get the ASN.1
// representation of the key
if(bag.key === null) {
  var keyAsn1 = bag.asn1;
  // can now convert back to DER/PEM/etc for export
}

// generate a p12 using AES (default)
var p12Asn1 = forge.pkcs12.toPkcs12Asn1(
  privateKey, certificateChain, 'password');

// generate a p12 that can be imported by Chrome/Firefox/iOS
// (requires the use of Triple DES instead of AES)
var p12Asn1 = forge.pkcs12.toPkcs12Asn1(
  privateKey, certificateChain, 'password',
  {algorithm: '3des'});

// base64-encode p12
var p12Der = forge.asn1.toDer(p12Asn1).getBytes();
var p12b64 = forge.util.encode64(p12Der);

// create download link for p12
var a = document.createElement('a');
a.download = 'example.p12';
a.setAttribute('href', 'data:application/x-pkcs12;base64,' + p12b64);
a.appendChild(document.createTextNode('Download'));
```

<a name="asn" />

### ASN.1

Provides [ASN.1][] DER encoding and decoding.

__Examples__

```js
var asn1 = forge.asn1;

// create a SubjectPublicKeyInfo
var subjectPublicKeyInfo =
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
    // AlgorithmIdentifier
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // algorithm
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
        asn1.oidToDer(pki.oids['rsaEncryption']).getBytes()),
      // parameters (null)
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
    ]),
    // subjectPublicKey
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [
      // RSAPublicKey
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // modulus (n)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
          _bnToBytes(key.n)),
        // publicExponent (e)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
          _bnToBytes(key.e))
      ])
    ])
  ]);

// serialize an ASN.1 object to DER format
var derBuffer = asn1.toDer(subjectPublicKeyInfo);

// deserialize to an ASN.1 object from a byte buffer filled with DER data
var object = asn1.fromDer(derBuffer);

// convert an OID dot-separated string to a byte buffer
var derOidBuffer = asn1.oidToDer('1.2.840.113549.1.1.5');

// convert a byte buffer with a DER-encoded OID to a dot-separated string
console.log(asn1.derToOid(derOidBuffer));
// output: 1.2.840.113549.1.1.5

// validates that an ASN.1 object matches a particular ASN.1 structure and
// captures data of interest from that structure for easy access
var publicKeyValidator = {
  name: 'SubjectPublicKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  captureAsn1: 'subjectPublicKeyInfo',
  value: [{
    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'publicKeyOid'
    }]
  }, {
    // subjectPublicKey
    name: 'SubjectPublicKeyInfo.subjectPublicKey',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.BITSTRING,
    constructed: false,
    value: [{
      // RSAPublicKey
      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      optional: true,
      captureAsn1: 'rsaPublicKey'
    }]
  }]
};

var capture = {};
var errors = [];
if(!asn1.validate(
  publicKeyValidator, subjectPublicKeyInfo, validator, capture, errors)) {
  throw 'ASN.1 object is not a SubjectPublicKeyInfo.';
}
// capture.subjectPublicKeyInfo contains the full ASN.1 object
// capture.rsaPublicKey contains the full ASN.1 object for the RSA public key
// capture.publicKeyOid only contains the value for the OID
var oid = asn1.derToOid(capture.publicKeyOid);
if(oid !== pki.oids['rsaEncryption']) {
  throw 'Unsupported OID.';
}

// pretty print an ASN.1 object to a string for debugging purposes
asn1.prettyPrint(object);
```

Message Digests
----------------

<a name="sha1" />

### SHA1

Provides [SHA-1][] message digests.

__Examples__

```js
var md = forge.md.sha1.create();
md.update('The quick brown fox jumps over the lazy dog');
console.log(md.digest().toHex());
// output: 2fd4e1c67a2d28fced849ee1bb76e7391b93eb12
```

<a name="sha256" />

### SHA256

Provides [SHA-256][] message digests.

__Examples__

```js
var md = forge.md.sha256.create();
md.update('The quick brown fox jumps over the lazy dog');
console.log(md.digest().toHex());
// output: d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592
```

<a name="sha384" />

### SHA384

Provides [SHA-384][] message digests.

__Examples__

```js
var md = forge.md.sha384.create();
md.update('The quick brown fox jumps over the lazy dog');
console.log(md.digest().toHex());
// output: ca737f1014a48f4c0b6dd43cb177b0afd9e5169367544c494011e3317dbf9a509cb1e5dc1e85a941bbee3d7f2afbc9b1
```

<a name="sha512" />

### SHA512

Provides [SHA-512][] message digests.

__Examples__

```js
// SHA-512
var md = forge.md.sha512.create();
md.update('The quick brown fox jumps over the lazy dog');
console.log(md.digest().toHex());
// output: 07e547d9586f6a73f73fbac0435ed76951218fb7d0c8d788a309d785436bbb642e93a252a954f23912547d1e8a3b5ed6e1bfd7097821233fa0538f3db854fee6

// SHA-512/224
var md = forge.md.sha512.sha224.create();
md.update('The quick brown fox jumps over the lazy dog');
console.log(md.digest().toHex());
// output: 944cd2847fb54558d4775db0485a50003111c8e5daa63fe722c6aa37

// SHA-512/256
var md = forge.md.sha512.sha256.create();
md.update('The quick brown fox jumps over the lazy dog');
console.log(md.digest().toHex());
// output: dd9d67b371519c339ed8dbd25af90e976a1eeefd4ad3d889005e532fc5bef04d
```

<a name="md5" />

### MD5

Provides [MD5][] message digests.

__Examples__

```js
var md = forge.md.md5.create();
md.update('The quick brown fox jumps over the lazy dog');
console.log(md.digest().toHex());
// output: 9e107d9d372bb6826bd81d3542a419d6
```

<a name="hmac" />

### HMAC

Provides [HMAC][] w/any supported message digest algorithm.

__Examples__

```js
var hmac = forge.hmac.create();
hmac.start('sha1', 'Jefe');
hmac.update('what do ya want for nothing?');
console.log(hmac.digest().toHex());
// output: effcdf6ae5eb2fa2d27416d5f184df9c259a7c79
```

Utilities
---------

<a name="prime" />

### Prime

Provides an API for generating large, random, probable primes.

__Examples__

```js
// generate a random prime on the main JS thread
var bits = 1024;
forge.prime.generateProbablePrime(bits, function(err, num) {
  console.log('random prime', num.toString(16));
});

// generate a random prime using Web Workers (if available, otherwise
// falls back to the main thread)
var bits = 1024;
var options = {
  algorithm: {
    name: 'PRIMEINC',
    workers: -1 // auto-optimize # of workers
  }
};
forge.prime.generateProbablePrime(bits, options, function(err, num) {
  console.log('random prime', num.toString(16));
});
```

<a name="prng" />

### PRNG

Provides a [Fortuna][]-based cryptographically-secure pseudo-random number
generator, to be used with a cryptographic function backend, e.g. [AES][]. An
implementation using [AES][] as a backend is provided. An API for collecting
entropy is given, though if window.crypto.getRandomValues is available, it will
be used automatically.

__Examples__

```js
// get some random bytes synchronously
var bytes = forge.random.getBytesSync(32);
console.log(forge.util.bytesToHex(bytes));

// get some random bytes asynchronously
forge.random.getBytes(32, function(err, bytes) {
  console.log(forge.util.bytesToHex(bytes));
});

// collect some entropy if you'd like
forge.random.collect(someRandomBytes);
jQuery().mousemove(function(e) {
  forge.random.collectInt(e.clientX, 16);
  forge.random.collectInt(e.clientY, 16);
});

// specify a seed file for use with the synchronous API if you'd like
forge.random.seedFileSync = function(needed) {
  // get 'needed' number of random bytes from somewhere
  return fetchedRandomBytes;
};

// specify a seed file for use with the asynchronous API if you'd like
forge.random.seedFile = function(needed, callback) {
  // get the 'needed' number of random bytes from somewhere
  callback(null, fetchedRandomBytes);
});

// register the main thread to send entropy or a Web Worker to receive
// entropy on demand from the main thread
forge.random.registerWorker(self);

// generate a new instance of a PRNG with no collected entropy
var myPrng = forge.random.createInstance();
```

<a name="task" />

### Tasks

Provides queuing and synchronizing tasks in a web application.

__Examples__

```js
// TODO
```

<a name="util" />

### Utilities

Provides utility functions, including byte buffer support, base64,
bytes to/from hex, zlib inflate/deflate, etc.

__Examples__

```js
// encode/decode base64
var encoded = forge.util.encode64(str);
var str = forge.util.decode64(encoded);

// encode/decode UTF-8
var encoded = forge.util.encodeUtf8(str);
var str = forge.util.decodeUtf8(encoded);

// bytes to/from hex
var bytes = forge.util.hexToBytes(hex);
var hex = forge.util.bytesToHex(bytes);

// create an empty byte buffer
var buffer = forge.util.createBuffer();
// create a byte buffer from raw binary bytes
var buffer = forge.util.createBuffer(input, 'raw');
// create a byte buffer from utf8 bytes
var buffer = forge.util.createBuffer(input, 'utf8');

// get the length of the buffer in bytes
buffer.length();
// put bytes into the buffer
buffer.putBytes(bytes);
// put a 32-bit integer into the buffer
buffer.putInt32(10);
// buffer to hex
buffer.toHex();
// get a copy of the bytes in the buffer
bytes.bytes(/* count */);
// empty this buffer and get its contents
bytes.getBytes(/* count */);

// convert a forge buffer into a Node.js Buffer
// make sure you specify the encoding as 'binary'
var forgeBuffer = forge.util.createBuffer();
var nodeBuffer = Buffer.from(forgeBuffer.getBytes(), 'binary');

// convert a Node.js Buffer into a forge buffer
// make sure you specify the encoding as 'binary'
var nodeBuffer = Buffer.from('CAFE', 'hex');
var forgeBuffer = forge.util.createBuffer(nodeBuffer.toString('binary'));
```

<a name="log" />

### Logging

Provides logging to a javascript console using various categories and
levels of verbosity.

__Examples__

```js
// TODO
```

<a name="flash" />

### Flash Networking Support

The [flash README](./flash/README.md) provides details on rebuilding the
optional Flash component used for networking. It also provides details on
Policy Server support.

Security Considerations
-----------------------

When using this code please keep the following in mind:

- Cryptography is hard. Please review and test this code before depending on it
  for critical functionality.
- The nature of JavaScript is that execution of this code depends on trusting a
  very large set of JavaScript tools and systems. Consider runtime variations,
  runtime characteristics, runtime optimization, code optimization, code
  minimization, code obfuscation, bundling tools, possible bugs, the Forge code
  itself, and so on.
- If using pre-built bundles from [NPM][], another CDN, or similar, be aware
  someone else ran the tools to create those files.
- Use a secure transport channel such as [TLS][] to load scripts and consider
  using additional security mechanisms such as [Subresource Integrity][] script
  attributes.
- Use "native" functionality where possible. This can be critical when dealing
  with performance and random number generation. Note that the JavaScript
  random number algorithms should perform well if given suitable entropy.
- Understand possible attacks against cryptographic systems. For instance side
  channel and timing attacks may be possible due to the difficulty in
  implementing constant time algorithms in pure JavaScript.
- Certain features in this library are less susceptible to attacks depending on
  usage. This primarily includes features that deal with data format
  manipulation or those that are not involved in communication.

Library Background
------------------

* https://digitalbazaar.com/2010/07/20/javascript-tls-1/
* https://digitalbazaar.com/2010/07/20/javascript-tls-2/

Contact
-------

* Code: https://github.com/digitalbazaar/forge
* Bugs: https://github.com/digitalbazaar/forge/issues
* Email: support@digitalbazaar.com
* IRC: [#forgejs][] on [Libera.Chat][] (people may also be on [freenode][] for
  historical reasons).

Donations
---------

Financial support is welcome and helps contribute to futher development:

* For [PayPal][] please send to paypal@digitalbazaar.com.
* Something else? Please contact support@digitalbazaar.com.

[#forgejs]: https://webchat.freenode.net/?channels=#forgejs
[0.6.x]: https://github.com/digitalbazaar/forge/tree/0.6.x
[3DES]: https://en.wikipedia.org/wiki/Triple_DES
[AES]: https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
[ASN.1]: https://en.wikipedia.org/wiki/ASN.1
[Browserify]: http://browserify.org/
[CBC]: https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation
[CFB]: https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation
[CTR]: https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation
[CommonJS]: https://en.wikipedia.org/wiki/CommonJS
[DES]: https://en.wikipedia.org/wiki/Data_Encryption_Standard
[ECB]: https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation
[Fortuna]: https://en.wikipedia.org/wiki/Fortuna_(PRNG)
[GCM]: https://en.wikipedia.org/wiki/GCM_mode
[HMAC]: https://en.wikipedia.org/wiki/HMAC
[JavaScript]: https://en.wikipedia.org/wiki/JavaScript
[Karma]: https://karma-runner.github.io/
[Libera.Chat]: https://libera.chat/
[MD5]: https://en.wikipedia.org/wiki/MD5
[NPM]: https://www.npmjs.com/
[Node.js]: https://nodejs.org/
[OFB]: https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation
[PKCS#10]: https://en.wikipedia.org/wiki/Certificate_signing_request
[PKCS#12]: https://en.wikipedia.org/wiki/PKCS_%E2%99%AF12
[PKCS#5]: https://en.wikipedia.org/wiki/PKCS
[PKCS#7]: https://en.wikipedia.org/wiki/Cryptographic_Message_Syntax
[PayPal]: https://www.paypal.com/
[RC2]: https://en.wikipedia.org/wiki/RC2
[SHA-1]: https://en.wikipedia.org/wiki/SHA-1
[SHA-256]: https://en.wikipedia.org/wiki/SHA-256
[SHA-384]: https://en.wikipedia.org/wiki/SHA-384
[SHA-512]: https://en.wikipedia.org/wiki/SHA-512
[Subresource Integrity]: https://www.w3.org/TR/SRI/
[TLS]: https://en.wikipedia.org/wiki/Transport_Layer_Security
[UMD]: https://github.com/umdjs/umd
[X.509]: https://en.wikipedia.org/wiki/X.509
[freenode]: https://freenode.net/
[unpkg]: https://unpkg.com/
[webpack]: https://webpack.github.io/
[TweetNaCl.js]: https://github.com/dchest/tweetnacl-js
// Copyright 2010-2012 Mikeal Rogers
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

'use strict'

var extend = require('extend')
var cookies = require('./lib/cookies')

// organize params for patch, post, put, head, del
function initParams (uri, options, callback) {
  if (typeof options === 'function') {
    callback = options
  }

  var params = {protocolVersion: 'http1'}

  if (options !== null && typeof options === 'object') {
    extend(params, options, {uri: uri})
  } else if (typeof uri === 'string') {
    extend(params, {uri: uri})
  } else {
    extend(params, uri)
  }

  params.callback = callback || params.callback

  // Disable http/2 when using custom agents that don't handle different versions separately
  if (params.agents && !(params.agents.http1 || params.agents.auto || params.agents.http2)) {
    params.protocolVersion = 'http1'
  }

  // Disable http/2 when using proxy or tunnels
  // TODO: Remove this when http2 supports proxy and tunneling
  if (params.tunnel || params.proxy) {
    params.protocolVersion = 'http1'
  }

  // Disable flow when running in browser
  if (typeof window !== 'undefined' && window.XMLHttpRequest) {
    params.protocolVersion = 'http1'
  }

  return params
}

function request (uri, options, callback) {
  if (typeof uri === 'undefined') {
    throw new Error('undefined is not a valid uri or options object.')
  }

  var params = initParams(uri, options, callback)

  return new request.Request(params)
}

function verbFunc (verb) {
  var method = verb.toUpperCase()
  return function (uri, options, callback) {
    var params = initParams(uri, options, callback)
    params.method = method
    return request(params, params.callback)
  }
}

// define like this to please codeintel/intellisense IDEs
request.get = verbFunc('get')
request.head = verbFunc('head')
request.options = verbFunc('options')
request.post = verbFunc('post')
request.put = verbFunc('put')
request.patch = verbFunc('patch')
request.del = verbFunc('delete')
request['delete'] = verbFunc('delete')

request.jar = function (store) {
  return cookies.jar(store)
}

request.cookie = function (str) {
  return cookies.parse(str)
}

function wrapRequestMethod (method, options, requester, verb) {
  return function (uri, opts, callback) {
    var params = initParams(uri, opts, callback)

    var target = {}
    extend(true, target, options, params)

    target.pool = params.pool || options.pool

    if (verb) {
      target.method = verb.toUpperCase()
    }

    if (typeof requester === 'function') {
      method = requester
    }

    return method(target, target.callback)
  }
}

request.defaults = function (options, requester) {
  var self = this

  options = options || {}

  if (typeof options === 'function') {
    requester = options
    options = {}
  }

  var defaults = wrapRequestMethod(self, options, requester)

  var verbs = ['get', 'head', 'post', 'put', 'patch', 'del', 'delete']
  verbs.forEach(function (verb) {
    defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb)
  })

  defaults.cookie = wrapRequestMethod(self.cookie, options, requester)
  defaults.jar = self.jar
  defaults.defaults = self.defaults
  return defaults
}

request.forever = function (agentOptions, optionsArg) {
  var options = {}
  if (optionsArg) {
    extend(options, optionsArg)
  }
  if (agentOptions) {
    options.agentOptions = agentOptions
  }

  options.forever = true
  return request.defaults(options)
}

// Exports

module.exports = request
request.Request = require('./request')
request.initParams = initParams

// Backwards compatibility for request.debug
Object.defineProperty(request, 'debug', {
  enumerable: true,
  get: function () {
    return request.Request.debug
  },
  set: function (debug) {
    request.Request.debug = debug
  }
})
'use strict'

var caseless = require('caseless')
var uuid = require('uuid').v4
var helpers = require('./helpers')

var md5 = helpers.md5
var toBase64 = helpers.toBase64

function Auth (request) {
  // define all public properties here
  this.request = request
  this.hasAuth = false
  this.sentAuth = false
  this.bearerToken = null
  this.user = null
  this.pass = null
}

Auth.prototype.basic = function (user, pass, sendImmediately) {
  var self = this
  if (typeof user !== 'string' || (pass !== undefined && typeof pass !== 'string')) {
    self.request.emit('error', new Error('auth() received invalid user or password'))
  }
  self.user = user
  self.pass = pass
  self.hasAuth = true
  var header = user + ':' + (pass || '')
  if (sendImmediately || typeof sendImmediately === 'undefined') {
    var authHeader = 'Basic ' + toBase64(header)
    self.sentAuth = true
    return authHeader
  }
}

Auth.prototype.bearer = function (bearer, sendImmediately) {
  var self = this
  self.bearerToken = bearer
  self.hasAuth = true
  if (sendImmediately || typeof sendImmediately === 'undefined') {
    if (typeof bearer === 'function') {
      bearer = bearer()
    }
    var authHeader = 'Bearer ' + (bearer || '')
    self.sentAuth = true
    return authHeader
  }
}

Auth.prototype.digest = function (method, path, authHeader) {
  // TODO: More complete implementation of RFC 2617.
  //   - handle challenge.domain
  //   - support qop="auth-int" only
  //   - handle Authentication-Info (not necessarily?)
  //   - check challenge.stale (not necessarily?)
  //   - increase nc (not necessarily?)
  // For reference:
  // http://tools.ietf.org/html/rfc2617#section-3
  // https://github.com/bagder/curl/blob/master/lib/http_digest.c

  var self = this

  var challenge = {}
  var re = /([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi
  while (true) {
    var match = re.exec(authHeader)
    if (!match) {
      break
    }
    challenge[match[1]] = match[2] || match[3]
  }

  /**
   * RFC 2617: handle both MD5 and MD5-sess algorithms.
   *
   * If the algorithm directive's value is "MD5" or unspecified, then HA1 is
   *   HA1=MD5(username:realm:password)
   * If the algorithm directive's value is "MD5-sess", then HA1 is
   *   HA1=MD5(MD5(username:realm:password):nonce:cnonce)
   */
  var ha1Compute = function (algorithm, user, realm, pass, nonce, cnonce) {
    var ha1 = md5(user + ':' + realm + ':' + pass)
    if (algorithm && algorithm.toLowerCase() === 'md5-sess') {
      return md5(ha1 + ':' + nonce + ':' + cnonce)
    } else {
      return ha1
    }
  }

  var qop = /(^|,)\s*auth\s*($|,)/.test(challenge.qop) && 'auth'
  var nc = qop && '00000001'
  var cnonce = qop && uuid().replace(/-/g, '')
  var ha1 = ha1Compute(challenge.algorithm, self.user, challenge.realm, self.pass, challenge.nonce, cnonce)
  var ha2 = md5(method + ':' + path)
  var digestResponse = qop
    ? md5(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2)
    : md5(ha1 + ':' + challenge.nonce + ':' + ha2)
  var authValues = {
    username: self.user,
    realm: challenge.realm,
    nonce: challenge.nonce,
    uri: path,
    qop: qop,
    response: digestResponse,
    nc: nc,
    cnonce: cnonce,
    algorithm: challenge.algorithm,
    opaque: challenge.opaque
  }

  authHeader = []
  for (var k in authValues) {
    if (authValues[k]) {
      if (k === 'qop' || k === 'nc' || k === 'algorithm') {
        authHeader.push(k + '=' + authValues[k])
      } else {
        authHeader.push(k + '="' + authValues[k] + '"')
      }
    }
  }
  authHeader = 'Digest ' + authHeader.join(', ')
  self.sentAuth = true
  return authHeader
}

Auth.prototype.onRequest = function (user, pass, sendImmediately, bearer) {
  var self = this
  var request = self.request

  var authHeader
  if (bearer === undefined && user === undefined) {
    self.request.emit('error', new Error('no auth mechanism defined'))
  } else if (bearer !== undefined) {
    authHeader = self.bearer(bearer, sendImmediately)
  } else {
    authHeader = self.basic(user, pass, sendImmediately)
  }
  if (authHeader) {
    request.setHeader('Authorization', authHeader)
  }
}

Auth.prototype.onResponse = function (response) {
  var self = this
  var request = self.request

  if (!self.hasAuth || self.sentAuth) { return null }

  var c = caseless(response.headers)

  var authHeader = c.get('www-authenticate')
  var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase()
  request.debug('reauth', authVerb)

  switch (authVerb) {
    case 'basic':
      return self.basic(self.user, self.pass, true)

    case 'bearer':
      return self.bearer(self.bearerToken, true)

    case 'digest':
      return self.digest(request.method, request.path, authHeader)
  }
}

exports.Auth = Auth
const { Agent: Http2Agent } = require('../http2')
const https = require('https')
const tls = require('tls')
const { EventEmitter } = require('events')
const net = require('net')
const { getName: getSocketName } = require('../autohttp/requestName')

// All valid options defined at https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids
const supportedProtocols = ['h2', 'http/1.1', 'http/1.0', 'http/0.9']

// Referenced from https://github.com/nodejs/node/blob/0bf200b49a9a6eacdea6d5e5939cc2466506d532/lib/_http_agent.js#L350
function calculateServerName (options) {
  let servername = options.host || ''
  const hostHeader = options.headers && options.headers.host

  if (hostHeader) {
    if (typeof hostHeader !== 'string') {
      throw new TypeError(
        'host header content must be a string, received' + hostHeader
      )
    }

    // abc => abc
    // abc:123 => abc
    // [::1] => ::1
    // [::1]:123 => ::1
    if (hostHeader.startsWith('[')) {
      const index = hostHeader.indexOf(']')
      if (index === -1) {
        // Leading '[', but no ']'. Need to do something...
        servername = hostHeader
      } else {
        servername = hostHeader.substring(1, index)
      }
    } else {
      servername = hostHeader.split(':', 1)[0]
    }
  }
  // Don't implicitly set invalid (IP) servernames.
  if (net.isIP(servername)) servername = ''
  return servername
}

class AutoHttp2Agent extends EventEmitter {
  constructor (options) {
    super()
    this.http2Agent = new Http2Agent(options)
    this.httpsAgent = new https.Agent(options)
    this.ALPNCache = new Map()
    this.options = options
    this.defaultPort = 443
  }

  createConnection (
    req,
    reqOptions,
    cb,
    socketCb
  ) {
    const options = {
      ...reqOptions,
      ...this.options,
      port: Number(reqOptions.port || this.options.port || this.defaultPort),
      host: reqOptions.hostname || reqOptions.host || 'localhost'
    }

    // check if ALPN is cached
    const name = getSocketName(options)
    const [protocol, cachedSocket] = this.ALPNCache.get(name) || []

    if (!protocol || !cachedSocket || cachedSocket.closed || cachedSocket.destroyed) {
      // No cache exists or the initial socket used to establish the connection has been closed. Perform ALPN again.
      this.ALPNCache.delete(name)
      this.createNewSocketConnection(req, options, cb, socketCb)
      return
    }

    // No need to pass the cachedSocket since the respective protocol's agents will reuse the socket that was initially
    // passed during ALPN Negotiation
    if (protocol === 'h2') {
      const http2Options = {
        ...options,
        path: options.socketPath
      }

      let connection
      try {
        const uri = options.uri
        connection = this.http2Agent.createConnection(req, uri, http2Options)
      } catch (e) {
        cb(e)
        connection && connection.socket && socketCb(connection.socket)
        return
      }

      cb(null, 'http2', connection)
      socketCb(connection.socket)

      return
    }

    const http1RequestOptions = {
      ...options,
      agent: this.httpsAgent
    }

    let request
    try {
      request = https.request(http1RequestOptions)
    } catch (e) {
      cb(e)
      return
    }

    request.on('socket', (socket) => socketCb(socket))
    cb(null, 'http1', request)
  }

  createNewSocketConnection (req, options, cb, socketCb) {
    const uri = options.uri
    const name = getSocketName(options)

    const socket = tls.connect({
      ...options,
      path: options.socketPath,
      ALPNProtocols: supportedProtocols,
      servername: options.servername || calculateServerName(options)
    })
    socketCb(socket)

    const socketConnectionErrorHandler = (e) => {
      cb(e)
    }
    socket.on('error', socketConnectionErrorHandler)

    socket.once('secureConnect', () => {
      socket.removeListener('error', socketConnectionErrorHandler)

      const protocol = socket.alpnProtocol || 'http/1.1'

      if (!supportedProtocols.includes(protocol)) {
        cb(new Error('Unknown protocol' + protocol))
        return
      }

      // Update the cache
      this.ALPNCache.set(name, [protocol, socket])

      socket.once('close', () => {
        // Clean the cache when the socket closes
        this.ALPNCache.delete(name)
      })

      if (protocol === 'h2') {
        const http2Options = {
          ...options,
          path: options.socketPath
        }
        try {
          const connection = this.http2Agent.createConnection(
            req,
            uri,
            http2Options,
            socket
          )
          cb(null, 'http2', connection)
        } catch (e) {
          cb(e)
        }
        return
      }

      // Protocol is http1, using the built in agent
      // We need to release all free sockets so that new connection is created using the overridden createconnection
      // forcing the agent to reuse the socket used for alpn

      // This reassignment works, since all code so far is sync, and happens in the same tick, hence there will be no
      // race conditions
      const oldCreateConnection = this.httpsAgent.createConnection

      this.httpsAgent.createConnection = () => {
        return socket
      }

      const http1RequestOptions = {
        ...options,
        agent: this.httpsAgent
      }
      let request
      try {
        request = https.request(http1RequestOptions)
      } catch (e) {
        cb(e)
        return
      } finally {
        this.httpsAgent.createConnection = oldCreateConnection
      }
      cb(null, 'http1', request)
    })
  }
}

module.exports = {
  AutoHttp2Agent,
  globalAgent: new AutoHttp2Agent({})
}
const {constants = {}} = require('http2')

// Referenced from https://github.com/nodejs/node/blob/0bf200b49a9a6eacdea6d5e5939cc2466506d532/lib/internal/http2/util.js#L107
const kValidPseudoHeaders = new Set([
  constants.HTTP2_HEADER_STATUS,
  constants.HTTP2_HEADER_METHOD,
  constants.HTTP2_HEADER_AUTHORITY,
  constants.HTTP2_HEADER_SCHEME,
  constants.HTTP2_HEADER_PATH
])

// Referenced from https://github.com/nodejs/node/blob/0bf200b49a9a6eacdea6d5e5939cc2466506d532/lib/internal/http2/util.js#L573
function assertValidPseudoHeader (header) {
  if (!kValidPseudoHeaders.has(header)) {
    throw new Error('Invalid PseudoHeader ' + header)
  }
}

// Referenced from https://github.com/nodejs/node/blob/0bf200b49a9a6eacdea6d5e5939cc2466506d532/lib/_http_common.js#L206
const tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/
function checkIsHttpToken (token) {
  return RegExp(tokenRegExp).exec(token) !== null
}

// Referenced from https://github.com/nodejs/node/blob/0bf200b49a9a6eacdea6d5e5939cc2466506d532/lib/internal/http2/core.js#L1763
function validateRequestHeaders (headers) {
  if (headers !== null && headers !== undefined) {
    const keys = Object.keys(headers)
    for (let i = 0; i < keys.length; i++) {
      const header = keys[i]
      if (header[0] === ':') {
        assertValidPseudoHeader(header)
      } else if (header && !checkIsHttpToken(header)) { throw new Error('Invalid HTTP Token: Header name' + header) }
    }
  }
}

module.exports = {
  validateRequestHeaders
}
const { AutoHttp2Agent, globalAgent } = require('./agent')
const { request } = require('./request')

module.exports = {
  Agent: AutoHttp2Agent,
  request,
  globalAgent
}
const { EventEmitter } = require('events')
const { Http2Request: HTTP2Request } = require('../../lib/http2/request')
const { globalAgent } = require('./agent')
const { validateRequestHeaders } = require('./headerValidations')

const kJobs = Symbol('kJobs')

class MultiProtocolRequest extends EventEmitter {
  constructor (options) {
    super()
    this[kJobs] = []
    this.options = options
    this.options.host = options.hostname || options.host || 'localhost'

    const agent = options.agent || globalAgent
    // Request agent to perform alpn and return either an http agent or https agent
    // Pass the request to the agent, the agent then calls the callback with http or http2 argument based on the result
    // of alpn negotiation
    agent.createConnection(this, options, (err, proto, req) => {
      if (err) {
        this.emit('error', err)
        return
      }
      if (proto === 'http2') {
        this.onHttp2(req)
      }
      if (proto === 'http1') {
        this.onHttp(req)
      }
    }, (socket) => {
      // Need to register callback after this tick, after the on socket handlers have been registered.
      // Node also does something similar when emitting the socket event.
      process.nextTick(() => this.emit('socket', socket))
      this.socket = socket
    })
  }

  onHttp2 (connection) {
    const options = {
      ...this.options,
      agent: {
        createConnection: () => connection
      }
    }

    let req
    try {
      req = new HTTP2Request(options)
    } catch (e) {
      this.emit('error', e)
      return
    }
    this.registerCallbacks(req)
    this._req = req
    this.processQueuedOpens()
  }

  onHttp (req) {
    this.registerCallbacks(req)
    this._req = req
    this.processQueuedOpens()
  }

  registerCallbacks (ob) {
    ob.on('drain', (...args) => this.emit('drain', ...args))
    ob.on('end', (...args) => this.emit('end', ...args))
    ob.on('close', (...args) => this.emit('close', ...args))
    ob.on('response', (...args) => this.emit('response', ...args))
    ob.on('error', (...args) => this.emit('error', ...args))
  }

  processQueuedOpens () {
    this[kJobs].forEach((action) => {
      action()
    })
    this[kJobs] = []
  }

  write (data) {
    const action = () => this._req.write(data)
    if (this._req) {
      action()
      return true
    }
    this[kJobs].push(action)
    return true
  }

  end (data) {
    const action = () => {
      this._req.end(data)
    }
    if (this._req) {
      action()
      return this
    }
    this[kJobs].push(action)
    return this
  }

  setDefaultEncoding (encoding) {
    const action = () => this._req.setDefaultEncoding(encoding)
    if (this._req) {
      action()
      return this
    }

    this[kJobs].push(action)
    return this
  }

  get _header () {
    if (this._req && this._req._header) {
      return this._req._header
    }
    return new Promise((resolve) => {
      const action = () => resolve(this._req._header)
      this[kJobs].push(action)
    })
  }

  pipe (destination, options) {
    const action = () => this._req.pipe(destination, options)
    if (this._req) {
      action()
      return destination
    }
    this[kJobs].push(action)
    return destination
  }

  setTimeout (timeout, callback) {
    const action = () => this._req.setTimeout(timeout, callback)
    if (this._req) {
      action()
      return this
    }
    this[kJobs].push(action)
    return this
  }

  abort () {
    const action = () => this._req.abort()
    if (this._req) {
      action()
      return this
    }
    this[kJobs].push(action)
    return this
  }

  setHeader (name, value) {
    const action = () => this._req.setHeader(name, value)
    if (this._req) {
      action()
      return this
    }
    this[kJobs].push(action)
    return this
  }

  removeHeader (name) {
    const action = () => this._req.removeHeader(name)
    if (this._req) {
      action()
      return this
    }
    this[kJobs].push(action)
    return this
  }
}

function request (options) {
  // request was received here, that means protocol is auto, that means priority order is http2, http
  // There can be 2 cases

  // 1. We have performed ALPN negotiation before for this host/port with the same agent options
  // 2. We need to perform ALPN negotiation, add the socket used to perform negotiation to the appropriate agent
  // 2.1 Add the agent to the pool if it didn't already exist

  // HTTP/2 internal implementation sucks. In case of an invalid HTTP/2 header, it destroys the entire session and
  // emits an error asynchronously, instead of throwing it synchronously. Hence, it makes more sense to perform all
  // validations before sending the request.
  validateRequestHeaders(options.headers)

  return new MultiProtocolRequest(options)
}

module.exports = {
  request,
  MultiProtocolRequest
}
/*
   * This function has been referenced from Node.js HTTPS Agent implementation
   * Ref: v20.15.0 https://github.com/nodejs/node/blob/6bf148e12b00a3ec596f4c123ec35445a48ab209/lib/https.js
   */
function getName (options) {
  let name = options.host || 'localhost'

  name += ':'
  if (options.port) { name += options.port }

  name += ':'
  if (options.localAddress) { name += options.localAddress }
  if (options.socketPath) { name += `:${options.socketPath}` }

  name += ':'
  if (options.ca) { name += options.ca }

  name += ':'
  if (options.extraCA) { name += options.extraCA }

  name += ':'
  if (options.cert) { name += options.cert }

  name += ':'
  if (options.clientCertEngine) { name += options.clientCertEngine }

  name += ':'
  if (options.ciphers) { name += options.ciphers }

  name += ':'
  if (options.key) { name += options.key }

  name += ':'
  if (options.pfx) { name += options.pfx }

  name += ':'
  if (options.rejectUnauthorized !== undefined) { name += options.rejectUnauthorized }

  name += ':'
  if (options.servername && options.servername !== options.host) { name += options.servername }

  name += ':'
  if (options.minVersion) { name += options.minVersion }

  name += ':'
  if (options.maxVersion) { name += options.maxVersion }

  name += ':'
  if (options.secureProtocol) { name += options.secureProtocol }

  name += ':'
  if (options.crl) { name += options.crl }

  name += ':'
  if (options.honorCipherOrder !== undefined) { name += options.honorCipherOrder }

  name += ':'
  if (options.ecdhCurve) { name += options.ecdhCurve }

  name += ':'
  if (options.dhparam) { name += options.dhparam }

  name += ':'
  if (options.secureOptions !== undefined) { name += options.secureOptions }

  name += ':'
  if (options.sessionIdContext) { name += options.sessionIdContext }

  name += ':'
  if (options.sigalgs) { name += JSON.stringify(options.sigalgs) }

  name += ':'
  if (options.privateKeyIdentifier) { name += options.privateKeyIdentifier }

  name += ':'
  if (options.privateKeyEngine) { name += options.privateKeyEngine }

    // Create new connection since previous connection cannot be reused since it will not emit secureConnect event which will not set the session data
  name += ':' + Boolean(options.verbose)

  return name
}

module.exports = {
  getName
}
'use strict'

var tough = require('@postman/tough-cookie')

var Cookie = tough.Cookie
var CookieJar = tough.CookieJar

exports.parse = function (str) {
  if (str && str.uri) {
    str = str.uri
  }
  if (typeof str !== 'string') {
    throw new Error('The cookie function only accepts STRING as param')
  }
  return Cookie.parse(str, {loose: true})
}

exports.jar = function (store) {
  return new CookieJar(store, {looseMode: true})
}
'use strict'

function formatHostname (hostname) {
  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'
  return hostname.replace(/^\.*/, '.').toLowerCase()
}

function parseNoProxyZone (zone) {
  zone = zone.trim().toLowerCase()

  var zoneParts = zone.split(':', 2)
  var zoneHost = formatHostname(zoneParts[0])
  var zonePort = zoneParts[1]
  var hasPort = zone.indexOf(':') > -1

  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}
}

function uriInNoProxy (uri, noProxy) {
  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')
  var hostname = formatHostname(uri.hostname)
  var noProxyList = noProxy.split(',')

  // iterate through the noProxyList until it finds a match.
  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {
    var isMatchedAt = hostname.indexOf(noProxyZone.hostname)
    var hostnameMatched = (
      isMatchedAt > -1 &&
        (isMatchedAt === hostname.length - noProxyZone.hostname.length)
    )

    if (noProxyZone.hasPort) {
      return (port === noProxyZone.port) && hostnameMatched
    }

    return hostnameMatched
  })
}

function getProxyFromURI (uri) {
  // Decide the proper request proxy to use based on the request URI object and the
  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)
  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)

  var noProxy = process.env.NO_PROXY || process.env.no_proxy || ''

  // if the noProxy is a wildcard then return null

  if (noProxy === '*') {
    return null
  }

  // if the noProxy is not empty and the uri is found return null

  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {
    return null
  }

  // Check for HTTP or HTTPS Proxy in environment Else default to null

  if (uri.protocol === 'http:') {
    return process.env.HTTP_PROXY ||
      process.env.http_proxy || null
  }

  if (uri.protocol === 'https:') {
    return process.env.HTTPS_PROXY ||
      process.env.https_proxy ||
      process.env.HTTP_PROXY ||
      process.env.http_proxy || null
  }

  // if none of that works, return null
  // (What uri protocol are you using then?)

  return null
}

module.exports = getProxyFromURI
'use strict'

var fs = require('fs')
var qs = require('querystring')
var extend = require('extend')

function Har (request) {
  this.request = request
}

Har.prototype.reducer = function (obj, pair) {
  // new property ?
  if (obj[pair.name] === undefined) {
    obj[pair.name] = pair.value
    return obj
  }

  // existing? convert to array
  var arr = [
    obj[pair.name],
    pair.value
  ]

  obj[pair.name] = arr

  return obj
}

Har.prototype.prep = function (data) {
  // construct utility properties
  data.queryObj = {}
  data.headersObj = {}
  data.postData.jsonObj = false
  data.postData.paramsObj = false

  // construct query objects
  if (data.queryString && data.queryString.length) {
    data.queryObj = data.queryString.reduce(this.reducer, {})
  }

  // construct headers objects
  if (data.headers && data.headers.length) {
    // loweCase header keys
    data.headersObj = data.headers.reduceRight(function (headers, header) {
      headers[header.name] = header.value
      return headers
    }, {})
  }

  // construct Cookie header
  if (data.cookies && data.cookies.length) {
    var cookies = data.cookies.map(function (cookie) {
      return cookie.name + '=' + cookie.value
    })

    if (cookies.length) {
      data.headersObj.cookie = cookies.join('; ')
    }
  }

  // prep body
  function some (arr) {
    return arr.some(function (type) {
      return data.postData.mimeType.indexOf(type) === 0
    })
  }

  if (some([
    'multipart/mixed',
    'multipart/related',
    'multipart/form-data',
    'multipart/alternative'])) {
    // reset values
    data.postData.mimeType = 'multipart/form-data'
  } else if (some([
    'application/x-www-form-urlencoded'])) {
    if (!data.postData.params) {
      data.postData.text = ''
    } else {
      data.postData.paramsObj = data.postData.params.reduce(this.reducer, {})

      // always overwrite
      data.postData.text = qs.stringify(data.postData.paramsObj)
    }
  } else if (some([
    'text/json',
    'text/x-json',
    'application/json',
    'application/x-json'])) {
    data.postData.mimeType = 'application/json'

    if (data.postData.text) {
      try {
        data.postData.jsonObj = JSON.parse(data.postData.text)
      } catch (e) {
        this.request.debug(e)

        // force back to text/plain
        data.postData.mimeType = 'text/plain'
      }
    }
  }

  return data
}

Har.prototype.options = function (options) {
  // skip if no har property defined
  if (!options.har) {
    return options
  }

  var har = {}
  extend(har, options.har)

  // only process the first entry
  if (har.log && har.log.entries) {
    har = har.log.entries[0]
  }

  // add optional properties to make validation successful
  har.url = har.url || options.url || options.uri || options.baseUrl || '/'
  har.httpVersion = har.httpVersion || 'HTTP/1.1'
  har.queryString = har.queryString || []
  har.headers = har.headers || []
  har.cookies = har.cookies || []
  har.postData = har.postData || {}
  har.postData.mimeType = har.postData.mimeType || 'application/octet-stream'

  har.bodySize = 0
  har.headersSize = 0
  har.postData.size = 0

  // clean up and get some utility properties
  var req = this.prep(har)

  // construct new options
  if (req.url) {
    options.url = req.url
  }

  if (req.method) {
    options.method = req.method
  }

  if (Object.keys(req.queryObj).length) {
    options.qs = req.queryObj
  }

  if (Object.keys(req.headersObj).length) {
    options.headers = req.headersObj
  }

  function test (type) {
    return req.postData.mimeType.indexOf(type) === 0
  }
  if (test('application/x-www-form-urlencoded')) {
    options.form = req.postData.paramsObj
  } else if (test('application/json')) {
    if (req.postData.jsonObj) {
      options.body = req.postData.jsonObj
      options.json = true
    }
  } else if (test('multipart/form-data')) {
    options.formData = {}

    req.postData.params.forEach(function (param) {
      var attachment = {}

      if (!param.fileName && !param.contentType) {
        options.formData[param.name] = param.value
        return
      }

      // attempt to read from disk!
      if (param.fileName && !param.value) {
        attachment.value = fs.createReadStream(param.fileName)
      } else if (param.value) {
        attachment.value = param.value
      }

      if (param.fileName) {
        attachment.options = {
          filename: param.fileName,
          contentType: param.contentType ? param.contentType : null
        }
      }

      options.formData[param.name] = attachment
    })
  } else {
    if (req.postData.text) {
      options.body = req.postData.text
    }
  }

  return options
}

exports.Har = Har
'use strict'

var crypto = require('crypto')

function randomString (size) {
  var bits = (size + 1) * 6
  var buffer = crypto.randomBytes(Math.ceil(bits / 8))
  var string = buffer.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '')
  return string.slice(0, size)
}

function calculatePayloadHash (payload, algorithm, contentType) {
  var hash = crypto.createHash(algorithm)
  hash.update('hawk.1.payload\n')
  hash.update((contentType ? contentType.split(';')[0].trim().toLowerCase() : '') + '\n')
  hash.update(payload || '')
  hash.update('\n')
  return hash.digest('base64')
}

exports.calculateMac = function (credentials, opts) {
  var normalized = 'hawk.1.header\n' +
    opts.ts + '\n' +
    opts.nonce + '\n' +
    (opts.method || '').toUpperCase() + '\n' +
    opts.resource + '\n' +
    opts.host.toLowerCase() + '\n' +
    opts.port + '\n' +
    (opts.hash || '') + '\n'

  if (opts.ext) {
    normalized = normalized + opts.ext.replace('\\', '\\\\').replace('\n', '\\n')
  }

  normalized = normalized + '\n'

  if (opts.app) {
    normalized = normalized + opts.app + '\n' + (opts.dlg || '') + '\n'
  }

  var hmac = crypto.createHmac(credentials.algorithm, credentials.key).update(normalized)
  var digest = hmac.digest('base64')
  return digest
}

exports.header = function (uri, method, opts) {
  var timestamp = opts.timestamp || Math.floor((Date.now() + (opts.localtimeOffsetMsec || 0)) / 1000)
  var credentials = opts.credentials
  if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {
    return ''
  }

  if (['sha1', 'sha256'].indexOf(credentials.algorithm) === -1) {
    return ''
  }

  var artifacts = {
    ts: timestamp,
    nonce: opts.nonce || randomString(6),
    method: method,
    resource: uri.pathname + (uri.search || ''),
    host: uri.hostname,
    port: uri.port || (uri.protocol === 'http:' ? 80 : 443),
    hash: opts.hash,
    ext: opts.ext,
    app: opts.app,
    dlg: opts.dlg
  }

  if (!artifacts.hash && (opts.payload || opts.payload === '')) {
    artifacts.hash = calculatePayloadHash(opts.payload, credentials.algorithm, opts.contentType)
  }

  var mac = exports.calculateMac(credentials, artifacts)

  var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== ''
  var header = 'Hawk id="' + credentials.id +
    '", ts="' + artifacts.ts +
    '", nonce="' + artifacts.nonce +
    (artifacts.hash ? '", hash="' + artifacts.hash : '') +
    (hasExt ? '", ext="' + artifacts.ext.replace(/\\/g, '\\\\').replace(/"/g, '\\"') : '') +
    '", mac="' + mac + '"'

  if (artifacts.app) {
    header = header + ', app="' + artifacts.app + (artifacts.dlg ? '", dlg="' + artifacts.dlg : '') + '"'
  }

  return header
}
'use strict'

var jsonSafeStringify = require('json-stringify-safe')
var crypto = require('crypto')
var Buffer = require('safe-buffer').Buffer
var { Transform } = require('stream')

var defer = typeof setImmediate === 'undefined'
  ? process.nextTick
  : setImmediate

// Reference: https://github.com/postmanlabs/postman-request/pull/23
//
// function paramsHaveRequestBody (params) {
//   return (
//     params.body ||
//     params.requestBodyStream ||
//     (params.json && typeof params.json !== 'boolean') ||
//     params.multipart
//   )
// }

function safeStringify (obj, replacer) {
  var ret
  try {
    ret = JSON.stringify(obj, replacer)
  } catch (e) {
    ret = jsonSafeStringify(obj, replacer)
  }
  return ret
}

function md5 (str) {
  return crypto.createHash('md5').update(str).digest('hex')
}

function isReadStream (rs) {
  return rs.readable && rs.path && rs.mode
}

function toBase64 (str) {
  return Buffer.from(str || '', 'utf8').toString('base64')
}

function copy (obj) {
  var o = {}
  Object.keys(obj).forEach(function (i) {
    o[i] = obj[i]
  })
  return o
}

function version () {
  var numbers = process.version.replace('v', '').split('.')
  return {
    major: parseInt(numbers[0], 10),
    minor: parseInt(numbers[1], 10),
    patch: parseInt(numbers[2], 10)
  }
}

function now () {
  return performance.now(); // eslint-disable-line
}

class SizeTrackerStream extends Transform {
  constructor (options) {
    super(options)
    this.size = 0
  }

  _transform (chunk, encoding, callback) {
    this.size += chunk.length
    this.push(chunk)
    callback()
  }

  _flush (callback) {
    callback()
  }
}

exports.safeStringify = safeStringify
exports.md5 = md5
exports.isReadStream = isReadStream
exports.toBase64 = toBase64
exports.copy = copy
exports.version = version
exports.defer = defer
exports.SizeTrackerStream = SizeTrackerStream
exports.now = now
const { EventEmitter } = require('events')
const http2 = require('http2')
const { getName: getConnectionName } = require('../autohttp/requestName')

class Http2Agent extends EventEmitter {
  constructor (options) {
    super()
    this.options = options
    this.connections = {}
  }

  createConnection (req, uri, options, socket) {
    const _options = {
      ...options,
      ...this.options
    }

    const name = getConnectionName(_options)
    let connection = this.connections[name]

    // Force create a new connection if the connection is destroyed or closed or a new socket object is supplied
    if (!connection || connection.destroyed || connection.closed || socket) {
      const connectionOptions = {
        ..._options,
        port: _options.port || 443,
        settings: {
          enablePush: false
        }
      }

      // check if a socket is supplied
      if (socket) {
        connectionOptions.createConnection = () => socket
      }

      connection = http2.connect(uri, connectionOptions)
      // Connection is created in an unreferenced state and is referenced when a stream is created
      // This is to prevent the connection from keeping the event loop alive
      connection.unref()

      // Counting semaphore, but since node is single-threaded, this is just a counter
      // Multiple streams can be active on a connection
      // Each stream refs the connection at the start, and unrefs it on end
      // The connection should terminate if no streams are active on it
      // Could be refactored into something prettier
      const oldRef = connection.ref
      const oldUnref = connection.unref

      const timeoutHandler = () => {
        delete connectionsMap[name]
        connection.close()
      }

      connection.refCount = 0
      connection.ref = function () {
        this.refCount++
        oldRef.call(this)
        connection.off('timeout', timeoutHandler)
        connection.setTimeout(0)
      }
      const connectionsMap = this.connections
      connection.unref = function () {
        this.refCount--
        if (this.refCount === 0) {
          oldUnref.call(this)
          if (_options.timeout) {
            connection.setTimeout(_options.timeout, timeoutHandler)
          }
        }
      }

      // Add a default error listener to HTTP2 session object to transparently swallow errors incase no streams are active
      // Remove the connection from the connections map if the connection has errored out
      connection.on('error', () => {
        delete this.connections[name]
      })

      connection.once('close', () => {
        delete this.connections[name]
      })

      this.connections[name] = connection
    }

    return connection
  }
}

module.exports = {
  Http2Agent,
  globalAgent: new Http2Agent({})
}
const { Http2Agent, globalAgent } = require('./agent')
const { request } = require('./request')

module.exports = {
  Agent: Http2Agent,
  request,
  globalAgent
}
const url = require('url')
const http2 = require('http2')
const { EventEmitter } = require('events')
const { globalAgent } = require('./agent')
const { validateRequestHeaders } = require('../autohttp/headerValidations')

const kHeadersFlushed = Symbol('kHeadersFlushed')
// Connection headers that should not be set by the user. Ref; https://datatracker.ietf.org/doc/html/rfc9113#name-connection-specific-header-
const connectionHeaders = ['connection', 'host', 'proxy-connection', 'keep-alive', 'transfer-encoding', 'upgrade']

// HTTP/2 error codes. Moving to a separate variable to prevent browser builds from breaking
const http2Constants = http2.constants || {}
const rstErrorCodesMap = {
  [http2Constants.NGHTTP2_NO_ERROR]: 'NGHTTP2_NO_ERROR',
  [http2Constants.NGHTTP2_PROTOCOL_ERROR]: 'NGHTTP2_PROTOCOL_ERROR',
  [http2Constants.NGHTTP2_INTERNAL_ERROR]: 'NGHTTP2_INTERNAL_ERROR',
  [http2Constants.NGHTTP2_FLOW_CONTROL_ERROR]: 'NGHTTP2_FLOW_CONTROL_ERROR',
  [http2Constants.NGHTTP2_SETTINGS_TIMEOUT]: 'NGHTTP2_SETTINGS_TIMEOUT',
  [http2Constants.NGHTTP2_STREAM_CLOSED]: 'NGHTTP2_STREAM_CLOSED',
  [http2Constants.NGHTTP2_FRAME_SIZE_ERROR]: 'NGHTTP2_FRAME_SIZE_ERROR',
  [http2Constants.NGHTTP2_REFUSED_STREAM]: 'NGHTTP2_REFUSED_STREAM',
  [http2Constants.NGHTTP2_CANCEL]: 'NGHTTP2_CANCEL',
  [http2Constants.NGHTTP2_COMPRESSION_ERROR]: 'NGHTTP2_COMPRESSION_ERROR',
  [http2Constants.NGHTTP2_CONNECT_ERROR]: 'NGHTTP2_CONNECT_ERROR',
  [http2Constants.NGHTTP2_ENHANCE_YOUR_CALM]: 'NGHTTP2_ENHANCE_YOUR_CALM',
  [http2Constants.NGHTTP2_INADEQUATE_SECURITY]: 'NGHTTP2_INADEQUATE_SECURITY',
  [http2Constants.NGHTTP2_HTTP_1_1_REQUIRED]: 'NGHTTP2_HTTP_1_1_REQUIRED'
}

function httpOptionsToUri (options) {
  return url.format({
    protocol: 'https',
    host: options.host || 'localhost'
  })
}

class Http2Request extends EventEmitter {
  constructor (options) {
    super()
    this.onError = this.onError.bind(this)
    this.onDrain = this.onDrain.bind(this)
    this.onClose = this.onClose.bind(this)
    this.onResponse = this.onResponse.bind(this)
    this.onEnd = this.onEnd.bind(this)
    this.onTimeout = this.onTimeout.bind(this)

    this.registerListeners = this.registerListeners.bind(this)
    this._flushHeaders = this._flushHeaders.bind(this)
    this[kHeadersFlushed] = false

    const uri = httpOptionsToUri(options)
    const _options = {
      ...options,
      port: Number(options.port || 443),
      path: undefined,
      host: options.hostname || options.host || 'localhost'
    }

    if (options.socketPath) {
      _options.path = options.socketPath
    }

    const agent = options.agent || globalAgent

    this._client = agent.createConnection(this, uri, _options)

    const headers = options.headers || {}

    this.requestHeaders = {
      ...headers,
      [http2.constants.HTTP2_HEADER_PATH]: options.path || '/',
      [http2.constants.HTTP2_HEADER_METHOD]: _options.method,
      [http2.constants.HTTP2_HEADER_AUTHORITY]: _options.host + (_options.port !== 443 ? ':' + options.port : '')
    }

    if (options.uri.isUnix || headers['host'] === 'unix' || _options.host === 'unix') {
      // The authority field needs to be set to 'localhost' when using unix sockets.
      // The default URL parser supplies the isUnix flag when the host is 'unix'. Added other checks incase using a different parser like WHATWG URL (new URL()).
      // See: https://github.com/nodejs/node/issues/32326
      this.requestHeaders = {
        ...this.requestHeaders,
        [http2.constants.HTTP2_HEADER_AUTHORITY]: 'localhost'
      }
    }

    this.socket = this._client.socket
    this._client.once('error', this.onError)
  }

  get _header () {
    return '\r\n' + Object.entries(this.stream.sentHeaders)
      .map(([key, value]) => `${key}: ${value}`)
      .join('\r\n') + '\r\n\r\n'
  }

  get httpVersion () {
    return '2.0'
  }

  registerListeners () {
    this.stream.on('drain', this.onDrain)
    this.stream.on('error', this.onError)
    this.stream.on('close', this.onClose)
    this.stream.on('response', this.onResponse)
    this.stream.on('end', this.onEnd)
    this.stream.on('timeout', this.onTimeout)
  }

  onDrain (...args) {
    this.emit('drain', ...args)
  }

  onError (e) {
    this.emit('error', e)
  }

  onResponse (response) {
    this.emit('response', new ResponseProxy(response, this.stream))
  }

  onEnd () {
    this.emit('end')
  }

  onTimeout () {
    this.stream.close()
  }

  onClose (...args) {
    if (this.stream.rstCode) {
      // Emit error message in case of abnormal stream closure
      // It is fine if the error is emitted multiple times, since the callback has checks to prevent multiple invocations
      this.onError(new Error(`HTTP/2 Stream closed with error code ${rstErrorCodesMap[this.stream.rstCode]}`))
    }

    this.emit('close', ...args)

    this._client.off('error', this.onError)
    this.stream.off('drain', this.onDrain)
    this.stream.off('error', this.onError)
    this.stream.off('response', this.onResponse)
    this.stream.off('end', this.onEnd)
    this.stream.off('close', this.onClose)
    this.stream.off('timeout', this.onTimeout)

    this.removeAllListeners()
  }

  setDefaultEncoding (encoding) {
    if (!this[kHeadersFlushed]) {
      this._flushHeaders()
    }

    this.stream.setDefaultEncoding(encoding)
    return this
  }

  setEncoding (encoding) {
    if (!this[kHeadersFlushed]) {
      this._flushHeaders()
    }

    this.stream.setEncoding(encoding)
    return this
  }

  write (chunk) {
    if (!this[kHeadersFlushed]) {
      this._flushHeaders()
    }

    return this.stream.write(chunk)
  }

  _flushHeaders (endStream = false) {
    if (this[kHeadersFlushed]) {
      throw new Error('Headers already flushed')
    }

    this.requestHeaders = Object.fromEntries(
      Object.entries(this.requestHeaders)
        .filter(([key]) => !connectionHeaders.includes(key.toLowerCase()))
    )

    // The client was created in an unreferenced state and is referenced when a stream is created
    this._client.ref()
    this.stream = this._client.request(this.requestHeaders, {endStream})

    const unreferenceFn = () => {
      this._client.unref()
      this.stream.off('close', unreferenceFn)
    }

    this.stream.on('close', unreferenceFn)

    this.registerListeners()

    this[kHeadersFlushed] = true
  }

  pipe (dest) {
    if (!this[kHeadersFlushed]) {
      this._flushHeaders()
    }
    this.stream.pipe(dest)

    return dest
  }

  on (eventName, listener) {
    if (eventName === 'socket') {
      listener(this.socket)
      return this
    }

    return super.on(eventName, listener)
  }

  abort () {
    if (!this[kHeadersFlushed]) {
      this._flushHeaders()
    }
    this.stream.destroy()

    return this
  }

  end () {
    if (!this[kHeadersFlushed]) {
      this._flushHeaders(true)
    }
    this.stream.end()

    return this
  }

  setTimeout (timeout, cb) {
    if (!this[kHeadersFlushed]) {
      this._flushHeaders()
    }
    this.stream.setTimeout(timeout, cb)

    return this
  }

  removeHeader (headerKey) {
    if (this[kHeadersFlushed]) {
      throw new Error('Headers already flushed. Cannot remove header')
    }

    if (headerKey.startsWith(':')) {
      return
    }

    delete this.requestHeaders[headerKey]

    return this
  }

  setHeader (headerKey, headerValue) {
    if (this[kHeadersFlushed]) {
      throw new Error('Headers already flushed. Cannot set header')
    }

    if (headerKey.startsWith(':')) {
      return
    }

    this.requestHeaders[headerKey] = headerValue

    return this
  }
}

function request (options) {
  // HTTP/2 internal implementation sucks. In case of an invalid HTTP/2 header, it destroys the entire session and
  // emits an error asynchronously, instead of throwing it synchronously. Hence, it makes more sense to perform all
  // validations before sending the request.
  validateRequestHeaders(options.headers)

  return new Http2Request(options)
}

class ResponseProxy extends EventEmitter {
  constructor (response, stream) {
    super()
    this.httpVersion = '2.0'
    this.reqStream = stream
    this.response = response
    this.on = this.on.bind(this)
    this.registerRequestListeners()
    this.socket = this.reqStream.session.socket
  }

  registerRequestListeners () {
    this.reqStream.on('error', (e) => this.emit('error', e))
    this.reqStream.on('close', () => {
      this.emit('close')
    })
  }

  on (eventName, listener) {
    super.on(eventName, listener)
    if (eventName === 'data') {
      // Attach the data listener to the request stream only when there is a listener.
      // This is because the data event is emitted by the request stream and the response stream is a proxy
      // that forwards the data event to the response object.
      // If there is no listener attached and we use the event forwarding pattern above, the data event will still be emitted
      // but with no listeners attached to it, thus causing data loss.
      this.reqStream.on('data', (chunk) => {
        this.emit('data', chunk)
      })
    }

    if (eventName === 'end') {
      // Incase of bodies with no data, the end event is emitted immediately after the response event. In such cases, the consumer might not have attached the end listener yet. (eg: postman-echo.com/gets)
      // Thus, when the end event is emitted, we check if the request stream has already ended. If it has, we emit the end event immediately.
      // Otherwise, we wait for the request stream to end and then emit the end event.
      if (this.reqStream.readableEnded) {
        process.nextTick(listener)
      } else {
        this.reqStream.on('end', listener)
      }
    }
    return this
  }

  get statusCode () {
    return this.response[http2.constants.HTTP2_HEADER_STATUS]
  }

  get rawHeaders () {
    return Object.entries(this.response).flat()
  }

  get headers () {
    return Object.fromEntries(Object.entries(this.response))
  }

  pause () {
    this.reqStream.pause()
    return this
  }

  resume () {
    this.reqStream.resume()
    return this
  }

  pipe (dest) {
    this.reqStream.pipe(dest)
    return dest
  }

  setEncoding (encoding) {
    this.reqStream.setEncoding(encoding)
    return this
  }

  destroy () {
    this.reqStream.destroy()
    return this
  }
}

module.exports = {
  request,
  Http2Request
}
'use strict'

var zlib = require('zlib')
var stream = require('stream')
var inherit = require('util').inherits
var Buffer = require('safe-buffer').Buffer
var Inflate

Inflate = function (options) {
  this.options = options
  this._stream = null
  stream.Transform.call(this)
}

inherit(Inflate, stream.Transform)

Inflate.prototype._transform = function (chunk, encoding, callback) {
  var self = this
  if (!self._stream) {
    // If the response stream does not have a valid deflate header, use `InflateRaw`
    if ((Buffer.from(chunk, encoding)[0] & 0x0F) === 0x08) {
      self._stream = zlib.createInflate(self.options)
    } else {
      self._stream = zlib.createInflateRaw(self.options)
    }

    self._stream.on('error', function (error) {
      self.emit('error', error)
    })

    self._stream.on('data', function (chunk) {
      self.push(chunk)
    })

    self._stream.once('end', function () {
      self._ended = true
      self.push(null)
    })
  }

  self._stream.write(chunk, encoding, callback)
}

Inflate.prototype._flush = function (callback) {
  if (this._stream && !this._ended) {
    this._stream.once('end', callback)
    this._stream.end()
  } else {
    callback()
  }
}

/**
 * Creates an intelligent inflate stream, that can handle deflate responses from older servers,
 * which do not send the correct GZip headers in the response. See http://stackoverflow.com/a/37528114
 * for details on why this is needed.
 *
 * @param {Object=} options - Are passed to the underlying `Inflate` or `InflateRaw` constructor.
 *
 * @returns {*}
 */
module.exports.createInflate = function (options) {
  return new Inflate(options)
}
'use strict'

var uuid = require('uuid').v4
var CombinedStream = require('combined-stream')
var isstream = require('isstream')
var Buffer = require('safe-buffer').Buffer

function Multipart (request) {
  this.request = request
  this.boundary = uuid()
  this.chunked = false
  this.body = null
}

Multipart.prototype.isChunked = function (options) {
  var self = this
  var chunked = false
  var parts = options.data || options

  if (!parts.forEach) {
    self.request.emit('error', new Error('Argument error, options.multipart.'))
  }

  if (options.chunked !== undefined) {
    chunked = options.chunked
  }

  if (self.request.getHeader('transfer-encoding') === 'chunked') {
    chunked = true
  }

  if (!chunked) {
    parts.forEach(function (part) {
      if (typeof part.body === 'undefined') {
        self.request.emit('error', new Error('Body attribute missing in multipart.'))
      }
      if (isstream(part.body)) {
        chunked = true
      }
    })
  }

  return chunked
}

Multipart.prototype.setHeaders = function (chunked) {
  var self = this

  if (chunked && !self.request.hasHeader('transfer-encoding')) {
    self.request.setHeader('Transfer-Encoding', 'chunked')
  }

  var header = self.request.getHeader('content-type')

  if (!header || header.indexOf('multipart') === -1) {
    self.request.setHeader('Content-Type', 'multipart/related; boundary=' + self.boundary)
  } else {
    if (header.indexOf('boundary') !== -1) {
      self.boundary = header.replace(/.*boundary=([^\s;]+).*/, '$1')
    } else {
      self.request.setHeader('Content-Type', header + '; boundary=' + self.boundary)
    }
  }
}

Multipart.prototype.build = function (parts, chunked) {
  var self = this
  var body = chunked ? new CombinedStream() : []

  function add (part) {
    if (typeof part === 'number') {
      part = part.toString()
    }
    return chunked ? body.append(part) : body.push(Buffer.from(part))
  }

  if (self.request.preambleCRLF) {
    add('\r\n')
  }

  parts.forEach(function (part) {
    var preamble = '--' + self.boundary + '\r\n'
    Object.keys(part).forEach(function (key) {
      if (key === 'body') { return }
      preamble += key + ': ' + part[key] + '\r\n'
    })
    preamble += '\r\n'
    add(preamble)
    add(part.body)
    add('\r\n')
  })
  add('--' + self.boundary + '--')

  if (self.request.postambleCRLF) {
    add('\r\n')
  }

  return body
}

Multipart.prototype.onRequest = function (options) {
  var self = this

  var chunked = self.isChunked(options)
  var parts = options.data || options

  self.setHeaders(chunked)
  self.chunked = chunked
  self.body = self.build(parts, chunked)
}

exports.Multipart = Multipart
'use strict'

var qs = require('qs')
var caseless = require('caseless')
var uuid = require('uuid').v4
var oauth = require('oauth-sign')
var crypto = require('crypto')
var Buffer = require('safe-buffer').Buffer

function OAuth (request) {
  this.request = request
  this.params = null
}

OAuth.prototype.buildParams = function (_oauth, uri, method, query, form, qsLib) {
  var oa = {}
  for (var i in _oauth) {
    oa['oauth_' + i] = _oauth[i]
  }
  if (!oa.oauth_version) {
    oa.oauth_version = '1.0'
  }
  if (!oa.oauth_timestamp) {
    oa.oauth_timestamp = Math.floor(Date.now() / 1000).toString()
  }
  if (!oa.oauth_nonce) {
    oa.oauth_nonce = uuid().replace(/-/g, '')
  }
  if (!oa.oauth_signature_method) {
    oa.oauth_signature_method = 'HMAC-SHA1'
  }

  var consumer_secret_or_private_key = oa.oauth_consumer_secret || oa.oauth_private_key // eslint-disable-line camelcase
  delete oa.oauth_consumer_secret
  delete oa.oauth_private_key

  var token_secret = oa.oauth_token_secret // eslint-disable-line camelcase
  delete oa.oauth_token_secret

  var realm = oa.oauth_realm
  delete oa.oauth_realm
  delete oa.oauth_transport_method

  var baseurl = uri.protocol + '//' + uri.host + uri.pathname
  var params = qsLib.parse([].concat(query, form, qsLib.stringify(oa)).join('&'))

  oa.oauth_signature = oauth.sign(
    oa.oauth_signature_method,
    method,
    baseurl,
    params,
    consumer_secret_or_private_key, // eslint-disable-line camelcase
    token_secret // eslint-disable-line camelcase
  )

  if (realm) {
    oa.realm = realm
  }

  return oa
}

OAuth.prototype.buildBodyHash = function (_oauth, body) {
  if (['HMAC-SHA1', 'RSA-SHA1'].indexOf(_oauth.signature_method || 'HMAC-SHA1') < 0) {
    this.request.emit('error', new Error('oauth: ' + _oauth.signature_method +
      ' signature_method not supported with body_hash signing.'))
  }

  var shasum = crypto.createHash('sha1')
  shasum.update(body || '')
  var sha1 = shasum.digest('hex')

  return Buffer.from(sha1, 'hex').toString('base64')
}

OAuth.prototype.concatParams = function (oa, sep, wrap) {
  wrap = wrap || ''

  var params = Object.keys(oa).filter(function (i) {
    return i !== 'realm' && i !== 'oauth_signature'
  }).sort()

  if (oa.realm) {
    params.splice(0, 0, 'realm')
  }
  params.push('oauth_signature')

  return params.map(function (i) {
    return i + '=' + wrap + oauth.rfc3986(oa[i]) + wrap
  }).join(sep)
}

OAuth.prototype.onRequest = function (_oauth) {
  var self = this
  self.params = _oauth

  var uri = self.request.uri || {}
  var method = self.request.method || ''
  var headers = caseless(self.request.headers)
  var body = self.request.body || ''
  var qsLib = self.request.qsLib || qs

  var form
  var query
  var contentType = headers.get('content-type') || ''
  var formContentType = 'application/x-www-form-urlencoded'
  var transport = _oauth.transport_method || 'header'

  if (contentType.slice(0, formContentType.length) === formContentType) {
    contentType = formContentType
    form = body
  }
  if (uri.query) {
    query = uri.query
  }
  if (transport === 'body' && (method !== 'POST' || contentType !== formContentType)) {
    self.request.emit('error', new Error('oauth: transport_method of body requires POST ' +
      'and content-type ' + formContentType))
  }

  if (!form && typeof _oauth.body_hash === 'boolean') {
    _oauth.body_hash = self.buildBodyHash(_oauth, self.request.body.toString())
  }

  var oa = self.buildParams(_oauth, uri, method, query, form, qsLib)

  switch (transport) {
    case 'header':
      self.request.setHeader('Authorization', 'OAuth ' + self.concatParams(oa, ',', '"'))
      break

    case 'query':
      var href = self.request.uri.href += (query ? '&' : '?') + self.concatParams(oa, '&')
      self.request.uri = self.request.urlParser.parse(href)
      self.request.path = self.request.uri.path
      break

    case 'body':
      self.request.body = (form ? form + '&' : '') + self.concatParams(oa, '&')
      break

    default:
      self.request.emit('error', new Error('oauth: transport_method invalid'))
  }
}

exports.OAuth = OAuth
'use strict'

var qs = require('qs')
var querystring = require('querystring')

function Querystring (request) {
  this.request = request
  this.lib = null
  this.useQuerystring = null
  this.parseOptions = null
  this.stringifyOptions = null
}

Querystring.prototype.init = function (options) {
  if (this.lib) { return }

  this.useQuerystring = options.useQuerystring
  this.lib = (this.useQuerystring ? querystring : qs)

  this.parseOptions = options.qsParseOptions || {}
  this.stringifyOptions = options.qsStringifyOptions || {}
}

Querystring.prototype.stringify = function (obj) {
  return (this.useQuerystring)
    ? this.rfc3986(this.lib.stringify(obj,
      this.stringifyOptions.sep || null,
      this.stringifyOptions.eq || null,
      this.stringifyOptions))
    : this.lib.stringify(obj, this.stringifyOptions)
}

Querystring.prototype.parse = function (str) {
  return (this.useQuerystring)
    ? this.lib.parse(str,
      this.parseOptions.sep || null,
      this.parseOptions.eq || null,
      this.parseOptions)
    : this.lib.parse(str, this.parseOptions)
}

Querystring.prototype.rfc3986 = function (str) {
  return str.replace(/[!'()*]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

Querystring.prototype.unescape = querystring.unescape

exports.Querystring = Querystring
'use strict'

var fs = require('fs')
var isUrl = /^https?:/

function Redirect (request) {
  this.request = request
  this.followRedirect = true
  this.followRedirects = true
  this.followAllRedirects = false
  this.followOriginalHttpMethod = false
  this.followAuthorizationHeader = false
  this.allowRedirect = function () { return true }
  this.maxRedirects = 10
  this.redirects = []
  this.redirectsFollowed = 0
  this.removeRefererHeader = false
}

Redirect.prototype.onRequest = function (options) {
  var self = this

  if (options.maxRedirects !== undefined) {
    self.maxRedirects = options.maxRedirects
  }
  if (typeof options.followRedirect === 'function') {
    self.allowRedirect = options.followRedirect
  }
  if (options.followRedirect !== undefined) {
    self.followRedirects = !!options.followRedirect
  }
  if (options.followAllRedirects !== undefined) {
    self.followAllRedirects = options.followAllRedirects
  }
  if (self.followRedirects || self.followAllRedirects) {
    self.redirects = self.redirects || []
  }
  if (options.removeRefererHeader !== undefined) {
    self.removeRefererHeader = options.removeRefererHeader
  }
  if (options.followOriginalHttpMethod !== undefined) {
    self.followOriginalHttpMethod = options.followOriginalHttpMethod
  }
  if (options.followAuthorizationHeader !== undefined) {
    self.followAuthorizationHeader = options.followAuthorizationHeader
  }
}

Redirect.prototype.redirectTo = function (response) {
  var self = this
  var request = self.request

  var redirectTo = null
  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {
    var location = response.caseless.get('location')
    request.debug('redirect', location)

    if (self.followAllRedirects) {
      redirectTo = location
    } else if (self.followRedirects) {
      switch (request.method) {
        case 'PATCH':
        case 'PUT':
        case 'POST':
        case 'DELETE':
          // Do not follow redirects
          break
        default:
          redirectTo = location
          break
      }
    }
  } else if (response.statusCode === 401) {
    // retry the request with the new Authorization header value using
    // WWW-Authenticate response header.
    // https://tools.ietf.org/html/rfc7235#section-3.1
    var authHeader = request._auth.onResponse(response)
    if (authHeader) {
      request.setHeader('Authorization', authHeader)
      redirectTo = request.uri
    }
  }
  return redirectTo
}

Redirect.prototype.onResponse = function (response) {
  var self = this
  var request = self.request
  var urlParser = request.urlParser
  var options = {}

  var redirectTo = self.redirectTo(response)
  if (!redirectTo || !self.allowRedirect.call(request, response)) {
    return false
  }

  request.debug('redirect to', redirectTo)

  // ignore any potential response body.  it cannot possibly be useful
  // to us at this point.
  // response.resume should be defined, but check anyway before calling. Workaround for browserify.
  if (response.resume) {
    response.resume()
  }

  if (self.redirectsFollowed >= self.maxRedirects) {
    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href))
    return false
  }
  self.redirectsFollowed += 1

  if (!isUrl.test(redirectTo)) {
    redirectTo = urlParser.resolve(request.uri.href, redirectTo)
  }

  var uriPrev = request.uri
  request.uri = urlParser.parse(redirectTo)

  // handle the case where we change protocol from https to http or vice versa
  if (request.uri.protocol !== uriPrev.protocol) {
    delete request.agent
  }

  self.redirects.push({ statusCode: response.statusCode, redirectUri: redirectTo })

  // if the redirect hostname (not just port or protocol) is changed:
  //  1. remove host header, the new host will be populated on request.init
  //  2. remove authorization header, avoid authentication leak
  // @note: This is done because of security reasons, irrespective of the
  // status code or request method used.
  if (request.headers && uriPrev.hostname !== request.uri.hostname) {
    request.removeHeader('host')

    // use followAuthorizationHeader option to retain authorization header
    if (!self.followAuthorizationHeader) {
      request.removeHeader('authorization')
    }
  }

  delete request.src
  delete request.req
  delete request._started

  // Switch request method to GET
  // - if followOriginalHttpMethod is not set [OVERRIDE]
  // - or, statusCode code is not 401, 307 or 308 [STANDARD]
  // - also, remove request body for the GET redirect [STANDARD]
  // @note: when followOriginalHttpMethod is set,
  // it will always retain the request body irrespective of the method (say GET) or status code (any 3XX).
  if (!self.followOriginalHttpMethod &&
    response.statusCode !== 401 && response.statusCode !== 307 && response.statusCode !== 308) {
      // force all redirects to use GET (legacy reasons)
      // but, HEAD is considered as a safe method so, the method is retained.
    if (request.method !== 'HEAD') {
      request.method = 'GET'
    }

    // Remove parameters from the previous response, unless this is the second request
    // for a server that requires digest authentication.
    delete request.body
    delete request._form
    delete request._multipart
    if (request.headers) {
      request.removeHeader('content-type')
      request.removeHeader('content-length')
    }
  }

  // Restore form-data stream if request body is retained
  if (request.formData &&
      // make sure _form is released and there's no pending _streams left
      // which will be the case for 401 redirects. so, reuse _form on redirect
      // @note: multiple form-param / file-streams may cause following issue:
      // https://github.com/request/request/issues/887
      // @todo: expose stream errors as events
      request._form && request._form._released &&
      request._form._streams && !request._form._streams.length) {
    // reinitialize FormData stream for 307 or 308 redirects
    delete request._form
    // remove content-type header for new boundary
    request.removeHeader('content-type')
    // remove content-length header since FormValue may be dropped if its not a file stream
    request.removeHeader('content-length')

    var formData = []
    var resetFormData = function (key, value, paramOptions) {
      // if `value` is of type stream
      if (typeof (value && value.pipe) === 'function') {
        // bail out if not a file stream
        if (!(value.hasOwnProperty('fd') && value.path)) return
        // create new file stream
        value = fs.createReadStream(value.path)
      }

      formData.push({key: key, value: value, options: paramOptions})
    }
    for (var i = 0, ii = request.formData.length; i < ii; i++) {
      var formParam = request.formData[i]
      if (!formParam) { continue }
      resetFormData(formParam.key, formParam.value, formParam.options)
    }

    // setting `options.formData` will reinitialize FormData in `request.init`
    options.formData = formData
  }

  if (!self.removeRefererHeader) {
    request.setHeader('Referer', uriPrev.href)
  }

  request.emit('redirect')

  request.init(options)

  return true
}

exports.Redirect = Redirect
'use strict'

var tunnel = require('@postman/tunnel-agent')

var defaultProxyHeaderWhiteList = [
  'accept',
  'accept-charset',
  'accept-encoding',
  'accept-language',
  'accept-ranges',
  'cache-control',
  'content-encoding',
  'content-language',
  'content-location',
  'content-md5',
  'content-range',
  'content-type',
  'connection',
  'date',
  'expect',
  'max-forwards',
  'pragma',
  'referer',
  'te',
  'user-agent',
  'via'
]

var defaultProxyHeaderExclusiveList = [
  'proxy-authorization'
]

function constructProxyHost (uriObject) {
  var port = uriObject.port
  var protocol = uriObject.protocol
  var proxyHost = uriObject.hostname + ':'

  if (port) {
    proxyHost += port
  } else if (protocol === 'https:') {
    proxyHost += '443'
  } else {
    proxyHost += '80'
  }

  return proxyHost
}

function constructProxyHeaderWhiteList (headers, proxyHeaderWhiteList) {
  var whiteList = proxyHeaderWhiteList
    .reduce(function (set, header) {
      set[header.toLowerCase()] = true
      return set
    }, {})

  return Object.keys(headers)
    .filter(function (header) {
      return whiteList[header.toLowerCase()]
    })
    .reduce(function (set, header) {
      set[header] = headers[header]
      return set
    }, {})
}

function constructTunnelOptions (request, proxyHeaders) {
  var proxy = request.proxy

  var tunnelOptions = {
    proxy: {
      host: proxy.hostname,
      port: +proxy.port,
      proxyAuth: proxy.auth,
      headers: proxyHeaders
    },
    headers: request.headers,
    ca: request.ca,
    cert: request.cert,
    key: request.key,
    passphrase: request.passphrase,
    pfx: request.pfx,
    ciphers: request.ciphers,
    rejectUnauthorized: request.rejectUnauthorized,
    secureOptions: request.secureOptions,
    secureProtocol: request.secureProtocol,
    extraCA: request.extraCA
  }

  return tunnelOptions
}

function constructTunnelFnName (uri, proxy) {
  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')
  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')
  return [uriProtocol, proxyProtocol].join('Over')
}

function getTunnelFn (request) {
  var uri = request.uri
  var proxy = request.proxy
  var tunnelFnName = constructTunnelFnName(uri, proxy)
  return tunnel[tunnelFnName]
}

function Tunnel (request) {
  this.request = request
  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList
  this.proxyHeaderExclusiveList = []
  if (typeof request.tunnel !== 'undefined') {
    this.tunnelOverride = request.tunnel
  }
}

Tunnel.prototype.isEnabled = function () {
  var self = this
  var request = self.request
    // Tunnel HTTPS by default. Allow the user to override this setting.

  // If self.tunnelOverride is set (the user specified a value), use it.
  if (typeof self.tunnelOverride !== 'undefined') {
    return self.tunnelOverride
  }

  // If the destination is HTTPS, tunnel.
  if (request.uri.protocol === 'https:') {
    return true
  }

  // Otherwise, do not use tunnel.
  return false
}

Tunnel.prototype.setup = function (options) {
  var self = this
  var request = self.request

  options = options || {}

  if (typeof request.proxy === 'string') {
    request.proxy = request.urlParser.parse(request.proxy)
  }

  if (!request.proxy || !request.tunnel) {
    return false
  }

  // Setup Proxy Header Exclusive List and White List
  if (options.proxyHeaderWhiteList) {
    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList
  }
  if (options.proxyHeaderExclusiveList) {
    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList
  }

  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)
  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)

  // Setup Proxy Headers and Proxy Headers Host
  // Only send the Proxy White Listed Header names
  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)
  proxyHeaders.host = constructProxyHost(request.uri)

  proxyHeaderExclusiveList.forEach(request.removeHeader, request)

  // Set Agent from Tunnel Data
  var tunnelFn = getTunnelFn(request)
  var tunnelOptions = constructTunnelOptions(request, proxyHeaders)
  request.agent = tunnelFn(tunnelOptions)

  return true
}

Tunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList
Tunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList
exports.Tunnel = Tunnel
var url = require('url')
var EMPTY = ''
var ZERO = '0'
var PERCENT = '%'
var STRING = 'string'
var AMPERSAND = '&'
var EQUALS = '='
var QUESTION_MARK = '?'
var stringify
var parse

/**
 * Percent encode a character with given code.
 *
 * @param {Number} c - character code of the character to encode
 * @returns {String} - percent encoding of given character
 */
var percentEncode = function (c) {
  var hex = c.toString(16).toUpperCase()
  hex.length === 1 && (hex = ZERO + hex)
  return PERCENT + hex
}

/**
 * Checks if character with given code is valid hexadecimal digit or not.
 *
 * @param {Number} byte
 * @returns {Boolean}
 */
var isPreEncodedCharacter = function (byte) {
  return (byte >= 0x30 && byte <= 0x39) || // 0-9
    (byte >= 0x41 && byte <= 0x46) || // A-F
    (byte >= 0x61 && byte <= 0x66) // a-f
}

/**
 * Checks if character at given index in the buffer is already percent encoded or not.
 *
 * @param {Buffer} buffer
 * @param {Number} i
 * @returns {Boolean}
 */
var isPreEncoded = function (buffer, i) {
  // If it is % check next two bytes for percent encode characters
  // looking for pattern %00 - %FF
  return (buffer[i] === 0x25 &&
    (isPreEncodedCharacter(buffer[i + 1]) &&
    isPreEncodedCharacter(buffer[i + 2]))
  )
}

/**
 * Checks whether given character should be percent encoded or not for fixture.
 *
 * @param {Number} byte
 * @returns {Boolean}
 */
var charactersToPercentEncode = function (byte) {
  return (byte < 0x23 || byte > 0x7E || // Below # and after ~
    byte === 0x3C || byte === 0x3E || // > and <
    byte === 0x28 || byte === 0x29 || // ( and )
    byte === 0x25 || // %
    byte === 0x27 || // '
    byte === 0x2A // *
  )
}

/**
 * Percent encode a query string according to RFC 3986.
 * Note: This function is supposed to be used on top of node's inbuilt url encoding
 *       to solve issue https://github.com/nodejs/node/issues/8321
 *
 * @param {String} value
 * @returns {String}
 */
var encode = function (value) {
  if (!value) { return EMPTY }

  var buffer = Buffer.from(value)
  var ret = EMPTY
  var i
  var ii

  for (i = 0, ii = buffer.length; i < ii; ++i) {
    if (charactersToPercentEncode(buffer[i]) && !isPreEncoded(buffer, i)) {
      ret += percentEncode(buffer[i])
    } else {
      ret += String.fromCodePoint(buffer[i]) // Only works in ES6 (available in Node v4+)
    }
  }

  return ret
}

/**
 * Parses a query string into an array, preserving parameter values
 *
 * @param string
 * @returns {*}
 */
parse = function (string) {
  var parts
  if (typeof string === STRING) { // eslint-disable-line valid-typeof
    parts = string.split(AMPERSAND)
    return parts.map(function (param, idx) {
      if (param === EMPTY && idx !== (parts.length - 1)) {
        return { key: null, value: null }
      }

      var index = (typeof param === STRING) ? param.indexOf(EQUALS) : -1 // eslint-disable-line valid-typeof
      var paramObj = {}

      // this means that there was no value for this key (not even blank, so we store this info) and the value is set
      // to null
      if (index < 0) {
        paramObj.key = param.substr(0, param.length)
        paramObj.value = null
      } else {
        paramObj.key = param.substr(0, index)
        paramObj.value = param.substr(index + 1)
      }

      return paramObj
    })
  }
  return []
}

/**
 * Stringifies a query string, from an array of parameters
 *
 * @param parameters
 * @returns {string}
 */
stringify = function (parameters) {
  return parameters ? parameters.map(function (param) {
    var key = param.key
    var value = param.value

    if (value === undefined) {
      return EMPTY
    }

    if (key === null) {
      key = EMPTY
    }

    if (value === null) {
      return encode(key)
    }

    return encode(key) + EQUALS + encode(value)
  }).join(AMPERSAND) : EMPTY
}

/**
 * Correctly URL encodes query parameters in a URL and returns the final parsed URL.
 *
 * @param str
 */
module.exports = function (str) {
  var parsed = url.parse(str)
  var rawQs
  var search
  var path
  var qs

  rawQs = parsed.query

  if (rawQs && rawQs.length) {
    qs = stringify(parse(parsed.query))
    search = QUESTION_MARK + qs
    path = parsed.pathname + search

    parsed.query = qs
    parsed.search = search
    parsed.path = path

    str = url.format(parsed)
  }

  // Parse again, because Node does not guarantee consistency of properties
  return url.parse(str)
}

module.exports.parse = parse
module.exports.stringify = stringify
Apache License

Version 2.0, January 2004

http://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.

"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.

"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.

"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.

"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.

"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.

"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).

"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.

"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."

"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:

You must give any other recipients of the Work or Derivative Works a copy of this License; and

You must cause any modified files to carry prominent notices stating that You changed the files; and

You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and

If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONSvar aws4 = exports,
    url = require('url'),
    querystring = require('querystring'),
    crypto = require('crypto'),
    lru = require('./lru'),
    credentialsCache = lru(1000)

// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html

function hmac(key, string, encoding) {
  return crypto.createHmac('sha256', key).update(string, 'utf8').digest(encoding)
}

function hash(string, encoding) {
  return crypto.createHash('sha256').update(string, 'utf8').digest(encoding)
}

// This function assumes the string has already been percent encoded
function encodeRfc3986(urlEncodedString) {
  return urlEncodedString.replace(/[!'()*]/g, function(c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

function encodeRfc3986Full(str) {
  return encodeRfc3986(encodeURIComponent(str))
}

// A bit of a combination of:
// https://github.com/aws/aws-sdk-java-v2/blob/dc695de6ab49ad03934e1b02e7263abbd2354be0/core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/AbstractAws4Signer.java#L59
// https://github.com/aws/aws-sdk-js/blob/18cb7e5b463b46239f9fdd4a65e2ff8c81831e8f/lib/signers/v4.js#L191-L199
// https://github.com/mhart/aws4fetch/blob/b3aed16b6f17384cf36ea33bcba3c1e9f3bdfefd/src/main.js#L25-L34
var HEADERS_TO_IGNORE = {
  'authorization': true,
  'connection': true,
  'x-amzn-trace-id': true,
  'user-agent': true,
  'expect': true,
  'presigned-expires': true,
  'range': true,
}

// request: { path | body, [host], [method], [headers], [service], [region] }
// credentials: { accessKeyId, secretAccessKey, [sessionToken] }
function RequestSigner(request, credentials) {

  if (typeof request === 'string') request = url.parse(request)

  var headers = request.headers = Object.assign({}, (request.headers || {})),
      hostParts = (!this.service || !this.region) && this.matchHost(request.hostname || request.host || headers.Host || headers.host)

  this.request = request
  this.credentials = credentials || this.defaultCredentials()

  this.service = request.service || hostParts[0] || ''
  this.region = request.region || hostParts[1] || 'us-east-1'

  // SES uses a different domain from the service name
  if (this.service === 'email') this.service = 'ses'

  if (!request.method && request.body)
    request.method = 'POST'

  if (!headers.Host && !headers.host) {
    headers.Host = request.hostname || request.host || this.createHost()

    // If a port is specified explicitly, use it as is
    if (request.port)
      headers.Host += ':' + request.port
  }
  if (!request.hostname && !request.host)
    request.hostname = headers.Host || headers.host

  this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT'

  this.extraHeadersToIgnore = request.extraHeadersToIgnore || Object.create(null)
  this.extraHeadersToInclude = request.extraHeadersToInclude || Object.create(null)
}

RequestSigner.prototype.matchHost = function(host) {
  var match = (host || '').match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com(\.cn)?$/)
  var hostParts = (match || []).slice(1, 3)

  // ES's hostParts are sometimes the other way round, if the value that is expected
  // to be region equals ‘es’ switch them back
  // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com
  if (hostParts[1] === 'es' || hostParts[1] === 'aoss')
    hostParts = hostParts.reverse()

  if (hostParts[1] == 's3') {
    hostParts[0] = 's3'
    hostParts[1] = 'us-east-1'
  } else {
    for (var i = 0; i < 2; i++) {
      if (/^s3-/.test(hostParts[i])) {
        hostParts[1] = hostParts[i].slice(3)
        hostParts[0] = 's3'
        break
      }
    }
  }

  return hostParts
}

// http://docs.aws.amazon.com/general/latest/gr/rande.html
RequestSigner.prototype.isSingleRegion = function() {
  // Special case for S3 and SimpleDB in us-east-1
  if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') return true

  return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts']
    .indexOf(this.service) >= 0
}

RequestSigner.prototype.createHost = function() {
  var region = this.isSingleRegion() ? '' : '.' + this.region,
      subdomain = this.service === 'ses' ? 'email' : this.service
  return subdomain + region + '.amazonaws.com'
}

RequestSigner.prototype.prepareRequest = function() {
  this.parsePath()

  var request = this.request, headers = request.headers, query

  if (request.signQuery) {

    this.parsedPath.query = query = this.parsedPath.query || {}

    if (this.credentials.sessionToken)
      query['X-Amz-Security-Token'] = this.credentials.sessionToken

    if (this.service === 's3' && !query['X-Amz-Expires'])
      query['X-Amz-Expires'] = 86400

    if (query['X-Amz-Date'])
      this.datetime = query['X-Amz-Date']
    else
      query['X-Amz-Date'] = this.getDateTime()

    query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256'
    query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString()
    query['X-Amz-SignedHeaders'] = this.signedHeaders()

  } else {

    if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {
      if (request.body && !headers['Content-Type'] && !headers['content-type'])
        headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8'

      if (request.body && !headers['Content-Length'] && !headers['content-length'])
        headers['Content-Length'] = Buffer.byteLength(request.body)

      if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token'])
        headers['X-Amz-Security-Token'] = this.credentials.sessionToken

      if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256'])
        headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex')

      if (headers['X-Amz-Date'] || headers['x-amz-date'])
        this.datetime = headers['X-Amz-Date'] || headers['x-amz-date']
      else
        headers['X-Amz-Date'] = this.getDateTime()
    }

    delete headers.Authorization
    delete headers.authorization
  }
}

RequestSigner.prototype.sign = function() {
  if (!this.parsedPath) this.prepareRequest()

  if (this.request.signQuery) {
    this.parsedPath.query['X-Amz-Signature'] = this.signature()
  } else {
    this.request.headers.Authorization = this.authHeader()
  }

  this.request.path = this.formatPath()

  return this.request
}

RequestSigner.prototype.getDateTime = function() {
  if (!this.datetime) {
    var headers = this.request.headers,
      date = new Date(headers.Date || headers.date || new Date)

    this.datetime = date.toISOString().replace(/[:\-]|\.\d{3}/g, '')

    // Remove the trailing 'Z' on the timestamp string for CodeCommit git access
    if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1)
  }
  return this.datetime
}

RequestSigner.prototype.getDate = function() {
  return this.getDateTime().substr(0, 8)
}

RequestSigner.prototype.authHeader = function() {
  return [
    'AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(),
    'SignedHeaders=' + this.signedHeaders(),
    'Signature=' + this.signature(),
  ].join(', ')
}

RequestSigner.prototype.signature = function() {
  var date = this.getDate(),
      cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),
      kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey)
  if (!kCredentials) {
    kDate = hmac('AWS4' + this.credentials.secretAccessKey, date)
    kRegion = hmac(kDate, this.region)
    kService = hmac(kRegion, this.service)
    kCredentials = hmac(kService, 'aws4_request')
    credentialsCache.set(cacheKey, kCredentials)
  }
  return hmac(kCredentials, this.stringToSign(), 'hex')
}

RequestSigner.prototype.stringToSign = function() {
  return [
    'AWS4-HMAC-SHA256',
    this.getDateTime(),
    this.credentialString(),
    hash(this.canonicalString(), 'hex'),
  ].join('\n')
}

RequestSigner.prototype.canonicalString = function() {
  if (!this.parsedPath) this.prepareRequest()

  var pathStr = this.parsedPath.path,
      query = this.parsedPath.query,
      headers = this.request.headers,
      queryStr = '',
      normalizePath = this.service !== 's3',
      decodePath = this.service === 's3' || this.request.doNotEncodePath,
      decodeSlashesInPath = this.service === 's3',
      firstValOnly = this.service === 's3',
      bodyHash

  if (this.service === 's3' && this.request.signQuery) {
    bodyHash = 'UNSIGNED-PAYLOAD'
  } else if (this.isCodeCommitGit) {
    bodyHash = ''
  } else {
    bodyHash = headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] ||
      hash(this.request.body || '', 'hex')
  }

  if (query) {
    var reducedQuery = Object.keys(query).reduce(function(obj, key) {
      if (!key) return obj
      obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] :
        (firstValOnly ? query[key][0] : query[key])
      return obj
    }, {})
    var encodedQueryPieces = []
    Object.keys(reducedQuery).sort().forEach(function(key) {
      if (!Array.isArray(reducedQuery[key])) {
        encodedQueryPieces.push(key + '=' + encodeRfc3986Full(reducedQuery[key]))
      } else {
        reducedQuery[key].map(encodeRfc3986Full).sort()
          .forEach(function(val) { encodedQueryPieces.push(key + '=' + val) })
      }
    })
    queryStr = encodedQueryPieces.join('&')
  }
  if (pathStr !== '/') {
    if (normalizePath) pathStr = pathStr.replace(/\/{2,}/g, '/')
    pathStr = pathStr.split('/').reduce(function(path, piece) {
      if (normalizePath && piece === '..') {
        path.pop()
      } else if (!normalizePath || piece !== '.') {
        if (decodePath) piece = decodeURIComponent(piece.replace(/\+/g, ' '))
        path.push(encodeRfc3986Full(piece))
      }
      return path
    }, []).join('/')
    if (pathStr[0] !== '/') pathStr = '/' + pathStr
    if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/')
  }

  return [
    this.request.method || 'GET',
    pathStr,
    queryStr,
    this.canonicalHeaders() + '\n',
    this.signedHeaders(),
    bodyHash,
  ].join('\n')
}

RequestSigner.prototype.filterHeaders = function() {
  var headers = this.request.headers,
      extraHeadersToInclude = this.extraHeadersToInclude,
      extraHeadersToIgnore = this.extraHeadersToIgnore
  this.filteredHeaders = Object.keys(headers)
    .map(function(key) { return [key.toLowerCase(), headers[key]] })
    .filter(function(entry) {
      return extraHeadersToInclude[entry[0]] ||
        (HEADERS_TO_IGNORE[entry[0]] == null && !extraHeadersToIgnore[entry[0]])
    })
    .sort(function(a, b) { return a[0] < b[0] ? -1 : 1 })
}

RequestSigner.prototype.canonicalHeaders = function() {
  if (!this.filteredHeaders) this.filterHeaders()

  return this.filteredHeaders.map(function(entry) {
    return entry[0] + ':' + entry[1].toString().trim().replace(/\s+/g, ' ')
  }).join('\n')
}

RequestSigner.prototype.signedHeaders = function() {
  if (!this.filteredHeaders) this.filterHeaders()

  return this.filteredHeaders.map(function(entry) { return entry[0] }).join(';')
}

RequestSigner.prototype.credentialString = function() {
  return [
    this.getDate(),
    this.region,
    this.service,
    'aws4_request',
  ].join('/')
}

RequestSigner.prototype.defaultCredentials = function() {
  var env = process.env
  return {
    accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,
    secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,
    sessionToken: env.AWS_SESSION_TOKEN,
  }
}

RequestSigner.prototype.parsePath = function() {
  var path = this.request.path || '/'

  // S3 doesn't always encode characters > 127 correctly and
  // all services don't encode characters > 255 correctly
  // So if there are non-reserved chars (and it's not already all % encoded), just encode them all
  if (/[^0-9A-Za-z;,/?:@&=+$\-_.!~*'()#%]/.test(path)) {
    path = encodeURI(decodeURI(path))
  }

  var queryIx = path.indexOf('?'),
      query = null

  if (queryIx >= 0) {
    query = querystring.parse(path.slice(queryIx + 1))
    path = path.slice(0, queryIx)
  }

  this.parsedPath = {
    path: path,
    query: query,
  }
}

RequestSigner.prototype.formatPath = function() {
  var path = this.parsedPath.path,
      query = this.parsedPath.query

  if (!query) return path

  // Services don't support empty query string keys
  if (query[''] != null) delete query['']

  return path + '?' + encodeRfc3986(querystring.stringify(query))
}

aws4.RequestSigner = RequestSigner

aws4.sign = function(request, credentials) {
  return new RequestSigner(request, credentials).sign()
}
Copyright 2013 Michael Hart (michael.hart.au@gmail.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
module.exports = function(size) {
  return new LruCache(size)
}

function LruCache(size) {
  this.capacity = size | 0
  this.map = Object.create(null)
  this.list = new DoublyLinkedList()
}

LruCache.prototype.get = function(key) {
  var node = this.map[key]
  if (node == null) return undefined
  this.used(node)
  return node.val
}

LruCache.prototype.set = function(key, val) {
  var node = this.map[key]
  if (node != null) {
    node.val = val
  } else {
    if (!this.capacity) this.prune()
    if (!this.capacity) return false
    node = new DoublyLinkedNode(key, val)
    this.map[key] = node
    this.capacity--
  }
  this.used(node)
  return true
}

LruCache.prototype.used = function(node) {
  this.list.moveToFront(node)
}

LruCache.prototype.prune = function() {
  var node = this.list.pop()
  if (node != null) {
    delete this.map[node.key]
    this.capacity++
  }
}


function DoublyLinkedList() {
  this.firstNode = null
  this.lastNode = null
}

DoublyLinkedList.prototype.moveToFront = function(node) {
  if (this.firstNode == node) return

  this.remove(node)

  if (this.firstNode == null) {
    this.firstNode = node
    this.lastNode = node
    node.prev = null
    node.next = null
  } else {
    node.prev = null
    node.next = this.firstNode
    node.next.prev = node
    this.firstNode = node
  }
}

DoublyLinkedList.prototype.pop = function() {
  var lastNode = this.lastNode
  if (lastNode != null) {
    this.remove(lastNode)
  }
  return lastNode
}

DoublyLinkedList.prototype.remove = function(node) {
  if (this.firstNode == node) {
    this.firstNode = node.next
  } else if (node.prev != null) {
    node.prev.next = node.next
  }
  if (this.lastNode == node) {
    this.lastNode = node.prev
  } else if (node.next != null) {
    node.next.prev = node.prev
  }
}


function DoublyLinkedNode(key, val) {
  this.key = key
  this.val = val
  this.prev = null
  this.next = null
}
{
  "name": "aws4",
  "version": "1.13.1",
  "description": "Signs and prepares requests using AWS Signature Version 4",
  "author": "Michael Hart <michael.hart.au@gmail.com> (https://github.com/mhart)",
  "license": "MIT",
  "repository": "github:mhart/aws4",
  "main": "aws4.js",
  "files": [
    "aws4.js",
    "lru.js"
  ],
  "scripts": {
    "test": "mocha ./test/fast.js -R list",
    "integration": "node ./test/slow.js"
  },
  "devDependencies": {
    "mocha": "^10.7.0",
    "should": "^13.2.3"
  }
}
aws4
----

A small utility to sign [vanilla Node.js http(s)](https://nodejs.org/api/http.html) request options using Amazon's
[AWS Signature Version 4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).

If you want to sign and send AWS requests using [`fetch()`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API), then check out [aws4fetch](https://github.com/mhart/aws4fetch) – otherwise you can also bundle this library for use [in older browsers](./browser).

The only AWS service I know of that *doesn't* support v4 is
[SimpleDB](https://docs.aws.amazon.com/AmazonSimpleDB/latest/DeveloperGuide/SDB_API.html)
(it only supports [AWS Signature Version 2](https://github.com/mhart/aws2)).

It also provides defaults for a number of core AWS headers and
request parameters, making it very easy to query AWS services, or
build out a fully-featured AWS library.

Example
-------

```javascript
var https = require('https')
var aws4  = require('aws4')

// to illustrate usage, we'll create a utility function to request and pipe to stdout
function request(opts) { https.request(opts, function(res) { res.pipe(process.stdout) }).end(opts.body || '') }

// aws4 will sign an options object as you'd pass to http.request, with an AWS service and region
var opts = { host: 'my-bucket.s3.us-west-1.amazonaws.com', path: '/my-object', service: 's3', region: 'us-west-1' }

// aws4.sign() will sign and modify these options, ready to pass to http.request
aws4.sign(opts, { accessKeyId: '', secretAccessKey: '' })

// or it can get credentials from process.env.AWS_ACCESS_KEY_ID, etc
aws4.sign(opts)

// for most AWS services, aws4 can figure out the service and region if you pass a host
opts = { host: 'my-bucket.s3.us-west-1.amazonaws.com', path: '/my-object' }

// usually it will add/modify request headers, but you can also sign the query:
opts = { host: 'my-bucket.s3.amazonaws.com', path: '/?X-Amz-Expires=12345', signQuery: true }

// and for services with simple hosts, aws4 can infer the host from service and region:
opts = { service: 'sqs', region: 'us-east-1', path: '/?Action=ListQueues' }

// and if you're using us-east-1, it's the default:
opts = { service: 'sqs', path: '/?Action=ListQueues' }

aws4.sign(opts)
console.log(opts)
/*
{
  host: 'sqs.us-east-1.amazonaws.com',
  path: '/?Action=ListQueues',
  headers: {
    Host: 'sqs.us-east-1.amazonaws.com',
    'X-Amz-Date': '20121226T061030Z',
    Authorization: 'AWS4-HMAC-SHA256 Credential=ABCDEF/20121226/us-east-1/sqs/aws4_request, ...'
  }
}
*/

// we can now use this to query AWS
request(opts)
/*
<?xml version="1.0"?>
<ListQueuesResponse xmlns="https://queue.amazonaws.com/doc/2012-11-05/">
...
*/

// aws4 can infer the HTTP method if a body is passed in
// method will be POST and Content-Type: 'application/x-www-form-urlencoded; charset=utf-8'
request(aws4.sign({ service: 'iam', body: 'Action=ListGroups&Version=2010-05-08' }))
/*
<ListGroupsResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">
...
*/

// you can specify any custom option or header as per usual
request(aws4.sign({
  service: 'dynamodb',
  region: 'ap-southeast-2',
  method: 'POST',
  path: '/',
  headers: {
    'Content-Type': 'application/x-amz-json-1.0',
    'X-Amz-Target': 'DynamoDB_20120810.ListTables'
  },
  body: '{}'
}))
/*
{"TableNames":[]}
...
*/

// you can also specify extra headers to ignore during signing
request(aws4.sign({
  host: '07tjusf2h91cunochc.us-east-1.aoss.amazonaws.com',
  method: 'PUT',
  path: '/my-index',
  body: '{"mappings":{}}',
  headers: {
    'Content-Type': 'application/json',
    'X-Amz-Content-Sha256': 'UNSIGNED-PAYLOAD'
  },
  extraHeadersToIgnore: {
    'content-length': true
  }
}))

// and headers to include that would normally be ignored
request(aws4.sign({
  service: 'mycustomservice',
  path: '/whatever',
  headers: {
    'Range': 'bytes=200-1000, 2000-6576, 19000-'
  },
  extraHeadersToInclude: {
    'range': true
  }
}))


// The raw RequestSigner can be used to generate CodeCommit Git passwords
var signer = new aws4.RequestSigner({
  service: 'codecommit',
  host: 'git-codecommit.us-east-1.amazonaws.com',
  method: 'GIT',
  path: '/v1/repos/MyAwesomeRepo',
})
var password = signer.getDateTime() + 'Z' + signer.signature()

// see example.js for examples with other services
```

API
---

### aws4.sign(requestOptions, [credentials])

Calculates and populates any necessary AWS headers and/or request
options on `requestOptions`. Returns `requestOptions` as a convenience for chaining.

`requestOptions` is an object holding the same options that the Node.js
[http.request](https://nodejs.org/docs/latest/api/http.html#http_http_request_options_callback)
function takes.

The following properties of `requestOptions` are used in the signing or
populated if they don't already exist:

- `hostname` or `host` (will try to be determined from `service` and `region` if not given)
- `method` (will use `'GET'` if not given or `'POST'` if there is a `body`)
- `path` (will use `'/'` if not given)
- `body` (will use `''` if not given)
- `service` (will try to be calculated from `hostname` or `host` if not given)
- `region` (will try to be calculated from `hostname` or `host` or use `'us-east-1'` if not given)
- `signQuery` (to sign the query instead of adding an `Authorization` header, defaults to false)
- `extraHeadersToIgnore` (an object with lowercase header keys to ignore when signing, eg `{ 'content-length': true }`)
- `extraHeadersToInclude` (an object with lowercase header keys to include when signing, overriding any ignores)
- `headers['Host']` (will use `hostname` or `host` or be calculated if not given)
- `headers['Content-Type']` (will use `'application/x-www-form-urlencoded; charset=utf-8'`
  if not given and there is a `body`)
- `headers['Date']` (used to calculate the signature date if given, otherwise `new Date` is used)

Your AWS credentials (which can be found in your
[AWS console](https://portal.aws.amazon.com/gp/aws/securityCredentials))
can be specified in one of two ways:

- As the second argument, like this:

```javascript
aws4.sign(requestOptions, {
  secretAccessKey: "<your-secret-access-key>",
  accessKeyId: "<your-access-key-id>",
  sessionToken: "<your-session-token>"
})
```

- From `process.env`, such as this:

```
export AWS_ACCESS_KEY_ID="<your-access-key-id>"
export AWS_SECRET_ACCESS_KEY="<your-secret-access-key>"
export AWS_SESSION_TOKEN="<your-session-token>"
```

(will also use `AWS_ACCESS_KEY` and `AWS_SECRET_KEY` if available)

The `sessionToken` property and `AWS_SESSION_TOKEN` environment variable are optional for signing
with [IAM STS temporary credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html).

Installation
------------

With [npm](https://www.npmjs.com/) do:

```
npm install aws4
```

Can also be used [in the browser](./browser).

Thanks
------

Thanks to [@jed](https://github.com/jed) for his
[dynamo-client](https://github.com/jed/dynamo-client) lib where I first
committed and subsequently extracted this code.

Also thanks to the
[official Node.js AWS SDK](https://github.com/aws/aws-sdk-js) for giving
me a start on implementing the v4 signature.
{
  "name": "postman-request",
  "description": "Simplified HTTP request client.",
  "keywords": [
    "http",
    "simple",
    "util",
    "utility"
  ],
  "version": "2.88.1-postman.42",
  "repository": {
    "type": "git",
    "url": "https://github.com/postmanlabs/postman-request.git"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">= 16"
  },
  "main": "index.js",
  "files": [
    "lib/",
    "index.js",
    "request.js"
  ],
  "dependencies": {
    "@postman/form-data": "~3.1.1",
    "@postman/tough-cookie": "~4.1.3-postman.1",
    "@postman/tunnel-agent": "^0.6.4",
    "aws-sign2": "~0.7.0",
    "aws4": "^1.12.0",
    "caseless": "~0.12.0",
    "combined-stream": "~1.0.6",
    "extend": "~3.0.2",
    "forever-agent": "~0.6.1",
    "http-signature": "~1.4.0",
    "is-typedarray": "~1.0.0",
    "isstream": "~0.1.2",
    "json-stringify-safe": "~5.0.1",
    "mime-types": "^2.1.35",
    "oauth-sign": "~0.9.0",
    "qs": "~6.5.3",
    "safe-buffer": "^5.1.2",
    "stream-length": "^1.0.2",
    "uuid": "^8.3.2"
  },
  "scripts": {
    "test": "npm run lint && npm run test-ci && npm run test-browser",
    "test-ci": "taper tests/test-*.js",
    "test-cov": "istanbul cover tape tests/test-*.js",
    "test-browser": "node tests/browser/start.js",
    "lint": "standard"
  },
  "devDependencies": {
    "bluebird": "^3.2.1",
    "browserify": "^16.5.2",
    "browserify-istanbul": "^3.0.0",
    "buffer-equal": "^1.0.1",
    "codecov": "^3.0.4",
    "coveralls": "^3.0.2",
    "function-bind": "^1.0.2",
    "istanbul": "^0.4.0",
    "karma": "^3.1.4",
    "karma-browserify": "^5.0.1",
    "karma-chrome-launcher": "^3.1.1",
    "karma-cli": "^1.0.0",
    "karma-coverage": "^1.0.0",
    "karma-tap": "^3.0.1",
    "postman-url-encoder": "^3.0.6",
    "puppeteer": "^1.20.0",
    "rimraf": "^2.2.8",
    "server-destroy": "^1.0.1",
    "standard": "^9.0.0",
    "tape": "^4.6.0",
    "taper": "^0.5.0"
  }
}

# Request - Simplified HTTP client

This is a fork of the excellent `request` module, which is used inside Postman Runtime. It contains a few bugfixes that are not fixed in `request`:

- Handling of old-style deflate responses: https://github.com/request/request/issues/2197
- Correct encoding of URL Parameters: https://github.com/nodejs/node/issues/8321
- Redirect behavior for 307 responses when Host header is set: https://github.com/request/request/issues/2666
- Fix missing `content-length` header for streaming requests: https://github.com/request/request/issues/316
- Exception handling for large form-data: https://github.com/request/request/issues/1561
- Added feature to bind on stream emits via options
- Allowed sending request body with HEAD method
- Added option to retain `authorization` header when a redirect happens to a different hostname
- Reinitialize FormData stream on 307 or 308 redirects
- Respect form-data fields ordering
- Fixed authentication leak in 307 and 308 redirects
- Added `secureConnect` to timings and `secureHandshake` to timingPhases
- Fixed `Request~getNewAgent` to account for `passphrase` while generating poolKey
- Added support for extending the root CA certificates
- Added `verbose` mode to bubble up low-level request-response information

## Super simple to use

Request is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.

```js
const request = require('postman-request');
request('http://www.google.com', function (error, response, body) {
  console.log('error:', error); // Print the error if one occurred
  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received
  console.log('body:', body); // Print the HTML for the Google homepage.
});
```


## Table of contents

- [Streaming](#streaming)
- [Promises & Async/Await](#promises--asyncawait)
- [Forms](#forms)
- [HTTP Authentication](#http-authentication)
- [Custom HTTP Headers](#custom-http-headers)
- [OAuth Signing](#oauth-signing)
- [Proxies](#proxies)
- [Unix Domain Sockets](#unix-domain-sockets)
- [TLS/SSL Protocol](#tlsssl-protocol)
- [Support for HAR 1.2](#support-for-har-12)
- [**All Available Options**](#requestoptions-callback)

Request also offers [convenience methods](#convenience-methods) like
`request.defaults` and `request.post`, and there are
lots of [usage examples](#examples) and several
[debugging techniques](#debugging).


---


## Streaming

You can stream any response to a file stream.

```js
request('http://google.com/doodle.png').pipe(fs.createWriteStream('doodle.png'))
```

You can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types (in this case `application/json`) and use the proper `content-type` in the PUT request (if the headers don’t already provide one).

```js
fs.createReadStream('file.json').pipe(request.put('http://mysite.com/obj.json'))
```

Request can also `pipe` to itself. When doing so, `content-type` and `content-length` are preserved in the PUT headers.

```js
request.get('http://google.com/img.png').pipe(request.put('http://mysite.com/img.png'))
```

Request emits a "response" event when a response is received. The `response` argument will be an instance of [http.IncomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage).

```js
request
  .get('http://google.com/img.png')
  .on('response', function(response) {
    console.log(response.statusCode) // 200
    console.log(response.headers['content-type']) // 'image/png'
  })
  .pipe(request.put('http://mysite.com/img.png'))
```

To easily handle errors when streaming requests, listen to the `error` event before piping:

```js
request
  .get('http://mysite.com/doodle.png')
  .on('error', function(err) {
    console.log(err)
  })
  .pipe(fs.createWriteStream('doodle.png'))
```

Now let’s get fancy.

```js
http.createServer(function (req, resp) {
  if (req.url === '/doodle.png') {
    if (req.method === 'PUT') {
      req.pipe(request.put('http://mysite.com/doodle.png'))
    } else if (req.method === 'GET' || req.method === 'HEAD') {
      request.get('http://mysite.com/doodle.png').pipe(resp)
    }
  }
})
```

You can also `pipe()` from `http.ServerRequest` instances, as well as to `http.ServerResponse` instances. The HTTP method, headers, and entity-body data will be sent. Which means that, if you don't really care about security, you can do:

```js
http.createServer(function (req, resp) {
  if (req.url === '/doodle.png') {
    const x = request('http://mysite.com/doodle.png')
    req.pipe(x)
    x.pipe(resp)
  }
})
```

And since `pipe()` returns the destination stream in ≥ Node 0.5.x you can do one line proxying. :)

```js
req.pipe(request('http://mysite.com/doodle.png')).pipe(resp)
```

Also, none of this new functionality conflicts with requests previous features, it just expands them.

```js
const r = request.defaults({'proxy':'http://localproxy.com'})

http.createServer(function (req, resp) {
  if (req.url === '/doodle.png') {
    r.get('http://google.com/doodle.png').pipe(resp)
  }
})
```

You can still use intermediate proxies, the requests will still follow HTTP forwards, etc.

[back to top](#table-of-contents)


---


## Promises & Async/Await

`request` supports both streaming and callback interfaces natively. If you'd like `request` to return a Promise instead, you can use an alternative interface wrapper for `request`. These wrappers can be useful if you prefer to work with Promises, or if you'd like to use `async`/`await` in ES2017.

Several alternative interfaces are provided by the request team, including:
- [`request-promise`](https://github.com/request/request-promise) (uses [Bluebird](https://github.com/petkaantonov/bluebird) Promises)
- [`request-promise-native`](https://github.com/request/request-promise-native) (uses native Promises)
- [`request-promise-any`](https://github.com/request/request-promise-any) (uses [any-promise](https://www.npmjs.com/package/any-promise) Promises)

Also, [`util.promisify`](https://nodejs.org/api/util.html#util_util_promisify_original), which is available from Node.js v8.0 can be used to convert a regular function that takes a callback to return a promise instead.


[back to top](#table-of-contents)


---


## Forms

`request` supports `application/x-www-form-urlencoded` and `multipart/form-data` form uploads. For `multipart/related` refer to the `multipart` API.


#### application/x-www-form-urlencoded (URL-Encoded Forms)

URL-encoded forms are simple.

```js
request.post('http://service.com/upload', {form:{key:'value'}})
// or
request.post('http://service.com/upload').form({key:'value'})
// or
request.post({url:'http://service.com/upload', form: {key:'value'}}, function(err,httpResponse,body){ /* ... */ })
```


#### multipart/form-data (Multipart Form Uploads)

For `multipart/form-data` we use the [form-data](https://github.com/form-data/form-data) library by [@felixge](https://github.com/felixge). For the most cases, you can pass your upload form data via the `formData` option.


```js
const formData = {
  // Pass a simple key-value pair
  my_field: 'my_value',
  // Pass data via Buffers
  my_buffer: Buffer.from([1, 2, 3]),
  // Pass data via Streams
  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),
  // Pass multiple values /w an Array
  attachments: [
    fs.createReadStream(__dirname + '/attachment1.jpg'),
    fs.createReadStream(__dirname + '/attachment2.jpg')
  ],
  // Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS}
  // Use case: for some types of streams, you'll need to provide "file"-related information manually.
  // See the `form-data` README for more information about options: https://github.com/form-data/form-data
  custom_file: {
    value:  fs.createReadStream('/dev/urandom'),
    options: {
      filename: 'topsecret.jpg',
      contentType: 'image/jpeg'
    }
  }
};
request.post({url:'http://service.com/upload', formData: formData}, function optionalCallback(err, httpResponse, body) {
  if (err) {
    return console.error('upload failed:', err);
  }
  console.log('Upload successful!  Server responded with:', body);
});
```

For advanced cases, you can access the form-data object itself via `r.form()`. This can be modified until the request is fired on the next cycle of the event-loop. (Note that this calling `form()` will clear the currently set form data for that request.)

```js
// NOTE: Advanced use-case, for normal use see 'formData' usage above
const r = request.post('http://service.com/upload', function optionalCallback(err, httpResponse, body) {...})
const form = r.form();
form.append('my_field', 'my_value');
form.append('my_buffer', Buffer.from([1, 2, 3]));
form.append('custom_file', fs.createReadStream(__dirname + '/unicycle.jpg'), {filename: 'unicycle.jpg'});
```
See the [form-data README](https://github.com/form-data/form-data) for more information & examples.


#### multipart/related

Some variations in different HTTP implementations require a newline/CRLF before, after, or both before and after the boundary of a `multipart/related` request (using the multipart option). This has been observed in the .NET WebAPI version 4.0. You can turn on a boundary preambleCRLF or postamble by passing them as `true` to your request options.

```js
  request({
    method: 'PUT',
    preambleCRLF: true,
    postambleCRLF: true,
    uri: 'http://service.com/upload',
    multipart: [
      {
        'content-type': 'application/json',
        body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})
      },
      { body: 'I am an attachment' },
      { body: fs.createReadStream('image.png') }
    ],
    // alternatively pass an object containing additional options
    multipart: {
      chunked: false,
      data: [
        {
          'content-type': 'application/json',
          body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})
        },
        { body: 'I am an attachment' }
      ]
    }
  },
  function (error, response, body) {
    if (error) {
      return console.error('upload failed:', error);
    }
    console.log('Upload successful!  Server responded with:', body);
  })
```

[back to top](#table-of-contents)


---


## HTTP Authentication

```js
request.get('http://some.server.com/').auth('username', 'password', false);
// or
request.get('http://some.server.com/', {
  'auth': {
    'user': 'username',
    'pass': 'password',
    'sendImmediately': false
  }
});
// or
request.get('http://some.server.com/').auth(null, null, true, 'bearerToken');
// or
request.get('http://some.server.com/', {
  'auth': {
    'bearer': 'bearerToken'
  }
});
```

If passed as an option, `auth` should be a hash containing values:

- `user` || `username`
- `pass` || `password`
- `sendImmediately` (optional)
- `bearer` (optional)

The method form takes parameters
`auth(username, password, sendImmediately, bearer)`.

`sendImmediately` defaults to `true`, which causes a basic or bearer
authentication header to be sent. If `sendImmediately` is `false`, then
`request` will retry with a proper authentication header after receiving a
`401` response from the server (which must contain a `WWW-Authenticate` header
indicating the required authentication method).

Note that you can also specify basic authentication using the URL itself, as
detailed in [RFC 1738](http://www.ietf.org/rfc/rfc1738.txt). Simply pass the
`user:password` before the host with an `@` sign:

```js
const username = 'username',
    password = 'password',
    url = 'http://' + username + ':' + password + '@some.server.com';

request({url}, function (error, response, body) {
   // Do more stuff with 'body' here
});
```

Digest authentication is supported, but it only works with `sendImmediately`
set to `false`; otherwise `request` will send basic authentication on the
initial request, which will probably cause the request to fail.

Bearer authentication is supported, and is activated when the `bearer` value is
available. The value may be either a `String` or a `Function` returning a
`String`. Using a function to supply the bearer token is particularly useful if
used in conjunction with `defaults` to allow a single function to supply the
last known token at the time of sending a request, or to compute one on the fly.

[back to top](#table-of-contents)


---


## Custom HTTP Headers

HTTP Headers, such as `User-Agent`, can be set in the `options` object.
In the example below, we call the github API to find out the number
of stars and forks for the request repository. This requires a
custom `User-Agent` header as well as https.

```js
const request = require('postman-request');

const options = {
  url: 'https://api.github.com/repos/request/request',
  headers: {
    'User-Agent': 'postman-request'
  }
};

function callback(error, response, body) {
  if (!error && response.statusCode == 200) {
    const info = JSON.parse(body);
    console.log(info.stargazers_count + " Stars");
    console.log(info.forks_count + " Forks");
  }
}

request(options, callback);
```

### Blacklisting headers

Use `options.blacklistHeaders` option to blacklist the list of headers from requests and redirects.

```js
var options = {
  setHost: false, // set false to disable addition of `Host` header
  blacklistHeaders: ['connection', 'content-length', 'transfer-encoding']
}

request.post('http://localhost:3000', options, function(err, res, body) {
    // "POST / HTTP/1.1\r\n\r\n"
});
```

[back to top](#table-of-contents)


---


## OAuth Signing

[OAuth version 1.0](https://tools.ietf.org/html/rfc5849) is supported. The
default signing algorithm is
[HMAC-SHA1](https://tools.ietf.org/html/rfc5849#section-3.4.2):

```js
// OAuth1.0 - 3-legged server side flow (Twitter example)
// step 1
const qs = require('querystring')
  , oauth =
    { callback: 'http://mysite.com/callback/'
    , consumer_key: CONSUMER_KEY
    , consumer_secret: CONSUMER_SECRET
    }
  , url = 'https://api.twitter.com/oauth/request_token'
  ;
request.post({url:url, oauth:oauth}, function (e, r, body) {
  // Ideally, you would take the body in the response
  // and construct a URL that a user clicks on (like a sign in button).
  // The verifier is only available in the response after a user has
  // verified with twitter that they are authorizing your app.

  // step 2
  const req_data = qs.parse(body)
  const uri = 'https://api.twitter.com/oauth/authenticate'
    + '?' + qs.stringify({oauth_token: req_data.oauth_token})
  // redirect the user to the authorize uri

  // step 3
  // after the user is redirected back to your server
  const auth_data = qs.parse(body)
    , oauth =
      { consumer_key: CONSUMER_KEY
      , consumer_secret: CONSUMER_SECRET
      , token: auth_data.oauth_token
      , token_secret: req_data.oauth_token_secret
      , verifier: auth_data.oauth_verifier
      }
    , url = 'https://api.twitter.com/oauth/access_token'
    ;
  request.post({url:url, oauth:oauth}, function (e, r, body) {
    // ready to make signed requests on behalf of the user
    const perm_data = qs.parse(body)
      , oauth =
        { consumer_key: CONSUMER_KEY
        , consumer_secret: CONSUMER_SECRET
        , token: perm_data.oauth_token
        , token_secret: perm_data.oauth_token_secret
        }
      , url = 'https://api.twitter.com/1.1/users/show.json'
      , qs =
        { screen_name: perm_data.screen_name
        , user_id: perm_data.user_id
        }
      ;
    request.get({url:url, oauth:oauth, qs:qs, json:true}, function (e, r, user) {
      console.log(user)
    })
  })
})
```

For [RSA-SHA1 signing](https://tools.ietf.org/html/rfc5849#section-3.4.3), make
the following changes to the OAuth options object:
* Pass `signature_method : 'RSA-SHA1'`
* Instead of `consumer_secret`, specify a `private_key` string in
  [PEM format](http://how2ssl.com/articles/working_with_pem_files/)

For [PLAINTEXT signing](http://oauth.net/core/1.0/#anchor22), make
the following changes to the OAuth options object:
* Pass `signature_method : 'PLAINTEXT'`

To send OAuth parameters via query params or in a post body as described in The
[Consumer Request Parameters](http://oauth.net/core/1.0/#consumer_req_param)
section of the oauth1 spec:
* Pass `transport_method : 'query'` or `transport_method : 'body'` in the OAuth
  options object.
* `transport_method` defaults to `'header'`

To use [Request Body Hash](https://oauth.googlecode.com/svn/spec/ext/body_hash/1.0/oauth-bodyhash.html) you can either
* Manually generate the body hash and pass it as a string `body_hash: '...'`
* Automatically generate the body hash by passing `body_hash: true`

[back to top](#table-of-contents)


---


## Proxies

If you specify a `proxy` option, then the request (and any subsequent
redirects) will be sent via a connection to the proxy server.

If your endpoint is an `https` url, and you are using a proxy, then
request will send a `CONNECT` request to the proxy server *first*, and
then use the supplied connection to connect to the endpoint.

That is, first it will make a request like:

```
HTTP/1.1 CONNECT endpoint-server.com:80
Host: proxy-server.com
User-Agent: whatever user agent you specify
```

and then the proxy server make a TCP connection to `endpoint-server`
on port `80`, and return a response that looks like:

```
HTTP/1.1 200 OK
```

At this point, the connection is left open, and the client is
communicating directly with the `endpoint-server.com` machine.

See [the wikipedia page on HTTP Tunneling](https://en.wikipedia.org/wiki/HTTP_tunnel)
for more information.

By default, when proxying `http` traffic, request will simply make a
standard proxied `http` request. This is done by making the `url`
section of the initial line of the request a fully qualified url to
the endpoint.

For example, it will make a single request that looks like:

```
HTTP/1.1 GET http://endpoint-server.com/some-url
Host: proxy-server.com
Other-Headers: all go here

request body or whatever
```

Because a pure "http over http" tunnel offers no additional security
or other features, it is generally simpler to go with a
straightforward HTTP proxy in this case. However, if you would like
to force a tunneling proxy, you may set the `tunnel` option to `true`.

You can also make a standard proxied `http` request by explicitly setting
`tunnel : false`, but **note that this will allow the proxy to see the traffic
to/from the destination server**.

If you are using a tunneling proxy, you may set the
`proxyHeaderWhiteList` to share certain headers with the proxy.

You can also set the `proxyHeaderExclusiveList` to share certain
headers only with the proxy and not with destination host.

By default, this set is:

```
accept
accept-charset
accept-encoding
accept-language
accept-ranges
cache-control
content-encoding
content-language
content-length
content-location
content-md5
content-range
content-type
connection
date
expect
max-forwards
pragma
proxy-authorization
referer
te
transfer-encoding
user-agent
via
```

Note that, when using a tunneling proxy, the `proxy-authorization`
header and any headers from custom `proxyHeaderExclusiveList` are
*never* sent to the endpoint server, but only to the proxy server.


### Controlling proxy behaviour using environment variables

The following environment variables are respected by `request`:

 * `HTTP_PROXY` / `http_proxy`
 * `HTTPS_PROXY` / `https_proxy`
 * `NO_PROXY` / `no_proxy`

When `HTTP_PROXY` / `http_proxy` are set, they will be used to proxy non-SSL requests that do not have an explicit `proxy` configuration option present. Similarly, `HTTPS_PROXY` / `https_proxy` will be respected for SSL requests that do not have an explicit `proxy` configuration option. It is valid to define a proxy in one of the environment variables, but then override it for a specific request, using the `proxy` configuration option. Furthermore, the `proxy` configuration option can be explicitly set to false / null to opt out of proxying altogether for that request.

`request` is also aware of the `NO_PROXY`/`no_proxy` environment variables. These variables provide a granular way to opt out of proxying, on a per-host basis. It should contain a comma separated list of hosts to opt out of proxying. It is also possible to opt of proxying when a particular destination port is used. Finally, the variable may be set to `*` to opt out of the implicit proxy configuration of the other environment variables.

Here's some examples of valid `no_proxy` values:

 * `google.com` - don't proxy HTTP/HTTPS requests to Google.
 * `google.com:443` - don't proxy HTTPS requests to Google, but *do* proxy HTTP requests to Google.
 * `google.com:443, yahoo.com:80` - don't proxy HTTPS requests to Google, and don't proxy HTTP requests to Yahoo!
 * `*` - ignore `https_proxy`/`http_proxy` environment variables altogether.

[back to top](#table-of-contents)


---


## UNIX Domain Sockets

`request` supports making requests to [UNIX Domain Sockets](https://en.wikipedia.org/wiki/Unix_domain_socket). To make one, use the following URL scheme:

```js
/* Pattern */ 'http://unix:SOCKET:PATH'
/* Example */ request.get('http://unix:/absolute/path/to/unix.socket:/request/path')
```

Note: The `SOCKET` path is assumed to be absolute to the root of the host file system.

[back to top](#table-of-contents)


---


## TLS/SSL Protocol

TLS/SSL Protocol options, such as `cert`, `key` and `passphrase`, can be
set directly in `options` object, in the `agentOptions` property of the `options` object, or even in `https.globalAgent.options`. Keep in mind that, although `agentOptions` allows for a slightly wider range of configurations, the recommended way is via `options` object directly, as using `agentOptions` or `https.globalAgent.options` would not be applied in the same way in proxied environments (as data travels through a TLS connection instead of an http/https agent).

```js
const fs = require('fs')
    , path = require('path')
    , certFile = path.resolve(__dirname, 'ssl/client.crt')
    , keyFile = path.resolve(__dirname, 'ssl/client.key')
    , caFile = path.resolve(__dirname, 'ssl/ca.cert.pem')
    , request = require('postman-request');

const options = {
    url: 'https://api.some-server.com/',
    cert: fs.readFileSync(certFile),
    key: fs.readFileSync(keyFile),
    passphrase: 'password',
    ca: fs.readFileSync(caFile)
};

request.get(options);
```

### Using `options.agentOptions`

In the example below, we call an API that requires client side SSL certificate
(in PEM format) with passphrase protected private key (in PEM format) and disable the SSLv3 protocol:

```js
const fs = require('fs')
    , path = require('path')
    , certFile = path.resolve(__dirname, 'ssl/client.crt')
    , keyFile = path.resolve(__dirname, 'ssl/client.key')
    , request = require('postman-request');

const options = {
    url: 'https://api.some-server.com/',
    agentOptions: {
        cert: fs.readFileSync(certFile),
        key: fs.readFileSync(keyFile),
        // Or use `pfx` property replacing `cert` and `key` when using private key, certificate and CA certs in PFX or PKCS12 format:
        // pfx: fs.readFileSync(pfxFilePath),
        passphrase: 'password',
        securityOptions: 'SSL_OP_NO_SSLv3'
    }
};

request.get(options);
```

It is able to force using SSLv3 only by specifying `secureProtocol`:

```js
request.get({
    url: 'https://api.some-server.com/',
    agentOptions: {
        secureProtocol: 'SSLv3_method'
    }
});
```

It is possible to accept other certificates than those signed by generally allowed Certificate Authorities (CAs).
This can be useful, for example,  when using self-signed certificates.
To require a different root certificate, you can specify the signing CA by adding the contents of the CA's certificate file to the `agentOptions`.
The certificate the domain presents must be signed by the root certificate specified:

```js
request.get({
    url: 'https://api.some-server.com/',
    agentOptions: {
        ca: fs.readFileSync('ca.cert.pem')
    }
});
```

The `ca` value can be an array of certificates, in the event you have a private or internal corporate public-key infrastructure hierarchy. For example, if you want to connect to https://api.some-server.com which presents a key chain consisting of:
1. its own public key, which is signed by:
2. an intermediate "Corp Issuing Server", that is in turn signed by:
3. a root CA "Corp Root CA";

you can configure your request as follows:

```js
request.get({
    url: 'https://api.some-server.com/',
    agentOptions: {
        ca: [
          fs.readFileSync('Corp Issuing Server.pem'),
          fs.readFileSync('Corp Root CA.pem')
        ]
    }
});
```

NOTE: If using `protocolVersion` anything other than `http1`, make sure that the agent is capable of handling requests with the specified protocol version. For example, if `protocolVersion` is set to `http1`, the agent should be an instance of `http.Agent`.

### Using `options.verbose`

Using this option the debug object holds low level request response information like remote address, negotiated ciphers etc. Example debug object:

```js
request({url: 'https://www.google.com', verbose: true}, function (error, response, body, debug) {
  // debug:
  /*
  [
    {
      "request": {
        "method": "GET",
        "href": "https://www.google.com/",
        "httpVersion": "1.1"
      },
      "session": {
        "id": "9a1ac0d7-b757-48ad-861c-d59d6af5f43f",
        "reused": false,
        "data": {
          "addresses": {
            "local": {
              "address": "8.8.4.4",
              "family": "IPv4",
              "port": 61632
            },
            "remote": {
              "address": "172.217.31.196",
              "family": "IPv4",
              "port": 443
            }
          },
          "tls": {
            "reused": false,
            "authorized": true,
            "authorizationError": null,
            "cipher": {
              "name": "ECDHE-ECDSA-AES128-GCM-SHA256",
              "version": "TLSv1/SSLv3"
            },
            "protocol": "TLSv1.2",
            "ephemeralKeyInfo": {
              "type": "ECDH",
              "name": "X25519",
              "size": 253
            },
            "peerCertificate": {
              "subject": {
                "country": "US",
                "stateOrProvince": "California",
                "locality": "Mountain View",
                "organization": "Google LLC",
                "commonName": "www.google.com",
                "alternativeNames": "DNS:www.google.com"
              },
              "issuer": {
                "country": "US",
                "organization": "Google Trust Services",
                "commonName": "Google Internet Authority G3"
              },
              "validFrom": "Nov 11 09:52:22 2009 GMT",
              "validTo": "Nov 6 09:52:22 2029 GMT",
              "fingerprint": "DF:6B:95:81:C6:03:EB:ED:48:EB:6C:CF:EE:FE:E6:1F:AD:01:78:34",
              "serialNumber": "3A15F4C87FB4D33993D3EEB3BF4AE5E4"
            }
          }
        }
      },
      "response": {
        "statusCode": 200,
        "httpVersion": "1.1".
        "downloadedBytes": 1234,
      },
      "timingStart": 1552908287924,
      "timingStartTimer": 805.690674,
      "timings": {
        "socket": 28.356426000000056,
        "lookup": 210.3752320000001,
        "connect": 224.57993499999998,
        "secureConnect": 292.80315800000017,
        "response": 380.61268100000007,
        "end": 401.8332560000001
      }
    }
  ]
  */
});
```


### Extending root CAs

The root CAs can be extended using the `extraCA` option. The file should consist of one or more trusted certificates in PEM format.

This is similar to [NODE_EXTRA_CA_CERTS](https://nodejs.org/api/cli.html#cli_node_extra_ca_certs_file). But, if `options.ca` is specified, those will be extended as well.

```js
// request with extra CA certs
request.get({
    url: 'https://api.some-server.com/',
    extraCA: fs.readFileSync('Extra CA Certificates .pem')
});
```

[back to top](#table-of-contents)


---

## Support for HAR 1.2

The `options.har` property will override the values: `url`, `method`, `qs`, `headers`, `form`, `formData`, `body`, `json`, as well as construct multipart data and read files from disk when `request.postData.params[].fileName` is present without a matching `value`.

A validation step will check if the HAR Request format matches the latest spec (v1.2) and will skip parsing if not matching.

```js
  const request = require('postman-request')
  request({
    // will be ignored
    method: 'GET',
    uri: 'http://www.google.com',

    // HTTP Archive Request Object
    har: {
      url: 'http://www.mockbin.com/har',
      method: 'POST',
      headers: [
        {
          name: 'content-type',
          value: 'application/x-www-form-urlencoded'
        }
      ],
      postData: {
        mimeType: 'application/x-www-form-urlencoded',
        params: [
          {
            name: 'foo',
            value: 'bar'
          },
          {
            name: 'hello',
            value: 'world'
          }
        ]
      }
    }
  })

  // a POST request will be sent to http://www.mockbin.com
  // with body an application/x-www-form-urlencoded body:
  // foo=bar&hello=world
```

[back to top](#table-of-contents)


---

## request(options, callback)

The first argument can be either a `url` or an `options` object. The only required option is `uri`; all others are optional.

- `uri` || `url` - fully qualified uri or a parsed url object from `url.parse()`
- `baseUrl` - fully qualified uri string used as the base url. Most useful with `request.defaults`, for example when you want to do many requests to the same domain. If `baseUrl` is `https://example.com/api/`, then requesting `/end/point?test=true` will fetch `https://example.com/api/end/point?test=true`. When `baseUrl` is given, `uri` must also be a string.
- `method` - http method (default: `"GET"`)
- `headers` - http headers (default: `{}`)
- `protocolVersion` - HTTP Protocol Version to use. Can be one of `auto|http1|http2` (default: `http1`). Is overridden to `http1` when sending a http request, using proxy, or running in a browser environment. 
---

- `qs` - object containing querystring values to be appended to the `uri`
- `qsParseOptions` - object containing options to pass to the [qs.parse](https://github.com/hapijs/qs#parsing-objects) method. Alternatively pass options to the [querystring.parse](https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_parse_str_sep_eq_options) method using this format `{sep:';', eq:':', options:{}}`
- `qsStringifyOptions` - object containing options to pass to the [qs.stringify](https://github.com/hapijs/qs#stringifying) method. Alternatively pass options to the  [querystring.stringify](https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_stringify_obj_sep_eq_options) method using this format `{sep:';', eq:':', options:{}}`. For example, to change the way arrays are converted to query strings using the `qs` module pass the `arrayFormat` option with one of `indices|brackets|repeat`
- `useQuerystring` - if true, use `querystring` to stringify and parse
  querystrings, otherwise use `qs` (default: `false`). Set this option to
  `true` if you need arrays to be serialized as `foo=bar&foo=baz` instead of the
  default `foo[0]=bar&foo[1]=baz`.

---

- `body` - entity body for PATCH, POST and PUT requests. Must be a `Buffer`, `String` or `ReadStream`. If `json` is `true`, then `body` must be a JSON-serializable object.
- `form` - when passed an object or a querystring, this sets `body` to a querystring representation of value, and adds `Content-type: application/x-www-form-urlencoded` header. When passed no options, a `FormData` instance is returned (and is piped to request). See "Forms" section above.
- `formData` - data to pass for a `multipart/form-data` request. See
  [Forms](#forms) section above.
- `multipart` - array of objects which contain their own headers and `body`
  attributes. Sends a `multipart/related` request. See [Forms](#forms) section
  above.
  - Alternatively you can pass in an object `{chunked: false, data: []}` where
    `chunked` is used to specify whether the request is sent in
    [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding)
    In non-chunked requests, data items with body streams are not allowed.
- `preambleCRLF` - append a newline/CRLF before the boundary of your `multipart/form-data` request.
- `postambleCRLF` - append a newline/CRLF at the end of the boundary of your `multipart/form-data` request.
- `json` - sets `body` to JSON representation of value and adds `Content-type: application/json` header. Additionally, parses the response body as JSON.
- `jsonReviver` - a [reviver function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) that will be passed to `JSON.parse()` when parsing a JSON response body.
- `jsonReplacer` - a [replacer function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) that will be passed to `JSON.stringify()` when stringifying a JSON request body.

---

- `auth` - a hash containing values `user` || `username`, `pass` || `password`, and `sendImmediately` (optional). See documentation above.
- `oauth` - options for OAuth HMAC-SHA1 signing. See documentation above.
- `hawk` - options for [Hawk signing](https://github.com/hueniverse/hawk). The `credentials` key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example).
- `aws` - `object` containing AWS signing information. Should have the properties `key`, `secret`, and optionally `session` (note that this only works for services that require session as part of the canonical string). Also requires the property `bucket`, unless you’re specifying your `bucket` as part of the path, or the request doesn’t use a bucket (i.e. GET Services). If you want to use AWS sign version 4 use the parameter `sign_version` with value `4` otherwise the default is version 2. If you are using SigV4, you can also include a `service` property that specifies the service name. **Note:** you need to `npm install aws4` first.
- `httpSignature` - options for the [HTTP Signature Scheme](https://github.com/joyent/node-http-signature/blob/master/http_signing.md) using [Joyent's library](https://github.com/joyent/node-http-signature). The `keyId` and `key` properties must be specified. See the docs for other options.

---

- `followRedirect` - follow HTTP 3xx responses as redirects (default: `true`). This property can also be implemented as function which gets `response` object as a single argument and should return `true` if redirects should continue or `false` otherwise.
- `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects (default: `false`)
- `followOriginalHttpMethod` - by default we redirect to HTTP method GET. you can enable this property to redirect to the original HTTP method (default: `false`)
- `followAuthorizationHeader` - retain `authorization` header when a redirect happens to a different hostname (default: `false`)
- `maxRedirects` - the maximum number of redirects to follow (default: `10`)
- `removeRefererHeader` - removes the referer header when a redirect happens (default: `false`). **Note:** if true, referer header set in the initial request is preserved during redirect chain.

---

- `encoding` - encoding to be used on `setEncoding` of response data. If `null`, the `body` is returned as a `Buffer`. Anything else **(including the default value of `undefined`)** will be passed as the [encoding](http://nodejs.org/api/buffer.html#buffer_buffer) parameter to `toString()` (meaning this is effectively `utf8` by default). (**Note:** if you expect binary data, you should set `encoding: null`.)
- `statusMessageEncoding` - if provided, this will be passed as the [encoding](http://nodejs.org/api/buffer.html#buffer_buffer) parameter to `toString()` to convert the status message buffer. Otherwise, status message will returned as a string with encoding type `latin1`. Providing a value in this option will result in force re-encoding of the status message which may not always be intended by the server - specifically in cases where  server returns a status message which when encoded again with a different character encoding results in some other characters. For example: If the server intentionally responds with `ð\x9F\x98\x8A` as status message but if the statusMessageEncoding option is set to `utf8`, then it would get converted to '😊'.
- `gzip` - if `true`, add an `Accept-Encoding` header to request compressed content encodings from the server (if not already present) and decode supported content encodings in the response. **Note:** Automatic decoding of the response content is performed on the body data returned through `request` (both through the `request` stream and passed to the callback function) but is not performed on the `response` stream (available from the `response` event) which is the unmodified `http.IncomingMessage` object which may contain compressed data. See example below.
- `brotli` - if `true`, add an `Accept-Encoding` header to request Brotli compressed content encodings from the server (if not already present).
- `jar` - if `true`, remember cookies for future use (or define your custom cookie jar; see examples section)

---

- `agent` - `http(s).Agent` instance to use
- `agentClass` - alternatively specify your agent's class name
- `agentOptions` - and pass its options. **Note:** for HTTPS see [tls API doc for TLS/SSL options](http://nodejs.org/api/tls.html#tls_tls_connect_options_callback) and the [documentation above](#using-optionsagentoptions).
- `agents` - Specify separate agent instances for HTTP and HTTPS requests. Required in case of HTTP to HTTPS redirects and vice versa. For example:
```js
request.defaults({
  agents: {
    http: new http.Agent(),
    https: {
      agentClass: https.Agent,
      agentOptions: { keepAlive: true }
    }
  }
})
```
- `forever` - set to `true` to use the [forever-agent](https://github.com/request/forever-agent) **Note:** Defaults to `http(s).Agent({keepAlive:true})` in node 0.12+
- `pool` - an object describing which agents to use for the request. If this option is omitted the request will use the global agent (as long as your options allow for it). Otherwise, request will search the pool for your custom agent. If no custom agent is found, a new agent will be created and added to the pool. **Note:** `pool` is used only when the `agent` option is not specified.
  - A `maxSockets` property can also be provided on the `pool` object to set the max number of sockets for all agents created (ex: `pool: {maxSockets: Infinity}`).
  - Note that if you are sending multiple requests in a loop and creating
    multiple new `pool` objects, `maxSockets` will not work as intended. To
    work around this, either use [`request.defaults`](#requestdefaultsoptions)
    with your pool options or create the pool object with the `maxSockets`
    property outside of the loop.
- `timeout` - integer containing number of milliseconds, controls two timeouts
  - Time to wait for a server to send response headers (and start the response body) before aborting the request.
    Note that if the underlying TCP connection cannot be established,
    the OS-wide TCP connection timeout will overrule the `timeout` option ([the
    default in Linux can be anywhere from 20-120 seconds][linux-timeout]).
  - Sets the socket to timeout after `timeout` milliseconds of inactivity on the socket.

[linux-timeout]: http://www.sekuda.com/overriding_the_default_linux_kernel_20_second_tcp_socket_connect_timeout

- `maxResponseSize` - Abort request if the response size exceeds this threshold (bytes).
- `agentIdleTimeout` - set to number of milliseconds after which the agent should be discarded for reuse
---

- `localAddress` - local interface to bind for network connections.
- `proxy` - an HTTP proxy to be used. Supports proxy Auth with Basic Auth, identical to support for the `url` parameter (by embedding the auth info in the `uri`)
- `strictSSL` - if `true`, requires SSL certificates be valid. **Note:** to use your own certificate authority, you need to specify an agent that was created with that CA as an option.
- `tunnel` - controls the behavior of
  [HTTP `CONNECT` tunneling](https://en.wikipedia.org/wiki/HTTP_tunnel#HTTP_CONNECT_tunneling)
  as follows:
   - `undefined` (default) - `true` if the destination is `https`, `false` otherwise
   - `true` - always tunnel to the destination by making a `CONNECT` request to
     the proxy
   - `false` - request the destination as a `GET` request.
- `proxyHeaderWhiteList` - a whitelist of headers to send to a
  tunneling proxy.
- `proxyHeaderExclusiveList` - a whitelist of headers to send
  exclusively to a tunneling proxy and not to destination.

---

- `disableUrlEncoding` - if `true`, it will not use postman-url-encoder to encode URL. It means that if URL is given as object, it will be used as it is without doing any encoding. But if URL is given as string, it will be encoded by Node while converting it to object.
- `urlParser` - it takes an object with two functions `parse` and `resolve` in it. The `parse` function is used to parse the URL string into URL object and the `resolve` function is used to resolve relative URLs with respect to base URL. If this option is not provided or it is provided but does not contain both (`parse` and `resolve`) methods, it will default to Node's `url.parse()` and `url.resolve()` methods.
- `time` - if `true`, the request-response cycle (including all redirects) is timed at millisecond resolution. When set, the following properties are added to the response object:
  - `elapsedTime` Duration of the entire request/response in milliseconds (*deprecated*).
  - `responseStartTime` Timestamp when the response began (in Unix Epoch milliseconds) (*deprecated*).
  - `timingStart` Timestamp of the start of the request (in Unix Epoch milliseconds).
  - `timings` Contains event timestamps in millisecond resolution relative to `timingStart`. If there were redirects, the properties reflect the timings of the final request in the redirect chain:
    - `socket` Relative timestamp when the [`http`](https://nodejs.org/api/http.html#http_event_socket) module's `socket` event fires. This happens when the socket is assigned to the request.
    - `lookup` Relative timestamp when the [`net`](https://nodejs.org/api/net.html#net_event_lookup) module's `lookup` event fires. This happens when the DNS has been resolved.
    - `connect`: Relative timestamp when the [`net`](https://nodejs.org/api/net.html#net_event_connect) module's `connect` event fires. This happens when the server acknowledges the TCP connection.
    - `secureConnect`: Relative timestamp when the [`tls`](https://nodejs.org/api/tls.html#tls_event_secureconnect) module's `secureconnect` event fires. This happens when the handshaking process for a new connection has successfully completed.
    - `response`: Relative timestamp when the [`http`](https://nodejs.org/api/http.html#http_event_response) module's `response` event fires. This happens when the first bytes are received from the server.
    - `end`: Relative timestamp when the last bytes of the response are received.
  - `timingPhases` Contains the durations of each request phase. If there were redirects, the properties reflect the timings of the final request in the redirect chain:
    - `wait`: Duration of socket initialization (`timings.socket`)
    - `dns`: Duration of DNS lookup (`timings.lookup` - `timings.socket`)
    - `tcp`: Duration of TCP connection (`timings.connect` - `timings.lookup`)
    - `secureHandshake`: Duration of SSL handshake (`timings.secureConnect` - `timings.connect`)
    - `firstByte`: Duration of HTTP server response (`timings.response` - `timings.connect`|`timings.secureConnect`)
    - `download`: Duration of HTTP download (`timings.end` - `timings.response`)
    - `total`: Duration entire HTTP round-trip (`timings.end`)

- `har` - a [HAR 1.2 Request Object](http://www.softwareishard.com/blog/har-12-spec/#request), will be processed from HAR format into options overwriting matching values *(see the [HAR 1.2 section](#support-for-har-12) for details)*
- `callback` - alternatively pass the request's callback in the options object

The callback argument gets 3 arguments:

1. An `error` when applicable (usually from [`http.ClientRequest`](http://nodejs.org/api/http.html#http_class_http_clientrequest) object)
2. An [`http.IncomingMessage`](https://nodejs.org/api/http.html#http_class_http_incomingmessage) object (Response object)
3. The third is the `response` body (`String` or `Buffer`, or JSON object if the `json` option is supplied)

[back to top](#table-of-contents)


---

## Convenience methods

There are also shorthand methods for different HTTP METHODs and some other conveniences.


### request.defaults(options)

This method **returns a wrapper** around the normal request API that defaults
to whatever options you pass to it.

**Note:** `request.defaults()` **does not** modify the global request API;
instead, it **returns a wrapper** that has your default settings applied to it.

**Note:** You can call `.defaults()` on the wrapper that is returned from
`request.defaults` to add/override defaults that were previously defaulted.

For example:
```js
//requests using baseRequest() will set the 'x-token' header
const baseRequest = request.defaults({
  headers: {'x-token': 'my-token'}
})

//requests using specialRequest() will include the 'x-token' header set in
//baseRequest and will also include the 'special' header
const specialRequest = baseRequest.defaults({
  headers: {special: 'special value'}
})
```

### request.METHOD()

These HTTP method convenience functions act just like `request()` but with a default method already set for you:

- *request.get()*: Defaults to `method: "GET"`.
- *request.post()*: Defaults to `method: "POST"`.
- *request.put()*: Defaults to `method: "PUT"`.
- *request.patch()*: Defaults to `method: "PATCH"`.
- *request.del() / request.delete()*: Defaults to `method: "DELETE"`.
- *request.head()*: Defaults to `method: "HEAD"`.
- *request.options()*: Defaults to `method: "OPTIONS"`.

### request.cookie()

Function that creates a new cookie.

```js
request.cookie('key1=value1')
```
### request.jar()

Function that creates a new cookie jar.

```js
request.jar()
```

### response.caseless.get('header-name')

Function that returns the specified response header field using a [case-insensitive match](https://tools.ietf.org/html/rfc7230#section-3.2)

```js
request('http://www.google.com', function (error, response, body) {
  // print the Content-Type header even if the server returned it as 'content-type' (lowercase)
  console.log('Content-Type is:', response.caseless.get('Content-Type'));
});
```

[back to top](#table-of-contents)


---


## Debugging

There are at least three ways to debug the operation of `request`:

1. Launch the node process like `NODE_DEBUG=request node script.js`
   (`lib,request,otherlib` works too).

2. Set `require('postman-request').debug = true` at any time (this does the same thing
   as #1).

3. Use the [request-debug module](https://github.com/request/request-debug) to
   view request and response headers and bodies.

[back to top](#table-of-contents)


---

## Timeouts

Most requests to external servers should have a timeout attached, in case the
server is not responding in a timely manner. Without a timeout, your code may
have a socket open/consume resources for minutes or more.

There are two main types of timeouts: **connection timeouts** and **read
timeouts**. A connect timeout occurs if the timeout is hit while your client is
attempting to establish a connection to a remote machine (corresponding to the
[connect() call][connect] on the socket). A read timeout occurs any time the
server is too slow to send back a part of the response.

These two situations have widely different implications for what went wrong
with the request, so it's useful to be able to distinguish them. You can detect
timeout errors by checking `err.code` for an 'ETIMEDOUT' value. Further, you
can detect whether the timeout was a connection timeout by checking if the
`err.connect` property is set to `true`.

```js
request.get('http://10.255.255.1', {timeout: 1500}, function(err) {
    console.log(err.code === 'ETIMEDOUT');
    // Set to `true` if the timeout was a connection timeout, `false` or
    // `undefined` otherwise.
    console.log(err.connect === true);
    process.exit(0);
});
```

[connect]: http://linux.die.net/man/2/connect

## Examples:

```js
  const request = require('postman-request')
    , rand = Math.floor(Math.random()*100000000).toString()
    ;
  request(
    { method: 'PUT'
    , uri: 'http://mikeal.iriscouch.com/testjs/' + rand
    , multipart:
      [ { 'content-type': 'application/json'
        ,  body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})
        }
      , { body: 'I am an attachment' }
      ]
    }
  , function (error, response, body) {
      if(response.statusCode == 201){
        console.log('document saved as: http://mikeal.iriscouch.com/testjs/'+ rand)
      } else {
        console.log('error: '+ response.statusCode)
        console.log(body)
      }
    }
  )
```

For backwards-compatibility, response compression is not supported by default.
To accept gzip-compressed responses, set the `gzip` option to `true`. Note
that the body data passed through `request` is automatically decompressed
while the response object is unmodified and will contain compressed data if
the server sent a compressed response.

```js
  const request = require('postman-request')
  request(
    { method: 'GET'
    , uri: 'http://www.google.com'
    , gzip: true
    }
  , function (error, response, body) {
      // body is the decompressed response body
      console.log('server encoded the data as: ' + (response.headers['content-encoding'] || 'identity'))
      console.log('the decoded data is: ' + body)
    }
  )
  .on('data', function(data) {
    // decompressed data as it is received
    console.log('decoded chunk: ' + data)
  })
  .on('response', function(response) {
    // unmodified http.IncomingMessage object
    response.on('data', function(data) {
      // compressed data as it is received
      console.log('received ' + data.length + ' bytes of compressed data')
    })
  })
```

Cookies are disabled by default (else, they would be used in subsequent requests). To enable cookies, set `jar` to `true` (either in `defaults` or `options`).

```js
const request = request.defaults({jar: true})
request('http://www.google.com', function () {
  request('http://images.google.com')
})
```

To use a custom cookie jar (instead of `request`’s global cookie jar), set `jar` to an instance of `request.jar()` (either in `defaults` or `options`)

```js
const j = request.jar()
const request = request.defaults({jar:j})
request('http://www.google.com', function () {
  request('http://images.google.com')
})
```

OR

```js
const j = request.jar();
const cookie = request.cookie('key1=value1');
const url = 'http://www.google.com';
j.setCookie(cookie, url);
request({url: url, jar: j}, function () {
  request('http://images.google.com')
})
```

To use a custom cookie store (such as a
[`FileCookieStore`](https://github.com/mitsuru/tough-cookie-filestore)
which supports saving to and restoring from JSON files), pass it as a parameter
to `request.jar()`:

```js
const FileCookieStore = require('tough-cookie-filestore');
// NOTE - currently the 'cookies.json' file must already exist!
const j = request.jar(new FileCookieStore('cookies.json'));
request = request.defaults({ jar : j })
request('http://www.google.com', function() {
  request('http://images.google.com')
})
```

The cookie store must be a
[`tough-cookie`](https://github.com/SalesforceEng/tough-cookie)
store and it must support asynchronous operations; see the
[`CookieStore` API docs](https://github.com/SalesforceEng/tough-cookie#api)
for details.

To inspect your cookie jar after a request:

```js
const j = request.jar()
request({url: 'http://www.google.com', jar: j}, function () {
  const cookie_string = j.getCookieStringSync(url); // "key1=value1; key2=value2; ..."
  const cookies = j.getCookiesSync(url);
  // [{key: 'key1', value: 'value1', domain: "www.google.com", ...}, ...]
})
```

[back to top](#table-of-contents)
'use strict'

var tls = require('tls')
var http = require('http')
var https = require('https')
var http2 = require('./lib/http2')
var autohttp2 = require('./lib/autohttp')
var url = require('url')
var util = require('util')
var stream = require('stream')
var zlib = require('zlib')
var aws2 = require('aws-sign2')
var aws4 = require('aws4')
var uuid = require('uuid').v4
var httpSignature = require('http-signature')
var mime = require('mime-types')
var caseless = require('caseless')
var ForeverAgent = require('forever-agent')
var FormData = require('@postman/form-data')
var extend = require('extend')
var isstream = require('isstream')
var streamLength = require('stream-length')
var isTypedArray = require('is-typedarray').strict
var helpers = require('./lib/helpers')
var cookies = require('./lib/cookies')
var getProxyFromURI = require('./lib/getProxyFromURI')
var Querystring = require('./lib/querystring').Querystring
var Har = require('./lib/har').Har
var Auth = require('./lib/auth').Auth
var OAuth = require('./lib/oauth').OAuth
var hawk = require('./lib/hawk')
var Multipart = require('./lib/multipart').Multipart
var Redirect = require('./lib/redirect').Redirect
var Tunnel = require('./lib/tunnel').Tunnel
var Buffer = require('safe-buffer').Buffer
var inflate = require('./lib/inflate')
var urlParse = require('./lib/url-parse')
var safeStringify = helpers.safeStringify
var isReadStream = helpers.isReadStream
var toBase64 = helpers.toBase64
var defer = helpers.defer
var copy = helpers.copy
var version = helpers.version
var now = helpers.now
var SizeTrackerStream = helpers.SizeTrackerStream
var globalCookieJar = cookies.jar()

var globalPool = {}

function filterForNonReserved (reserved, options) {
  // Filter out properties that are not reserved.
  // Reserved values are passed in at call site.

  var object = {}
  for (var i in options) {
    var notReserved = (reserved.indexOf(i) === -1)
    if (notReserved) {
      object[i] = options[i]
    }
  }
  return object
}

function filterOutReservedFunctions (reserved, options) {
  // Filter out properties that are functions and are reserved.
  // Reserved values are passed in at call site.

  var object = {}
  for (var i in options) {
    var isReserved = !(reserved.indexOf(i) === -1)
    var isFunction = (typeof options[i] === 'function')
    if (!(isReserved && isFunction)) {
      object[i] = options[i]
    }
  }
  return object
}

function transformFormData (formData) {
  // Transform the object representation of form-data fields to array representation.
  // This might not preserve the order of form fields defined in object representation.
  // But, this transformation is required to support backward compatibility.
  //
  // Form-Data should be stored as an array to respect the fields order.
  // RFC 7578#section-5.2  Ordered Fields and Duplicated Field Names
  // https://tools.ietf.org/html/rfc7578#section-5.2

  var transformedFormData = []
  var appendFormParam = function (key, param) {
    transformedFormData.push({
      key: key,
      value: param && param.hasOwnProperty('value') ? param.value : param,
      options: param && param.hasOwnProperty('options') ? param.options : undefined
    })
  }
  for (var formKey in formData) {
    if (formData.hasOwnProperty(formKey)) {
      var formValue = formData[formKey]
      if (Array.isArray(formValue)) {
        for (var j = 0; j < formValue.length; j++) {
          appendFormParam(formKey, formValue[j])
        }
      } else {
        appendFormParam(formKey, formValue)
      }
    }
  }
  return transformedFormData
}

// Return a simpler request object to allow serialization
function requestToJSON () {
  var self = this
  return {
    uri: self.uri,
    method: self.method,
    headers: self.headers
  }
}

// Return a simpler response object to allow serialization
function responseToJSON () {
  var self = this
  return {
    statusCode: self.statusCode,
    body: self.body,
    headers: self.headers,
    request: requestToJSON.call(self.request)
  }
}

/**
 * Return request headers in [{key: headerName, value: headerValue}] form
 * @param {String} [headerString] - headers string created by Node stored in ClientRequest._header
 *
 * */
function parseRequestHeaders (headerString) {
  var arr = headerString.split('\r\n')
  var acc = []

  // first element of accumulator is not a header
  // last two elements are empty strings
  for (var i = 1; i < arr.length - 2; i++) {
    // HTTP/2 specific headers beging with :, so we find the index of the first colon skipping the first character
    var splitIndex = arr[i].indexOf(':', 1)

    acc.push({
      key: arr[i].slice(0, splitIndex),
      value: arr[i].slice(splitIndex + 2)
    })
  }

  return acc
}

/**
 * Return response headers in [{key: headerName, value: headerValue}] form
 * @param {Array} [rawHeaders] - https://nodejs.org/api/http.html#http_message_rawheaders
 *
 * */
function parseResponseHeaders (rawHeaders) {
  var acc = []

  for (var i = 0; i < rawHeaders.length; i = i + 2) {
    acc.push({
      key: rawHeaders[i],
      value: rawHeaders[i + 1]
    })
  }

  return acc
}

function Request (options) {
  // if given the method property in options, set property explicitMethod to true

  // extend the Request instance with any non-reserved properties
  // remove any reserved functions from the options object
  // set Request instance to be readable and writable
  // call init

  var self = this

  // start with HAR, then override with additional options
  if (options.har) {
    self._har = new Har(self)
    options = self._har.options(options)
  }

  // transform `formData` for backward compatibility
  // don't check for explicit object type to support legacy shenanigans
  if (options.formData && !Array.isArray(options.formData)) {
    options.formData = transformFormData(options.formData)
  }

  // use custom URL parser if provided, fallback to url.parse and url.resolve
  if (!(
    options.urlParser &&
    typeof options.urlParser.parse === 'function' &&
    typeof options.urlParser.resolve === 'function'
  )) {
    options.urlParser = {
      parse: url.parse,
      resolve: url.resolve
    }
  }

  stream.Stream.call(self)
  var reserved = Object.keys(Request.prototype)
  var nonReserved = filterForNonReserved(reserved, options)

  extend(self, nonReserved)
  options = filterOutReservedFunctions(reserved, options)

  self.readable = true
  self.writable = true
  self._debug = []
  if (options.method) {
    self.explicitMethod = true
  }
  self._qs = new Querystring(self)
  self._auth = new Auth(self)
  self._oauth = new OAuth(self)
  self._multipart = new Multipart(self)
  self._redirect = new Redirect(self)
  self._tunnel = new Tunnel(self)
  self.init(options)
}

util.inherits(Request, stream.Stream)

// Debugging
Request.debug = process.env.NODE_DEBUG && /\brequest\b/.test(process.env.NODE_DEBUG)

function debug () {
  if (Request.debug) {
    console.error('REQUEST %s', util.format.apply(util, arguments))
  }
}

Request.prototype.debug = debug

Request.prototype.init = function (options) {
  // init() contains all the code to setup the request object.
  // the actual outgoing request is not started until start() is called
  // this function is called from both the constructor and on redirect.
  var self = this
  if (!options) {
    options = {}
  }
  self.headers = self.headers ? copy(self.headers) : {}

  // for this request (or redirect) store its debug logs in `_reqResInfo` and
  // store its reference in `_debug` which holds debug logs of every request
  self._reqResInfo = {}
  self._debug.push(self._reqResInfo)

  // additional postman feature starts
  // bind default events sent via options
  if (options.bindOn) {
    Object.keys(options.bindOn).forEach(function (eventName) {
      !Array.isArray(options.bindOn[eventName]) && (options.bindOn[eventName] = [options.bindOn[eventName]])
      options.bindOn[eventName].forEach(function (listener) {
        self.on(eventName, listener)
      })
    })
  }
  if (options.once) {
    Object.keys(options.once).forEach(function (eventName) {
      !Array.isArray(options.bindOnce[eventName]) && (options.bindOnce[eventName] = [options.bindOnce[eventName]])
      options.bindOnce[eventName].forEach(function (listener) {
        self.once(eventName, listener)
      })
    })
  }
  // additional postman feature ends

  // Delete headers with value undefined or HTTP/2 specific pseudoheaders since they break
  // ClientRequest.OutgoingMessage.setHeader in node 0.12
  for (var headerName in self.headers) {
    if (typeof self.headers[headerName] === 'undefined' || headerName.startsWith(':')) {
      delete self.headers[headerName]
    }
  }

  caseless.httpify(self, self.headers)

  if (!self.method) {
    self.method = options.method || 'GET'
  }
  if (!self.localAddress) {
    self.localAddress = options.localAddress
  }

  self._qs.init(options)

  debug(options)
  if (!self.pool && self.pool !== false) {
    self.pool = globalPool
  }
  self.dests = self.dests || []
  self.__isRequestRequest = true

  // Protect against double callback
  if (!self._callback && self.callback) {
    self._callback = self.callback
    self.callback = function (error, response, body) {
      if (self._callbackCalled) {
        return // Print a warning maybe?
      }
      self._callbackCalled = true
      self._callback(error, response, body, self._debug)
    }
    self.on('error', self.callback.bind())
    self.on('complete', self.callback.bind(self, null))
  }

  // People use this property instead all the time, so support it
  if (!self.uri && self.url) {
    self.uri = self.url
    delete self.url
  }

  // If there's a baseUrl, then use it as the base URL (i.e. uri must be
  // specified as a relative path and is appended to baseUrl).
  if (self.baseUrl) {
    if (typeof self.baseUrl !== 'string') {
      return self.emit('error', new Error('options.baseUrl must be a string'))
    }

    if (typeof self.uri !== 'string') {
      return self.emit('error', new Error('options.uri must be a string when using options.baseUrl'))
    }

    if (self.uri.indexOf('//') === 0 || self.uri.indexOf('://') !== -1) {
      return self.emit('error', new Error('options.uri must be a path when using options.baseUrl'))
    }

    // Handle all cases to make sure that there's only one slash between
    // baseUrl and uri.
    var baseUrlEndsWithSlash = self.baseUrl.lastIndexOf('/') === self.baseUrl.length - 1
    var uriStartsWithSlash = self.uri.indexOf('/') === 0

    if (baseUrlEndsWithSlash && uriStartsWithSlash) {
      self.uri = self.baseUrl + self.uri.slice(1)
    } else if (baseUrlEndsWithSlash || uriStartsWithSlash) {
      self.uri = self.baseUrl + self.uri
    } else if (self.uri === '') {
      self.uri = self.baseUrl
    } else {
      self.uri = self.baseUrl + '/' + self.uri
    }
    delete self.baseUrl
  }

  // A URI is needed by this point, emit error if we haven't been able to get one
  if (!self.uri) {
    return self.emit('error', new Error('options.uri is a required argument'))
  }

  // If a string URI/URL was given, parse it into a URL object
  if (typeof self.uri === 'string') {
    self.uri = self.urlParser.parse(self.uri)
  }

  // Some URL objects are not from a URL parsed string and need href added
  if (!self.uri.href) {
    self.uri.href = url.format(self.uri)
  }

  // DEPRECATED: Warning for users of the old Unix Sockets URL Scheme
  if (self.uri.protocol === 'unix:') {
    return self.emit('error', new Error('`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`'))
  }

  // Support Unix Sockets
  if (self.uri.host === 'unix') {
    self.enableUnixSocket()
  }

  if (self.strictSSL === false) {
    self.rejectUnauthorized = false
  }

  if (!self.uri.pathname) { self.uri.pathname = '/' }

  if (!(self.uri.host || (self.uri.hostname && self.uri.port)) && !self.uri.isUnix) {
    // Invalid URI: it may generate lot of bad errors, like 'TypeError: Cannot call method `indexOf` of undefined' in CookieJar
    // Detect and reject it as soon as possible
    var faultyUri = url.format(self.uri)
    var message = 'Invalid URI "' + faultyUri + '"'
    if (Object.keys(options).length === 0) {
      // No option ? This can be the sign of a redirect
      // As this is a case where the user cannot do anything (they didn't call request directly with this URL)
      // they should be warned that it can be caused by a redirection (can save some hair)
      message += '. This can be caused by a crappy redirection.'
    }
    // This error was fatal
    self.abort()
    return self.emit('error', new Error(message))
  }

  if (!self.hasOwnProperty('proxy')) {
    self.proxy = getProxyFromURI(self.uri)
  }

  if (typeof self.proxy === 'string') {
    self.proxy = self.urlParser.parse(self.proxy)

    if (self.proxy.auth) {
      self.proxy.auth = self._qs.unescape(self.proxy.auth)
    }
  }

  self.tunnel = self._tunnel.isEnabled()
  if (self.proxy) {
    self._tunnel.setup(options)
  }

  self._redirect.onRequest(options)

  // Add `Host` header if not defined already
  self.setHost = (self.setHost === undefined || Boolean(self.setHost))
  if (!self.hasHeader('host') && self.setHost) {
    var hostHeaderName = self.originalHostHeaderName || 'Host'
    self.setHeader(hostHeaderName, self.uri.host)
    // Drop :port suffix from Host header if known protocol.
    if (self.uri.port) {
      if ((self.uri.port === '80' && self.uri.protocol === 'http:') ||
          (self.uri.port === '443' && self.uri.protocol === 'https:')) {
        self.setHeader(hostHeaderName, self.uri.hostname)
      }
    }
  }

  if (!self.uri.port) {
    if (self.uri.protocol === 'http:') { self.uri.port = 80 } else if (self.uri.protocol === 'https:') { self.uri.port = 443 }
  }

  if (self.proxy && !self.tunnel) {
    self.port = self.proxy.port
    self.host = self.proxy.hostname
  } else {
    self.port = self.uri.port
    self.host = self.uri.hostname
  }

  if (options.form) {
    self.form(options.form)
  }

  if (options.formData) {
    var formData = options.formData
    var requestForm = self.form()
    for (var i = 0, ii = formData.length; i < ii; i++) {
      var formParam = formData[i]
      if (!formParam) { continue }
      if (formParam.options) {
        requestForm.append(formParam.key, formParam.value, formParam.options)
      } else {
        requestForm.append(formParam.key, formParam.value)
      }
    }
  }

  if (options.qs) {
    self.qs(options.qs)
  }

  if (self.uri.path) {
    self.path = self.uri.path
  } else {
    self.path = self.uri.pathname + (self.uri.search || '')
  }

  if (self.path.length === 0) {
    self.path = '/'
  }

  // Auth must happen last in case signing is dependent on other headers
  if (options.aws) {
    self.aws(options.aws)
  }

  if (options.hawk) {
    self.hawk(options.hawk)
  }

  if (options.httpSignature) {
    self.httpSignature(options.httpSignature)
  }

  if (options.auth) {
    if (Object.prototype.hasOwnProperty.call(options.auth, 'username')) {
      options.auth.user = options.auth.username
    }
    if (Object.prototype.hasOwnProperty.call(options.auth, 'password')) {
      options.auth.pass = options.auth.password
    }

    self.auth(
      options.auth.user,
      options.auth.pass,
      options.auth.sendImmediately,
      options.auth.bearer
    )
  }

  if (!self.hasHeader('accept-encoding')) {
    var acceptEncoding = ''

    self.gzip && (acceptEncoding += 'gzip, deflate')

    if (self.brotli) {
      acceptEncoding && (acceptEncoding += ', ')
      acceptEncoding += 'br'
    }

    acceptEncoding && self.setHeader('Accept-Encoding', acceptEncoding)
  }

  if (self.uri.auth && !self.hasHeader('authorization')) {
    var uriAuthPieces = self.uri.auth.split(':').map(function (item) { return self._qs.unescape(item) })
    self.auth(uriAuthPieces[0], uriAuthPieces.slice(1).join(':'), true)
  }

  if (!self.tunnel && self.proxy && self.proxy.auth && !self.hasHeader('proxy-authorization')) {
    self.setHeader('Proxy-Authorization', 'Basic ' + toBase64(self.proxy.auth))
  }

  if (self.proxy && !self.tunnel) {
    self.path = (self.uri.protocol + '//' + self.uri.host + self.path)
  }

  if (options.json) {
    self.json(options.json)
  }
  if (options.multipart) {
    self.multipart(options.multipart)
  }

  // enable timings if verbose is true
  if (options.time || options.verbose) {
    self.timing = true

    // NOTE: elapsedTime is deprecated in favor of .timings
    self.elapsedTime = self.elapsedTime || 0
  }

  if (options.verbose) {
    self.verbose = true
  }

  if (typeof options.maxResponseSize === 'number') {
    self.maxResponseSize = options.maxResponseSize
  }

  function setContentLength () {
    if (isTypedArray(self.body)) {
      self.body = Buffer.from(self.body)
    }

    if (!self.hasHeader('content-length')) {
      var length
      if (typeof self.body === 'string') {
        length = Buffer.byteLength(self.body)
      } else if (Array.isArray(self.body)) {
        length = self.body.reduce(function (a, b) { return a + b.length }, 0)
      } else {
        length = self.body.length
      }

      if (length) {
        self.setHeader('Content-Length', length)
      } else {
        self.emit('error', new Error('Argument error, options.body.'))
      }
    }
  }

  if (self.body && !isstream(self.body)) {
    setContentLength()
  }

  if (options.oauth) {
    self.oauth(options.oauth)
  } else if (self._oauth.params && self.hasHeader('authorization')) {
    self.oauth(self._oauth.params)
  }

  var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol
  var defaultModules = {'http:': { http2: http, http1: http, auto: http }, 'https:': { http1: https, http2: http2, auto: autohttp2 }}
  var httpModules = self.httpModules || {}

  // If user defines httpModules, respect if they have different httpModules for different http versions, else use the tls specific http module
  // If the user defines nothing, revert to default modules
  self.httpModule = (httpModules[protocol] && httpModules[protocol][self.protocolVersion]) || httpModules[protocol] || (defaultModules[protocol] && defaultModules[protocol][self.protocolVersion])

  if (httpModules[protocol] && !(httpModules[protocol][options.protocolVersion])) {
    // If the user is only specifying https/http modules, revert to http1
    self.protocolVersion = 'http1'
  }

  if (!self.httpModule) {
    return self.emit('error', new Error('Invalid protocol: ' + protocol))
  }

  if (options.ca) {
    self.ca = options.ca
  }

  // prefer common self.agent if exists
  if (self.agents && !self.agent) {
    var agent = protocol === 'http:' ? self.agents.http : self.agents.https
    if (agent) {
      if (agent.agentClass || agent.agentOptions) {
        options.agentClass = agent.agentClass || options.agentClass
        options.agentOptions = agent.agentOptions || options.agentOptions
      } else {
        self.agent = agent
      }
    }
  }

  if (!self.agent) {
    if (options.agentOptions) {
      self.agentOptions = options.agentOptions
    }

    if (options.agentClass) {
      self.agentClass = options.agentClass
    } else if (options.forever) {
      var v = version()
      // use ForeverAgent in node 0.10- only
      if (v.major === 0 && v.minor <= 10) {
        self.agentClass = protocol === 'http:' ? ForeverAgent : ForeverAgent.SSL
      } else {
        self.agentClass = self.httpModule.Agent
        self.agentOptions = self.agentOptions || {}
        self.agentOptions.keepAlive = true
      }
    } else {
      self.agentClass = self.httpModule.Agent
    }
  }

  if (self.pool === false) {
    self.agent = false
  } else {
    try {
      self.agent = self.agent || self.getNewAgent({agentIdleTimeout: options.agentIdleTimeout})
    } catch (error) {
      // tls.createSecureContext() throws on bad options
      return self.emit('error', error)
    }
  }

  self.on('pipe', function (src) {
    if (self.ntick && self._started) {
      self.emit('error', new Error('You cannot pipe to this stream after the outbound request has started.'))
    }
    self.src = src
    if (isReadStream(src)) {
      if (!self.hasHeader('content-type')) {
        // @note fallback to 'application/octet-stream' if mime.lookup returns `false`
        self.setHeader('Content-Type', mime.lookup(src.path) || 'application/octet-stream')
      }
    } else {
      if (src.headers) {
        for (var i in src.headers) {
          if (!self.hasHeader(i)) {
            self.setHeader(i, src.headers[i])
          }
        }
      }
      if (self._json && !self.hasHeader('content-type')) {
        self.setHeader('Content-Type', 'application/json')
      }
      if (src.method && !self.explicitMethod) {
        self.method = src.method
      }
    }

    // self.on('pipe', function () {
    //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')
    // })
  })

  defer(function () {
    if (self._aborted) {
      return
    }

    var end = function () {
      if (self._form) {
        if (!self._auth.hasAuth || (self._auth.hasAuth && self._auth.sentAuth)) {
          try {
            self._form.pipe(self)
          } catch (err) {
            self.abort()
            options.callback && options.callback(err)
            return
          }
        }
      }
      if (self._multipart && self._multipart.chunked) {
        self._multipart.body.pipe(self)
      }
      if (self.body) {
        if (isstream(self.body)) {
          if (self.hasHeader('content-length')) {
            self.body.pipe(self)
          } else { // certain servers require content-length to function. we try to pre-detect if possible
            streamLength(self.body, {}, function (err, len) {
              if (!(err || self._started || self.hasHeader('content-length') || len === null || len < 0)) {
                self.setHeader('Content-Length', len)
              }
              self.body.pipe(self)
            })
          }
        } else {
          setContentLength()
          if (Array.isArray(self.body)) {
            self.body.forEach(function (part) {
              self.write(part)
            })
          } else {
            self.write(self.body)
          }
          self.end()
        }
      } else if (self.requestBodyStream) {
        console.warn('options.requestBodyStream is deprecated, please pass the request object to stream.pipe.')
        self.requestBodyStream.pipe(self)
      } else if (!self.src) {
        if ((self._auth.hasAuth && !self._auth.sentAuth) || self.hasHeader('content-length')) {
          self.end()
          return
        }
        switch (self.method) {
          case 'GET':
          case 'HEAD':
          case 'TRACE':
          case 'DELETE':
          case 'CONNECT':
          case 'OPTIONS':
          case undefined:
            // @note this behavior is same as Node.js
            break
          default:
            self.setHeader('Content-Length', 0)
            break
        }
        self.end()
      }
    }

    self.jar(self._jar || options.jar, function () {
      if (self._form && !self.hasHeader('content-length')) {
        // Before ending the request, we had to compute the length of the whole form, asyncly
        self._form.getLength(function (err, length) {
          if (!err && !isNaN(length)) {
            self.setHeader('Content-Length', length)
          }
          end()
        })
      } else {
        end()
      }
    })

    self.ntick = true
  })
}

Request.prototype.getNewAgent = function ({agentIdleTimeout}) {
  var self = this
  var Agent = self.agentClass
  var options = {}
  if (self.agentOptions) {
    for (var i in self.agentOptions) {
      options[i] = self.agentOptions[i]
    }
  }
  if (self.ca) {
    options.ca = self.ca
  }
  if (self.extraCA) {
    options.extraCA = self.extraCA
  }
  if (self.ciphers) {
    options.ciphers = self.ciphers
  }
  if (self.secureProtocol) {
    options.secureProtocol = self.secureProtocol
  }
  if (self.secureOptions) {
    options.secureOptions = self.secureOptions
  }
  if (typeof self.rejectUnauthorized !== 'undefined') {
    options.rejectUnauthorized = self.rejectUnauthorized
  }

  if (self.cert && self.key) {
    options.key = self.key
    options.cert = self.cert
  }

  if (self.pfx) {
    options.pfx = self.pfx
  }

  if (self.passphrase) {
    options.passphrase = self.passphrase
  }

  var poolKey = ''

  // different types of agents are in different pools
  if (Agent !== self.httpModule.Agent) {
    poolKey += Agent.name
  }

  // ca option is only relevant if proxy or destination are https
  var proxy = self.proxy
  if (typeof proxy === 'string') {
    proxy = self.urlParser.parse(proxy)
  }
  var isHttps = (proxy && proxy.protocol === 'https:') || this.uri.protocol === 'https:'

  if (isHttps) {
    if (options.ca) {
      if (poolKey) {
        poolKey += ':'
      }
      poolKey += options.ca
    }

    // only add when NodeExtraCACerts is enabled
    if (options.extraCA) {
      if (poolKey) {
        poolKey += ':'
      }
      poolKey += options.extraCA

      // Create a new secure context to add the extra CA
      var secureContext = tls.createSecureContext(options)
      secureContext.context.addCACert(options.extraCA)
      options.secureContext = secureContext
    }

    if (typeof options.rejectUnauthorized !== 'undefined') {
      if (poolKey) {
        poolKey += ':'
      }
      poolKey += options.rejectUnauthorized
    }

    if (options.cert) {
      if (poolKey) {
        poolKey += ':'
      }
      poolKey += options.cert.toString('ascii') + options.key.toString('ascii')
    }

    if (options.pfx) {
      if (poolKey) {
        poolKey += ':'
      }
      poolKey += options.pfx.toString('ascii')
    }

    if (options.passphrase) {
      if (poolKey) {
        poolKey += ':'
      }
      poolKey += options.passphrase
    }

    if (options.ciphers) {
      if (poolKey) {
        poolKey += ':'
      }
      poolKey += options.ciphers
    }

    if (options.secureProtocol) {
      if (poolKey) {
        poolKey += ':'
      }
      poolKey += options.secureProtocol
    }

    if (options.secureOptions) {
      if (poolKey) {
        poolKey += ':'
      }
      poolKey += options.secureOptions
    }
  }

  if (self.pool === globalPool && !poolKey && Object.keys(options).length === 0 && self.httpModule.globalAgent && typeof agentIdleTimeout !== 'number') {
    // not doing anything special.  Use the globalAgent
    return self.httpModule.globalAgent
  }

  // we're using a stored agent.  Make sure it's protocol-specific
  poolKey = self.protocolVersion + ':' + self.uri.protocol + poolKey

  let agent = self.pool[poolKey]

  // generate a new agent for this setting if none yet exists
  if (!agent || (typeof agentIdleTimeout === 'number' && (agent.lastUsedAt || 0) + agentIdleTimeout < Date.now())) {
    agent = self.pool[poolKey] = new Agent(options)
    // properly set maxSockets on new agents
    if (self.pool.maxSockets) {
      self.pool[poolKey].maxSockets = self.pool.maxSockets
    }
  }

  agent.lastUsedAt = Date.now()
  return agent
}

Request.prototype.start = function () {
  // start() is called once we are ready to send the outgoing HTTP request.
  // this is usually called on the first write(), end() or on nextTick()
  var self = this

  if (self.timing) {
    // All timings will be relative to this request's startTime.  In order to do this,
    // we need to capture the wall-clock start time (via Date), immediately followed
    // by the high-resolution timer (via now()).  While these two won't be set
    // at the _exact_ same time, they should be close enough to be able to calculate
    // high-resolution, monotonically non-decreasing timestamps relative to startTime.
    var startTime = new Date().getTime()
    var startTimeNow = now()
  }

  if (self._aborted) {
    return
  }

  // postman: emit start event
  self.emit('start')

  self._started = true
  self.method = self.method || 'GET'
  self.href = self.uri.href

  if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader('content-length')) {
    self.setHeader('Content-Length', self.src.stat.size)
  }
  if (self._aws) {
    self.aws(self._aws, true)
  }

  self._reqResInfo.request = {
    method: self.method,
    href: self.uri.href,
    headers: [],
    proxy: (self.proxy && { href: self.proxy.href }) || undefined,
    httpVersion: '1.1'
  }

  // We have a method named auth, which is completely different from the http.request
  // auth option.  If we don't remove it, we're gonna have a bad time.
  var reqOptions = copy(self)
  delete reqOptions.auth

  // Workaround for a bug in Node: https://github.com/nodejs/node/issues/8321
  if (!(self.disableUrlEncoding || self.proxy || self.uri.isUnix)) {
    try {
      extend(reqOptions, urlParse(self.uri.href))
    } catch (e) { } // nothing to do if urlParse fails, "extend" never throws an error.
  }

  debug('make request', self.uri.href)

  // node v6.8.0 now supports a `timeout` value in `http.request()`, but we
  // should delete it for now since we handle timeouts manually for better
  // consistency with node versions before v6.8.0
  delete reqOptions.timeout

  try {
    self.req = self.httpModule.request(reqOptions)

    // Remove blacklisted headers from the request instance.
    // @note don't check for `hasHeader` because headers like `connection`,
    // 'content-length', 'transfer-encoding' etc. are added at the very end
    // and `removeHeader` updates the Node.js internal state which makes sure
    // these headers are not added.
    if (Array.isArray(self.blacklistHeaders) && self.blacklistHeaders.length) {
      self.blacklistHeaders.forEach(function (header) {
        self.req.removeHeader(header)
        // also remove from the `self` for the consistency
        self.removeHeader(header)
      })
    }
  } catch (err) {
    self.emit('error', err)
    return
  }

  if (self.timing) {
    self.startTime = startTime
    self.startTimeNow = startTimeNow

    // Timing values will all be relative to startTime (by comparing to startTimeNow
    // so we have an accurate clock)
    self.timings = {}
  }

  var timeout
  if (self.timeout && !self.timeoutTimer) {
    if (self.timeout < 0) {
      timeout = 0
    } else if (typeof self.timeout === 'number' && isFinite(self.timeout)) {
      timeout = self.timeout
    }
  }

  self.req.on('response', self.onRequestResponse.bind(self))
  self.req.on('error', self.onRequestError.bind(self))
  self.req.on('drain', function () {
    self.emit('drain')
  })

  self.req.on('socket', function (socket) {
    if (self.verbose) {
      // The reused socket holds all the session data which was injected in
      // during the first connection. This is done because events like
      // `lookup`, `connect` & `secureConnect` will not be triggered for a
      // reused socket and debug information will be lost for that request.
      var reusedSocket = Boolean(socket.__SESSION_ID && socket.__SESSION_DATA)

      if (!reusedSocket) {
        socket.__SESSION_ID = uuid()
        socket.__SESSION_DATA = {}
      }

      // @note make sure you don't serialize this object to avoid memory leak
      self._reqResInfo.session = {
        id: socket.__SESSION_ID,
        reused: reusedSocket,
        data: socket.__SESSION_DATA
      }
    }

    // `._connecting` was the old property which was made public in node v6.1.0
    var isConnecting = socket._connecting || socket.connecting
    if (self.timing) {
      self.timings.socket = now() - self.startTimeNow

      if (isConnecting) {
        var onLookupTiming = function () {
          self.timings.lookup = now() - self.startTimeNow
        }

        var onConnectTiming = function () {
          self.timings.connect = now() - self.startTimeNow

          if (self.verbose) {
            socket.__SESSION_DATA.addresses = {
              // local address
              // @note there's no `socket.localFamily` but `.address` method
              // returns same output as of remote.
              local: (typeof socket.address === 'function') && socket.address(),

              // remote address
              remote: {
                address: socket.remoteAddress,
                family: socket.remoteFamily,
                port: socket.remotePort
              }
            }
          }
        }

        var onSecureConnectTiming = function () {
          self.timings.secureConnect = now() - self.startTimeNow

          if (self.verbose) {
            socket.__SESSION_DATA.tls = {
              // true if the session was reused
              reused: (typeof socket.isSessionReused === 'function') && socket.isSessionReused(),

              // true if the peer certificate was signed by one of the CAs specified
              authorized: socket.authorized,

              // reason why the peer's certificate was not been verified
              authorizationError: socket.authorizationError,

              // negotiated cipher name
              cipher: (typeof socket.getCipher === 'function') && socket.getCipher(),

              // negotiated SSL/TLS protocol version
              // @note Node >= v5.7.0
              protocol: (typeof socket.getProtocol === 'function') && socket.getProtocol(),

              // type, name, and size of parameter of an ephemeral key exchange
              // @note Node >= v5.0.0
              ephemeralKeyInfo: (typeof socket.getEphemeralKeyInfo === 'function') && socket.getEphemeralKeyInfo()
            }

            // peer certificate information
            // @note if session is reused, all certificate information is
            // stripped from the socket (returns {}).
            // Refer: https://github.com/nodejs/node/issues/3940
            var peerCert = (typeof socket.getPeerCertificate === 'function') && (socket.getPeerCertificate() || {})

            socket.__SESSION_DATA.tls.peerCertificate = {
              subject: peerCert.subject && {
                country: peerCert.subject.C,
                stateOrProvince: peerCert.subject.ST,
                locality: peerCert.subject.L,
                organization: peerCert.subject.O,
                organizationalUnit: peerCert.subject.OU,
                commonName: peerCert.subject.CN,
                alternativeNames: peerCert.subjectaltname
              },
              issuer: peerCert.issuer && {
                country: peerCert.issuer.C,
                stateOrProvince: peerCert.issuer.ST,
                locality: peerCert.issuer.L,
                organization: peerCert.issuer.O,
                organizationalUnit: peerCert.issuer.OU,
                commonName: peerCert.issuer.CN
              },
              validFrom: peerCert.valid_from,
              validTo: peerCert.valid_to,
              fingerprint: peerCert.fingerprint,
              serialNumber: peerCert.serialNumber
            }
          }
        }

        socket.once('lookup', onLookupTiming)
        socket.once('connect', onConnectTiming)
        socket.once('secureConnect', onSecureConnectTiming)

        // clean up timing event listeners if needed on error
        self.req.once('error', function () {
          // Swallow ERR_HTTP2_SOCKET_UNBOUND error when removing listeners in case of error.
          // This needs to be done since http2 ClientSession disassociates the underlying socket from the session before emitting the error event
          try {
            socket.removeListener('lookup', onLookupTiming)
            socket.removeListener('connect', onConnectTiming)
          } catch (err) {
            if (err.code !== 'ERR_HTTP2_SOCKET_UNBOUND') {
              throw err
            }
          }
        })
      }
    }

    var setReqTimeout = function () {
      // This timeout sets the amount of time to wait *between* bytes sent
      // from the server once connected.
      //
      // In particular, it's useful for erroring if the server fails to send
      // data halfway through streaming a response.
      self.req.setTimeout(timeout, function () {
        if (self.req) {
          self.abort()
          var e = new Error('ESOCKETTIMEDOUT')
          e.code = 'ESOCKETTIMEDOUT'
          e.connect = false
          self.emit('error', e)
        }
      })
    }
    if (timeout !== undefined) {
      // Only start the connection timer if we're actually connecting a new
      // socket, otherwise if we're already connected (because this is a
      // keep-alive connection) do not bother. This is important since we won't
      // get a 'connect' event for an already connected socket.
      if (isConnecting) {
        var onReqSockConnect = function () {
          socket.removeListener('connect', onReqSockConnect)
          self.clearTimeout()
          setReqTimeout()
        }

        socket.on('connect', onReqSockConnect)

        self.req.on('error', function (err) { // eslint-disable-line handle-callback-err
          // Swallow ERR_HTTP2_SOCKET_UNBOUND error when removing listeners in case of error.
          // This needs to be done since http2 ClientSession disassociates the underlying socket from the session before emitting the error event
          try {
            socket.removeListener('connect', onReqSockConnect)
          } catch (err) {
            if (err.code !== 'ERR_HTTP2_SOCKET_UNBOUND') {
              throw err
            }
          }
        })

        // Set a timeout in memory - this block will throw if the server takes more
        // than `timeout` to write the HTTP status and headers (corresponding to
        // the on('response') event on the client). NB: this measures wall-clock
        // time, not the time between bytes sent by the server.
        self.timeoutTimer = setTimeout(function () {
          socket.removeListener('connect', onReqSockConnect)
          self.abort()
          var e = new Error('ETIMEDOUT')
          e.code = 'ETIMEDOUT'
          e.connect = true
          self.emit('error', e)
        }, timeout)
      } else {
        // We're already connected
        setReqTimeout()
      }
    }
    self.emit('socket', socket)
  })

  self.emit('request', self.req)
}

Request.prototype.onRequestError = function (error) {
  var self = this
  if (self._aborted) {
    return
  }
  if (self.req && self.req._reusedSocket && error.code === 'ECONNRESET' &&
    self.agent.addRequestNoreuse) {
    self.agent = {addRequest: self.agent.addRequestNoreuse.bind(self.agent)}
    self.start()
    self.req.end()
    return
  }
  self.clearTimeout()
  self.emit('error', error)
}

Request.prototype.onRequestResponse = function (response) {
  var self = this
  // De-referencing self.startTimeNow to prevent race condition during redirects
  // Race-condition:
  // 30x-url: Request start (self.startTimeNow initialized (self.start()))
  // Redirect header to 200 request received
  // 200-url: Request start (self.startTimeNow re-initialized, old value overwritten (redirect.js -> request.init() -> self.start()))
  // 30x-url: end event received, timing calculated using new self.startTimeNow (incorrect)
  //
  // This must've been happening with http/1.1 as well when using keep-alive, but there were no tests to catch this.
  // Was highlighted with http/2 where connections are reused by default
  // Does not show up in http/1.x tests due to delays involving socket establishment
  //
  // New flow
  // 30x-url: Request start (self.startTimeNow initialized)
  // Redirect header to 200 request received
  // 200-url: Request start (self.startTimeNow re-initialized, old value overwritten)
  // 30x-url: end event received, timing calculated using requestSegmentStartTime (correct)
  const requestSegmentStartTime = self.startTimeNow

  if (self.timing) {
    self.timings.response = now() - requestSegmentStartTime
  }

  debug('onRequestResponse', self.uri.href, response.statusCode, response.headers)
  response.on('end', function () {
    if (self.timing) {
      self.timings.end = now() - requestSegmentStartTime
      response.timingStart = self.startTime
      response.timingStartTimer = requestSegmentStartTime

      // fill in the blanks for any periods that didn't trigger, such as
      // no lookup or connect due to keep alive
      if (!self.timings.socket) {
        self.timings.socket = 0
      }
      if (!self.timings.lookup) {
        self.timings.lookup = self.timings.socket
      }
      if (!self.timings.connect) {
        self.timings.connect = self.timings.lookup
      }
      if (!self.timings.secureConnect && self.uri.protocol === 'https:') {
        self.timings.secureConnect = self.timings.connect
      }
      if (!self.timings.response) {
        self.timings.response = self.timings.connect
      }

      debug('elapsed time', self.timings.end)

      // elapsedTime includes all redirects
      self.elapsedTime += Math.round(self.timings.end)

      // NOTE: elapsedTime is deprecated in favor of .timings
      response.elapsedTime = self.elapsedTime

      // timings is just for the final fetch
      response.timings = self.timings

      // pre-calculate phase timings as well
      response.timingPhases = {
        wait: self.timings.socket,
        dns: self.timings.lookup - self.timings.socket,
        tcp: self.timings.connect - self.timings.lookup,
        firstByte: self.timings.response - self.timings.connect,
        download: self.timings.end - self.timings.response,
        total: self.timings.end
      }

      // if secureConnect is present, add secureHandshake and update firstByte
      if (self.timings.secureConnect) {
        response.timingPhases.secureHandshake = self.timings.secureConnect - self.timings.connect
        response.timingPhases.firstByte = self.timings.response - self.timings.secureConnect
      }
    }

    debug('response end', self.uri.href, response.statusCode, response.headers)
  })

  if (self._aborted) {
    debug('aborted', self.uri.href)
    response.resume()
    return
  }

  self._reqResInfo.response = {
    statusCode: response.statusCode,
    headers: parseResponseHeaders(response.rawHeaders),
    httpVersion: response.httpVersion
  }

  // Setting this again since the actual request version that was used is found only after ALPN negotiation in case of protocolVersion: auto
  self._reqResInfo.request.httpVersion = response.httpVersion

  if (self.timing) {
    self._reqResInfo.timingStart = self.startTime
    self._reqResInfo.timingStartTimer = self.startTimeNow
    self._reqResInfo.timings = self.timings
  }

  self.response = response
  response.request = self
  response.toJSON = responseToJSON

  // XXX This is different on 0.10, because SSL is strict by default
  if (self.uri.protocol === 'https:' &&
    self.strictSSL && (!response.hasOwnProperty('socket') ||
      !response.socket.authorized)) {
    debug('strict ssl error', self.uri.href)
    var sslErr = response.hasOwnProperty('socket') ? response.socket.authorizationError : self.uri.href + ' does not support SSL'
    self.emit('error', new Error('SSL Error: ' + sslErr))
    return
  }

  // Save the original host before any redirect (if it changes, we need to
  // remove any authorization headers).  Also remember the case of the header
  // name because lots of broken servers expect Host instead of host and we
  // want the caller to be able to specify this.
  self.originalHost = self.getHeader('host')
  if (!self.originalHostHeaderName) {
    self.originalHostHeaderName = self.hasHeader('host')
  }
  if (self.setHost) {
    self.removeHeader('host')
  }
  self.clearTimeout()

  function responseHandler () {
    if (self._redirect.onResponse(response)) {
      return // Ignore the rest of the response
    }

    // Be a good stream and emit end when the response is finished.
    // Hack to emit end on close because of a core bug that never fires end
    response.once('close', function () {
      if (!self._ended) {
        self.response.emit('end')
      }
    })

    response.once('end', function () {
      self._ended = true
    })

    var noBody = function (code) {
      return (
        self.method === 'HEAD' ||
        // Informational
        (code >= 100 && code < 200) ||
        // No Content
        code === 204 ||
        // Not Modified
        code === 304
      )
    }

    var responseContent
    var downloadSizeTracker = new SizeTrackerStream()

    if ((self.gzip || self.brotli) && !noBody(response.statusCode)) {
      var contentEncoding = response.headers['content-encoding'] || 'identity'
      contentEncoding = contentEncoding.trim().toLowerCase()

      // Be more lenient with decoding compressed responses, since (very rarely)
      // servers send slightly invalid gzip responses that are still accepted
      // by common browsers.
      // Always using Z_SYNC_FLUSH is what cURL does.
      var zlibOptions = {
        flush: zlib.Z_SYNC_FLUSH,
        finishFlush: zlib.Z_SYNC_FLUSH
      }

      if (self.gzip && contentEncoding === 'gzip') {
        responseContent = zlib.createGunzip(zlibOptions)
        response.pipe(downloadSizeTracker).pipe(responseContent)
      } else if (self.gzip && contentEncoding === 'deflate') {
        responseContent = inflate.createInflate(zlibOptions)
        response.pipe(downloadSizeTracker).pipe(responseContent)
      } else if (self.brotli && contentEncoding === 'br') {
        responseContent = zlib.createBrotliDecompress()
        response.pipe(downloadSizeTracker).pipe(responseContent)
      } else {
        // Since previous versions didn't check for Content-Encoding header,
        // ignore any invalid values to preserve backwards-compatibility
        if (contentEncoding !== 'identity') {
          debug('ignoring unrecognized Content-Encoding ' + contentEncoding)
        }
        responseContent = response.pipe(downloadSizeTracker)
      }
    } else {
      responseContent = response.pipe(downloadSizeTracker)
    }

    if (self.encoding) {
      if (self.dests.length !== 0) {
        console.error('Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.')
      } else {
        responseContent.setEncoding(self.encoding)
      }
    }

    // Node by default returns the status message with `latin1` character encoding,
    // which results in characters lying outside the range of `U+0000 to U+00FF` getting truncated
    // so that they can be mapped in the given range.
    // Refer: https://nodejs.org/docs/latest-v12.x/api/buffer.html#buffer_buffers_and_character_encodings
    //
    // Exposing `statusMessageEncoding` option to make encoding type configurable.
    // This would help in correctly representing status messages belonging to range outside of `latin1`
    //
    // @note: The Regex `[^\w\s-']` is tested to prevent unnecessary computation of creating a Buffer and
    // then decoding it when the status message consists of common characters,
    // specifically belonging to the following set: [a-z, A-Z, 0-9, -, _ ', whitespace]
    // As in that case, no matter what the encoding type is used for decoding the buffer, the result would remain the same.
    //
    // @note: Providing a value in this option will result in force re-encoding of the status message
    // which may not always be intended by the server - specifically in cases where
    // server returns a status message which when encoded again with a different character encoding
    // results in some other characters.
    // For example: If the server intentionally responds with `ð\x9F\x98\x8A` as status message
    // but if the statusMessageEncoding option is set to `utf8`, then it would get converted to '😊'.
    var statusMessage = String(response.statusMessage)
    if (self.statusMessageEncoding && /[^\w\s-']/.test(statusMessage)) {
      response.statusMessage = Buffer.from(statusMessage, 'latin1').toString(self.statusMessageEncoding)
    }

    if (self._paused) {
      responseContent.pause()
    }

    self.responseContent = responseContent

    self.emit('response', response)

    self.dests.forEach(function (dest) {
      self.pipeDest(dest)
    })

    var responseThresholdEnabled = false
    var responseBytesLeft

    if (typeof self.maxResponseSize === 'number') {
      responseThresholdEnabled = true
      responseBytesLeft = self.maxResponseSize
    }

    responseContent.on('data', function (chunk) {
      if (self.timing && !self.responseStarted) {
        self.responseStartTime = (new Date()).getTime()

        // NOTE: responseStartTime is deprecated in favor of .timings
        response.responseStartTime = self.responseStartTime
      }
      // if response threshold is set, update the response bytes left to hit
      // threshold. If exceeds, abort the request.
      if (responseThresholdEnabled) {
        responseBytesLeft -= chunk.length
        if (responseBytesLeft < 0) {
          self.emit('error', new Error('Maximum response size reached'))
          self.destroy()
          self.abort()
          return
        }
      }
      self._destdata = true
      self.emit('data', chunk)
    })
    responseContent.once('end', function (chunk) {
      self._reqResInfo.response.downloadedBytes = downloadSizeTracker.size
      self.emit('end', chunk)
    })
    responseContent.on('error', function (error) {
      self.emit('error', error)
    })
    responseContent.on('close', function () { self.emit('close') })

    if (self.callback) {
      self.readResponseBody(response)
    } else { // if no callback
      self.on('end', function () {
        if (self._aborted) {
          debug('aborted', self.uri.href)
          return
        }
        self.emit('complete', response)
      })
    }
  }

  function forEachAsync (items, fn, cb) {
    !cb && (cb = function () { /* (ಠ_ಠ) */ })

    if (!(Array.isArray(items) && fn)) { return cb() }

    var index = 0
    var totalItems = items.length
    function next (err) {
      if (err || index >= totalItems) {
        return cb(err)
      }

      try {
        fn.call(items, items[index++], next)
      } catch (error) {
        return cb(error)
      }
    }

    if (!totalItems) { return cb() }

    next()
  }

  var targetCookieJar = (self._jar && self._jar.setCookie) ? self._jar : globalCookieJar
  var addCookie = function (cookie, cb) {
    // set the cookie if it's domain in the URI's domain.
    targetCookieJar.setCookie(cookie, self.uri, {ignoreError: true}, function () {
      // swallow the error, don't fail the request because of cookie jar failure
      cb()
    })
  }

  response.caseless = caseless(response.headers)

  if (response.caseless.has('set-cookie') && (!self._disableCookies)) {
    var headerName = response.caseless.has('set-cookie')
    if (Array.isArray(response.headers[headerName])) {
      forEachAsync(response.headers[headerName], addCookie, function (err) {
        if (err) { return self.emit('error', err) }

        responseHandler()
      })
    } else {
      addCookie(response.headers[headerName], responseHandler)
    }
  } else {
    responseHandler()
  }

  debug('finish init function', self.uri.href)
}

Request.prototype.readResponseBody = function (response) {
  var self = this
  debug('reading response\'s body')
  var buffers = []
  var bufferLength = 0
  var strings = []

  self.on('data', function (chunk) {
    if (!Buffer.isBuffer(chunk)) {
      strings.push(chunk)
    } else if (chunk.length) {
      bufferLength += chunk.length
      buffers.push(chunk)
    }
  })
  self.on('end', function () {
    debug('end event', self.uri.href)
    if (self._aborted) {
      debug('aborted', self.uri.href)
      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the request.
      // This can lead to leaky behavior if the user retains a reference to the request object.
      buffers = []
      bufferLength = 0
      return
    }

    if (bufferLength) {
      debug('has body', self.uri.href, bufferLength)
      response.body = Buffer.concat(buffers, bufferLength)
      if (self.encoding !== null) {
        response.body = response.body.toString(self.encoding)
      }
      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the Request.
      // This can lead to leaky behavior if the user retains a reference to the request object.
      buffers = []
      bufferLength = 0
    } else if (strings.length) {
      // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.
      // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().
      if (self.encoding === 'utf8' && strings[0].length > 0 && strings[0][0] === '\uFEFF') {
        strings[0] = strings[0].substring(1)
      }
      response.body = strings.join('')
    }

    if (self._json) {
      try {
        response.body = JSON.parse(response.body, self._jsonReviver)
      } catch (e) {
        debug('invalid JSON received', self.uri.href)
      }
    }
    debug('emitting complete', self.uri.href)
    if (typeof response.body === 'undefined' && !self._json) {
      response.body = self.encoding === null ? Buffer.alloc(0) : ''
    }
    self.emit('complete', response, response.body)
  })
}

Request.prototype.abort = function () {
  var self = this
  self._aborted = true

  if (self.req) {
    self.req.abort()
  } else if (self.response) {
    self.response.destroy()
  }

  self.clearTimeout()
  self.emit('abort')
}

Request.prototype.pipeDest = function (dest) {
  var self = this
  var response = self.response
  // Called after the response is received
  if (dest.headers && !dest.headersSent) {
    if (response.caseless.has('content-type')) {
      var ctname = response.caseless.has('content-type')
      if (dest.setHeader) {
        dest.setHeader(ctname, response.headers[ctname])
      } else {
        dest.headers[ctname] = response.headers[ctname]
      }
    }

    if (response.caseless.has('content-length')) {
      var clname = response.caseless.has('content-length')
      if (dest.setHeader) {
        dest.setHeader(clname, response.headers[clname])
      } else {
        dest.headers[clname] = response.headers[clname]
      }
    }
  }
  if (dest.setHeader && !dest.headersSent) {
    for (var i in response.headers) {
      if (i.startsWith(':')) {
        // Don't set HTTP/2 pseudoheaders
        continue
      }
      // If the response content is being decoded, the Content-Encoding header
      // of the response doesn't represent the piped content, so don't pass it.
      if (!self.gzip || i !== 'content-encoding') {
        dest.setHeader(i, response.headers[i])
      }
    }
    dest.statusCode = response.statusCode
  }
  if (self.pipefilter) {
    self.pipefilter(response, dest)
  }
}

Request.prototype.qs = function (q, clobber) {
  var self = this
  var base
  if (!clobber && self.uri.query) {
    base = self._qs.parse(self.uri.query)
  } else {
    base = {}
  }

  for (var i in q) {
    base[i] = q[i]
  }

  var qs = self._qs.stringify(base)

  if (qs === '') {
    return self
  }

  self.uri = self.urlParser.parse(self.uri.href.split('?')[0] + '?' + qs)
  self.url = self.uri
  self.path = self.uri.path

  if (self.uri.host === 'unix') {
    self.enableUnixSocket()
  }

  return self
}
Request.prototype.form = function (form) {
  var self = this
  var contentType = self.getHeader('content-type')
  var overrideInvalidContentType = contentType ? !self.allowContentTypeOverride : true
  if (form) {
    if (overrideInvalidContentType && !/^application\/x-www-form-urlencoded\b/.test(contentType)) {
      self.setHeader('Content-Type', 'application/x-www-form-urlencoded')
    }
    self.body = (typeof form === 'string')
      ? self._qs.rfc3986(form.toString('utf8'))
      : self._qs.stringify(form).toString('utf8')
    return self
  }
  // form-data
  var contentTypeMatch = contentType && contentType.match &&
    contentType.match(/^multipart\/form-data;.*boundary=(?:"([^"]+)"|([^;]+))/)
  var boundary = contentTypeMatch && (contentTypeMatch[1] || contentTypeMatch[2])
  // create form-data object
  // set custom boundary if present in content-type else auto-generate
  self._form = new FormData({ _boundary: boundary })
  self._form.on('error', function (err) {
    err.message = 'form-data: ' + err.message
    self.emit('error', err)
    self.abort()
  })
  if (overrideInvalidContentType && !contentTypeMatch) {
    // overrides invalid or missing content-type
    self.setHeader('Content-Type', 'multipart/form-data; boundary=' + self._form.getBoundary())
  }
  return self._form
}
Request.prototype.multipart = function (multipart) {
  var self = this

  self._multipart.onRequest(multipart)

  if (!self._multipart.chunked) {
    self.body = self._multipart.body
  }

  return self
}
Request.prototype.json = function (val) {
  var self = this

  if (!self.hasHeader('accept')) {
    self.setHeader('Accept', 'application/json')
  }

  if (typeof self.jsonReplacer === 'function') {
    self._jsonReplacer = self.jsonReplacer
  }

  self._json = true
  if (typeof val === 'boolean') {
    if (self.body !== undefined) {
      if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
        self.body = safeStringify(self.body, self._jsonReplacer)
      } else {
        self.body = self._qs.rfc3986(self.body)
      }
      if (!self.hasHeader('content-type')) {
        self.setHeader('Content-Type', 'application/json')
      }
    }
  } else {
    self.body = safeStringify(val, self._jsonReplacer)
    if (!self.hasHeader('content-type')) {
      self.setHeader('Content-Type', 'application/json')
    }
  }

  if (typeof self.jsonReviver === 'function') {
    self._jsonReviver = self.jsonReviver
  }

  return self
}
Request.prototype.getHeader = function (name, headers) {
  var self = this
  var result, re, match
  if (!headers) {
    headers = self.headers
  }
  Object.keys(headers).forEach(function (key) {
    if (key.length !== name.length) {
      return
    }
    re = new RegExp(name, 'i')
    match = key.match(re)
    if (match) {
      result = headers[key]
    }
  })
  return result
}
Request.prototype.enableUnixSocket = function () {
  // Get the socket & request paths from the URL
  var unixParts = this.uri.path.split(':')
  var host = unixParts[0]
  var path = unixParts[1]
  // Apply unix properties to request
  this.socketPath = host
  this.uri.pathname = path
  this.uri.path = path
  this.uri.host = host
  this.uri.hostname = host
  this.uri.isUnix = true
}

Request.prototype.auth = function (user, pass, sendImmediately, bearer) {
  var self = this

  self._auth.onRequest(user, pass, sendImmediately, bearer)

  return self
}
Request.prototype.aws = function (opts, now) {
  var self = this

  if (!now) {
    self._aws = opts
    return self
  }

  if (opts.sign_version === 4 || opts.sign_version === '4') {
    // use aws4
    var options = {
      host: self.uri.host,
      path: self.uri.path,
      method: self.method,
      headers: self.headers,
      body: self.body
    }
    if (opts.service) {
      options.service = opts.service
    }
    var signRes = aws4.sign(options, {
      accessKeyId: opts.key,
      secretAccessKey: opts.secret,
      sessionToken: opts.session
    })
    self.setHeader('Authorization', signRes.headers.Authorization)
    self.setHeader('X-Amz-Date', signRes.headers['X-Amz-Date'])
    if (signRes.headers['X-Amz-Security-Token']) {
      self.setHeader('X-Amz-Security-Token', signRes.headers['X-Amz-Security-Token'])
    }
  } else {
    // default: use aws-sign2
    var date = new Date()
    self.setHeader('Date', date.toUTCString())
    var auth = {
      key: opts.key,
      secret: opts.secret,
      verb: self.method.toUpperCase(),
      date: date,
      contentType: self.getHeader('content-type') || '',
      md5: self.getHeader('content-md5') || '',
      amazonHeaders: aws2.canonicalizeHeaders(self.headers)
    }
    var path = self.uri.path
    if (opts.bucket && path) {
      auth.resource = '/' + opts.bucket + path
    } else if (opts.bucket && !path) {
      auth.resource = '/' + opts.bucket
    } else if (!opts.bucket && path) {
      auth.resource = path
    } else if (!opts.bucket && !path) {
      auth.resource = '/'
    }
    auth.resource = aws2.canonicalizeResource(auth.resource)
    self.setHeader('Authorization', aws2.authorization(auth))
  }

  return self
}
Request.prototype.httpSignature = function (opts) {
  var self = this
  httpSignature.signRequest({
    getHeader: function (header) {
      return self.getHeader(header, self.headers)
    },
    setHeader: function (header, value) {
      self.setHeader(header, value)
    },
    method: self.method,
    path: self.path
  }, opts)
  debug('httpSignature authorization', self.getHeader('authorization'))

  return self
}
Request.prototype.hawk = function (opts) {
  var self = this
  self.setHeader('Authorization', hawk.header(self.uri, self.method, opts))
}
Request.prototype.oauth = function (_oauth) {
  var self = this

  self._oauth.onRequest(_oauth)

  return self
}

Request.prototype.jar = function (jar, cb) {
  var self = this
  self._jar = jar

  if (!jar) {
    // disable cookies
    self._disableCookies = true
    return cb()
  }

  if (self._redirect.redirectsFollowed === 0) {
    self.originalCookieHeader = self.getHeader('cookie')
  }

  var targetCookieJar = jar.getCookieString ? jar : globalCookieJar
  // fetch cookie in the Specified host
  targetCookieJar.getCookieString(self.uri, function (err, cookies) {
    if (err) { return cb() }

    // if need cookie and cookie is not empty
    if (cookies && cookies.length) {
      if (self.originalCookieHeader) {
        if (Array.isArray(self.originalCookieHeader)) {
          self.originalCookieHeader = self.originalCookieHeader.join('; ')
        }
        // Don't overwrite existing Cookie header
        self.setHeader('Cookie', self.originalCookieHeader + '; ' + cookies)
      } else {
        self.setHeader('Cookie', cookies)
      }
    }

    cb()
  })
}

// Stream API
Request.prototype.pipe = function (dest, opts) {
  var self = this

  if (self.response) {
    if (self._destdata) {
      self.emit('error', new Error('You cannot pipe after data has been emitted from the response.'))
    } else if (self._ended) {
      self.emit('error', new Error('You cannot pipe after the response has been ended.'))
    } else {
      stream.Stream.prototype.pipe.call(self, dest, opts)
      self.pipeDest(dest)
      return dest
    }
  } else {
    self.dests.push(dest)
    stream.Stream.prototype.pipe.call(self, dest, opts)
    return dest
  }
}
Request.prototype.write = function () {
  var self = this
  if (self._aborted) { return }

  if (!self._started) {
    self.start()
  }
  if (self.req) {
    return self.req.write.apply(self.req, arguments)
  }
}
Request.prototype.end = function (chunk) {
  var self = this
  if (self._aborted) { return }

  if (chunk) {
    self.write(chunk)
  }
  if (!self._started) {
    self.start()
  }
  if (self.req) {
    self.req.end()

    // Reference to request, so if _reqResInfo is updated (in case of redirects), we still can update the headers
    const request = self._reqResInfo.request
    Promise.resolve(self.req._header).then(function (header) {
      if (!header) {
        request.headers = []
        return
      }
      request.headers = parseRequestHeaders(header)
    })
  }
}
Request.prototype.pause = function () {
  var self = this
  if (!self.responseContent) {
    self._paused = true
  } else {
    self.responseContent.pause.apply(self.responseContent, arguments)
  }
}
Request.prototype.resume = function () {
  var self = this
  if (!self.responseContent) {
    self._paused = false
  } else {
    self.responseContent.resume.apply(self.responseContent, arguments)
  }
}
Request.prototype.destroy = function () {
  var self = this
  this.clearTimeout()
  if (!self._ended) {
    self.end()
  } else if (self.response) {
    self.response.destroy()
  }
}

Request.prototype.clearTimeout = function () {
  if (this.timeoutTimer) {
    clearTimeout(this.timeoutTimer)
    this.timeoutTimer = null
  }
}

Request.defaultProxyHeaderWhiteList =
  Tunnel.defaultProxyHeaderWhiteList.slice()

Request.defaultProxyHeaderExclusiveList =
  Tunnel.defaultProxyHeaderExclusiveList.slice()

// Exports

Request.prototype.toJSON = requestToJSON
module.exports = Request
language: node_js
node_js:
  - "5.10"
  - "4.4"
  - "4.1"
  - "0.12"
  - "0.10"
before_install:
  - "make check"
after_success:
  - '[ "${TRAVIS_NODE_VERSION}" = "4.4" ] && make codecovio'
#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2018 Joyent, Inc.	All rights reserved.

var dashdash = require('dashdash');
var sshpk = require('../lib/index');
var fs = require('fs');
var path = require('path');
var tty = require('tty');
var readline = require('readline');
var getPassword = require('getpass').getPass;

var options = [
	{
		names: ['outformat', 't'],
		type: 'string',
		help: 'Output format'
	},
	{
		names: ['informat', 'T'],
		type: 'string',
		help: 'Input format'
	},
	{
		names: ['file', 'f'],
		type: 'string',
		help: 'Input file name (default stdin)'
	},
	{
		names: ['out', 'o'],
		type: 'string',
		help: 'Output file name (default stdout)'
	},
	{
		names: ['private', 'p'],
		type: 'bool',
		help: 'Produce a private key as output'
	},
	{
		names: ['derive', 'd'],
		type: 'string',
		help: 'Output a new key derived from this one, with given algo'
	},
	{
		names: ['identify', 'i'],
		type: 'bool',
		help: 'Print key metadata instead of converting'
	},
	{
		names: ['fingerprint', 'F'],
		type: 'bool',
		help: 'Output key fingerprint'
	},
	{
		names: ['hash', 'H'],
		type: 'string',
		help: 'Hash function to use for key fingeprint with -F'
	},
	{
		names: ['spki', 's'],
		type: 'bool',
		help: 'With -F, generates an SPKI fingerprint instead of SSH'
	},
	{
		names: ['comment', 'c'],
		type: 'string',
		help: 'Set key comment, if output format supports'
	},
	{
		names: ['help', 'h'],
		type: 'bool',
		help: 'Shows this help text'
	}
];

if (require.main === module) {
	var parser = dashdash.createParser({
		options: options
	});

	try {
		var opts = parser.parse(process.argv);
	} catch (e) {
		console.error('sshpk-conv: error: %s', e.message);
		process.exit(1);
	}

	if (opts.help || opts._args.length > 1) {
		var help = parser.help({}).trimRight();
		console.error('sshpk-conv: converts between SSH key formats\n');
		console.error(help);
		console.error('\navailable key formats:');
		console.error('  - pem, pkcs1     eg id_rsa');
		console.error('  - ssh            eg id_rsa.pub');
		console.error('  - pkcs8          format you want for openssl');
		console.error('  - openssh        like output of ssh-keygen -o');
		console.error('  - rfc4253        raw OpenSSH wire format');
		console.error('  - dnssec         dnssec-keygen format');
		console.error('  - putty          PuTTY ppk format');
		console.error('\navailable fingerprint formats:');
		console.error('  - hex            colon-separated hex for SSH');
		console.error('                   straight hex for SPKI');
		console.error('  - base64         SHA256:* format from OpenSSH');
		process.exit(1);
	}

	/*
	 * Key derivation can only be done on private keys, so use of the -d
	 * option necessarily implies -p.
	 */
	if (opts.derive)
		opts.private = true;

	var inFile = process.stdin;
	var inFileName = 'stdin';

	var inFilePath;
	if (opts.file) {
		inFilePath = opts.file;
	} else if (opts._args.length === 1) {
		inFilePath = opts._args[0];
	}

	if (inFilePath)
		inFileName = path.basename(inFilePath);

	try {
		if (inFilePath) {
			fs.accessSync(inFilePath, fs.R_OK);
			inFile = fs.createReadStream(inFilePath);
		}
	} catch (e) {
		ifError(e, 'error opening input file');
	}

	var outFile = process.stdout;

	try {
		if (opts.out && !opts.identify) {
			fs.accessSync(path.dirname(opts.out), fs.W_OK);
			outFile = fs.createWriteStream(opts.out);
		}
	} catch (e) {
		ifError(e, 'error opening output file');
	}

	var bufs = [];
	inFile.on('readable', function () {
		var data;
		while ((data = inFile.read()))
			bufs.push(data);
	});
	var parseOpts = {};
	parseOpts.filename = inFileName;
	inFile.on('end', function processKey() {
		var buf = Buffer.concat(bufs);
		var fmt = 'auto';
		if (opts.informat)
			fmt = opts.informat;
		var f = sshpk.parseKey;
		if (opts.private)
			f = sshpk.parsePrivateKey;
		try {
			var key = f(buf, fmt, parseOpts);
		} catch (e) {
			if (e.name === 'KeyEncryptedError') {
				getPassword(function (err, pw) {
					if (err)
						ifError(err);
					parseOpts.passphrase = pw;
					processKey();
				});
				return;
			}
			ifError(e);
		}

		if (opts.derive)
			key = key.derive(opts.derive);

		if (opts.comment)
			key.comment = opts.comment;

		if (opts.identify) {
			var kind = 'public';
			if (sshpk.PrivateKey.isPrivateKey(key))
				kind = 'private';
			console.log('%s: a %d bit %s %s key', inFileName,
			    key.size, key.type.toUpperCase(), kind);
			if (key.type === 'ecdsa')
				console.log('ECDSA curve: %s', key.curve);
			if (key.comment)
				console.log('Comment: %s', key.comment);
			console.log('SHA256 fingerprint: ' +
			    key.fingerprint('sha256').toString());
			console.log('MD5 fingerprint: ' +
			    key.fingerprint('md5').toString());
			console.log('SPKI-SHA256 fingerprint: ' +
			    key.fingerprint('sha256', 'spki').toString());
			process.exit(0);
			return;
		}

		if (opts.fingerprint) {
			var hash = opts.hash;
			var type = opts.spki ? 'spki' : 'ssh';
			var format = opts.outformat;
			var fp = key.fingerprint(hash, type).toString(format);
			outFile.write(fp);
			outFile.write('\n');
			outFile.once('drain', function () {
				process.exit(0);
			});
			return;
		}

		fmt = undefined;
		if (opts.outformat)
			fmt = opts.outformat;
		outFile.write(key.toBuffer(fmt));
		if (fmt === 'ssh' ||
		    (!opts.private && fmt === undefined))
			outFile.write('\n');
		outFile.once('drain', function () {
			process.exit(0);
		});
	});
}

function ifError(e, txt) {
	if (txt)
		txt = txt + ': ';
	else
		txt = '';
	console.error('sshpk-conv: ' + txt + e.name + ': ' + e.message);
	if (process.env['DEBUG'] || process.env['V']) {
		console.error(e.stack);
		if (e.innerErr)
			console.error(e.innerErr.stack);
	}
	process.exit(1);
}
#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2015 Joyent, Inc.  All rights reserved.

var dashdash = require('dashdash');
var sshpk = require('../lib/index');
var fs = require('fs');
var path = require('path');
var getPassword = require('getpass').getPass;

var options = [
	{
		names: ['hash', 'H'],
		type: 'string',
		help: 'Hash algorithm (sha1, sha256, sha384, sha512)'
	},
	{
		names: ['verbose', 'v'],
		type: 'bool',
		help: 'Display verbose info about key and hash used'
	},
	{
		names: ['identity', 'i'],
		type: 'string',
		help: 'Path to key to use'
	},
	{
		names: ['file', 'f'],
		type: 'string',
		help: 'Input filename'
	},
	{
		names: ['out', 'o'],
		type: 'string',
		help: 'Output filename'
	},
	{
		names: ['format', 't'],
		type: 'string',
		help: 'Signature format (asn1, ssh, raw)'
	},
	{
		names: ['binary', 'b'],
		type: 'bool',
		help: 'Output raw binary instead of base64'
	},
	{
		names: ['help', 'h'],
		type: 'bool',
		help: 'Shows this help text'
	}
];

var parseOpts = {};

if (require.main === module) {
	var parser = dashdash.createParser({
		options: options
	});

	try {
		var opts = parser.parse(process.argv);
	} catch (e) {
		console.error('sshpk-sign: error: %s', e.message);
		process.exit(1);
	}

	if (opts.help || opts._args.length > 1) {
		var help = parser.help({}).trimRight();
		console.error('sshpk-sign: sign data using an SSH key\n');
		console.error(help);
		process.exit(1);
	}

	if (!opts.identity) {
		var help = parser.help({}).trimRight();
		console.error('sshpk-sign: the -i or --identity option ' +
		    'is required\n');
		console.error(help);
		process.exit(1);
	}

	var keyData = fs.readFileSync(opts.identity);
	parseOpts.filename = opts.identity;

	run();
}

function run() {
	var key;
	try {
		key = sshpk.parsePrivateKey(keyData, 'auto', parseOpts);
	} catch (e) {
		if (e.name === 'KeyEncryptedError') {
			getPassword(function (err, pw) {
				parseOpts.passphrase = pw;
				run();
			});
			return;
		}
		console.error('sshpk-sign: error loading private key "' +
		    opts.identity + '": ' + e.name + ': ' + e.message);
		process.exit(1);
	}

	var hash = opts.hash || key.defaultHashAlgorithm();

	var signer;
	try {
		signer = key.createSign(hash);
	} catch (e) {
		console.error('sshpk-sign: error creating signer: ' +
		    e.name + ': ' + e.message);
		process.exit(1);
	}

	if (opts.verbose) {
		console.error('sshpk-sign: using %s-%s with a %d bit key',
		    key.type, hash, key.size);
	}

	var inFile = process.stdin;
	var inFileName = 'stdin';

	var inFilePath;
	if (opts.file) {
		inFilePath = opts.file;
	} else if (opts._args.length === 1) {
		inFilePath = opts._args[0];
	}

	if (inFilePath)
		inFileName = path.basename(inFilePath);

	try {
		if (inFilePath) {
			fs.accessSync(inFilePath, fs.R_OK);
			inFile = fs.createReadStream(inFilePath);
		}
	} catch (e) {
		console.error('sshpk-sign: error opening input file' +
		     ': ' + e.name + ': ' + e.message);
		process.exit(1);
	}

	var outFile = process.stdout;

	try {
		if (opts.out && !opts.identify) {
			fs.accessSync(path.dirname(opts.out), fs.W_OK);
			outFile = fs.createWriteStream(opts.out);
		}
	} catch (e) {
		console.error('sshpk-sign: error opening output file' +
		    ': ' + e.name + ': ' + e.message);
		process.exit(1);
	}

	inFile.pipe(signer);
	inFile.on('end', function () {
		var sig;
		try {
			sig = signer.sign();
		} catch (e) {
			console.error('sshpk-sign: error signing data: ' +
			    e.name + ': ' + e.message);
			process.exit(1);
		}

		var fmt = opts.format || 'asn1';
		var output;
		try {
			output = sig.toBuffer(fmt);
			if (!opts.binary)
				output = output.toString('base64');
		} catch (e) {
			console.error('sshpk-sign: error converting signature' +
			    ' to ' + fmt + ' format: ' + e.name + ': ' +
			    e.message);
			process.exit(1);
		}

		outFile.write(output);
		if (!opts.binary)
			outFile.write('\n');
		outFile.once('drain', function () {
			process.exit(0);
		});
	});
}
#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2015 Joyent, Inc.  All rights reserved.

var dashdash = require('dashdash');
var sshpk = require('../lib/index');
var fs = require('fs');
var path = require('path');
var Buffer = require('safer-buffer').Buffer;

var options = [
	{
		names: ['hash', 'H'],
		type: 'string',
		help: 'Hash algorithm (sha1, sha256, sha384, sha512)'
	},
	{
		names: ['verbose', 'v'],
		type: 'bool',
		help: 'Display verbose info about key and hash used'
	},
	{
		names: ['identity', 'i'],
		type: 'string',
		help: 'Path to (public) key to use'
	},
	{
		names: ['file', 'f'],
		type: 'string',
		help: 'Input filename'
	},
	{
		names: ['format', 't'],
		type: 'string',
		help: 'Signature format (asn1, ssh, raw)'
	},
	{
		names: ['signature', 's'],
		type: 'string',
		help: 'base64-encoded signature data'
	},
	{
		names: ['help', 'h'],
		type: 'bool',
		help: 'Shows this help text'
	}
];

if (require.main === module) {
	var parser = dashdash.createParser({
		options: options
	});

	try {
		var opts = parser.parse(process.argv);
	} catch (e) {
		console.error('sshpk-verify: error: %s', e.message);
		process.exit(3);
	}

	if (opts.help || opts._args.length > 1) {
		var help = parser.help({}).trimRight();
		console.error('sshpk-verify: sign data using an SSH key\n');
		console.error(help);
		process.exit(3);
	}

	if (!opts.identity) {
		var help = parser.help({}).trimRight();
		console.error('sshpk-verify: the -i or --identity option ' +
		    'is required\n');
		console.error(help);
		process.exit(3);
	}

	if (!opts.signature) {
		var help = parser.help({}).trimRight();
		console.error('sshpk-verify: the -s or --signature option ' +
		    'is required\n');
		console.error(help);
		process.exit(3);
	}

	var keyData = fs.readFileSync(opts.identity);

	var key;
	try {
		key = sshpk.parseKey(keyData);
	} catch (e) {
		console.error('sshpk-verify: error loading key "' +
		    opts.identity + '": ' + e.name + ': ' + e.message);
		process.exit(2);
	}

	var fmt = opts.format || 'asn1';
	var sigData = Buffer.from(opts.signature, 'base64');

	var sig;
	try {
		sig = sshpk.parseSignature(sigData, key.type, fmt);
	} catch (e) {
		console.error('sshpk-verify: error parsing signature: ' +
		    e.name + ': ' + e.message);
		process.exit(2);
	}

	var hash = opts.hash || key.defaultHashAlgorithm();

	var verifier;
	try {
		verifier = key.createVerify(hash);
	} catch (e) {
		console.error('sshpk-verify: error creating verifier: ' +
		    e.name + ': ' + e.message);
		process.exit(2);
	}

	if (opts.verbose) {
		console.error('sshpk-verify: using %s-%s with a %d bit key',
		    key.type, hash, key.size);
	}

	var inFile = process.stdin;
	var inFileName = 'stdin';

	var inFilePath;
	if (opts.file) {
		inFilePath = opts.file;
	} else if (opts._args.length === 1) {
		inFilePath = opts._args[0];
	}

	if (inFilePath)
		inFileName = path.basename(inFilePath);

	try {
		if (inFilePath) {
			fs.accessSync(inFilePath, fs.R_OK);
			inFile = fs.createReadStream(inFilePath);
		}
	} catch (e) {
		console.error('sshpk-verify: error opening input file' +
		     ': ' + e.name + ': ' + e.message);
		process.exit(2);
	}

	inFile.pipe(verifier);
	inFile.on('end', function () {
		var ret;
		try {
			ret = verifier.verify(sig);
		} catch (e) {
			console.error('sshpk-verify: error verifying data: ' +
			    e.name + ': ' + e.message);
			process.exit(1);
		}

		if (ret) {
			console.error('OK');
			process.exit(0);
		}

		console.error('NOT OK');
		process.exit(1);
	});
}
@Library('jenkins-joylib@v1.0.8') _

pipeline {

    agent none

    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        timestamps()
    }

    stages {
        stage('top') {
            parallel {
                stage('v0.10.48-zone') {
                    agent {
                        label joyCommonLabels(image_ver: '15.4.1')
                    }
                    tools {
                        nodejs 'sdcnode-v0.10.48-zone'
                    }
                    stages {
                        stage('check') {
                            steps{
                                sh('make check')
                            }
                        }
                        stage('test') {
                            steps{
                                sh('make test')
                            }
                        }
                    }
                }

                stage('v4-zone') {
                    agent {
                        label joyCommonLabels(image_ver: '15.4.1')
                    }
                    tools {
                        nodejs 'sdcnode-v4-zone'
                    }
                    stages {
                        stage('check') {
                            steps{
                                sh('make check')
                            }
                        }
                        stage('test') {
                            steps{
                                sh('make test')
                            }
                        }
                    }
                }
                
                stage('v6-zone64') {
                    agent {
                        label joyCommonLabels(image_ver: '18.4.0')
                    }
                    tools {
                        nodejs 'sdcnode-v6-zone64'
                    }
                    stages {
                        stage('check') {
                            steps{
                                sh('make check')
                            }
                        }
                        stage('test') {
                            steps{
                                sh('make test')
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            joySlackNotifications()
        }
    }
}
// Copyright 2015 Joyent, Inc.

var Buffer = require('safer-buffer').Buffer;

var algInfo = {
	'dsa': {
		parts: ['p', 'q', 'g', 'y'],
		sizePart: 'p'
	},
	'rsa': {
		parts: ['e', 'n'],
		sizePart: 'n'
	},
	'ecdsa': {
		parts: ['curve', 'Q'],
		sizePart: 'Q'
	},
	'ed25519': {
		parts: ['A'],
		sizePart: 'A'
	}
};
algInfo['curve25519'] = algInfo['ed25519'];

var algPrivInfo = {
	'dsa': {
		parts: ['p', 'q', 'g', 'y', 'x']
	},
	'rsa': {
		parts: ['n', 'e', 'd', 'iqmp', 'p', 'q']
	},
	'ecdsa': {
		parts: ['curve', 'Q', 'd']
	},
	'ed25519': {
		parts: ['A', 'k']
	}
};
algPrivInfo['curve25519'] = algPrivInfo['ed25519'];

var hashAlgs = {
	'md5': true,
	'sha1': true,
	'sha256': true,
	'sha384': true,
	'sha512': true
};

/*
 * Taken from
 * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf
 */
var curves = {
	'nistp256': {
		size: 256,
		pkcs8oid: '1.2.840.10045.3.1.7',
		p: Buffer.from(('00' +
		    'ffffffff 00000001 00000000 00000000' +
		    '00000000 ffffffff ffffffff ffffffff').
		    replace(/ /g, ''), 'hex'),
		a: Buffer.from(('00' +
		    'FFFFFFFF 00000001 00000000 00000000' +
		    '00000000 FFFFFFFF FFFFFFFF FFFFFFFC').
		    replace(/ /g, ''), 'hex'),
		b: Buffer.from((
		    '5ac635d8 aa3a93e7 b3ebbd55 769886bc' +
		    '651d06b0 cc53b0f6 3bce3c3e 27d2604b').
		    replace(/ /g, ''), 'hex'),
		s: Buffer.from(('00' +
		    'c49d3608 86e70493 6a6678e1 139d26b7' +
		    '819f7e90').
		    replace(/ /g, ''), 'hex'),
		n: Buffer.from(('00' +
		    'ffffffff 00000000 ffffffff ffffffff' +
		    'bce6faad a7179e84 f3b9cac2 fc632551').
		    replace(/ /g, ''), 'hex'),
		G: Buffer.from(('04' +
		    '6b17d1f2 e12c4247 f8bce6e5 63a440f2' +
		    '77037d81 2deb33a0 f4a13945 d898c296' +
		    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16' +
		    '2bce3357 6b315ece cbb64068 37bf51f5').
		    replace(/ /g, ''), 'hex')
	},
	'nistp384': {
		size: 384,
		pkcs8oid: '1.3.132.0.34',
		p: Buffer.from(('00' +
		    'ffffffff ffffffff ffffffff ffffffff' +
		    'ffffffff ffffffff ffffffff fffffffe' +
		    'ffffffff 00000000 00000000 ffffffff').
		    replace(/ /g, ''), 'hex'),
		a: Buffer.from(('00' +
		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE' +
		    'FFFFFFFF 00000000 00000000 FFFFFFFC').
		    replace(/ /g, ''), 'hex'),
		b: Buffer.from((
		    'b3312fa7 e23ee7e4 988e056b e3f82d19' +
		    '181d9c6e fe814112 0314088f 5013875a' +
		    'c656398d 8a2ed19d 2a85c8ed d3ec2aef').
		    replace(/ /g, ''), 'hex'),
		s: Buffer.from(('00' +
		    'a335926a a319a27a 1d00896a 6773a482' +
		    '7acdac73').
		    replace(/ /g, ''), 'hex'),
		n: Buffer.from(('00' +
		    'ffffffff ffffffff ffffffff ffffffff' +
		    'ffffffff ffffffff c7634d81 f4372ddf' +
		    '581a0db2 48b0a77a ecec196a ccc52973').
		    replace(/ /g, ''), 'hex'),
		G: Buffer.from(('04' +
		    'aa87ca22 be8b0537 8eb1c71e f320ad74' +
		    '6e1d3b62 8ba79b98 59f741e0 82542a38' +
		    '5502f25d bf55296c 3a545e38 72760ab7' +
		    '3617de4a 96262c6f 5d9e98bf 9292dc29' +
		    'f8f41dbd 289a147c e9da3113 b5f0b8c0' +
		    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f').
		    replace(/ /g, ''), 'hex')
	},
	'nistp521': {
		size: 521,
		pkcs8oid: '1.3.132.0.35',
		p: Buffer.from((
		    '01ffffff ffffffff ffffffff ffffffff' +
		    'ffffffff ffffffff ffffffff ffffffff' +
		    'ffffffff ffffffff ffffffff ffffffff' +
		    'ffffffff ffffffff ffffffff ffffffff' +
		    'ffff').replace(/ /g, ''), 'hex'),
		a: Buffer.from(('01FF' +
		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC').
		    replace(/ /g, ''), 'hex'),
		b: Buffer.from(('51' +
		    '953eb961 8e1c9a1f 929a21a0 b68540ee' +
		    'a2da725b 99b315f3 b8b48991 8ef109e1' +
		    '56193951 ec7e937b 1652c0bd 3bb1bf07' +
		    '3573df88 3d2c34f1 ef451fd4 6b503f00').
		    replace(/ /g, ''), 'hex'),
		s: Buffer.from(('00' +
		    'd09e8800 291cb853 96cc6717 393284aa' +
		    'a0da64ba').replace(/ /g, ''), 'hex'),
		n: Buffer.from(('01ff' +
		    'ffffffff ffffffff ffffffff ffffffff' +
		    'ffffffff ffffffff ffffffff fffffffa' +
		    '51868783 bf2f966b 7fcc0148 f709a5d0' +
		    '3bb5c9b8 899c47ae bb6fb71e 91386409').
		    replace(/ /g, ''), 'hex'),
		G: Buffer.from(('04' +
		    '00c6 858e06b7 0404e9cd 9e3ecb66 2395b442' +
		         '9c648139 053fb521 f828af60 6b4d3dba' +
		         'a14b5e77 efe75928 fe1dc127 a2ffa8de' +
		         '3348b3c1 856a429b f97e7e31 c2e5bd66' +
		    '0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9' +
		         '98f54449 579b4468 17afbd17 273e662c' +
		         '97ee7299 5ef42640 c550b901 3fad0761' +
		         '353c7086 a272c240 88be9476 9fd16650').
		    replace(/ /g, ''), 'hex')
	}
};

module.exports = {
	info: algInfo,
	privInfo: algPrivInfo,
	hashAlgs: hashAlgs,
	curves: curves
};
// Copyright 2016 Joyent, Inc.

module.exports = Certificate;

var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;
var algs = require('./algs');
var crypto = require('crypto');
var Fingerprint = require('./fingerprint');
var Signature = require('./signature');
var errs = require('./errors');
var util = require('util');
var utils = require('./utils');
var Key = require('./key');
var PrivateKey = require('./private-key');
var Identity = require('./identity');

var formats = {};
formats['openssh'] = require('./formats/openssh-cert');
formats['x509'] = require('./formats/x509');
formats['pem'] = require('./formats/x509-pem');

var CertificateParseError = errs.CertificateParseError;
var InvalidAlgorithmError = errs.InvalidAlgorithmError;

function Certificate(opts) {
	assert.object(opts, 'options');
	assert.arrayOfObject(opts.subjects, 'options.subjects');
	utils.assertCompatible(opts.subjects[0], Identity, [1, 0],
	    'options.subjects');
	utils.assertCompatible(opts.subjectKey, Key, [1, 0],
	    'options.subjectKey');
	utils.assertCompatible(opts.issuer, Identity, [1, 0], 'options.issuer');
	if (opts.issuerKey !== undefined) {
		utils.assertCompatible(opts.issuerKey, Key, [1, 0],
		    'options.issuerKey');
	}
	assert.object(opts.signatures, 'options.signatures');
	assert.buffer(opts.serial, 'options.serial');
	assert.date(opts.validFrom, 'options.validFrom');
	assert.date(opts.validUntil, 'optons.validUntil');

	assert.optionalArrayOfString(opts.purposes, 'options.purposes');

	this._hashCache = {};

	this.subjects = opts.subjects;
	this.issuer = opts.issuer;
	this.subjectKey = opts.subjectKey;
	this.issuerKey = opts.issuerKey;
	this.signatures = opts.signatures;
	this.serial = opts.serial;
	this.validFrom = opts.validFrom;
	this.validUntil = opts.validUntil;
	this.purposes = opts.purposes;
}

Certificate.formats = formats;

Certificate.prototype.toBuffer = function (format, options) {
	if (format === undefined)
		format = 'x509';
	assert.string(format, 'format');
	assert.object(formats[format], 'formats[format]');
	assert.optionalObject(options, 'options');

	return (formats[format].write(this, options));
};

Certificate.prototype.toString = function (format, options) {
	if (format === undefined)
		format = 'pem';
	return (this.toBuffer(format, options).toString());
};

Certificate.prototype.fingerprint = function (algo) {
	if (algo === undefined)
		algo = 'sha256';
	assert.string(algo, 'algorithm');
	var opts = {
		type: 'certificate',
		hash: this.hash(algo),
		algorithm: algo
	};
	return (new Fingerprint(opts));
};

Certificate.prototype.hash = function (algo) {
	assert.string(algo, 'algorithm');
	algo = algo.toLowerCase();
	if (algs.hashAlgs[algo] === undefined)
		throw (new InvalidAlgorithmError(algo));

	if (this._hashCache[algo])
		return (this._hashCache[algo]);

	var hash = crypto.createHash(algo).
	    update(this.toBuffer('x509')).digest();
	this._hashCache[algo] = hash;
	return (hash);
};

Certificate.prototype.isExpired = function (when) {
	if (when === undefined)
		when = new Date();
	return (!((when.getTime() >= this.validFrom.getTime()) &&
		(when.getTime() < this.validUntil.getTime())));
};

Certificate.prototype.isSignedBy = function (issuerCert) {
	utils.assertCompatible(issuerCert, Certificate, [1, 0], 'issuer');

	if (!this.issuer.equals(issuerCert.subjects[0]))
		return (false);
	if (this.issuer.purposes && this.issuer.purposes.length > 0 &&
	    this.issuer.purposes.indexOf('ca') === -1) {
		return (false);
	}

	return (this.isSignedByKey(issuerCert.subjectKey));
};

Certificate.prototype.getExtension = function (keyOrOid) {
	assert.string(keyOrOid, 'keyOrOid');
	var ext = this.getExtensions().filter(function (maybeExt) {
		if (maybeExt.format === 'x509')
			return (maybeExt.oid === keyOrOid);
		if (maybeExt.format === 'openssh')
			return (maybeExt.name === keyOrOid);
		return (false);
	})[0];
	return (ext);
};

Certificate.prototype.getExtensions = function () {
	var exts = [];
	var x509 = this.signatures.x509;
	if (x509 && x509.extras && x509.extras.exts) {
		x509.extras.exts.forEach(function (ext) {
			ext.format = 'x509';
			exts.push(ext);
		});
	}
	var openssh = this.signatures.openssh;
	if (openssh && openssh.exts) {
		openssh.exts.forEach(function (ext) {
			ext.format = 'openssh';
			exts.push(ext);
		});
	}
	return (exts);
};

Certificate.prototype.isSignedByKey = function (issuerKey) {
	utils.assertCompatible(issuerKey, Key, [1, 2], 'issuerKey');

	if (this.issuerKey !== undefined) {
		return (this.issuerKey.
		    fingerprint('sha512').matches(issuerKey));
	}

	var fmt = Object.keys(this.signatures)[0];
	var valid = formats[fmt].verify(this, issuerKey);
	if (valid)
		this.issuerKey = issuerKey;
	return (valid);
};

Certificate.prototype.signWith = function (key) {
	utils.assertCompatible(key, PrivateKey, [1, 2], 'key');
	var fmts = Object.keys(formats);
	var didOne = false;
	for (var i = 0; i < fmts.length; ++i) {
		if (fmts[i] !== 'pem') {
			var ret = formats[fmts[i]].sign(this, key);
			if (ret === true)
				didOne = true;
		}
	}
	if (!didOne) {
		throw (new Error('Failed to sign the certificate for any ' +
		    'available certificate formats'));
	}
};

Certificate.createSelfSigned = function (subjectOrSubjects, key, options) {
	var subjects;
	if (Array.isArray(subjectOrSubjects))
		subjects = subjectOrSubjects;
	else
		subjects = [subjectOrSubjects];

	assert.arrayOfObject(subjects);
	subjects.forEach(function (subject) {
		utils.assertCompatible(subject, Identity, [1, 0], 'subject');
	});

	utils.assertCompatible(key, PrivateKey, [1, 2], 'private key');

	assert.optionalObject(options, 'options');
	if (options === undefined)
		options = {};
	assert.optionalObject(options.validFrom, 'options.validFrom');
	assert.optionalObject(options.validUntil, 'options.validUntil');
	var validFrom = options.validFrom;
	var validUntil = options.validUntil;
	if (validFrom === undefined)
		validFrom = new Date();
	if (validUntil === undefined) {
		assert.optionalNumber(options.lifetime, 'options.lifetime');
		var lifetime = options.lifetime;
		if (lifetime === undefined)
			lifetime = 10*365*24*3600;
		validUntil = new Date();
		validUntil.setTime(validUntil.getTime() + lifetime*1000);
	}
	assert.optionalBuffer(options.serial, 'options.serial');
	var serial = options.serial;
	if (serial === undefined)
		serial = Buffer.from('0000000000000001', 'hex');

	var purposes = options.purposes;
	if (purposes === undefined)
		purposes = [];

	if (purposes.indexOf('signature') === -1)
		purposes.push('signature');

	/* Self-signed certs are always CAs. */
	if (purposes.indexOf('ca') === -1)
		purposes.push('ca');
	if (purposes.indexOf('crl') === -1)
		purposes.push('crl');

	/*
	 * If we weren't explicitly given any other purposes, do the sensible
	 * thing and add some basic ones depending on the subject type.
	 */
	if (purposes.length <= 3) {
		var hostSubjects = subjects.filter(function (subject) {
			return (subject.type === 'host');
		});
		var userSubjects = subjects.filter(function (subject) {
			return (subject.type === 'user');
		});
		if (hostSubjects.length > 0) {
			if (purposes.indexOf('serverAuth') === -1)
				purposes.push('serverAuth');
		}
		if (userSubjects.length > 0) {
			if (purposes.indexOf('clientAuth') === -1)
				purposes.push('clientAuth');
		}
		if (userSubjects.length > 0 || hostSubjects.length > 0) {
			if (purposes.indexOf('keyAgreement') === -1)
				purposes.push('keyAgreement');
			if (key.type === 'rsa' &&
			    purposes.indexOf('encryption') === -1)
				purposes.push('encryption');
		}
	}

	var cert = new Certificate({
		subjects: subjects,
		issuer: subjects[0],
		subjectKey: key.toPublic(),
		issuerKey: key.toPublic(),
		signatures: {},
		serial: serial,
		validFrom: validFrom,
		validUntil: validUntil,
		purposes: purposes
	});
	cert.signWith(key);

	return (cert);
};

Certificate.create =
    function (subjectOrSubjects, key, issuer, issuerKey, options) {
	var subjects;
	if (Array.isArray(subjectOrSubjects))
		subjects = subjectOrSubjects;
	else
		subjects = [subjectOrSubjects];

	assert.arrayOfObject(subjects);
	subjects.forEach(function (subject) {
		utils.assertCompatible(subject, Identity, [1, 0], 'subject');
	});

	utils.assertCompatible(key, Key, [1, 0], 'key');
	if (PrivateKey.isPrivateKey(key))
		key = key.toPublic();
	utils.assertCompatible(issuer, Identity, [1, 0], 'issuer');
	utils.assertCompatible(issuerKey, PrivateKey, [1, 2], 'issuer key');

	assert.optionalObject(options, 'options');
	if (options === undefined)
		options = {};
	assert.optionalObject(options.validFrom, 'options.validFrom');
	assert.optionalObject(options.validUntil, 'options.validUntil');
	var validFrom = options.validFrom;
	var validUntil = options.validUntil;
	if (validFrom === undefined)
		validFrom = new Date();
	if (validUntil === undefined) {
		assert.optionalNumber(options.lifetime, 'options.lifetime');
		var lifetime = options.lifetime;
		if (lifetime === undefined)
			lifetime = 10*365*24*3600;
		validUntil = new Date();
		validUntil.setTime(validUntil.getTime() + lifetime*1000);
	}
	assert.optionalBuffer(options.serial, 'options.serial');
	var serial = options.serial;
	if (serial === undefined)
		serial = Buffer.from('0000000000000001', 'hex');

	var purposes = options.purposes;
	if (purposes === undefined)
		purposes = [];

	if (purposes.indexOf('signature') === -1)
		purposes.push('signature');

	if (options.ca === true) {
		if (purposes.indexOf('ca') === -1)
			purposes.push('ca');
		if (purposes.indexOf('crl') === -1)
			purposes.push('crl');
	}

	var hostSubjects = subjects.filter(function (subject) {
		return (subject.type === 'host');
	});
	var userSubjects = subjects.filter(function (subject) {
		return (subject.type === 'user');
	});
	if (hostSubjects.length > 0) {
		if (purposes.indexOf('serverAuth') === -1)
			purposes.push('serverAuth');
	}
	if (userSubjects.length > 0) {
		if (purposes.indexOf('clientAuth') === -1)
			purposes.push('clientAuth');
	}
	if (userSubjects.length > 0 || hostSubjects.length > 0) {
		if (purposes.indexOf('keyAgreement') === -1)
			purposes.push('keyAgreement');
		if (key.type === 'rsa' &&
		    purposes.indexOf('encryption') === -1)
			purposes.push('encryption');
	}

	var cert = new Certificate({
		subjects: subjects,
		issuer: issuer,
		subjectKey: key,
		issuerKey: issuerKey.toPublic(),
		signatures: {},
		serial: serial,
		validFrom: validFrom,
		validUntil: validUntil,
		purposes: purposes
	});
	cert.signWith(issuerKey);

	return (cert);
};

Certificate.parse = function (data, format, options) {
	if (typeof (data) !== 'string')
		assert.buffer(data, 'data');
	if (format === undefined)
		format = 'auto';
	assert.string(format, 'format');
	if (typeof (options) === 'string')
		options = { filename: options };
	assert.optionalObject(options, 'options');
	if (options === undefined)
		options = {};
	assert.optionalString(options.filename, 'options.filename');
	if (options.filename === undefined)
		options.filename = '(unnamed)';

	assert.object(formats[format], 'formats[format]');

	try {
		var k = formats[format].read(data, options);
		return (k);
	} catch (e) {
		throw (new CertificateParseError(options.filename, format, e));
	}
};

Certificate.isCertificate = function (obj, ver) {
	return (utils.isCompatible(obj, Certificate, ver));
};

/*
 * API versions for Certificate:
 * [1,0] -- initial ver
 * [1,1] -- openssh format now unpacks extensions
 */
Certificate.prototype._sshpkApiVersion = [1, 1];

Certificate._oldVersionDetect = function (obj) {
	return ([1, 0]);
};
// Copyright 2017 Joyent, Inc.

module.exports = {
	DiffieHellman: DiffieHellman,
	generateECDSA: generateECDSA,
	generateED25519: generateED25519
};

var assert = require('assert-plus');
var crypto = require('crypto');
var Buffer = require('safer-buffer').Buffer;
var algs = require('./algs');
var utils = require('./utils');
var nacl = require('tweetnacl');

var Key = require('./key');
var PrivateKey = require('./private-key');

var CRYPTO_HAVE_ECDH = (crypto.createECDH !== undefined);

var ecdh = require('ecc-jsbn');
var ec = require('ecc-jsbn/lib/ec');
var jsbn = require('jsbn').BigInteger;

function DiffieHellman(key) {
	utils.assertCompatible(key, Key, [1, 4], 'key');
	this._isPriv = PrivateKey.isPrivateKey(key, [1, 3]);
	this._algo = key.type;
	this._curve = key.curve;
	this._key = key;
	if (key.type === 'dsa') {
		if (!CRYPTO_HAVE_ECDH) {
			throw (new Error('Due to bugs in the node 0.10 ' +
			    'crypto API, node 0.12.x or later is required ' +
			    'to use DH'));
		}
		this._dh = crypto.createDiffieHellman(
		    key.part.p.data, undefined,
		    key.part.g.data, undefined);
		this._p = key.part.p;
		this._g = key.part.g;
		if (this._isPriv)
			this._dh.setPrivateKey(key.part.x.data);
		this._dh.setPublicKey(key.part.y.data);

	} else if (key.type === 'ecdsa') {
		if (!CRYPTO_HAVE_ECDH) {
			this._ecParams = new X9ECParameters(this._curve);

			if (this._isPriv) {
				this._priv = new ECPrivate(
				    this._ecParams, key.part.d.data);
			}
			return;
		}

		var curve = {
			'nistp256': 'prime256v1',
			'nistp384': 'secp384r1',
			'nistp521': 'secp521r1'
		}[key.curve];
		this._dh = crypto.createECDH(curve);
		if (typeof (this._dh) !== 'object' ||
		    typeof (this._dh.setPrivateKey) !== 'function') {
			CRYPTO_HAVE_ECDH = false;
			DiffieHellman.call(this, key);
			return;
		}
		if (this._isPriv)
			this._dh.setPrivateKey(key.part.d.data);
		this._dh.setPublicKey(key.part.Q.data);

	} else if (key.type === 'curve25519') {
		if (this._isPriv) {
			utils.assertCompatible(key, PrivateKey, [1, 5], 'key');
			this._priv = key.part.k.data;
		}

	} else {
		throw (new Error('DH not supported for ' + key.type + ' keys'));
	}
}

DiffieHellman.prototype.getPublicKey = function () {
	if (this._isPriv)
		return (this._key.toPublic());
	return (this._key);
};

DiffieHellman.prototype.getPrivateKey = function () {
	if (this._isPriv)
		return (this._key);
	else
		return (undefined);
};
DiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;

DiffieHellman.prototype._keyCheck = function (pk, isPub) {
	assert.object(pk, 'key');
	if (!isPub)
		utils.assertCompatible(pk, PrivateKey, [1, 3], 'key');
	utils.assertCompatible(pk, Key, [1, 4], 'key');

	if (pk.type !== this._algo) {
		throw (new Error('A ' + pk.type + ' key cannot be used in ' +
		    this._algo + ' Diffie-Hellman'));
	}

	if (pk.curve !== this._curve) {
		throw (new Error('A key from the ' + pk.curve + ' curve ' +
		    'cannot be used with a ' + this._curve +
		    ' Diffie-Hellman'));
	}

	if (pk.type === 'dsa') {
		assert.deepEqual(pk.part.p, this._p,
		    'DSA key prime does not match');
		assert.deepEqual(pk.part.g, this._g,
		    'DSA key generator does not match');
	}
};

DiffieHellman.prototype.setKey = function (pk) {
	this._keyCheck(pk);

	if (pk.type === 'dsa') {
		this._dh.setPrivateKey(pk.part.x.data);
		this._dh.setPublicKey(pk.part.y.data);

	} else if (pk.type === 'ecdsa') {
		if (CRYPTO_HAVE_ECDH) {
			this._dh.setPrivateKey(pk.part.d.data);
			this._dh.setPublicKey(pk.part.Q.data);
		} else {
			this._priv = new ECPrivate(
			    this._ecParams, pk.part.d.data);
		}

	} else if (pk.type === 'curve25519') {
		var k = pk.part.k;
		if (!pk.part.k)
			k = pk.part.r;
		this._priv = k.data;
		if (this._priv[0] === 0x00)
			this._priv = this._priv.slice(1);
		this._priv = this._priv.slice(0, 32);
	}
	this._key = pk;
	this._isPriv = true;
};
DiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;

DiffieHellman.prototype.computeSecret = function (otherpk) {
	this._keyCheck(otherpk, true);
	if (!this._isPriv)
		throw (new Error('DH exchange has not been initialized with ' +
		    'a private key yet'));

	var pub;
	if (this._algo === 'dsa') {
		return (this._dh.computeSecret(
		    otherpk.part.y.data));

	} else if (this._algo === 'ecdsa') {
		if (CRYPTO_HAVE_ECDH) {
			return (this._dh.computeSecret(
			    otherpk.part.Q.data));
		} else {
			pub = new ECPublic(
			    this._ecParams, otherpk.part.Q.data);
			return (this._priv.deriveSharedSecret(pub));
		}

	} else if (this._algo === 'curve25519') {
		pub = otherpk.part.A.data;
		while (pub[0] === 0x00 && pub.length > 32)
			pub = pub.slice(1);
		var priv = this._priv;
		assert.strictEqual(pub.length, 32);
		assert.strictEqual(priv.length, 32);

		var secret = nacl.box.before(new Uint8Array(pub),
		    new Uint8Array(priv));

		return (Buffer.from(secret));
	}

	throw (new Error('Invalid algorithm: ' + this._algo));
};

DiffieHellman.prototype.generateKey = function () {
	var parts = [];
	var priv, pub;
	if (this._algo === 'dsa') {
		this._dh.generateKeys();

		parts.push({name: 'p', data: this._p.data});
		parts.push({name: 'q', data: this._key.part.q.data});
		parts.push({name: 'g', data: this._g.data});
		parts.push({name: 'y', data: this._dh.getPublicKey()});
		parts.push({name: 'x', data: this._dh.getPrivateKey()});
		this._key = new PrivateKey({
			type: 'dsa',
			parts: parts
		});
		this._isPriv = true;
		return (this._key);

	} else if (this._algo === 'ecdsa') {
		if (CRYPTO_HAVE_ECDH) {
			this._dh.generateKeys();

			parts.push({name: 'curve',
			    data: Buffer.from(this._curve)});
			parts.push({name: 'Q', data: this._dh.getPublicKey()});
			parts.push({name: 'd', data: this._dh.getPrivateKey()});
			this._key = new PrivateKey({
				type: 'ecdsa',
				curve: this._curve,
				parts: parts
			});
			this._isPriv = true;
			return (this._key);

		} else {
			var n = this._ecParams.getN();
			var r = new jsbn(crypto.randomBytes(n.bitLength()));
			var n1 = n.subtract(jsbn.ONE);
			priv = r.mod(n1).add(jsbn.ONE);
			pub = this._ecParams.getG().multiply(priv);

			priv = Buffer.from(priv.toByteArray());
			pub = Buffer.from(this._ecParams.getCurve().
			    encodePointHex(pub), 'hex');

			this._priv = new ECPrivate(this._ecParams, priv);

			parts.push({name: 'curve',
			    data: Buffer.from(this._curve)});
			parts.push({name: 'Q', data: pub});
			parts.push({name: 'd', data: priv});

			this._key = new PrivateKey({
				type: 'ecdsa',
				curve: this._curve,
				parts: parts
			});
			this._isPriv = true;
			return (this._key);
		}

	} else if (this._algo === 'curve25519') {
		var pair = nacl.box.keyPair();
		priv = Buffer.from(pair.secretKey);
		pub = Buffer.from(pair.publicKey);
		priv = Buffer.concat([priv, pub]);
		assert.strictEqual(priv.length, 64);
		assert.strictEqual(pub.length, 32);

		parts.push({name: 'A', data: pub});
		parts.push({name: 'k', data: priv});
		this._key = new PrivateKey({
			type: 'curve25519',
			parts: parts
		});
		this._isPriv = true;
		return (this._key);
	}

	throw (new Error('Invalid algorithm: ' + this._algo));
};
DiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;

/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */

function X9ECParameters(name) {
	var params = algs.curves[name];
	assert.object(params);

	var p = new jsbn(params.p);
	var a = new jsbn(params.a);
	var b = new jsbn(params.b);
	var n = new jsbn(params.n);
	var h = jsbn.ONE;
	var curve = new ec.ECCurveFp(p, a, b);
	var G = curve.decodePointHex(params.G.toString('hex'));

	this.curve = curve;
	this.g = G;
	this.n = n;
	this.h = h;
}
X9ECParameters.prototype.getCurve = function () { return (this.curve); };
X9ECParameters.prototype.getG = function () { return (this.g); };
X9ECParameters.prototype.getN = function () { return (this.n); };
X9ECParameters.prototype.getH = function () { return (this.h); };

function ECPublic(params, buffer) {
	this._params = params;
	if (buffer[0] === 0x00)
		buffer = buffer.slice(1);
	this._pub = params.getCurve().decodePointHex(buffer.toString('hex'));
}

function ECPrivate(params, buffer) {
	this._params = params;
	this._priv = new jsbn(utils.mpNormalize(buffer));
}
ECPrivate.prototype.deriveSharedSecret = function (pubKey) {
	assert.ok(pubKey instanceof ECPublic);
	var S = pubKey._pub.multiply(this._priv);
	return (Buffer.from(S.getX().toBigInteger().toByteArray()));
};

function generateED25519() {
	var pair = nacl.sign.keyPair();
	var priv = Buffer.from(pair.secretKey);
	var pub = Buffer.from(pair.publicKey);
	assert.strictEqual(priv.length, 64);
	assert.strictEqual(pub.length, 32);

	var parts = [];
	parts.push({name: 'A', data: pub});
	parts.push({name: 'k', data: priv.slice(0, 32)});
	var key = new PrivateKey({
		type: 'ed25519',
		parts: parts
	});
	return (key);
}

/* Generates a new ECDSA private key on a given curve. */
function generateECDSA(curve) {
	var parts = [];
	var key;

	if (CRYPTO_HAVE_ECDH) {
		/*
		 * Node crypto doesn't expose key generation directly, but the
		 * ECDH instances can generate keys. It turns out this just
		 * calls into the OpenSSL generic key generator, and we can
		 * read its output happily without doing an actual DH. So we
		 * use that here.
		 */
		var osCurve = {
			'nistp256': 'prime256v1',
			'nistp384': 'secp384r1',
			'nistp521': 'secp521r1'
		}[curve];

		var dh = crypto.createECDH(osCurve);
		dh.generateKeys();

		parts.push({name: 'curve',
		    data: Buffer.from(curve)});
		parts.push({name: 'Q', data: dh.getPublicKey()});
		parts.push({name: 'd', data: dh.getPrivateKey()});

		key = new PrivateKey({
			type: 'ecdsa',
			curve: curve,
			parts: parts
		});
		return (key);
	} else {

		var ecParams = new X9ECParameters(curve);

		/* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */
		var n = ecParams.getN();
		/*
		 * The crypto.randomBytes() function can only give us whole
		 * bytes, so taking a nod from X9.62, we round up.
		 */
		var cByteLen = Math.ceil((n.bitLength() + 64) / 8);
		var c = new jsbn(crypto.randomBytes(cByteLen));

		var n1 = n.subtract(jsbn.ONE);
		var priv = c.mod(n1).add(jsbn.ONE);
		var pub = ecParams.getG().multiply(priv);

		priv = Buffer.from(priv.toByteArray());
		pub = Buffer.from(ecParams.getCurve().
		    encodePointHex(pub), 'hex');

		parts.push({name: 'curve', data: Buffer.from(curve)});
		parts.push({name: 'Q', data: pub});
		parts.push({name: 'd', data: priv});

		key = new PrivateKey({
			type: 'ecdsa',
			curve: curve,
			parts: parts
		});
		return (key);
	}
}
// Copyright 2015 Joyent, Inc.

module.exports = {
	Verifier: Verifier,
	Signer: Signer
};

var nacl = require('tweetnacl');
var stream = require('stream');
var util = require('util');
var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;
var Signature = require('./signature');

function Verifier(key, hashAlgo) {
	if (hashAlgo.toLowerCase() !== 'sha512')
		throw (new Error('ED25519 only supports the use of ' +
		    'SHA-512 hashes'));

	this.key = key;
	this.chunks = [];

	stream.Writable.call(this, {});
}
util.inherits(Verifier, stream.Writable);

Verifier.prototype._write = function (chunk, enc, cb) {
	this.chunks.push(chunk);
	cb();
};

Verifier.prototype.update = function (chunk) {
	if (typeof (chunk) === 'string')
		chunk = Buffer.from(chunk, 'binary');
	this.chunks.push(chunk);
};

Verifier.prototype.verify = function (signature, fmt) {
	var sig;
	if (Signature.isSignature(signature, [2, 0])) {
		if (signature.type !== 'ed25519')
			return (false);
		sig = signature.toBuffer('raw');

	} else if (typeof (signature) === 'string') {
		sig = Buffer.from(signature, 'base64');

	} else if (Signature.isSignature(signature, [1, 0])) {
		throw (new Error('signature was created by too old ' +
		    'a version of sshpk and cannot be verified'));
	}

	assert.buffer(sig);
	return (nacl.sign.detached.verify(
	    new Uint8Array(Buffer.concat(this.chunks)),
	    new Uint8Array(sig),
	    new Uint8Array(this.key.part.A.data)));
};

function Signer(key, hashAlgo) {
	if (hashAlgo.toLowerCase() !== 'sha512')
		throw (new Error('ED25519 only supports the use of ' +
		    'SHA-512 hashes'));

	this.key = key;
	this.chunks = [];

	stream.Writable.call(this, {});
}
util.inherits(Signer, stream.Writable);

Signer.prototype._write = function (chunk, enc, cb) {
	this.chunks.push(chunk);
	cb();
};

Signer.prototype.update = function (chunk) {
	if (typeof (chunk) === 'string')
		chunk = Buffer.from(chunk, 'binary');
	this.chunks.push(chunk);
};

Signer.prototype.sign = function () {
	var sig = nacl.sign.detached(
	    new Uint8Array(Buffer.concat(this.chunks)),
	    new Uint8Array(Buffer.concat([
		this.key.part.k.data, this.key.part.A.data])));
	var sigBuf = Buffer.from(sig);
	var sigObj = Signature.parse(sigBuf, 'ed25519', 'raw');
	sigObj.hashAlgorithm = 'sha512';
	return (sigObj);
};
// Copyright 2015 Joyent, Inc.

var assert = require('assert-plus');
var util = require('util');

function FingerprintFormatError(fp, format) {
	if (Error.captureStackTrace)
		Error.captureStackTrace(this, FingerprintFormatError);
	this.name = 'FingerprintFormatError';
	this.fingerprint = fp;
	this.format = format;
	this.message = 'Fingerprint format is not supported, or is invalid: ';
	if (fp !== undefined)
		this.message += ' fingerprint = ' + fp;
	if (format !== undefined)
		this.message += ' format = ' + format;
}
util.inherits(FingerprintFormatError, Error);

function InvalidAlgorithmError(alg) {
	if (Error.captureStackTrace)
		Error.captureStackTrace(this, InvalidAlgorithmError);
	this.name = 'InvalidAlgorithmError';
	this.algorithm = alg;
	this.message = 'Algorithm "' + alg + '" is not supported';
}
util.inherits(InvalidAlgorithmError, Error);

function KeyParseError(name, format, innerErr) {
	if (Error.captureStackTrace)
		Error.captureStackTrace(this, KeyParseError);
	this.name = 'KeyParseError';
	this.format = format;
	this.keyName = name;
	this.innerErr = innerErr;
	this.message = 'Failed to parse ' + name + ' as a valid ' + format +
	    ' format key: ' + innerErr.message;
}
util.inherits(KeyParseError, Error);

function SignatureParseError(type, format, innerErr) {
	if (Error.captureStackTrace)
		Error.captureStackTrace(this, SignatureParseError);
	this.name = 'SignatureParseError';
	this.type = type;
	this.format = format;
	this.innerErr = innerErr;
	this.message = 'Failed to parse the given data as a ' + type +
	    ' signature in ' + format + ' format: ' + innerErr.message;
}
util.inherits(SignatureParseError, Error);

function CertificateParseError(name, format, innerErr) {
	if (Error.captureStackTrace)
		Error.captureStackTrace(this, CertificateParseError);
	this.name = 'CertificateParseError';
	this.format = format;
	this.certName = name;
	this.innerErr = innerErr;
	this.message = 'Failed to parse ' + name + ' as a valid ' + format +
	    ' format certificate: ' + innerErr.message;
}
util.inherits(CertificateParseError, Error);

function KeyEncryptedError(name, format) {
	if (Error.captureStackTrace)
		Error.captureStackTrace(this, KeyEncryptedError);
	this.name = 'KeyEncryptedError';
	this.format = format;
	this.keyName = name;
	this.message = 'The ' + format + ' format key ' + name + ' is ' +
	    'encrypted (password-protected), and no passphrase was ' +
	    'provided in `options`';
}
util.inherits(KeyEncryptedError, Error);

module.exports = {
	FingerprintFormatError: FingerprintFormatError,
	InvalidAlgorithmError: InvalidAlgorithmError,
	KeyParseError: KeyParseError,
	SignatureParseError: SignatureParseError,
	KeyEncryptedError: KeyEncryptedError,
	CertificateParseError: CertificateParseError
};
// Copyright 2018 Joyent, Inc.

module.exports = Fingerprint;

var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;
var algs = require('./algs');
var crypto = require('crypto');
var errs = require('./errors');
var Key = require('./key');
var PrivateKey = require('./private-key');
var Certificate = require('./certificate');
var utils = require('./utils');

var FingerprintFormatError = errs.FingerprintFormatError;
var InvalidAlgorithmError = errs.InvalidAlgorithmError;

function Fingerprint(opts) {
	assert.object(opts, 'options');
	assert.string(opts.type, 'options.type');
	assert.buffer(opts.hash, 'options.hash');
	assert.string(opts.algorithm, 'options.algorithm');

	this.algorithm = opts.algorithm.toLowerCase();
	if (algs.hashAlgs[this.algorithm] !== true)
		throw (new InvalidAlgorithmError(this.algorithm));

	this.hash = opts.hash;
	this.type = opts.type;
	this.hashType = opts.hashType;
}

Fingerprint.prototype.toString = function (format) {
	if (format === undefined) {
		if (this.algorithm === 'md5' || this.hashType === 'spki')
			format = 'hex';
		else
			format = 'base64';
	}
	assert.string(format);

	switch (format) {
	case 'hex':
		if (this.hashType === 'spki')
			return (this.hash.toString('hex'));
		return (addColons(this.hash.toString('hex')));
	case 'base64':
		if (this.hashType === 'spki')
			return (this.hash.toString('base64'));
		return (sshBase64Format(this.algorithm,
		    this.hash.toString('base64')));
	default:
		throw (new FingerprintFormatError(undefined, format));
	}
};

Fingerprint.prototype.matches = function (other) {
	assert.object(other, 'key or certificate');
	if (this.type === 'key' && this.hashType !== 'ssh') {
		utils.assertCompatible(other, Key, [1, 7], 'key with spki');
		if (PrivateKey.isPrivateKey(other)) {
			utils.assertCompatible(other, PrivateKey, [1, 6],
			    'privatekey with spki support');
		}
	} else if (this.type === 'key') {
		utils.assertCompatible(other, Key, [1, 0], 'key');
	} else {
		utils.assertCompatible(other, Certificate, [1, 0],
		    'certificate');
	}

	var theirHash = other.hash(this.algorithm, this.hashType);
	var theirHash2 = crypto.createHash(this.algorithm).
	    update(theirHash).digest('base64');

	if (this.hash2 === undefined)
		this.hash2 = crypto.createHash(this.algorithm).
		    update(this.hash).digest('base64');

	return (this.hash2 === theirHash2);
};

/*JSSTYLED*/
var base64RE = /^[A-Za-z0-9+\/=]+$/;
/*JSSTYLED*/
var hexRE = /^[a-fA-F0-9]+$/;

Fingerprint.parse = function (fp, options) {
	assert.string(fp, 'fingerprint');

	var alg, hash, enAlgs;
	if (Array.isArray(options)) {
		enAlgs = options;
		options = {};
	}
	assert.optionalObject(options, 'options');
	if (options === undefined)
		options = {};
	if (options.enAlgs !== undefined)
		enAlgs = options.enAlgs;
	if (options.algorithms !== undefined)
		enAlgs = options.algorithms;
	assert.optionalArrayOfString(enAlgs, 'algorithms');

	var hashType = 'ssh';
	if (options.hashType !== undefined)
		hashType = options.hashType;
	assert.string(hashType, 'options.hashType');

	var parts = fp.split(':');
	if (parts.length == 2) {
		alg = parts[0].toLowerCase();
		if (!base64RE.test(parts[1]))
			throw (new FingerprintFormatError(fp));
		try {
			hash = Buffer.from(parts[1], 'base64');
		} catch (e) {
			throw (new FingerprintFormatError(fp));
		}
	} else if (parts.length > 2) {
		alg = 'md5';
		if (parts[0].toLowerCase() === 'md5')
			parts = parts.slice(1);
		parts = parts.map(function (p) {
			while (p.length < 2)
				p = '0' + p;
			if (p.length > 2)
				throw (new FingerprintFormatError(fp));
			return (p);
		});
		parts = parts.join('');
		if (!hexRE.test(parts) || parts.length % 2 !== 0)
			throw (new FingerprintFormatError(fp));
		try {
			hash = Buffer.from(parts, 'hex');
		} catch (e) {
			throw (new FingerprintFormatError(fp));
		}
	} else {
		if (hexRE.test(fp)) {
			hash = Buffer.from(fp, 'hex');
		} else if (base64RE.test(fp)) {
			hash = Buffer.from(fp, 'base64');
		} else {
			throw (new FingerprintFormatError(fp));
		}

		switch (hash.length) {
		case 32:
			alg = 'sha256';
			break;
		case 16:
			alg = 'md5';
			break;
		case 20:
			alg = 'sha1';
			break;
		case 64:
			alg = 'sha512';
			break;
		default:
			throw (new FingerprintFormatError(fp));
		}

		/* Plain hex/base64: guess it's probably SPKI unless told. */
		if (options.hashType === undefined)
			hashType = 'spki';
	}

	if (alg === undefined)
		throw (new FingerprintFormatError(fp));

	if (algs.hashAlgs[alg] === undefined)
		throw (new InvalidAlgorithmError(alg));

	if (enAlgs !== undefined) {
		enAlgs = enAlgs.map(function (a) { return a.toLowerCase(); });
		if (enAlgs.indexOf(alg) === -1)
			throw (new InvalidAlgorithmError(alg));
	}

	return (new Fingerprint({
		algorithm: alg,
		hash: hash,
		type: options.type || 'key',
		hashType: hashType
	}));
};

function addColons(s) {
	/*JSSTYLED*/
	return (s.replace(/(.{2})(?=.)/g, '$1:'));
}

function base64Strip(s) {
	/*JSSTYLED*/
	return (s.replace(/=*$/, ''));
}

function sshBase64Format(alg, h) {
	return (alg.toUpperCase() + ':' + base64Strip(h));
}

Fingerprint.isFingerprint = function (obj, ver) {
	return (utils.isCompatible(obj, Fingerprint, ver));
};

/*
 * API versions for Fingerprint:
 * [1,0] -- initial ver
 * [1,1] -- first tagged ver
 * [1,2] -- hashType and spki support
 */
Fingerprint.prototype._sshpkApiVersion = [1, 2];

Fingerprint._oldVersionDetect = function (obj) {
	assert.func(obj.toString);
	assert.func(obj.matches);
	return ([1, 0]);
};
// Copyright 2018 Joyent, Inc.

module.exports = {
	read: read,
	write: write
};

var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;
var utils = require('../utils');
var Key = require('../key');
var PrivateKey = require('../private-key');

var pem = require('./pem');
var ssh = require('./ssh');
var rfc4253 = require('./rfc4253');
var dnssec = require('./dnssec');
var putty = require('./putty');

var DNSSEC_PRIVKEY_HEADER_PREFIX = 'Private-key-format: v1';

function read(buf, options) {
	if (typeof (buf) === 'string') {
		if (buf.trim().match(/^[-]+[ ]*BEGIN/))
			return (pem.read(buf, options));
		if (buf.match(/^\s*ssh-[a-z]/))
			return (ssh.read(buf, options));
		if (buf.match(/^\s*ecdsa-/))
			return (ssh.read(buf, options));
		if (buf.match(/^putty-user-key-file-2:/i))
			return (putty.read(buf, options));
		if (findDNSSECHeader(buf))
			return (dnssec.read(buf, options));
		buf = Buffer.from(buf, 'binary');
	} else {
		assert.buffer(buf);
		if (findPEMHeader(buf))
			return (pem.read(buf, options));
		if (findSSHHeader(buf))
			return (ssh.read(buf, options));
		if (findPuTTYHeader(buf))
			return (putty.read(buf, options));
		if (findDNSSECHeader(buf))
			return (dnssec.read(buf, options));
	}
	if (buf.readUInt32BE(0) < buf.length)
		return (rfc4253.read(buf, options));
	throw (new Error('Failed to auto-detect format of key'));
}

function findPuTTYHeader(buf) {
	var offset = 0;
	while (offset < buf.length &&
	    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))
		++offset;
	if (offset + 22 <= buf.length &&
	    buf.slice(offset, offset + 22).toString('ascii').toLowerCase() ===
	    'putty-user-key-file-2:')
		return (true);
	return (false);
}

function findSSHHeader(buf) {
	var offset = 0;
	while (offset < buf.length &&
	    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))
		++offset;
	if (offset + 4 <= buf.length &&
	    buf.slice(offset, offset + 4).toString('ascii') === 'ssh-')
		return (true);
	if (offset + 6 <= buf.length &&
	    buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-')
		return (true);
	return (false);
}

function findPEMHeader(buf) {
	var offset = 0;
	while (offset < buf.length &&
	    (buf[offset] === 32 || buf[offset] === 10))
		++offset;
	if (buf[offset] !== 45)
		return (false);
	while (offset < buf.length &&
	    (buf[offset] === 45))
		++offset;
	while (offset < buf.length &&
	    (buf[offset] === 32))
		++offset;
	if (offset + 5 > buf.length ||
	    buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN')
		return (false);
	return (true);
}

function findDNSSECHeader(buf) {
	// private case first
	if (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length)
		return (false);
	var headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);
	if (headerCheck.toString('ascii') === DNSSEC_PRIVKEY_HEADER_PREFIX)
		return (true);

	// public-key RFC3110 ?
	// 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'
	// skip any comment-lines
	if (typeof (buf) !== 'string') {
		buf = buf.toString('ascii');
	}
	var lines = buf.split('\n');
	var line = 0;
	/* JSSTYLED */
	while (lines[line].match(/^\;/))
		line++;
	if (lines[line].toString('ascii').match(/\. IN KEY /))
		return (true);
	if (lines[line].toString('ascii').match(/\. IN DNSKEY /))
		return (true);
	return (false);
}

function write(key, options) {
	throw (new Error('"auto" format cannot be used for writing'));
}
// Copyright 2017 Joyent, Inc.

module.exports = {
	read: read,
	write: write
};

var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;
var Key = require('../key');
var PrivateKey = require('../private-key');
var utils = require('../utils');
var SSHBuffer = require('../ssh-buffer');
var Dhe = require('../dhe');

var supportedAlgos = {
	'rsa-sha1' : 5,
	'rsa-sha256' : 8,
	'rsa-sha512' : 10,
	'ecdsa-p256-sha256' : 13,
	'ecdsa-p384-sha384' : 14
	/*
	 * ed25519 is hypothetically supported with id 15
	 * but the common tools available don't appear to be
	 * capable of generating/using ed25519 keys
	 */
};

var supportedAlgosById = {};
Object.keys(supportedAlgos).forEach(function (k) {
	supportedAlgosById[supportedAlgos[k]] = k.toUpperCase();
});

function read(buf, options) {
	if (typeof (buf) !== 'string') {
		assert.buffer(buf, 'buf');
		buf = buf.toString('ascii');
	}
	var lines = buf.split('\n');
	if (lines[0].match(/^Private-key-format\: v1/)) {
		var algElems = lines[1].split(' ');
		var algoNum = parseInt(algElems[1], 10);
		var algoName = algElems[2];
		if (!supportedAlgosById[algoNum])
			throw (new Error('Unsupported algorithm: ' + algoName));
		return (readDNSSECPrivateKey(algoNum, lines.slice(2)));
	}

	// skip any comment-lines
	var line = 0;
	/* JSSTYLED */
	while (lines[line].match(/^\;/))
		line++;
	// we should now have *one single* line left with our KEY on it.
	if ((lines[line].match(/\. IN KEY /) ||
	    lines[line].match(/\. IN DNSKEY /)) && lines[line+1].length === 0) {
		return (readRFC3110(lines[line]));
	}
	throw (new Error('Cannot parse dnssec key'));
}

function readRFC3110(keyString) {
	var elems = keyString.split(' ');
	//unused var flags = parseInt(elems[3], 10);
	//unused var protocol = parseInt(elems[4], 10);
	var algorithm = parseInt(elems[5], 10);
	if (!supportedAlgosById[algorithm])
		throw (new Error('Unsupported algorithm: ' + algorithm));
	var base64key = elems.slice(6, elems.length).join();
	var keyBuffer = Buffer.from(base64key, 'base64');
	if (supportedAlgosById[algorithm].match(/^RSA-/)) {
		// join the rest of the body into a single base64-blob
		var publicExponentLen = keyBuffer.readUInt8(0);
		if (publicExponentLen != 3 && publicExponentLen != 1)
			throw (new Error('Cannot parse dnssec key: ' +
			    'unsupported exponent length'));

		var publicExponent = keyBuffer.slice(1, publicExponentLen+1);
		publicExponent = utils.mpNormalize(publicExponent);
		var modulus = keyBuffer.slice(1+publicExponentLen);
		modulus = utils.mpNormalize(modulus);
		// now, make the key
		var rsaKey = {
			type: 'rsa',
			parts: []
		};
		rsaKey.parts.push({ name: 'e', data: publicExponent});
		rsaKey.parts.push({ name: 'n', data: modulus});
		return (new Key(rsaKey));
	}
	if (supportedAlgosById[algorithm] === 'ECDSA-P384-SHA384' ||
	    supportedAlgosById[algorithm] === 'ECDSA-P256-SHA256') {
		var curve = 'nistp384';
		var size = 384;
		if (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {
			curve = 'nistp256';
			size = 256;
		}

		var ecdsaKey = {
			type: 'ecdsa',
			curve: curve,
			size: size,
			parts: [
				{name: 'curve', data: Buffer.from(curve) },
				{name: 'Q', data: utils.ecNormalize(keyBuffer) }
			]
		};
		return (new Key(ecdsaKey));
	}
	throw (new Error('Unsupported algorithm: ' +
	    supportedAlgosById[algorithm]));
}

function elementToBuf(e) {
	return (Buffer.from(e.split(' ')[1], 'base64'));
}

function readDNSSECRSAPrivateKey(elements) {
	var rsaParams = {};
	elements.forEach(function (element) {
		if (element.split(' ')[0] === 'Modulus:')
			rsaParams['n'] = elementToBuf(element);
		else if (element.split(' ')[0] === 'PublicExponent:')
			rsaParams['e'] = elementToBuf(element);
		else if (element.split(' ')[0] === 'PrivateExponent:')
			rsaParams['d'] = elementToBuf(element);
		else if (element.split(' ')[0] === 'Prime1:')
			rsaParams['p'] = elementToBuf(element);
		else if (element.split(' ')[0] === 'Prime2:')
			rsaParams['q'] = elementToBuf(element);
		else if (element.split(' ')[0] === 'Exponent1:')
			rsaParams['dmodp'] = elementToBuf(element);
		else if (element.split(' ')[0] === 'Exponent2:')
			rsaParams['dmodq'] = elementToBuf(element);
		else if (element.split(' ')[0] === 'Coefficient:')
			rsaParams['iqmp'] = elementToBuf(element);
	});
	// now, make the key
	var key = {
		type: 'rsa',
		parts: [
			{ name: 'e', data: utils.mpNormalize(rsaParams['e'])},
			{ name: 'n', data: utils.mpNormalize(rsaParams['n'])},
			{ name: 'd', data: utils.mpNormalize(rsaParams['d'])},
			{ name: 'p', data: utils.mpNormalize(rsaParams['p'])},
			{ name: 'q', data: utils.mpNormalize(rsaParams['q'])},
			{ name: 'dmodp',
			    data: utils.mpNormalize(rsaParams['dmodp'])},
			{ name: 'dmodq',
			    data: utils.mpNormalize(rsaParams['dmodq'])},
			{ name: 'iqmp',
			    data: utils.mpNormalize(rsaParams['iqmp'])}
		]
	};
	return (new PrivateKey(key));
}

function readDNSSECPrivateKey(alg, elements) {
	if (supportedAlgosById[alg].match(/^RSA-/)) {
		return (readDNSSECRSAPrivateKey(elements));
	}
	if (supportedAlgosById[alg] === 'ECDSA-P384-SHA384' ||
	    supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {
		var d = Buffer.from(elements[0].split(' ')[1], 'base64');
		var curve = 'nistp384';
		var size = 384;
		if (supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {
			curve = 'nistp256';
			size = 256;
		}
		// DNSSEC generates the public-key on the fly (go calculate it)
		var publicKey = utils.publicFromPrivateECDSA(curve, d);
		var Q = publicKey.part['Q'].data;
		var ecdsaKey = {
			type: 'ecdsa',
			curve: curve,
			size: size,
			parts: [
				{name: 'curve', data: Buffer.from(curve) },
				{name: 'd', data: d },
				{name: 'Q', data: Q }
			]
		};
		return (new PrivateKey(ecdsaKey));
	}
	throw (new Error('Unsupported algorithm: ' + supportedAlgosById[alg]));
}

function dnssecTimestamp(date) {
	var year = date.getFullYear() + ''; //stringify
	var month = (date.getMonth() + 1);
	var timestampStr = year + month + date.getUTCDate();
	timestampStr += '' + date.getUTCHours() + date.getUTCMinutes();
	timestampStr += date.getUTCSeconds();
	return (timestampStr);
}

function rsaAlgFromOptions(opts) {
	if (!opts || !opts.hashAlgo || opts.hashAlgo === 'sha1')
		return ('5 (RSASHA1)');
	else if (opts.hashAlgo === 'sha256')
		return ('8 (RSASHA256)');
	else if (opts.hashAlgo === 'sha512')
		return ('10 (RSASHA512)');
	else
		throw (new Error('Unknown or unsupported hash: ' +
		    opts.hashAlgo));
}

function writeRSA(key, options) {
	// if we're missing parts, add them.
	if (!key.part.dmodp || !key.part.dmodq) {
		utils.addRSAMissing(key);
	}

	var out = '';
	out += 'Private-key-format: v1.3\n';
	out += 'Algorithm: ' + rsaAlgFromOptions(options) + '\n';
	var n = utils.mpDenormalize(key.part['n'].data);
	out += 'Modulus: ' + n.toString('base64') + '\n';
	var e = utils.mpDenormalize(key.part['e'].data);
	out += 'PublicExponent: ' + e.toString('base64') + '\n';
	var d = utils.mpDenormalize(key.part['d'].data);
	out += 'PrivateExponent: ' + d.toString('base64') + '\n';
	var p = utils.mpDenormalize(key.part['p'].data);
	out += 'Prime1: ' + p.toString('base64') + '\n';
	var q = utils.mpDenormalize(key.part['q'].data);
	out += 'Prime2: ' + q.toString('base64') + '\n';
	var dmodp = utils.mpDenormalize(key.part['dmodp'].data);
	out += 'Exponent1: ' + dmodp.toString('base64') + '\n';
	var dmodq = utils.mpDenormalize(key.part['dmodq'].data);
	out += 'Exponent2: ' + dmodq.toString('base64') + '\n';
	var iqmp = utils.mpDenormalize(key.part['iqmp'].data);
	out += 'Coefficient: ' + iqmp.toString('base64') + '\n';
	// Assume that we're valid as-of now
	var timestamp = new Date();
	out += 'Created: ' + dnssecTimestamp(timestamp) + '\n';
	out += 'Publish: ' + dnssecTimestamp(timestamp) + '\n';
	out += 'Activate: ' + dnssecTimestamp(timestamp) + '\n';
	return (Buffer.from(out, 'ascii'));
}

function writeECDSA(key, options) {
	var out = '';
	out += 'Private-key-format: v1.3\n';

	if (key.curve === 'nistp256') {
		out += 'Algorithm: 13 (ECDSAP256SHA256)\n';
	} else if (key.curve === 'nistp384') {
		out += 'Algorithm: 14 (ECDSAP384SHA384)\n';
	} else {
		throw (new Error('Unsupported curve'));
	}
	var base64Key = key.part['d'].data.toString('base64');
	out += 'PrivateKey: ' + base64Key + '\n';

	// Assume that we're valid as-of now
	var timestamp = new Date();
	out += 'Created: ' + dnssecTimestamp(timestamp) + '\n';
	out += 'Publish: ' + dnssecTimestamp(timestamp) + '\n';
	out += 'Activate: ' + dnssecTimestamp(timestamp) + '\n';

	return (Buffer.from(out, 'ascii'));
}

function write(key, options) {
	if (PrivateKey.isPrivateKey(key)) {
		if (key.type === 'rsa') {
			return (writeRSA(key, options));
		} else if (key.type === 'ecdsa') {
			return (writeECDSA(key, options));
		} else {
			throw (new Error('Unsupported algorithm: ' + key.type));
		}
	} else if (Key.isKey(key)) {
		/*
		 * RFC3110 requires a keyname, and a keytype, which we
		 * don't really have a mechanism for specifying such
		 * additional metadata.
		 */
		throw (new Error('Format "dnssec" only supports ' +
		    'writing private keys'));
	} else {
		throw (new Error('key is not a Key or PrivateKey'));
	}
}
// Copyright 2017 Joyent, Inc.

module.exports = {
	read: read,
	verify: verify,
	sign: sign,
	signAsync: signAsync,
	write: write,

	/* Internal private API */
	fromBuffer: fromBuffer,
	toBuffer: toBuffer
};

var assert = require('assert-plus');
var SSHBuffer = require('../ssh-buffer');
var crypto = require('crypto');
var Buffer = require('safer-buffer').Buffer;
var algs = require('../algs');
var Key = require('../key');
var PrivateKey = require('../private-key');
var Identity = require('../identity');
var rfc4253 = require('./rfc4253');
var Signature = require('../signature');
var utils = require('../utils');
var Certificate = require('../certificate');

function verify(cert, key) {
	/*
	 * We always give an issuerKey, so if our verify() is being called then
	 * there was no signature. Return false.
	 */
	return (false);
}

var TYPES = {
	'user': 1,
	'host': 2
};
Object.keys(TYPES).forEach(function (k) { TYPES[TYPES[k]] = k; });

var ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;

function read(buf, options) {
	if (Buffer.isBuffer(buf))
		buf = buf.toString('ascii');
	var parts = buf.trim().split(/[ \t\n]+/g);
	if (parts.length < 2 || parts.length > 3)
		throw (new Error('Not a valid SSH certificate line'));

	var algo = parts[0];
	var data = parts[1];

	data = Buffer.from(data, 'base64');
	return (fromBuffer(data, algo));
}

function fromBuffer(data, algo, partial) {
	var sshbuf = new SSHBuffer({ buffer: data });
	var innerAlgo = sshbuf.readString();
	if (algo !== undefined && innerAlgo !== algo)
		throw (new Error('SSH certificate algorithm mismatch'));
	if (algo === undefined)
		algo = innerAlgo;

	var cert = {};
	cert.signatures = {};
	cert.signatures.openssh = {};

	cert.signatures.openssh.nonce = sshbuf.readBuffer();

	var key = {};
	var parts = (key.parts = []);
	key.type = getAlg(algo);

	var partCount = algs.info[key.type].parts.length;
	while (parts.length < partCount)
		parts.push(sshbuf.readPart());
	assert.ok(parts.length >= 1, 'key must have at least one part');

	var algInfo = algs.info[key.type];
	if (key.type === 'ecdsa') {
		var res = ECDSA_ALGO.exec(algo);
		assert.ok(res !== null);
		assert.strictEqual(res[1], parts[0].data.toString());
	}

	for (var i = 0; i < algInfo.parts.length; ++i) {
		parts[i].name = algInfo.parts[i];
		if (parts[i].name !== 'curve' &&
		    algInfo.normalize !== false) {
			var p = parts[i];
			p.data = utils.mpNormalize(p.data);
		}
	}

	cert.subjectKey = new Key(key);

	cert.serial = sshbuf.readInt64();

	var type = TYPES[sshbuf.readInt()];
	assert.string(type, 'valid cert type');

	cert.signatures.openssh.keyId = sshbuf.readString();

	var principals = [];
	var pbuf = sshbuf.readBuffer();
	var psshbuf = new SSHBuffer({ buffer: pbuf });
	while (!psshbuf.atEnd())
		principals.push(psshbuf.readString());
	if (principals.length === 0)
		principals = ['*'];

	cert.subjects = principals.map(function (pr) {
		if (type === 'user')
			return (Identity.forUser(pr));
		else if (type === 'host')
			return (Identity.forHost(pr));
		throw (new Error('Unknown identity type ' + type));
	});

	cert.validFrom = int64ToDate(sshbuf.readInt64());
	cert.validUntil = int64ToDate(sshbuf.readInt64());

	var exts = [];
	var extbuf = new SSHBuffer({ buffer: sshbuf.readBuffer() });
	var ext;
	while (!extbuf.atEnd()) {
		ext = { critical: true };
		ext.name = extbuf.readString();
		ext.data = extbuf.readBuffer();
		exts.push(ext);
	}
	extbuf = new SSHBuffer({ buffer: sshbuf.readBuffer() });
	while (!extbuf.atEnd()) {
		ext = { critical: false };
		ext.name = extbuf.readString();
		ext.data = extbuf.readBuffer();
		exts.push(ext);
	}
	cert.signatures.openssh.exts = exts;

	/* reserved */
	sshbuf.readBuffer();

	var signingKeyBuf = sshbuf.readBuffer();
	cert.issuerKey = rfc4253.read(signingKeyBuf);

	/*
	 * OpenSSH certs don't give the identity of the issuer, just their
	 * public key. So, we use an Identity that matches anything. The
	 * isSignedBy() function will later tell you if the key matches.
	 */
	cert.issuer = Identity.forHost('**');

	var sigBuf = sshbuf.readBuffer();
	cert.signatures.openssh.signature =
	    Signature.parse(sigBuf, cert.issuerKey.type, 'ssh');

	if (partial !== undefined) {
		partial.remainder = sshbuf.remainder();
		partial.consumed = sshbuf._offset;
	}

	return (new Certificate(cert));
}

function int64ToDate(buf) {
	var i = buf.readUInt32BE(0) * 4294967296;
	i += buf.readUInt32BE(4);
	var d = new Date();
	d.setTime(i * 1000);
	d.sourceInt64 = buf;
	return (d);
}

function dateToInt64(date) {
	if (date.sourceInt64 !== undefined)
		return (date.sourceInt64);
	var i = Math.round(date.getTime() / 1000);
	var upper = Math.floor(i / 4294967296);
	var lower = Math.floor(i % 4294967296);
	var buf = Buffer.alloc(8);
	buf.writeUInt32BE(upper, 0);
	buf.writeUInt32BE(lower, 4);
	return (buf);
}

function sign(cert, key) {
	if (cert.signatures.openssh === undefined)
		cert.signatures.openssh = {};
	try {
		var blob = toBuffer(cert, true);
	} catch (e) {
		delete (cert.signatures.openssh);
		return (false);
	}
	var sig = cert.signatures.openssh;
	var hashAlgo = undefined;
	if (key.type === 'rsa' || key.type === 'dsa')
		hashAlgo = 'sha1';
	var signer = key.createSign(hashAlgo);
	signer.write(blob);
	sig.signature = signer.sign();
	return (true);
}

function signAsync(cert, signer, done) {
	if (cert.signatures.openssh === undefined)
		cert.signatures.openssh = {};
	try {
		var blob = toBuffer(cert, true);
	} catch (e) {
		delete (cert.signatures.openssh);
		done(e);
		return;
	}
	var sig = cert.signatures.openssh;

	signer(blob, function (err, signature) {
		if (err) {
			done(err);
			return;
		}
		try {
			/*
			 * This will throw if the signature isn't of a
			 * type/algo that can be used for SSH.
			 */
			signature.toBuffer('ssh');
		} catch (e) {
			done(e);
			return;
		}
		sig.signature = signature;
		done();
	});
}

function write(cert, options) {
	if (options === undefined)
		options = {};

	var blob = toBuffer(cert);
	var out = getCertType(cert.subjectKey) + ' ' + blob.toString('base64');
	if (options.comment)
		out = out + ' ' + options.comment;
	return (out);
}


function toBuffer(cert, noSig) {
	assert.object(cert.signatures.openssh, 'signature for openssh format');
	var sig = cert.signatures.openssh;

	if (sig.nonce === undefined)
		sig.nonce = crypto.randomBytes(16);
	var buf = new SSHBuffer({});
	buf.writeString(getCertType(cert.subjectKey));
	buf.writeBuffer(sig.nonce);

	var key = cert.subjectKey;
	var algInfo = algs.info[key.type];
	algInfo.parts.forEach(function (part) {
		buf.writePart(key.part[part]);
	});

	buf.writeInt64(cert.serial);

	var type = cert.subjects[0].type;
	assert.notStrictEqual(type, 'unknown');
	cert.subjects.forEach(function (id) {
		assert.strictEqual(id.type, type);
	});
	type = TYPES[type];
	buf.writeInt(type);

	if (sig.keyId === undefined) {
		sig.keyId = cert.subjects[0].type + '_' +
		    (cert.subjects[0].uid || cert.subjects[0].hostname);
	}
	buf.writeString(sig.keyId);

	var sub = new SSHBuffer({});
	cert.subjects.forEach(function (id) {
		if (type === TYPES.host)
			sub.writeString(id.hostname);
		else if (type === TYPES.user)
			sub.writeString(id.uid);
	});
	buf.writeBuffer(sub.toBuffer());

	buf.writeInt64(dateToInt64(cert.validFrom));
	buf.writeInt64(dateToInt64(cert.validUntil));

	var exts = sig.exts;
	if (exts === undefined)
		exts = [];

	var extbuf = new SSHBuffer({});
	exts.forEach(function (ext) {
		if (ext.critical !== true)
			return;
		extbuf.writeString(ext.name);
		extbuf.writeBuffer(ext.data);
	});
	buf.writeBuffer(extbuf.toBuffer());

	extbuf = new SSHBuffer({});
	exts.forEach(function (ext) {
		if (ext.critical === true)
			return;
		extbuf.writeString(ext.name);
		extbuf.writeBuffer(ext.data);
	});
	buf.writeBuffer(extbuf.toBuffer());

	/* reserved */
	buf.writeBuffer(Buffer.alloc(0));

	sub = rfc4253.write(cert.issuerKey);
	buf.writeBuffer(sub);

	if (!noSig)
		buf.writeBuffer(sig.signature.toBuffer('ssh'));

	return (buf.toBuffer());
}

function getAlg(certType) {
	if (certType === 'ssh-rsa-cert-v01@openssh.com')
		return ('rsa');
	if (certType === 'ssh-dss-cert-v01@openssh.com')
		return ('dsa');
	if (certType.match(ECDSA_ALGO))
		return ('ecdsa');
	if (certType === 'ssh-ed25519-cert-v01@openssh.com')
		return ('ed25519');
	throw (new Error('Unsupported cert type ' + certType));
}

function getCertType(key) {
	if (key.type === 'rsa')
		return ('ssh-rsa-cert-v01@openssh.com');
	if (key.type === 'dsa')
		return ('ssh-dss-cert-v01@openssh.com');
	if (key.type === 'ecdsa')
		return ('ecdsa-sha2-' + key.curve + '-cert-v01@openssh.com');
	if (key.type === 'ed25519')
		return ('ssh-ed25519-cert-v01@openssh.com');
	throw (new Error('Unsupported key type ' + key.type));
}
// Copyright 2018 Joyent, Inc.

module.exports = {
	read: read,
	write: write
};

var assert = require('assert-plus');
var asn1 = require('asn1');
var crypto = require('crypto');
var Buffer = require('safer-buffer').Buffer;
var algs = require('../algs');
var utils = require('../utils');
var Key = require('../key');
var PrivateKey = require('../private-key');

var pkcs1 = require('./pkcs1');
var pkcs8 = require('./pkcs8');
var sshpriv = require('./ssh-private');
var rfc4253 = require('./rfc4253');

var errors = require('../errors');

var OID_PBES2 = '1.2.840.113549.1.5.13';
var OID_PBKDF2 = '1.2.840.113549.1.5.12';

var OID_TO_CIPHER = {
	'1.2.840.113549.3.7': '3des-cbc',
	'2.16.840.1.101.3.4.1.2': 'aes128-cbc',
	'2.16.840.1.101.3.4.1.42': 'aes256-cbc'
};
var CIPHER_TO_OID = {};
Object.keys(OID_TO_CIPHER).forEach(function (k) {
	CIPHER_TO_OID[OID_TO_CIPHER[k]] = k;
});

var OID_TO_HASH = {
	'1.2.840.113549.2.7': 'sha1',
	'1.2.840.113549.2.9': 'sha256',
	'1.2.840.113549.2.11': 'sha512'
};
var HASH_TO_OID = {};
Object.keys(OID_TO_HASH).forEach(function (k) {
	HASH_TO_OID[OID_TO_HASH[k]] = k;
});

/*
 * For reading we support both PKCS#1 and PKCS#8. If we find a private key,
 * we just take the public component of it and use that.
 */
function read(buf, options, forceType) {
	var input = buf;
	if (typeof (buf) !== 'string') {
		assert.buffer(buf, 'buf');
		buf = buf.toString('ascii');
	}

	var lines = buf.trim().split(/[\r\n]+/g);

	var m;
	var si = -1;
	while (!m && si < lines.length) {
		m = lines[++si].match(/*JSSTYLED*/
		    /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);
	}
	assert.ok(m, 'invalid PEM header');

	var m2;
	var ei = lines.length;
	while (!m2 && ei > 0) {
		m2 = lines[--ei].match(/*JSSTYLED*/
		    /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);
	}
	assert.ok(m2, 'invalid PEM footer');

	/* Begin and end banners must match key type */
	assert.equal(m[2], m2[2]);
	var type = m[2].toLowerCase();

	var alg;
	if (m[1]) {
		/* They also must match algorithms, if given */
		assert.equal(m[1], m2[1], 'PEM header and footer mismatch');
		alg = m[1].trim();
	}

	lines = lines.slice(si, ei + 1);

	var headers = {};
	while (true) {
		lines = lines.slice(1);
		m = lines[0].match(/*JSSTYLED*/
		    /^([A-Za-z0-9-]+): (.+)$/);
		if (!m)
			break;
		headers[m[1].toLowerCase()] = m[2];
	}

	/* Chop off the first and last lines */
	lines = lines.slice(0, -1).join('');
	buf = Buffer.from(lines, 'base64');

	var cipher, key, iv;
	if (headers['proc-type']) {
		var parts = headers['proc-type'].split(',');
		if (parts[0] === '4' && parts[1] === 'ENCRYPTED') {
			if (typeof (options.passphrase) === 'string') {
				options.passphrase = Buffer.from(
				    options.passphrase, 'utf-8');
			}
			if (!Buffer.isBuffer(options.passphrase)) {
				throw (new errors.KeyEncryptedError(
				    options.filename, 'PEM'));
			} else {
				parts = headers['dek-info'].split(',');
				assert.ok(parts.length === 2);
				cipher = parts[0].toLowerCase();
				iv = Buffer.from(parts[1], 'hex');
				key = utils.opensslKeyDeriv(cipher, iv,
				    options.passphrase, 1).key;
			}
		}
	}

	if (alg && alg.toLowerCase() === 'encrypted') {
		var eder = new asn1.BerReader(buf);
		var pbesEnd;
		eder.readSequence();

		eder.readSequence();
		pbesEnd = eder.offset + eder.length;

		var method = eder.readOID();
		if (method !== OID_PBES2) {
			throw (new Error('Unsupported PEM/PKCS8 encryption ' +
			    'scheme: ' + method));
		}

		eder.readSequence();	/* PBES2-params */

		eder.readSequence();	/* keyDerivationFunc */
		var kdfEnd = eder.offset + eder.length;
		var kdfOid = eder.readOID();
		if (kdfOid !== OID_PBKDF2)
			throw (new Error('Unsupported PBES2 KDF: ' + kdfOid));
		eder.readSequence();
		var salt = eder.readString(asn1.Ber.OctetString, true);
		var iterations = eder.readInt();
		var hashAlg = 'sha1';
		if (eder.offset < kdfEnd) {
			eder.readSequence();
			var hashAlgOid = eder.readOID();
			hashAlg = OID_TO_HASH[hashAlgOid];
			if (hashAlg === undefined) {
				throw (new Error('Unsupported PBKDF2 hash: ' +
				    hashAlgOid));
			}
		}
		eder._offset = kdfEnd;

		eder.readSequence();	/* encryptionScheme */
		var cipherOid = eder.readOID();
		cipher = OID_TO_CIPHER[cipherOid];
		if (cipher === undefined) {
			throw (new Error('Unsupported PBES2 cipher: ' +
			    cipherOid));
		}
		iv = eder.readString(asn1.Ber.OctetString, true);

		eder._offset = pbesEnd;
		buf = eder.readString(asn1.Ber.OctetString, true);

		if (typeof (options.passphrase) === 'string') {
			options.passphrase = Buffer.from(
			    options.passphrase, 'utf-8');
		}
		if (!Buffer.isBuffer(options.passphrase)) {
			throw (new errors.KeyEncryptedError(
			    options.filename, 'PEM'));
		}

		var cinfo = utils.opensshCipherInfo(cipher);

		cipher = cinfo.opensslName;
		key = utils.pbkdf2(hashAlg, salt, iterations, cinfo.keySize,
		    options.passphrase);
		alg = undefined;
	}

	if (cipher && key && iv) {
		var cipherStream = crypto.createDecipheriv(cipher, key, iv);
		var chunk, chunks = [];
		cipherStream.once('error', function (e) {
			if (e.toString().indexOf('bad decrypt') !== -1) {
				throw (new Error('Incorrect passphrase ' +
				    'supplied, could not decrypt key'));
			}
			throw (e);
		});
		cipherStream.write(buf);
		cipherStream.end();
		while ((chunk = cipherStream.read()) !== null)
			chunks.push(chunk);
		buf = Buffer.concat(chunks);
	}

	/* The new OpenSSH internal format abuses PEM headers */
	if (alg && alg.toLowerCase() === 'openssh')
		return (sshpriv.readSSHPrivate(type, buf, options));
	if (alg && alg.toLowerCase() === 'ssh2')
		return (rfc4253.readType(type, buf, options));

	var der = new asn1.BerReader(buf);
	der.originalInput = input;

	/*
	 * All of the PEM file types start with a sequence tag, so chop it
	 * off here
	 */
	der.readSequence();

	/* PKCS#1 type keys name an algorithm in the banner explicitly */
	if (alg) {
		if (forceType)
			assert.strictEqual(forceType, 'pkcs1');
		return (pkcs1.readPkcs1(alg, type, der));
	} else {
		if (forceType)
			assert.strictEqual(forceType, 'pkcs8');
		return (pkcs8.readPkcs8(alg, type, der));
	}
}

function write(key, options, type) {
	assert.object(key);

	var alg = {
	    'ecdsa': 'EC',
	    'rsa': 'RSA',
	    'dsa': 'DSA',
	    'ed25519': 'EdDSA'
	}[key.type];
	var header;

	var der = new asn1.BerWriter();

	if (PrivateKey.isPrivateKey(key)) {
		if (type && type === 'pkcs8') {
			header = 'PRIVATE KEY';
			pkcs8.writePkcs8(der, key);
		} else {
			if (type)
				assert.strictEqual(type, 'pkcs1');
			header = alg + ' PRIVATE KEY';
			pkcs1.writePkcs1(der, key);
		}

	} else if (Key.isKey(key)) {
		if (type && type === 'pkcs1') {
			header = alg + ' PUBLIC KEY';
			pkcs1.writePkcs1(der, key);
		} else {
			if (type)
				assert.strictEqual(type, 'pkcs8');
			header = 'PUBLIC KEY';
			pkcs8.writePkcs8(der, key);
		}

	} else {
		throw (new Error('key is not a Key or PrivateKey'));
	}

	var tmp = der.buffer.toString('base64');
	var len = tmp.length + (tmp.length / 64) +
	    18 + 16 + header.length*2 + 10;
	var buf = Buffer.alloc(len);
	var o = 0;
	o += buf.write('-----BEGIN ' + header + '-----\n', o);
	for (var i = 0; i < tmp.length; ) {
		var limit = i + 64;
		if (limit > tmp.length)
			limit = tmp.length;
		o += buf.write(tmp.slice(i, limit), o);
		buf[o++] = 10;
		i = limit;
	}
	o += buf.write('-----END ' + header + '-----\n', o);

	return (buf.slice(0, o));
}
// Copyright 2015 Joyent, Inc.

module.exports = {
	read: read,
	readPkcs1: readPkcs1,
	write: write,
	writePkcs1: writePkcs1
};

var assert = require('assert-plus');
var asn1 = require('asn1');
var Buffer = require('safer-buffer').Buffer;
var algs = require('../algs');
var utils = require('../utils');

var Key = require('../key');
var PrivateKey = require('../private-key');
var pem = require('./pem');

var pkcs8 = require('./pkcs8');
var readECDSACurve = pkcs8.readECDSACurve;

function read(buf, options) {
	return (pem.read(buf, options, 'pkcs1'));
}

function write(key, options) {
	return (pem.write(key, options, 'pkcs1'));
}

/* Helper to read in a single mpint */
function readMPInt(der, nm) {
	assert.strictEqual(der.peek(), asn1.Ber.Integer,
	    nm + ' is not an Integer');
	return (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));
}

function readPkcs1(alg, type, der) {
	switch (alg) {
	case 'RSA':
		if (type === 'public')
			return (readPkcs1RSAPublic(der));
		else if (type === 'private')
			return (readPkcs1RSAPrivate(der));
		throw (new Error('Unknown key type: ' + type));
	case 'DSA':
		if (type === 'public')
			return (readPkcs1DSAPublic(der));
		else if (type === 'private')
			return (readPkcs1DSAPrivate(der));
		throw (new Error('Unknown key type: ' + type));
	case 'EC':
	case 'ECDSA':
		if (type === 'private')
			return (readPkcs1ECDSAPrivate(der));
		else if (type === 'public')
			return (readPkcs1ECDSAPublic(der));
		throw (new Error('Unknown key type: ' + type));
	case 'EDDSA':
	case 'EdDSA':
		if (type === 'private')
			return (readPkcs1EdDSAPrivate(der));
		throw (new Error(type + ' keys not supported with EdDSA'));
	default:
		throw (new Error('Unknown key algo: ' + alg));
	}
}

function readPkcs1RSAPublic(der) {
	// modulus and exponent
	var n = readMPInt(der, 'modulus');
	var e = readMPInt(der, 'exponent');

	// now, make the key
	var key = {
		type: 'rsa',
		parts: [
			{ name: 'e', data: e },
			{ name: 'n', data: n }
		]
	};

	return (new Key(key));
}

function readPkcs1RSAPrivate(der) {
	var version = readMPInt(der, 'version');
	assert.strictEqual(version[0], 0);

	// modulus then public exponent
	var n = readMPInt(der, 'modulus');
	var e = readMPInt(der, 'public exponent');
	var d = readMPInt(der, 'private exponent');
	var p = readMPInt(der, 'prime1');
	var q = readMPInt(der, 'prime2');
	var dmodp = readMPInt(der, 'exponent1');
	var dmodq = readMPInt(der, 'exponent2');
	var iqmp = readMPInt(der, 'iqmp');

	// now, make the key
	var key = {
		type: 'rsa',
		parts: [
			{ name: 'n', data: n },
			{ name: 'e', data: e },
			{ name: 'd', data: d },
			{ name: 'iqmp', data: iqmp },
			{ name: 'p', data: p },
			{ name: 'q', data: q },
			{ name: 'dmodp', data: dmodp },
			{ name: 'dmodq', data: dmodq }
		]
	};

	return (new PrivateKey(key));
}

function readPkcs1DSAPrivate(der) {
	var version = readMPInt(der, 'version');
	assert.strictEqual(version.readUInt8(0), 0);

	var p = readMPInt(der, 'p');
	var q = readMPInt(der, 'q');
	var g = readMPInt(der, 'g');
	var y = readMPInt(der, 'y');
	var x = readMPInt(der, 'x');

	// now, make the key
	var key = {
		type: 'dsa',
		parts: [
			{ name: 'p', data: p },
			{ name: 'q', data: q },
			{ name: 'g', data: g },
			{ name: 'y', data: y },
			{ name: 'x', data: x }
		]
	};

	return (new PrivateKey(key));
}

function readPkcs1EdDSAPrivate(der) {
	var version = readMPInt(der, 'version');
	assert.strictEqual(version.readUInt8(0), 1);

	// private key
	var k = der.readString(asn1.Ber.OctetString, true);

	der.readSequence(0xa0);
	var oid = der.readOID();
	assert.strictEqual(oid, '1.3.101.112', 'the ed25519 curve identifier');

	der.readSequence(0xa1);
	var A = utils.readBitString(der);

	var key = {
		type: 'ed25519',
		parts: [
			{ name: 'A', data: utils.zeroPadToLength(A, 32) },
			{ name: 'k', data: k }
		]
	};

	return (new PrivateKey(key));
}

function readPkcs1DSAPublic(der) {
	var y = readMPInt(der, 'y');
	var p = readMPInt(der, 'p');
	var q = readMPInt(der, 'q');
	var g = readMPInt(der, 'g');

	var key = {
		type: 'dsa',
		parts: [
			{ name: 'y', data: y },
			{ name: 'p', data: p },
			{ name: 'q', data: q },
			{ name: 'g', data: g }
		]
	};

	return (new Key(key));
}

function readPkcs1ECDSAPublic(der) {
	der.readSequence();

	var oid = der.readOID();
	assert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');

	var curveOid = der.readOID();

	var curve;
	var curves = Object.keys(algs.curves);
	for (var j = 0; j < curves.length; ++j) {
		var c = curves[j];
		var cd = algs.curves[c];
		if (cd.pkcs8oid === curveOid) {
			curve = c;
			break;
		}
	}
	assert.string(curve, 'a known ECDSA named curve');

	var Q = der.readString(asn1.Ber.BitString, true);
	Q = utils.ecNormalize(Q);

	var key = {
		type: 'ecdsa',
		parts: [
			{ name: 'curve', data: Buffer.from(curve) },
			{ name: 'Q', data: Q }
		]
	};

	return (new Key(key));
}

function readPkcs1ECDSAPrivate(der) {
	var version = readMPInt(der, 'version');
	assert.strictEqual(version.readUInt8(0), 1);

	// private key
	var d = der.readString(asn1.Ber.OctetString, true);

	der.readSequence(0xa0);
	var curve = readECDSACurve(der);
	assert.string(curve, 'a known elliptic curve');

	der.readSequence(0xa1);
	var Q = der.readString(asn1.Ber.BitString, true);
	Q = utils.ecNormalize(Q);

	var key = {
		type: 'ecdsa',
		parts: [
			{ name: 'curve', data: Buffer.from(curve) },
			{ name: 'Q', data: Q },
			{ name: 'd', data: d }
		]
	};

	return (new PrivateKey(key));
}

function writePkcs1(der, key) {
	der.startSequence();

	switch (key.type) {
	case 'rsa':
		if (PrivateKey.isPrivateKey(key))
			writePkcs1RSAPrivate(der, key);
		else
			writePkcs1RSAPublic(der, key);
		break;
	case 'dsa':
		if (PrivateKey.isPrivateKey(key))
			writePkcs1DSAPrivate(der, key);
		else
			writePkcs1DSAPublic(der, key);
		break;
	case 'ecdsa':
		if (PrivateKey.isPrivateKey(key))
			writePkcs1ECDSAPrivate(der, key);
		else
			writePkcs1ECDSAPublic(der, key);
		break;
	case 'ed25519':
		if (PrivateKey.isPrivateKey(key))
			writePkcs1EdDSAPrivate(der, key);
		else
			writePkcs1EdDSAPublic(der, key);
		break;
	default:
		throw (new Error('Unknown key algo: ' + key.type));
	}

	der.endSequence();
}

function writePkcs1RSAPublic(der, key) {
	der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
}

function writePkcs1RSAPrivate(der, key) {
	var ver = Buffer.from([0]);
	der.writeBuffer(ver, asn1.Ber.Integer);

	der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.d.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
	if (!key.part.dmodp || !key.part.dmodq)
		utils.addRSAMissing(key);
	der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);
}

function writePkcs1DSAPrivate(der, key) {
	var ver = Buffer.from([0]);
	der.writeBuffer(ver, asn1.Ber.Integer);

	der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.y.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.x.data, asn1.Ber.Integer);
}

function writePkcs1DSAPublic(der, key) {
	der.writeBuffer(key.part.y.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
}

function writePkcs1ECDSAPublic(der, key) {
	der.startSequence();

	der.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */
	var curve = key.part.curve.data.toString();
	var curveOid = algs.curves[curve].pkcs8oid;
	assert.string(curveOid, 'a known ECDSA named curve');
	der.writeOID(curveOid);

	der.endSequence();

	var Q = utils.ecNormalize(key.part.Q.data, true);
	der.writeBuffer(Q, asn1.Ber.BitString);
}

function writePkcs1ECDSAPrivate(der, key) {
	var ver = Buffer.from([1]);
	der.writeBuffer(ver, asn1.Ber.Integer);

	der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);

	der.startSequence(0xa0);
	var curve = key.part.curve.data.toString();
	var curveOid = algs.curves[curve].pkcs8oid;
	assert.string(curveOid, 'a known ECDSA named curve');
	der.writeOID(curveOid);
	der.endSequence();

	der.startSequence(0xa1);
	var Q = utils.ecNormalize(key.part.Q.data, true);
	der.writeBuffer(Q, asn1.Ber.BitString);
	der.endSequence();
}

function writePkcs1EdDSAPrivate(der, key) {
	var ver = Buffer.from([1]);
	der.writeBuffer(ver, asn1.Ber.Integer);

	der.writeBuffer(key.part.k.data, asn1.Ber.OctetString);

	der.startSequence(0xa0);
	der.writeOID('1.3.101.112');
	der.endSequence();

	der.startSequence(0xa1);
	utils.writeBitString(der, key.part.A.data);
	der.endSequence();
}

function writePkcs1EdDSAPublic(der, key) {
	throw (new Error('Public keys are not supported for EdDSA PKCS#1'));
}
// Copyright 2018 Joyent, Inc.

module.exports = {
	read: read,
	readPkcs8: readPkcs8,
	write: write,
	writePkcs8: writePkcs8,
	pkcs8ToBuffer: pkcs8ToBuffer,

	readECDSACurve: readECDSACurve,
	writeECDSACurve: writeECDSACurve
};

var assert = require('assert-plus');
var asn1 = require('asn1');
var Buffer = require('safer-buffer').Buffer;
var algs = require('../algs');
var utils = require('../utils');
var Key = require('../key');
var PrivateKey = require('../private-key');
var pem = require('./pem');

function read(buf, options) {
	return (pem.read(buf, options, 'pkcs8'));
}

function write(key, options) {
	return (pem.write(key, options, 'pkcs8'));
}

/* Helper to read in a single mpint */
function readMPInt(der, nm) {
	assert.strictEqual(der.peek(), asn1.Ber.Integer,
	    nm + ' is not an Integer');
	return (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));
}

function readPkcs8(alg, type, der) {
	/* Private keys in pkcs#8 format have a weird extra int */
	if (der.peek() === asn1.Ber.Integer) {
		assert.strictEqual(type, 'private',
		    'unexpected Integer at start of public key');
		der.readString(asn1.Ber.Integer, true);
	}

	der.readSequence();
	var next = der.offset + der.length;

	var oid = der.readOID();
	switch (oid) {
	case '1.2.840.113549.1.1.1':
		der._offset = next;
		if (type === 'public')
			return (readPkcs8RSAPublic(der));
		else
			return (readPkcs8RSAPrivate(der));
	case '1.2.840.10040.4.1':
		if (type === 'public')
			return (readPkcs8DSAPublic(der));
		else
			return (readPkcs8DSAPrivate(der));
	case '1.2.840.10045.2.1':
		if (type === 'public')
			return (readPkcs8ECDSAPublic(der));
		else
			return (readPkcs8ECDSAPrivate(der));
	case '1.3.101.112':
		if (type === 'public') {
			return (readPkcs8EdDSAPublic(der));
		} else {
			return (readPkcs8EdDSAPrivate(der));
		}
	case '1.3.101.110':
		if (type === 'public') {
			return (readPkcs8X25519Public(der));
		} else {
			return (readPkcs8X25519Private(der));
		}
	default:
		throw (new Error('Unknown key type OID ' + oid));
	}
}

function readPkcs8RSAPublic(der) {
	// bit string sequence
	der.readSequence(asn1.Ber.BitString);
	der.readByte();
	der.readSequence();

	// modulus
	var n = readMPInt(der, 'modulus');
	var e = readMPInt(der, 'exponent');

	// now, make the key
	var key = {
		type: 'rsa',
		source: der.originalInput,
		parts: [
			{ name: 'e', data: e },
			{ name: 'n', data: n }
		]
	};

	return (new Key(key));
}

function readPkcs8RSAPrivate(der) {
	der.readSequence(asn1.Ber.OctetString);
	der.readSequence();

	var ver = readMPInt(der, 'version');
	assert.equal(ver[0], 0x0, 'unknown RSA private key version');

	// modulus then public exponent
	var n = readMPInt(der, 'modulus');
	var e = readMPInt(der, 'public exponent');
	var d = readMPInt(der, 'private exponent');
	var p = readMPInt(der, 'prime1');
	var q = readMPInt(der, 'prime2');
	var dmodp = readMPInt(der, 'exponent1');
	var dmodq = readMPInt(der, 'exponent2');
	var iqmp = readMPInt(der, 'iqmp');

	// now, make the key
	var key = {
		type: 'rsa',
		parts: [
			{ name: 'n', data: n },
			{ name: 'e', data: e },
			{ name: 'd', data: d },
			{ name: 'iqmp', data: iqmp },
			{ name: 'p', data: p },
			{ name: 'q', data: q },
			{ name: 'dmodp', data: dmodp },
			{ name: 'dmodq', data: dmodq }
		]
	};

	return (new PrivateKey(key));
}

function readPkcs8DSAPublic(der) {
	der.readSequence();

	var p = readMPInt(der, 'p');
	var q = readMPInt(der, 'q');
	var g = readMPInt(der, 'g');

	// bit string sequence
	der.readSequence(asn1.Ber.BitString);
	der.readByte();

	var y = readMPInt(der, 'y');

	// now, make the key
	var key = {
		type: 'dsa',
		parts: [
			{ name: 'p', data: p },
			{ name: 'q', data: q },
			{ name: 'g', data: g },
			{ name: 'y', data: y }
		]
	};

	return (new Key(key));
}

function readPkcs8DSAPrivate(der) {
	der.readSequence();

	var p = readMPInt(der, 'p');
	var q = readMPInt(der, 'q');
	var g = readMPInt(der, 'g');

	der.readSequence(asn1.Ber.OctetString);
	var x = readMPInt(der, 'x');

	/* The pkcs#8 format does not include the public key */
	var y = utils.calculateDSAPublic(g, p, x);

	var key = {
		type: 'dsa',
		parts: [
			{ name: 'p', data: p },
			{ name: 'q', data: q },
			{ name: 'g', data: g },
			{ name: 'y', data: y },
			{ name: 'x', data: x }
		]
	};

	return (new PrivateKey(key));
}

function readECDSACurve(der) {
	var curveName, curveNames;
	var j, c, cd;

	if (der.peek() === asn1.Ber.OID) {
		var oid = der.readOID();

		curveNames = Object.keys(algs.curves);
		for (j = 0; j < curveNames.length; ++j) {
			c = curveNames[j];
			cd = algs.curves[c];
			if (cd.pkcs8oid === oid) {
				curveName = c;
				break;
			}
		}

	} else {
		// ECParameters sequence
		der.readSequence();
		var version = der.readString(asn1.Ber.Integer, true);
		assert.strictEqual(version[0], 1, 'ECDSA key not version 1');

		var curve = {};

		// FieldID sequence
		der.readSequence();
		var fieldTypeOid = der.readOID();
		assert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1',
		    'ECDSA key is not from a prime-field');
		var p = curve.p = utils.mpNormalize(
		    der.readString(asn1.Ber.Integer, true));
		/*
		 * p always starts with a 1 bit, so count the zeros to get its
		 * real size.
		 */
		curve.size = p.length * 8 - utils.countZeros(p);

		// Curve sequence
		der.readSequence();
		curve.a = utils.mpNormalize(
		    der.readString(asn1.Ber.OctetString, true));
		curve.b = utils.mpNormalize(
		    der.readString(asn1.Ber.OctetString, true));
		if (der.peek() === asn1.Ber.BitString)
			curve.s = der.readString(asn1.Ber.BitString, true);

		// Combined Gx and Gy
		curve.G = der.readString(asn1.Ber.OctetString, true);
		assert.strictEqual(curve.G[0], 0x4,
		    'uncompressed G is required');

		curve.n = utils.mpNormalize(
		    der.readString(asn1.Ber.Integer, true));
		curve.h = utils.mpNormalize(
		    der.readString(asn1.Ber.Integer, true));
		assert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' +
		    'required');

		curveNames = Object.keys(algs.curves);
		var ks = Object.keys(curve);
		for (j = 0; j < curveNames.length; ++j) {
			c = curveNames[j];
			cd = algs.curves[c];
			var equal = true;
			for (var i = 0; i < ks.length; ++i) {
				var k = ks[i];
				if (cd[k] === undefined)
					continue;
				if (typeof (cd[k]) === 'object' &&
				    cd[k].equals !== undefined) {
					if (!cd[k].equals(curve[k])) {
						equal = false;
						break;
					}
				} else if (Buffer.isBuffer(cd[k])) {
					if (cd[k].toString('binary')
					    !== curve[k].toString('binary')) {
						equal = false;
						break;
					}
				} else {
					if (cd[k] !== curve[k]) {
						equal = false;
						break;
					}
				}
			}
			if (equal) {
				curveName = c;
				break;
			}
		}
	}
	return (curveName);
}

function readPkcs8ECDSAPrivate(der) {
	var curveName = readECDSACurve(der);
	assert.string(curveName, 'a known elliptic curve');

	der.readSequence(asn1.Ber.OctetString);
	der.readSequence();

	var version = readMPInt(der, 'version');
	assert.equal(version[0], 1, 'unknown version of ECDSA key');

	var d = der.readString(asn1.Ber.OctetString, true);
	var Q;

	if (der.peek() == 0xa0) {
		der.readSequence(0xa0);
		der._offset += der.length;
	}
	if (der.peek() == 0xa1) {
		der.readSequence(0xa1);
		Q = der.readString(asn1.Ber.BitString, true);
		Q = utils.ecNormalize(Q);
	}

	if (Q === undefined) {
		var pub = utils.publicFromPrivateECDSA(curveName, d);
		Q = pub.part.Q.data;
	}

	var key = {
		type: 'ecdsa',
		parts: [
			{ name: 'curve', data: Buffer.from(curveName) },
			{ name: 'Q', data: Q },
			{ name: 'd', data: d }
		]
	};

	return (new PrivateKey(key));
}

function readPkcs8ECDSAPublic(der) {
	var curveName = readECDSACurve(der);
	assert.string(curveName, 'a known elliptic curve');

	var Q = der.readString(asn1.Ber.BitString, true);
	Q = utils.ecNormalize(Q);

	var key = {
		type: 'ecdsa',
		parts: [
			{ name: 'curve', data: Buffer.from(curveName) },
			{ name: 'Q', data: Q }
		]
	};

	return (new Key(key));
}

function readPkcs8EdDSAPublic(der) {
	if (der.peek() === 0x00)
		der.readByte();

	var A = utils.readBitString(der);

	var key = {
		type: 'ed25519',
		parts: [
			{ name: 'A', data: utils.zeroPadToLength(A, 32) }
		]
	};

	return (new Key(key));
}

function readPkcs8X25519Public(der) {
	var A = utils.readBitString(der);

	var key = {
		type: 'curve25519',
		parts: [
			{ name: 'A', data: utils.zeroPadToLength(A, 32) }
		]
	};

	return (new Key(key));
}

function readPkcs8EdDSAPrivate(der) {
	if (der.peek() === 0x00)
		der.readByte();

	der.readSequence(asn1.Ber.OctetString);
	var k = der.readString(asn1.Ber.OctetString, true);
	k = utils.zeroPadToLength(k, 32);

	var A, tag;
	while ((tag = der.peek()) !== null) {
		if (tag === (asn1.Ber.Context | 1)) {
			A = utils.readBitString(der, tag);
		} else {
			der.readSequence(tag);
			der._offset += der.length;
		}
	}
	if (A === undefined)
		A = utils.calculateED25519Public(k);

	var key = {
		type: 'ed25519',
		parts: [
			{ name: 'A', data: utils.zeroPadToLength(A, 32) },
			{ name: 'k', data: utils.zeroPadToLength(k, 32) }
		]
	};

	return (new PrivateKey(key));
}

function readPkcs8X25519Private(der) {
	if (der.peek() === 0x00)
		der.readByte();

	der.readSequence(asn1.Ber.OctetString);
	var k = der.readString(asn1.Ber.OctetString, true);
	k = utils.zeroPadToLength(k, 32);

	var A = utils.calculateX25519Public(k);

	var key = {
		type: 'curve25519',
		parts: [
			{ name: 'A', data: utils.zeroPadToLength(A, 32) },
			{ name: 'k', data: utils.zeroPadToLength(k, 32) }
		]
	};

	return (new PrivateKey(key));
}

function pkcs8ToBuffer(key) {
	var der = new asn1.BerWriter();
	writePkcs8(der, key);
	return (der.buffer);
}

function writePkcs8(der, key) {
	der.startSequence();

	if (PrivateKey.isPrivateKey(key)) {
		var version = 0;
		if (key.type === 'ed25519')
			version = 1;
		var vbuf = Buffer.from([version]);
		der.writeBuffer(vbuf, asn1.Ber.Integer);
	}

	der.startSequence();
	switch (key.type) {
	case 'rsa':
		der.writeOID('1.2.840.113549.1.1.1');
		if (PrivateKey.isPrivateKey(key))
			writePkcs8RSAPrivate(key, der);
		else
			writePkcs8RSAPublic(key, der);
		break;
	case 'dsa':
		der.writeOID('1.2.840.10040.4.1');
		if (PrivateKey.isPrivateKey(key))
			writePkcs8DSAPrivate(key, der);
		else
			writePkcs8DSAPublic(key, der);
		break;
	case 'ecdsa':
		der.writeOID('1.2.840.10045.2.1');
		if (PrivateKey.isPrivateKey(key))
			writePkcs8ECDSAPrivate(key, der);
		else
			writePkcs8ECDSAPublic(key, der);
		break;
	case 'ed25519':
		der.writeOID('1.3.101.112');
		if (PrivateKey.isPrivateKey(key))
			writePkcs8EdDSAPrivate(key, der);
		else
			writePkcs8EdDSAPublic(key, der);
		break;
	default:
		throw (new Error('Unsupported key type: ' + key.type));
	}

	der.endSequence();
}

function writePkcs8RSAPrivate(key, der) {
	der.writeNull();
	der.endSequence();

	der.startSequence(asn1.Ber.OctetString);
	der.startSequence();

	var version = Buffer.from([0]);
	der.writeBuffer(version, asn1.Ber.Integer);

	der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.d.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
	if (!key.part.dmodp || !key.part.dmodq)
		utils.addRSAMissing(key);
	der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);

	der.endSequence();
	der.endSequence();
}

function writePkcs8RSAPublic(key, der) {
	der.writeNull();
	der.endSequence();

	der.startSequence(asn1.Ber.BitString);
	der.writeByte(0x00);

	der.startSequence();
	der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
	der.endSequence();

	der.endSequence();
}

function writePkcs8DSAPrivate(key, der) {
	der.startSequence();
	der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
	der.endSequence();

	der.endSequence();

	der.startSequence(asn1.Ber.OctetString);
	der.writeBuffer(key.part.x.data, asn1.Ber.Integer);
	der.endSequence();
}

function writePkcs8DSAPublic(key, der) {
	der.startSequence();
	der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
	der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
	der.endSequence();
	der.endSequence();

	der.startSequence(asn1.Ber.BitString);
	der.writeByte(0x00);
	der.writeBuffer(key.part.y.data, asn1.Ber.Integer);
	der.endSequence();
}

function writeECDSACurve(key, der) {
	var curve = algs.curves[key.curve];
	if (curve.pkcs8oid) {
		/* This one has a name in pkcs#8, so just write the oid */
		der.writeOID(curve.pkcs8oid);

	} else {
		// ECParameters sequence
		der.startSequence();

		var version = Buffer.from([1]);
		der.writeBuffer(version, asn1.Ber.Integer);

		// FieldID sequence
		der.startSequence();
		der.writeOID('1.2.840.10045.1.1'); // prime-field
		der.writeBuffer(curve.p, asn1.Ber.Integer);
		der.endSequence();

		// Curve sequence
		der.startSequence();
		var a = curve.p;
		if (a[0] === 0x0)
			a = a.slice(1);
		der.writeBuffer(a, asn1.Ber.OctetString);
		der.writeBuffer(curve.b, asn1.Ber.OctetString);
		der.writeBuffer(curve.s, asn1.Ber.BitString);
		der.endSequence();

		der.writeBuffer(curve.G, asn1.Ber.OctetString);
		der.writeBuffer(curve.n, asn1.Ber.Integer);
		var h = curve.h;
		if (!h) {
			h = Buffer.from([1]);
		}
		der.writeBuffer(h, asn1.Ber.Integer);

		// ECParameters
		der.endSequence();
	}
}

function writePkcs8ECDSAPublic(key, der) {
	writeECDSACurve(key, der);
	der.endSequence();

	var Q = utils.ecNormalize(key.part.Q.data, true);
	der.writeBuffer(Q, asn1.Ber.BitString);
}

function writePkcs8ECDSAPrivate(key, der) {
	writeECDSACurve(key, der);
	der.endSequence();

	der.startSequence(asn1.Ber.OctetString);
	der.startSequence();

	var version = Buffer.from([1]);
	der.writeBuffer(version, asn1.Ber.Integer);

	der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);

	der.startSequence(0xa1);
	var Q = utils.ecNormalize(key.part.Q.data, true);
	der.writeBuffer(Q, asn1.Ber.BitString);
	der.endSequence();

	der.endSequence();
	der.endSequence();
}

function writePkcs8EdDSAPublic(key, der) {
	der.endSequence();

	utils.writeBitString(der, key.part.A.data);
}

function writePkcs8EdDSAPrivate(key, der) {
	der.endSequence();

	der.startSequence(asn1.Ber.OctetString);
	var k = utils.mpNormalize(key.part.k.data);
	/* RFCs call for storing exactly 32 bytes, so strip any leading zeros */
	while (k.length > 32 && k[0] === 0x00)
		k = k.slice(1);
	der.writeBuffer(k, asn1.Ber.OctetString);
	der.endSequence();

	utils.writeBitString(der, key.part.A.data, asn1.Ber.Context | 1);
}
// Copyright 2018 Joyent, Inc.

module.exports = {
	read: read,
	write: write
};

var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;
var rfc4253 = require('./rfc4253');
var Key = require('../key');
var SSHBuffer = require('../ssh-buffer');
var crypto = require('crypto');
var PrivateKey = require('../private-key');

var errors = require('../errors');

// https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html
function read(buf, options) {
	var lines = buf.toString('ascii').split(/[\r\n]+/);
	var found = false;
	var parts;
	var si = 0;
	var formatVersion;
	while (si < lines.length) {
		parts = splitHeader(lines[si++]);
		if (parts) {
			formatVersion = {
				'putty-user-key-file-2': 2,
				'putty-user-key-file-3': 3
			}[parts[0].toLowerCase()];
			if (formatVersion) {
				found = true;
				break;
			}
		}
	}
	if (!found) {
		throw (new Error('No PuTTY format first line found'));
	}
	var alg = parts[1];

	parts = splitHeader(lines[si++]);
	assert.equal(parts[0].toLowerCase(), 'encryption');
	var encryption = parts[1];

	parts = splitHeader(lines[si++]);
	assert.equal(parts[0].toLowerCase(), 'comment');
	var comment = parts[1];

	parts = splitHeader(lines[si++]);
	assert.equal(parts[0].toLowerCase(), 'public-lines');
	var publicLines = parseInt(parts[1], 10);
	if (!isFinite(publicLines) || publicLines < 0 ||
	    publicLines > lines.length) {
		throw (new Error('Invalid public-lines count'));
	}

	var publicBuf = Buffer.from(
	    lines.slice(si, si + publicLines).join(''), 'base64');
	var keyType = rfc4253.algToKeyType(alg);
	var key = rfc4253.read(publicBuf);
	if (key.type !== keyType) {
		throw (new Error('Outer key algorithm mismatch'));
	}

	si += publicLines;
	if (lines[si]) {
		parts = splitHeader(lines[si++]);
		assert.equal(parts[0].toLowerCase(), 'private-lines');
		var privateLines = parseInt(parts[1], 10);
		if (!isFinite(privateLines) || privateLines < 0 ||
		    privateLines > lines.length) {
			throw (new Error('Invalid private-lines count'));
		}

		var privateBuf = Buffer.from(
			lines.slice(si, si + privateLines).join(''), 'base64');

		if (encryption !== 'none' && formatVersion === 3) {
			throw new Error('Encrypted keys arenot supported for' +
			' PuTTY format version 3');
		}

		if (encryption === 'aes256-cbc') {
			if (!options.passphrase) {
				throw (new errors.KeyEncryptedError(
					options.filename, 'PEM'));
			}

			var iv = Buffer.alloc(16, 0);
			var decipher = crypto.createDecipheriv(
				'aes-256-cbc',
				derivePPK2EncryptionKey(options.passphrase),
				iv);
			decipher.setAutoPadding(false);
			privateBuf = Buffer.concat([
				decipher.update(privateBuf), decipher.final()]);
		}

		key = new PrivateKey(key);
		if (key.type !== keyType) {
			throw (new Error('Outer key algorithm mismatch'));
		}

		var sshbuf = new SSHBuffer({buffer: privateBuf});
		var privateKeyParts;
		if (alg === 'ssh-dss') {
			privateKeyParts = [ {
				name: 'x',
				data: sshbuf.readBuffer()
			}];
		} else if (alg === 'ssh-rsa') {
			privateKeyParts = [
				{ name: 'd', data: sshbuf.readBuffer() },
				{ name: 'p', data: sshbuf.readBuffer() },
				{ name: 'q', data: sshbuf.readBuffer() },
				{ name: 'iqmp', data: sshbuf.readBuffer() }
			];
		} else if (alg.match(/^ecdsa-sha2-nistp/)) {
			privateKeyParts = [ {
				name: 'd', data: sshbuf.readBuffer()
			} ];
		} else if (alg === 'ssh-ed25519') {
			privateKeyParts = [ {
				name: 'k', data: sshbuf.readBuffer()
			} ];
		} else {
			throw new Error('Unsupported PPK key type: ' + alg);
		}

		key = new PrivateKey({
			type: key.type,
			parts: key.parts.concat(privateKeyParts)
		});
	}

	key.comment = comment;
	return (key);
}

function derivePPK2EncryptionKey(passphrase) {
	var hash1 = crypto.createHash('sha1').update(Buffer.concat([
		Buffer.from([0, 0, 0, 0]),
		Buffer.from(passphrase)
	])).digest();
	var hash2 = crypto.createHash('sha1').update(Buffer.concat([
		Buffer.from([0, 0, 0, 1]),
		Buffer.from(passphrase)
	])).digest();
	return (Buffer.concat([hash1, hash2]).slice(0, 32));
}

function splitHeader(line) {
	var idx = line.indexOf(':');
	if (idx === -1)
		return (null);
	var header = line.slice(0, idx);
	++idx;
	while (line[idx] === ' ')
		++idx;
	var rest = line.slice(idx);
	return ([header, rest]);
}

function write(key, options) {
	assert.object(key);
	if (!Key.isKey(key))
		throw (new Error('Must be a public key'));

	var alg = rfc4253.keyTypeToAlg(key);
	var buf = rfc4253.write(key);
	var comment = key.comment || '';

	var b64 = buf.toString('base64');
	var lines = wrap(b64, 64);

	lines.unshift('Public-Lines: ' + lines.length);
	lines.unshift('Comment: ' + comment);
	lines.unshift('Encryption: none');
	lines.unshift('PuTTY-User-Key-File-2: ' + alg);

	return (Buffer.from(lines.join('\n') + '\n'));
}

function wrap(txt, len) {
	var lines = [];
	var pos = 0;
	while (pos < txt.length) {
		lines.push(txt.slice(pos, pos + 64));
		pos += 64;
	}
	return (lines);
}
// Copyright 2015 Joyent, Inc.

module.exports = {
	read: read.bind(undefined, false, undefined),
	readType: read.bind(undefined, false),
	write: write,
	/* semi-private api, used by sshpk-agent */
	readPartial: read.bind(undefined, true),

	/* shared with ssh format */
	readInternal: read,
	keyTypeToAlg: keyTypeToAlg,
	algToKeyType: algToKeyType
};

var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;
var algs = require('../algs');
var utils = require('../utils');
var Key = require('../key');
var PrivateKey = require('../private-key');
var SSHBuffer = require('../ssh-buffer');

function algToKeyType(alg) {
	assert.string(alg);
	if (alg === 'ssh-dss')
		return ('dsa');
	else if (alg === 'ssh-rsa')
		return ('rsa');
	else if (alg === 'ssh-ed25519')
		return ('ed25519');
	else if (alg === 'ssh-curve25519')
		return ('curve25519');
	else if (alg.match(/^ecdsa-sha2-/))
		return ('ecdsa');
	else
		throw (new Error('Unknown algorithm ' + alg));
}

function keyTypeToAlg(key) {
	assert.object(key);
	if (key.type === 'dsa')
		return ('ssh-dss');
	else if (key.type === 'rsa')
		return ('ssh-rsa');
	else if (key.type === 'ed25519')
		return ('ssh-ed25519');
	else if (key.type === 'curve25519')
		return ('ssh-curve25519');
	else if (key.type === 'ecdsa')
		return ('ecdsa-sha2-' + key.part.curve.data.toString());
	else
		throw (new Error('Unknown key type ' + key.type));
}

function read(partial, type, buf, options) {
	if (typeof (buf) === 'string')
		buf = Buffer.from(buf);
	assert.buffer(buf, 'buf');

	var key = {};

	var parts = key.parts = [];
	var sshbuf = new SSHBuffer({buffer: buf});

	var alg = sshbuf.readString();
	assert.ok(!sshbuf.atEnd(), 'key must have at least one part');

	key.type = algToKeyType(alg);

	var partCount = algs.info[key.type].parts.length;
	if (type && type === 'private')
		partCount = algs.privInfo[key.type].parts.length;

	while (!sshbuf.atEnd() && parts.length < partCount)
		parts.push(sshbuf.readPart());
	while (!partial && !sshbuf.atEnd())
		parts.push(sshbuf.readPart());

	assert.ok(parts.length >= 1,
	    'key must have at least one part');
	assert.ok(partial || sshbuf.atEnd(),
	    'leftover bytes at end of key');

	var Constructor = Key;
	var algInfo = algs.info[key.type];
	if (type === 'private' || algInfo.parts.length !== parts.length) {
		algInfo = algs.privInfo[key.type];
		Constructor = PrivateKey;
	}
	assert.strictEqual(algInfo.parts.length, parts.length);

	if (key.type === 'ecdsa') {
		var res = /^ecdsa-sha2-(.+)$/.exec(alg);
		assert.ok(res !== null);
		assert.strictEqual(res[1], parts[0].data.toString());
	}

	var normalized = true;
	for (var i = 0; i < algInfo.parts.length; ++i) {
		var p = parts[i];
		p.name = algInfo.parts[i];
		/*
		 * OpenSSH stores ed25519 "private" keys as seed + public key
		 * concat'd together (k followed by A). We want to keep them
		 * separate for other formats that don't do this.
		 */
		if (key.type === 'ed25519' && p.name === 'k')
			p.data = p.data.slice(0, 32);

		if (p.name !== 'curve' && algInfo.normalize !== false) {
			var nd;
			if (key.type === 'ed25519') {
				nd = utils.zeroPadToLength(p.data, 32);
			} else {
				nd = utils.mpNormalize(p.data);
			}
			if (nd.toString('binary') !==
			    p.data.toString('binary')) {
				p.data = nd;
				normalized = false;
			}
		}
	}

	if (normalized)
		key._rfc4253Cache = sshbuf.toBuffer();

	if (partial && typeof (partial) === 'object') {
		partial.remainder = sshbuf.remainder();
		partial.consumed = sshbuf._offset;
	}

	return (new Constructor(key));
}

function write(key, options) {
	assert.object(key);

	var alg = keyTypeToAlg(key);
	var i;

	var algInfo = algs.info[key.type];
	if (PrivateKey.isPrivateKey(key))
		algInfo = algs.privInfo[key.type];
	var parts = algInfo.parts;

	var buf = new SSHBuffer({});

	buf.writeString(alg);

	for (i = 0; i < parts.length; ++i) {
		var data = key.part[parts[i]].data;
		if (algInfo.normalize !== false) {
			if (key.type === 'ed25519')
				data = utils.zeroPadToLength(data, 32);
			else
				data = utils.mpNormalize(data);
		}
		if (key.type === 'ed25519' && parts[i] === 'k')
			data = Buffer.concat([data, key.part.A.data]);
		buf.writeBuffer(data);
	}

	return (buf.toBuffer());
}
// Copyright 2015 Joyent, Inc.

module.exports = {
	read: read,
	readSSHPrivate: readSSHPrivate,
	write: write
};

var assert = require('assert-plus');
var asn1 = require('asn1');
var Buffer = require('safer-buffer').Buffer;
var algs = require('../algs');
var utils = require('../utils');
var crypto = require('crypto');

var Key = require('../key');
var PrivateKey = require('../private-key');
var pem = require('./pem');
var rfc4253 = require('./rfc4253');
var SSHBuffer = require('../ssh-buffer');
var errors = require('../errors');

var bcrypt;

function read(buf, options) {
	return (pem.read(buf, options));
}

var MAGIC = 'openssh-key-v1';

function readSSHPrivate(type, buf, options) {
	buf = new SSHBuffer({buffer: buf});

	var magic = buf.readCString();
	assert.strictEqual(magic, MAGIC, 'bad magic string');

	var cipher = buf.readString();
	var kdf = buf.readString();
	var kdfOpts = buf.readBuffer();

	var nkeys = buf.readInt();
	if (nkeys !== 1) {
		throw (new Error('OpenSSH-format key file contains ' +
		    'multiple keys: this is unsupported.'));
	}

	var pubKey = buf.readBuffer();

	if (type === 'public') {
		assert.ok(buf.atEnd(), 'excess bytes left after key');
		return (rfc4253.read(pubKey));
	}

	var privKeyBlob = buf.readBuffer();
	assert.ok(buf.atEnd(), 'excess bytes left after key');

	var kdfOptsBuf = new SSHBuffer({ buffer: kdfOpts });
	switch (kdf) {
	case 'none':
		if (cipher !== 'none') {
			throw (new Error('OpenSSH-format key uses KDF "none" ' +
			     'but specifies a cipher other than "none"'));
		}
		break;
	case 'bcrypt':
		var salt = kdfOptsBuf.readBuffer();
		var rounds = kdfOptsBuf.readInt();
		var cinf = utils.opensshCipherInfo(cipher);
		if (bcrypt === undefined) {
			bcrypt = require('bcrypt-pbkdf');
		}

		if (typeof (options.passphrase) === 'string') {
			options.passphrase = Buffer.from(options.passphrase,
			    'utf-8');
		}
		if (!Buffer.isBuffer(options.passphrase)) {
			throw (new errors.KeyEncryptedError(
			    options.filename, 'OpenSSH'));
		}

		var pass = new Uint8Array(options.passphrase);
		var salti = new Uint8Array(salt);
		/* Use the pbkdf to derive both the key and the IV. */
		var out = new Uint8Array(cinf.keySize + cinf.blockSize);
		var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,
		    out, out.length, rounds);
		if (res !== 0) {
			throw (new Error('bcrypt_pbkdf function returned ' +
			    'failure, parameters invalid'));
		}
		out = Buffer.from(out);
		var ckey = out.slice(0, cinf.keySize);
		var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);
		var cipherStream = crypto.createDecipheriv(cinf.opensslName,
		    ckey, iv);
		cipherStream.setAutoPadding(false);
		var chunk, chunks = [];
		cipherStream.once('error', function (e) {
			if (e.toString().indexOf('bad decrypt') !== -1) {
				throw (new Error('Incorrect passphrase ' +
				    'supplied, could not decrypt key'));
			}
			throw (e);
		});
		cipherStream.write(privKeyBlob);
		cipherStream.end();
		while ((chunk = cipherStream.read()) !== null)
			chunks.push(chunk);
		privKeyBlob = Buffer.concat(chunks);
		break;
	default:
		throw (new Error(
		    'OpenSSH-format key uses unknown KDF "' + kdf + '"'));
	}

	buf = new SSHBuffer({buffer: privKeyBlob});

	var checkInt1 = buf.readInt();
	var checkInt2 = buf.readInt();
	if (checkInt1 !== checkInt2) {
		throw (new Error('Incorrect passphrase supplied, could not ' +
		    'decrypt key'));
	}

	var ret = {};
	var key = rfc4253.readInternal(ret, 'private', buf.remainder());

	buf.skip(ret.consumed);

	var comment = buf.readString();
	key.comment = comment;

	return (key);
}

function write(key, options) {
	var pubKey;
	if (PrivateKey.isPrivateKey(key))
		pubKey = key.toPublic();
	else
		pubKey = key;

	var cipher = 'none';
	var kdf = 'none';
	var kdfopts = Buffer.alloc(0);
	var cinf = { blockSize: 8 };
	var passphrase;
	if (options !== undefined) {
		passphrase = options.passphrase;
		if (typeof (passphrase) === 'string')
			passphrase = Buffer.from(passphrase, 'utf-8');
		if (passphrase !== undefined) {
			assert.buffer(passphrase, 'options.passphrase');
			assert.optionalString(options.cipher, 'options.cipher');
			cipher = options.cipher;
			if (cipher === undefined)
				cipher = 'aes128-ctr';
			cinf = utils.opensshCipherInfo(cipher);
			kdf = 'bcrypt';
		}
	}

	var privBuf;
	if (PrivateKey.isPrivateKey(key)) {
		privBuf = new SSHBuffer({});
		var checkInt = crypto.randomBytes(4).readUInt32BE(0);
		privBuf.writeInt(checkInt);
		privBuf.writeInt(checkInt);
		privBuf.write(key.toBuffer('rfc4253'));
		privBuf.writeString(key.comment || '');

		var n = 1;
		while (privBuf._offset % cinf.blockSize !== 0)
			privBuf.writeChar(n++);
		privBuf = privBuf.toBuffer();
	}

	switch (kdf) {
	case 'none':
		break;
	case 'bcrypt':
		var salt = crypto.randomBytes(16);
		var rounds = 16;
		var kdfssh = new SSHBuffer({});
		kdfssh.writeBuffer(salt);
		kdfssh.writeInt(rounds);
		kdfopts = kdfssh.toBuffer();

		if (bcrypt === undefined) {
			bcrypt = require('bcrypt-pbkdf');
		}
		var pass = new Uint8Array(passphrase);
		var salti = new Uint8Array(salt);
		/* Use the pbkdf to derive both the key and the IV. */
		var out = new Uint8Array(cinf.keySize + cinf.blockSize);
		var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,
		    out, out.length, rounds);
		if (res !== 0) {
			throw (new Error('bcrypt_pbkdf function returned ' +
			    'failure, parameters invalid'));
		}
		out = Buffer.from(out);
		var ckey = out.slice(0, cinf.keySize);
		var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);

		var cipherStream = crypto.createCipheriv(cinf.opensslName,
		    ckey, iv);
		cipherStream.setAutoPadding(false);
		var chunk, chunks = [];
		cipherStream.once('error', function (e) {
			throw (e);
		});
		cipherStream.write(privBuf);
		cipherStream.end();
		while ((chunk = cipherStream.read()) !== null)
			chunks.push(chunk);
		privBuf = Buffer.concat(chunks);
		break;
	default:
		throw (new Error('Unsupported kdf ' + kdf));
	}

	var buf = new SSHBuffer({});

	buf.writeCString(MAGIC);
	buf.writeString(cipher);	/* cipher */
	buf.writeString(kdf);		/* kdf */
	buf.writeBuffer(kdfopts);	/* kdfoptions */

	buf.writeInt(1);		/* nkeys */
	buf.writeBuffer(pubKey.toBuffer('rfc4253'));

	if (privBuf)
		buf.writeBuffer(privBuf);

	buf = buf.toBuffer();

	var header;
	if (PrivateKey.isPrivateKey(key))
		header = 'OPENSSH PRIVATE KEY';
	else
		header = 'OPENSSH PUBLIC KEY';

	var tmp = buf.toString('base64');
	var len = tmp.length + (tmp.length / 70) +
	    18 + 16 + header.length*2 + 10;
	buf = Buffer.alloc(len);
	var o = 0;
	o += buf.write('-----BEGIN ' + header + '-----\n', o);
	for (var i = 0; i < tmp.length; ) {
		var limit = i + 70;
		if (limit > tmp.length)
			limit = tmp.length;
		o += buf.write(tmp.slice(i, limit), o);
		buf[o++] = 10;
		i = limit;
	}
	o += buf.write('-----END ' + header + '-----\n', o);

	return (buf.slice(0, o));
}
// Copyright 2015 Joyent, Inc.

module.exports = {
	read: read,
	write: write
};

var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;
var rfc4253 = require('./rfc4253');
var utils = require('../utils');
var Key = require('../key');
var PrivateKey = require('../private-key');

var sshpriv = require('./ssh-private');

/*JSSTYLED*/
var SSHKEY_RE = /^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([ \t]+([^ \t][^\n]*[\n]*)?)?$/;
/*JSSTYLED*/
var SSHKEY_RE2 = /^([a-z0-9-]+)[ \t\n]+([a-zA-Z0-9+\/][a-zA-Z0-9+\/ \t\n=]*)([^a-zA-Z0-9+\/ \t\n=].*)?$/;

function read(buf, options) {
	if (typeof (buf) !== 'string') {
		assert.buffer(buf, 'buf');
		buf = buf.toString('ascii');
	}

	var trimmed = buf.trim().replace(/[\\\r]/g, '');
	var m = trimmed.match(SSHKEY_RE);
	if (!m)
		m = trimmed.match(SSHKEY_RE2);
	assert.ok(m, 'key must match regex');

	var type = rfc4253.algToKeyType(m[1]);
	var kbuf = Buffer.from(m[2], 'base64');

	/*
	 * This is a bit tricky. If we managed to parse the key and locate the
	 * key comment with the regex, then do a non-partial read and assert
	 * that we have consumed all bytes. If we couldn't locate the key
	 * comment, though, there may be whitespace shenanigans going on that
	 * have conjoined the comment to the rest of the key. We do a partial
	 * read in this case to try to make the best out of a sorry situation.
	 */
	var key;
	var ret = {};
	if (m[4]) {
		try {
			key = rfc4253.read(kbuf);

		} catch (e) {
			m = trimmed.match(SSHKEY_RE2);
			assert.ok(m, 'key must match regex');
			kbuf = Buffer.from(m[2], 'base64');
			key = rfc4253.readInternal(ret, 'public', kbuf);
		}
	} else {
		key = rfc4253.readInternal(ret, 'public', kbuf);
	}

	assert.strictEqual(type, key.type);

	if (m[4] && m[4].length > 0) {
		key.comment = m[4];

	} else if (ret.consumed) {
		/*
		 * Now the magic: trying to recover the key comment when it's
		 * gotten conjoined to the key or otherwise shenanigan'd.
		 *
		 * Work out how much base64 we used, then drop all non-base64
		 * chars from the beginning up to this point in the the string.
		 * Then offset in this and try to make up for missing = chars.
		 */
		var data = m[2] + (m[3] ? m[3] : '');
		var realOffset = Math.ceil(ret.consumed / 3) * 4;
		data = data.slice(0, realOffset - 2). /*JSSTYLED*/
		    replace(/[^a-zA-Z0-9+\/=]/g, '') +
		    data.slice(realOffset - 2);

		var padding = ret.consumed % 3;
		if (padding > 0 &&
		    data.slice(realOffset - 1, realOffset) !== '=')
			realOffset--;
		while (data.slice(realOffset, realOffset + 1) === '=')
			realOffset++;

		/* Finally, grab what we think is the comment & clean it up. */
		var trailer = data.slice(realOffset);
		trailer = trailer.replace(/[\r\n]/g, ' ').
		    replace(/^\s+/, '');
		if (trailer.match(/^[a-zA-Z0-9]/))
			key.comment = trailer;
	}

	return (key);
}

function write(key, options) {
	assert.object(key);
	if (!Key.isKey(key))
		throw (new Error('Must be a public key'));

	var parts = [];
	var alg = rfc4253.keyTypeToAlg(key);
	parts.push(alg);

	var buf = rfc4253.write(key);
	parts.push(buf.toString('base64'));

	if (key.comment)
		parts.push(key.comment);

	return (Buffer.from(parts.join(' ')));
}
// Copyright 2016 Joyent, Inc.

var x509 = require('./x509');

module.exports = {
	read: read,
	verify: x509.verify,
	sign: x509.sign,
	write: write
};

var assert = require('assert-plus');
var asn1 = require('asn1');
var Buffer = require('safer-buffer').Buffer;
var algs = require('../algs');
var utils = require('../utils');
var Key = require('../key');
var PrivateKey = require('../private-key');
var pem = require('./pem');
var Identity = require('../identity');
var Signature = require('../signature');
var Certificate = require('../certificate');

function read(buf, options) {
	if (typeof (buf) !== 'string') {
		assert.buffer(buf, 'buf');
		buf = buf.toString('ascii');
	}

	var lines = buf.trim().split(/[\r\n]+/g);

	var m;
	var si = -1;
	while (!m && si < lines.length) {
		m = lines[++si].match(/*JSSTYLED*/
		    /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);
	}
	assert.ok(m, 'invalid PEM header');

	var m2;
	var ei = lines.length;
	while (!m2 && ei > 0) {
		m2 = lines[--ei].match(/*JSSTYLED*/
		    /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);
	}
	assert.ok(m2, 'invalid PEM footer');

	lines = lines.slice(si, ei + 1);

	var headers = {};
	while (true) {
		lines = lines.slice(1);
		m = lines[0].match(/*JSSTYLED*/
		    /^([A-Za-z0-9-]+): (.+)$/);
		if (!m)
			break;
		headers[m[1].toLowerCase()] = m[2];
	}

	/* Chop off the first and last lines */
	lines = lines.slice(0, -1).join('');
	buf = Buffer.from(lines, 'base64');

	return (x509.read(buf, options));
}

function write(cert, options) {
	var dbuf = x509.write(cert, options);

	var header = 'CERTIFICATE';
	var tmp = dbuf.toString('base64');
	var len = tmp.length + (tmp.length / 64) +
	    18 + 16 + header.length*2 + 10;
	var buf = Buffer.alloc(len);
	var o = 0;
	o += buf.write('-----BEGIN ' + header + '-----\n', o);
	for (var i = 0; i < tmp.length; ) {
		var limit = i + 64;
		if (limit > tmp.length)
			limit = tmp.length;
		o += buf.write(tmp.slice(i, limit), o);
		buf[o++] = 10;
		i = limit;
	}
	o += buf.write('-----END ' + header + '-----\n', o);

	return (buf.slice(0, o));
}
// Copyright 2017 Joyent, Inc.

module.exports = {
	read: read,
	verify: verify,
	sign: sign,
	signAsync: signAsync,
	write: write
};

var assert = require('assert-plus');
var asn1 = require('asn1');
var Buffer = require('safer-buffer').Buffer;
var algs = require('../algs');
var utils = require('../utils');
var Key = require('../key');
var PrivateKey = require('../private-key');
var pem = require('./pem');
var Identity = require('../identity');
var Signature = require('../signature');
var Certificate = require('../certificate');
var pkcs8 = require('./pkcs8');

/*
 * This file is based on RFC5280 (X.509).
 */

/* Helper to read in a single mpint */
function readMPInt(der, nm) {
	assert.strictEqual(der.peek(), asn1.Ber.Integer,
	    nm + ' is not an Integer');
	return (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));
}

function verify(cert, key) {
	var sig = cert.signatures.x509;
	assert.object(sig, 'x509 signature');

	var algParts = sig.algo.split('-');
	if (algParts[0] !== key.type)
		return (false);

	var blob = sig.cache;
	if (blob === undefined) {
		var der = new asn1.BerWriter();
		writeTBSCert(cert, der);
		blob = der.buffer;
	}

	var verifier = key.createVerify(algParts[1]);
	verifier.write(blob);
	return (verifier.verify(sig.signature));
}

function Local(i) {
	return (asn1.Ber.Context | asn1.Ber.Constructor | i);
}

function Context(i) {
	return (asn1.Ber.Context | i);
}

var SIGN_ALGS = {
	'rsa-md5': '1.2.840.113549.1.1.4',
	'rsa-sha1': '1.2.840.113549.1.1.5',
	'rsa-sha256': '1.2.840.113549.1.1.11',
	'rsa-sha384': '1.2.840.113549.1.1.12',
	'rsa-sha512': '1.2.840.113549.1.1.13',
	'dsa-sha1': '1.2.840.10040.4.3',
	'dsa-sha256': '2.16.840.1.101.3.4.3.2',
	'ecdsa-sha1': '1.2.840.10045.4.1',
	'ecdsa-sha256': '1.2.840.10045.4.3.2',
	'ecdsa-sha384': '1.2.840.10045.4.3.3',
	'ecdsa-sha512': '1.2.840.10045.4.3.4',
	'ed25519-sha512': '1.3.101.112'
};
Object.keys(SIGN_ALGS).forEach(function (k) {
	SIGN_ALGS[SIGN_ALGS[k]] = k;
});
SIGN_ALGS['1.3.14.3.2.3'] = 'rsa-md5';
SIGN_ALGS['1.3.14.3.2.29'] = 'rsa-sha1';

var EXTS = {
	'issuerKeyId': '2.5.29.35',
	'altName': '2.5.29.17',
	'basicConstraints': '2.5.29.19',
	'keyUsage': '2.5.29.15',
	'extKeyUsage': '2.5.29.37'
};

function read(buf, options) {
	if (typeof (buf) === 'string') {
		buf = Buffer.from(buf, 'binary');
	}
	assert.buffer(buf, 'buf');

	var der = new asn1.BerReader(buf);

	der.readSequence();
	if (Math.abs(der.length - der.remain) > 1) {
		throw (new Error('DER sequence does not contain whole byte ' +
		    'stream'));
	}

	var tbsStart = der.offset;
	der.readSequence();
	var sigOffset = der.offset + der.length;
	var tbsEnd = sigOffset;

	if (der.peek() === Local(0)) {
		der.readSequence(Local(0));
		var version = der.readInt();
		assert.ok(version <= 3,
		    'only x.509 versions up to v3 supported');
	}

	var cert = {};
	cert.signatures = {};
	var sig = (cert.signatures.x509 = {});
	sig.extras = {};

	cert.serial = readMPInt(der, 'serial');

	der.readSequence();
	var after = der.offset + der.length;
	var certAlgOid = der.readOID();
	var certAlg = SIGN_ALGS[certAlgOid];
	if (certAlg === undefined)
		throw (new Error('unknown signature algorithm ' + certAlgOid));

	der._offset = after;
	cert.issuer = Identity.parseAsn1(der);

	der.readSequence();
	cert.validFrom = readDate(der);
	cert.validUntil = readDate(der);

	cert.subjects = [Identity.parseAsn1(der)];

	der.readSequence();
	after = der.offset + der.length;
	cert.subjectKey = pkcs8.readPkcs8(undefined, 'public', der);
	der._offset = after;

	/* issuerUniqueID */
	if (der.peek() === Local(1)) {
		der.readSequence(Local(1));
		sig.extras.issuerUniqueID =
		    buf.slice(der.offset, der.offset + der.length);
		der._offset += der.length;
	}

	/* subjectUniqueID */
	if (der.peek() === Local(2)) {
		der.readSequence(Local(2));
		sig.extras.subjectUniqueID =
		    buf.slice(der.offset, der.offset + der.length);
		der._offset += der.length;
	}

	/* extensions */
	if (der.peek() === Local(3)) {
		der.readSequence(Local(3));
		var extEnd = der.offset + der.length;
		der.readSequence();

		while (der.offset < extEnd)
			readExtension(cert, buf, der);

		assert.strictEqual(der.offset, extEnd);
	}

	assert.strictEqual(der.offset, sigOffset);

	der.readSequence();
	after = der.offset + der.length;
	var sigAlgOid = der.readOID();
	var sigAlg = SIGN_ALGS[sigAlgOid];
	if (sigAlg === undefined)
		throw (new Error('unknown signature algorithm ' + sigAlgOid));
	der._offset = after;

	var sigData = der.readString(asn1.Ber.BitString, true);
	if (sigData[0] === 0)
		sigData = sigData.slice(1);
	var algParts = sigAlg.split('-');

	sig.signature = Signature.parse(sigData, algParts[0], 'asn1');
	sig.signature.hashAlgorithm = algParts[1];
	sig.algo = sigAlg;
	sig.cache = buf.slice(tbsStart, tbsEnd);

	return (new Certificate(cert));
}

function readDate(der) {
	if (der.peek() === asn1.Ber.UTCTime) {
		return (utcTimeToDate(der.readString(asn1.Ber.UTCTime)));
	} else if (der.peek() === asn1.Ber.GeneralizedTime) {
		return (gTimeToDate(der.readString(asn1.Ber.GeneralizedTime)));
	} else {
		throw (new Error('Unsupported date format'));
	}
}

function writeDate(der, date) {
	if (date.getUTCFullYear() >= 2050 || date.getUTCFullYear() < 1950) {
		der.writeString(dateToGTime(date), asn1.Ber.GeneralizedTime);
	} else {
		der.writeString(dateToUTCTime(date), asn1.Ber.UTCTime);
	}
}

/* RFC5280, section 4.2.1.6 (GeneralName type) */
var ALTNAME = {
	OtherName: Local(0),
	RFC822Name: Context(1),
	DNSName: Context(2),
	X400Address: Local(3),
	DirectoryName: Local(4),
	EDIPartyName: Local(5),
	URI: Context(6),
	IPAddress: Context(7),
	OID: Context(8)
};

/* RFC5280, section 4.2.1.12 (KeyPurposeId) */
var EXTPURPOSE = {
	'serverAuth': '1.3.6.1.5.5.7.3.1',
	'clientAuth': '1.3.6.1.5.5.7.3.2',
	'codeSigning': '1.3.6.1.5.5.7.3.3',

	/* See https://github.com/joyent/oid-docs/blob/master/root.md */
	'joyentDocker': '1.3.6.1.4.1.38678.1.4.1',
	'joyentCmon': '1.3.6.1.4.1.38678.1.4.2'
};
var EXTPURPOSE_REV = {};
Object.keys(EXTPURPOSE).forEach(function (k) {
	EXTPURPOSE_REV[EXTPURPOSE[k]] = k;
});

var KEYUSEBITS = [
	'signature', 'identity', 'keyEncryption',
	'encryption', 'keyAgreement', 'ca', 'crl'
];

function readExtension(cert, buf, der) {
	der.readSequence();
	var after = der.offset + der.length;
	var extId = der.readOID();
	var id;
	var sig = cert.signatures.x509;
	if (!sig.extras.exts)
		sig.extras.exts = [];

	var critical;
	if (der.peek() === asn1.Ber.Boolean)
		critical = der.readBoolean();

	switch (extId) {
	case (EXTS.basicConstraints):
		der.readSequence(asn1.Ber.OctetString);
		der.readSequence();
		var bcEnd = der.offset + der.length;
		var ca = false;
		if (der.peek() === asn1.Ber.Boolean)
			ca = der.readBoolean();
		if (cert.purposes === undefined)
			cert.purposes = [];
		if (ca === true)
			cert.purposes.push('ca');
		var bc = { oid: extId, critical: critical };
		if (der.offset < bcEnd && der.peek() === asn1.Ber.Integer)
			bc.pathLen = der.readInt();
		sig.extras.exts.push(bc);
		break;
	case (EXTS.extKeyUsage):
		der.readSequence(asn1.Ber.OctetString);
		der.readSequence();
		if (cert.purposes === undefined)
			cert.purposes = [];
		var ekEnd = der.offset + der.length;
		while (der.offset < ekEnd) {
			var oid = der.readOID();
			cert.purposes.push(EXTPURPOSE_REV[oid] || oid);
		}
		/*
		 * This is a bit of a hack: in the case where we have a cert
		 * that's only allowed to do serverAuth or clientAuth (and not
		 * the other), we want to make sure all our Subjects are of
		 * the right type. But we already parsed our Subjects and
		 * decided if they were hosts or users earlier (since it appears
		 * first in the cert).
		 *
		 * So we go through and mutate them into the right kind here if
		 * it doesn't match. This might not be hugely beneficial, as it
		 * seems that single-purpose certs are not often seen in the
		 * wild.
		 */
		if (cert.purposes.indexOf('serverAuth') !== -1 &&
		    cert.purposes.indexOf('clientAuth') === -1) {
			cert.subjects.forEach(function (ide) {
				if (ide.type !== 'host') {
					ide.type = 'host';
					ide.hostname = ide.uid ||
					    ide.email ||
					    ide.components[0].value;
				}
			});
		} else if (cert.purposes.indexOf('clientAuth') !== -1 &&
		    cert.purposes.indexOf('serverAuth') === -1) {
			cert.subjects.forEach(function (ide) {
				if (ide.type !== 'user') {
					ide.type = 'user';
					ide.uid = ide.hostname ||
					    ide.email ||
					    ide.components[0].value;
				}
			});
		}
		sig.extras.exts.push({ oid: extId, critical: critical });
		break;
	case (EXTS.keyUsage):
		der.readSequence(asn1.Ber.OctetString);
		var bits = der.readString(asn1.Ber.BitString, true);
		var setBits = readBitField(bits, KEYUSEBITS);
		setBits.forEach(function (bit) {
			if (cert.purposes === undefined)
				cert.purposes = [];
			if (cert.purposes.indexOf(bit) === -1)
				cert.purposes.push(bit);
		});
		sig.extras.exts.push({ oid: extId, critical: critical,
		    bits: bits });
		break;
	case (EXTS.altName):
		der.readSequence(asn1.Ber.OctetString);
		der.readSequence();
		var aeEnd = der.offset + der.length;
		while (der.offset < aeEnd) {
			switch (der.peek()) {
			case ALTNAME.OtherName:
			case ALTNAME.EDIPartyName:
				der.readSequence();
				der._offset += der.length;
				break;
			case ALTNAME.OID:
				der.readOID(ALTNAME.OID);
				break;
			case ALTNAME.RFC822Name:
				/* RFC822 specifies email addresses */
				var email = der.readString(ALTNAME.RFC822Name);
				id = Identity.forEmail(email);
				if (!cert.subjects[0].equals(id))
					cert.subjects.push(id);
				break;
			case ALTNAME.DirectoryName:
				der.readSequence(ALTNAME.DirectoryName);
				id = Identity.parseAsn1(der);
				if (!cert.subjects[0].equals(id))
					cert.subjects.push(id);
				break;
			case ALTNAME.DNSName:
				var host = der.readString(
				    ALTNAME.DNSName);
				id = Identity.forHost(host);
				if (!cert.subjects[0].equals(id))
					cert.subjects.push(id);
				break;
			default:
				der.readString(der.peek());
				break;
			}
		}
		sig.extras.exts.push({ oid: extId, critical: critical });
		break;
	default:
		sig.extras.exts.push({
			oid: extId,
			critical: critical,
			data: der.readString(asn1.Ber.OctetString, true)
		});
		break;
	}

	der._offset = after;
}

var UTCTIME_RE =
    /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;
function utcTimeToDate(t) {
	var m = t.match(UTCTIME_RE);
	assert.ok(m, 'timestamps must be in UTC');
	var d = new Date();

	var thisYear = d.getUTCFullYear();
	var century = Math.floor(thisYear / 100) * 100;

	var year = parseInt(m[1], 10);
	if (thisYear % 100 < 50 && year >= 60)
		year += (century - 1);
	else
		year += century;
	d.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));
	d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));
	if (m[6] && m[6].length > 0)
		d.setUTCSeconds(parseInt(m[6], 10));
	return (d);
}

var GTIME_RE =
    /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;
function gTimeToDate(t) {
	var m = t.match(GTIME_RE);
	assert.ok(m);
	var d = new Date();

	d.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1,
	    parseInt(m[3], 10));
	d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));
	if (m[6] && m[6].length > 0)
		d.setUTCSeconds(parseInt(m[6], 10));
	return (d);
}

function zeroPad(n, m) {
	if (m === undefined)
		m = 2;
	var s = '' + n;
	while (s.length < m)
		s = '0' + s;
	return (s);
}

function dateToUTCTime(d) {
	var s = '';
	s += zeroPad(d.getUTCFullYear() % 100);
	s += zeroPad(d.getUTCMonth() + 1);
	s += zeroPad(d.getUTCDate());
	s += zeroPad(d.getUTCHours());
	s += zeroPad(d.getUTCMinutes());
	s += zeroPad(d.getUTCSeconds());
	s += 'Z';
	return (s);
}

function dateToGTime(d) {
	var s = '';
	s += zeroPad(d.getUTCFullYear(), 4);
	s += zeroPad(d.getUTCMonth() + 1);
	s += zeroPad(d.getUTCDate());
	s += zeroPad(d.getUTCHours());
	s += zeroPad(d.getUTCMinutes());
	s += zeroPad(d.getUTCSeconds());
	s += 'Z';
	return (s);
}

function sign(cert, key) {
	if (cert.signatures.x509 === undefined)
		cert.signatures.x509 = {};
	var sig = cert.signatures.x509;

	sig.algo = key.type + '-' + key.defaultHashAlgorithm();
	if (SIGN_ALGS[sig.algo] === undefined)
		return (false);

	var der = new asn1.BerWriter();
	writeTBSCert(cert, der);
	var blob = der.buffer;
	sig.cache = blob;

	var signer = key.createSign();
	signer.write(blob);
	cert.signatures.x509.signature = signer.sign();

	return (true);
}

function signAsync(cert, signer, done) {
	if (cert.signatures.x509 === undefined)
		cert.signatures.x509 = {};
	var sig = cert.signatures.x509;

	var der = new asn1.BerWriter();
	writeTBSCert(cert, der);
	var blob = der.buffer;
	sig.cache = blob;

	signer(blob, function (err, signature) {
		if (err) {
			done(err);
			return;
		}
		sig.algo = signature.type + '-' + signature.hashAlgorithm;
		if (SIGN_ALGS[sig.algo] === undefined) {
			done(new Error('Invalid signing algorithm "' +
			    sig.algo + '"'));
			return;
		}
		sig.signature = signature;
		done();
	});
}

function write(cert, options) {
	var sig = cert.signatures.x509;
	assert.object(sig, 'x509 signature');

	var der = new asn1.BerWriter();
	der.startSequence();
	if (sig.cache) {
		der._ensure(sig.cache.length);
		sig.cache.copy(der._buf, der._offset);
		der._offset += sig.cache.length;
	} else {
		writeTBSCert(cert, der);
	}

	der.startSequence();
	der.writeOID(SIGN_ALGS[sig.algo]);
	if (sig.algo.match(/^rsa-/))
		der.writeNull();
	der.endSequence();

	var sigData = sig.signature.toBuffer('asn1');
	var data = Buffer.alloc(sigData.length + 1);
	data[0] = 0;
	sigData.copy(data, 1);
	der.writeBuffer(data, asn1.Ber.BitString);
	der.endSequence();

	return (der.buffer);
}

function writeTBSCert(cert, der) {
	var sig = cert.signatures.x509;
	assert.object(sig, 'x509 signature');

	der.startSequence();

	der.startSequence(Local(0));
	der.writeInt(2);
	der.endSequence();

	der.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);

	der.startSequence();
	der.writeOID(SIGN_ALGS[sig.algo]);
	if (sig.algo.match(/^rsa-/))
		der.writeNull();
	der.endSequence();

	cert.issuer.toAsn1(der);

	der.startSequence();
	writeDate(der, cert.validFrom);
	writeDate(der, cert.validUntil);
	der.endSequence();

	var subject = cert.subjects[0];
	var altNames = cert.subjects.slice(1);
	subject.toAsn1(der);

	pkcs8.writePkcs8(der, cert.subjectKey);

	if (sig.extras && sig.extras.issuerUniqueID) {
		der.writeBuffer(sig.extras.issuerUniqueID, Local(1));
	}

	if (sig.extras && sig.extras.subjectUniqueID) {
		der.writeBuffer(sig.extras.subjectUniqueID, Local(2));
	}

	if (altNames.length > 0 || subject.type === 'host' ||
	    (cert.purposes !== undefined && cert.purposes.length > 0) ||
	    (sig.extras && sig.extras.exts)) {
		der.startSequence(Local(3));
		der.startSequence();

		var exts = [];
		if (cert.purposes !== undefined && cert.purposes.length > 0) {
			exts.push({
				oid: EXTS.basicConstraints,
				critical: true
			});
			exts.push({
				oid: EXTS.keyUsage,
				critical: true
			});
			exts.push({
				oid: EXTS.extKeyUsage,
				critical: true
			});
		}
		exts.push({ oid: EXTS.altName });
		if (sig.extras && sig.extras.exts)
			exts = sig.extras.exts;

		for (var i = 0; i < exts.length; ++i) {
			der.startSequence();
			der.writeOID(exts[i].oid);

			if (exts[i].critical !== undefined)
				der.writeBoolean(exts[i].critical);

			if (exts[i].oid === EXTS.altName) {
				der.startSequence(asn1.Ber.OctetString);
				der.startSequence();
				if (subject.type === 'host') {
					der.writeString(subject.hostname,
					    Context(2));
				}
				for (var j = 0; j < altNames.length; ++j) {
					if (altNames[j].type === 'host') {
						der.writeString(
						    altNames[j].hostname,
						    ALTNAME.DNSName);
					} else if (altNames[j].type ===
					    'email') {
						der.writeString(
						    altNames[j].email,
						    ALTNAME.RFC822Name);
					} else {
						/*
						 * Encode anything else as a
						 * DN style name for now.
						 */
						der.startSequence(
						    ALTNAME.DirectoryName);
						altNames[j].toAsn1(der);
						der.endSequence();
					}
				}
				der.endSequence();
				der.endSequence();
			} else if (exts[i].oid === EXTS.basicConstraints) {
				der.startSequence(asn1.Ber.OctetString);
				der.startSequence();
				var ca = (cert.purposes.indexOf('ca') !== -1);
				var pathLen = exts[i].pathLen;
				der.writeBoolean(ca);
				if (pathLen !== undefined)
					der.writeInt(pathLen);
				der.endSequence();
				der.endSequence();
			} else if (exts[i].oid === EXTS.extKeyUsage) {
				der.startSequence(asn1.Ber.OctetString);
				der.startSequence();
				cert.purposes.forEach(function (purpose) {
					if (purpose === 'ca')
						return;
					if (KEYUSEBITS.indexOf(purpose) !== -1)
						return;
					var oid = purpose;
					if (EXTPURPOSE[purpose] !== undefined)
						oid = EXTPURPOSE[purpose];
					der.writeOID(oid);
				});
				der.endSequence();
				der.endSequence();
			} else if (exts[i].oid === EXTS.keyUsage) {
				der.startSequence(asn1.Ber.OctetString);
				/*
				 * If we parsed this certificate from a byte
				 * stream (i.e. we didn't generate it in sshpk)
				 * then we'll have a ".bits" property on the
				 * ext with the original raw byte contents.
				 *
				 * If we have this, use it here instead of
				 * regenerating it. This guarantees we output
				 * the same data we parsed, so signatures still
				 * validate.
				 */
				if (exts[i].bits !== undefined) {
					der.writeBuffer(exts[i].bits,
					    asn1.Ber.BitString);
				} else {
					var bits = writeBitField(cert.purposes,
					    KEYUSEBITS);
					der.writeBuffer(bits,
					    asn1.Ber.BitString);
				}
				der.endSequence();
			} else {
				der.writeBuffer(exts[i].data,
				    asn1.Ber.OctetString);
			}

			der.endSequence();
		}

		der.endSequence();
		der.endSequence();
	}

	der.endSequence();
}

/*
 * Reads an ASN.1 BER bitfield out of the Buffer produced by doing
 * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw
 * contents of the BitString tag, which is a count of unused bits followed by
 * the bits as a right-padded byte string.
 *
 * `bits` is the Buffer, `bitIndex` should contain an array of string names
 * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.
 *
 * Returns an array of Strings, the names of the bits that were set to 1.
 */
function readBitField(bits, bitIndex) {
	var bitLen = 8 * (bits.length - 1) - bits[0];
	var setBits = {};
	for (var i = 0; i < bitLen; ++i) {
		var byteN = 1 + Math.floor(i / 8);
		var bit = 7 - (i % 8);
		var mask = 1 << bit;
		var bitVal = ((bits[byteN] & mask) !== 0);
		var name = bitIndex[i];
		if (bitVal && typeof (name) === 'string') {
			setBits[name] = true;
		}
	}
	return (Object.keys(setBits));
}

/*
 * `setBits` is an array of strings, containing the names for each bit that
 * sould be set to 1. `bitIndex` is same as in `readBitField()`.
 *
 * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.
 */
function writeBitField(setBits, bitIndex) {
	var bitLen = bitIndex.length;
	var blen = Math.ceil(bitLen / 8);
	var unused = blen * 8 - bitLen;
	var bits = Buffer.alloc(1 + blen); // zero-filled
	bits[0] = unused;
	for (var i = 0; i < bitLen; ++i) {
		var byteN = 1 + Math.floor(i / 8);
		var bit = 7 - (i % 8);
		var mask = 1 << bit;
		var name = bitIndex[i];
		if (name === undefined)
			continue;
		var bitVal = (setBits.indexOf(name) !== -1);
		if (bitVal) {
			bits[byteN] |= mask;
		}
	}
	return (bits);
}
// Copyright 2017 Joyent, Inc.

module.exports = Identity;

var assert = require('assert-plus');
var algs = require('./algs');
var crypto = require('crypto');
var Fingerprint = require('./fingerprint');
var Signature = require('./signature');
var errs = require('./errors');
var util = require('util');
var utils = require('./utils');
var asn1 = require('asn1');
var Buffer = require('safer-buffer').Buffer;

/*JSSTYLED*/
var DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\-]{0,62})(?:\.([*]|[a-z0-9][a-z0-9\-]{0,62}))*$/i;

var oids = {};
oids.cn = '2.5.4.3';
oids.o = '2.5.4.10';
oids.ou = '2.5.4.11';
oids.l = '2.5.4.7';
oids.s = '2.5.4.8';
oids.c = '2.5.4.6';
oids.sn = '2.5.4.4';
oids.postalCode = '2.5.4.17';
oids.serialNumber = '2.5.4.5';
oids.street = '2.5.4.9';
oids.x500UniqueIdentifier = '2.5.4.45';
oids.role = '2.5.4.72';
oids.telephoneNumber = '2.5.4.20';
oids.description = '2.5.4.13';
oids.dc = '0.9.2342.19200300.100.1.25';
oids.uid = '0.9.2342.19200300.100.1.1';
oids.mail = '0.9.2342.19200300.100.1.3';
oids.title = '2.5.4.12';
oids.gn = '2.5.4.42';
oids.initials = '2.5.4.43';
oids.pseudonym = '2.5.4.65';
oids.emailAddress = '1.2.840.113549.1.9.1';

var unoids = {};
Object.keys(oids).forEach(function (k) {
	unoids[oids[k]] = k;
});

function Identity(opts) {
	var self = this;
	assert.object(opts, 'options');
	assert.arrayOfObject(opts.components, 'options.components');
	this.components = opts.components;
	this.componentLookup = {};
	this.components.forEach(function (c) {
		if (c.name && !c.oid)
			c.oid = oids[c.name];
		if (c.oid && !c.name)
			c.name = unoids[c.oid];
		if (self.componentLookup[c.name] === undefined)
			self.componentLookup[c.name] = [];
		self.componentLookup[c.name].push(c);
	});
	if (this.componentLookup.cn && this.componentLookup.cn.length > 0) {
		this.cn = this.componentLookup.cn[0].value;
	}
	assert.optionalString(opts.type, 'options.type');
	if (opts.type === undefined) {
		if (this.components.length === 1 &&
		    this.componentLookup.cn &&
		    this.componentLookup.cn.length === 1 &&
		    this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {
			this.type = 'host';
			this.hostname = this.componentLookup.cn[0].value;

		} else if (this.componentLookup.dc &&
		    this.components.length === this.componentLookup.dc.length) {
			this.type = 'host';
			this.hostname = this.componentLookup.dc.map(
			    function (c) {
				return (c.value);
			}).join('.');

		} else if (this.componentLookup.uid &&
		    this.components.length ===
		    this.componentLookup.uid.length) {
			this.type = 'user';
			this.uid = this.componentLookup.uid[0].value;

		} else if (this.componentLookup.cn &&
		    this.componentLookup.cn.length === 1 &&
		    this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {
			this.type = 'host';
			this.hostname = this.componentLookup.cn[0].value;

		} else if (this.componentLookup.uid &&
		    this.componentLookup.uid.length === 1) {
			this.type = 'user';
			this.uid = this.componentLookup.uid[0].value;

		} else if (this.componentLookup.mail &&
		    this.componentLookup.mail.length === 1) {
			this.type = 'email';
			this.email = this.componentLookup.mail[0].value;

		} else if (this.componentLookup.cn &&
		    this.componentLookup.cn.length === 1) {
			this.type = 'user';
			this.uid = this.componentLookup.cn[0].value;

		} else {
			this.type = 'unknown';
		}
	} else {
		this.type = opts.type;
		if (this.type === 'host')
			this.hostname = opts.hostname;
		else if (this.type === 'user')
			this.uid = opts.uid;
		else if (this.type === 'email')
			this.email = opts.email;
		else
			throw (new Error('Unknown type ' + this.type));
	}
}

Identity.prototype.toString = function () {
	return (this.components.map(function (c) {
		var n = c.name.toUpperCase();
		/*JSSTYLED*/
		n = n.replace(/=/g, '\\=');
		var v = c.value;
		/*JSSTYLED*/
		v = v.replace(/,/g, '\\,');
		return (n + '=' + v);
	}).join(', '));
};

Identity.prototype.get = function (name, asArray) {
	assert.string(name, 'name');
	var arr = this.componentLookup[name];
	if (arr === undefined || arr.length === 0)
		return (undefined);
	if (!asArray && arr.length > 1)
		throw (new Error('Multiple values for attribute ' + name));
	if (!asArray)
		return (arr[0].value);
	return (arr.map(function (c) {
		return (c.value);
	}));
};

Identity.prototype.toArray = function (idx) {
	return (this.components.map(function (c) {
		return ({
			name: c.name,
			value: c.value
		});
	}));
};

/*
 * These are from X.680 -- PrintableString allowed chars are in section 37.4
 * table 8. Spec for IA5Strings is "1,6 + SPACE + DEL" where 1 refers to
 * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006
 * (the basic ASCII character set).
 */
/* JSSTYLED */
var NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\/:=?-]/;
/* JSSTYLED */
var NOT_IA5 = /[^\x00-\x7f]/;

Identity.prototype.toAsn1 = function (der, tag) {
	der.startSequence(tag);
	this.components.forEach(function (c) {
		der.startSequence(asn1.Ber.Constructor | asn1.Ber.Set);
		der.startSequence();
		der.writeOID(c.oid);
		/*
		 * If we fit in a PrintableString, use that. Otherwise use an
		 * IA5String or UTF8String.
		 *
		 * If this identity was parsed from a DN, use the ASN.1 types
		 * from the original representation (otherwise this might not
		 * be a full match for the original in some validators).
		 */
		if (c.asn1type === asn1.Ber.Utf8String ||
		    c.value.match(NOT_IA5)) {
			var v = Buffer.from(c.value, 'utf8');
			der.writeBuffer(v, asn1.Ber.Utf8String);

		} else if (c.asn1type === asn1.Ber.IA5String ||
		    c.value.match(NOT_PRINTABLE)) {
			der.writeString(c.value, asn1.Ber.IA5String);

		} else {
			var type = asn1.Ber.PrintableString;
			if (c.asn1type !== undefined)
				type = c.asn1type;
			der.writeString(c.value, type);
		}
		der.endSequence();
		der.endSequence();
	});
	der.endSequence();
};

function globMatch(a, b) {
	if (a === '**' || b === '**')
		return (true);
	var aParts = a.split('.');
	var bParts = b.split('.');
	if (aParts.length !== bParts.length)
		return (false);
	for (var i = 0; i < aParts.length; ++i) {
		if (aParts[i] === '*' || bParts[i] === '*')
			continue;
		if (aParts[i] !== bParts[i])
			return (false);
	}
	return (true);
}

Identity.prototype.equals = function (other) {
	if (!Identity.isIdentity(other, [1, 0]))
		return (false);
	if (other.components.length !== this.components.length)
		return (false);
	for (var i = 0; i < this.components.length; ++i) {
		if (this.components[i].oid !== other.components[i].oid)
			return (false);
		if (!globMatch(this.components[i].value,
		    other.components[i].value)) {
			return (false);
		}
	}
	return (true);
};

Identity.forHost = function (hostname) {
	assert.string(hostname, 'hostname');
	return (new Identity({
		type: 'host',
		hostname: hostname,
		components: [ { name: 'cn', value: hostname } ]
	}));
};

Identity.forUser = function (uid) {
	assert.string(uid, 'uid');
	return (new Identity({
		type: 'user',
		uid: uid,
		components: [ { name: 'uid', value: uid } ]
	}));
};

Identity.forEmail = function (email) {
	assert.string(email, 'email');
	return (new Identity({
		type: 'email',
		email: email,
		components: [ { name: 'mail', value: email } ]
	}));
};

Identity.parseDN = function (dn) {
	assert.string(dn, 'dn');
	var parts = [''];
	var idx = 0;
	var rem = dn;
	while (rem.length > 0) {
		var m;
		/*JSSTYLED*/
		if ((m = /^,/.exec(rem)) !== null) {
			parts[++idx] = '';
			rem = rem.slice(m[0].length);
		/*JSSTYLED*/
		} else if ((m = /^\\,/.exec(rem)) !== null) {
			parts[idx] += ',';
			rem = rem.slice(m[0].length);
		/*JSSTYLED*/
		} else if ((m = /^\\./.exec(rem)) !== null) {
			parts[idx] += m[0];
			rem = rem.slice(m[0].length);
		/*JSSTYLED*/
		} else if ((m = /^[^\\,]+/.exec(rem)) !== null) {
			parts[idx] += m[0];
			rem = rem.slice(m[0].length);
		} else {
			throw (new Error('Failed to parse DN'));
		}
	}
	var cmps = parts.map(function (c) {
		c = c.trim();
		var eqPos = c.indexOf('=');
		while (eqPos > 0 && c.charAt(eqPos - 1) === '\\')
			eqPos = c.indexOf('=', eqPos + 1);
		if (eqPos === -1) {
			throw (new Error('Failed to parse DN'));
		}
		/*JSSTYLED*/
		var name = c.slice(0, eqPos).toLowerCase().replace(/\\=/g, '=');
		var value = c.slice(eqPos + 1);
		return ({ name: name, value: value });
	});
	return (new Identity({ components: cmps }));
};

Identity.fromArray = function (components) {
	assert.arrayOfObject(components, 'components');
	components.forEach(function (cmp) {
		assert.object(cmp, 'component');
		assert.string(cmp.name, 'component.name');
		if (!Buffer.isBuffer(cmp.value) &&
		    !(typeof (cmp.value) === 'string')) {
			throw (new Error('Invalid component value'));
		}
	});
	return (new Identity({ components: components }));
};

Identity.parseAsn1 = function (der, top) {
	var components = [];
	der.readSequence(top);
	var end = der.offset + der.length;
	while (der.offset < end) {
		der.readSequence(asn1.Ber.Constructor | asn1.Ber.Set);
		var after = der.offset + der.length;
		der.readSequence();
		var oid = der.readOID();
		var type = der.peek();
		var value;
		switch (type) {
		case asn1.Ber.PrintableString:
		case asn1.Ber.IA5String:
		case asn1.Ber.OctetString:
		case asn1.Ber.T61String:
			value = der.readString(type);
			break;
		case asn1.Ber.Utf8String:
			value = der.readString(type, true);
			value = value.toString('utf8');
			break;
		case asn1.Ber.CharacterString:
		case asn1.Ber.BMPString:
			value = der.readString(type, true);
			value = value.toString('utf16le');
			break;
		default:
			throw (new Error('Unknown asn1 type ' + type));
		}
		components.push({ oid: oid, asn1type: type, value: value });
		der._offset = after;
	}
	der._offset = end;
	return (new Identity({
		components: components
	}));
};

Identity.isIdentity = function (obj, ver) {
	return (utils.isCompatible(obj, Identity, ver));
};

/*
 * API versions for Identity:
 * [1,0] -- initial ver
 */
Identity.prototype._sshpkApiVersion = [1, 0];

Identity._oldVersionDetect = function (obj) {
	return ([1, 0]);
};
// Copyright 2015 Joyent, Inc.

var Key = require('./key');
var Fingerprint = require('./fingerprint');
var Signature = require('./signature');
var PrivateKey = require('./private-key');
var Certificate = require('./certificate');
var Identity = require('./identity');
var errs = require('./errors');

module.exports = {
	/* top-level classes */
	Key: Key,
	parseKey: Key.parse,
	Fingerprint: Fingerprint,
	parseFingerprint: Fingerprint.parse,
	Signature: Signature,
	parseSignature: Signature.parse,
	PrivateKey: PrivateKey,
	parsePrivateKey: PrivateKey.parse,
	generatePrivateKey: PrivateKey.generate,
	Certificate: Certificate,
	parseCertificate: Certificate.parse,
	createSelfSignedCertificate: Certificate.createSelfSigned,
	createCertificate: Certificate.create,
	Identity: Identity,
	identityFromDN: Identity.parseDN,
	identityForHost: Identity.forHost,
	identityForUser: Identity.forUser,
	identityForEmail: Identity.forEmail,
	identityFromArray: Identity.fromArray,

	/* errors */
	FingerprintFormatError: errs.FingerprintFormatError,
	InvalidAlgorithmError: errs.InvalidAlgorithmError,
	KeyParseError: errs.KeyParseError,
	SignatureParseError: errs.SignatureParseError,
	KeyEncryptedError: errs.KeyEncryptedError,
	CertificateParseError: errs.CertificateParseError
};
// Copyright 2018 Joyent, Inc.

module.exports = Key;

var assert = require('assert-plus');
var algs = require('./algs');
var crypto = require('crypto');
var Fingerprint = require('./fingerprint');
var Signature = require('./signature');
var DiffieHellman = require('./dhe').DiffieHellman;
var errs = require('./errors');
var utils = require('./utils');
var PrivateKey = require('./private-key');
var edCompat;

try {
	edCompat = require('./ed-compat');
} catch (e) {
	/* Just continue through, and bail out if we try to use it. */
}

var InvalidAlgorithmError = errs.InvalidAlgorithmError;
var KeyParseError = errs.KeyParseError;

var formats = {};
formats['auto'] = require('./formats/auto');
formats['pem'] = require('./formats/pem');
formats['pkcs1'] = require('./formats/pkcs1');
formats['pkcs8'] = require('./formats/pkcs8');
formats['rfc4253'] = require('./formats/rfc4253');
formats['ssh'] = require('./formats/ssh');
formats['ssh-private'] = require('./formats/ssh-private');
formats['openssh'] = formats['ssh-private'];
formats['dnssec'] = require('./formats/dnssec');
formats['putty'] = require('./formats/putty');
formats['ppk'] = formats['putty'];

function Key(opts) {
	assert.object(opts, 'options');
	assert.arrayOfObject(opts.parts, 'options.parts');
	assert.string(opts.type, 'options.type');
	assert.optionalString(opts.comment, 'options.comment');

	var algInfo = algs.info[opts.type];
	if (typeof (algInfo) !== 'object')
		throw (new InvalidAlgorithmError(opts.type));

	var partLookup = {};
	for (var i = 0; i < opts.parts.length; ++i) {
		var part = opts.parts[i];
		partLookup[part.name] = part;
	}

	this.type = opts.type;
	this.parts = opts.parts;
	this.part = partLookup;
	this.comment = undefined;
	this.source = opts.source;

	/* for speeding up hashing/fingerprint operations */
	this._rfc4253Cache = opts._rfc4253Cache;
	this._hashCache = {};

	var sz;
	this.curve = undefined;
	if (this.type === 'ecdsa') {
		var curve = this.part.curve.data.toString();
		this.curve = curve;
		sz = algs.curves[curve].size;
	} else if (this.type === 'ed25519' || this.type === 'curve25519') {
		sz = 256;
		this.curve = 'curve25519';
	} else {
		var szPart = this.part[algInfo.sizePart];
		sz = szPart.data.length;
		sz = sz * 8 - utils.countZeros(szPart.data);
	}
	this.size = sz;
}

Key.formats = formats;

Key.prototype.toBuffer = function (format, options) {
	if (format === undefined)
		format = 'ssh';
	assert.string(format, 'format');
	assert.object(formats[format], 'formats[format]');
	assert.optionalObject(options, 'options');

	if (format === 'rfc4253') {
		if (this._rfc4253Cache === undefined)
			this._rfc4253Cache = formats['rfc4253'].write(this);
		return (this._rfc4253Cache);
	}

	return (formats[format].write(this, options));
};

Key.prototype.toString = function (format, options) {
	return (this.toBuffer(format, options).toString());
};

Key.prototype.hash = function (algo, type) {
	assert.string(algo, 'algorithm');
	assert.optionalString(type, 'type');
	if (type === undefined)
		type = 'ssh';
	algo = algo.toLowerCase();
	if (algs.hashAlgs[algo] === undefined)
		throw (new InvalidAlgorithmError(algo));

	var cacheKey = algo + '||' + type;
	if (this._hashCache[cacheKey])
		return (this._hashCache[cacheKey]);

	var buf;
	if (type === 'ssh') {
		buf = this.toBuffer('rfc4253');
	} else if (type === 'spki') {
		buf = formats.pkcs8.pkcs8ToBuffer(this);
	} else {
		throw (new Error('Hash type ' + type + ' not supported'));
	}
	var hash = crypto.createHash(algo).update(buf).digest();
	this._hashCache[cacheKey] = hash;
	return (hash);
};

Key.prototype.fingerprint = function (algo, type) {
	if (algo === undefined)
		algo = 'sha256';
	if (type === undefined)
		type = 'ssh';
	assert.string(algo, 'algorithm');
	assert.string(type, 'type');
	var opts = {
		type: 'key',
		hash: this.hash(algo, type),
		algorithm: algo,
		hashType: type
	};
	return (new Fingerprint(opts));
};

Key.prototype.defaultHashAlgorithm = function () {
	var hashAlgo = 'sha1';
	if (this.type === 'rsa')
		hashAlgo = 'sha256';
	if (this.type === 'dsa' && this.size > 1024)
		hashAlgo = 'sha256';
	if (this.type === 'ed25519')
		hashAlgo = 'sha512';
	if (this.type === 'ecdsa') {
		if (this.size <= 256)
			hashAlgo = 'sha256';
		else if (this.size <= 384)
			hashAlgo = 'sha384';
		else
			hashAlgo = 'sha512';
	}
	return (hashAlgo);
};

Key.prototype.createVerify = function (hashAlgo) {
	if (hashAlgo === undefined)
		hashAlgo = this.defaultHashAlgorithm();
	assert.string(hashAlgo, 'hash algorithm');

	/* ED25519 is not supported by OpenSSL, use a javascript impl. */
	if (this.type === 'ed25519' && edCompat !== undefined)
		return (new edCompat.Verifier(this, hashAlgo));
	if (this.type === 'curve25519')
		throw (new Error('Curve25519 keys are not suitable for ' +
		    'signing or verification'));

	var v, nm, err;
	try {
		nm = hashAlgo.toUpperCase();
		v = crypto.createVerify(nm);
	} catch (e) {
		err = e;
	}
	if (v === undefined || (err instanceof Error &&
	    err.message.match(/Unknown message digest/))) {
		nm = 'RSA-';
		nm += hashAlgo.toUpperCase();
		v = crypto.createVerify(nm);
	}
	assert.ok(v, 'failed to create verifier');
	var oldVerify = v.verify.bind(v);
	var key = this.toBuffer('pkcs8');
	var curve = this.curve;
	var self = this;
	v.verify = function (signature, fmt) {
		if (Signature.isSignature(signature, [2, 0])) {
			if (signature.type !== self.type)
				return (false);
			if (signature.hashAlgorithm &&
			    signature.hashAlgorithm !== hashAlgo)
				return (false);
			if (signature.curve && self.type === 'ecdsa' &&
			    signature.curve !== curve)
				return (false);
			return (oldVerify(key, signature.toBuffer('asn1')));

		} else if (typeof (signature) === 'string' ||
		    Buffer.isBuffer(signature)) {
			return (oldVerify(key, signature, fmt));

		/*
		 * Avoid doing this on valid arguments, walking the prototype
		 * chain can be quite slow.
		 */
		} else if (Signature.isSignature(signature, [1, 0])) {
			throw (new Error('signature was created by too old ' +
			    'a version of sshpk and cannot be verified'));

		} else {
			throw (new TypeError('signature must be a string, ' +
			    'Buffer, or Signature object'));
		}
	};
	return (v);
};

Key.prototype.createDiffieHellman = function () {
	if (this.type === 'rsa')
		throw (new Error('RSA keys do not support Diffie-Hellman'));

	return (new DiffieHellman(this));
};
Key.prototype.createDH = Key.prototype.createDiffieHellman;

Key.parse = function (data, format, options) {
	if (typeof (data) !== 'string')
		assert.buffer(data, 'data');
	if (format === undefined)
		format = 'auto';
	assert.string(format, 'format');
	if (typeof (options) === 'string')
		options = { filename: options };
	assert.optionalObject(options, 'options');
	if (options === undefined)
		options = {};
	assert.optionalString(options.filename, 'options.filename');
	if (options.filename === undefined)
		options.filename = '(unnamed)';

	assert.object(formats[format], 'formats[format]');

	try {
		var k = formats[format].read(data, options);
		if (k instanceof PrivateKey)
			k = k.toPublic();
		if (!k.comment)
			k.comment = options.filename;
		return (k);
	} catch (e) {
		if (e.name === 'KeyEncryptedError')
			throw (e);
		throw (new KeyParseError(options.filename, format, e));
	}
};

Key.isKey = function (obj, ver) {
	return (utils.isCompatible(obj, Key, ver));
};

/*
 * API versions for Key:
 * [1,0] -- initial ver, may take Signature for createVerify or may not
 * [1,1] -- added pkcs1, pkcs8 formats
 * [1,2] -- added auto, ssh-private, openssh formats
 * [1,3] -- added defaultHashAlgorithm
 * [1,4] -- added ed support, createDH
 * [1,5] -- first explicitly tagged version
 * [1,6] -- changed ed25519 part names
 * [1,7] -- spki hash types
 */
Key.prototype._sshpkApiVersion = [1, 7];

Key._oldVersionDetect = function (obj) {
	assert.func(obj.toBuffer);
	assert.func(obj.fingerprint);
	if (obj.createDH)
		return ([1, 4]);
	if (obj.defaultHashAlgorithm)
		return ([1, 3]);
	if (obj.formats['auto'])
		return ([1, 2]);
	if (obj.formats['pkcs1'])
		return ([1, 1]);
	return ([1, 0]);
};
// Copyright 2017 Joyent, Inc.

module.exports = PrivateKey;

var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;
var algs = require('./algs');
var crypto = require('crypto');
var Fingerprint = require('./fingerprint');
var Signature = require('./signature');
var errs = require('./errors');
var util = require('util');
var utils = require('./utils');
var dhe = require('./dhe');
var generateECDSA = dhe.generateECDSA;
var generateED25519 = dhe.generateED25519;
var edCompat = require('./ed-compat');
var nacl = require('tweetnacl');

var Key = require('./key');

var InvalidAlgorithmError = errs.InvalidAlgorithmError;
var KeyParseError = errs.KeyParseError;
var KeyEncryptedError = errs.KeyEncryptedError;

var formats = {};
formats['auto'] = require('./formats/auto');
formats['pem'] = require('./formats/pem');
formats['pkcs1'] = require('./formats/pkcs1');
formats['pkcs8'] = require('./formats/pkcs8');
formats['rfc4253'] = require('./formats/rfc4253');
formats['ssh-private'] = require('./formats/ssh-private');
formats['openssh'] = formats['ssh-private'];
formats['ssh'] = formats['ssh-private'];
formats['dnssec'] = require('./formats/dnssec');
formats['putty'] = require('./formats/putty');

function PrivateKey(opts) {
	assert.object(opts, 'options');
	Key.call(this, opts);

	this._pubCache = undefined;
}
util.inherits(PrivateKey, Key);

PrivateKey.formats = formats;

PrivateKey.prototype.toBuffer = function (format, options) {
	if (format === undefined)
		format = 'pkcs1';
	assert.string(format, 'format');
	assert.object(formats[format], 'formats[format]');
	assert.optionalObject(options, 'options');

	return (formats[format].write(this, options));
};

PrivateKey.prototype.hash = function (algo, type) {
	return (this.toPublic().hash(algo, type));
};

PrivateKey.prototype.fingerprint = function (algo, type) {
	return (this.toPublic().fingerprint(algo, type));
};

PrivateKey.prototype.toPublic = function () {
	if (this._pubCache)
		return (this._pubCache);

	var algInfo = algs.info[this.type];
	var pubParts = [];
	for (var i = 0; i < algInfo.parts.length; ++i) {
		var p = algInfo.parts[i];
		pubParts.push(this.part[p]);
	}

	this._pubCache = new Key({
		type: this.type,
		source: this,
		parts: pubParts
	});
	if (this.comment)
		this._pubCache.comment = this.comment;
	return (this._pubCache);
};

PrivateKey.prototype.derive = function (newType) {
	assert.string(newType, 'type');
	var priv, pub, pair;

	if (this.type === 'ed25519' && newType === 'curve25519') {
		priv = this.part.k.data;
		if (priv[0] === 0x00)
			priv = priv.slice(1);

		pair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));
		pub = Buffer.from(pair.publicKey);

		return (new PrivateKey({
			type: 'curve25519',
			parts: [
				{ name: 'A', data: utils.mpNormalize(pub) },
				{ name: 'k', data: utils.mpNormalize(priv) }
			]
		}));
	} else if (this.type === 'curve25519' && newType === 'ed25519') {
		priv = this.part.k.data;
		if (priv[0] === 0x00)
			priv = priv.slice(1);

		pair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));
		pub = Buffer.from(pair.publicKey);

		return (new PrivateKey({
			type: 'ed25519',
			parts: [
				{ name: 'A', data: utils.mpNormalize(pub) },
				{ name: 'k', data: utils.mpNormalize(priv) }
			]
		}));
	}
	throw (new Error('Key derivation not supported from ' + this.type +
	    ' to ' + newType));
};

PrivateKey.prototype.createVerify = function (hashAlgo) {
	return (this.toPublic().createVerify(hashAlgo));
};

PrivateKey.prototype.createSign = function (hashAlgo) {
	if (hashAlgo === undefined)
		hashAlgo = this.defaultHashAlgorithm();
	assert.string(hashAlgo, 'hash algorithm');

	/* ED25519 is not supported by OpenSSL, use a javascript impl. */
	if (this.type === 'ed25519' && edCompat !== undefined)
		return (new edCompat.Signer(this, hashAlgo));
	if (this.type === 'curve25519')
		throw (new Error('Curve25519 keys are not suitable for ' +
		    'signing or verification'));

	var v, nm, err;
	try {
		nm = hashAlgo.toUpperCase();
		v = crypto.createSign(nm);
	} catch (e) {
		err = e;
	}
	if (v === undefined || (err instanceof Error &&
	    err.message.match(/Unknown message digest/))) {
		nm = 'RSA-';
		nm += hashAlgo.toUpperCase();
		v = crypto.createSign(nm);
	}
	assert.ok(v, 'failed to create verifier');
	var oldSign = v.sign.bind(v);
	var key = this.toBuffer('pkcs1');
	var type = this.type;
	var curve = this.curve;
	v.sign = function () {
		var sig = oldSign(key);
		if (typeof (sig) === 'string')
			sig = Buffer.from(sig, 'binary');
		sig = Signature.parse(sig, type, 'asn1');
		sig.hashAlgorithm = hashAlgo;
		sig.curve = curve;
		return (sig);
	};
	return (v);
};

PrivateKey.parse = function (data, format, options) {
	if (typeof (data) !== 'string')
		assert.buffer(data, 'data');
	if (format === undefined)
		format = 'auto';
	assert.string(format, 'format');
	if (typeof (options) === 'string')
		options = { filename: options };
	assert.optionalObject(options, 'options');
	if (options === undefined)
		options = {};
	assert.optionalString(options.filename, 'options.filename');
	if (options.filename === undefined)
		options.filename = '(unnamed)';

	assert.object(formats[format], 'formats[format]');

	try {
		var k = formats[format].read(data, options);
		assert.ok(k instanceof PrivateKey, 'key is not a private key');
		if (!k.comment)
			k.comment = options.filename;
		return (k);
	} catch (e) {
		if (e.name === 'KeyEncryptedError')
			throw (e);
		throw (new KeyParseError(options.filename, format, e));
	}
};

PrivateKey.isPrivateKey = function (obj, ver) {
	return (utils.isCompatible(obj, PrivateKey, ver));
};

PrivateKey.generate = function (type, options) {
	if (options === undefined)
		options = {};
	assert.object(options, 'options');

	switch (type) {
	case 'ecdsa':
		if (options.curve === undefined)
			options.curve = 'nistp256';
		assert.string(options.curve, 'options.curve');
		return (generateECDSA(options.curve));
	case 'ed25519':
		return (generateED25519());
	default:
		throw (new Error('Key generation not supported with key ' +
		    'type "' + type + '"'));
	}
};

/*
 * API versions for PrivateKey:
 * [1,0] -- initial ver
 * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats
 * [1,2] -- added defaultHashAlgorithm
 * [1,3] -- added derive, ed, createDH
 * [1,4] -- first tagged version
 * [1,5] -- changed ed25519 part names and format
 * [1,6] -- type arguments for hash() and fingerprint()
 */
PrivateKey.prototype._sshpkApiVersion = [1, 6];

PrivateKey._oldVersionDetect = function (obj) {
	assert.func(obj.toPublic);
	assert.func(obj.createSign);
	if (obj.derive)
		return ([1, 3]);
	if (obj.defaultHashAlgorithm)
		return ([1, 2]);
	if (obj.formats['auto'])
		return ([1, 1]);
	return ([1, 0]);
};
// Copyright 2015 Joyent, Inc.

module.exports = Signature;

var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;
var algs = require('./algs');
var crypto = require('crypto');
var errs = require('./errors');
var utils = require('./utils');
var asn1 = require('asn1');
var SSHBuffer = require('./ssh-buffer');

var InvalidAlgorithmError = errs.InvalidAlgorithmError;
var SignatureParseError = errs.SignatureParseError;

function Signature(opts) {
	assert.object(opts, 'options');
	assert.arrayOfObject(opts.parts, 'options.parts');
	assert.string(opts.type, 'options.type');

	var partLookup = {};
	for (var i = 0; i < opts.parts.length; ++i) {
		var part = opts.parts[i];
		partLookup[part.name] = part;
	}

	this.type = opts.type;
	this.hashAlgorithm = opts.hashAlgo;
	this.curve = opts.curve;
	this.parts = opts.parts;
	this.part = partLookup;
}

Signature.prototype.toBuffer = function (format) {
	if (format === undefined)
		format = 'asn1';
	assert.string(format, 'format');

	var buf;
	var stype = 'ssh-' + this.type;

	switch (this.type) {
	case 'rsa':
		switch (this.hashAlgorithm) {
		case 'sha256':
			stype = 'rsa-sha2-256';
			break;
		case 'sha512':
			stype = 'rsa-sha2-512';
			break;
		case 'sha1':
		case undefined:
			break;
		default:
			throw (new Error('SSH signature ' +
			    'format does not support hash ' +
			    'algorithm ' + this.hashAlgorithm));
		}
		if (format === 'ssh') {
			buf = new SSHBuffer({});
			buf.writeString(stype);
			buf.writePart(this.part.sig);
			return (buf.toBuffer());
		} else {
			return (this.part.sig.data);
		}
		break;

	case 'ed25519':
		if (format === 'ssh') {
			buf = new SSHBuffer({});
			buf.writeString(stype);
			buf.writePart(this.part.sig);
			return (buf.toBuffer());
		} else {
			return (this.part.sig.data);
		}
		break;

	case 'dsa':
	case 'ecdsa':
		var r, s;
		if (format === 'asn1') {
			var der = new asn1.BerWriter();
			der.startSequence();
			r = utils.mpNormalize(this.part.r.data);
			s = utils.mpNormalize(this.part.s.data);
			der.writeBuffer(r, asn1.Ber.Integer);
			der.writeBuffer(s, asn1.Ber.Integer);
			der.endSequence();
			return (der.buffer);
		} else if (format === 'ssh' && this.type === 'dsa') {
			buf = new SSHBuffer({});
			buf.writeString('ssh-dss');
			r = this.part.r.data;
			if (r.length > 20 && r[0] === 0x00)
				r = r.slice(1);
			s = this.part.s.data;
			if (s.length > 20 && s[0] === 0x00)
				s = s.slice(1);
			if ((this.hashAlgorithm &&
			    this.hashAlgorithm !== 'sha1') ||
			    r.length + s.length !== 40) {
				throw (new Error('OpenSSH only supports ' +
				    'DSA signatures with SHA1 hash'));
			}
			buf.writeBuffer(Buffer.concat([r, s]));
			return (buf.toBuffer());
		} else if (format === 'ssh' && this.type === 'ecdsa') {
			var inner = new SSHBuffer({});
			r = this.part.r.data;
			inner.writeBuffer(r);
			inner.writePart(this.part.s);

			buf = new SSHBuffer({});
			/* XXX: find a more proper way to do this? */
			var curve;
			if (r[0] === 0x00)
				r = r.slice(1);
			var sz = r.length * 8;
			if (sz === 256)
				curve = 'nistp256';
			else if (sz === 384)
				curve = 'nistp384';
			else if (sz === 528)
				curve = 'nistp521';
			buf.writeString('ecdsa-sha2-' + curve);
			buf.writeBuffer(inner.toBuffer());
			return (buf.toBuffer());
		}
		throw (new Error('Invalid signature format'));
	default:
		throw (new Error('Invalid signature data'));
	}
};

Signature.prototype.toString = function (format) {
	assert.optionalString(format, 'format');
	return (this.toBuffer(format).toString('base64'));
};

Signature.parse = function (data, type, format) {
	if (typeof (data) === 'string')
		data = Buffer.from(data, 'base64');
	assert.buffer(data, 'data');
	assert.string(format, 'format');
	assert.string(type, 'type');

	var opts = {};
	opts.type = type.toLowerCase();
	opts.parts = [];

	try {
		assert.ok(data.length > 0, 'signature must not be empty');
		switch (opts.type) {
		case 'rsa':
			return (parseOneNum(data, type, format, opts));
		case 'ed25519':
			return (parseOneNum(data, type, format, opts));

		case 'dsa':
		case 'ecdsa':
			if (format === 'asn1')
				return (parseDSAasn1(data, type, format, opts));
			else if (opts.type === 'dsa')
				return (parseDSA(data, type, format, opts));
			else
				return (parseECDSA(data, type, format, opts));

		default:
			throw (new InvalidAlgorithmError(type));
		}

	} catch (e) {
		if (e instanceof InvalidAlgorithmError)
			throw (e);
		throw (new SignatureParseError(type, format, e));
	}
};

function parseOneNum(data, type, format, opts) {
	if (format === 'ssh') {
		try {
			var buf = new SSHBuffer({buffer: data});
			var head = buf.readString();
		} catch (e) {
			/* fall through */
		}
		if (buf !== undefined) {
			var msg = 'SSH signature does not match expected ' +
			    'type (expected ' + type + ', got ' + head + ')';
			switch (head) {
			case 'ssh-rsa':
				assert.strictEqual(type, 'rsa', msg);
				opts.hashAlgo = 'sha1';
				break;
			case 'rsa-sha2-256':
				assert.strictEqual(type, 'rsa', msg);
				opts.hashAlgo = 'sha256';
				break;
			case 'rsa-sha2-512':
				assert.strictEqual(type, 'rsa', msg);
				opts.hashAlgo = 'sha512';
				break;
			case 'ssh-ed25519':
				assert.strictEqual(type, 'ed25519', msg);
				opts.hashAlgo = 'sha512';
				break;
			default:
				throw (new Error('Unknown SSH signature ' +
				    'type: ' + head));
			}
			var sig = buf.readPart();
			assert.ok(buf.atEnd(), 'extra trailing bytes');
			sig.name = 'sig';
			opts.parts.push(sig);
			return (new Signature(opts));
		}
	}
	opts.parts.push({name: 'sig', data: data});
	return (new Signature(opts));
}

function parseDSAasn1(data, type, format, opts) {
	var der = new asn1.BerReader(data);
	der.readSequence();
	var r = der.readString(asn1.Ber.Integer, true);
	var s = der.readString(asn1.Ber.Integer, true);

	opts.parts.push({name: 'r', data: utils.mpNormalize(r)});
	opts.parts.push({name: 's', data: utils.mpNormalize(s)});

	return (new Signature(opts));
}

function parseDSA(data, type, format, opts) {
	if (data.length != 40) {
		var buf = new SSHBuffer({buffer: data});
		var d = buf.readBuffer();
		if (d.toString('ascii') === 'ssh-dss')
			d = buf.readBuffer();
		assert.ok(buf.atEnd(), 'extra trailing bytes');
		assert.strictEqual(d.length, 40, 'invalid inner length');
		data = d;
	}
	opts.parts.push({name: 'r', data: data.slice(0, 20)});
	opts.parts.push({name: 's', data: data.slice(20, 40)});
	return (new Signature(opts));
}

function parseECDSA(data, type, format, opts) {
	var buf = new SSHBuffer({buffer: data});

	var r, s;
	var inner = buf.readBuffer();
	var stype = inner.toString('ascii');
	if (stype.slice(0, 6) === 'ecdsa-') {
		var parts = stype.split('-');
		assert.strictEqual(parts[0], 'ecdsa');
		assert.strictEqual(parts[1], 'sha2');
		opts.curve = parts[2];
		switch (opts.curve) {
		case 'nistp256':
			opts.hashAlgo = 'sha256';
			break;
		case 'nistp384':
			opts.hashAlgo = 'sha384';
			break;
		case 'nistp521':
			opts.hashAlgo = 'sha512';
			break;
		default:
			throw (new Error('Unsupported ECDSA curve: ' +
			    opts.curve));
		}
		inner = buf.readBuffer();
		assert.ok(buf.atEnd(), 'extra trailing bytes on outer');
		buf = new SSHBuffer({buffer: inner});
		r = buf.readPart();
	} else {
		r = {data: inner};
	}

	s = buf.readPart();
	assert.ok(buf.atEnd(), 'extra trailing bytes');

	r.name = 'r';
	s.name = 's';

	opts.parts.push(r);
	opts.parts.push(s);
	return (new Signature(opts));
}

Signature.isSignature = function (obj, ver) {
	return (utils.isCompatible(obj, Signature, ver));
};

/*
 * API versions for Signature:
 * [1,0] -- initial ver
 * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent
 *          hashAlgorithm property
 * [2,1] -- first tagged version
 */
Signature.prototype._sshpkApiVersion = [2, 1];

Signature._oldVersionDetect = function (obj) {
	assert.func(obj.toBuffer);
	if (obj.hasOwnProperty('hashAlgorithm'))
		return ([2, 0]);
	return ([1, 0]);
};
// Copyright 2015 Joyent, Inc.

module.exports = SSHBuffer;

var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;

function SSHBuffer(opts) {
	assert.object(opts, 'options');
	if (opts.buffer !== undefined)
		assert.buffer(opts.buffer, 'options.buffer');

	this._size = opts.buffer ? opts.buffer.length : 1024;
	this._buffer = opts.buffer || Buffer.alloc(this._size);
	this._offset = 0;
}

SSHBuffer.prototype.toBuffer = function () {
	return (this._buffer.slice(0, this._offset));
};

SSHBuffer.prototype.atEnd = function () {
	return (this._offset >= this._buffer.length);
};

SSHBuffer.prototype.remainder = function () {
	return (this._buffer.slice(this._offset));
};

SSHBuffer.prototype.skip = function (n) {
	this._offset += n;
};

SSHBuffer.prototype.expand = function () {
	this._size *= 2;
	var buf = Buffer.alloc(this._size);
	this._buffer.copy(buf, 0);
	this._buffer = buf;
};

SSHBuffer.prototype.readPart = function () {
	return ({data: this.readBuffer()});
};

SSHBuffer.prototype.readBuffer = function () {
	var len = this._buffer.readUInt32BE(this._offset);
	this._offset += 4;
	assert.ok(this._offset + len <= this._buffer.length,
	    'length out of bounds at +0x' + this._offset.toString(16) +
	    ' (data truncated?)');
	var buf = this._buffer.slice(this._offset, this._offset + len);
	this._offset += len;
	return (buf);
};

SSHBuffer.prototype.readString = function () {
	return (this.readBuffer().toString());
};

SSHBuffer.prototype.readCString = function () {
	var offset = this._offset;
	while (offset < this._buffer.length &&
	    this._buffer[offset] !== 0x00)
		offset++;
	assert.ok(offset < this._buffer.length, 'c string does not terminate');
	var str = this._buffer.slice(this._offset, offset).toString();
	this._offset = offset + 1;
	return (str);
};

SSHBuffer.prototype.readInt = function () {
	var v = this._buffer.readUInt32BE(this._offset);
	this._offset += 4;
	return (v);
};

SSHBuffer.prototype.readInt64 = function () {
	assert.ok(this._offset + 8 < this._buffer.length,
	    'buffer not long enough to read Int64');
	var v = this._buffer.slice(this._offset, this._offset + 8);
	this._offset += 8;
	return (v);
};

SSHBuffer.prototype.readChar = function () {
	var v = this._buffer[this._offset++];
	return (v);
};

SSHBuffer.prototype.writeBuffer = function (buf) {
	while (this._offset + 4 + buf.length > this._size)
		this.expand();
	this._buffer.writeUInt32BE(buf.length, this._offset);
	this._offset += 4;
	buf.copy(this._buffer, this._offset);
	this._offset += buf.length;
};

SSHBuffer.prototype.writeString = function (str) {
	this.writeBuffer(Buffer.from(str, 'utf8'));
};

SSHBuffer.prototype.writeCString = function (str) {
	while (this._offset + 1 + str.length > this._size)
		this.expand();
	this._buffer.write(str, this._offset);
	this._offset += str.length;
	this._buffer[this._offset++] = 0;
};

SSHBuffer.prototype.writeInt = function (v) {
	while (this._offset + 4 > this._size)
		this.expand();
	this._buffer.writeUInt32BE(v, this._offset);
	this._offset += 4;
};

SSHBuffer.prototype.writeInt64 = function (v) {
	assert.buffer(v, 'value');
	if (v.length > 8) {
		var lead = v.slice(0, v.length - 8);
		for (var i = 0; i < lead.length; ++i) {
			assert.strictEqual(lead[i], 0,
			    'must fit in 64 bits of precision');
		}
		v = v.slice(v.length - 8, v.length);
	}
	while (this._offset + 8 > this._size)
		this.expand();
	v.copy(this._buffer, this._offset);
	this._offset += 8;
};

SSHBuffer.prototype.writeChar = function (v) {
	while (this._offset + 1 > this._size)
		this.expand();
	this._buffer[this._offset++] = v;
};

SSHBuffer.prototype.writePart = function (p) {
	this.writeBuffer(p.data);
};

SSHBuffer.prototype.write = function (buf) {
	while (this._offset + buf.length > this._size)
		this.expand();
	buf.copy(this._buffer, this._offset);
	this._offset += buf.length;
};
// Copyright 2015 Joyent, Inc.

module.exports = {
	bufferSplit: bufferSplit,
	addRSAMissing: addRSAMissing,
	calculateDSAPublic: calculateDSAPublic,
	calculateED25519Public: calculateED25519Public,
	calculateX25519Public: calculateX25519Public,
	mpNormalize: mpNormalize,
	mpDenormalize: mpDenormalize,
	ecNormalize: ecNormalize,
	countZeros: countZeros,
	assertCompatible: assertCompatible,
	isCompatible: isCompatible,
	opensslKeyDeriv: opensslKeyDeriv,
	opensshCipherInfo: opensshCipherInfo,
	publicFromPrivateECDSA: publicFromPrivateECDSA,
	zeroPadToLength: zeroPadToLength,
	writeBitString: writeBitString,
	readBitString: readBitString,
	pbkdf2: pbkdf2
};

var assert = require('assert-plus');
var Buffer = require('safer-buffer').Buffer;
var PrivateKey = require('./private-key');
var Key = require('./key');
var crypto = require('crypto');
var algs = require('./algs');
var asn1 = require('asn1');

var ec = require('ecc-jsbn/lib/ec');
var jsbn = require('jsbn').BigInteger;
var nacl = require('tweetnacl');

var MAX_CLASS_DEPTH = 3;

function isCompatible(obj, klass, needVer) {
	if (obj === null || typeof (obj) !== 'object')
		return (false);
	if (needVer === undefined)
		needVer = klass.prototype._sshpkApiVersion;
	if (obj instanceof klass &&
	    klass.prototype._sshpkApiVersion[0] == needVer[0])
		return (true);
	var proto = Object.getPrototypeOf(obj);
	var depth = 0;
	while (proto.constructor.name !== klass.name) {
		proto = Object.getPrototypeOf(proto);
		if (!proto || ++depth > MAX_CLASS_DEPTH)
			return (false);
	}
	if (proto.constructor.name !== klass.name)
		return (false);
	var ver = proto._sshpkApiVersion;
	if (ver === undefined)
		ver = klass._oldVersionDetect(obj);
	if (ver[0] != needVer[0] || ver[1] < needVer[1])
		return (false);
	return (true);
}

function assertCompatible(obj, klass, needVer, name) {
	if (name === undefined)
		name = 'object';
	assert.ok(obj, name + ' must not be null');
	assert.object(obj, name + ' must be an object');
	if (needVer === undefined)
		needVer = klass.prototype._sshpkApiVersion;
	if (obj instanceof klass &&
	    klass.prototype._sshpkApiVersion[0] == needVer[0])
		return;
	var proto = Object.getPrototypeOf(obj);
	var depth = 0;
	while (proto.constructor.name !== klass.name) {
		proto = Object.getPrototypeOf(proto);
		assert.ok(proto && ++depth <= MAX_CLASS_DEPTH,
		    name + ' must be a ' + klass.name + ' instance');
	}
	assert.strictEqual(proto.constructor.name, klass.name,
	    name + ' must be a ' + klass.name + ' instance');
	var ver = proto._sshpkApiVersion;
	if (ver === undefined)
		ver = klass._oldVersionDetect(obj);
	assert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1],
	    name + ' must be compatible with ' + klass.name + ' klass ' +
	    'version ' + needVer[0] + '.' + needVer[1]);
}

var CIPHER_LEN = {
	'des-ede3-cbc': { key: 24, iv: 8 },
	'aes-128-cbc': { key: 16, iv: 16 },
	'aes-256-cbc': { key: 32, iv: 16 }
};
var PKCS5_SALT_LEN = 8;

function opensslKeyDeriv(cipher, salt, passphrase, count) {
	assert.buffer(salt, 'salt');
	assert.buffer(passphrase, 'passphrase');
	assert.number(count, 'iteration count');

	var clen = CIPHER_LEN[cipher];
	assert.object(clen, 'supported cipher');

	salt = salt.slice(0, PKCS5_SALT_LEN);

	var D, D_prev, bufs;
	var material = Buffer.alloc(0);
	while (material.length < clen.key + clen.iv) {
		bufs = [];
		if (D_prev)
			bufs.push(D_prev);
		bufs.push(passphrase);
		bufs.push(salt);
		D = Buffer.concat(bufs);
		for (var j = 0; j < count; ++j)
			D = crypto.createHash('md5').update(D).digest();
		material = Buffer.concat([material, D]);
		D_prev = D;
	}

	return ({
	    key: material.slice(0, clen.key),
	    iv: material.slice(clen.key, clen.key + clen.iv)
	});
}

/* See: RFC2898 */
function pbkdf2(hashAlg, salt, iterations, size, passphrase) {
	var hkey = Buffer.alloc(salt.length + 4);
	salt.copy(hkey);

	var gen = 0, ts = [];
	var i = 1;
	while (gen < size) {
		var t = T(i++);
		gen += t.length;
		ts.push(t);
	}
	return (Buffer.concat(ts).slice(0, size));

	function T(I) {
		hkey.writeUInt32BE(I, hkey.length - 4);

		var hmac = crypto.createHmac(hashAlg, passphrase);
		hmac.update(hkey);

		var Ti = hmac.digest();
		var Uc = Ti;
		var c = 1;
		while (c++ < iterations) {
			hmac = crypto.createHmac(hashAlg, passphrase);
			hmac.update(Uc);
			Uc = hmac.digest();
			for (var x = 0; x < Ti.length; ++x)
				Ti[x] ^= Uc[x];
		}
		return (Ti);
	}
}

/* Count leading zero bits on a buffer */
function countZeros(buf) {
	var o = 0, obit = 8;
	while (o < buf.length) {
		var mask = (1 << obit);
		if ((buf[o] & mask) === mask)
			break;
		obit--;
		if (obit < 0) {
			o++;
			obit = 8;
		}
	}
	return (o*8 + (8 - obit) - 1);
}

function bufferSplit(buf, chr) {
	assert.buffer(buf);
	assert.string(chr);

	var parts = [];
	var lastPart = 0;
	var matches = 0;
	for (var i = 0; i < buf.length; ++i) {
		if (buf[i] === chr.charCodeAt(matches))
			++matches;
		else if (buf[i] === chr.charCodeAt(0))
			matches = 1;
		else
			matches = 0;

		if (matches >= chr.length) {
			var newPart = i + 1;
			parts.push(buf.slice(lastPart, newPart - matches));
			lastPart = newPart;
			matches = 0;
		}
	}
	if (lastPart <= buf.length)
		parts.push(buf.slice(lastPart, buf.length));

	return (parts);
}

function ecNormalize(buf, addZero) {
	assert.buffer(buf);
	if (buf[0] === 0x00 && buf[1] === 0x04) {
		if (addZero)
			return (buf);
		return (buf.slice(1));
	} else if (buf[0] === 0x04) {
		if (!addZero)
			return (buf);
	} else {
		while (buf[0] === 0x00)
			buf = buf.slice(1);
		if (buf[0] === 0x02 || buf[0] === 0x03)
			throw (new Error('Compressed elliptic curve points ' +
			    'are not supported'));
		if (buf[0] !== 0x04)
			throw (new Error('Not a valid elliptic curve point'));
		if (!addZero)
			return (buf);
	}
	var b = Buffer.alloc(buf.length + 1);
	b[0] = 0x0;
	buf.copy(b, 1);
	return (b);
}

function readBitString(der, tag) {
	if (tag === undefined)
		tag = asn1.Ber.BitString;
	var buf = der.readString(tag, true);
	assert.strictEqual(buf[0], 0x00, 'bit strings with unused bits are ' +
	    'not supported (0x' + buf[0].toString(16) + ')');
	return (buf.slice(1));
}

function writeBitString(der, buf, tag) {
	if (tag === undefined)
		tag = asn1.Ber.BitString;
	var b = Buffer.alloc(buf.length + 1);
	b[0] = 0x00;
	buf.copy(b, 1);
	der.writeBuffer(b, tag);
}

function mpNormalize(buf) {
	assert.buffer(buf);
	while (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)
		buf = buf.slice(1);
	if ((buf[0] & 0x80) === 0x80) {
		var b = Buffer.alloc(buf.length + 1);
		b[0] = 0x00;
		buf.copy(b, 1);
		buf = b;
	}
	return (buf);
}

function mpDenormalize(buf) {
	assert.buffer(buf);
	while (buf.length > 1 && buf[0] === 0x00)
		buf = buf.slice(1);
	return (buf);
}

function zeroPadToLength(buf, len) {
	assert.buffer(buf);
	assert.number(len);
	while (buf.length > len) {
		assert.equal(buf[0], 0x00);
		buf = buf.slice(1);
	}
	while (buf.length < len) {
		var b = Buffer.alloc(buf.length + 1);
		b[0] = 0x00;
		buf.copy(b, 1);
		buf = b;
	}
	return (buf);
}

function bigintToMpBuf(bigint) {
	var buf = Buffer.from(bigint.toByteArray());
	buf = mpNormalize(buf);
	return (buf);
}

function calculateDSAPublic(g, p, x) {
	assert.buffer(g);
	assert.buffer(p);
	assert.buffer(x);
	g = new jsbn(g);
	p = new jsbn(p);
	x = new jsbn(x);
	var y = g.modPow(x, p);
	var ybuf = bigintToMpBuf(y);
	return (ybuf);
}

function calculateED25519Public(k) {
	assert.buffer(k);

	var kp = nacl.sign.keyPair.fromSeed(new Uint8Array(k));
	return (Buffer.from(kp.publicKey));
}

function calculateX25519Public(k) {
	assert.buffer(k);

	var kp = nacl.box.keyPair.fromSeed(new Uint8Array(k));
	return (Buffer.from(kp.publicKey));
}

function addRSAMissing(key) {
	assert.object(key);
	assertCompatible(key, PrivateKey, [1, 1]);

	var d = new jsbn(key.part.d.data);
	var buf;

	if (!key.part.dmodp) {
		var p = new jsbn(key.part.p.data);
		var dmodp = d.mod(p.subtract(1));

		buf = bigintToMpBuf(dmodp);
		key.part.dmodp = {name: 'dmodp', data: buf};
		key.parts.push(key.part.dmodp);
	}
	if (!key.part.dmodq) {
		var q = new jsbn(key.part.q.data);
		var dmodq = d.mod(q.subtract(1));

		buf = bigintToMpBuf(dmodq);
		key.part.dmodq = {name: 'dmodq', data: buf};
		key.parts.push(key.part.dmodq);
	}
}

function publicFromPrivateECDSA(curveName, priv) {
	assert.string(curveName, 'curveName');
	assert.buffer(priv);
	var params = algs.curves[curveName];
	var p = new jsbn(params.p);
	var a = new jsbn(params.a);
	var b = new jsbn(params.b);
	var curve = new ec.ECCurveFp(p, a, b);
	var G = curve.decodePointHex(params.G.toString('hex'));

	var d = new jsbn(mpNormalize(priv));
	var pub = G.multiply(d);
	pub = Buffer.from(curve.encodePointHex(pub), 'hex');

	var parts = [];
	parts.push({name: 'curve', data: Buffer.from(curveName)});
	parts.push({name: 'Q', data: pub});

	var key = new Key({type: 'ecdsa', curve: curve, parts: parts});
	return (key);
}

function opensshCipherInfo(cipher) {
	var inf = {};
	switch (cipher) {
	case '3des-cbc':
		inf.keySize = 24;
		inf.blockSize = 8;
		inf.opensslName = 'des-ede3-cbc';
		break;
	case 'blowfish-cbc':
		inf.keySize = 16;
		inf.blockSize = 8;
		inf.opensslName = 'bf-cbc';
		break;
	case 'aes128-cbc':
	case 'aes128-ctr':
	case 'aes128-gcm@openssh.com':
		inf.keySize = 16;
		inf.blockSize = 16;
		inf.opensslName = 'aes-128-' + cipher.slice(7, 10);
		break;
	case 'aes192-cbc':
	case 'aes192-ctr':
	case 'aes192-gcm@openssh.com':
		inf.keySize = 24;
		inf.blockSize = 16;
		inf.opensslName = 'aes-192-' + cipher.slice(7, 10);
		break;
	case 'aes256-cbc':
	case 'aes256-ctr':
	case 'aes256-gcm@openssh.com':
		inf.keySize = 32;
		inf.blockSize = 16;
		inf.opensslName = 'aes-256-' + cipher.slice(7, 10);
		break;
	default:
		throw (new Error(
		    'Unsupported openssl cipher "' + cipher + '"'));
	}
	return (inf);
}
Copyright Joyent, Inc. All rights reserved.
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
.TH sshpk\-conv 1 "Jan 2016" sshpk "sshpk Commands"
.SH NAME
.PP
sshpk\-conv \- convert between key formats
.SH SYNOPSYS
.PP
\fB\fCsshpk\-conv\fR \-t FORMAT [FILENAME] [OPTIONS...]
.PP
\fB\fCsshpk\-conv\fR \-i [FILENAME] [OPTIONS...]
.SH DESCRIPTION
.PP
Reads in a public or private key and converts it between different formats,
particularly formats used in the SSH protocol and the well\-known PEM PKCS#1/7
formats.
.PP
In the second form, with the \fB\fC\-i\fR option given, identifies a key and prints to 
stderr information about its nature, size and fingerprint.
.SH EXAMPLES
.PP
Assume the following SSH\-format public key in \fB\fCid_ecdsa.pub\fR:
.PP
.RS
.nf
ecdsa\-sha2\-nistp256 AAAAE2VjZHNhLXNoYTI...9M/4c4= user@host
.fi
.RE
.PP
Identify it with \fB\fC\-i\fR:
.PP
.RS
.nf
$ sshpk\-conv \-i id_ecdsa.pub
id_ecdsa: a 256 bit ECDSA public key
ECDSA curve: nistp256
Comment: user@host
Fingerprint:
  SHA256:vCNX7eUkdvqqW0m4PoxQAZRv+CM4P4fS8+CbliAvS4k
  81:ad:d5:57:e5:6f:7d:a2:93:79:56:af:d7:c0:38:51
.fi
.RE
.PP
Convert it to \fB\fCpkcs8\fR format, for use with e.g. OpenSSL:
.PP
.RS
.nf
$ sshpk\-conv \-t pkcs8 id_ecdsa
\-\-\-\-\-BEGIN PUBLIC KEY\-\-\-\-\-
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEAsA4R6N6AS3gzaPBeLjG2ObSgUsR
zOt+kWJoijLnw3ZMYUKmAx+lD0I5XUxdrPcs1vH5f3cn9TvRvO9L0z/hzg==
\-\-\-\-\-END PUBLIC KEY\-\-\-\-\-
.fi
.RE
.PP
Retrieve the public half of a private key:
.PP
.RS
.nf
$ openssl genrsa 2048 | sshpk\-conv \-t ssh \-c foo@bar
ssh\-rsa AAAAB3NzaC1yc2EAAA...koK7 foo@bar
.fi
.RE
.PP
Convert a private key to PKCS#1 (OpenSSL) format from a new\-style OpenSSH key
format (the \fB\fCssh\-keygen \-o\fR format):
.PP
.RS
.nf
$ ssh\-keygen \-o \-f foobar
\&...
$ sshpk\-conv \-p \-t pkcs1 foobar
\-\-\-\-\-BEGIN RSA PRIVATE KEY\-\-\-\-\-
MIIDpAIBAAKCAQEA6T/GYJndb1TRH3+NL....
\-\-\-\-\-END RSA PRIVATE KEY\-\-\-\-\-
.fi
.RE
.SH OPTIONS
.TP
\fB\fC\-i, \-\-identify\fR
Instead of converting the key, output identifying information about it to 
stderr, including its type, size and fingerprints.
.TP
\fB\fC\-p, \-\-private\fR
Treat the key as a private key instead of a public key (the default). If you
supply \fB\fCsshpk\-conv\fR with a private key and do not give this option, it will
extract only the public half of the key from it and work with that.
.TP
\fB\fC\-f PATH, \-\-file=PATH\fR
Input file to take the key from instead of stdin. If a filename is supplied
as a positional argument, it is equivalent to using this option.
.TP
\fB\fC\-o PATH, \-\-out=PATH\fR
Output file name to use instead of stdout.
.PP
\fB\fC\-T FORMAT, \-\-informat=FORMAT\fR
.TP
\fB\fC\-t FORMAT, \-\-outformat=FORMAT\fR
Selects the input and output formats to be used (see FORMATS, below).
.TP
\fB\fC\-c TEXT, \-\-comment=TEXT\fR
Sets the key comment for the output file, if supported.
.SH FORMATS
.PP
Currently supported formats:
.TP
\fB\fCpem, pkcs1\fR
The standard PEM format used by older OpenSSH and most TLS libraries such as
OpenSSL. The classic \fB\fCid_rsa\fR file is usually in this format. It is an ASN.1
encoded structure, base64\-encoded and placed between PEM headers.
.TP
\fB\fCssh\fR
The SSH public key text format (the format of an \fB\fCid_rsa.pub\fR file). A single
line, containing 3 space separated parts: the key type, key body and optional
key comment.
.TP
\fB\fCpkcs8\fR
A newer PEM format, usually used only for public keys by TLS libraries such
as OpenSSL. The ASN.1 structure is more generic than that of \fB\fCpkcs1\fR\&.
.TP
\fB\fCopenssh\fR
The new \fB\fCssh\-keygen \-o\fR format from OpenSSH. This can be mistaken for a PEM
encoding but is actually an OpenSSH internal format.
.TP
\fB\fCrfc4253\fR
The internal binary format of keys when sent over the wire in the SSH
protocol. This is also the format that the \fB\fCssh\-agent\fR uses in its protocol.
.SH SEE ALSO
.PP
.BR ssh-keygen (1), 
.BR openssl (1)
.SH BUGS
.PP
Encrypted (password\-protected) keys are not supported.
.PP
Report bugs at Github
\[la]https://github.com/arekinath/node-sshpk/issues\[ra]
.TH sshpk\-sign 1 "Jan 2016" sshpk "sshpk Commands"
.SH NAME
.PP
sshpk\-sign \- sign data using an SSH key
.SH SYNOPSYS
.PP
\fB\fCsshpk\-sign\fR \-i KEYPATH [OPTION...]
.SH DESCRIPTION
.PP
Takes in arbitrary bytes, and signs them using an SSH private key. The key can
be of any type or format supported by the \fB\fCsshpk\fR library, including the
standard OpenSSH formats, as well as PEM PKCS#1 and PKCS#8.
.PP
The signature is printed out in Base64 encoding, unless the \fB\fC\-\-binary\fR or \fB\fC\-b\fR
option is given.
.SH EXAMPLES
.PP
Signing with default settings:
.PP
.RS
.nf
$ printf 'foo' | sshpk\-sign \-i ~/.ssh/id_ecdsa
MEUCIAMdLS/vXrrtWFepwe...
.fi
.RE
.PP
Signing in SSH (RFC 4253) format (rather than the default ASN.1):
.PP
.RS
.nf
$ printf 'foo' | sshpk\-sign \-i ~/.ssh/id_ecdsa \-t ssh
AAAAFGVjZHNhLXNoYTIt...
.fi
.RE
.PP
Saving the binary signature to a file:
.PP
.RS
.nf
$ printf 'foo' | sshpk\-sign \-i ~/.ssh/id_ecdsa \\
                            \-o signature.bin \-b
$ cat signature.bin | base64
MEUCIAMdLS/vXrrtWFepwe...
.fi
.RE
.SH OPTIONS
.TP
\fB\fC\-v, \-\-verbose\fR
Print extra information about the key and signature to stderr when signing.
.TP
\fB\fC\-b, \-\-binary\fR
Don't base64\-encode the signature before outputting it.
.TP
\fB\fC\-i KEY, \-\-identity=KEY\fR
Select the key to be used for signing. \fB\fCKEY\fR must be a relative or absolute
filesystem path to the key file. Any format supported by the \fB\fCsshpk\fR library
is supported, including OpenSSH formats and standard PEM PKCS.
.TP
\fB\fC\-f PATH, \-\-file=PATH\fR
Input file to sign instead of stdin.
.TP
\fB\fC\-o PATH, \-\-out=PATH\fR
Output file to save signature in instead of stdout.
.TP
\fB\fC\-H HASH, \-\-hash=HASH\fR
Set the hash algorithm to be used for signing. This should be one of \fB\fCsha1\fR,
\fB\fCsha256\fR or \fB\fCsha512\fR\&. Some key types may place restrictions on which hash
algorithms may be used (e.g. ED25519 keys can only use SHA\-512).
.TP
\fB\fC\-t FORMAT, \-\-format=FORMAT\fR
Choose the signature format to use, from \fB\fCasn1\fR, \fB\fCssh\fR or \fB\fCraw\fR (only for
ED25519 signatures). The \fB\fCasn1\fR format is the default, as it is the format
used with TLS and typically the standard in most non\-SSH libraries (e.g.
OpenSSL). The \fB\fCssh\fR format is used in the SSH protocol and by the ssh\-agent.
.SH SEE ALSO
.PP
.BR sshpk-verify (1)
.SH BUGS
.PP
Report bugs at Github
\[la]https://github.com/arekinath/node-sshpk/issues\[ra]
.TH sshpk\-verify 1 "Jan 2016" sshpk "sshpk Commands"
.SH NAME
.PP
sshpk\-verify \- verify a signature on data using an SSH key
.SH SYNOPSYS
.PP
\fB\fCsshpk\-verify\fR \-i KEYPATH \-s SIGNATURE [OPTION...]
.SH DESCRIPTION
.PP
Takes in arbitrary bytes and a Base64\-encoded signature, and verifies that the
signature was produced by the private half of the given SSH public key.
.SH EXAMPLES
.PP
.RS
.nf
$ printf 'foo' | sshpk\-verify \-i ~/.ssh/id_ecdsa \-s MEUCIQCYp...
OK
$ printf 'foo' | sshpk\-verify \-i ~/.ssh/id_ecdsa \-s GARBAGE...
NOT OK
.fi
.RE
.SH EXIT STATUS
.TP
\fB\fC0\fR
Signature validates and matches the key.
.TP
\fB\fC1\fR
Signature is parseable and the correct length but does not match the key or
otherwise is invalid.
.TP
\fB\fC2\fR
The signature or key could not be parsed.
.TP
\fB\fC3\fR
Invalid commandline options were supplied.
.SH OPTIONS
.TP
\fB\fC\-v, \-\-verbose\fR
Print extra information about the key and signature to stderr when verifying.
.TP
\fB\fC\-i KEY, \-\-identity=KEY\fR
Select the key to be used for verification. \fB\fCKEY\fR must be a relative or
absolute filesystem path to the key file. Any format supported by the \fB\fCsshpk\fR
library is supported, including OpenSSH formats and standard PEM PKCS.
.TP
\fB\fC\-s BASE64, \-\-signature=BASE64\fR
Supplies the base64\-encoded signature to be verified.
.TP
\fB\fC\-f PATH, \-\-file=PATH\fR
Input file to verify instead of stdin.
.TP
\fB\fC\-H HASH, \-\-hash=HASH\fR
Set the hash algorithm to be used for signing. This should be one of \fB\fCsha1\fR,
\fB\fCsha256\fR or \fB\fCsha512\fR\&. Some key types may place restrictions on which hash
algorithms may be used (e.g. ED25519 keys can only use SHA\-512).
.TP
\fB\fC\-t FORMAT, \-\-format=FORMAT\fR
Choose the signature format to use, from \fB\fCasn1\fR, \fB\fCssh\fR or \fB\fCraw\fR (only for
ED25519 signatures). The \fB\fCasn1\fR format is the default, as it is the format
used with TLS and typically the standard in most non\-SSH libraries (e.g.
OpenSSL). The \fB\fCssh\fR format is used in the SSH protocol and by the ssh\-agent.
.SH SEE ALSO
.PP
.BR sshpk-sign (1)
.SH BUGS
.PP
Report bugs at Github
\[la]https://github.com/arekinath/node-sshpk/issues\[ra]
{
  "name": "sshpk",
  "version": "1.18.0",
  "description": "A library for finding and using SSH public keys",
  "main": "lib/index.js",
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/joyent/node-sshpk.git"
  },
  "author": "Joyent, Inc",
  "contributors": [
    {
      "name": "Dave Eddy",
      "email": "dave@daveeddy.com"
    },
    {
      "name": "Mark Cavage",
      "email": "mcavage@gmail.com"
    },
    {
      "name": "Alex Wilson",
      "email": "alex@cooperi.net"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/arekinath/node-sshpk/issues"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "directories": {
    "bin": "./bin",
    "lib": "./lib",
    "man": "./man/man1"
  },
  "homepage": "https://github.com/arekinath/node-sshpk#readme",
  "dependencies": {
    "asn1": "~0.2.3",
    "assert-plus": "^1.0.0",
    "dashdash": "^1.12.0",
    "getpass": "^0.1.1",
    "safer-buffer": "^2.0.2",
    "jsbn": "~0.1.0",
    "tweetnacl": "~0.14.0",
    "ecc-jsbn": "~0.1.1",
    "bcrypt-pbkdf": "^1.0.0"
  },
  "optionalDependencies": {},
  "devDependencies": {
    "tape": "^3.5.0",
    "benchmark": "^1.0.0",
    "sinon": "^1.17.2",
    "temp": "^0.8.2"
  }
}
sshpk
=========

Parse, convert, fingerprint and use SSH keys (both public and private) in pure
node -- no `ssh-keygen` or other external dependencies.

Supports RSA, DSA, ECDSA (nistp-\*) and ED25519 key types, in PEM (PKCS#1, 
PKCS#8) and OpenSSH formats.

This library has been extracted from
[`node-http-signature`](https://github.com/joyent/node-http-signature)
(work by [Mark Cavage](https://github.com/mcavage) and
[Dave Eddy](https://github.com/bahamas10)) and
[`node-ssh-fingerprint`](https://github.com/bahamas10/node-ssh-fingerprint)
(work by Dave Eddy), with additions (including ECDSA support) by
[Alex Wilson](https://github.com/arekinath).

Install
-------

```
npm install sshpk
```

Examples
--------

```js
var sshpk = require('sshpk');

var fs = require('fs');

/* Read in an OpenSSH-format public key */
var keyPub = fs.readFileSync('id_rsa.pub');
var key = sshpk.parseKey(keyPub, 'ssh');

/* Get metadata about the key */
console.log('type => %s', key.type);
console.log('size => %d bits', key.size);
console.log('comment => %s', key.comment);

/* Compute key fingerprints, in new OpenSSH (>6.7) format, and old MD5 */
console.log('fingerprint => %s', key.fingerprint().toString());
console.log('old-style fingerprint => %s', key.fingerprint('md5').toString());
```

Example output:

```
type => rsa
size => 2048 bits
comment => foo@foo.com
fingerprint => SHA256:PYC9kPVC6J873CSIbfp0LwYeczP/W4ffObNCuDJ1u5w
old-style fingerprint => a0:c8:ad:6c:32:9a:32:fa:59:cc:a9:8c:0a:0d:6e:bd
```

More examples: converting between formats:

```js
/* Read in a PEM public key */
var keyPem = fs.readFileSync('id_rsa.pem');
var key = sshpk.parseKey(keyPem, 'pem');

/* Convert to PEM PKCS#8 public key format */
var pemBuf = key.toBuffer('pkcs8');

/* Convert to SSH public key format (and return as a string) */
var sshKey = key.toString('ssh');
```

Signing and verifying:

```js
/* Read in an OpenSSH/PEM *private* key */
var keyPriv = fs.readFileSync('id_ecdsa');
var key = sshpk.parsePrivateKey(keyPriv, 'pem');

var data = 'some data';

/* Sign some data with the key */
var s = key.createSign('sha1');
s.update(data);
var signature = s.sign();

/* Now load the public key (could also use just key.toPublic()) */
var keyPub = fs.readFileSync('id_ecdsa.pub');
key = sshpk.parseKey(keyPub, 'ssh');

/* Make a crypto.Verifier with this key */
var v = key.createVerify('sha1');
v.update(data);
var valid = v.verify(signature);
/* => true! */
```

Matching fingerprints with keys:

```js
var fp = sshpk.parseFingerprint('SHA256:PYC9kPVC6J873CSIbfp0LwYeczP/W4ffObNCuDJ1u5w');

var keys = [sshpk.parseKey(...), sshpk.parseKey(...), ...];

keys.forEach(function (key) {
	if (fp.matches(key))
		console.log('found it!');
});
```

Usage
-----

## Public keys

### `parseKey(data[, format = 'auto'[, options]])`

Parses a key from a given data format and returns a new `Key` object.

Parameters

- `data` -- Either a Buffer or String, containing the key
- `format` -- String name of format to use, valid options are:
  - `auto`: choose automatically from all below
  - `pem`: supports both PKCS#1 and PKCS#8
  - `ssh`: standard OpenSSH format,
  - `pkcs1`, `pkcs8`: variants of `pem`
  - `rfc4253`: raw OpenSSH wire format
  - `openssh`: new post-OpenSSH 6.5 internal format, produced by 
               `ssh-keygen -o`
  - `dnssec`: `.key` file format output by `dnssec-keygen` etc
  - `putty`: the PuTTY `.ppk` file format (supports truncated variant without
             all the lines from `Private-Lines:` onwards)
- `options` -- Optional Object, extra options, with keys:
  - `filename` -- Optional String, name for the key being parsed 
                  (eg. the filename that was opened). Used to generate
                  Error messages
  - `passphrase` -- Optional String, encryption passphrase used to decrypt an
                    encrypted PEM file

### `Key.isKey(obj)`

Returns `true` if the given object is a valid `Key` object created by a version
of `sshpk` compatible with this one.

Parameters

- `obj` -- Object to identify

### `Key#type`

String, the type of key. Valid options are `rsa`, `dsa`, `ecdsa`.

### `Key#size`

Integer, "size" of the key in bits. For RSA/DSA this is the size of the modulus;
for ECDSA this is the bit size of the curve in use.

### `Key#comment`

Optional string, a key comment used by some formats (eg the `ssh` format).

### `Key#curve`

Only present if `this.type === 'ecdsa'`, string containing the name of the
named curve used with this key. Possible values include `nistp256`, `nistp384`
and `nistp521`.

### `Key#toBuffer([format = 'ssh'])`

Convert the key into a given data format and return the serialized key as
a Buffer.

Parameters

- `format` -- String name of format to use, for valid options see `parseKey()`

### `Key#toString([format = 'ssh])`

Same as `this.toBuffer(format).toString()`.

### `Key#fingerprint([algorithm = 'sha256'[, hashType = 'ssh']])`

Creates a new `Fingerprint` object representing this Key's fingerprint.

Parameters

- `algorithm` -- String name of hash algorithm to use, valid options are `md5`,
                 `sha1`, `sha256`, `sha384`, `sha512`
- `hashType` -- String name of fingerprint hash type to use, valid options are
                `ssh` (the type of fingerprint used by OpenSSH, e.g. in
                `ssh-keygen`), `spki` (used by HPKP, some OpenSSL applications)

### `Key#createVerify([hashAlgorithm])`

Creates a `crypto.Verifier` specialized to use this Key (and the correct public
key algorithm to match it). The returned Verifier has the same API as a regular
one, except that the `verify()` function takes only the target signature as an
argument.

Parameters

- `hashAlgorithm` -- optional String name of hash algorithm to use, any
                     supported by OpenSSL are valid, usually including
                     `sha1`, `sha256`.

`v.verify(signature[, format])` Parameters

- `signature` -- either a Signature object, or a Buffer or String
- `format` -- optional String, name of format to interpret given String with.
              Not valid if `signature` is a Signature or Buffer.

### `Key#createDiffieHellman()`
### `Key#createDH()`

Creates a Diffie-Hellman key exchange object initialized with this key and all
necessary parameters. This has the same API as a `crypto.DiffieHellman`
instance, except that functions take `Key` and `PrivateKey` objects as
arguments, and return them where indicated for.

This is only valid for keys belonging to a cryptosystem that supports DHE
or a close analogue (i.e. `dsa`, `ecdsa` and `curve25519` keys). An attempt
to call this function on other keys will yield an `Error`.

## Private keys

### `parsePrivateKey(data[, format = 'auto'[, options]])`

Parses a private key from a given data format and returns a new
`PrivateKey` object.

Parameters

- `data` -- Either a Buffer or String, containing the key
- `format` -- String name of format to use, valid options are:
  - `auto`: choose automatically from all below
  - `pem`: supports both PKCS#1 and PKCS#8
  - `ssh`, `openssh`: new post-OpenSSH 6.5 internal format, produced by
                      `ssh-keygen -o`
  - `pkcs1`, `pkcs8`: variants of `pem`
  - `rfc4253`: raw OpenSSH wire format
  - `dnssec`: `.private` format output by `dnssec-keygen` etc.
- `options` -- Optional Object, extra options, with keys:
  - `filename` -- Optional String, name for the key being parsed
                  (eg. the filename that was opened). Used to generate
                  Error messages
  - `passphrase` -- Optional String, encryption passphrase used to decrypt an
                    encrypted PEM file

### `generatePrivateKey(type[, options])`

Generates a new private key of a certain key type, from random data.

Parameters

- `type` -- String, type of key to generate. Currently supported are `'ecdsa'`
            and `'ed25519'`
- `options` -- optional Object, with keys:
  - `curve` -- optional String, for `'ecdsa'` keys, specifies the curve to use.
               If ECDSA is specified and this option is not given, defaults to
               using `'nistp256'`.

### `PrivateKey.isPrivateKey(obj)`

Returns `true` if the given object is a valid `PrivateKey` object created by a
version of `sshpk` compatible with this one.

Parameters

- `obj` -- Object to identify

### `PrivateKey#type`

String, the type of key. Valid options are `rsa`, `dsa`, `ecdsa`.

### `PrivateKey#size`

Integer, "size" of the key in bits. For RSA/DSA this is the size of the modulus;
for ECDSA this is the bit size of the curve in use.

### `PrivateKey#curve`

Only present if `this.type === 'ecdsa'`, string containing the name of the
named curve used with this key. Possible values include `nistp256`, `nistp384`
and `nistp521`.

### `PrivateKey#toBuffer([format = 'pkcs1'])`

Convert the key into a given data format and return the serialized key as
a Buffer.

Parameters

- `format` -- String name of format to use, valid options are listed under 
              `parsePrivateKey`. Note that ED25519 keys default to `openssh`
              format instead (as they have no `pkcs1` representation).

### `PrivateKey#toString([format = 'pkcs1'])`

Same as `this.toBuffer(format).toString()`.

### `PrivateKey#toPublic()`

Extract just the public part of this private key, and return it as a `Key`
object.

### `PrivateKey#fingerprint([algorithm = 'sha256'])`

Same as `this.toPublic().fingerprint()`.

### `PrivateKey#createVerify([hashAlgorithm])`

Same as `this.toPublic().createVerify()`.

### `PrivateKey#createSign([hashAlgorithm])`

Creates a `crypto.Sign` specialized to use this PrivateKey (and the correct
key algorithm to match it). The returned Signer has the same API as a regular
one, except that the `sign()` function takes no arguments, and returns a
`Signature` object.

Parameters

- `hashAlgorithm` -- optional String name of hash algorithm to use, any
                     supported by OpenSSL are valid, usually including
                     `sha1`, `sha256`.

`v.sign()` Parameters

- none

### `PrivateKey#derive(newType)`

Derives a related key of type `newType` from this key. Currently this is
only supported to change between `ed25519` and `curve25519` keys which are
stored with the same private key (but usually distinct public keys in order
to avoid degenerate keys that lead to a weak Diffie-Hellman exchange).

Parameters

- `newType` -- String, type of key to derive, either `ed25519` or `curve25519`

## Fingerprints

### `parseFingerprint(fingerprint[, options])`

Pre-parses a fingerprint, creating a `Fingerprint` object that can be used to
quickly locate a key by using the `Fingerprint#matches` function.

Parameters

- `fingerprint` -- String, the fingerprint value, in any supported format
- `options` -- Optional Object, with properties:
  - `algorithms` -- Array of strings, names of hash algorithms to limit
                support to. If `fingerprint` uses a hash algorithm not on
                this list, throws `InvalidAlgorithmError`.
  - `hashType` -- String, the type of hash the fingerprint uses, either `ssh`
                  or `spki` (normally auto-detected based on the format, but
                  can be overridden)
  - `type` -- String, the entity this fingerprint identifies, either `key` or
              `certificate`

### `Fingerprint.isFingerprint(obj)`

Returns `true` if the given object is a valid `Fingerprint` object created by a
version of `sshpk` compatible with this one.

Parameters

- `obj` -- Object to identify

### `Fingerprint#toString([format])`

Returns a fingerprint as a string, in the given format.

Parameters

- `format` -- Optional String, format to use, valid options are `hex` and
              `base64`. If this `Fingerprint` uses the `md5` algorithm, the
              default format is `hex`. Otherwise, the default is `base64`.

### `Fingerprint#matches(keyOrCertificate)`

Verifies whether or not this `Fingerprint` matches a given `Key` or
`Certificate`. This function uses double-hashing to avoid leaking timing
information. Returns a boolean.

Note that a `Key`-type Fingerprint will always return `false` if asked to match
a `Certificate` and vice versa.

Parameters

- `keyOrCertificate` -- a `Key` object or `Certificate` object, the entity to
                        match this fingerprint against

## Signatures

### `parseSignature(signature, algorithm, format)`

Parses a signature in a given format, creating a `Signature` object. Useful
for converting between the SSH and ASN.1 (PKCS/OpenSSL) signature formats, and
also returned as output from `PrivateKey#createSign().sign()`.

A Signature object can also be passed to a verifier produced by
`Key#createVerify()` and it will automatically be converted internally into the
correct format for verification.

Parameters

- `signature` -- a Buffer (binary) or String (base64), data of the actual
                 signature in the given format
- `algorithm` -- a String, name of the algorithm to be used, possible values
                 are `rsa`, `dsa`, `ecdsa`
- `format` -- a String, either `asn1` or `ssh`

### `Signature.isSignature(obj)`

Returns `true` if the given object is a valid `Signature` object created by a
version of `sshpk` compatible with this one.

Parameters

- `obj` -- Object to identify

### `Signature#toBuffer([format = 'asn1'])`

Converts a Signature to the given format and returns it as a Buffer.

Parameters

- `format` -- a String, either `asn1` or `ssh`

### `Signature#toString([format = 'asn1'])`

Same as `this.toBuffer(format).toString('base64')`.

## Certificates

`sshpk` includes basic support for parsing certificates in X.509 (PEM) format
and the OpenSSH certificate format. This feature is intended to be used mainly
to access basic metadata about certificates, extract public keys from them, and
also to generate simple self-signed certificates from an existing key.

Notably, there is no implementation of CA chain-of-trust verification, and only
very minimal support for key usage restrictions. Please do the security world
a favour, and DO NOT use this code for certificate verification in the
traditional X.509 CA chain style.

### `parseCertificate(data, format)`

Parameters

 - `data` -- a Buffer or String
 - `format` -- a String, format to use, one of `'openssh'`, `'pem'` (X.509 in a
               PEM wrapper), or `'x509'` (raw DER encoded)

### `createSelfSignedCertificate(subject, privateKey[, options])`

Parameters

 - `subject` -- an Identity, the subject of the certificate
 - `privateKey` -- a PrivateKey, the key of the subject: will be used both to be
                   placed in the certificate and also to sign it (since this is
                   a self-signed certificate)
 - `options` -- optional Object, with keys:
   - `lifetime` -- optional Number, lifetime of the certificate from now in
                   seconds
   - `validFrom`, `validUntil` -- optional Dates, beginning and end of
                                  certificate validity period. If given
                                  `lifetime` will be ignored
   - `serial` -- optional Buffer, the serial number of the certificate
   - `purposes` -- optional Array of String, X.509 key usage restrictions

### `createCertificate(subject, key, issuer, issuerKey[, options])`

Parameters

 - `subject` -- an Identity, the subject of the certificate
 - `key` -- a Key, the public key of the subject
 - `issuer` -- an Identity, the issuer of the certificate who will sign it
 - `issuerKey` -- a PrivateKey, the issuer's private key for signing
 - `options` -- optional Object, with keys:
   - `lifetime` -- optional Number, lifetime of the certificate from now in
                   seconds
   - `validFrom`, `validUntil` -- optional Dates, beginning and end of
                                  certificate validity period. If given
                                  `lifetime` will be ignored
   - `serial` -- optional Buffer, the serial number of the certificate
   - `purposes` -- optional Array of String, X.509 key usage restrictions

### `Certificate#subjects`

Array of `Identity` instances describing the subject of this certificate.

### `Certificate#issuer`

The `Identity` of the Certificate's issuer (signer).

### `Certificate#subjectKey`

The public key of the subject of the certificate, as a `Key` instance.

### `Certificate#issuerKey`

The public key of the signing issuer of this certificate, as a `Key` instance.
May be `undefined` if the issuer's key is unknown (e.g. on an X509 certificate).

### `Certificate#serial`

The serial number of the certificate. As this is normally a 64-bit or wider
integer, it is returned as a Buffer.

### `Certificate#purposes`

Array of Strings indicating the X.509 key usage purposes that this certificate
is valid for. The possible strings at the moment are:

 * `'signature'` -- key can be used for digital signatures
 * `'identity'` -- key can be used to attest about the identity of the signer
                   (X.509 calls this `nonRepudiation`)
 * `'codeSigning'` -- key can be used to sign executable code
 * `'keyEncryption'` -- key can be used to encrypt other keys
 * `'encryption'` -- key can be used to encrypt data (only applies for RSA)
 * `'keyAgreement'` -- key can be used for key exchange protocols such as
                       Diffie-Hellman
 * `'ca'` -- key can be used to sign other certificates (is a Certificate
             Authority)
 * `'crl'` -- key can be used to sign Certificate Revocation Lists (CRLs)

### `Certificate#getExtension(nameOrOid)`

Retrieves information about a certificate extension, if present, or returns
`undefined` if not. The string argument `nameOrOid` should be either the OID
(for X509 extensions) or the name (for OpenSSH extensions) of the extension
to retrieve.

The object returned will have the following properties:

 * `format` -- String, set to either `'x509'` or `'openssh'`
 * `name` or `oid` -- String, only one set based on value of `format`
 * `data` -- Buffer, the raw data inside the extension

### `Certificate#getExtensions()`

Returns an Array of all present certificate extensions, in the same manner and
format as `getExtension()`.

### `Certificate#isExpired([when])`

Tests whether the Certificate is currently expired (i.e. the `validFrom` and
`validUntil` dates specify a range of time that does not include the current
time).

Parameters

 - `when` -- optional Date, if specified, tests whether the Certificate was or
             will be expired at the specified time instead of now

Returns a Boolean.

### `Certificate#isSignedByKey(key)`

Tests whether the Certificate was validly signed by the given (public) Key.

Parameters

 - `key` -- a Key instance

Returns a Boolean.

### `Certificate#isSignedBy(certificate)`

Tests whether this Certificate was validly signed by the subject of the given
certificate. Also tests that the issuer Identity of this Certificate and the
subject Identity of the other Certificate are equivalent.

Parameters

 - `certificate` -- another Certificate instance

Returns a Boolean.

### `Certificate#fingerprint([hashAlgo])`

Returns the X509-style fingerprint of the entire certificate (as a Fingerprint
instance). This matches what a web-browser or similar would display as the
certificate fingerprint and should not be confused with the fingerprint of the
subject's public key.

Parameters

 - `hashAlgo` -- an optional String, any hash function name

### `Certificate#toBuffer([format])`

Serializes the Certificate to a Buffer and returns it.

Parameters

 - `format` -- an optional String, output format, one of `'openssh'`, `'pem'` or
               `'x509'`. Defaults to `'x509'`.

Returns a Buffer.

### `Certificate#toString([format])`

 - `format` -- an optional String, output format, one of `'openssh'`, `'pem'` or
               `'x509'`. Defaults to `'pem'`.

Returns a String.

## Certificate identities

### `identityForHost(hostname)`

Constructs a host-type Identity for a given hostname.

Parameters

 - `hostname` -- the fully qualified DNS name of the host

Returns an Identity instance.

### `identityForUser(uid)`

Constructs a user-type Identity for a given UID.

Parameters

 - `uid` -- a String, user identifier (login name)

Returns an Identity instance.

### `identityForEmail(email)`

Constructs an email-type Identity for a given email address.

Parameters

 - `email` -- a String, email address

Returns an Identity instance.

### `identityFromDN(dn)`

Parses an LDAP-style DN string (e.g. `'CN=foo, C=US'`) and turns it into an
Identity instance.

Parameters

 - `dn` -- a String

Returns an Identity instance.

### `identityFromArray(arr)`

Constructs an Identity from an array of DN components (see `Identity#toArray()`
for the format).

Parameters

 - `arr` -- an Array of Objects, DN components with `name` and `value`

Returns an Identity instance.


Supported attributes in DNs:

| Attribute name | OID |
| -------------- | --- |
| `cn` | `2.5.4.3` |
| `o` | `2.5.4.10` |
| `ou` | `2.5.4.11` |
| `l` | `2.5.4.7` |
| `s` | `2.5.4.8` |
| `c` | `2.5.4.6` |
| `sn` | `2.5.4.4` |
| `postalCode` | `2.5.4.17` |
| `serialNumber` | `2.5.4.5` |
| `street` | `2.5.4.9` |
| `x500UniqueIdentifier` | `2.5.4.45` |
| `role` | `2.5.4.72` |
| `telephoneNumber` | `2.5.4.20` |
| `description` | `2.5.4.13` |
| `dc` | `0.9.2342.19200300.100.1.25` |
| `uid` | `0.9.2342.19200300.100.1.1` |
| `mail` | `0.9.2342.19200300.100.1.3` |
| `title` | `2.5.4.12` |
| `gn` | `2.5.4.42` |
| `initials` | `2.5.4.43` |
| `pseudonym` | `2.5.4.65` |

### `Identity#toString()`

Returns the identity as an LDAP-style DN string.
e.g. `'CN=foo, O=bar corp, C=us'`

### `Identity#type`

The type of identity. One of `'host'`, `'user'`, `'email'` or `'unknown'`

### `Identity#hostname`
### `Identity#uid`
### `Identity#email`

Set when `type` is `'host'`, `'user'`, or `'email'`, respectively. Strings.

### `Identity#cn`

The value of the first `CN=` in the DN, if any. It's probably better to use
the `#get()` method instead of this property.

### `Identity#get(name[, asArray])`

Returns the value of a named attribute in the Identity DN. If there is no
attribute of the given name, returns `undefined`. If multiple components
of the DN contain an attribute of this name, an exception is thrown unless
the `asArray` argument is given as `true` -- then they will be returned as
an Array in the same order they appear in the DN.

Parameters

 - `name` -- a String
 - `asArray` -- an optional Boolean

### `Identity#toArray()`

Returns the Identity as an Array of DN component objects. This looks like:

```js
[ {
  "name": "cn",
  "value": "Joe Bloggs"
},
{
  "name": "o",
  "value": "Organisation Ltd"
} ]
```

Each object has a `name` and a `value` property. The returned objects may be
safely modified.

Errors
------

### `InvalidAlgorithmError`

The specified algorithm is not valid, either because it is not supported, or
because it was not included on a list of allowed algorithms.

Thrown by `Fingerprint.parse`, `Key#fingerprint`.

Properties

- `algorithm` -- the algorithm that could not be validated

### `FingerprintFormatError`

The fingerprint string given could not be parsed as a supported fingerprint
format, or the specified fingerprint format is invalid.

Thrown by `Fingerprint.parse`, `Fingerprint#toString`.

Properties

- `fingerprint` -- if caused by a fingerprint, the string value given
- `format` -- if caused by an invalid format specification, the string value given

### `KeyParseError`

The key data given could not be parsed as a valid key.

Properties

- `keyName` -- `filename` that was given to `parseKey`
- `format` -- the `format` that was trying to parse the key (see `parseKey`)
- `innerErr` -- the inner Error thrown by the format parser

### `KeyEncryptedError`

The key is encrypted with a symmetric key (ie, it is password protected). The
parsing operation would succeed if it was given the `passphrase` option.

Properties

- `keyName` -- `filename` that was given to `parseKey`
- `format` -- the `format` that was trying to parse the key (currently can only
              be `"pem"`)

### `CertificateParseError`

The certificate data given could not be parsed as a valid certificate.

Properties

- `certName` -- `filename` that was given to `parseCertificate`
- `format` -- the `format` that was trying to parse the key
              (see `parseCertificate`)
- `innerErr` -- the inner Error thrown by the format parser

Friends of sshpk
----------------

 * [`sshpk-agent`](https://github.com/arekinath/node-sshpk-agent) is a library
   for speaking the `ssh-agent` protocol from node.js, which uses `sshpk`
# Changelog

All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.

### [8.3.2](https://github.com/uuidjs/uuid/compare/v8.3.1...v8.3.2) (2020-12-08)

### Bug Fixes

- lazy load getRandomValues ([#537](https://github.com/uuidjs/uuid/issues/537)) ([16c8f6d](https://github.com/uuidjs/uuid/commit/16c8f6df2f6b09b4d6235602d6a591188320a82e)), closes [#536](https://github.com/uuidjs/uuid/issues/536)

### [8.3.1](https://github.com/uuidjs/uuid/compare/v8.3.0...v8.3.1) (2020-10-04)

### Bug Fixes

- support expo>=39.0.0 ([#515](https://github.com/uuidjs/uuid/issues/515)) ([c65a0f3](https://github.com/uuidjs/uuid/commit/c65a0f3fa73b901959d638d1e3591dfacdbed867)), closes [#375](https://github.com/uuidjs/uuid/issues/375)

## [8.3.0](https://github.com/uuidjs/uuid/compare/v8.2.0...v8.3.0) (2020-07-27)

### Features

- add parse/stringify/validate/version/NIL APIs ([#479](https://github.com/uuidjs/uuid/issues/479)) ([0e6c10b](https://github.com/uuidjs/uuid/commit/0e6c10ba1bf9517796ff23c052fc0468eedfd5f4)), closes [#475](https://github.com/uuidjs/uuid/issues/475) [#478](https://github.com/uuidjs/uuid/issues/478) [#480](https://github.com/uuidjs/uuid/issues/480) [#481](https://github.com/uuidjs/uuid/issues/481) [#180](https://github.com/uuidjs/uuid/issues/180)

## [8.2.0](https://github.com/uuidjs/uuid/compare/v8.1.0...v8.2.0) (2020-06-23)

### Features

- improve performance of v1 string representation ([#453](https://github.com/uuidjs/uuid/issues/453)) ([0ee0b67](https://github.com/uuidjs/uuid/commit/0ee0b67c37846529c66089880414d29f3ae132d5))
- remove deprecated v4 string parameter ([#454](https://github.com/uuidjs/uuid/issues/454)) ([88ce3ca](https://github.com/uuidjs/uuid/commit/88ce3ca0ba046f60856de62c7ce03f7ba98ba46c)), closes [#437](https://github.com/uuidjs/uuid/issues/437)
- support jspm ([#473](https://github.com/uuidjs/uuid/issues/473)) ([e9f2587](https://github.com/uuidjs/uuid/commit/e9f2587a92575cac31bc1d4ae944e17c09756659))

### Bug Fixes

- prepare package exports for webpack 5 ([#468](https://github.com/uuidjs/uuid/issues/468)) ([8d6e6a5](https://github.com/uuidjs/uuid/commit/8d6e6a5f8965ca9575eb4d92e99a43435f4a58a8))

## [8.1.0](https://github.com/uuidjs/uuid/compare/v8.0.0...v8.1.0) (2020-05-20)

### Features

- improve v4 performance by reusing random number array ([#435](https://github.com/uuidjs/uuid/issues/435)) ([bf4af0d](https://github.com/uuidjs/uuid/commit/bf4af0d711b4d2ed03d1f74fd12ad0baa87dc79d))
- optimize V8 performance of bytesToUuid ([#434](https://github.com/uuidjs/uuid/issues/434)) ([e156415](https://github.com/uuidjs/uuid/commit/e156415448ec1af2351fa0b6660cfb22581971f2))

### Bug Fixes

- export package.json required by react-native and bundlers ([#449](https://github.com/uuidjs/uuid/issues/449)) ([be1c8fe](https://github.com/uuidjs/uuid/commit/be1c8fe9a3206c358e0059b52fafd7213aa48a52)), closes [ai/nanoevents#44](https://github.com/ai/nanoevents/issues/44#issuecomment-602010343) [#444](https://github.com/uuidjs/uuid/issues/444)

## [8.0.0](https://github.com/uuidjs/uuid/compare/v7.0.3...v8.0.0) (2020-04-29)

### ⚠ BREAKING CHANGES

- For native ECMAScript Module (ESM) usage in Node.js only named exports are exposed, there is no more default export.

  ```diff
  -import uuid from 'uuid';
  -console.log(uuid.v4()); // -> 'cd6c3b08-0adc-4f4b-a6ef-36087a1c9869'
  +import { v4 as uuidv4 } from 'uuid';
  +uuidv4(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'
  ```

- Deep requiring specific algorithms of this library like `require('uuid/v4')`, which has been deprecated in `uuid@7`, is no longer supported.

  Instead use the named exports that this module exports.

  For ECMAScript Modules (ESM):

  ```diff
  -import uuidv4 from 'uuid/v4';
  +import { v4 as uuidv4 } from 'uuid';
  uuidv4();
  ```

  For CommonJS:

  ```diff
  -const uuidv4 = require('uuid/v4');
  +const { v4: uuidv4 } = require('uuid');
  uuidv4();
  ```

### Features

- native Node.js ES Modules (wrapper approach) ([#423](https://github.com/uuidjs/uuid/issues/423)) ([2d9f590](https://github.com/uuidjs/uuid/commit/2d9f590ad9701d692625c07ed62f0a0f91227991)), closes [#245](https://github.com/uuidjs/uuid/issues/245) [#419](https://github.com/uuidjs/uuid/issues/419) [#342](https://github.com/uuidjs/uuid/issues/342)
- remove deep requires ([#426](https://github.com/uuidjs/uuid/issues/426)) ([daf72b8](https://github.com/uuidjs/uuid/commit/daf72b84ceb20272a81bb5fbddb05dd95922cbba))

### Bug Fixes

- add CommonJS syntax example to README quickstart section ([#417](https://github.com/uuidjs/uuid/issues/417)) ([e0ec840](https://github.com/uuidjs/uuid/commit/e0ec8402c7ad44b7ef0453036c612f5db513fda0))

### [7.0.3](https://github.com/uuidjs/uuid/compare/v7.0.2...v7.0.3) (2020-03-31)

### Bug Fixes

- make deep require deprecation warning work in browsers ([#409](https://github.com/uuidjs/uuid/issues/409)) ([4b71107](https://github.com/uuidjs/uuid/commit/4b71107d8c0d2ef56861ede6403fc9dc35a1e6bf)), closes [#408](https://github.com/uuidjs/uuid/issues/408)

### [7.0.2](https://github.com/uuidjs/uuid/compare/v7.0.1...v7.0.2) (2020-03-04)

### Bug Fixes

- make access to msCrypto consistent ([#393](https://github.com/uuidjs/uuid/issues/393)) ([8bf2a20](https://github.com/uuidjs/uuid/commit/8bf2a20f3565df743da7215eebdbada9d2df118c))
- simplify link in deprecation warning ([#391](https://github.com/uuidjs/uuid/issues/391)) ([bb2c8e4](https://github.com/uuidjs/uuid/commit/bb2c8e4e9f4c5f9c1eaaf3ea59710c633cd90cb7))
- update links to match content in readme ([#386](https://github.com/uuidjs/uuid/issues/386)) ([44f2f86](https://github.com/uuidjs/uuid/commit/44f2f86e9d2bbf14ee5f0f00f72a3db1292666d4))

### [7.0.1](https://github.com/uuidjs/uuid/compare/v7.0.0...v7.0.1) (2020-02-25)

### Bug Fixes

- clean up esm builds for node and browser ([#383](https://github.com/uuidjs/uuid/issues/383)) ([59e6a49](https://github.com/uuidjs/uuid/commit/59e6a49e7ce7b3e8fb0f3ee52b9daae72af467dc))
- provide browser versions independent from module system ([#380](https://github.com/uuidjs/uuid/issues/380)) ([4344a22](https://github.com/uuidjs/uuid/commit/4344a22e7aed33be8627eeaaf05360f256a21753)), closes [#378](https://github.com/uuidjs/uuid/issues/378)

## [7.0.0](https://github.com/uuidjs/uuid/compare/v3.4.0...v7.0.0) (2020-02-24)

### ⚠ BREAKING CHANGES

- The default export, which used to be the v4() method but which was already discouraged in v3.x of this library, has been removed.
- Explicitly note that deep imports of the different uuid version functions are deprecated and no longer encouraged and that ECMAScript module named imports should be used instead. Emit a deprecation warning for people who deep-require the different algorithm variants.
- Remove builtin support for insecure random number generators in the browser. Users who want that will have to supply their own random number generator function.
- Remove support for generating v3 and v5 UUIDs in Node.js<4.x
- Convert code base to ECMAScript Modules (ESM) and release CommonJS build for node and ESM build for browser bundlers.

### Features

- add UMD build to npm package ([#357](https://github.com/uuidjs/uuid/issues/357)) ([4e75adf](https://github.com/uuidjs/uuid/commit/4e75adf435196f28e3fbbe0185d654b5ded7ca2c)), closes [#345](https://github.com/uuidjs/uuid/issues/345)
- add various es module and CommonJS examples ([b238510](https://github.com/uuidjs/uuid/commit/b238510bf352463521f74bab175a3af9b7a42555))
- ensure that docs are up-to-date in CI ([ee5e77d](https://github.com/uuidjs/uuid/commit/ee5e77db547474f5a8f23d6c857a6d399209986b))
- hybrid CommonJS & ECMAScript modules build ([a3f078f](https://github.com/uuidjs/uuid/commit/a3f078faa0baff69ab41aed08e041f8f9c8993d0))
- remove insecure fallback random number generator ([3a5842b](https://github.com/uuidjs/uuid/commit/3a5842b141a6e5de0ae338f391661e6b84b167c9)), closes [#173](https://github.com/uuidjs/uuid/issues/173)
- remove support for pre Node.js v4 Buffer API ([#356](https://github.com/uuidjs/uuid/issues/356)) ([b59b5c5](https://github.com/uuidjs/uuid/commit/b59b5c5ecad271c5453f1a156f011671f6d35627))
- rename repository to github:uuidjs/uuid ([#351](https://github.com/uuidjs/uuid/issues/351)) ([c37a518](https://github.com/uuidjs/uuid/commit/c37a518e367ac4b6d0aa62dba1bc6ce9e85020f7)), closes [#338](https://github.com/uuidjs/uuid/issues/338)

### Bug Fixes

- add deep-require proxies for local testing and adjust tests ([#365](https://github.com/uuidjs/uuid/issues/365)) ([7fedc79](https://github.com/uuidjs/uuid/commit/7fedc79ac8fda4bfd1c566c7f05ef4ac13b2db48))
- add note about removal of default export ([#372](https://github.com/uuidjs/uuid/issues/372)) ([12749b7](https://github.com/uuidjs/uuid/commit/12749b700eb49db8a9759fd306d8be05dbfbd58c)), closes [#370](https://github.com/uuidjs/uuid/issues/370)
- deprecated deep requiring of the different algorithm versions ([#361](https://github.com/uuidjs/uuid/issues/361)) ([c0bdf15](https://github.com/uuidjs/uuid/commit/c0bdf15e417639b1aeb0b247b2fb11f7a0a26b23))

## [3.4.0](https://github.com/uuidjs/uuid/compare/v3.3.3...v3.4.0) (2020-01-16)

### Features

- rename repository to github:uuidjs/uuid ([#351](https://github.com/uuidjs/uuid/issues/351)) ([e2d7314](https://github.com/uuidjs/uuid/commit/e2d7314)), closes [#338](https://github.com/uuidjs/uuid/issues/338)

## [3.3.3](https://github.com/uuidjs/uuid/compare/v3.3.2...v3.3.3) (2019-08-19)

### Bug Fixes

- no longer run ci tests on node v4
- upgrade dependencies

## [3.3.2](https://github.com/uuidjs/uuid/compare/v3.3.1...v3.3.2) (2018-06-28)

### Bug Fixes

- typo ([305d877](https://github.com/uuidjs/uuid/commit/305d877))

## [3.3.1](https://github.com/uuidjs/uuid/compare/v3.3.0...v3.3.1) (2018-06-28)

### Bug Fixes

- fix [#284](https://github.com/uuidjs/uuid/issues/284) by setting function name in try-catch ([f2a60f2](https://github.com/uuidjs/uuid/commit/f2a60f2))

# [3.3.0](https://github.com/uuidjs/uuid/compare/v3.2.1...v3.3.0) (2018-06-22)

### Bug Fixes

- assignment to readonly property to allow running in strict mode ([#270](https://github.com/uuidjs/uuid/issues/270)) ([d062fdc](https://github.com/uuidjs/uuid/commit/d062fdc))
- fix [#229](https://github.com/uuidjs/uuid/issues/229) ([c9684d4](https://github.com/uuidjs/uuid/commit/c9684d4))
- Get correct version of IE11 crypto ([#274](https://github.com/uuidjs/uuid/issues/274)) ([153d331](https://github.com/uuidjs/uuid/commit/153d331))
- mem issue when generating uuid ([#267](https://github.com/uuidjs/uuid/issues/267)) ([c47702c](https://github.com/uuidjs/uuid/commit/c47702c))

### Features

- enforce Conventional Commit style commit messages ([#282](https://github.com/uuidjs/uuid/issues/282)) ([cc9a182](https://github.com/uuidjs/uuid/commit/cc9a182))

## [3.2.1](https://github.com/uuidjs/uuid/compare/v3.2.0...v3.2.1) (2018-01-16)

### Bug Fixes

- use msCrypto if available. Fixes [#241](https://github.com/uuidjs/uuid/issues/241) ([#247](https://github.com/uuidjs/uuid/issues/247)) ([1fef18b](https://github.com/uuidjs/uuid/commit/1fef18b))

# [3.2.0](https://github.com/uuidjs/uuid/compare/v3.1.0...v3.2.0) (2018-01-16)

### Bug Fixes

- remove mistakenly added typescript dependency, rollback version (standard-version will auto-increment) ([09fa824](https://github.com/uuidjs/uuid/commit/09fa824))
- use msCrypto if available. Fixes [#241](https://github.com/uuidjs/uuid/issues/241) ([#247](https://github.com/uuidjs/uuid/issues/247)) ([1fef18b](https://github.com/uuidjs/uuid/commit/1fef18b))

### Features

- Add v3 Support ([#217](https://github.com/uuidjs/uuid/issues/217)) ([d94f726](https://github.com/uuidjs/uuid/commit/d94f726))

# [3.1.0](https://github.com/uuidjs/uuid/compare/v3.1.0...v3.0.1) (2017-06-17)

### Bug Fixes

- (fix) Add .npmignore file to exclude test/ and other non-essential files from packing. (#183)
- Fix typo (#178)
- Simple typo fix (#165)

### Features

- v5 support in CLI (#197)
- V5 support (#188)

# 3.0.1 (2016-11-28)

- split uuid versions into separate files

# 3.0.0 (2016-11-17)

- remove .parse and .unparse

# 2.0.0

- Removed uuid.BufferClass

# 1.4.0

- Improved module context detection
- Removed public RNG functions

# 1.3.2

- Improve tests and handling of v1() options (Issue #24)
- Expose RNG option to allow for perf testing with different generators

# 1.3.0

- Support for version 1 ids, thanks to [@ctavan](https://github.com/ctavan)!
- Support for node.js crypto API
- De-emphasizing performance in favor of a) cryptographic quality PRNGs where available and b) more manageable code
# Contributing

Please feel free to file GitHub Issues or propose Pull Requests. We're always happy to discuss improvements to this library!

## Testing

```shell
npm test
```

## Releasing

Releases are supposed to be done from master, version bumping is automated through [`standard-version`](https://github.com/conventional-changelog/standard-version):

```shell
npm run release -- --dry-run  # verify output manually
npm run release               # follow the instructions from the output of this command
```
#!/usr/bin/env node
require('../uuid-bin');
export { default as v1 } from './v1.js';
export { default as v3 } from './v3.js';
export { default as v4 } from './v4.js';
export { default as v5 } from './v5.js';
export { default as NIL } from './nil.js';
export { default as version } from './version.js';
export { default as validate } from './validate.js';
export { default as stringify } from './stringify.js';
export { default as parse } from './parse.js';/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

export default md5;export default '00000000-0000-0000-0000-000000000000';import validate from './validate.js';

function parse(uuid) {
  if (!validate(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

export default parse;export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
export default function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

export default sha1;import validate from './validate.js';
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

export default stringify;import rng from './rng.js';
import stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || rng)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || stringify(b);
}

export default v1;import v35 from './v35.js';
import md5 from './md5.js';
var v3 = v35('v3', 0x30, md5);
export default v3;import stringify from './stringify.js';
import parse from './parse.js';

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

export var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
export var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
export default function (name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = parse(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return stringify(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}import rng from './rng.js';
import stringify from './stringify.js';

function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return stringify(rnds);
}

export default v4;import v35 from './v35.js';
import sha1 from './sha1.js';
var v5 = v35('v5', 0x50, sha1);
export default v5;import REGEX from './regex.js';

function validate(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}

export default validate;import validate from './validate.js';

function version(uuid) {
  if (!validate(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

export default version;export { default as v1 } from './v1.js';
export { default as v3 } from './v3.js';
export { default as v4 } from './v4.js';
export { default as v5 } from './v5.js';
export { default as NIL } from './nil.js';
export { default as version } from './version.js';
export { default as validate } from './validate.js';
export { default as stringify } from './stringify.js';
export { default as parse } from './parse.js';import crypto from 'crypto';

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return crypto.createHash('md5').update(bytes).digest();
}

export default md5;export default '00000000-0000-0000-0000-000000000000';import validate from './validate.js';

function parse(uuid) {
  if (!validate(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

export default parse;export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;import crypto from 'crypto';
const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;
export default function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    crypto.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}import crypto from 'crypto';

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return crypto.createHash('sha1').update(bytes).digest();
}

export default sha1;import validate from './validate.js';
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

export default stringify;import rng from './rng.js';
import stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || stringify(b);
}

export default v1;import v35 from './v35.js';
import md5 from './md5.js';
const v3 = v35('v3', 0x30, md5);
export default v3;import stringify from './stringify.js';
import parse from './parse.js';

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

export const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
export const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
export default function (name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = parse(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return stringify(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}import rng from './rng.js';
import stringify from './stringify.js';

function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return stringify(rnds);
}

export default v4;import v35 from './v35.js';
import sha1 from './sha1.js';
const v5 = v35('v5', 0x50, sha1);
export default v5;import REGEX from './regex.js';

function validate(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}

export default validate;import validate from './validate.js';

function version(uuid) {
  if (!validate(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

export default version;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "v1", {
  enumerable: true,
  get: function () {
    return _v.default;
  }
});
Object.defineProperty(exports, "v3", {
  enumerable: true,
  get: function () {
    return _v2.default;
  }
});
Object.defineProperty(exports, "v4", {
  enumerable: true,
  get: function () {
    return _v3.default;
  }
});
Object.defineProperty(exports, "v5", {
  enumerable: true,
  get: function () {
    return _v4.default;
  }
});
Object.defineProperty(exports, "NIL", {
  enumerable: true,
  get: function () {
    return _nil.default;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.default;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _validate.default;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parse.default;
  }
});

var _v = _interopRequireDefault(require("./v1.js"));

var _v2 = _interopRequireDefault(require("./v3.js"));

var _v3 = _interopRequireDefault(require("./v4.js"));

var _v4 = _interopRequireDefault(require("./v5.js"));

var _nil = _interopRequireDefault(require("./nil.js"));

var _version = _interopRequireDefault(require("./version.js"));

var _validate = _interopRequireDefault(require("./validate.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('md5').update(bytes).digest();
}

var _default = md5;
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rng;

var _crypto = _interopRequireDefault(require("crypto"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    _crypto.default.randomFillSync(rnds8Pool);

    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('sha1').update(bytes).digest();
}

var _default = sha1;
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports.default = _default;!function(r,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((r="undefined"!=typeof globalThis?globalThis:r||self).uuid={})}(this,(function(r){"use strict";var e,n=new Uint8Array(16);function t(){if(!e&&!(e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(n)}var o=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function a(r){return"string"==typeof r&&o.test(r)}for(var i,u,f=[],s=0;s<256;++s)f.push((s+256).toString(16).substr(1));function c(r){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(f[r[e+0]]+f[r[e+1]]+f[r[e+2]]+f[r[e+3]]+"-"+f[r[e+4]]+f[r[e+5]]+"-"+f[r[e+6]]+f[r[e+7]]+"-"+f[r[e+8]]+f[r[e+9]]+"-"+f[r[e+10]]+f[r[e+11]]+f[r[e+12]]+f[r[e+13]]+f[r[e+14]]+f[r[e+15]]).toLowerCase();if(!a(n))throw TypeError("Stringified UUID is invalid");return n}var l=0,d=0;function v(r){if(!a(r))throw TypeError("Invalid UUID");var e,n=new Uint8Array(16);return n[0]=(e=parseInt(r.slice(0,8),16))>>>24,n[1]=e>>>16&255,n[2]=e>>>8&255,n[3]=255&e,n[4]=(e=parseInt(r.slice(9,13),16))>>>8,n[5]=255&e,n[6]=(e=parseInt(r.slice(14,18),16))>>>8,n[7]=255&e,n[8]=(e=parseInt(r.slice(19,23),16))>>>8,n[9]=255&e,n[10]=(e=parseInt(r.slice(24,36),16))/1099511627776&255,n[11]=e/4294967296&255,n[12]=e>>>24&255,n[13]=e>>>16&255,n[14]=e>>>8&255,n[15]=255&e,n}function p(r,e,n){function t(r,t,o,a){if("string"==typeof r&&(r=function(r){r=unescape(encodeURIComponent(r));for(var e=[],n=0;n<r.length;++n)e.push(r.charCodeAt(n));return e}(r)),"string"==typeof t&&(t=v(t)),16!==t.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var i=new Uint8Array(16+r.length);if(i.set(t),i.set(r,t.length),(i=n(i))[6]=15&i[6]|e,i[8]=63&i[8]|128,o){a=a||0;for(var u=0;u<16;++u)o[a+u]=i[u];return o}return c(i)}try{t.name=r}catch(r){}return t.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",t.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",t}function h(r){return 14+(r+64>>>9<<4)+1}function y(r,e){var n=(65535&r)+(65535&e);return(r>>16)+(e>>16)+(n>>16)<<16|65535&n}function g(r,e,n,t,o,a){return y((i=y(y(e,r),y(t,a)))<<(u=o)|i>>>32-u,n);var i,u}function m(r,e,n,t,o,a,i){return g(e&n|~e&t,r,e,o,a,i)}function w(r,e,n,t,o,a,i){return g(e&t|n&~t,r,e,o,a,i)}function b(r,e,n,t,o,a,i){return g(e^n^t,r,e,o,a,i)}function A(r,e,n,t,o,a,i){return g(n^(e|~t),r,e,o,a,i)}var U=p("v3",48,(function(r){if("string"==typeof r){var e=unescape(encodeURIComponent(r));r=new Uint8Array(e.length);for(var n=0;n<e.length;++n)r[n]=e.charCodeAt(n)}return function(r){for(var e=[],n=32*r.length,t="0123456789abcdef",o=0;o<n;o+=8){var a=r[o>>5]>>>o%32&255,i=parseInt(t.charAt(a>>>4&15)+t.charAt(15&a),16);e.push(i)}return e}(function(r,e){r[e>>5]|=128<<e%32,r[h(e)-1]=e;for(var n=1732584193,t=-271733879,o=-1732584194,a=271733878,i=0;i<r.length;i+=16){var u=n,f=t,s=o,c=a;n=m(n,t,o,a,r[i],7,-680876936),a=m(a,n,t,o,r[i+1],12,-389564586),o=m(o,a,n,t,r[i+2],17,606105819),t=m(t,o,a,n,r[i+3],22,-1044525330),n=m(n,t,o,a,r[i+4],7,-176418897),a=m(a,n,t,o,r[i+5],12,1200080426),o=m(o,a,n,t,r[i+6],17,-1473231341),t=m(t,o,a,n,r[i+7],22,-45705983),n=m(n,t,o,a,r[i+8],7,1770035416),a=m(a,n,t,o,r[i+9],12,-1958414417),o=m(o,a,n,t,r[i+10],17,-42063),t=m(t,o,a,n,r[i+11],22,-1990404162),n=m(n,t,o,a,r[i+12],7,1804603682),a=m(a,n,t,o,r[i+13],12,-40341101),o=m(o,a,n,t,r[i+14],17,-1502002290),n=w(n,t=m(t,o,a,n,r[i+15],22,1236535329),o,a,r[i+1],5,-165796510),a=w(a,n,t,o,r[i+6],9,-1069501632),o=w(o,a,n,t,r[i+11],14,643717713),t=w(t,o,a,n,r[i],20,-373897302),n=w(n,t,o,a,r[i+5],5,-701558691),a=w(a,n,t,o,r[i+10],9,38016083),o=w(o,a,n,t,r[i+15],14,-660478335),t=w(t,o,a,n,r[i+4],20,-405537848),n=w(n,t,o,a,r[i+9],5,568446438),a=w(a,n,t,o,r[i+14],9,-1019803690),o=w(o,a,n,t,r[i+3],14,-187363961),t=w(t,o,a,n,r[i+8],20,1163531501),n=w(n,t,o,a,r[i+13],5,-1444681467),a=w(a,n,t,o,r[i+2],9,-51403784),o=w(o,a,n,t,r[i+7],14,1735328473),n=b(n,t=w(t,o,a,n,r[i+12],20,-1926607734),o,a,r[i+5],4,-378558),a=b(a,n,t,o,r[i+8],11,-2022574463),o=b(o,a,n,t,r[i+11],16,1839030562),t=b(t,o,a,n,r[i+14],23,-35309556),n=b(n,t,o,a,r[i+1],4,-1530992060),a=b(a,n,t,o,r[i+4],11,1272893353),o=b(o,a,n,t,r[i+7],16,-155497632),t=b(t,o,a,n,r[i+10],23,-1094730640),n=b(n,t,o,a,r[i+13],4,681279174),a=b(a,n,t,o,r[i],11,-358537222),o=b(o,a,n,t,r[i+3],16,-722521979),t=b(t,o,a,n,r[i+6],23,76029189),n=b(n,t,o,a,r[i+9],4,-640364487),a=b(a,n,t,o,r[i+12],11,-421815835),o=b(o,a,n,t,r[i+15],16,530742520),n=A(n,t=b(t,o,a,n,r[i+2],23,-995338651),o,a,r[i],6,-198630844),a=A(a,n,t,o,r[i+7],10,1126891415),o=A(o,a,n,t,r[i+14],15,-1416354905),t=A(t,o,a,n,r[i+5],21,-57434055),n=A(n,t,o,a,r[i+12],6,1700485571),a=A(a,n,t,o,r[i+3],10,-1894986606),o=A(o,a,n,t,r[i+10],15,-1051523),t=A(t,o,a,n,r[i+1],21,-2054922799),n=A(n,t,o,a,r[i+8],6,1873313359),a=A(a,n,t,o,r[i+15],10,-30611744),o=A(o,a,n,t,r[i+6],15,-1560198380),t=A(t,o,a,n,r[i+13],21,1309151649),n=A(n,t,o,a,r[i+4],6,-145523070),a=A(a,n,t,o,r[i+11],10,-1120210379),o=A(o,a,n,t,r[i+2],15,718787259),t=A(t,o,a,n,r[i+9],21,-343485551),n=y(n,u),t=y(t,f),o=y(o,s),a=y(a,c)}return[n,t,o,a]}(function(r){if(0===r.length)return[];for(var e=8*r.length,n=new Uint32Array(h(e)),t=0;t<e;t+=8)n[t>>5]|=(255&r[t/8])<<t%32;return n}(r),8*r.length))}));function I(r,e,n,t){switch(r){case 0:return e&n^~e&t;case 1:return e^n^t;case 2:return e&n^e&t^n&t;case 3:return e^n^t}}function C(r,e){return r<<e|r>>>32-e}var R=p("v5",80,(function(r){var e=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof r){var t=unescape(encodeURIComponent(r));r=[];for(var o=0;o<t.length;++o)r.push(t.charCodeAt(o))}else Array.isArray(r)||(r=Array.prototype.slice.call(r));r.push(128);for(var a=r.length/4+2,i=Math.ceil(a/16),u=new Array(i),f=0;f<i;++f){for(var s=new Uint32Array(16),c=0;c<16;++c)s[c]=r[64*f+4*c]<<24|r[64*f+4*c+1]<<16|r[64*f+4*c+2]<<8|r[64*f+4*c+3];u[f]=s}u[i-1][14]=8*(r.length-1)/Math.pow(2,32),u[i-1][14]=Math.floor(u[i-1][14]),u[i-1][15]=8*(r.length-1)&4294967295;for(var l=0;l<i;++l){for(var d=new Uint32Array(80),v=0;v<16;++v)d[v]=u[l][v];for(var p=16;p<80;++p)d[p]=C(d[p-3]^d[p-8]^d[p-14]^d[p-16],1);for(var h=n[0],y=n[1],g=n[2],m=n[3],w=n[4],b=0;b<80;++b){var A=Math.floor(b/20),U=C(h,5)+I(A,y,g,m)+w+e[A]+d[b]>>>0;w=m,m=g,g=C(y,30)>>>0,y=h,h=U}n[0]=n[0]+h>>>0,n[1]=n[1]+y>>>0,n[2]=n[2]+g>>>0,n[3]=n[3]+m>>>0,n[4]=n[4]+w>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]}));r.NIL="00000000-0000-0000-0000-000000000000",r.parse=v,r.stringify=c,r.v1=function(r,e,n){var o=e&&n||0,a=e||new Array(16),f=(r=r||{}).node||i,s=void 0!==r.clockseq?r.clockseq:u;if(null==f||null==s){var v=r.random||(r.rng||t)();null==f&&(f=i=[1|v[0],v[1],v[2],v[3],v[4],v[5]]),null==s&&(s=u=16383&(v[6]<<8|v[7]))}var p=void 0!==r.msecs?r.msecs:Date.now(),h=void 0!==r.nsecs?r.nsecs:d+1,y=p-l+(h-d)/1e4;if(y<0&&void 0===r.clockseq&&(s=s+1&16383),(y<0||p>l)&&void 0===r.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");l=p,d=h,u=s;var g=(1e4*(268435455&(p+=122192928e5))+h)%4294967296;a[o++]=g>>>24&255,a[o++]=g>>>16&255,a[o++]=g>>>8&255,a[o++]=255&g;var m=p/4294967296*1e4&268435455;a[o++]=m>>>8&255,a[o++]=255&m,a[o++]=m>>>24&15|16,a[o++]=m>>>16&255,a[o++]=s>>>8|128,a[o++]=255&s;for(var w=0;w<6;++w)a[o+w]=f[w];return e||c(a)},r.v3=U,r.v4=function(r,e,n){var o=(r=r||{}).random||(r.rng||t)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){n=n||0;for(var a=0;a<16;++a)e[n+a]=o[a];return e}return c(o)},r.v5=R,r.validate=a,r.version=function(r){if(!a(r))throw TypeError("Invalid UUID");return parseInt(r.substr(14,1),16)},Object.defineProperty(r,"__esModule",{value:!0})}));!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(e="undefined"!=typeof globalThis?globalThis:e||self).uuidNIL=n()}(this,(function(){"use strict";return"00000000-0000-0000-0000-000000000000"}));!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(e="undefined"!=typeof globalThis?globalThis:e||self).uuidParse=n()}(this,(function(){"use strict";var e=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;return function(n){if(!function(n){return"string"==typeof n&&e.test(n)}(n))throw TypeError("Invalid UUID");var t,i=new Uint8Array(16);return i[0]=(t=parseInt(n.slice(0,8),16))>>>24,i[1]=t>>>16&255,i[2]=t>>>8&255,i[3]=255&t,i[4]=(t=parseInt(n.slice(9,13),16))>>>8,i[5]=255&t,i[6]=(t=parseInt(n.slice(14,18),16))>>>8,i[7]=255&t,i[8]=(t=parseInt(n.slice(19,23),16))>>>8,i[9]=255&t,i[10]=(t=parseInt(n.slice(24,36),16))/1099511627776&255,i[11]=t/4294967296&255,i[12]=t>>>24&255,i[13]=t>>>16&255,i[14]=t>>>8&255,i[15]=255&t,i}}));!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).uuidStringify=t()}(this,(function(){"use strict";var e=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function t(t){return"string"==typeof t&&e.test(t)}for(var i=[],n=0;n<256;++n)i.push((n+256).toString(16).substr(1));return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,f=(i[e[n+0]]+i[e[n+1]]+i[e[n+2]]+i[e[n+3]]+"-"+i[e[n+4]]+i[e[n+5]]+"-"+i[e[n+6]]+i[e[n+7]]+"-"+i[e[n+8]]+i[e[n+9]]+"-"+i[e[n+10]]+i[e[n+11]]+i[e[n+12]]+i[e[n+13]]+i[e[n+14]]+i[e[n+15]]).toLowerCase();if(!t(f))throw TypeError("Stringified UUID is invalid");return f}}));!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?module.exports=o():"function"==typeof define&&define.amd?define(o):(e="undefined"!=typeof globalThis?globalThis:e||self).uuidv1=o()}(this,(function(){"use strict";var e,o=new Uint8Array(16);function t(){if(!e&&!(e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(o)}var n=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function r(e){return"string"==typeof e&&n.test(e)}for(var i,u,s=[],a=0;a<256;++a)s.push((a+256).toString(16).substr(1));var d=0,f=0;return function(e,o,n){var a=o&&n||0,c=o||new Array(16),l=(e=e||{}).node||i,p=void 0!==e.clockseq?e.clockseq:u;if(null==l||null==p){var v=e.random||(e.rng||t)();null==l&&(l=i=[1|v[0],v[1],v[2],v[3],v[4],v[5]]),null==p&&(p=u=16383&(v[6]<<8|v[7]))}var y=void 0!==e.msecs?e.msecs:Date.now(),m=void 0!==e.nsecs?e.nsecs:f+1,g=y-d+(m-f)/1e4;if(g<0&&void 0===e.clockseq&&(p=p+1&16383),(g<0||y>d)&&void 0===e.nsecs&&(m=0),m>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");d=y,f=m,u=p;var h=(1e4*(268435455&(y+=122192928e5))+m)%4294967296;c[a++]=h>>>24&255,c[a++]=h>>>16&255,c[a++]=h>>>8&255,c[a++]=255&h;var w=y/4294967296*1e4&268435455;c[a++]=w>>>8&255,c[a++]=255&w,c[a++]=w>>>24&15|16,c[a++]=w>>>16&255,c[a++]=p>>>8|128,c[a++]=255&p;for(var b=0;b<6;++b)c[a+b]=l[b];return o||function(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(s[e[o+0]]+s[e[o+1]]+s[e[o+2]]+s[e[o+3]]+"-"+s[e[o+4]]+s[e[o+5]]+"-"+s[e[o+6]]+s[e[o+7]]+"-"+s[e[o+8]]+s[e[o+9]]+"-"+s[e[o+10]]+s[e[o+11]]+s[e[o+12]]+s[e[o+13]]+s[e[o+14]]+s[e[o+15]]).toLowerCase();if(!r(t))throw TypeError("Stringified UUID is invalid");return t}(c)}}));!function(n,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):(n="undefined"!=typeof globalThis?globalThis:n||self).uuidv3=r()}(this,(function(){"use strict";var n=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function r(r){return"string"==typeof r&&n.test(r)}for(var e=[],t=0;t<256;++t)e.push((t+256).toString(16).substr(1));function i(n){return 14+(n+64>>>9<<4)+1}function o(n,r){var e=(65535&n)+(65535&r);return(n>>16)+(r>>16)+(e>>16)<<16|65535&e}function a(n,r,e,t,i,a){return o((f=o(o(r,n),o(t,a)))<<(u=i)|f>>>32-u,e);var f,u}function f(n,r,e,t,i,o,f){return a(r&e|~r&t,n,r,i,o,f)}function u(n,r,e,t,i,o,f){return a(r&t|e&~t,n,r,i,o,f)}function c(n,r,e,t,i,o,f){return a(r^e^t,n,r,i,o,f)}function s(n,r,e,t,i,o,f){return a(e^(r|~t),n,r,i,o,f)}return function(n,t,i){function o(n,o,a,f){if("string"==typeof n&&(n=function(n){n=unescape(encodeURIComponent(n));for(var r=[],e=0;e<n.length;++e)r.push(n.charCodeAt(e));return r}(n)),"string"==typeof o&&(o=function(n){if(!r(n))throw TypeError("Invalid UUID");var e,t=new Uint8Array(16);return t[0]=(e=parseInt(n.slice(0,8),16))>>>24,t[1]=e>>>16&255,t[2]=e>>>8&255,t[3]=255&e,t[4]=(e=parseInt(n.slice(9,13),16))>>>8,t[5]=255&e,t[6]=(e=parseInt(n.slice(14,18),16))>>>8,t[7]=255&e,t[8]=(e=parseInt(n.slice(19,23),16))>>>8,t[9]=255&e,t[10]=(e=parseInt(n.slice(24,36),16))/1099511627776&255,t[11]=e/4294967296&255,t[12]=e>>>24&255,t[13]=e>>>16&255,t[14]=e>>>8&255,t[15]=255&e,t}(o)),16!==o.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var u=new Uint8Array(16+n.length);if(u.set(o),u.set(n,o.length),(u=i(u))[6]=15&u[6]|t,u[8]=63&u[8]|128,a){f=f||0;for(var c=0;c<16;++c)a[f+c]=u[c];return a}return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=(e[n[t+0]]+e[n[t+1]]+e[n[t+2]]+e[n[t+3]]+"-"+e[n[t+4]]+e[n[t+5]]+"-"+e[n[t+6]]+e[n[t+7]]+"-"+e[n[t+8]]+e[n[t+9]]+"-"+e[n[t+10]]+e[n[t+11]]+e[n[t+12]]+e[n[t+13]]+e[n[t+14]]+e[n[t+15]]).toLowerCase();if(!r(i))throw TypeError("Stringified UUID is invalid");return i}(u)}try{o.name=n}catch(n){}return o.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",o.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",o}("v3",48,(function(n){if("string"==typeof n){var r=unescape(encodeURIComponent(n));n=new Uint8Array(r.length);for(var e=0;e<r.length;++e)n[e]=r.charCodeAt(e)}return function(n){for(var r=[],e=32*n.length,t="0123456789abcdef",i=0;i<e;i+=8){var o=n[i>>5]>>>i%32&255,a=parseInt(t.charAt(o>>>4&15)+t.charAt(15&o),16);r.push(a)}return r}(function(n,r){n[r>>5]|=128<<r%32,n[i(r)-1]=r;for(var e=1732584193,t=-271733879,a=-1732584194,l=271733878,d=0;d<n.length;d+=16){var p=e,h=t,v=a,g=l;e=f(e,t,a,l,n[d],7,-680876936),l=f(l,e,t,a,n[d+1],12,-389564586),a=f(a,l,e,t,n[d+2],17,606105819),t=f(t,a,l,e,n[d+3],22,-1044525330),e=f(e,t,a,l,n[d+4],7,-176418897),l=f(l,e,t,a,n[d+5],12,1200080426),a=f(a,l,e,t,n[d+6],17,-1473231341),t=f(t,a,l,e,n[d+7],22,-45705983),e=f(e,t,a,l,n[d+8],7,1770035416),l=f(l,e,t,a,n[d+9],12,-1958414417),a=f(a,l,e,t,n[d+10],17,-42063),t=f(t,a,l,e,n[d+11],22,-1990404162),e=f(e,t,a,l,n[d+12],7,1804603682),l=f(l,e,t,a,n[d+13],12,-40341101),a=f(a,l,e,t,n[d+14],17,-1502002290),e=u(e,t=f(t,a,l,e,n[d+15],22,1236535329),a,l,n[d+1],5,-165796510),l=u(l,e,t,a,n[d+6],9,-1069501632),a=u(a,l,e,t,n[d+11],14,643717713),t=u(t,a,l,e,n[d],20,-373897302),e=u(e,t,a,l,n[d+5],5,-701558691),l=u(l,e,t,a,n[d+10],9,38016083),a=u(a,l,e,t,n[d+15],14,-660478335),t=u(t,a,l,e,n[d+4],20,-405537848),e=u(e,t,a,l,n[d+9],5,568446438),l=u(l,e,t,a,n[d+14],9,-1019803690),a=u(a,l,e,t,n[d+3],14,-187363961),t=u(t,a,l,e,n[d+8],20,1163531501),e=u(e,t,a,l,n[d+13],5,-1444681467),l=u(l,e,t,a,n[d+2],9,-51403784),a=u(a,l,e,t,n[d+7],14,1735328473),e=c(e,t=u(t,a,l,e,n[d+12],20,-1926607734),a,l,n[d+5],4,-378558),l=c(l,e,t,a,n[d+8],11,-2022574463),a=c(a,l,e,t,n[d+11],16,1839030562),t=c(t,a,l,e,n[d+14],23,-35309556),e=c(e,t,a,l,n[d+1],4,-1530992060),l=c(l,e,t,a,n[d+4],11,1272893353),a=c(a,l,e,t,n[d+7],16,-155497632),t=c(t,a,l,e,n[d+10],23,-1094730640),e=c(e,t,a,l,n[d+13],4,681279174),l=c(l,e,t,a,n[d],11,-358537222),a=c(a,l,e,t,n[d+3],16,-722521979),t=c(t,a,l,e,n[d+6],23,76029189),e=c(e,t,a,l,n[d+9],4,-640364487),l=c(l,e,t,a,n[d+12],11,-421815835),a=c(a,l,e,t,n[d+15],16,530742520),e=s(e,t=c(t,a,l,e,n[d+2],23,-995338651),a,l,n[d],6,-198630844),l=s(l,e,t,a,n[d+7],10,1126891415),a=s(a,l,e,t,n[d+14],15,-1416354905),t=s(t,a,l,e,n[d+5],21,-57434055),e=s(e,t,a,l,n[d+12],6,1700485571),l=s(l,e,t,a,n[d+3],10,-1894986606),a=s(a,l,e,t,n[d+10],15,-1051523),t=s(t,a,l,e,n[d+1],21,-2054922799),e=s(e,t,a,l,n[d+8],6,1873313359),l=s(l,e,t,a,n[d+15],10,-30611744),a=s(a,l,e,t,n[d+6],15,-1560198380),t=s(t,a,l,e,n[d+13],21,1309151649),e=s(e,t,a,l,n[d+4],6,-145523070),l=s(l,e,t,a,n[d+11],10,-1120210379),a=s(a,l,e,t,n[d+2],15,718787259),t=s(t,a,l,e,n[d+9],21,-343485551),e=o(e,p),t=o(t,h),a=o(a,v),l=o(l,g)}return[e,t,a,l]}(function(n){if(0===n.length)return[];for(var r=8*n.length,e=new Uint32Array(i(r)),t=0;t<r;t+=8)e[t>>5]|=(255&n[t/8])<<t%32;return e}(n),8*n.length))}))}));!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).uuidv4=e()}(this,(function(){"use strict";var t,e=new Uint8Array(16);function o(){if(!t&&!(t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(e)}var n=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function r(t){return"string"==typeof t&&n.test(t)}for(var i=[],u=0;u<256;++u)i.push((u+256).toString(16).substr(1));return function(t,e,n){var u=(t=t||{}).random||(t.rng||o)();if(u[6]=15&u[6]|64,u[8]=63&u[8]|128,e){n=n||0;for(var f=0;f<16;++f)e[n+f]=u[f];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=(i[t[e+0]]+i[t[e+1]]+i[t[e+2]]+i[t[e+3]]+"-"+i[t[e+4]]+i[t[e+5]]+"-"+i[t[e+6]]+i[t[e+7]]+"-"+i[t[e+8]]+i[t[e+9]]+"-"+i[t[e+10]]+i[t[e+11]]+i[t[e+12]]+i[t[e+13]]+i[t[e+14]]+i[t[e+15]]).toLowerCase();if(!r(o))throw TypeError("Stringified UUID is invalid");return o}(u)}}));!function(r,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(r="undefined"!=typeof globalThis?globalThis:r||self).uuidv5=e()}(this,(function(){"use strict";var r=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function e(e){return"string"==typeof e&&r.test(e)}for(var t=[],n=0;n<256;++n)t.push((n+256).toString(16).substr(1));function a(r,e,t,n){switch(r){case 0:return e&t^~e&n;case 1:return e^t^n;case 2:return e&t^e&n^t&n;case 3:return e^t^n}}function o(r,e){return r<<e|r>>>32-e}return function(r,n,a){function o(r,o,i,f){if("string"==typeof r&&(r=function(r){r=unescape(encodeURIComponent(r));for(var e=[],t=0;t<r.length;++t)e.push(r.charCodeAt(t));return e}(r)),"string"==typeof o&&(o=function(r){if(!e(r))throw TypeError("Invalid UUID");var t,n=new Uint8Array(16);return n[0]=(t=parseInt(r.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(r.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(r.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(r.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(r.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n}(o)),16!==o.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var s=new Uint8Array(16+r.length);if(s.set(o),s.set(r,o.length),(s=a(s))[6]=15&s[6]|n,s[8]=63&s[8]|128,i){f=f||0;for(var u=0;u<16;++u)i[f+u]=s[u];return i}return function(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,a=(t[r[n+0]]+t[r[n+1]]+t[r[n+2]]+t[r[n+3]]+"-"+t[r[n+4]]+t[r[n+5]]+"-"+t[r[n+6]]+t[r[n+7]]+"-"+t[r[n+8]]+t[r[n+9]]+"-"+t[r[n+10]]+t[r[n+11]]+t[r[n+12]]+t[r[n+13]]+t[r[n+14]]+t[r[n+15]]).toLowerCase();if(!e(a))throw TypeError("Stringified UUID is invalid");return a}(s)}try{o.name=r}catch(r){}return o.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",o.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",o}("v5",80,(function(r){var e=[1518500249,1859775393,2400959708,3395469782],t=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof r){var n=unescape(encodeURIComponent(r));r=[];for(var i=0;i<n.length;++i)r.push(n.charCodeAt(i))}else Array.isArray(r)||(r=Array.prototype.slice.call(r));r.push(128);for(var f=r.length/4+2,s=Math.ceil(f/16),u=new Array(s),c=0;c<s;++c){for(var l=new Uint32Array(16),p=0;p<16;++p)l[p]=r[64*c+4*p]<<24|r[64*c+4*p+1]<<16|r[64*c+4*p+2]<<8|r[64*c+4*p+3];u[c]=l}u[s-1][14]=8*(r.length-1)/Math.pow(2,32),u[s-1][14]=Math.floor(u[s-1][14]),u[s-1][15]=8*(r.length-1)&4294967295;for(var d=0;d<s;++d){for(var h=new Uint32Array(80),v=0;v<16;++v)h[v]=u[d][v];for(var y=16;y<80;++y)h[y]=o(h[y-3]^h[y-8]^h[y-14]^h[y-16],1);for(var g=t[0],b=t[1],w=t[2],U=t[3],A=t[4],I=0;I<80;++I){var m=Math.floor(I/20),C=o(g,5)+a(m,b,w,U)+A+e[m]+h[I]>>>0;A=U,U=w,w=o(b,30)>>>0,b=g,g=C}t[0]=t[0]+g>>>0,t[1]=t[1]+b>>>0,t[2]=t[2]+w>>>0,t[3]=t[3]+U>>>0,t[4]=t[4]+A>>>0}return[t[0]>>24&255,t[0]>>16&255,t[0]>>8&255,255&t[0],t[1]>>24&255,t[1]>>16&255,t[1]>>8&255,255&t[1],t[2]>>24&255,t[2]>>16&255,t[2]>>8&255,255&t[2],t[3]>>24&255,t[3]>>16&255,t[3]>>8&255,255&t[3],t[4]>>24&255,t[4]>>16&255,t[4]>>8&255,255&t[4]]}))}));!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).uuidValidate=t()}(this,(function(){"use strict";var e=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;return function(t){return"string"==typeof t&&e.test(t)}}));!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).uuidVersion=t()}(this,(function(){"use strict";var e=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;return function(t){if(!function(t){return"string"==typeof t&&e.test(t)}(t))throw TypeError("Invalid UUID");return parseInt(t.substr(14,1),16)}}));"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _v = _interopRequireDefault(require("./v1.js"));

var _v2 = _interopRequireDefault(require("./v3.js"));

var _v3 = _interopRequireDefault(require("./v4.js"));

var _v4 = _interopRequireDefault(require("./v5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function usage() {
  console.log('Usage:');
  console.log('  uuid');
  console.log('  uuid v1');
  console.log('  uuid v3 <name> <namespace uuid>');
  console.log('  uuid v4');
  console.log('  uuid v5 <name> <namespace uuid>');
  console.log('  uuid --help');
  console.log('\nNote: <namespace uuid> may be "URL" or "DNS" to use the corresponding UUIDs defined by RFC4122');
}

const args = process.argv.slice(2);

if (args.indexOf('--help') >= 0) {
  usage();
  process.exit(0);
}

const version = args.shift() || 'v4';

switch (version) {
  case 'v1':
    console.log((0, _v.default)());
    break;

  case 'v3':
    {
      const name = args.shift();
      let namespace = args.shift();
      (0, _assert.default)(name != null, 'v3 name not specified');
      (0, _assert.default)(namespace != null, 'v3 namespace not specified');

      if (namespace === 'URL') {
        namespace = _v2.default.URL;
      }

      if (namespace === 'DNS') {
        namespace = _v2.default.DNS;
      }

      console.log((0, _v2.default)(name, namespace));
      break;
    }

  case 'v4':
    console.log((0, _v3.default)());
    break;

  case 'v5':
    {
      const name = args.shift();
      let namespace = args.shift();
      (0, _assert.default)(name != null, 'v5 name not specified');
      (0, _assert.default)(namespace != null, 'v5 namespace not specified');

      if (namespace === 'URL') {
        namespace = _v4.default.URL;
      }

      if (namespace === 'DNS') {
        namespace = _v4.default.DNS;
      }

      console.log((0, _v4.default)(name, namespace));
      break;
    }

  default:
    usage();
    process.exit(1);
}"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _md = _interopRequireDefault(require("./md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _sha = _interopRequireDefault(require("./sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regex = _interopRequireDefault(require("./regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports.default = _default;"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports.default = _default;The MIT License (MIT)

Copyright (c) 2010-2020 Robert Kieffer and other contributors

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
{
  "name": "uuid",
  "version": "8.3.2",
  "description": "RFC4122 (v1, v4, and v5) UUIDs",
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "keywords": [
    "uuid",
    "guid",
    "rfc4122"
  ],
  "license": "MIT",
  "bin": {
    "uuid": "./dist/bin/uuid"
  },
  "sideEffects": false,
  "main": "./dist/index.js",
  "exports": {
    ".": {
      "node": {
        "module": "./dist/esm-node/index.js",
        "require": "./dist/index.js",
        "import": "./wrapper.mjs"
      },
      "default": "./dist/esm-browser/index.js"
    },
    "./package.json": "./package.json"
  },
  "module": "./dist/esm-node/index.js",
  "browser": {
    "./dist/md5.js": "./dist/md5-browser.js",
    "./dist/rng.js": "./dist/rng-browser.js",
    "./dist/sha1.js": "./dist/sha1-browser.js",
    "./dist/esm-node/index.js": "./dist/esm-browser/index.js"
  },
  "files": [
    "CHANGELOG.md",
    "CONTRIBUTING.md",
    "LICENSE.md",
    "README.md",
    "dist",
    "wrapper.mjs"
  ],
  "devDependencies": {
    "@babel/cli": "7.11.6",
    "@babel/core": "7.11.6",
    "@babel/preset-env": "7.11.5",
    "@commitlint/cli": "11.0.0",
    "@commitlint/config-conventional": "11.0.0",
    "@rollup/plugin-node-resolve": "9.0.0",
    "babel-eslint": "10.1.0",
    "bundlewatch": "0.3.1",
    "eslint": "7.10.0",
    "eslint-config-prettier": "6.12.0",
    "eslint-config-standard": "14.1.1",
    "eslint-plugin-import": "2.22.1",
    "eslint-plugin-node": "11.1.0",
    "eslint-plugin-prettier": "3.1.4",
    "eslint-plugin-promise": "4.2.1",
    "eslint-plugin-standard": "4.0.1",
    "husky": "4.3.0",
    "jest": "25.5.4",
    "lint-staged": "10.4.0",
    "npm-run-all": "4.1.5",
    "optional-dev-dependency": "2.0.1",
    "prettier": "2.1.2",
    "random-seed": "0.3.0",
    "rollup": "2.28.2",
    "rollup-plugin-terser": "7.0.2",
    "runmd": "1.3.2",
    "standard-version": "9.0.0"
  },
  "optionalDevDependencies": {
    "@wdio/browserstack-service": "6.4.0",
    "@wdio/cli": "6.4.0",
    "@wdio/jasmine-framework": "6.4.0",
    "@wdio/local-runner": "6.4.0",
    "@wdio/spec-reporter": "6.4.0",
    "@wdio/static-server-service": "6.4.0",
    "@wdio/sync": "6.4.0"
  },
  "scripts": {
    "examples:browser:webpack:build": "cd examples/browser-webpack && npm install && npm run build",
    "examples:browser:rollup:build": "cd examples/browser-rollup && npm install && npm run build",
    "examples:node:commonjs:test": "cd examples/node-commonjs && npm install && npm test",
    "examples:node:esmodules:test": "cd examples/node-esmodules && npm install && npm test",
    "lint": "npm run eslint:check && npm run prettier:check",
    "eslint:check": "eslint src/ test/ examples/ *.js",
    "eslint:fix": "eslint --fix src/ test/ examples/ *.js",
    "pretest": "[ -n $CI ] || npm run build",
    "test": "BABEL_ENV=commonjs node --throw-deprecation node_modules/.bin/jest test/unit/",
    "pretest:browser": "optional-dev-dependency && npm run build && npm-run-all --parallel examples:browser:**",
    "test:browser": "wdio run ./wdio.conf.js",
    "pretest:node": "npm run build",
    "test:node": "npm-run-all --parallel examples:node:**",
    "test:pack": "./scripts/testpack.sh",
    "pretest:benchmark": "npm run build",
    "test:benchmark": "cd examples/benchmark && npm install && npm test",
    "prettier:check": "prettier --ignore-path .prettierignore --check '**/*.{js,jsx,json,md}'",
    "prettier:fix": "prettier --ignore-path .prettierignore --write '**/*.{js,jsx,json,md}'",
    "bundlewatch": "npm run pretest:browser && bundlewatch --config bundlewatch.config.json",
    "md": "runmd --watch --output=README.md README_js.md",
    "docs": "( node --version | grep -q 'v12' ) && ( npm run build && runmd --output=README.md README_js.md )",
    "docs:diff": "npm run docs && git diff --quiet README.md",
    "build": "./scripts/build.sh",
    "prepack": "npm run build",
    "release": "standard-version --no-verify"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/uuidjs/uuid.git"
  },
  "husky": {
    "hooks": {
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.{js,jsx,json,md}": [
      "prettier --write"
    ],
    "*.{js,jsx}": [
      "eslint --fix"
    ]
  },
  "standard-version": {
    "scripts": {
      "postchangelog": "prettier --write CHANGELOG.md"
    }
  }
}
<!--
  -- This file is auto-generated from README_js.md. Changes should be made there.
  -->

# uuid [![CI](https://github.com/uuidjs/uuid/workflows/CI/badge.svg)](https://github.com/uuidjs/uuid/actions?query=workflow%3ACI) [![Browser](https://github.com/uuidjs/uuid/workflows/Browser/badge.svg)](https://github.com/uuidjs/uuid/actions?query=workflow%3ABrowser)

For the creation of [RFC4122](http://www.ietf.org/rfc/rfc4122.txt) UUIDs

- **Complete** - Support for RFC4122 version 1, 3, 4, and 5 UUIDs
- **Cross-platform** - Support for ...
  - CommonJS, [ECMAScript Modules](#ecmascript-modules) and [CDN builds](#cdn-builds)
  - Node 8, 10, 12, 14
  - Chrome, Safari, Firefox, Edge, IE 11 browsers
  - Webpack and rollup.js module bundlers
  - [React Native / Expo](#react-native--expo)
- **Secure** - Cryptographically-strong random values
- **Small** - Zero-dependency, small footprint, plays nice with "tree shaking" packagers
- **CLI** - Includes the [`uuid` command line](#command-line) utility

**Upgrading from `uuid@3.x`?** Your code is probably okay, but check out [Upgrading From `uuid@3.x`](#upgrading-from-uuid3x) for details.

## Quickstart

To create a random UUID...

**1. Install**

```shell
npm install uuid
```

**2. Create a UUID** (ES6 module syntax)

```javascript
import { v4 as uuidv4 } from 'uuid';
uuidv4(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'
```

... or using CommonJS syntax:

```javascript
const { v4: uuidv4 } = require('uuid');
uuidv4(); // ⇨ '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'
```

For timestamp UUIDs, namespace UUIDs, and other options read on ...

## API Summary

|  |  |  |
| --- | --- | --- |
| [`uuid.NIL`](#uuidnil) | The nil UUID string (all zeros) | New in `uuid@8.3` |
| [`uuid.parse()`](#uuidparsestr) | Convert UUID string to array of bytes | New in `uuid@8.3` |
| [`uuid.stringify()`](#uuidstringifyarr-offset) | Convert array of bytes to UUID string | New in `uuid@8.3` |
| [`uuid.v1()`](#uuidv1options-buffer-offset) | Create a version 1 (timestamp) UUID |  |
| [`uuid.v3()`](#uuidv3name-namespace-buffer-offset) | Create a version 3 (namespace w/ MD5) UUID |  |
| [`uuid.v4()`](#uuidv4options-buffer-offset) | Create a version 4 (random) UUID |  |
| [`uuid.v5()`](#uuidv5name-namespace-buffer-offset) | Create a version 5 (namespace w/ SHA-1) UUID |  |
| [`uuid.validate()`](#uuidvalidatestr) | Test a string to see if it is a valid UUID | New in `uuid@8.3` |
| [`uuid.version()`](#uuidversionstr) | Detect RFC version of a UUID | New in `uuid@8.3` |

## API

### uuid.NIL

The nil UUID string (all zeros).

Example:

```javascript
import { NIL as NIL_UUID } from 'uuid';

NIL_UUID; // ⇨ '00000000-0000-0000-0000-000000000000'
```

### uuid.parse(str)

Convert UUID string to array of bytes

|           |                                          |
| --------- | ---------------------------------------- |
| `str`     | A valid UUID `String`                    |
| _returns_ | `Uint8Array[16]`                         |
| _throws_  | `TypeError` if `str` is not a valid UUID |

Note: Ordering of values in the byte arrays used by `parse()` and `stringify()` follows the left &Rarr; right order of hex-pairs in UUID strings. As shown in the example below.

Example:

```javascript
import { parse as uuidParse } from 'uuid';

// Parse a UUID
const bytes = uuidParse('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b');

// Convert to hex strings to show byte order (for documentation purposes)
[...bytes].map((v) => v.toString(16).padStart(2, '0')); // ⇨ 
  // [
  //   '6e', 'c0', 'bd', '7f',
  //   '11', 'c0', '43', 'da',
  //   '97', '5e', '2a', '8a',
  //   'd9', 'eb', 'ae', '0b'
  // ]
```

### uuid.stringify(arr[, offset])

Convert array of bytes to UUID string

|                |                                                                              |
| -------------- | ---------------------------------------------------------------------------- |
| `arr`          | `Array`-like collection of 16 values (starting from `offset`) between 0-255. |
| [`offset` = 0] | `Number` Starting index in the Array                                         |
| _returns_      | `String`                                                                     |
| _throws_       | `TypeError` if a valid UUID string cannot be generated                       |

Note: Ordering of values in the byte arrays used by `parse()` and `stringify()` follows the left &Rarr; right order of hex-pairs in UUID strings. As shown in the example below.

Example:

```javascript
import { stringify as uuidStringify } from 'uuid';

const uuidBytes = [
  0x6e,
  0xc0,
  0xbd,
  0x7f,
  0x11,
  0xc0,
  0x43,
  0xda,
  0x97,
  0x5e,
  0x2a,
  0x8a,
  0xd9,
  0xeb,
  0xae,
  0x0b,
];

uuidStringify(uuidBytes); // ⇨ '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'
```

### uuid.v1([options[, buffer[, offset]]])

Create an RFC version 1 (timestamp) UUID

|  |  |
| --- | --- |
| [`options`] | `Object` with one or more of the following properties: |
| [`options.node` ] | RFC "node" field as an `Array[6]` of byte values (per 4.1.6) |
| [`options.clockseq`] | RFC "clock sequence" as a `Number` between 0 - 0x3fff |
| [`options.msecs`] | RFC "timestamp" field (`Number` of milliseconds, unix epoch) |
| [`options.nsecs`] | RFC "timestamp" field (`Number` of nanseconds to add to `msecs`, should be 0-10,000) |
| [`options.random`] | `Array` of 16 random bytes (0-255) |
| [`options.rng`] | Alternative to `options.random`, a `Function` that returns an `Array` of 16 random bytes (0-255) |
| [`buffer`] | `Array \| Buffer` If specified, uuid will be written here in byte-form, starting at `offset` |
| [`offset` = 0] | `Number` Index to start writing UUID bytes in `buffer` |
| _returns_ | UUID `String` if no `buffer` is specified, otherwise returns `buffer` |
| _throws_ | `Error` if more than 10M UUIDs/sec are requested |

Note: The default [node id](https://tools.ietf.org/html/rfc4122#section-4.1.6) (the last 12 digits in the UUID) is generated once, randomly, on process startup, and then remains unchanged for the duration of the process.

Note: `options.random` and `options.rng` are only meaningful on the very first call to `v1()`, where they may be passed to initialize the internal `node` and `clockseq` fields.

Example:

```javascript
import { v1 as uuidv1 } from 'uuid';

uuidv1(); // ⇨ '2c5ea4c0-4067-11e9-8bad-9b1deb4d3b7d'
```

Example using `options`:

```javascript
import { v1 as uuidv1 } from 'uuid';

const v1options = {
  node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab],
  clockseq: 0x1234,
  msecs: new Date('2011-11-01').getTime(),
  nsecs: 5678,
};
uuidv1(v1options); // ⇨ '710b962e-041c-11e1-9234-0123456789ab'
```

### uuid.v3(name, namespace[, buffer[, offset]])

Create an RFC version 3 (namespace w/ MD5) UUID

API is identical to `v5()`, but uses "v3" instead.

&#x26a0;&#xfe0f; Note: Per the RFC, "_If backward compatibility is not an issue, SHA-1 [Version 5] is preferred_."

### uuid.v4([options[, buffer[, offset]]])

Create an RFC version 4 (random) UUID

|  |  |
| --- | --- |
| [`options`] | `Object` with one or more of the following properties: |
| [`options.random`] | `Array` of 16 random bytes (0-255) |
| [`options.rng`] | Alternative to `options.random`, a `Function` that returns an `Array` of 16 random bytes (0-255) |
| [`buffer`] | `Array \| Buffer` If specified, uuid will be written here in byte-form, starting at `offset` |
| [`offset` = 0] | `Number` Index to start writing UUID bytes in `buffer` |
| _returns_ | UUID `String` if no `buffer` is specified, otherwise returns `buffer` |

Example:

```javascript
import { v4 as uuidv4 } from 'uuid';

uuidv4(); // ⇨ '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'
```

Example using predefined `random` values:

```javascript
import { v4 as uuidv4 } from 'uuid';

const v4options = {
  random: [
    0x10,
    0x91,
    0x56,
    0xbe,
    0xc4,
    0xfb,
    0xc1,
    0xea,
    0x71,
    0xb4,
    0xef,
    0xe1,
    0x67,
    0x1c,
    0x58,
    0x36,
  ],
};
uuidv4(v4options); // ⇨ '109156be-c4fb-41ea-b1b4-efe1671c5836'
```

### uuid.v5(name, namespace[, buffer[, offset]])

Create an RFC version 5 (namespace w/ SHA-1) UUID

|  |  |
| --- | --- |
| `name` | `String \| Array` |
| `namespace` | `String \| Array[16]` Namespace UUID |
| [`buffer`] | `Array \| Buffer` If specified, uuid will be written here in byte-form, starting at `offset` |
| [`offset` = 0] | `Number` Index to start writing UUID bytes in `buffer` |
| _returns_ | UUID `String` if no `buffer` is specified, otherwise returns `buffer` |

Note: The RFC `DNS` and `URL` namespaces are available as `v5.DNS` and `v5.URL`.

Example with custom namespace:

```javascript
import { v5 as uuidv5 } from 'uuid';

// Define a custom namespace.  Readers, create your own using something like
// https://www.uuidgenerator.net/
const MY_NAMESPACE = '1b671a64-40d5-491e-99b0-da01ff1f3341';

uuidv5('Hello, World!', MY_NAMESPACE); // ⇨ '630eb68f-e0fa-5ecc-887a-7c7a62614681'
```

Example with RFC `URL` namespace:

```javascript
import { v5 as uuidv5 } from 'uuid';

uuidv5('https://www.w3.org/', uuidv5.URL); // ⇨ 'c106a26a-21bb-5538-8bf2-57095d1976c1'
```

### uuid.validate(str)

Test a string to see if it is a valid UUID

|           |                                                     |
| --------- | --------------------------------------------------- |
| `str`     | `String` to validate                                |
| _returns_ | `true` if string is a valid UUID, `false` otherwise |

Example:

```javascript
import { validate as uuidValidate } from 'uuid';

uuidValidate('not a UUID'); // ⇨ false
uuidValidate('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'); // ⇨ true
```

Using `validate` and `version` together it is possible to do per-version validation, e.g. validate for only v4 UUIds.

```javascript
import { version as uuidVersion } from 'uuid';
import { validate as uuidValidate } from 'uuid';

function uuidValidateV4(uuid) {
  return uuidValidate(uuid) && uuidVersion(uuid) === 4;
}

const v1Uuid = 'd9428888-122b-11e1-b85c-61cd3cbb3210';
const v4Uuid = '109156be-c4fb-41ea-b1b4-efe1671c5836';

uuidValidateV4(v4Uuid); // ⇨ true
uuidValidateV4(v1Uuid); // ⇨ false
```

### uuid.version(str)

Detect RFC version of a UUID

|           |                                          |
| --------- | ---------------------------------------- |
| `str`     | A valid UUID `String`                    |
| _returns_ | `Number` The RFC version of the UUID     |
| _throws_  | `TypeError` if `str` is not a valid UUID |

Example:

```javascript
import { version as uuidVersion } from 'uuid';

uuidVersion('45637ec4-c85f-11ea-87d0-0242ac130003'); // ⇨ 1
uuidVersion('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'); // ⇨ 4
```

## Command Line

UUIDs can be generated from the command line using `uuid`.

```shell
$ uuid
ddeb27fb-d9a0-4624-be4d-4615062daed4
```

The default is to generate version 4 UUIDS, however the other versions are supported. Type `uuid --help` for details:

```shell
$ uuid --help

Usage:
  uuid
  uuid v1
  uuid v3 <name> <namespace uuid>
  uuid v4
  uuid v5 <name> <namespace uuid>
  uuid --help

Note: <namespace uuid> may be "URL" or "DNS" to use the corresponding UUIDs
defined by RFC4122
```

## ECMAScript Modules

This library comes with [ECMAScript Modules](https://www.ecma-international.org/ecma-262/6.0/#sec-modules) (ESM) support for Node.js versions that support it ([example](./examples/node-esmodules/)) as well as bundlers like [rollup.js](https://rollupjs.org/guide/en/#tree-shaking) ([example](./examples/browser-rollup/)) and [webpack](https://webpack.js.org/guides/tree-shaking/) ([example](./examples/browser-webpack/)) (targeting both, Node.js and browser environments).

```javascript
import { v4 as uuidv4 } from 'uuid';
uuidv4(); // ⇨ '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'
```

To run the examples you must first create a dist build of this library in the module root:

```shell
npm run build
```

## CDN Builds

### ECMAScript Modules

To load this module directly into modern browsers that [support loading ECMAScript Modules](https://caniuse.com/#feat=es6-module) you can make use of [jspm](https://jspm.org/):

```html
<script type="module">
  import { v4 as uuidv4 } from 'https://jspm.dev/uuid';
  console.log(uuidv4()); // ⇨ '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'
</script>
```

### UMD

To load this module directly into older browsers you can use the [UMD (Universal Module Definition)](https://github.com/umdjs/umd) builds from any of the following CDNs:

**Using [UNPKG](https://unpkg.com/uuid@latest/dist/umd/)**:

```html
<script src="https://unpkg.com/uuid@latest/dist/umd/uuidv4.min.js"></script>
```

**Using [jsDelivr](https://cdn.jsdelivr.net/npm/uuid@latest/dist/umd/)**:

```html
<script src="https://cdn.jsdelivr.net/npm/uuid@latest/dist/umd/uuidv4.min.js"></script>
```

**Using [cdnjs](https://cdnjs.com/libraries/uuid)**:

```html
<script src="https://cdnjs.cloudflare.com/ajax/libs/uuid/8.1.0/uuidv4.min.js"></script>
```

These CDNs all provide the same [`uuidv4()`](#uuidv4options-buffer-offset) method:

```html
<script>
  uuidv4(); // ⇨ '55af1e37-0734-46d8-b070-a1e42e4fc392'
</script>
```

Methods for the other algorithms ([`uuidv1()`](#uuidv1options-buffer-offset), [`uuidv3()`](#uuidv3name-namespace-buffer-offset) and [`uuidv5()`](#uuidv5name-namespace-buffer-offset)) are available from the files `uuidv1.min.js`, `uuidv3.min.js` and `uuidv5.min.js` respectively.

## "getRandomValues() not supported"

This error occurs in environments where the standard [`crypto.getRandomValues()`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) API is not supported. This issue can be resolved by adding an appropriate polyfill:

### React Native / Expo

1. Install [`react-native-get-random-values`](https://github.com/LinusU/react-native-get-random-values#readme)
1. Import it _before_ `uuid`. Since `uuid` might also appear as a transitive dependency of some other imports it's safest to just import `react-native-get-random-values` as the very first thing in your entry point:

```javascript
import 'react-native-get-random-values';
import { v4 as uuidv4 } from 'uuid';
```

Note: If you are using Expo, you must be using at least `react-native-get-random-values@1.5.0` and `expo@39.0.0`.

### Web Workers / Service Workers (Edge <= 18)

[In Edge <= 18, Web Crypto is not supported in Web Workers or Service Workers](https://caniuse.com/#feat=cryptography) and we are not aware of a polyfill (let us know if you find one, please).

## Upgrading From `uuid@7.x`

### Only Named Exports Supported When Using with Node.js ESM

`uuid@7.x` did not come with native ECMAScript Module (ESM) support for Node.js. Importing it in Node.js ESM consequently imported the CommonJS source with a default export. This library now comes with true Node.js ESM support and only provides named exports.

Instead of doing:

```javascript
import uuid from 'uuid';
uuid.v4();
```

you will now have to use the named exports:

```javascript
import { v4 as uuidv4 } from 'uuid';
uuidv4();
```

### Deep Requires No Longer Supported

Deep requires like `require('uuid/v4')` [which have been deprecated in `uuid@7.x`](#deep-requires-now-deprecated) are no longer supported.

## Upgrading From `uuid@3.x`

"_Wait... what happened to `uuid@4.x` - `uuid@6.x`?!?_"

In order to avoid confusion with RFC [version 4](#uuidv4options-buffer-offset) and [version 5](#uuidv5name-namespace-buffer-offset) UUIDs, and a possible [version 6](http://gh.peabody.io/uuidv6/), releases 4 thru 6 of this module have been skipped.

### Deep Requires Now Deprecated

`uuid@3.x` encouraged the use of deep requires to minimize the bundle size of browser builds:

```javascript
const uuidv4 = require('uuid/v4'); // <== NOW DEPRECATED!
uuidv4();
```

As of `uuid@7.x` this library now provides ECMAScript modules builds, which allow packagers like Webpack and Rollup to do "tree-shaking" to remove dead code. Instead, use the `import` syntax:

```javascript
import { v4 as uuidv4 } from 'uuid';
uuidv4();
```

... or for CommonJS:

```javascript
const { v4: uuidv4 } = require('uuid');
uuidv4();
```

### Default Export Removed

`uuid@3.x` was exporting the Version 4 UUID method as a default export:

```javascript
const uuid = require('uuid'); // <== REMOVED!
```

This usage pattern was already discouraged in `uuid@3.x` and has been removed in `uuid@7.x`.

----
Markdown generated from [README_js.md](README_js.md) by [![RunMD Logo](http://i.imgur.com/h0FVyzU.png)](https://github.com/broofa/runmd)import uuid from './dist/index.js';
export const v1 = uuid.v1;
export const v3 = uuid.v3;
export const v4 = uuid.v4;
export const v5 = uuid.v5;
export const NIL = uuid.NIL;
export const version = uuid.version;
export const validate = uuid.validate;
export const stringify = uuid.stringify;
export const parse = uuid.parse;
{
  "name": "postman-runtime",
  "version": "7.43.2",
  "description": "Underlying library of executing Postman Collections",
  "author": "Postman Inc.",
  "license": "Apache-2.0",
  "main": "index.js",
  "browser": {
    "./lib/requester/request-wrapper.js": "./lib/requester/browser/request.js",
    "postman-request": "./lib/requester/browser/request.js",
    "jose": "./node_modules/jose/dist/browser/bundle.js"
  },
  "homepage": "https://github.com/postmanlabs/postman-runtime#readme",
  "bugs": {
    "email": "help@postman.com"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postmanlabs/postman-runtime.git"
  },
  "keywords": [
    "postman",
    "collection",
    "runtime",
    "runner"
  ],
  "scripts": {
    "codecov": "node npm/publish-coverage.js",
    "dist": "node npm/dist.js",
    "memory-check": "npm/memory-check.sh",
    "prepack": "npm run dist",
    "release": "node npm/create-release.js",
    "test": "npm run test-lint && npm run test-system && npm run test-unit && npm run test-integration && npm run test-integration-legacy",
    "test-browser": "npm run dist && node npm/test-browser.js",
    "test-contract": "node npm/test-contract.js",
    "test-electron": "node npm/test-electron.js",
    "test-integration": "nyc --nycrc-path=.nycrc.js node npm/test-integration.js",
    "test-integration-legacy": "nyc --nycrc-path=.nycrc.js node npm/test-integration-legacy.js",
    "test-integration-newman": "node npm/test-integration-newman.js",
    "test-lint": "node npm/test-lint.js",
    "test-system": "node npm/test-system.js",
    "test-unit": "nyc --nycrc-path=.nycrc.js node npm/test-unit.js"
  },
  "dependencies": {
    "@postman/tough-cookie": "4.1.3-postman.1",
    "async": "3.2.6",
    "aws4": "1.13.2",
    "handlebars": "4.7.8",
    "httpntlm": "1.8.13",
    "jose": "5.10.0",
    "js-sha512": "0.9.0",
    "lodash": "4.17.21",
    "mime-types": "2.1.35",
    "node-forge": "1.3.1",
    "node-oauth1": "1.3.0",
    "performance-now": "2.1.0",
    "postman-collection": "5.0.0",
    "postman-request": "2.88.1-postman.42",
    "postman-sandbox": "6.0.0",
    "postman-url-encoder": "3.0.6",
    "serialised-error": "1.1.3",
    "strip-json-comments": "3.1.1",
    "uuid": "8.3.2"
  },
  "devDependencies": {
    "@postman/shipit": "^0.4.0",
    "@stylistic/eslint-plugin-js": "^1.8.0",
    "ajv": "^8.17.1",
    "browserify": "^17.0.1",
    "chai": "^4.5.0",
    "chalk": "^4.1.2",
    "dependency-check": "^4.1.0",
    "editorconfig": "^2.0.1",
    "eslint": "^8.57.0",
    "eslint-plugin-jsdoc": "^47.0.2",
    "eslint-plugin-lodash": "^7.4.0",
    "eslint-plugin-mocha": "^10.5.0",
    "eslint-plugin-n": "^16.6.2",
    "eslint-plugin-security": "^2.1.1",
    "express": "^4.17.2",
    "graphql": "^16.10.0",
    "js-yaml": "^4.1.0",
    "karma": "^6.4.4",
    "karma-browserify": "^8.1.0",
    "karma-chrome-launcher": "^3.2.0",
    "karma-mocha": "^2.0.1",
    "karma-mocha-reporter": "^2.2.5",
    "mocha": "^11.1.0",
    "nyc": "^17.1.0",
    "parse-gitignore": "^2.0.0",
    "passport": "^0.7.0",
    "passport-http": "^0.3.0",
    "recursive-readdir": "^2.2.3",
    "server-destroy": "^1.0.1",
    "shelljs": "^0.8.5",
    "sinon": "^18.0.0",
    "teleport-javascript": "^1.0.0",
    "terser": "^5.39.0",
    "tmp": "^0.2.3",
    "webpack": "^5.98.0",
    "yankee": "^1.0.8"
  },
  "engines": {
    "node": ">=18"
  }
}
# Postman Runtime [![CI](https://github.com/postmanlabs/postman-runtime/actions/workflows/ci.yml/badge.svg?branch=develop)](https://github.com/postmanlabs/postman-runtime/actions/workflows/ci.yml) [![codecov](https://codecov.io/gh/postmanlabs/postman-runtime/branch/develop/graph/badge.svg)](https://codecov.io/gh/postmanlabs/postman-runtime)

> This is a low-level library used as the backbone for all Collection running & Request sending functionality, in
> the Postman App, and allied systems ([Postman Monitoring](https://www.getpostman.com/docs/schedule_cloud_runs),
[Newman](https://github.com/postmanlabs/newman))

> If you are looking to execute collections, you should be using Newman, this is very low level.

## Options

Postman Runtime supports a lot of options to customize its behavior for different environments and use-cases.

```javascript
var runner = new runtime.Runner(); // runtime = require('postman-runtime');

// a collection object constructed using the Postman Collection SDK.
var collection = new sdk.Collection();

runner.run(collection, {
    // Iteration Data
    data: [],

    // Timeouts (in ms)
    timeout: {
        request: 30000,
        script: 5000
    },

    // Number of iterations
    iterationCount: 1,

    // Control flags (you can only specify one of these):

    // - gracefully halts on errors (errors in request scripts or while sending the request)
    //   calls the `item` and `iteration` callbacks and does not run any further items (requests)
    stopOnError: true,

    // - abruptly halts the run on errors, and directly calls the `done` callback
    abortOnError: true,

    // - gracefully halts on errors _or_ test failures.
    //   calls the `item` and `iteration` callbacks and does not run any further items (requests)
    stopOnFailure: true,

    // - abruptly halts the run on errors or test failures, and directly calls the `done` callback
    abortOnFailure: true,

    // Environment (a "VariableScope" from the SDK)
    environment: new sdk.VariableScope(),

    // Globals (a "VariableScope" from the SDK)
    globals: new sdk.VariableScope(),

    // Local variables (a "VariableScope" from the SDK)
    localVariables: new sdk.VariableScope(),

    // Execute a folder/request using id/name or path
    entrypoint: {
        // execute a folder/request using id or name
        execute: 'folderName',
        // idOrName in case of execute and path in case of path
        // is chosen to specify the folder/request to be executed
        lookupStrategy: 'path',
        // execute a folder/request using a path
        path: ['grand_parent_folder_idOrName', 'parent_folder_idOrName']
    },

    // Configure delays (in ms)
    delay: {
        // between each request
        item: 1000,
        // between iterations
        iteration: 1000
    },

    // Used to fetch contents of files, certificates wherever needed
    fileResolver: require('fs'),

    // Options specific to the requester
    requester: {

        // An object compatible with the cookieJar provided by the 'postman-request' module.
        // To limit programmatic cookie access to only whitelisted domains, add `allowProgrammaticAccess`
        // method to the jar. Example:
        // jar.allowProgrammaticAccess = function (domain) { return domain === 'postman-echo.com'; };
        cookieJar: jar,

        // Controls redirect behavior (only supported on Node, ignored in the browser)
        followRedirects: true,

        // Redirect with the original HTTP method (only supported on Node, ignored in the browser)
        followOriginalHttpMethod: false,

        // Maximum number of redirects to follow (only supported on Node, ignored in the browser)
        maxRedirects: 10,

        // Maximum allowed response size in bytes (only supported on Node, ignored in the browser)
        maxResponseSize: 1000000,

        // HTTP Protocol version to use. Valid options are http1, http2, and auto (only supported on Node, ignored in the browser)
        protocolVersion: 'http1',

        // Enable to use WHATWG URL parser and encoder
        useWhatWGUrlParser: true,

        // Removes the `referer` header when a redirect happens (only supported on Node, ignored in the browser)
        removeRefererHeaderOnRedirect: false,

        // Enable or disable certificate verification (only supported on Node, ignored in the browser)
        strictSSL: false,

        // Use an insecure HTTP parser that accepts invalid HTTP headers (only supported on Node, ignored in the browser)
        insecureHTTPParser: false,

        // Enable or disable detailed request-response timings (only supported on Node, ignored in the browser)
        timings: true,

        // Enable or disable verbose level history (only supported on Node, ignored in the browser)
        verbose: false,

        // Implicitly add `Cache-Control` system header in request (only supported on Node, ignored in the browser)
        implicitCacheControl: true,

        // Implicitly add `Postman-Token` system header in request (only supported on Node, ignored in the browser)
        implicitTraceHeader: true,

        // Add system headers to all requests which cannot be overridden or disabled
        systemHeaders: { 'User-Agent': 'PostmanRuntime' }

        // Extend well known "root" CAs with the extra certificates in file. The file should consist of one or more trusted certificates in PEM format. (only supported on Node, ignored in the browser)
        extendedRootCA: 'path/to/extra/CA/certs.pem',

        // network related options
        network: {
            hostLookup: { // hosts file configuration for dns lookup
                type: 'hostIpMap',
                hostIpMap: {
                    'domain.com': '127.0.0.1',
                    'ipv6-domain.com': '::1',
                }
            },
            restrictedAddresses: {'192.168.1.1': true} // Allows restricting IP/host in requests
        },

        // Custom requesting agents (only supported on Node, ignored in the browser)
        agents: {
            http: {
                agentClass: http.Agent,
                agentOptions: { keepAlive: true, timeout: 399 }
            },
            https: new https.Agent({ keepAlive: true })
        },

        // authorizer related options
        authorizer: {
            // helper to refresh oauth2 tokens during execution
            refreshOAuth2Token: function (id, callback) {
                // calls the callback with the refreshed token or an error
                // callback(err, token)
            },
        }
    },

    // Options specific to the script execution
    script: {

        // Option to set whether to send console logs in serialized format which can be parsed
        // using the `teleport-javascript` serialization library.
        serializeLogs: false,

        // Function to resolve packages that are used in the script.
        packageResolver: function ({ packages /* sdk.Script.packages */ }, callback) {
            return callback(null, {
                pkg1: {
                    data: 'packagedata'
                },
                pkg2: {
                    error: 'Failed to get package'
                }
            });
        }
    },

    // A ProxyConfigList, from the SDK
    proxies: new sdk.ProxyConfigList(),

    // A function that fetches the system proxy for a given URL.
    systemProxy: function (url, callback) { return callback(null, {/* ProxyConfig object */}) },

    // Opt-out of [proxy configured using environment variables]((https://github.com/postmanlabs/postman-request#controlling-proxy-behaviour-using-environment-variables) ) (only supported on Node, ignored in the browser)
    ignoreProxyEnvironmentVariables: false,

    // A CertificateList from the SDK
    certificates: new sdk.CertificateList(),

    // *note* Not implemented yet.
    // In the future, this will be used to read certificates from the OS keychain.
    systemCertificate: function() {}
}, function (err, run) {
    console.log('Created a new Run!');

    // Check the section below for detailed documentation on what callbacks should be.
    run.start(callbacks);
});
```

## Callbacks

You can pass a series of callbacks for runtime to execute as a collection is being executed.

```javascript
runner.run(collection, { /* options */ }, function(err, run) {
    run.start({
        // Called any time we see a new assertion in the test scripts
        assertion: function (cursor, assertions) {
            // cursor = {
            //     position: Number,
            //     iteration: Number,
            //     length: Number,
            //     cycles: Number,
            //     eof: Boolean,
            //     empty: Boolean,
            //     bof: Boolean,
            //     cr: Boolean,
            //     ref: String,
            //     scriptId: String,
            //     eventId: String
            // }

            // assertions: array of assertion objects
            // assertion: {
            //     error: Error,
            //     index: Number,
            //     name: String,
            //     skipped: Number,
            //     passed: Number
            // }
        },

        // Called when the run begins
        start: function (err, cursor) {
            // err: null or Error
            // cursor = {
            //     position: Number,
            //     iteration: Number,
            //     length: Number,
            //     cycles: Number,
            //     eof: Boolean,
            //     empty: Boolean,
            //     bof: Boolean,
            //     cr: Boolean,
            //     ref: String
            // }
        },

        // Called before starting a new iteration
        beforeIteration: function (err, cursor) {
            /* Same as arguments for "start" */
        },

        // Called when an iteration is completed
        iteration: function (err, cursor) {
            /* Same as arguments for "start" */
        },

        // Called before running a new Item (check the postman collection v2 format for what Item means)
        beforeItem: function (err, cursor, item) {
            // err, cursor: Same as arguments for "start"
            // item: sdk.Item
        },

        // Called after completion of an Item
        item: function (err, cursor, item, visualizer, result) {
            // err, cursor, item: Same as arguments for "beforeItem"

            // visualizer: null or object containing visualizer result that looks like this:
            //  {
            //      -- Tmeplate processing error
            //      error: <Error>
            //
            //      -- Data used for template processing
            //      data: <Object>
            //
            //      -- Processed template
            //      processedTemplate: <String>
            //  }

            // result: undefined or object containing following properties
            // {
            //      -- True for items skipped using pm.execution.skipRequest
            //         isSkipped: <Boolean>
            // }

        },

        // Called before running pre-request script(s) (Yes, Runtime supports multiple pre-request scripts!)
        beforePrerequest: function (err, cursor, events, item) {
            // err, cursor: Same as arguments for "start"
            // events: Array of sdk.Event objects
            // item: sdk.Item
        },

        // Called after running pre-request script(s)
        prerequest: function (err, cursor, results, item) {
            // err, cursor: Same as arguments for "start"
            // item: sdk.Item

            // results: Array of objects. Each object looks like this:
            //  {
            //      error: Error,
            //      event: sdk.Event,
            //      script: sdk.Script,
            //      result: {
            //          target: 'prerequest'
            //
            //          -- Updated environment
            //          environment: <VariableScope>
            //
            //          -- Updated globals
            //          globals: <VariableScope>
            //
            //          data: <Object of data variables>
            //          return: <Object, contains set next request params, etc>
            //      }
            //  }
        },

        // Called before running test script(s)
        beforeTest: function (err, cursor, events, item) {
            // err, cursor: Same as arguments for "start"
            // events: Array of sdk.Event objects
            // item: sdk.Item
        },

        // Called just after running test script (s)
        test: function (err, cursor, results, item) {
            // results: Array of objects. Each object looks like this:
            //  {
            //      error: Error,
            //      event: sdk.Event,
            //      script: sdk.Script,
            //      result: {
            //          target: 'test'
            //
            //          -- Updated environment
            //          environment: <VariableScope>
            //
            //          -- Updated globals
            //          globals: <VariableScope>
            //
            //          response: <sdk.Response>
            //          request: <sdk.Request>
            //          data: <Object of data variables>
            //          cookies: <Array of "sdk.Cookie" objects>
            //          tests: <Object>
            //          return: <Object, contains set next request params, etc>
            //      }
            //  }
        },

        // Called just before sending a request
        beforeRequest: function (err, cursor, request, item) {
            // err, cursor: Same as arguments for "start"
            // item: sdk.Item

            // request: sdk.request
        },

        // Called just after sending a request, may include request replays
        request: function (err, cursor, response, request, item, cookies, history) {
            // err, cursor: Same as arguments for "start"
            // item: sdk.Item

            // response: sdk.Response
            // request: sdk.request
        },

        // Called just after receiving the request-response without waiting for
        // the response body or, request to end.
        // Called once with response for each request in a collection
        responseStart: function (err, cursor, response, request, item, cookies, history) {
            // err, cursor: Same as arguments for "start"
            // item: sdk.Item

            // response: sdk.Response
            // request: sdk.request
        },

        // Called every time a complete server-sent event is received
        responseData: function (cursor, data) {
            // cursor - Same as arguments for "start"
            // data - Event buffer.
        },

        // Called once with response for each request in a collection
        response: function (err, cursor, response, request, item, cookies, history) {
            // err, cursor: Same as arguments for "start"
            // item: sdk.Item

            // response: sdk.Response
            // request: sdk.request
        },

        exception: function (cursor, err) {
             // Called when an exception occurs
             // @param {Object} cursor - A representation of the current run state.
             // @param {Error} err - An Error instance with name, message, and type properties.
        },

        // Called at the end of a run
        done: function (err) {
            // err: null or Error
            console.log('done');
        },

        // Called any time a console.* function is called in test/pre-request scripts
        console: function (cursor, level, ...logs) {},

        io: function (err, cursor, trace, ...otherArgs) {
            // err, cursor: Same as arguments for "start"
            // trace: An object which looks like this:
            // {
            //     -- Indicates the type of IO event, may be HTTP, File, etc. Any requests sent out as a part of
            //     -- auth flows, replays, etc will show up here.
            //     type: 'http',
            //
            //     -- Indicates what this IO event originated from, (collection, auth flows, etc)
            //     source: 'collection'
            // }
            // otherArgs: Variable number of arguments, specific to the type of the IO event.

            // For http type, the otherArgs are:
            // response: sdk.Response()
            // request: sdk.Request()
            // cookies: Array of sdk.Cookie()
        }
    });
});
```
module.exports=c=>c(null,"\"function\"==typeof require&&(globalThis._nodeRequires={buffer:require(\"buffer\")},require=null),require=function e(t,n,a){function r(o,s){if(!n[o]){if(!t[o]){var c=\"function\"==typeof require&&require;if(!s&&c)return c(o,!0);if(i)return i(o,!0);var u=new Error(\"Cannot find module '\"+o+\"'\");throw u.code=\"MODULE_NOT_FOUND\",u}var l=n[o]={exports:{}};t[o][0].call(l.exports,(function(e){return r(t[o][1][e]||e)}),l,l.exports,e,t,n,a)}return n[o].exports}for(var i=\"function\"==typeof require&&require,o=0;o<a.length;o++)r(a[o]);return r}({1:[function(e,t,n){var a=e(\"teleport-javascript\"),r=Array.prototype.slice,i=[\"log\",\"warn\",\"debug\",\"info\",\"error\",\"clear\"];function o(e,t){if(\"function\"==typeof t){const e=t.constructor&&t.constructor.name?t.constructor.name:\"Function\";return t.name?`[${e}: ${t.name}]`:`[${e}]`}return t instanceof WeakMap?\"[WeakMap]\":t instanceof WeakSet?\"[WeakSet]\":t instanceof ArrayBuffer?`[ArrayBuffer { byteLength: ${t.byteLength} }]`:t}t.exports=function PostmanConsole(e,t,n){const s=function(i){const s=r.call(arguments,1);n&&n[i].apply(n,s),e.dispatch(\"execution.console\",t,i,a.stringify(s,o))};i.forEach((t=>{this[t]=s.bind(e,t)}))}},{\"teleport-javascript\":559}],2:[function(e,t,n){const a=e(\"@postman/tough-cookie\").CookieJar,r=e(\"@postman/tough-cookie\").Cookie,i=e(\"postman-collection\").Cookie,o=e(\"postman-collection\").CookieList,s=e(\"postman-collection\").Url,c=\"function\",u=\"object\",l=\"string\",p=function(e){if(e)return r.fromJSON({key:e.name||e.key,value:e.value,expires:e.expires,maxAge:e.maxAge,domain:e.domain,path:e.path,secure:e.secure,httpOnly:e.httpOnly,hostOnly:e.hostOnly,extensions:e.extensions})},d=function(e){if(e)return new i({name:e.key,value:e.value,expires:\"Infinity\"===e.expires?null:e.expires,maxAge:e.maxAge,domain:e.domain,path:e.path,secure:e.secure,httpOnly:e.httpOnly,hostOnly:e.hostOnly,extensions:e.extensions})},f=function(e){return s.isUrl(e)?e:e&&typeof e===l?new s(e):null},h=function(e,t,n){if(typeof e===c)return t?e(t instanceof Error?t:new Error(t)):void e(null,n)},m=function(e,t,n){const a=()=>new Promise(((t,n)=>{e((function(e,a){if(e)return n(e instanceof Error?e:new Error(e));t(a)}))}));if(void 0===t)return a();if(typeof t!==c&&n)throw new TypeError(\"callback needs to be a function\");a().then((e=>{h(t,null,e)})).catch((e=>{h(t,e)}))},g=function(e,t,n,a){e.getCookies(t,(function(e,t){var r,i;if(e)return a(e);if(!t||!t.length)return a(null,null);for(r=0,i=t.length;r<i;r++)if(t[r].key===n)return a(null,t[r]);a(null,null)}))};t.exports=class PostmanCookieJar{constructor(e){this.store=e,this.jar=new a(e,{rejectPublicSuffixes:!1,looseMode:!0})}get(e,t,n){return m((n=>{if(!(e=f(e)))throw new TypeError(\"CookieJar.get() requires a valid url\");if(typeof t!==l)throw new TypeError(\"CookieJar.get() requires cookie name to be a string\");g(this.jar,e.toString(!0),t,(function(e,t){return e||!t?n(e,null):(t=d(t),n(null,t.valueOf()))}))}),n,!0)}getAll(e,t,n){return typeof t!==c||n||(n=t,t={}),void 0!==t||n||(t={}),m((n=>{if(!(e=f(e)))throw new TypeError(\"CookieJar.getAll() requires a valid url\");if(typeof t!==u)throw new TypeError(\"CookieJar.getAll() requires options to be an object\");t={http:!Object.hasOwn(t,\"http\")||Boolean(t.http),secure:Object.hasOwn(t,\"secure\")?Boolean(t.secure):void 0},this.jar.getCookies(e.toString(!0),t,(function(e,t){if(e)return n(e);n(null,new o(null,t&&t.map(d)))}))}),n,!0)}set(e,t,n,a){return typeof n!==c||a||(a=n,n=null),m((a=>{if(!(e=f(e)))throw new TypeError(\"CookieJar.set() requires a valid url\");var r;if(t&&n)r=p({name:t,value:n});else if(typeof t===u)r=p(t);else{if(typeof t!==l)throw new TypeError(\"CookieJar.set() requires a valid set cookie arguments\");r=t}this.jar.setCookie(r,e.toString(!0),(function(e,t){if(e)return a(e);a(null,d(t))}))}),a)}unset(e,t,n){return m((n=>{if(!(e=f(e)))throw new TypeError(\"CookieJar.unset() requires a valid url\");if(typeof t!==l)throw new TypeError(\"CookieJar.unset() requires cookie name to be a string\");var a=this.store;g(this.jar,e.toString(!0),t,(function(e,t){if(e||!t)return n(e);a.removeCookie(t.domain,t.path,t.key,(function(e){n(e)}))}))}),n)}clear(e,t){return m((t=>{if(!(e=f(e)))throw new TypeError(\"CookieJar.clear() requires a valid url\");var n=this.store;this.jar.getCookies(e.toString(!0),(function(e,a){if(e||!a)return t(e);!function(e,t,n){if(!n&&(n=function(){}),!Array.isArray(e)||!t)return n();var a=0,r=e.length,i=function(o){if(o||a>=r)return n(o);try{t.call(e,e[a++],i)}catch(s){return n(s)}};if(!r)return n();i()}(a,(function(e,t){n.removeCookie(e.domain,e.path,e.key,t)}),t)}))}),t)}}},{\"@postman/tough-cookie\":182,\"postman-collection\":\"postman-collection\"}],3:[function(e,t,n){const a=e(\"lodash\"),r=e(\"@postman/tough-cookie\").Store,i=e(\"@postman/tough-cookie\").Cookie,o=Array.prototype.slice;class PostmanCookieStore extends r{constructor(e,t,n){super(),this.id=e,this.emitter=t,this.timers=n}}PostmanCookieStore.prototype.synchronous=!1,[\"findCookie\",\"findCookies\",\"putCookie\",\"updateCookie\",\"removeCookie\",\"removeCookies\",\"removeAllCookies\",\"getAllCookies\"].forEach((function(e){PostmanCookieStore.prototype[e]=function(){const t=\"execution.cookies.\"+this.id;let n,s,c;n=o.call(arguments),n.length=a.get(r.prototype,[e,\"length\"],0),c=n.pop(),s=this.timers.setEvent((function(e,t){if(\"function\"!=typeof c)throw new TypeError(\"callback is not a function\");return e||!t?c(e):Array.isArray(t)?c(e,t.map((function(e){return i.fromJSON(e)}))):void c(e,i.fromJSON(t))})),this.timers.wrapped.setTimeout((()=>{this.emitter.dispatch(t,s,\"store\",e,n)}))}})),t.exports=PostmanCookieStore},{\"@postman/tough-cookie\":182,lodash:\"lodash\"}],4:[function(e,t,n){const{isNonLegacySandbox:a}=e(\"./non-legacy-codemarkers\"),r=e(\"lodash\"),i=e(\"./postman-legacy-interface\"),o={atob:'global \"atob\" function',btoa:'global \"btoa\" function',\"crypto-js\":'global \"crypto\" object',tv4:'\"ajv\" library',backbone:null};t.exports=function(t,n,s,c,u,l,p,d){if(!n||!r.isString(n))return u.terminate();t.reset(),a(n)||d.disableLegacyAPIs?i.teardown(t):i.setup(t,s,c),t.import({Buffer:e(\"buffer\").Buffer,File:e(\"buffer\").File,console:c,pm:l,setTimeout:u.setTimeout,setInterval:u.setInterval,setImmediate:u.setImmediate,clearTimeout:u.clearTimeout,clearInterval:u.clearInterval,clearImmediate:u.clearImmediate,require:(...t)=>{const n=t?.[0],a=o[n];return void 0!==a&&c.warn(`Using \"${n}\" library is deprecated.${null!==a?` Use ${a} instead.`:\"\"}`),e(...t)}}),t.exec(n,{async:!0},(function(e){s.return.async=u.queueLength()>0,i.finish(t,l,p),u.wrapped.setImmediate((function(){if(s.return.async)return e&&u.error(e);u.terminate(e)}))}))}},{\"./non-legacy-codemarkers\":7,\"./postman-legacy-interface\":12,buffer:\"buffer\",lodash:\"lodash\"}],5:[function(e,t,n){const a=e(\"lodash\"),r=e(\"chai\"),i=e(\"ajv\"),o=e(\"uniscope\"),s=e(\"postman-collection\"),c=s.Event,u=e(\"./execution\"),l=e(\"./console\"),p=e(\"./timers\"),d=e(\"./pmapi\"),f=e(\"./cookie-store\"),h=e(\"./pm-require\"),{Vault:m,getVaultInterface:g}=e(\"./vault\"),{isNonLegacySandbox:y,getNonLegacyCodeMarker:v}=e(\"./non-legacy-codemarkers\"),b=e(\"./execute-context\");t.exports=function(t,n){const x=o.create({eval:!0,ignore:[\"require\"],block:[\"bridge\"]});let w,k={};t.once(\"initialize\",(({template:n,...c})=>{if(k=c||{},!n)return r.use(e(\"chai-postman\")(s,a,i)),t.dispatch(\"initialize\");const u={exports:{}},l=o.create({eval:!0,ignore:[\"require\"],block:[\"bridge\"]});l.import({Buffer:e(\"buffer\").Buffer,module:u}),l.exec(n,(e=>{if(e)return t.dispatch(\"initialize\",e);const{chaiPlugin:n,initializeExecution:i}=u&&u.exports||{};a.isFunction(n)&&r.use(n),a.isFunction(i)&&(w=i),t.dispatch(\"initialize\")}))})),t.on(\"execute\",(function(e,r,i,o){if(!e||!a.isString(e))return t.dispatch(\"error\",new Error(\"sandbox: execution identifier parameter(s) missing\"));!o&&(o={}),!i&&(i={}),r=new c(r);const s=\"execution.result.\"+e,_=\"execution.request.\"+e,j=\"execution.error.\"+e,S=\"execution.abort.\"+e,A=\"execution.response.\"+e,E=\"execution.cookies.\"+e,C=\"execution.assertion.\"+e,T=\"execution.skipRequest.\"+e,P=(e=>{if(\"string\"!=typeof e)return;const t=`;(async()=>{;\\n                    ${e}\\n                ;})().then(__exitscope).catch(__exitscope);`;return y(e)?`${v()}${t}`:t})(r.script?.toSource()),D=new u(e,r,i,{...o,initializeExecution:w}),O=[...k.disabledAPIs||[]],M=function(e){!Array.isArray(e)&&(e=[e]),t.dispatch(C,o.cursor,e),t.dispatch(\"execution.assertion\",o.cursor,e)},N=function(e){t.dispatch(j,o.cursor,e),t.dispatch(\"execution.error\",o.cursor,e)};let B,R,L,I=!1;D.return.async=!1,R=new p(null,(function(e){e&&N(e)}),(function(){D.return.async=!0}),(function(e,n){function a(){L.dispose(),t.off(S),t.off(A),t.off(E),t.off(\"uncaughtException\",N),D.response&&delete D.response,t.dispatch(s,e||null,D)}B&&(B=R.wrapped.clearTimeout(B)),R&&(R.seal(),R.clearAll()),e&&N(e),!0!==n&&(I?a():R.wrapped.setImmediate(a))})),a.isFinite(o.timeout)&&(B=R.wrapped.setTimeout((function(){R.terminate(new Error(\"sandbox: \"+(D.return.async?\"asynchronous\":\"synchronous\")+\" script execution timeout\"))}),o.timeout)),t.on(S,(function(){R.terminate(null,!0)})),t.on(A,(function(e,t,n,a){R.clearEvent(e,t,n,a)})),t.on(E,(function(e,t,n){R.clearEvent(e,t,n)})),t.on(\"uncaughtException\",N),o.resolvedPackages||O.push(\"require\"),L=new m(e,t,R),b(x,P,D,new l(t,o.cursor,o.debug&&n.console),R,new d(D,(function(n,a){var r=R.setEvent(a);t.dispatch(_,o.cursor,e,r,n)}),(function(){if(!D||\"prerequest\"!==D.target)throw new TypeError(\"pm.execution.skipRequest is not a function\");I=!0,t.dispatch(T,o.cursor),R.terminate(null)}),M,new f(e,t,R),g(L.exec.bind(L)),h(o.resolvedPackages,x),{disabledAPIs:O}),M,{disableLegacyAPIs:k.disableLegacyAPIs})}))}},{\"./console\":1,\"./cookie-store\":3,\"./execute-context\":4,\"./execution\":6,\"./non-legacy-codemarkers\":7,\"./pm-require\":9,\"./pmapi\":11,\"./timers\":14,\"./vault\":15,ajv:\"ajv\",buffer:\"buffer\",chai:\"chai\",\"chai-postman\":247,lodash:\"lodash\",\"postman-collection\":\"postman-collection\",uniscope:561}],6:[function(e,t,n){const a=e(\"lodash\"),r=e(\"postman-collection\"),i=\"request\",o=\"script\",s=\"data\",c=\"response\",u={test:!0,prerequest:!0},l={test:!0},p=[\"_variables\",\"environment\",\"collectionVariables\",\"globals\"],d={autoCompact:!0};t.exports=class{constructor(e,t,n,f){if(this.id=e,this.target=t.listen||o,this.legacy=f.legacy||{},this.cursor=a.isObject(f.cursor)?f.cursor:{},this.data=a.get(n,s,{}),this.cookies=new r.CookieList(null,n.cookies),p.forEach((e=>{this[e]=r.VariableScope.isVariableScope(n[e])?n[e]:new r.VariableScope(n[e]),this[e].enableTracking(d)})),f.initializeExecution){const{request:e,response:t}=f.initializeExecution(this.target,n)||{};this.request=e,this.response=t}else(u[this.target]||a.has(n,i))&&(this.request=r.Request.isRequest(n.request)?n.request:new r.Request(n.request)),(l[this.target]||a.has(n,c))&&(this.response=r.Response.isResponse(n.response)?n.response:new r.Response(n.response));this.return={}}toJSON(){return a.mapValues(this,(function(e){return a.isFunction(e&&e.toJSON)?e.toJSON():e}))}}},{lodash:\"lodash\",\"postman-collection\":\"postman-collection\"}],7:[function(e,t,n){const a={'\"use sandbox2\";':!0,\"'use sandbox2';\":!0};t.exports={isNonLegacySandbox:e=>a[e.substr(0,15)],getNonLegacyCodeMarker:()=>Object.keys(a)[0]}},{}],8:[function(e,t,n){t.exports={listener:e=>function(t){this.dispatch(e,t)}}},{}],9:[function(e,t,n){const{LEGACY_GLOBS:a}=e(\"./postman-legacy-interface\"),r=\"__module_obj\",i=[\"(function (exports, module) {\\n\",`\\n})(${r}.exports, ${r});`];class PostmanRequireStore{constructor(e){if(!e)throw new Error(\"File cache is required\");this.fileCache=e}hasFile(e){return Boolean(this.getFile(e))}getFile(e){return this.fileCache[e]}getResolvedPath(e){if(this.hasFile(e))return e}getFileData(e){return this.hasFile(e)&&this.getFile(e).data}hasError(e){return this.hasFile(e)&&Boolean(this.getFile(e).error)}getFileError(e){return this.hasError(e)&&this.getFile(e).error}}t.exports=function createPostmanRequire(e,t){const n=new PostmanRequireStore(e||{}),o={};return function(e){const s=n.getResolvedPath(e);if(!s)throw new Error(`Cannot find package '${e}'`);if(n.hasError(s))throw new Error(`Error while loading package '${e}': ${n.getFileError(s)}`);if(o[s])return o[s].exports;const c=n.getFileData(s),u={id:s,exports:{}};o[u.id]=u;const l=i[0]+c+i[1];return t.import({[r]:u}),t.exec(l,{async:!0,block:a},(t=>{if(t)throw new Error(`Error in package '${e}': ${t.message?t.message:t}`)})),t.unset(r),u.exports}}},{\"./postman-legacy-interface\":12}],10:[function(e,t,n){t.exports=function(e,t){var n=0,a=function(e,t){return{name:String(e),async:!1,skipped:Boolean(t),passed:!0,error:null,index:n++}},r=function(e,t){e.error=t,e.passed=!1};e.test=function(n,i){var o=a(n,!1);if(\"function\"!=typeof i)return t(o),e;if(i.length)try{o.async=!0,i((function(e){o.error&&!1===o.passed||(e&&r(o,e),t(o))}))}catch(s){r(o,s),t(o)}else{try{i()}catch(s){r(o,s)}t(o)}return e},e.test.skip=function(n){return t(a(n,!0)),e},e.test.index=function(){return n}}},{}],11:[function(e,t,n){const a=e(\"lodash\"),r=e(\"postman-collection\"),i=e(\"./cookie-jar\"),o=r.VariableScope,s=r.Request,c=r.Response,u=r.CookieList,l=e(\"chai\"),p=function(e,t,n=[]){var r,i={writable:!1};for(r in t)!a.includes(n,r)&&Object.hasOwn(t,r)&&void 0!==t[r]&&(i.value=t[r],Object.defineProperty(e,r,i));return e},d=e(\"./pmapi-setup-runner\");function Postman(e,t,n,r,f,h,m,g={}){let y=new o;y.syncVariablesFrom(e.data),e._variables.addLayer(y.values),e._variables.addLayer(e.environment.values),e._variables.addLayer(e.collectionVariables.values),e._variables.addLayer(e.globals.values),e.cookies&&(e.cookies.jar=function(){return new i(f)}),p(this,{info:p({},{eventName:e.target,iteration:e.cursor.iteration,iterationCount:e.cursor.cycles,requestName:e.legacy._itemName,requestId:e.legacy._itemId}),vault:h,globals:e.globals,environment:e.environment,collectionVariables:e.collectionVariables,variables:e._variables,iterationData:y,request:e.request,response:e.response,cookies:e.cookies,visualizer:{set(t,n,a){if(\"string\"!=typeof t)throw new Error(\"Invalid template. Template must be of type string, found \"+typeof t);if(n&&\"object\"!=typeof n)throw new Error(\"Invalid data. Data must be an object, found \"+typeof n);if(a&&\"object\"!=typeof a)throw new Error(\"Invalid options. Options must be an object, found \"+typeof a);e.return.visualizer={template:t,data:n,options:a}},clear(){e.return.visualizer=void 0}},sendRequest:function(e,n){let r;const i=this,o=()=>new Promise((function(n,a){e?t(s.isRequest(e)?e:new s(e),(function(e,t,i){if(i&&!u.isCookieList(i.cookies)&&(i.cookies=new u({},i.cookies)),r=i,e)return a(e);n(c.isResponse(t)?t:new c(t))})):a(new Error(\"sendrequest: nothing to request\"))}));return a.isFunction(n)?(o().then((e=>{n.call(i,null,e,r)})).catch((e=>{n.call(i,e)})),i):o()},execution:{skipRequest:n,location:p(e.legacy._itemPath||[],{current:e.legacy._eventItemName}),setNextRequest:function(t){e.return&&(e.return.nextRequest=t)}},require:function(e){return m(e)}},g.disabledAPIs),d(this,r),this.response&&Object.defineProperty(this.response,\"to\",{get(){return l.expect(this).to}}),this.request&&Object.defineProperty(this.request,\"to\",{get(){return l.expect(this).to}}),y=null}Postman.prototype.expect=l.expect,t.exports=Postman},{\"./cookie-jar\":2,\"./pmapi-setup-runner\":10,chai:\"chai\",lodash:\"lodash\",\"postman-collection\":\"postman-collection\"}],12:[function(e,t,n){const a=e(\"lodash\"),r={JSON:e(\"liquid-json\"),_:e(\"lodash3\").noConflict(),CryptoJS:e(\"crypto-js\"),tv4:e(\"tv4\"),xml2Json:e(\"./xml2Json\"),Backbone:e(\"backbone\"),cheerio:e(\"cheerio\")},i=[\"tests\",\"globals\",\"environment\",\"data\",\"request\",\"responseCookies\",\"responseHeaders\",\"responseTime\",\"responseCode\",\"responseBody\",\"iteration\",\"postman\",\"_\",\"CryptoJS\",\"tv4\",\"xml2Json\",\"Backbone\",\"cheerio\"],o={tests:'\"pm.test()\"',globals:'\"pm.globals\"',environment:'\"pm.environment\"',data:'\"pm.iterationData\"',request:'\"pm.request\"',responseCookies:'\"pm.cookies\"',responseHeaders:'\"pm.response.headers\"',responseTime:'\"pm.response.responseTime\"',responseCode:'\"pm.response.code\"',responseBody:'\"pm.response.text()\"',iteration:'\"pm.info.iteration\"',_:\"\\\"require('lodash')\\\"\",CryptoJS:'global \"crypto\" object',tv4:\"\\\"require('ajv')\\\"\",xml2Json:\"\\\"require('xml2js')\\\"\",cheerio:\"\\\"require('cheerio')\\\"\",\"postman.setNextRequest\":'\"pm.execution.setNextRequest()\"',\"postman.setEnvironmentVariable\":'\"pm.environment.set()\"',\"postman.getEnvironmentVariable\":'\"pm.environment.get()\"',\"postman.clearEnvironmentVariables\":'\"pm.environment.clear()\"',\"postman.clearEnvironmentVariable\":'\"pm.environment.unset()\"',\"postman.setGlobalVariable\":'\"pm.globals.set()\"',\"postman.getGlobalVariable\":'\"pm.globals.get()\"',\"postman.clearGlobalVariables\":'\"pm.globals.clear()\"',\"postman.clearGlobalVariable\":'\"pm.globals.unset()\"',\"postman.getResponseCookie\":'\"pm.cookies.get()\"',\"postman.getResponseHeader\":'\"pm.response.headers.get()\"'},s=\"function\",c=\"test\",u=\"raw\",l=\"urlencoded\",p=\"formdata\",d=\"file\";function f(e,t,n){t.has(e)||(t.add(e),o[e]?n.warn(`Using \"${e}\" is deprecated. Use ${o[e]} instead.`):i.includes(e)&&n.warn(`Using \"${e}\" is deprecated.`))}class PostmanLegacyInterface{constructor(e,t){this.__execution=e,this.__environment=t.environment,this.__globals=t.globals}setEnvironmentVariable(e,t){return!1!==t&&!t||typeof(t&&t.toString)!==s||(t=t.toString()),this.__environment[e]=t,this.__execution.environment.set(e,t)}getEnvironmentVariable(e){return this.__execution.environment.get(e)}clearEnvironmentVariables(){for(var e in this.__environment)Object.hasOwn(this.__environment,e)&&delete this.__environment[e];return this.__execution.environment.clear()}clearEnvironmentVariable(e){return e&&delete this.__environment[e],this.__execution.environment.unset(e)}setGlobalVariable(e,t){return!1!==t&&!t||typeof(t&&t.toString)!==s||(t=t.toString()),this.__globals[e]=t,this.__execution.globals.set(e,t)}getGlobalVariable(e){return this.__execution.globals.get(e)}clearGlobalVariables(){for(var e in this.__globals)Object.hasOwn(this.__globals,e)&&delete this.__globals[e];return this.__execution.globals.clear()}clearGlobalVariable(e){return e&&delete this.__globals[e],this.__execution.globals.unset(e)}setNextRequest(e){this.__execution.return&&(this.__execution.return.nextRequest=e)}}class PostmanLegacyTestInterface extends PostmanLegacyInterface{getResponseCookie(e){return this.__execution.cookies?this.__execution.cookies.one(String(e)):void 0}getResponseHeader(e){var t=this.__execution.response&&this.__execution.response.headers&&this.__execution.response.headers.one(e);return t?t.value:void 0}}t.exports={setup(e,t,n){var o,s,h=a.assign({},r);h.tests={},h.globals=t.globals.syncVariablesTo(),h.environment=t.environment.syncVariablesTo(),h.data=t.data||(t.data={}),h.request=t.request?{id:t.legacy?t.legacy._itemId:void 0,name:t.legacy?t.legacy._itemName:void 0,description:t.request.description?t.request.description.toString():void 0,headers:t.request.headers.toObject(!0,!1,!0,!0),method:t.request.method,url:t.request.url.toString(),data:(o=t.request,s=function(e){var t,n,r=a.get(e,\"body.mode\"),i=a.get(e,\"body\");if(i&&!i.isEmpty())return t=i[r],a.isFunction(t&&t.all)&&(t=t.all()),r===u?n={body:t}:r===l?n={form:a.reduce(t,(function(e,t){return t.disabled||(e[t.key]?a.isArray(e[t.key])?e[t.key].push(t.value):e[t.key]=[e[t.key],t.value]:e[t.key]=t.value),e}),{})}:e.body.mode===p?n={formData:a.reduce(t,(function(e,t){return t.disabled||(e[t.key]?a.isArray(e[t.key])?e[t.key].push(t.value):e[t.key]=[e[t.key],t.value]:e[t.key]=t.value),e}),{})}:e.body.mode===d&&(n={body:a.get(e,\"body.file.content\")}),n}(o),s&&(s.form||s.formData||s.body)||{})}:{},t.target===c&&(h.responseCookies=t.cookies||[],h.responseHeaders={},t.response&&t.response.headers.each((function(e){e&&!e.disabled&&(h.responseHeaders[e.key]=e.value)})),h.responseTime=t.response?t.response.responseTime:NaN,h.responseCode=t.response?a.clone(t.response.details()):{code:NaN,name:\"\",details:\"\"},h.responseBody=(()=>{if(t.response&&!(t.response.responseSize>52428800))return t.response.text()})()),h.iteration=a.isObject(t.cursor)?t.cursor.iteration:0;const m=new(t.target===c?PostmanLegacyTestInterface:PostmanLegacyInterface)(t,h),g=new Set;e.__is_deprecation_warning_enabled=!0,h.postman=new Proxy(m,{get:(t,a)=>(e.__is_deprecation_warning_enabled&&f(`postman.${a}`,g,n),t[a])}),i.forEach((t=>{h[t]&&[\"object\",\"function\"].includes(typeof h[t])&&(h[t]=new Proxy(h[t],{set(a,r,i){e.__is_deprecation_warning_enabled&&f(t,g,n),a[r]=i},get:(a,r)=>(\"postman\"!==t&&e.__is_deprecation_warning_enabled&&f(t,g,n),a[r]),apply:(a,r,i)=>(e.__is_deprecation_warning_enabled&&f(t,g,n),a.apply(r,i))}))})),e.import(h),h=null,e.__postman_legacy_setup=!0},teardown(e){if(e.__postman_legacy_setup){for(var t=0,n=i.length;t<n;t++)e.unset(i[t]);e.__postman_legacy_setup=!1}},finish(e,t,n){e.__postman_legacy_setup&&(e.__is_deprecation_warning_enabled=!1,function(e,t,n){var r=e._imports&&e._imports.tests,i=t.test.index();a.isEmpty(r)||n(a.map(r,(function(e,t){var n=String(t),a=Boolean(e),r=null;return a||((r=new Error(\"expected \"+String(e)+\" to be truthy\")).name=\"AssertionError\"),{name:n,skipped:!1,passed:a,error:r,index:i++}})))}(e,t,n))},LEGACY_GLOBS:i}},{\"./xml2Json\":16,backbone:\"backbone\",cheerio:\"cheerio\",\"crypto-js\":\"crypto-js\",\"liquid-json\":\"json\",lodash:\"lodash\",lodash3:410,tv4:\"tv4\"}],13:[function(e,t,n){try{Error&&(Error.prototype.toJSON=function(){return{type:\"Error\",name:this.name,message:this.message}})}catch(o){}const{Request:a,Response:r}=e(\"postman-collection\");try{a.prototype.toJSON=(i=a.prototype.toJSON,function(){var e,t=this.to;return delete this.to,e=i.apply(this,arguments),this.to=t,e}),r.prototype.toJSON=function(e){return function(){var t,n=this.to;return delete this.to,t=e.apply(this,arguments),this.to=n,t}}(r.prototype.toJSON)}catch(o){}var i},{\"postman-collection\":\"postman-collection\"}],14:[function(e,t,n){const a=\"function\",r=[\"Timeout\",\"Interval\",\"Immediate\",\"Event\"],i={Interval:!0},o={Event:!0},s=Array.prototype.slice,c=r.reduce((function(e,t){var n=new Function(`return typeof set${t} === 'function'`)(),a=new Function(`return typeof clear${t} === 'function'`)();return n&&(e[`set${t}`]=new Function(\"_setFn\",`return function set${t} (fn, ms) { return _setFn(fn, ms); }`)(this[`set${t}`])),a&&(e[`clear${t}`]=new Function(\"_clearFn\",`return function clear${t} (id) { return _clearFn(id); }`)(this[`clear${t}`])),e}),{});t.exports=function(e,t,n,u){var l,p=e||c,d={},f=0,h=0,m=!1;typeof p.setImmediate!==a&&(p.setImmediate=function(e){return p.setTimeout(e,0)},p.clearImmediate=function(e){return p.clearTimeout(e)}),typeof p.setEvent!==a&&function(){var e={},t=0;p.setEvent=function(n){var a=++t;return e[a]=n,a},p.clearEvent=function(t){var n=e[t];delete e[t],typeof n===a&&n.apply(d,s.call(arguments,1))},p.clearAllEvents=function(){Object.keys(e).forEach((function(t){delete e[t]}))}}(),l=function(e,t){e&&(h+=e),0===h&&l.started&&p.setImmediate((function(){0===h&&l.started&&(!t&&!m&&typeof u===a&&u(),l.started=!1)})),h>0&&!l.started&&(!t&&typeof n===a&&n(),l.started=!0)},r.forEach(function(e){var n={};this[\"set\"+e]=function(r){if(!m&&typeof r===a){var c=++f,u=s.call(arguments);return u[0]=function(){try{r.apply(d,o[e]?arguments:null)}catch(a){t&&t(a)}o[e]||i[e]?l():(l(-1),delete n[c])},n[c]=p[\"set\"+e].apply(this,u),u=null,l(1),c}},this[\"clear\"+e]=function(a){var r,i=n[a];if(!m&&i){(r=s.call(arguments))[0]=i,delete n[a];try{p[\"clear\"+e].apply(d,r)}catch(o){t(o)}l(-1),r=i=null}},typeof p[\"clearAll\"+e+\"s\"]===a?this[\"clearAll\"+e+\"s\"]=function(){p[\"clearAll\"+e+\"s\"](),Object.keys(n).forEach((function(){l(-1,!0)}))}:this[\"clearAll\"+e+\"s\"]=function(){Object.keys(n).forEach((function(t){l(-1,!0),p[\"clear\"+e](n[t])}))}}.bind(this)),this.queueLength=function(){return h},this.wrapped=p,this.clearAll=function(){r.forEach(function(e){this[\"clearAll\"+e+\"s\"]()}.bind(this))},this.seal=function(){m=!0},this.error=function(e){return t.call(d,e)},this.terminate=function(){return this.seal(),this.clearAll(),u.apply(d,arguments)}}},{}],15:[function(e,t,n){t.exports={Vault:class{constructor(e,t,n){this._bridge=t,this._timers=n,this._event=`execution.vault.${e}`,this._handler=(e,...t)=>{this._timers.clearEvent(e,...t)},this._bridge.on(this._event,this._handler)}exec(...e){return new Promise(((t,n)=>{const a=this._timers.setEvent(((e,...a)=>{if(e)return n(e instanceof Error?e:new Error(e.message||e));t(...a)}));this._bridge.dispatch(this._event,a,...e)}))}dispose(){this._bridge.off(this._event,this._handler)}},getVaultInterface:e=>({get:t=>e(\"get\",t),set:(t,n)=>e(\"set\",t,n),unset:t=>e(\"unset\",t)})}},{}],16:[function(e,t,n){const a=e(\"xml2js\"),r={explicitArray:!1,async:!1,trim:!0,mergeAttrs:!1};t.exports=function(e){var t={};return a.parseString(e,r,(function(e,n){t=n})),t}},{xml2js:\"xml2js\"}],17:[function(e,t,n){e(\"./timers\"),e(\"buffer\"),function(){var t=this,n=e(\"uniscope/lib/allowed-globals\").concat([\"require\",\"eval\",\"console\",\"bridge\",\"__uvm_emit\",\"__uvm_setTimeout\"]),a=function(e){-1===n.indexOf(e)&&delete t[e]};do{Object.getOwnPropertyNames(t).forEach(a),t=Object.getPrototypeOf(t)}while(null!==Object.getPrototypeOf(t));Object.defineProperty(Error,\"prepareStackTrace\",{value:function(e,t){let n=`Error: ${e&&e.message}`;for(let a=0;a<(t&&t.length);a++)n+=`\\n    at ${t[a]}`;return n},configurable:!1,enumerable:!1,writable:!1})}(),e(\"./purse\"),bridge.on(\"ping\",e(\"./ping\").listener(\"pong\")),e(\"./execute\")(bridge,{console:\"undefined\"!=typeof console?console:null,window:\"undefined\"!=typeof window?window:null}),bridge=void 0,delete bridge},{\"./execute\":5,\"./ping\":8,\"./purse\":13,\"./timers\":14,buffer:\"buffer\",\"uniscope/lib/allowed-globals\":562}],18:[function(e,t,n){const a=function(){throw new Error(\"Not implemented\")};t.exports=function(e){return{Buffer:e.Buffer,SlowBuffer:e.SlowBuffer,INSPECT_MAX_BYTES:e.INSPECT_MAX_BYTES,kMaxLength:e.kMaxLength,kStringMaxLength:e.kStringMaxLength,constants:e.constants,File:e.File,Blob:e.Blob,atob:e.atob,btoa:e.btoa,isAscii:a,isUtf8:a,resolveObjectURL:a,transcode:a}}},{}],19:[function(e,t,n){const a=function(){throw new Error(\"Not implemented\")};t.exports=function(e){function t(){return\"number\"==typeof arguments[0]?e.alloc(...arguments):e.from(...arguments)}return Object.setPrototypeOf(t,e),t.poolSize=e.poolSize,Object.defineProperty(t,Symbol.hasInstance,{value:function(t){return t instanceof e}}),t.from=function(){return e.from(...arguments)},t.copyBytesFrom=a,t.of=a,t.alloc=function(){return e.alloc(...arguments)},t.allocUnsafe=function(){return e.allocUnsafe(...arguments)},t.allocUnsafeSlow=function(){return e.allocUnsafeSlow(...arguments)},t.isBuffer=function(){return e.isBuffer(...arguments)},t.compare=function(){return e.compare(...arguments)},t.isEncoding=function(){return e.isEncoding(...arguments)},t.concat=function(){return e.concat(...arguments)},t.byteLength=function(){return e.byteLength(...arguments)},t}},{}],20:[function(e,t,n){(function(e){(function(){!function(){var t,n=Object,a=Array,r=RegExp,i=Date,o=String,s=Number,c=Math,u=n.prototype.toString,l=void 0!==e?e:this,p={},d=n.defineProperty&&n.defineProperties,f=\"Array,Boolean,Date,Function,Number,String,RegExp\".split(\",\");f.forEach((function(e){l[e]||(l[e]=Function(\"return \"+e)())}));var h,m,g=_(f[0]),y=_(f[1]),v=_(f[2]),b=_(f[3]),x=_(f[4]),w=_(f[5]),k=_(f[6]);function _(e){var t,n;return/String|Number|Boolean/.test(e)&&(t=e.toLowerCase()),n=\"Array\"===e&&a.isArray||function(n){return!(!t||typeof n!==t)||j(n)===\"[object \"+e+\"]\"},p[e]=n,n}function j(e){return u.call(e)}function S(e){e.SugarMethods||(T(e,\"SugarMethods\",{}),A(e,!1,!1,{extend:function(t,n,a){A(e,!1!==a,n,t)},sugarRestore:function(){return C(e,arguments,(function(e,t,n){T(e,t,n.method)}))},sugarRevert:function(){return C(e,arguments,(function(e,t,n){n.existed?T(e,t,n.original):delete e[t]}))}}))}function A(e,t,n,a){var r=t?e.prototype:e;S(e),I(a,(function(a,i){var o,s,c,u=r[a],l=L(r,a);\"function\"==typeof n&&(o=r[a],s=i,c=n,i=function(){return(!o||!0!==c&&c.apply(this,arguments)?s:o).apply(this,arguments)}),!1===n&&r[a]||T(r,a,i),e.SugarMethods[a]={instance:t,method:i,original:u,existed:l}}))}function E(e,t,n,a,r){var i={};(a=w(a)?a.split(\",\"):a).forEach((function(e,t){r(i,e,t)})),A(e,t,n,i)}function C(e,t,n){var a=0===t.length,r=P(t),i=!1;return I(e.SugarMethods,(function(t,o){(a||r.indexOf(t)>-1)&&(i=!0,n(o.instance?e.prototype:e,t,o))})),i}function T(e,t,a){d?n.defineProperty(e,t,{value:a,configurable:!0,enumerable:!1,writable:!0}):e[t]=a}function P(e,t){var n,a,r=[];for(n=0,a=e.length;n<a;n++)r.push(e[n]),t&&t.call(e,e[n],n);return r}function D(e,t,n){P(a.prototype.concat.apply([],a.prototype.slice.call(e,n||0)),t)}function O(e){if(!e||!e.call)throw new TypeError(\"Callback is not callable\")}function M(e){return e!==t}function N(e){return e===t}function B(e){return e&&\"object\"==typeof e}function R(e){return!!e&&\"[object Object]\"===j(e)&&\"hasOwnProperty\"in e}function L(e,t){return n.hasOwnProperty.call(e,t)}function I(e,t){var n;for(n in e)if(L(e,n)&&!1===t.call(e,n,e[n],e))break}function F(e,t){return I(t,(function(n){e[n]=t[n]})),e}function z(e){F(this,e)}function q(e,t,n,a){for(var r=[],i=parseInt(e),o=a<0;!o&&i<=t||o&&i>=t;)r.push(i),n&&n.call(this,i),i+=a||1;return r}function H(e,t,n){var a=c[n||\"round\"],r=c.pow(10,c.abs(t||0));return t<0&&(r=1/r),a(e*r)/r}function U(e,t){return H(e,t,\"ceil\")}function G(e,t){return H(e,t,\"floor\")}function $(e,t,n,a){var r=c.abs(e).toString(a||10);return r=V(t-r.replace(/\\.\\d+/,\"\").length,\"0\")+r,(n||e<0)&&(r=(e<0?\"-\":\"+\")+r),r}function W(e){if(e>=11&&e<=13)return\"th\";switch(e%10){case 1:return\"st\";case 2:return\"nd\";case 3:return\"rd\";default:return\"th\"}}function V(e,t){return a(c.max(0,M(e)?e:1)+1).join(t||\"\")}function K(e,t){var n=e.toString().match(/[^/]*$/)[0];return t&&(n=(n+t).split(\"\").sort().join(\"\").replace(/([gimy])\\1+/g,\"$1\")),n}function J(e){return w(e)||(e=o(e)),e.replace(/([\\\\/'*+?|()\\[\\]{}.^$])/g,\"\\\\$1\")}function Y(e,t){var a,r,i,s,c,l,p,d,f=typeof e;if(\"string\"===f)return e;if(i=u.call(e),a=R(e),r=\"[object Array]\"===i,null!=e&&a||r){if(t||(t=[]),t.length>1)for(p=t.length;p--;)if(t[p]===e)return\"CYC\";for(t.push(e),s=o(e.constructor),p=0,d=(c=r?e:n.keys(e).sort()).length;p<d;p++)s+=(l=r?p:c[p])+Y(e[l],t);t.pop()}else s=1/e==-1/0?\"-0\":o(e&&e.valueOf?e.valueOf():e);return f+i+s}function X(e,t){return Z(e)&&Z(t)?Y(e)===Y(t):e===t}function Z(e){var t=j(e);return/^\\[object Date|Array|String|Number|RegExp|Boolean|Arguments\\]$/.test(t)||R(e)}function Q(e,t,n){var a,r=[],i=e.length,o=!1!==t[t.length-1];return P(t,(function(t){if(y(t))return!1;o&&(t%=i)<0&&(t=i+t),a=n?e.charAt(t)||\"\":e[t],r.push(a)})),r.length<2?r[0]:r}function ee(e,t){E(t,!0,!1,e,(function(e,t){e[t+(\"equal\"===t?\"s\":\"\")]=function(){return n[t].apply(null,[this].concat(P(arguments)))}}))}function te(e,t,n,a){var r,i,o=e.length,s=-1==a,c=s?o-1:0,u=(r=n,i=c,isNaN(r)?i:parseInt(0|r));for(u<0&&(u=o+u),(!s&&u<0||s&&u>=o)&&(u=c);s&&u>=0||!s&&u<o;){if(e[u]===t)return u;u+=a}return-1}function ne(e,t,n,a){var r,i,o=e.length,s=0,c=M(n);if(O(t),0==o&&!c)throw new TypeError(\"Reduce called on empty array with no initial value\");for(c?r=n:(r=e[a?o-1:s],s++);s<o;)(i=a?o-s-1:s)in e&&(r=t(r,e[i],i,e)),s++;return r}function ae(e){if(0===e.length)throw new TypeError(\"First argument must be defined\")}function re(e,t,n,a){var i=!0;return e===t||(k(t)&&w(e)?r(t).test(e):b(t)?t.apply(n,a):R(t)&&B(e)?(I(t,(function(a,r){re(e[a],t[a],n,[e[a],e])||(i=!1)})),i):X(e,t))}function ie(e,t,n,a){return N(t)?e:b(t)?t.apply(n,a||[]):b(e[t])?e[t].call(e):e[t]}function oe(e,t,n,a){var r,i,o;for(n<0&&(n=e.length+n),o=isNaN(n)?0:n,r=!0===a?e.length+o:e.length;o<r;){if(!((i=o%e.length)in e))return se(e,t,o,a);if(!1===t.call(e,e[i],i,e))break;o++}}function se(e,t,n,a){var r,i=[];for(r in e)ce(e,r)&&r>=n&&i.push(parseInt(r));return i.sort().each((function(n){return t.call(e,e[n],n,e)})),e}function ce(e,t){return t in e&&function(e){return e>>>0}(t)==t&&4294967295!=t}function ue(e,t,n,a,r){var i,o;return oe(e,(function(e,n,a){if(re(e,t,a,[e,n,a]))return i=e,o=n,!1}),n,a),r?o:i}function le(e,t){var n,a=[],r={};return oe(e,(function(i,o){n=t?ie(i,t,e,[i,o,e]):i,me(r,n)||a.push(i)})),a}function pe(e,t,n){var a=[],r={};return t.each((function(e){me(r,e)})),e.each((function(e){var t=Y(e),i=!Z(e);he(r,t,e,i)!=n&&(!function(e,t,n,a){var r,i=0;if(a)for(r=e[t];i<r.length;)r[i]===n?r.splice(i,1):i+=1;else delete e[t]}(r,t,e,i),a.push(e))})),a}function de(e,t,n){t=t||1/0,n=n||0;var a=[];return oe(e,(function(e){g(e)&&n<t?a=a.concat(de(e,t,n+1)):a.push(e)})),a}function fe(e){var t=[];return P(e,(function(e){t=t.concat(e)})),t}function he(e,t,n,a){var r=t in e;return a&&(e[t]||(e[t]=[]),r=-1!==e[t].indexOf(n)),r}function me(e,t){var n=Y(t),a=!Z(t),r=he(e,n,t,a);return a?e[n].push(t):e[n]=t,r}function ge(e,t,n,a){var r,i=[],o=\"max\"===n,s=\"min\"===n,c=Array.isArray(e);return I(e,(function(n){var a=e[n],u=ie(a,t,e,c?[a,parseInt(n),e]:[]);if(N(u))throw new TypeError(\"Cannot compare with undefined\");u===r?i.push(a):(N(r)||o&&u>r||s&&u<r)&&(i=[a],r=u)})),c||(i=de(i,1)),a?i:i[0]}function ye(e){return a[ke]&&(e=e.toLowerCase()),e.replace(a[we],\"\")}function ve(e,t){var n=e.charAt(t);return(a[_e]||{})[n]||n}function be(e){var t=a[xe];return e?t.indexOf(e):null}z.prototype.constructor=n,S(n),I(f,(function(e,t){S(l[t])})),A(n,!1,!1,{keys:function(e){var t=[];if(!B(e)&&!k(e)&&!b(e))throw new TypeError(\"Object required\");return I(e,(function(e,n){t.push(e)})),t}}),A(a,!1,!1,{isArray:function(e){return g(e)}}),A(a,!0,!1,{every:function(e,t){var n=this.length,a=0;for(ae(arguments);a<n;){if(a in this&&!e.call(t,this[a],a,this))return!1;a++}return!0},some:function(e,t){var n=this.length,a=0;for(ae(arguments);a<n;){if(a in this&&e.call(t,this[a],a,this))return!0;a++}return!1},map:function(e,t){var n=this.length,a=0,r=new Array(n);for(ae(arguments);a<n;)a in this&&(r[a]=e.call(t,this[a],a,this)),a++;return r},filter:function(e,t){var n=this.length,a=0,r=[];for(ae(arguments);a<n;)a in this&&e.call(t,this[a],a,this)&&r.push(this[a]),a++;return r},indexOf:function(e,t){return w(this)?this.indexOf(e,t):te(this,e,t,1)},lastIndexOf:function(e,t){return w(this)?this.lastIndexOf(e,t):te(this,e,t,-1)},forEach:function(e,t){var n=this.length,a=0;for(O(e);a<n;)a in this&&e.call(t,this[a],a,this),a++},reduce:function(e,t){return ne(this,e,t)},reduceRight:function(e,t){return ne(this,e,t,!0)}}),A(Function,!0,!1,{bind:function(e){var t,n=this,a=P(arguments).slice(1);if(!b(this))throw new TypeError(\"Function.prototype.bind called on a non-function\");return t=function(){return n.apply(n.prototype&&this instanceof n?this:e,a.concat(P(arguments)))},t.prototype=this.prototype,t}}),A(i,!1,!1,{now:function(){return(new i).getTime()}}),function(){var e=\"\\t\\n\\v\\f\\r   ᠎             \\u2028\\u2029　\\ufeff\".match(/^\\s+$/);try{o.prototype.trim.call([1])}catch(t){e=!1}A(o,!0,!e,{trim:function(){return this.toString().trimLeft().trimRight()},trimLeft:function(){return this.replace(r(\"^[\\t\\n\\v\\f\\r   ᠎             \\u2028\\u2029　\\ufeff]+\"),\"\")},trimRight:function(){return this.replace(r(\"[\\t\\n\\v\\f\\r   ᠎             \\u2028\\u2029　\\ufeff]+$\"),\"\")}})}(),h=new i(i.UTC(1999,11,31)),m=h.toISOString&&\"1999-12-31T00:00:00.000Z\"===h.toISOString(),E(i,!0,!m,\"toISOString,toJSON\",(function(e,t){e[t]=function(){return $(this.getUTCFullYear(),4)+\"-\"+$(this.getUTCMonth()+1,2)+\"-\"+$(this.getUTCDate(),2)+\"T\"+$(this.getUTCHours(),2)+\":\"+$(this.getUTCMinutes(),2)+\":\"+$(this.getUTCSeconds(),2)+\".\"+$(this.getUTCMilliseconds(),3)+\"Z\"}}));var xe=\"AlphanumericSortOrder\",we=\"AlphanumericSortIgnore\",ke=\"AlphanumericSortIgnoreCase\",_e=\"AlphanumericSortEquivalents\";function je(e){return e&&e.valueOf&&(e=e.valueOf()),n.keys(e)}function Se(e,t){E(n,!1,!1,e,(function(e,n){e[n]=function(e,r,i){var o,s=je(e);return o=a.prototype[n].call(s,(function(n){return t?ie(e[n],r,e,[n,e[n],e]):re(e[n],r,e,[n,e[n],e])}),i),g(o)&&(o=o.reduce((function(t,n,a){return t[n]=e[n],t}),{})),o}})),ee(e,z)}A(a,!1,!1,{create:function(){var e,t=[];return P(arguments,(function(n){if(B(n))try{(e=a.prototype.slice.call(n,0)).length>0&&(n=e)}catch(r){}t=t.concat(n)})),t}}),A(a,!0,!1,{find:function(e,t,n){return ue(this,e,t,n)},findAll:function(e,t,n){var a=[];return oe(this,(function(t,n,r){re(t,e,r,[t,n,r])&&a.push(t)}),t,n),a},findIndex:function(e,t,n){var a=ue(this,e,t,n,!0);return N(a)?-1:a},count:function(e){return N(e)?this.length:this.findAll(e).length},removeAt:function(e,t){var n,a;if(N(e))return this;for(N(t)&&(t=e),n=0,a=t-e;n<=a;n++)this.splice(e,1);return this},include:function(e,t){return this.clone().add(e,t)},exclude:function(){return a.prototype.remove.apply(this.clone(),arguments)},clone:function(){return F([],this)},unique:function(e){return le(this,e)},flatten:function(e){return de(this,e)},union:function(){return le(this.concat(fe(arguments)))},intersect:function(){return pe(this,fe(arguments),!1)},subtract:function(e){return pe(this,fe(arguments),!0)},at:function(){return Q(this,arguments)},first:function(e){return N(e)?this[0]:(e<0&&(e=0),this.slice(0,e))},last:function(e){if(N(e))return this[this.length-1];var t=this.length-e<0?0:this.length-e;return this.slice(t)},from:function(e){return this.slice(e)},to:function(e){return N(e)&&(e=this.length),this.slice(0,e)},min:function(e,t){return ge(this,e,\"min\",t)},max:function(e,t){return ge(this,e,\"max\",t)},least:function(e,t){return ge(this.groupBy.apply(this,[e]),\"length\",\"min\",t)},most:function(e,t){return ge(this.groupBy.apply(this,[e]),\"length\",\"max\",t)},sum:function(e){var t=e?this.map(e):this;return t.length>0?t.reduce((function(e,t){return e+t})):0},average:function(e){var t=e?this.map(e):this;return t.length>0?t.sum()/t.length:0},inGroups:function(e,t){var n=arguments.length>1,a=this,r=[],i=U(this.length/e);return q(0,e-1,(function(e){var o=e*i,s=a.slice(o,o+i);n&&s.length<i&&q(1,i-s.length,(function(){s=s.add(t)})),r.push(s)})),r},inGroupsOf:function(e,t){var n,a=[],r=this.length,i=this;return 0===r||0===e?i:(N(e)&&(e=1),N(t)&&(t=null),q(0,U(r/e)-1,(function(r){for(n=i.slice(e*r,e*r+e);n.length<e;)n.push(t);a.push(n)})),a)},isEmpty:function(){return 0==this.compact().length},sortBy:function(e,t){var n=this.clone();return n.sort((function(a,r){var i,o,s;return i=ie(a,e,n,[a]),o=ie(r,e,n,[r]),s=w(i)&&w(o)?function(e,t){var n,a,r,i,o,s,c=0,u=0;e=ye(e),t=ye(t);do{r=ve(e,c),i=ve(t,c),n=be(r),a=be(i),-1!==n&&-1!==a||(n=e.charCodeAt(c)||null,a=t.charCodeAt(c)||null),(o=r!==e.charAt(c))!=(s=i!==t.charAt(c))&&0===u&&(u=o-s),c+=1}while(null!=n&&null!=a&&n===a);return n===a?u:n<a?-1:1}(i,o):i<o?-1:i>o?1:0,s*(t?-1:1)})),n},randomize:function(){for(var e,t,n=this.concat(),a=n.length;a;)e=c.random()*a|0,t=n[--a],n[a]=n[e],n[e]=t;return n},zip:function(){var e=P(arguments);return this.map((function(t,n){return[t].concat(e.map((function(e){return n in e?e[n]:null})))}))},sample:function(e){var t=this.randomize();return arguments.length>0?t.slice(0,e):t[0]},each:function(e,t,n){return oe(this,e,t,n),this},add:function(e,t){return x(s(t))&&!isNaN(t)||(t=this.length),a.prototype.splice.apply(this,[t,0].concat(e)),this},remove:function(){var e,t=this;return P(arguments,(function(n){for(e=0;e<t.length;)re(t[e],n,t,[t[e],e,t])?t.splice(e,1):e++})),t},compact:function(e){var t=[];return oe(this,(function(n,a){g(n)?t.push(n.compact()):e&&n?t.push(n):e||null==n||n.valueOf()!=n.valueOf()||t.push(n)})),t},groupBy:function(e,t){var n,a=this,r={};return oe(a,(function(t,i){n=ie(t,e,a,[t,i,a]),r[n]||(r[n]=[]),r[n].push(t)})),t&&I(r,t),r},none:function(){return!this.any.apply(this,arguments)}}),A(a,!0,!1,{all:a.prototype.every,any:a.prototype.some,insert:a.prototype.add}),A(n,!1,!1,{map:function(e,t){return je(e).reduce((function(n,a){return n[a]=ie(e[a],t,e,[a,e[a],e]),n}),{})},reduce:function(e){var t=je(e).map((function(t){return e[t]}));return t.reduce.apply(t,P(arguments).slice(1))},each:function(e,t){return O(t),I(e,t),e},size:function(e){return je(e).length}});var Ae,Ee,Ce=\"any,all,none,count,find,findAll,isEmpty\".split(\",\"),Te=\"sum,average,min,max,least,most\".split(\",\"),Pe=\"map,reduce,size\".split(\",\"),De=Ce.concat(Te).concat(Pe);E(a,!0,(function(){var e=arguments;return e.length>0&&!b(e[0])}),\"map,every,all,some,any,none,filter\",(function(e,t){e[t]=function(e){return this[t]((function(n,a){return\"map\"===t?ie(n,e,this,[n,a,this]):re(n,e,this,[n,a,this])}))}})),function(){a[xe]=\"AÁÀÂÃĄBCĆČÇDĎÐEÉÈĚÊËĘFGĞHıIÍÌİÎÏJKLŁMNŃŇÑOÓÒÔPQRŘSŚŠŞTŤUÚÙŮÛÜVWXYÝZŹŻŽÞÆŒØÕÅÄÖ\".split(\"\").map((function(e){return e+e.toLowerCase()})).join(\"\");var e={};oe(\"AÁÀÂÃÄ,CÇ,EÉÈÊË,IÍÌİÎÏ,OÓÒÔÕÖ,Sß,UÚÙÛÜ\".split(\",\"),(function(t){var n=t.charAt(0);oe(t.slice(1).split(\"\"),(function(t){e[t]=n,e[t.toLowerCase()]=n.toLowerCase()}))})),a[ke]=!0,a[_e]=e}(),Se(Ce),Se(Te,!0),ee(Pe,z);var Oe,Me,Ne,Be,Re,Le,Ie=[\"ampm\",\"hour\",\"minute\",\"second\",\"ampm\",\"utc\",\"offset_sign\",\"offset_hours\",\"offset_minutes\",\"ampm\"],Fe=\"(?:[,.]\\\\d+)?\",ze=\"[0-5]\\\\d\"+Fe,qe=\"({t})?\\\\s*(\"+(\"\\\\d{1,2}\"+Fe)+\")(?:{h}(\"+ze+\")?{m}(?::?(\"+ze+\"){s})?\\\\s*(?:({t})|(Z)|(?:([+-])(\\\\d{2,2})(?::?(\\\\d{2,2}))?)?)?|\\\\s*({t}))\",He=\"〇一二三四五六七八九十百千万\",Ue=\"０１２３４５６７８９\",Ge={},$e=[],We=[{token:\"f{1,4}|ms|milliseconds\",format:function(e){return ut(e,\"Milliseconds\")}},{token:\"ss?|seconds\",format:function(e,t){return ut(e,\"Seconds\")}},{token:\"mm?|minutes\",format:function(e,t){return ut(e,\"Minutes\")}},{token:\"hh?|hours|12hr\",format:function(e){return function(e){var t=ut(e,\"Hours\");return 0===t?12:t-12*G(t/13)}(e)}},{token:\"HH?|24hr\",format:function(e){return ut(e,\"Hours\")}},{token:\"dd?|date|day\",format:function(e){return ut(e,\"Date\")}},{token:\"dow|weekday\",word:!0,format:function(e,t,n,a){var r=ut(e,\"Day\");return t.weekdays[r+7*(n-1)]}},{token:\"MM?\",format:function(e){return ut(e,\"Month\")+1}},{token:\"mon|month\",word:!0,format:function(e,t,n,a){var r=ut(e,\"Month\");return t.months[r+12*(n-1)]}},{token:\"y{2,4}|year\",format:function(e){return ut(e,\"FullYear\")}},{token:\"[Tt]{1,2}\",format:function(e,t,n,a){if(0==t.ampm.length)return\"\";var r=ut(e,\"Hours\"),i=t.ampm[G(r/12)];return 1===a.length&&(i=i.slice(0,1)),\"T\"===a.slice(0,1)&&(i=i.toUpperCase()),i}},{token:\"z{1,4}|tz|timezone\",text:!0,format:function(e,t,n,a){var r=e.getUTCOffset();return\"z\"!=a&&\"zz\"!=a||(r=r.replace(/(\\d{2})(\\d{2})/,(function(e,t,n){return $(t,a.length)}))),r}},{token:\"iso(tz|timezone)\",format:function(e){return e.getUTCOffset(!0)}},{token:\"ord\",format:function(e){var t=ut(e,\"Date\");return t+W(t)}}],Ve=[{unit:\"year\",method:\"FullYear\",ambiguous:!0,multiplier:function(e){return 24*(365+(e?e.isLeapYear()?1:0:.25))*60*60*1e3}},{unit:\"month\",method:\"Month\",ambiguous:!0,multiplier:function(e,t){var n,a=30.4375;return e&&t<=(n=e.daysInMonth()).days()&&(a=n),24*a*60*60*1e3},error:.919},{unit:\"week\",method:\"ISOWeek\",multiplier:function(){return 6048e5}},{unit:\"day\",method:\"Date\",ambiguous:!0,multiplier:function(){return 864e5}},{unit:\"hour\",method:\"Hours\",multiplier:function(){return 36e5}},{unit:\"minute\",method:\"Minutes\",multiplier:function(){return 6e4}},{unit:\"second\",method:\"Seconds\",multiplier:function(){return 1e3}},{unit:\"millisecond\",method:\"Milliseconds\",multiplier:function(){return 1}}],Ke={};function Je(e){F(this,e),this.compiledFormats=$e.concat()}function Ye(e,t){var n;if(w(e)||(e=\"\"),n=Ke[e]||Ke[e.slice(0,2)],!1===t&&!n)throw new Error(\"Invalid locale.\");return n||Ee}function Xe(e,t,n,a){e.compiledFormats.unshift({variant:a,locale:e,reg:r(\"^\"+t+\"$\",\"i\"),to:n})}function Ze(e){return e.slice(0,1).toUpperCase()+e.slice(1)}function Qe(e){return e.filter((function(e){return!!e})).join(\"|\")}function et(e,t){var n;return R(e[0])?e:x(e[0])&&!x(e[1])?[e[0]]:w(e[0])&&t?[tt(e[0]),e[1]]:(n={},Me.forEach((function(t,a){n[t.unit]=e[a]})),[n])}function tt(e,t){var n={};return match=e.match(/^(\\d+)?\\s?(\\w+?)s?$/i),match&&(N(t)&&(t=parseInt(match[1])||1),n[match[2].toLowerCase()]=t),n}function nt(e){return function(e){return e.replace(Oe,(function(e,t,n){var a,r,i=0,o=1;return t?e:(n.split(\"\").reverse().forEach((function(e){var t=Ge[e],n=t>9;n?(a&&(i+=o),o*=t/(r||1),r=t):(!1===a&&(o*=10),i+=o*t),a=n})),a&&(i+=o),i)}))}(e=e.trim().replace(/^just (?=now)|\\.+$/i,\"\"))}function at(e,t,n,a){var r,o,s,c,u,l,p,d,f,h=new i,m=!1;return h.utc(a),v(e)?h.utc(e.isUTC()).setTime(e.getTime()):x(e)?h.setTime(e):R(e)?(h.set(e,!0),c=e):w(e)&&(r=Ye(t),e=nt(e),r&&I(r.getFormats(),(function(n,a){var g,y=e.match(a.reg);if(y)return o=(s=a).locale,c=function(e,t){var n,a,r={};return t.forEach((function(t,i){N(n=e[i+1])||\"\"===n||(\"year\"===t&&(r.yearAsString=n.replace(/'/,\"\")),a=parseFloat(n.replace(/'/,\"\").replace(/,/,\".\")),r[t]=isNaN(a)?n.toLowerCase():a)})),r}(y,s.to),c.utc&&h.utc(),o.cachedFormat=s,c.timestamp?(c=c.timestamp,!1):(s.variant&&!w(c.month)&&(w(c.date)||r.hasVariant(t))&&(d=c.month,c.month=c.date,c.date=d),c.year&&2===c.yearAsString.length&&(c.year=(g=c.year,100*H(ut(new i,\"FullYear\")/100)-100*H(g/100)+g)),c.month&&(c.month=o.getMonth(c.month),c.shift&&!c.unit&&(c.unit=o.units[7])),c.weekday&&c.date?delete c.weekday:c.weekday&&(c.weekday=o.getWeekday(c.weekday),c.shift&&!c.unit&&(c.unit=o.units[5])),c.day&&(d=o.modifiersByName[c.day])?(c.day=d.value,h.reset(),m=!0):c.day&&(l=o.getWeekday(c.day))>-1&&(delete c.day,c.num&&c.month?(f=function(){var e=h.getWeekday();h.setWeekday(7*(c.num-1)+(e>l?l+7:l))},c.day=1):c.weekday=l),c.date&&!x(c.date)&&(c.date=o.getNumericDate(c.date)),o.matchPM(c.ampm)&&c.hour<12?c.hour+=12:o.matchAM(c.ampm)&&12===c.hour&&(c.hour=0),(\"offset_hours\"in c||\"offset_minutes\"in c)&&(h.utc(),c.offset_minutes=c.offset_minutes||0,c.offset_minutes+=60*c.offset_hours,\"-\"===c.offset_sign&&(c.offset_minutes*=-1),c.minute-=c.offset_minutes),c.unit&&(m=!0,p=o.getNumber(c.num),u=o.getEnglishUnit(c.unit),(c.shift||c.edge)&&(p*=(d=o.modifiersByName[c.shift])?d.value:0,\"month\"===u&&M(c.date)&&(h.set({day:c.date},!0),delete c.date),\"year\"===u&&M(c.month)&&(h.set({month:c.month,day:c.date},!0),delete c.month,delete c.date)),c.sign&&(d=o.modifiersByName[c.sign])&&(p*=d.value),M(c.weekday)&&(h.set({weekday:c.weekday},!0),delete c.weekday),c[u]=(c[u]||0)+p),\"-\"===c.year_sign&&(c.year*=-1),Ne.slice(1,4).forEach((function(e,t){var n=c[e.unit],a=n%1;a&&(c[Ne[t].unit]=H(a*(\"second\"===e.unit?1e3:60)),c[e.unit]=G(n))})),!1)})),s?m?h.advance(c):(h._utc&&h.reset(),ct(h,c,!0,!1,n)):(\"now\"!==e&&(h=new i(e)),a&&h.addMinutes(-h.getTimezoneOffset())),c&&c.edge&&(d=o.modifiersByName[c.edge],I(Ne.slice(4),(function(e,t){if(M(c[t.unit]))return u=t.unit,!1})),\"year\"===u?c.specificity=\"month\":\"month\"!==u&&\"week\"!==u||(c.specificity=\"day\"),h[(d.value<0?\"endOf\":\"beginningOf\")+Ze(u)](),-2===d.value&&h.reset()),f&&f(),h.utc(!1)),{date:h,set:c}}function rt(e){var t,n=c.abs(e),a=n,r=0;return Ne.slice(1).forEach((function(e,i){(t=G(H(n/e.multiplier()*10)/10))>=1&&(a=t,r=i+1)})),[a,r,e]}function it(e){var t=rt(e.millisecondsFromNow());return 6===t[1]&&(t[0]=c.abs(e.monthsFromNow())),t}function ot(e,t,n,a){var i,o=Ye(a),s=r(/^[A-Z]/);return e.isValid()?(Date[t]?t=Date[t]:b(t)&&(i=it(e),t=t.apply(e,i.concat(o))),!t&&n?(0===(i=i||it(e))[1]&&(i[1]=1,i[0]=1),o.getRelativeFormat(i)):(t=o[t=t||\"long\"]||t,We.forEach((function(n){t=t.replace(r(\"\\\\{(\"+n.token+\")(\\\\d)?\\\\}\",n.word?\"i\":\"\"),(function(t,a,r){var i=n.format(e,o,r||1,a),c=a.length,u=a.match(/^(.)\\1+$/);return n.word?(3===c&&(i=i.slice(0,3)),(u||a.match(s))&&(i=Ze(i))):u&&!n.text&&(i=(x(i)?$(i,c):i.toString()).slice(-c)),i}))})),t)):\"Invalid Date\"}function st(e,t,n,a){var r,i,o,s,c,u,l=0,p=0,d=0;return n>0&&(p=d=n,c=!0),!!(r=at(t,null,null,a)).date.isValid()&&(r.set&&r.set.specificity&&(Ve.forEach((function(t,n){t.unit===r.set.specificity&&(l=t.multiplier(r.date,e-r.date)-1)})),u=Ze(r.set.specificity),(r.set.edge||r.set.shift)&&r.date[\"beginningOf\"+u](),\"month\"===r.set.specificity&&(s=r.date.clone()[\"endOf\"+u]().getTime()),!c&&r.set.sign&&\"millisecond\"!=r.set.specificity&&(p=50,d=-50)),i=e.getTime(),o=r.date.getTime(),s=function(e,t,n){var a,r,i,o;a=new Date(t),r=new Date(n).utc(e.isUTC()),23!==ut(r,\"Hours\")&&(i=a.getTimezoneOffset())!==(o=r.getTimezoneOffset())&&(n+=(o-i).minutes());return n}(e,o,s=s||o+l),i>=o-p&&i<=s+d)}function ct(e,t,n,a,r){var o,s;function c(e){return M(t[e])?t[e]:t[e+\"s\"]}function u(e){return M(c(e))}function l(e,t){return u(e)||t&&u(\"weekday\")}if(x(t)&&a)t={milliseconds:t};else if(x(t))return e.setTime(t),e;if(M(t.date)&&(t.day=t.date),I(Ne,(function(a,r){var i=\"day\"===r.unit;if(l(r.unit,i))return t.specificity=r.unit,o=+a,!1;!n||\"week\"===r.unit||i&&u(\"week\")||lt(e,r.method,i?1:0)})),Ve.forEach((function(n,r){var i,o=n.unit,s=n.method;Ve[r-1];N(i=c(o))||(a?(\"week\"===o&&(i=(t.day||0)+7*i,s=\"Date\"),i=i*a+ut(e,s)):\"month\"===o&&u(\"day\")&&lt(e,\"Date\",15),lt(e,s,i),a&&\"month\"===o&&function(e,t){t<0&&(t=t%12+12);t%12!=ut(e,\"Month\")&&lt(e,\"Date\",0)}(e,i))})),!a&&!u(\"day\")&&u(\"weekday\")){var p=c(\"weekday\");e.setWeekday(p)}return s=new i,(-1===r&&e>s||1===r&&e<s)&&I(Ne.slice(o+1),(function(t,n){if((n.ambiguous||\"week\"===n.unit&&u(\"weekday\"))&&!l(n.unit,\"day\"===n.unit))return e[n.addMethod](r),!1})),e}function ut(e,t){return e[\"get\"+(e._utc?\"UTC\":\"\")+t]()}function lt(e,t,n){return e[\"set\"+(e._utc&&\"ISOWeek\"!=t?\"UTC\":\"\")+t](n)}function pt(e,t,n){var a,r={h:0,m:1,s:2};return t=t||Ae,e.replace(/{([a-z])}/g,(function(e,i){var o=[],s=\"h\"===i,c=s&&!n;return\"t\"===i?t.ampm.join(\"|\"):(s&&o.push(\":\"),(a=t.timeSuffixes[r[i]])&&o.push(a+\"\\\\s*\"),0===o.length?\"\":\"(?:\"+o.join(\"|\")+\")\"+(c?\"\":\"?\"))}))}function dt(e,t,n){var a,r;return x(e[1])?a=et(e)[0]:(a=e[0],r=e[1]),at(a,r,t,n).date}Je.prototype={getMonth:function(e){return x(e)?e-1:this.months.indexOf(e)%12},getWeekday:function(e){return this.weekdays.indexOf(e)%7},getNumber:function(e){var t;return x(e)?e:e&&-1!==(t=this.numbers.indexOf(e))?(t+1)%10:1},getNumericDate:function(e){var t=this;return e.replace(r(this.num,\"g\"),(function(e){return t.getNumber(e)||\"\"}))},getEnglishUnit:function(e){return Ae.units[this.units.indexOf(e)%8]},getRelativeFormat:function(e){return this.convertAdjustedToFormat(e,e[2]>0?\"future\":\"past\")},getDuration:function(e){return this.convertAdjustedToFormat(rt(e),\"duration\")},hasVariant:function(e){return\"en\"===(e=e||this.code)||\"en-US\"===e||this.variant},matchAM:function(e){return e===this.ampm[0]},matchPM:function(e){return e&&e===this.ampm[1]},convertAdjustedToFormat:function(e,t){var n,a,r,i=e[0],o=e[1],s=e[2],c=this[t]||this.relative;return b(c)?c.call(this,i,o,s,t):(r=this.plural&&i>1?1:0,a=this.units[8*r+o]||this.units[o],this.capitalizeUnit&&(a=Ze(a)),n=this.modifiers.filter((function(e){return\"sign\"==e.name&&e.value==(s>0?1:-1)}))[0],c.replace(/\\{(.*?)\\}/g,(function(e,t){switch(t){case\"num\":return i;case\"unit\":return a;case\"sign\":return n.src}})))},getFormats:function(){return this.cachedFormat?[this.cachedFormat].concat(this.compiledFormats):this.compiledFormats},addFormat:function(e,t,n,a,r){var i,o,s,c=n||[],u=this;e=(e=e.replace(/\\s+/g,\"[-,. ]*\")).replace(/\\{([^,]+?)\\}/g,(function(e,t){var a,r,i,o=t.match(/\\?$/),s=t.match(/^(\\d+)\\??$/),l=t.match(/(\\d)(?:-(\\d))?/),p=t.replace(/[^a-z]+$/,\"\");return s?a=u.tokens[s[1]]:u[p]?a=u[p]:u[p+\"s\"]&&(a=u[p+\"s\"],l&&(r=[],a.forEach((function(e,t){var n=t%(u.units?8:a.length);n>=l[1]&&n<=(l[2]||l[1])&&r.push(e)})),a=r),a=Qe(a)),s?i=\"(?:\"+a+\")\":(n||c.push(p),i=\"(\"+a+\")\"),o&&(i+=\"?\"),i})),t?(i=pt(qe,u,r),o=[\"t\",\"[\\\\s\\\\u3000]\"].concat(u.timeMarker),s=e.match(/\\\\d\\{\\d,\\d\\}\\)+\\??$/),Xe(u,\"(?:\"+i+\")[,\\\\s\\\\u3000]+?\"+e,Ie.concat(c),a),Xe(u,e+\"(?:[,\\\\s]*(?:\"+o.join(\"|\")+(s?\"+\":\"*\")+\")\"+i+\")?\",c.concat(Ie),a)):Xe(u,e,c,a)}},i.extend({create:function(){return dt(arguments)},past:function(){return dt(arguments,-1)},future:function(){return dt(arguments,1)},addLocale:function(e,t){return function(e,t){var n,a,r;function i(e){var t=n[e];w(t)?n[e]=t.split(\",\"):t||(n[e]=[])}function o(e,t){return(e=e.split(\"+\").map((function(e){return e.replace(/(.+):(.+)$/,(function(e,t,n){return n.split(\"|\").map((function(e){return t+e})).join(\"|\")}))})).join(\"|\")).split(\"|\").forEach(t)}function s(e,t,a){var r=[];n[e].forEach((function(e,n){t&&(e+=\"+\"+e.slice(0,3)),o(e,(function(e,t){r[t*a+n]=e.toLowerCase()}))})),n[e]=r}function c(e,t,a){var r=\"\\\\d{\"+e+\",\"+t+\"}\";return a&&(r+=\"|(?:\"+Qe(n.numbers)+\")+\"),r}function u(e,t){n[e]=n[e]||t}return n=new Je(t),i(\"modifiers\"),\"months,weekdays,units,numbers,articles,tokens,timeMarker,ampm,timeSuffixes,dateParse,timeParse\".split(\",\").forEach(i),s(\"months\",a=!n.monthSuffix,12),s(\"weekdays\",a,7),s(\"units\",!1,8),s(\"numbers\",!1,10),u(\"code\",e),u(\"date\",c(1,2,n.digitDate)),u(\"year\",\"'\\\\d{2}|\"+c(4,4)),u(\"num\",(r=[\"\\\\d+\"].concat(n.articles),n.numbers&&(r=r.concat(n.numbers)),Qe(r))),function(){var e=[];n.modifiersByName={},n.modifiers.push({name:\"day\",src:\"yesterday\",value:-1}),n.modifiers.push({name:\"day\",src:\"today\",value:0}),n.modifiers.push({name:\"day\",src:\"tomorrow\",value:1}),n.modifiers.forEach((function(t){var a=t.name;o(t.src,(function(r){var i=n[a];n.modifiersByName[r]=t,e.push({name:a,src:r,value:t.value}),n[a]=i?i+\"|\"+r:r}))})),n.day+=\"|\"+Qe(n.weekdays),n.modifiers=e}(),n.monthSuffix&&(n.month=c(1,2),n.months=q(1,12).map((function(e){return e+n.monthSuffix}))),n.full_month=c(1,2)+\"|\"+Qe(n.months),n.timeSuffixes.length>0&&n.addFormat(pt(qe,n),!1,Ie),n.addFormat(\"{day}\",!0),n.addFormat(\"{month}\"+(n.monthSuffix||\"\")),n.addFormat(\"{year}\"+(n.yearSuffix||\"\")),n.timeParse.forEach((function(e){n.addFormat(e,!0)})),n.dateParse.forEach((function(e){n.addFormat(e)})),Ke[e]=n}(e,t)},setLocale:function(e,t){var n=Ye(e,!1);return Ee=n,e&&e!=n.code&&(n.code=e),n},getLocale:function(e){return e?Ye(e,!1):Ee},addFormat:function(e,t,n){Xe(Ye(n),e,t)}},!1,!1),i.extend({set:function(){var e=et(arguments);return ct(this,e[0],e[1])},setWeekday:function(e){if(!N(e))return lt(this,\"Date\",ut(this,\"Date\")+e-ut(this,\"Day\"))},setISOWeek:function(e){var t=ut(this,\"Day\")||7;if(!N(e))return this.set({month:0,date:4}),this.set({weekday:1}),e>1&&this.addWeeks(e-1),1!==t&&this.advance({days:t-1}),this.getTime()},getISOWeek:function(){return function(e){var t=ut(e=e.clone(),\"Day\")||7;return e.addDays(4-t).reset(),1+G(e.daysSince(e.clone().beginningOfYear())/7)}(this)},getUTCOffset:function(e){var t=this._utc?0:this.getTimezoneOffset(),n=!0===e?\":\":\"\";return!t&&e?\"Z\":$(G(-t/60),2,!0)+n+$(c.abs(t%60),2)},utc:function(e){return T(this,\"_utc\",!0===e||0===arguments.length),this},isUTC:function(){return!!this._utc||0===this.getTimezoneOffset()},advance:function(){var e=et(arguments,!0);return ct(this,e[0],e[1],1)},rewind:function(){var e=et(arguments,!0);return ct(this,e[0],e[1],-1)},isValid:function(){return!isNaN(this.getTime())},isAfter:function(e,t,n){return this.getTime()>i.create(e).getTime()-(t||0)},isBefore:function(e,t){return this.getTime()<i.create(e).getTime()+(t||0)},isBetween:function(e,t,n){var a=this.getTime(),r=i.create(e).getTime(),o=i.create(t).getTime(),s=c.min(r,o),u=c.max(r,o);return s-(n=n||0)<a&&u+n>a},isLeapYear:function(){var e=ut(this,\"FullYear\");return e%4==0&&e%100!=0||e%400==0},daysInMonth:function(){return 32-ut(new i(ut(this,\"FullYear\"),ut(this,\"Month\"),32),\"Date\")},format:function(e,t){return ot(this,e,!1,t)},relative:function(e,t){return w(e)&&(t=e,e=null),ot(this,e,!0,t)},is:function(e,t,n){var a,r;if(this.isValid()){if(w(e))switch(e=e.trim().toLowerCase(),r=this.clone().utc(n),!0){case\"future\"===e:return this.getTime()>(new i).getTime();case\"past\"===e:return this.getTime()<(new i).getTime();case\"weekday\"===e:return ut(r,\"Day\")>0&&ut(r,\"Day\")<6;case\"weekend\"===e:return 0===ut(r,\"Day\")||6===ut(r,\"Day\");case(a=Ae.weekdays.indexOf(e)%7)>-1:return ut(r,\"Day\")===a;case(a=Ae.months.indexOf(e)%12)>-1:return ut(r,\"Month\")===a}return st(this,e,t,n)}},reset:function(e){var t,n={};return\"date\"===(e=e||\"hours\")&&(e=\"days\"),t=Ve.some((function(t){return e===t.unit||e===t.unit+\"s\"})),n[e]=e.match(/^days?/)?1:0,t?this.set(n,!0):this},clone:function(){var e=new i(this.getTime());return e.utc(!!this._utc),e}}),i.extend({iso:function(){return this.toISOString()},getWeekday:i.prototype.getDay,getUTCWeekday:i.prototype.getUTCDay}),s.extend({duration:function(e){return Ye(e).getDuration(this)}}),Ae=Ee=i.addLocale(\"en\",{plural:!0,timeMarker:\"at\",ampm:\"am,pm\",months:\"January,February,March,April,May,June,July,August,September,October,November,December\",weekdays:\"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday\",units:\"millisecond:|s,second:|s,minute:|s,hour:|s,day:|s,week:|s,month:|s,year:|s\",numbers:\"one,two,three,four,five,six,seven,eight,nine,ten\",articles:\"a,an,the\",tokens:\"the,st|nd|rd|th,of\",short:\"{Month} {d}, {yyyy}\",long:\"{Month} {d}, {yyyy} {h}:{mm}{tt}\",full:\"{Weekday} {Month} {d}, {yyyy} {h}:{mm}:{ss}{tt}\",past:\"{num} {unit} {sign}\",future:\"{num} {unit} {sign}\",duration:\"{num} {unit}\",modifiers:[{name:\"sign\",src:\"ago|before\",value:-1},{name:\"sign\",src:\"from now|after|from|in|later\",value:1},{name:\"edge\",src:\"last day\",value:-2},{name:\"edge\",src:\"end\",value:-1},{name:\"edge\",src:\"first day|beginning\",value:1},{name:\"shift\",src:\"last\",value:-1},{name:\"shift\",src:\"the|this\",value:0},{name:\"shift\",src:\"next\",value:1}],dateParse:[\"{num} {unit} {sign}\",\"{sign} {num} {unit}\",\"{month} {year}\",\"{shift} {unit=5-7}\",\"{0?} {date}{1}\",\"{0?} {edge} of {shift?} {unit=4-7?}{month?}{year?}\"],timeParse:[\"{0} {num}{1} {day} of {month} {year?}\",\"{weekday?} {month} {date}{1?} {year?}\",\"{date} {month} {year}\",\"{date} {month}\",\"{shift} {weekday}\",\"{shift} week {weekday}\",\"{weekday} {2?} {shift} week\",\"{num} {unit=4-5} {sign} {day}\",\"{0?} {date}{1} of {month}\",\"{0?}{month?} {date?}{1?} of {shift} {unit=6-7}\"]}),Ne=Ve.concat().reverse(),(Me=Ve.concat()).splice(2,1),E(i,!0,!1,Ve,(function(e,t,n){var a,r,o=t.unit,u=Ze(o),l=t.multiplier();function p(e){var n=e/l,a=n%1,r=t.error||.999;return a&&c.abs(a%1)>r&&(n=H(n)),parseInt(n)}t.addMethod=\"add\"+u+\"s\",a=function(e,t){return p(this.getTime()-i.create(e,t).getTime())},r=function(e,t){return p(i.create(e,t).getTime()-this.getTime())},e[o+\"sAgo\"]=r,e[o+\"sUntil\"]=r,e[o+\"sSince\"]=a,e[o+\"sFromNow\"]=a,e[t.addMethod]=function(e,t){var n={};return n[o]=e,this.advance(n,t)},function(e,t){var n=e.unit,a={};function r(){return H(this*t)}function i(){return dt(arguments)[e.addMethod](this)}function o(){return dt(arguments)[e.addMethod](-this)}a[n]=r,a[n+\"s\"]=r,a[n+\"Before\"]=o,a[n+\"sBefore\"]=o,a[n+\"Ago\"]=o,a[n+\"sAgo\"]=o,a[n+\"After\"]=i,a[n+\"sAfter\"]=i,a[n+\"FromNow\"]=i,a[n+\"sFromNow\"]=i,s.extend(a)}(t,l),n<3&&[\"Last\",\"This\",\"Next\"].forEach((function(t){e[\"is\"+t+u]=function(){return this.is(t+\" \"+o)}})),n<4&&(e[\"beginningOf\"+u]=function(){var e={};switch(o){case\"year\":e.year=ut(this,\"FullYear\");break;case\"month\":e.month=ut(this,\"Month\");break;case\"day\":e.day=ut(this,\"Date\");break;case\"week\":e.weekday=0}return this.set(e,!0)},e[\"endOf\"+u]=function(){var e={hours:23,minutes:59,seconds:59,milliseconds:999};switch(o){case\"year\":e.month=11,e.day=31;break;case\"month\":e.day=this.daysInMonth();break;case\"week\":e.weekday=6}return this.set(e,!0)})})),Ae.addFormat(\"([+-])?(\\\\d{4,4})[-.]?{full_month}[-.]?(\\\\d{1,2})?\",!0,[\"year_sign\",\"year\",\"month\",\"date\"],!1,!0),Ae.addFormat(\"(\\\\d{1,2})[-.\\\\/]{full_month}(?:[-.\\\\/](\\\\d{2,4}))?\",!0,[\"date\",\"month\",\"year\"],!0),Ae.addFormat(\"{full_month}[-.](\\\\d{4,4})\",!1,[\"month\",\"year\"]),Ae.addFormat(\"\\\\/Date\\\\((\\\\d+(?:\\\\+\\\\d{4,4})?)\\\\)\\\\/\",!1,[\"timestamp\"]),Ae.addFormat(pt(qe,Ae),!1,Ie),$e=Ae.compiledFormats.slice(0,7).reverse(),Ae.compiledFormats=Ae.compiledFormats.slice(7).concat($e),E(i,!0,!1,\"short,long,full\",(function(e,t){e[t]=function(e){return ot(this,t,!1,e)}})),He.split(\"\").forEach((function(e,t){t>9&&(t=c.pow(10,t-9)),Ge[e]=t})),Ue.split(\"\").forEach((function(e,t){Ge[e]=t})),Oe=r(\"([期週周])?([\"+He+Ue+\"]+)(?!昨)\",\"g\"),Be=\"today,yesterday,tomorrow,weekday,weekend,future,past\".split(\",\"),Re=Ae.weekdays.slice(0,7),Le=Ae.months.slice(0,12),E(i,!0,!1,Be.concat(Re).concat(Le),(function(e,t){e[\"is\"+Ze(t)]=function(e){return this.is(t,0,e)}})),i.extend({utc:{create:function(){return dt(arguments,0,!0)},past:function(){return dt(arguments,-1,!0)},future:function(){return dt(arguments,1,!0)}}},!1,!1),i.extend({RFC1123:\"{Dow}, {dd} {Mon} {yyyy} {HH}:{mm}:{ss} {tz}\",RFC1036:\"{Weekday}, {dd}-{Mon}-{yy} {HH}:{mm}:{ss} {tz}\",ISO8601_DATE:\"{yyyy}-{MM}-{dd}\",ISO8601_DATETIME:\"{yyyy}-{MM}-{dd}T{HH}:{mm}:{ss}.{fff}{isotz}\"},!1,!1);var ft=function(e,t){this.start=i.create(e),this.end=i.create(t)};function ht(e,t,n,a,r){var i;t!==1/0&&(e.timers||(e.timers=[]),x(t)||(t=0),e.timers.push(setTimeout((function(){e.timers.splice(i,1),n.apply(a,r||[])}),t)),i=e.timers.length)}function mt(e,t,n,a,r,i){var o,s,u=e.toFixed(20),l=u.search(/\\./)-u.search(/[1-9]/);return l>0&&(l-=1),s=c.max(c.min((l/3).floor(),!1===r?n.length:r),-a),o=n.charAt(s+a-1),l<-9&&(s=-3,t=l.abs()-9,o=n.slice(0,1)),(e/(i?2..pow(10*s):10..pow(3*s))).round(t||0).format()+o.trim()}ft.prototype.toString=function(){return this.isValid()?this.start.full()+\"..\"+this.end.full():\"Invalid DateRange\"},A(ft,!0,!1,{isValid:function(){return this.start<this.end},duration:function(){return this.isValid()?this.end.getTime()-this.start.getTime():NaN},contains:function(e){var t=this;return(e.start&&e.end?[e.start,e.end]:[e]).every((function(e){return e>=t.start&&e<=t.end}))},every:function(e,t){var n,a,r=this.start.clone(),i=[],o=0;for(w(e)?(r.advance(tt(e,0),!0),n=tt(e),a=\"day\"===e.toLowerCase()):n={milliseconds:e};r<=this.end;)i.push(r),t&&t(r,o),a&&23===ut(r,\"Hours\")?lt(r=r.clone(),\"Hours\",48):r=r.clone().advance(n,!0),o++;return i},union:function(e){return new ft(this.start<e.start?this.start:e.start,this.end>e.end?this.end:e.end)},intersect:function(e){return new ft(this.start>e.start?this.start:e.start,this.end<e.end?this.end:e.end)},clone:function(e){return new ft(this.start,this.end)}}),E(ft,!0,!1,\"Millisecond,Second,Minute,Hour,Day,Week,Month,Year\",(function(e,t){e[\"each\"+t]=function(e){return this.every(t,e)}})),A(i,!1,!1,{range:function(e,t){return new ft(e,t)}}),A(Function,!0,!1,{lazy:function(e,t){var n,a,r,i,o=this,s=[],u=!1;function l(){return(!u||s.length<t-1)&&(s.push([this,arguments]),n()),i}return t=t||1/0,a=U(e=e||1),r=H(a/e)||1,n=function(){if(!u&&0!=s.length){for(var e=c.max(s.length-r,0);s.length>e;)i=Function.prototype.apply.apply(o,s.shift());ht(l,a,(function(){u=!1,n()})),u=!0}},l},delay:function(e){var t=this;return ht(t,e,t,t,P(arguments).slice(1)),t},throttle:function(e){return this.lazy(e,1)},debounce:function(e){var t=this;return function n(){n.cancel(),ht(n,e,t,this,arguments)}},cancel:function(){if(g(this.timers))for(;this.timers.length>0;)clearTimeout(this.timers.shift());return this},after:function(e){var t=this,n=0,a=[];if(x(e)){if(0===e)return t.call(),t}else e=1;return function(){var r;if(a.push(P(arguments)),++n==e)return r=t.call(this,a),n=0,a=[],r}},once:function(){return this.throttle(1/0)},fill:function(){var e=this,t=P(arguments);return function(){var n=P(arguments);return t.forEach((function(e,t){(null!=e||t>=n.length)&&n.splice(t,0,e)})),e.apply(this,n)}}}),A(s,!1,!1,{random:function(e,t){var n,a;return 1==arguments.length&&(t=e,e=0),n=c.min(e||0,N(t)?1:t),a=c.max(e||0,N(t)?1:t)+1,G(c.random()*(a-n)+n)}}),A(s,!0,!1,{log:function(e){return c.log(this)/(e?c.log(e):1)},abbr:function(e){return mt(this,e,\"kmbt\",0,4)},metric:function(e,t){return mt(this,e,\"nμm kMGTPE\",4,N(t)?1:t)},bytes:function(e,t){return mt(this,e,\"kMGTPE\",0,N(t)?4:t,!0)+\"B\"},isInteger:function(){return this%1==0},isOdd:function(){return!isNaN(this)&&!this.isMultipleOf(2)},isEven:function(){return this.isMultipleOf(2)},isMultipleOf:function(e){return this%e==0},format:function(e,t,n){var a,r,i,o,s=\"\";for(N(t)&&(t=\",\"),N(n)&&(n=\".\"),i=(r=(x(e)?H(this,e||0).toFixed(c.max(e,0)):this.toString()).replace(/^-/,\"\").split(\".\"))[0],o=r[1],a=i.length;a>0;a-=3)a<i.length&&(s=t+s),s=i.slice(c.max(0,a-3),a)+s;return o&&(s+=n+V((e||0)-o.length,\"0\")+o),(this<0?\"-\":\"\")+s},hex:function(e){return this.pad(e||1,!1,16)},upto:function(e,t,n){return q(this,e,t,n||1)},downto:function(e,t,n){return q(this,e,t,-(n||1))},times:function(e){if(e)for(var t=0;t<this;t++)e.call(this,t);return this.toNumber()},chr:function(){return o.fromCharCode(this)},pad:function(e,t,n){return $(this,e,t,n)},ordinalize:function(){var e=this.abs();return this+W(parseInt(e.toString().slice(-2)))},toNumber:function(){return parseFloat(this,10)}}),E(s,!0,!1,\"round,floor,ceil\",(function(e,t){e[t]=function(e){return H(this,e,t)}})),E(s,!0,!1,\"abs,pow,sin,asin,cos,acos,tan,atan,exp,pow,sqrt\",(function(e,t){e[t]=function(e,n){return c[t](this,e,n)}}));var gt,yt,vt=\"isObject,isNaN\".split(\",\"),bt=\"keys,values,select,reject,each,merge,clone,equal,watch,tap,has,toQueryString\".split(\",\");function xt(e,t,n,a){var r,i,o;!1!==a&&(i=t.match(/^(.+?)(\\[.*\\])$/))?(o=i[1],i[2].replace(/^\\[|\\]$/g,\"\").split(\"][\").forEach((function(t){r=!t||t.match(/^\\d+$/),!o&&g(e)&&(o=e.length),L(e,o)||(e[o]=r?[]:{}),e=e[o],o=t})),!o&&r&&(o=e.length.toString()),xt(e,o,n)):n.match(/^[+-]?\\d+(\\.\\d+)?$/)?e[t]=parseFloat(n):e[t]=\"true\"===n||\"false\"!==n&&n}function wt(e,t){var n;return g(t)||R(t)&&t.toString===u?(n=[],I(t,(function(t,a){e&&(t=e+\"[\"+t+\"]\"),n.push(wt(t,a))})),n.join(\"&\")):e?kt(e)+\"=\"+(v(t)?t.getTime():kt(t)):\"\"}function kt(e){return e||!1===e||0===e?encodeURIComponent(e).replace(/%20/g,\"+\"):\"\"}function _t(e,t,n){var a,r={};return I(e,(function(e,i){a=!1,D(t,(function(t){(function(e,t){return k(t)?t.test(e):B(t)?L(t,e):e===o(t)})(e,t)&&(a=!0)}),1),a===n&&(r[e]=i)})),r}function jt(e){return o.fromCharCode(e)}A(n,!1,!0,{watch:function(e,t,a){if(d){var r=e[t];n.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){return r},set:function(n){r=a.call(e,t,r,n)}})}}}),A(n,!1,(function(e,t){return b(t)}),{keys:function(e,t){var a=n.keys(e);return a.forEach((function(n){t.call(e,n,e[n])})),a}}),A(n,!1,!1,{isObject:function(e){return R(e)},isNaN:function(e){return x(e)&&e.valueOf()!=e.valueOf()},equal:function(e,t){return X(e,t)},extended:function(e){return new z(e)},merge:function(e,t,o,s){var c,u;if(e&&\"string\"!=typeof t)for(c in t)if(L(t,c)&&e){if(u=t[c],M(e[c])){if(!1===s)continue;b(s)&&(u=s.call(t,c,e[c],t[c]))}if(!0===o&&u&&B(u))if(v(u))u=new i(u.getTime());else{if(!k(u)){e[c]||(e[c]=a.isArray(u)?[]:{}),n.merge(e[c],t[c],o,s);continue}u=new r(u.source,K(u))}e[c]=u}return e},values:function(e,t){var n=[];return I(e,(function(a,r){n.push(r),t&&t.call(e,r)})),n},clone:function(e,t){var a;return v(e)&&e.clone?e.clone():B(e)?(a=e instanceof z?new z:new e.constructor,n.merge(a,e,t)):e},fromQueryString:function(e,t){var a=n.extended();return(e=e&&e.toString?e.toString():\"\").replace(/^.*?\\?/,\"\").split(\"&\").forEach((function(e){var n=e.split(\"=\");2===n.length&&xt(a,n[0],decodeURIComponent(n[1]),t)})),a},toQueryString:function(e,t){return wt(t,e)},tap:function(e,t){var n=t;return b(t)||(n=function(){t&&e[t]()}),n.call(e,e),e},has:function(e,t){return L(e,t)},select:function(e){return _t(e,arguments,!0)},reject:function(e){return _t(e,arguments,!1)}}),E(n,!1,!1,f,(function(e,t){var n=\"is\"+t;vt.push(n),e[n]=p[t]})),A(n,!1,(function(){return 0===arguments.length}),{extend:function(){var e=vt.concat(bt);void 0!==De&&(e=e.concat(De)),ee(e,n)}}),ee(bt,z),A(r,!1,!1,{escape:function(e){return J(e)}}),A(r,!0,!1,{getFlags:function(){return K(this)},setFlags:function(e){return r(this.source,e)},addFlag:function(e){return this.setFlags(K(this,e))},removeFlag:function(e){return this.setFlags(K(this).replace(e,\"\"))}}),A(o,!0,(function(e){return k(e)||arguments.length>2}),{startsWith:function(e,t,n){var a,i=this;return t&&(i=i.slice(t)),N(n)&&(n=!0),a=k(e)?e.source.replace(\"^\",\"\"):J(e),r(\"^\"+a,n?\"\":\"i\").test(i)},endsWith:function(e,t,n){var a,i=this;return M(t)&&(i=i.slice(0,t)),N(n)&&(n=!0),a=k(e)?e.source.replace(\"$\",\"\"):J(e),r(a+\"$\",n?\"\":\"i\").test(i)}}),A(o,!0,!1,{escapeRegExp:function(){return J(this)},escapeURL:function(e){return e?encodeURIComponent(this):encodeURI(this)},unescapeURL:function(e){return e?decodeURI(this):decodeURIComponent(this)},escapeHTML:function(){return this.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&apos;\").replace(/\\//g,\"&#x2f;\")},unescapeHTML:function(){return this.replace(/&lt;/g,\"<\").replace(/&gt;/g,\">\").replace(/&quot;/g,'\"').replace(/&apos;/g,\"'\").replace(/&#x2f;/g,\"/\").replace(/&amp;/g,\"&\")},encodeBase64:function(){return gt(this)},decodeBase64:function(){return yt(this)},each:function(e,t){var n,a,i;if(b(e)?(t=e,e=/[\\s\\S]/g):e?w(e)?e=r(J(e),\"gi\"):k(e)&&(e=r(e.source,K(e,\"g\"))):e=/[\\s\\S]/g,n=this.match(e)||[],t)for(a=0,i=n.length;a<i;a++)n[a]=t.call(this,n[a],a,n)||n[a];return n},shift:function(e){var t=\"\";return e=e||0,this.codes((function(n){t+=jt(n+e)})),t},codes:function(e){var t,n,a=[];for(t=0,n=this.length;t<n;t++){var r=this.charCodeAt(t);a.push(r),e&&e.call(this,r,t)}return a},chars:function(e){return this.each(e)},words:function(e){return this.trim().each(/\\S+/g,e)},lines:function(e){return this.trim().each(/^.*$/gm,e)},paragraphs:function(e){var t=this.trim().split(/[\\r\\n]{2,}/);return t=t.map((function(t){if(e)var n=e.call(t);return n||t}))},isBlank:function(){return 0===this.trim().length},has:function(e){return-1!==this.search(k(e)?e:J(e))},add:function(e,t){return t=N(t)?this.length:t,this.slice(0,t)+e+this.slice(t)},remove:function(e){return this.replace(e,\"\")},reverse:function(){return this.split(\"\").reverse().join(\"\")},compact:function(){return this.trim().replace(/([\\r\\n\\s　])+/g,(function(e,t){return\"　\"===t?t:\" \"}))},at:function(){return Q(this,arguments,!0)},from:function(e){return this.slice(e)},to:function(e){return N(e)&&(e=this.length),this.slice(0,e)},dasherize:function(){return this.underscore().replace(/_/g,\"-\")},underscore:function(){return this.replace(/[-\\s]+/g,\"_\").replace(o.Inflector&&o.Inflector.acronymRegExp,(function(e,t){return(t>0?\"_\":\"\")+e.toLowerCase()})).replace(/([A-Z\\d]+)([A-Z][a-z])/g,\"$1_$2\").replace(/([a-z\\d])([A-Z])/g,\"$1_$2\").toLowerCase()},camelize:function(e){return this.underscore().replace(/(^|_)([^_]+)/g,(function(t,n,a,r){var i=function(e){var t=o.Inflector;if(e=t&&t.acronyms[e],w(e))return e}(a),s=!1!==e||r>0;return i?s?i:i.toLowerCase():s?a.capitalize():a}))},spacify:function(){return this.underscore().replace(/_/g,\" \")},stripTags:function(){var e=this;return D(arguments.length>0?arguments:[\"\"],(function(t){e=e.replace(r(\"</?\"+J(t)+\"[^<>]*>\",\"gi\"),\"\")})),e},removeTags:function(){var e=this;return D(arguments.length>0?arguments:[\"\\\\S+\"],(function(t){var n=r(\"<(\"+t+\")[^<>]*(?:\\\\/>|>.*?<\\\\/\\\\1>)\",\"gi\");e=e.replace(n,\"\")})),e},truncate:function(e,t,n,a){var i,s=\"\",c=\"\",u=this.toString(),l=\"[\\t\\n\\v\\f\\r   ᠎             \\u2028\\u2029　\\ufeff]+\",p=\"[^\\t\\n\\v\\f\\r   ᠎             \\u2028\\u2029　\\ufeff]*\",d=r(l+p+\"$\");if(a=N(a)?\"...\":o(a),u.length<=e)return u;switch(n){case\"left\":i=u.length-e,s=a,u=u.slice(i),d=r(\"^\"+p+l);break;case\"middle\":i=G(e/2),c=a+u.slice(u.length-i).trimLeft(),u=u.slice(0,i);break;default:i=e,c=a,u=u.slice(0,i)}return!1===t&&this.slice(i,i+1).match(/\\S/)&&(u=u.remove(d)),s+u+c},pad:function(e,t){return V(t,e)+this+V(t,e)},padLeft:function(e,t){return V(t,e)+this},padRight:function(e,t){return this+V(t,e)},first:function(e){return N(e)&&(e=1),this.substr(0,e)},last:function(e){N(e)&&(e=1);var t=this.length-e<0?0:this.length-e;return this.substr(t)},repeat:function(e){var t=\"\",n=this;if(!x(e)||e<1)return\"\";for(;e;)1&e&&(t+=n),(e>>=1)&&(n+=n);return t},toNumber:function(e){var t=this.replace(/,/g,\"\");return t.match(/\\./)?parseFloat(t):parseInt(t,e||10)},capitalize:function(e){var t;return this.toLowerCase().replace(e?/[\\s\\S]/g:/^\\S/,(function(e){var n,a=e.toUpperCase();return n=t?e:a,t=a!==e,n}))},assign:function(){var e={};return P(arguments,(function(t,n){R(t)?F(e,t):e[n+1]=t})),this.replace(/\\{([^{]+?)\\}/g,(function(t,n){return L(e,n)?e[n]:t}))}}),A(o,!0,!1,{insert:o.prototype.add}),function(e){if(this.btoa)return gt=this.btoa,void(yt=this.atob);var t=/[^A-Za-z0-9\\+\\/\\=]/g;gt=function(t){var n,a,r,i,o,s,c,u=\"\",l=0;do{i=(n=t.charCodeAt(l++))>>2,o=(3&n)<<4|(a=t.charCodeAt(l++))>>4,s=(15&a)<<2|(r=t.charCodeAt(l++))>>6,c=63&r,isNaN(a)?s=c=64:isNaN(r)&&(c=64),u=u+e.charAt(i)+e.charAt(o)+e.charAt(s)+e.charAt(c),n=a=r=\"\",i=o=s=c=\"\"}while(l<t.length);return u},yt=function(n){var a,r,i,o,s,c,u=\"\",l=0;if(n.match(t))throw new Error(\"String contains invalid base64 characters\");n=n.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");do{i=e.indexOf(n.charAt(l++)),a=(15&(o=e.indexOf(n.charAt(l++))))<<4|(s=e.indexOf(n.charAt(l++)))>>2,r=(3&s)<<6|(c=e.indexOf(n.charAt(l++))),u+=jt(i<<2|o>>4),64!=s&&(u+=jt(a)),64!=c&&(u+=jt(r)),a=r=\"\",i=o=s=c=\"\"}while(l<n.length);return u}}(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\");var St,At,Et=[],Ct=[],Tt=[],Pt=[],Dt={};function Ot(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)}function Mt(e,t,n){w(t)&&Ot(Tt,t),Ot(Tt,n),e.unshift({rule:t,replacement:n})}function Nt(e,t){return e==t||\"all\"==e||!e}function Bt(e,t){return(e=w(e)?e.toString():\"\").isBlank()||function(e){return Tt.some((function(t){return new r(\"\\\\b\"+t+\"$\",\"i\").test(e)}))}(e)?e:Rt(e,t?Et:Ct)}function Rt(e,t){return I(t,(function(t,n){if(e.match(n.rule))return e=e.replace(n.rule,n.replacement),!1})),e}function Lt(e){return e.replace(/^\\W*[a-z]/,(function(e){return e.toUpperCase()}))}At={acronym:function(e){Dt[e.toLowerCase()]=e;var t=n.keys(Dt).map((function(e){return Dt[e]}));At.acronymRegExp=r(t.join(\"|\"),\"g\")},plural:function(e,t){Mt(Et,e,t)},singular:function(e,t){Mt(Ct,e,t)},irregular:function(e,t){var n=e.first(),a=e.from(1),i=t.first(),o=t.from(1),s=i.toUpperCase(),c=i.toLowerCase(),u=n.toUpperCase(),l=n.toLowerCase();Ot(Tt,e),Ot(Tt,t),u==s?(At.plural(new r(\"({1}){2}$\".assign(n,a),\"i\"),\"$1\"+o),At.plural(new r(\"({1}){2}$\".assign(i,o),\"i\"),\"$1\"+o),At.singular(new r(\"({1}){2}$\".assign(i,o),\"i\"),\"$1\"+a)):(At.plural(new r(\"{1}{2}$\".assign(u,a)),s+o),At.plural(new r(\"{1}{2}$\".assign(l,a)),c+o),At.plural(new r(\"{1}{2}$\".assign(s,o)),s+o),At.plural(new r(\"{1}{2}$\".assign(c,o)),c+o),At.singular(new r(\"{1}{2}$\".assign(s,o)),u+a),At.singular(new r(\"{1}{2}$\".assign(c,o)),l+a))},uncountable:function(e){var t=a.isArray(e)?e:P(arguments);Tt=Tt.concat(t)},human:function(e,t){Pt.unshift({rule:e,replacement:t})},clear:function(e){Nt(e,\"singulars\")&&(Ct=[]),Nt(e,\"plurals\")&&(Et=[]),Nt(e,\"uncountables\")&&(Tt=[]),Nt(e,\"humans\")&&(Pt=[]),Nt(e,\"acronyms\")&&(Dt={})}},St=[\"and\",\"or\",\"nor\",\"a\",\"an\",\"the\",\"so\",\"but\",\"to\",\"of\",\"at\",\"by\",\"from\",\"into\",\"on\",\"onto\",\"off\",\"out\",\"in\",\"over\",\"with\",\"for\"],At.plural(/$/,\"s\"),At.plural(/s$/gi,\"s\"),At.plural(/(ax|test)is$/gi,\"$1es\"),At.plural(/(octop|vir|fung|foc|radi|alumn)(i|us)$/gi,\"$1i\"),At.plural(/(census|alias|status)$/gi,\"$1es\"),At.plural(/(bu)s$/gi,\"$1ses\"),At.plural(/(buffal|tomat)o$/gi,\"$1oes\"),At.plural(/([ti])um$/gi,\"$1a\"),At.plural(/([ti])a$/gi,\"$1a\"),At.plural(/sis$/gi,\"ses\"),At.plural(/f+e?$/gi,\"ves\"),At.plural(/(cuff|roof)$/gi,\"$1s\"),At.plural(/([ht]ive)$/gi,\"$1s\"),At.plural(/([^aeiouy]o)$/gi,\"$1es\"),At.plural(/([^aeiouy]|qu)y$/gi,\"$1ies\"),At.plural(/(x|ch|ss|sh)$/gi,\"$1es\"),At.plural(/(matr|vert|ind)(?:ix|ex)$/gi,\"$1ices\"),At.plural(/([ml])ouse$/gi,\"$1ice\"),At.plural(/([ml])ice$/gi,\"$1ice\"),At.plural(/^(ox)$/gi,\"$1en\"),At.plural(/^(oxen)$/gi,\"$1\"),At.plural(/(quiz)$/gi,\"$1zes\"),At.plural(/(phot|cant|hom|zer|pian|portic|pr|quart|kimon)o$/gi,\"$1os\"),At.plural(/(craft)$/gi,\"$1\"),At.plural(/([ft])[eo]{2}(th?)$/gi,\"$1ee$2\"),At.singular(/s$/gi,\"\"),At.singular(/([pst][aiu]s)$/gi,\"$1\"),At.singular(/([aeiouy])ss$/gi,\"$1ss\"),At.singular(/(n)ews$/gi,\"$1ews\"),At.singular(/([ti])a$/gi,\"$1um\"),At.singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/gi,\"$1$2sis\"),At.singular(/(^analy)ses$/gi,\"$1sis\"),At.singular(/(i)(f|ves)$/i,\"$1fe\"),At.singular(/([aeolr]f?)(f|ves)$/i,\"$1f\"),At.singular(/([ht]ive)s$/gi,\"$1\"),At.singular(/([^aeiouy]|qu)ies$/gi,\"$1y\"),At.singular(/(s)eries$/gi,\"$1eries\"),At.singular(/(m)ovies$/gi,\"$1ovie\"),At.singular(/(x|ch|ss|sh)es$/gi,\"$1\"),At.singular(/([ml])(ous|ic)e$/gi,\"$1ouse\"),At.singular(/(bus)(es)?$/gi,\"$1\"),At.singular(/(o)es$/gi,\"$1\"),At.singular(/(shoe)s?$/gi,\"$1\"),At.singular(/(cris|ax|test)[ie]s$/gi,\"$1is\"),At.singular(/(octop|vir|fung|foc|radi|alumn)(i|us)$/gi,\"$1us\"),At.singular(/(census|alias|status)(es)?$/gi,\"$1\"),At.singular(/^(ox)(en)?/gi,\"$1\"),At.singular(/(vert|ind)(ex|ices)$/gi,\"$1ex\"),At.singular(/(matr)(ix|ices)$/gi,\"$1ix\"),At.singular(/(quiz)(zes)?$/gi,\"$1\"),At.singular(/(database)s?$/gi,\"$1\"),At.singular(/ee(th?)$/gi,\"oo$1\"),At.irregular(\"person\",\"people\"),At.irregular(\"man\",\"men\"),At.irregular(\"child\",\"children\"),At.irregular(\"sex\",\"sexes\"),At.irregular(\"move\",\"moves\"),At.irregular(\"save\",\"saves\"),At.irregular(\"save\",\"saves\"),At.irregular(\"cow\",\"kine\"),At.irregular(\"goose\",\"geese\"),At.irregular(\"zombie\",\"zombies\"),At.uncountable(\"equipment,information,rice,money,species,series,fish,sheep,jeans\".split(\",\")),A(o,!0,!1,{pluralize:function(){return Bt(this,!0)},singularize:function(){return Bt(this,!1)},humanize:function(){var e=Rt(this,Pt);return Lt(e=(e=e.replace(/_id$/g,\"\")).replace(/(_)?([a-z\\d]*)/gi,(function(e,t,n){return(t?\" \":\"\")+((L(Dt,n)?Dt[n]:null)||n.toLowerCase())})))},titleize:function(){var e,t,n,a=/[.:;!]$/;return this.spacify().humanize().words((function(r,i,o){return e=a.test(r),n=0==i||i==o.length-1||e||t,t=e,n||-1===St.indexOf(r)?Lt(r):r})).join(\" \")},parameterize:function(e){var t=this;return void 0===e&&(e=\"-\"),t.normalize&&(t=t.normalize()),t=t.replace(/[^a-z0-9\\-_]+/gi,e),e&&(t=t.replace(new r(\"^{sep}+|{sep}+$|({sep}){sep}+\".assign({sep:J(e)}),\"g\"),\"$1\")),encodeURI(t.toLowerCase())}}),o.Inflector=At,o.Inflector.acronyms=Dt;var It,Ft,zt=\"\",qt=[{names:[\"Arabic\"],source:\"؀-ۿ\"},{names:[\"Cyrillic\"],source:\"Ѐ-ӿ\"},{names:[\"Devanagari\"],source:\"ऀ-ॿ\"},{names:[\"Greek\"],source:\"Ͱ-Ͽ\"},{names:[\"Hangul\"],source:\"가-힯ᄀ-ᇿ\"},{names:[\"Han\",\"Kanji\"],source:\"一-鿿豈-﫿\"},{names:[\"Hebrew\"],source:\"֐-׿\"},{names:[\"Hiragana\"],source:\"぀-ゟ・-ー\"},{names:[\"Kana\"],source:\"぀-ヿ｡-ﾟ\"},{names:[\"Katakana\"],source:\"゠-ヿ｡-ﾟ\"},{names:[\"Latin\"],source:\"\u0001--ÿĀ-ſƀ-ɏ\"},{names:[\"Thai\"],source:\"฀-๿\"}];var Ht,Ut=[{type:\"a\",shift:65248,start:65,end:90},{type:\"a\",shift:65248,start:97,end:122},{type:\"n\",shift:65248,start:48,end:57},{type:\"p\",shift:65248,start:33,end:47},{type:\"p\",shift:65248,start:58,end:64},{type:\"p\",shift:65248,start:91,end:96},{type:\"p\",shift:65248,start:123,end:126}],Gt=/[\\u0020-\\u00A5]|[\\uFF61-\\uFF9F][ﾞﾟ]?/g,$t=/[\\u3000-\\u301C]|[\\u301A-\\u30FC]|[\\uFF01-\\uFF60]|[\\uFFE0-\\uFFE6]/g,Wt=\"｡､｢｣¥¢£\",Vt=\"。、「」￥￠￡\",Kt=/[カキクケコサシスセソタチツテトハヒフヘホ]/,Jt=/[ハヒフヘホヲ]/,Yt=\"ｱｲｳｴｵｧｨｩｪｫｶｷｸｹｺｻｼｽｾｿﾀﾁﾂｯﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔｬﾕｭﾖｮﾗﾘﾙﾚﾛﾜｦﾝｰ･\",Xt=\"アイウエオァィゥェォカキクケコサシスセソタチツッテトナニヌネノハヒフヘホマミムメモヤャユュヨョラリルレロワヲンー・\";function Zt(e,t,n,a){var r;Ht||(Ht={zenkaku:{},hankaku:{}},Ut.forEach((function(e){q(e.start,e.end,(function(t){Qt(e.type,jt(t),jt(t+e.shift))}))})),Xt.each((function(e,t){Qt(\"k\",r=Yt.charAt(t),e),e.match(Kt)&&Qt(\"k\",r+\"ﾞ\",e.shift(1)),e.match(Jt)&&Qt(\"k\",r+\"ﾟ\",e.shift(2))})),Vt.each((function(e,t){Qt(\"p\",Wt.charAt(t),e)})),Qt(\"k\",\"ｳﾞ\",\"ヴ\"),Qt(\"k\",\"ｦﾞ\",\"ヺ\"),Qt(\"s\",\" \",\"　\"));var i=P(t).join(\"\"),o=Ht[a];return i=i.replace(/all/,\"\").replace(/(\\w)lphabet|umbers?|atakana|paces?|unctuation/g,\"$1\"),e.replace(n,(function(e){return!o[e]||i&&!i.has(o[e].type)?e:o[e].to}))}function Qt(e,t,n){Ht.zenkaku[t]={type:e,to:n},Ht.hankaku[n]={type:e,to:t}}Ft={A:\"AⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ\",B:\"BⒷＢḂḄḆɃƂƁ\",C:\"CⒸＣĆĈĊČÇḈƇȻꜾ\",D:\"DⒹＤḊĎḌḐḒḎĐƋƊƉꝹ\",E:\"EⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎ\",F:\"FⒻＦḞƑꝻ\",G:\"GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ\",H:\"HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ\",I:\"IⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ\",J:\"JⒿＪĴɈ\",K:\"KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ\",L:\"LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ\",M:\"MⓂＭḾṀṂⱮƜ\",N:\"NⓃＮǸŃÑṄŇṆŅṊṈȠƝꞐꞤ\",O:\"OⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ\",P:\"PⓅＰṔṖƤⱣꝐꝒꝔ\",Q:\"QⓆＱꝖꝘɊ\",R:\"RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ\",S:\"SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ\",T:\"TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ\",U:\"UⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ\",V:\"VⓋＶṼṾƲꝞɅ\",W:\"WⓌＷẀẂŴẆẄẈⱲ\",X:\"XⓍＸẊẌ\",Y:\"YⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ\",Z:\"ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ\",a:\"aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ\",b:\"bⓑｂḃḅḇƀƃɓ\",c:\"cⓒｃćĉċčçḉƈȼꜿↄ\",d:\"dⓓｄḋďḍḑḓḏđƌɖɗꝺ\",e:\"eⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ\",f:\"fⓕｆḟƒꝼ\",g:\"gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ\",h:\"hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ\",i:\"iⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı\",j:\"jⓙｊĵǰɉ\",k:\"kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ\",l:\"lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ\",m:\"mⓜｍḿṁṃɱɯ\",n:\"nⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ\",o:\"oⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔꝋꝍɵ\",p:\"pⓟｐṕṗƥᵽꝑꝓꝕ\",q:\"qⓠｑɋꝗꝙ\",r:\"rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ\",s:\"sⓢｓśṥŝṡšṧṣṩșşȿꞩꞅẛ\",t:\"tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ\",u:\"uⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ\",v:\"vⓥｖṽṿʋꝟʌ\",w:\"wⓦｗẁẃŵẇẅẘẉⱳ\",x:\"xⓧｘẋẍ\",y:\"yⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ\",z:\"zⓩｚźẑżžẓẕƶȥɀⱬꝣ\",AA:\"Ꜳ\",AE:\"ÆǼǢ\",AO:\"Ꜵ\",AU:\"Ꜷ\",AV:\"ꜸꜺ\",AY:\"Ꜽ\",DZ:\"ǱǄ\",Dz:\"ǲǅ\",LJ:\"Ǉ\",Lj:\"ǈ\",NJ:\"Ǌ\",Nj:\"ǋ\",OI:\"Ƣ\",OO:\"Ꝏ\",OU:\"Ȣ\",TZ:\"Ꜩ\",VY:\"Ꝡ\",aa:\"ꜳ\",ae:\"æǽǣ\",ao:\"ꜵ\",au:\"ꜷ\",av:\"ꜹꜻ\",ay:\"ꜽ\",dz:\"ǳǆ\",hv:\"ƕ\",lj:\"ǉ\",nj:\"ǌ\",oi:\"ƣ\",ou:\"ȣ\",oo:\"ꝏ\",ss:\"ß\",tz:\"ꜩ\",vy:\"ꝡ\"},A(o,!0,!1,{normalize:function(){return It||(It={},I(Ft,(function(e,t){t.split(\"\").forEach((function(t){It[t]=e})),zt+=t})),zt=r(\"[\"+zt+\"]\",\"g\")),this.replace(zt,(function(e){return It[e]}))},hankaku:function(){return Zt(this,arguments,$t,\"hankaku\")},zenkaku:function(){return Zt(this,arguments,Gt,\"zenkaku\")},hiragana:function(e){var t=this;return!1!==e&&(t=t.zenkaku(\"k\")),t.replace(/[\\u30A1-\\u30F6]/g,(function(e){return e.shift(-96)}))},katakana:function(){return this.replace(/[\\u3041-\\u3096]/g,(function(e){return e.shift(96)}))}}),qt.forEach((function(e){var t=r(\"^[\"+e.source+\"\\\\s]+$\"),n=r(\"[\"+e.source+\"]\");e.names.forEach((function(e){T(o.prototype,\"is\"+e,(function(){return t.test(this.trim())})),T(o.prototype,\"has\"+e,(function(){return n.test(this)}))}))})),Date.addLocale(\"da\",{plural:!0,months:\"januar,februar,marts,april,maj,juni,juli,august,september,oktober,november,december\",weekdays:\"søndag|sondag,mandag,tirsdag,onsdag,torsdag,fredag,lørdag|lordag\",units:\"millisekund:|er,sekund:|er,minut:|ter,tim:e|er,dag:|e,ug:e|er|en,måned:|er|en+maaned:|er|en,år:||et+aar:||et\",numbers:\"en|et,to,tre,fire,fem,seks,syv,otte,ni,ti\",tokens:\"den,for\",articles:\"den\",short:\"d. {d}. {month} {yyyy}\",long:\"den {d}. {month} {yyyy} {H}:{mm}\",full:\"{Weekday} den {d}. {month} {yyyy} {H}:{mm}:{ss}\",past:\"{num} {unit} {sign}\",future:\"{sign} {num} {unit}\",duration:\"{num} {unit}\",ampm:\"am,pm\",modifiers:[{name:\"day\",src:\"forgårs|i forgårs|forgaars|i forgaars\",value:-2},{name:\"day\",src:\"i går|igår|i gaar|igaar\",value:-1},{name:\"day\",src:\"i dag|idag\",value:0},{name:\"day\",src:\"i morgen|imorgen\",value:1},{name:\"day\",src:\"over morgon|overmorgen|i over morgen|i overmorgen|iovermorgen\",value:2},{name:\"sign\",src:\"siden\",value:-1},{name:\"sign\",src:\"om\",value:1},{name:\"shift\",src:\"i sidste|sidste\",value:-1},{name:\"shift\",src:\"denne\",value:0},{name:\"shift\",src:\"næste|naeste\",value:1}],dateParse:[\"{num} {unit} {sign}\",\"{sign} {num} {unit}\",\"{1?} {num} {unit} {sign}\",\"{shift} {unit=5-7}\"],timeParse:[\"{0?} {weekday?} {date?} {month} {year}\",\"{date} {month}\",\"{shift} {weekday}\"]}),Date.addLocale(\"de\",{plural:!0,capitalizeUnit:!0,months:\"Januar,Februar,März|Marz,April,Mai,Juni,Juli,August,September,Oktober,November,Dezember\",weekdays:\"Sonntag,Montag,Dienstag,Mittwoch,Donnerstag,Freitag,Samstag\",units:\"Millisekunde:|n,Sekunde:|n,Minute:|n,Stunde:|n,Tag:|en,Woche:|n,Monat:|en,Jahr:|en\",numbers:\"ein:|e|er|en|em,zwei,drei,vier,fuenf,sechs,sieben,acht,neun,zehn\",tokens:\"der\",short:\"{d}. {Month} {yyyy}\",long:\"{d}. {Month} {yyyy} {H}:{mm}\",full:\"{Weekday} {d}. {Month} {yyyy} {H}:{mm}:{ss}\",past:\"{sign} {num} {unit}\",future:\"{sign} {num} {unit}\",duration:\"{num} {unit}\",timeMarker:\"um\",ampm:\"am,pm\",modifiers:[{name:\"day\",src:\"vorgestern\",value:-2},{name:\"day\",src:\"gestern\",value:-1},{name:\"day\",src:\"heute\",value:0},{name:\"day\",src:\"morgen\",value:1},{name:\"day\",src:\"übermorgen|ubermorgen|uebermorgen\",value:2},{name:\"sign\",src:\"vor:|her\",value:-1},{name:\"sign\",src:\"in\",value:1},{name:\"shift\",src:\"letzte:|r|n|s\",value:-1},{name:\"shift\",src:\"nächste:|r|n|s+nachste:|r|n|s+naechste:|r|n|s+kommende:n|r\",value:1}],dateParse:[\"{sign} {num} {unit}\",\"{num} {unit} {sign}\",\"{shift} {unit=5-7}\"],timeParse:[\"{weekday?} {date?} {month} {year?}\",\"{shift} {weekday}\"]}),Date.addLocale(\"es\",{plural:!0,months:\"enero,febrero,marzo,abril,mayo,junio,julio,agosto,septiembre,octubre,noviembre,diciembre\",weekdays:\"domingo,lunes,martes,miércoles|miercoles,jueves,viernes,sábado|sabado\",units:\"milisegundo:|s,segundo:|s,minuto:|s,hora:|s,día|días|dia|dias,semana:|s,mes:|es,año|años|ano|anos\",numbers:\"uno,dos,tres,cuatro,cinco,seis,siete,ocho,nueve,diez\",tokens:\"el,de\",short:\"{d} {month} {yyyy}\",long:\"{d} {month} {yyyy} {H}:{mm}\",full:\"{Weekday} {d} {month} {yyyy} {H}:{mm}:{ss}\",past:\"{sign} {num} {unit}\",future:\"{num} {unit} {sign}\",duration:\"{num} {unit}\",timeMarker:\"a las\",ampm:\"am,pm\",modifiers:[{name:\"day\",src:\"anteayer\",value:-2},{name:\"day\",src:\"ayer\",value:-1},{name:\"day\",src:\"hoy\",value:0},{name:\"day\",src:\"mañana|manana\",value:1},{name:\"sign\",src:\"hace\",value:-1},{name:\"sign\",src:\"de ahora\",value:1},{name:\"shift\",src:\"pasad:o|a\",value:-1},{name:\"shift\",src:\"próximo|próxima|proximo|proxima\",value:1}],dateParse:[\"{sign} {num} {unit}\",\"{num} {unit} {sign}\",\"{0?} {unit=5-7} {shift}\",\"{0?} {shift} {unit=5-7}\"],timeParse:[\"{shift} {weekday}\",\"{weekday} {shift}\",\"{date?} {1?} {month} {1?} {year?}\"]}),Date.addLocale(\"fi\",{plural:!0,timeMarker:\"kello\",ampm:\",\",months:\"tammikuu,helmikuu,maaliskuu,huhtikuu,toukokuu,kesäkuu,heinäkuu,elokuu,syyskuu,lokakuu,marraskuu,joulukuu\",weekdays:\"sunnuntai,maanantai,tiistai,keskiviikko,torstai,perjantai,lauantai\",units:\"millisekun:ti|tia|teja|tina|nin,sekun:ti|tia|teja|tina|nin,minuut:ti|tia|teja|tina|in,tun:ti|tia|teja|tina|nin,päiv:ä|ää|iä|änä|än,viik:ko|koa|koja|on|kona,kuukau:si|sia|tta|den|tena,vuo:si|sia|tta|den|tena\",numbers:\"yksi|ensimmäinen,kaksi|toinen,kolm:e|as,neljä:s,vii:si|des,kuu:si|des,seitsemä:n|s,kahdeksa:n|s,yhdeksä:n|s,kymmene:n|s\",articles:\"\",optionals:\"\",short:\"{d}. {month}ta {yyyy}\",long:\"{d}. {month}ta {yyyy} kello {H}.{mm}\",full:\"{Weekday}na {d}. {month}ta {yyyy} kello {H}.{mm}\",relative:function(e,t,n,a){var r=this.units;function i(n){return(1===e?\"\":e+\" \")+r[8*n+t]}switch(a){case\"duration\":return i(0);case\"past\":return i(e>1?1:0)+\" sitten\";case\"future\":return i(4)+\" päästä\"}},modifiers:[{name:\"day\",src:\"toissa päivänä|toissa päiväistä\",value:-2},{name:\"day\",src:\"eilen|eilistä\",value:-1},{name:\"day\",src:\"tänään\",value:0},{name:\"day\",src:\"huomenna|huomista\",value:1},{name:\"day\",src:\"ylihuomenna|ylihuomista\",value:2},{name:\"sign\",src:\"sitten|aiemmin\",value:-1},{name:\"sign\",src:\"päästä|kuluttua|myöhemmin\",value:1},{name:\"edge\",src:\"viimeinen|viimeisenä\",value:-2},{name:\"edge\",src:\"lopussa\",value:-1},{name:\"edge\",src:\"ensimmäinen|ensimmäisenä\",value:1},{name:\"shift\",src:\"edellinen|edellisenä|edeltävä|edeltävänä|viime|toissa\",value:-1},{name:\"shift\",src:\"tänä|tämän\",value:0},{name:\"shift\",src:\"seuraava|seuraavana|tuleva|tulevana|ensi\",value:1}],dateParse:[\"{num} {unit} {sign}\",\"{sign} {num} {unit}\",\"{num} {unit=4-5} {sign} {day}\",\"{month} {year}\",\"{shift} {unit=5-7}\"],timeParse:[\"{0} {num}{1} {day} of {month} {year?}\",\"{weekday?} {month} {date}{1} {year?}\",\"{date} {month} {year}\",\"{shift} {weekday}\",\"{shift} week {weekday}\",\"{weekday} {2} {shift} week\",\"{0} {date}{1} of {month}\",\"{0}{month?} {date?}{1} of {shift} {unit=6-7}\"]}),Date.addLocale(\"fr\",{plural:!0,months:\"janvier,février|fevrier,mars,avril,mai,juin,juillet,août,septembre,octobre,novembre,décembre|decembre\",weekdays:\"dimanche,lundi,mardi,mercredi,jeudi,vendredi,samedi\",units:\"milliseconde:|s,seconde:|s,minute:|s,heure:|s,jour:|s,semaine:|s,mois,an:|s|née|nee\",numbers:\"un:|e,deux,trois,quatre,cinq,six,sept,huit,neuf,dix\",tokens:[\"l'|la|le\"],short:\"{d} {month} {yyyy}\",long:\"{d} {month} {yyyy} {H}:{mm}\",full:\"{Weekday} {d} {month} {yyyy} {H}:{mm}:{ss}\",past:\"{sign} {num} {unit}\",future:\"{sign} {num} {unit}\",duration:\"{num} {unit}\",timeMarker:\"à\",ampm:\"am,pm\",modifiers:[{name:\"day\",src:\"hier\",value:-1},{name:\"day\",src:\"aujourd'hui\",value:0},{name:\"day\",src:\"demain\",value:1},{name:\"sign\",src:\"il y a\",value:-1},{name:\"sign\",src:\"dans|d'ici\",value:1},{name:\"shift\",src:\"derni:èr|er|ère|ere\",value:-1},{name:\"shift\",src:\"prochain:|e\",value:1}],dateParse:[\"{sign} {num} {unit}\",\"{sign} {num} {unit}\",\"{0?} {unit=5-7} {shift}\"],timeParse:[\"{weekday?} {0?} {date?} {month} {year?}\",\"{0?} {weekday} {shift}\"]}),Date.addLocale(\"it\",{plural:!0,months:\"Gennaio,Febbraio,Marzo,Aprile,Maggio,Giugno,Luglio,Agosto,Settembre,Ottobre,Novembre,Dicembre\",weekdays:\"Domenica,Luned:ì|i,Marted:ì|i,Mercoled:ì|i,Gioved:ì|i,Venerd:ì|i,Sabato\",units:\"millisecond:o|i,second:o|i,minut:o|i,or:a|e,giorn:o|i,settiman:a|e,mes:e|i,ann:o|i\",numbers:\"un:|a|o|',due,tre,quattro,cinque,sei,sette,otto,nove,dieci\",tokens:\"l'|la|il\",short:\"{d} {Month} {yyyy}\",long:\"{d} {Month} {yyyy} {H}:{mm}\",full:\"{Weekday} {d} {Month} {yyyy} {H}:{mm}:{ss}\",past:\"{num} {unit} {sign}\",future:\"{num} {unit} {sign}\",duration:\"{num} {unit}\",timeMarker:\"alle\",ampm:\"am,pm\",modifiers:[{name:\"day\",src:\"ieri\",value:-1},{name:\"day\",src:\"oggi\",value:0},{name:\"day\",src:\"domani\",value:1},{name:\"day\",src:\"dopodomani\",value:2},{name:\"sign\",src:\"fa\",value:-1},{name:\"sign\",src:\"da adesso\",value:1},{name:\"shift\",src:\"scors:o|a\",value:-1},{name:\"shift\",src:\"prossim:o|a\",value:1}],dateParse:[\"{num} {unit} {sign}\",\"{0?} {unit=5-7} {shift}\",\"{0?} {shift} {unit=5-7}\"],timeParse:[\"{weekday?} {date?} {month} {year?}\",\"{shift} {weekday}\"]}),Date.addLocale(\"ja\",{monthSuffix:\"月\",weekdays:\"日曜日,月曜日,火曜日,水曜日,木曜日,金曜日,土曜日\",units:\"ミリ秒,秒,分,時間,日,週間|週,ヶ月|ヵ月|月,年\",short:\"{yyyy}年{M}月{d}日\",long:\"{yyyy}年{M}月{d}日 {H}時{mm}分\",full:\"{yyyy}年{M}月{d}日 {Weekday} {H}時{mm}分{ss}秒\",past:\"{num}{unit}{sign}\",future:\"{num}{unit}{sign}\",duration:\"{num}{unit}\",timeSuffixes:\"時,分,秒\",ampm:\"午前,午後\",modifiers:[{name:\"day\",src:\"一昨日\",value:-2},{name:\"day\",src:\"昨日\",value:-1},{name:\"day\",src:\"今日\",value:0},{name:\"day\",src:\"明日\",value:1},{name:\"day\",src:\"明後日\",value:2},{name:\"sign\",src:\"前\",value:-1},{name:\"sign\",src:\"後\",value:1},{name:\"shift\",src:\"去|先\",value:-1},{name:\"shift\",src:\"来\",value:1}],dateParse:[\"{num}{unit}{sign}\"],timeParse:[\"{shift}{unit=5-7}{weekday?}\",\"{year}年{month?}月?{date?}日?\",\"{month}月{date?}日?\",\"{date}日\"]}),Date.addLocale(\"ko\",{digitDate:!0,monthSuffix:\"월\",weekdays:\"일요일,월요일,화요일,수요일,목요일,금요일,토요일\",units:\"밀리초,초,분,시간,일,주,개월|달,년\",numbers:\"일|한,이,삼,사,오,육,칠,팔,구,십\",short:\"{yyyy}년{M}월{d}일\",long:\"{yyyy}년{M}월{d}일 {H}시{mm}분\",full:\"{yyyy}년{M}월{d}일 {Weekday} {H}시{mm}분{ss}초\",past:\"{num}{unit} {sign}\",future:\"{num}{unit} {sign}\",duration:\"{num}{unit}\",timeSuffixes:\"시,분,초\",ampm:\"오전,오후\",modifiers:[{name:\"day\",src:\"그저께\",value:-2},{name:\"day\",src:\"어제\",value:-1},{name:\"day\",src:\"오늘\",value:0},{name:\"day\",src:\"내일\",value:1},{name:\"day\",src:\"모레\",value:2},{name:\"sign\",src:\"전\",value:-1},{name:\"sign\",src:\"후\",value:1},{name:\"shift\",src:\"지난|작\",value:-1},{name:\"shift\",src:\"이번\",value:0},{name:\"shift\",src:\"다음|내\",value:1}],dateParse:[\"{num}{unit} {sign}\",\"{shift?} {unit=5-7}\"],timeParse:[\"{shift} {unit=5?} {weekday}\",\"{year}년{month?}월?{date?}일?\",\"{month}월{date?}일?\",\"{date}일\"]}),Date.addLocale(\"nl\",{plural:!0,months:\"januari,februari,maart,april,mei,juni,juli,augustus,september,oktober,november,december\",weekdays:\"zondag|zo,maandag|ma,dinsdag|di,woensdag|woe|wo,donderdag|do,vrijdag|vrij|vr,zaterdag|za\",units:\"milliseconde:|n,seconde:|n,minu:ut|ten,uur,dag:|en,we:ek|ken,maand:|en,jaar\",numbers:\"een,twee,drie,vier,vijf,zes,zeven,acht,negen\",tokens:\"\",short:\"{d} {Month} {yyyy}\",long:\"{d} {Month} {yyyy} {H}:{mm}\",full:\"{Weekday} {d} {Month} {yyyy} {H}:{mm}:{ss}\",past:\"{num} {unit} {sign}\",future:\"{num} {unit} {sign}\",duration:\"{num} {unit}\",timeMarker:\"'s|om\",modifiers:[{name:\"day\",src:\"gisteren\",value:-1},{name:\"day\",src:\"vandaag\",value:0},{name:\"day\",src:\"morgen\",value:1},{name:\"day\",src:\"overmorgen\",value:2},{name:\"sign\",src:\"geleden\",value:-1},{name:\"sign\",src:\"vanaf nu\",value:1},{name:\"shift\",src:\"laatste|vorige|afgelopen\",value:-1},{name:\"shift\",src:\"volgend:|e\",value:1}],dateParse:[\"{num} {unit} {sign}\",\"{0?} {unit=5-7} {shift}\",\"{0?} {shift} {unit=5-7}\"],timeParse:[\"{weekday?} {date?} {month} {year?}\",\"{shift} {weekday}\"]}),Date.addLocale(\"pl\",{plural:!0,months:\"Styczeń|Stycznia,Luty|Lutego,Marzec|Marca,Kwiecień|Kwietnia,Maj|Maja,Czerwiec|Czerwca,Lipiec|Lipca,Sierpień|Sierpnia,Wrzesień|Września,Październik|Października,Listopad|Listopada,Grudzień|Grudnia\",weekdays:\"Niedziela|Niedzielę,Poniedziałek,Wtorek,Środ:a|ę,Czwartek,Piątek,Sobota|Sobotę\",units:\"milisekund:a|y|,sekund:a|y|,minut:a|y|,godzin:a|y|,dzień|dni,tydzień|tygodnie|tygodni,miesiące|miesiące|miesięcy,rok|lata|lat\",numbers:\"jeden|jedną,dwa|dwie,trzy,cztery,pięć,sześć,siedem,osiem,dziewięć,dziesięć\",optionals:\"w|we,roku\",short:\"{d} {Month} {yyyy}\",long:\"{d} {Month} {yyyy} {H}:{mm}\",full:\"{Weekday}, {d} {Month} {yyyy} {H}:{mm}:{ss}\",past:\"{num} {unit} {sign}\",future:\"{sign} {num} {unit}\",duration:\"{num} {unit}\",timeMarker:\"o\",ampm:\"am,pm\",modifiers:[{name:\"day\",src:\"przedwczoraj\",value:-2},{name:\"day\",src:\"wczoraj\",value:-1},{name:\"day\",src:\"dzisiaj|dziś\",value:0},{name:\"day\",src:\"jutro\",value:1},{name:\"day\",src:\"pojutrze\",value:2},{name:\"sign\",src:\"temu|przed\",value:-1},{name:\"sign\",src:\"za\",value:1},{name:\"shift\",src:\"zeszły|zeszła|ostatni|ostatnia\",value:-1},{name:\"shift\",src:\"następny|następna|następnego|przyszły|przyszła|przyszłego\",value:1}],dateParse:[\"{num} {unit} {sign}\",\"{sign} {num} {unit}\",\"{month} {year}\",\"{shift} {unit=5-7}\",\"{0} {shift?} {weekday}\"],timeParse:[\"{date} {month} {year?} {1}\",\"{0} {shift?} {weekday}\"]}),Date.addLocale(\"pt\",{plural:!0,months:\"janeiro,fevereiro,março,abril,maio,junho,julho,agosto,setembro,outubro,novembro,dezembro\",weekdays:\"domingo,segunda-feira,terça-feira,quarta-feira,quinta-feira,sexta-feira,sábado|sabado\",units:\"milisegundo:|s,segundo:|s,minuto:|s,hora:|s,dia:|s,semana:|s,mês|mêses|mes|meses,ano:|s\",numbers:\"um,dois,três|tres,quatro,cinco,seis,sete,oito,nove,dez,uma,duas\",tokens:\"a,de\",short:\"{d} de {month} de {yyyy}\",long:\"{d} de {month} de {yyyy} {H}:{mm}\",full:\"{Weekday}, {d} de {month} de {yyyy} {H}:{mm}:{ss}\",past:\"{num} {unit} {sign}\",future:\"{sign} {num} {unit}\",duration:\"{num} {unit}\",timeMarker:\"às\",ampm:\"am,pm\",modifiers:[{name:\"day\",src:\"anteontem\",value:-2},{name:\"day\",src:\"ontem\",value:-1},{name:\"day\",src:\"hoje\",value:0},{name:\"day\",src:\"amanh:ã|a\",value:1},{name:\"sign\",src:\"atrás|atras|há|ha\",value:-1},{name:\"sign\",src:\"daqui a\",value:1},{name:\"shift\",src:\"passad:o|a\",value:-1},{name:\"shift\",src:\"próximo|próxima|proximo|proxima\",value:1}],dateParse:[\"{num} {unit} {sign}\",\"{sign} {num} {unit}\",\"{0?} {unit=5-7} {shift}\",\"{0?} {shift} {unit=5-7}\"],timeParse:[\"{date?} {1?} {month} {1?} {year?}\",\"{0?} {shift} {weekday}\"]}),Date.addLocale(\"ru\",{months:\"Январ:я|ь,Феврал:я|ь,Март:а|,Апрел:я|ь,Ма:я|й,Июн:я|ь,Июл:я|ь,Август:а|,Сентябр:я|ь,Октябр:я|ь,Ноябр:я|ь,Декабр:я|ь\",weekdays:\"Воскресенье,Понедельник,Вторник,Среда,Четверг,Пятница,Суббота\",units:\"миллисекунд:а|у|ы|,секунд:а|у|ы|,минут:а|у|ы|,час:||а|ов,день|день|дня|дней,недел:я|ю|и|ь|е,месяц:||а|ев|е,год|год|года|лет|году\",numbers:\"од:ин|ну,дв:а|е,три,четыре,пять,шесть,семь,восемь,девять,десять\",tokens:\"в|на,года\",short:\"{d} {month} {yyyy} года\",long:\"{d} {month} {yyyy} года {H}:{mm}\",full:\"{Weekday} {d} {month} {yyyy} года {H}:{mm}:{ss}\",relative:function(e,t,n,a){var r,i=e.toString().slice(-1);switch(!0){case e>=11&&e<=15:mult=3;break;case 1==i:mult=1;break;case i>=2&&i<=4:mult=2;break;default:mult=3}switch(r=e+\" \"+this.units[8*mult+t],a){case\"duration\":return r;case\"past\":return r+\" назад\";case\"future\":return\"через \"+r}},timeMarker:\"в\",ampm:\" утра, вечера\",modifiers:[{name:\"day\",src:\"позавчера\",value:-2},{name:\"day\",src:\"вчера\",value:-1},{name:\"day\",src:\"сегодня\",value:0},{name:\"day\",src:\"завтра\",value:1},{name:\"day\",src:\"послезавтра\",value:2},{name:\"sign\",src:\"назад\",value:-1},{name:\"sign\",src:\"через\",value:1},{name:\"shift\",src:\"прошл:ый|ой|ом\",value:-1},{name:\"shift\",src:\"следующ:ий|ей|ем\",value:1}],dateParse:[\"{num} {unit} {sign}\",\"{sign} {num} {unit}\",\"{month} {year}\",\"{0?} {shift} {unit=5-7}\"],timeParse:[\"{date} {month} {year?} {1?}\",\"{0?} {shift} {weekday}\"]}),Date.addLocale(\"sv\",{plural:!0,months:\"januari,februari,mars,april,maj,juni,juli,augusti,september,oktober,november,december\",weekdays:\"söndag|sondag,måndag:|en+mandag:|en,tisdag,onsdag,torsdag,fredag,lördag|lordag\",units:\"millisekund:|er,sekund:|er,minut:|er,timm:e|ar,dag:|ar,veck:a|or|an,månad:|er|en+manad:|er|en,år:||et+ar:||et\",numbers:\"en|ett,två|tva,tre,fyra,fem,sex,sju,åtta|atta,nio,tio\",tokens:\"den,för|for\",articles:\"den\",short:\"den {d} {month} {yyyy}\",long:\"den {d} {month} {yyyy} {H}:{mm}\",full:\"{Weekday} den {d} {month} {yyyy} {H}:{mm}:{ss}\",past:\"{num} {unit} {sign}\",future:\"{sign} {num} {unit}\",duration:\"{num} {unit}\",ampm:\"am,pm\",modifiers:[{name:\"day\",src:\"förrgår|i förrgår|iförrgår|forrgar|i forrgar|iforrgar\",value:-2},{name:\"day\",src:\"går|i går|igår|gar|i gar|igar\",value:-1},{name:\"day\",src:\"dag|i dag|idag\",value:0},{name:\"day\",src:\"morgon|i morgon|imorgon\",value:1},{name:\"day\",src:\"över morgon|övermorgon|i över morgon|i övermorgon|iövermorgon|over morgon|overmorgon|i over morgon|i overmorgon|iovermorgon\",value:2},{name:\"sign\",src:\"sedan|sen\",value:-1},{name:\"sign\",src:\"om\",value:1},{name:\"shift\",src:\"i förra|förra|i forra|forra\",value:-1},{name:\"shift\",src:\"denna\",value:0},{name:\"shift\",src:\"nästa|nasta\",value:1}],dateParse:[\"{num} {unit} {sign}\",\"{sign} {num} {unit}\",\"{1?} {num} {unit} {sign}\",\"{shift} {unit=5-7}\"],timeParse:[\"{0?} {weekday?} {date?} {month} {year}\",\"{date} {month}\",\"{shift} {weekday}\"]}),Date.addLocale(\"zh-CN\",{variant:!0,monthSuffix:\"月\",weekdays:\"星期日|周日,星期一|周一,星期二|周二,星期三|周三,星期四|周四,星期五|周五,星期六|周六\",units:\"毫秒,秒钟,分钟,小时,天,个星期|周,个月,年\",tokens:\"日|号\",short:\"{yyyy}年{M}月{d}日\",long:\"{yyyy}年{M}月{d}日 {tt}{h}:{mm}\",full:\"{yyyy}年{M}月{d}日 {weekday} {tt}{h}:{mm}:{ss}\",past:\"{num}{unit}{sign}\",future:\"{num}{unit}{sign}\",duration:\"{num}{unit}\",timeSuffixes:\"点|时,分钟?,秒\",ampm:\"上午,下午\",modifiers:[{name:\"day\",src:\"前天\",value:-2},{name:\"day\",src:\"昨天\",value:-1},{name:\"day\",src:\"今天\",value:0},{name:\"day\",src:\"明天\",value:1},{name:\"day\",src:\"后天\",value:2},{name:\"sign\",src:\"前\",value:-1},{name:\"sign\",src:\"后\",value:1},{name:\"shift\",src:\"上|去\",value:-1},{name:\"shift\",src:\"这\",value:0},{name:\"shift\",src:\"下|明\",value:1}],dateParse:[\"{num}{unit}{sign}\",\"{shift}{unit=5-7}\"],timeParse:[\"{shift}{weekday}\",\"{year}年{month?}月?{date?}{0?}\",\"{month}月{date?}{0?}\",\"{date}[日号]\"]}),Date.addLocale(\"zh-TW\",{monthSuffix:\"月\",weekdays:\"星期日|週日,星期一|週一,星期二|週二,星期三|週三,星期四|週四,星期五|週五,星期六|週六\",units:\"毫秒,秒鐘,分鐘,小時,天,個星期|週,個月,年\",tokens:\"日|號\",short:\"{yyyy}年{M}月{d}日\",long:\"{yyyy}年{M}月{d}日 {tt}{h}:{mm}\",full:\"{yyyy}年{M}月{d}日 {Weekday} {tt}{h}:{mm}:{ss}\",past:\"{num}{unit}{sign}\",future:\"{num}{unit}{sign}\",duration:\"{num}{unit}\",timeSuffixes:\"點|時,分鐘?,秒\",ampm:\"上午,下午\",modifiers:[{name:\"day\",src:\"前天\",value:-2},{name:\"day\",src:\"昨天\",value:-1},{name:\"day\",src:\"今天\",value:0},{name:\"day\",src:\"明天\",value:1},{name:\"day\",src:\"後天\",value:2},{name:\"sign\",src:\"前\",value:-1},{name:\"sign\",src:\"後\",value:1},{name:\"shift\",src:\"上|去\",value:-1},{name:\"shift\",src:\"這\",value:0},{name:\"shift\",src:\"下|明\",value:1}],dateParse:[\"{num}{unit}{sign}\",\"{shift}{unit=5-7}\"],timeParse:[\"{shift}{weekday}\",\"{year}年{month?}月?{date?}{0?}\",\"{month}月{date?}{0?}\",\"{date}[日號]\"]})}()}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],21:[function(e,t,n){t.exports=function(e){var t=e.fake,n=e.helpers;return this.zipCode=function(t){if(void 0===t){var a=e.definitions.address.postcode;t=\"string\"==typeof a?a:e.random.arrayElement(a)}return n.replaceSymbols(t)},this.zipCodeByState=function(t){var n=e.definitions.address.postcode_by_state[t];return n?e.datatype.number(n):e.address.zipCode()},this.city=function(n){var a=[\"{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}\",\"{{address.cityPrefix}} {{name.firstName}}\",\"{{name.firstName}}{{address.citySuffix}}\",\"{{name.lastName}}{{address.citySuffix}}\"];return!n&&e.definitions.address.city_name&&a.push(\"{{address.cityName}}\"),\"number\"!=typeof n&&(n=e.datatype.number(a.length-1)),t(a[n])},this.cityPrefix=function(){return e.random.arrayElement(e.definitions.address.city_prefix)},this.citySuffix=function(){return e.random.arrayElement(e.definitions.address.city_suffix)},this.cityName=function(){return e.random.arrayElement(e.definitions.address.city_name)},this.streetName=function(){var t,n=e.address.streetSuffix();switch(\"\"!==n&&(n=\" \"+n),e.datatype.number(1)){case 0:t=e.name.lastName()+n;break;case 1:t=e.name.firstName()+n}return t},this.streetAddress=function(t){void 0===t&&(t=!1);var a=\"\";switch(e.datatype.number(2)){case 0:a=n.replaceSymbolWithNumber(\"#####\")+\" \"+e.address.streetName();break;case 1:a=n.replaceSymbolWithNumber(\"####\")+\" \"+e.address.streetName();break;case 2:a=n.replaceSymbolWithNumber(\"###\")+\" \"+e.address.streetName()}return t?a+\" \"+e.address.secondaryAddress():a},this.streetSuffix=function(){return e.random.arrayElement(e.definitions.address.street_suffix)},this.streetPrefix=function(){return e.random.arrayElement(e.definitions.address.street_prefix)},this.secondaryAddress=function(){return n.replaceSymbolWithNumber(e.random.arrayElement([\"Apt. ###\",\"Suite ###\"]))},this.county=function(){return e.random.arrayElement(e.definitions.address.county)},this.country=function(){return e.random.arrayElement(e.definitions.address.country)},this.countryCode=function(t){return void 0===t||\"alpha-2\"===t?e.random.arrayElement(e.definitions.address.country_code):\"alpha-3\"===t?e.random.arrayElement(e.definitions.address.country_code_alpha_3):e.random.arrayElement(e.definitions.address.country_code)},this.state=function(t){return e.random.arrayElement(e.definitions.address.state)},this.stateAbbr=function(){return e.random.arrayElement(e.definitions.address.state_abbr)},this.latitude=function(t,n,a){return t=t||90,n=n||-90,a=a||4,e.datatype.number({max:t,min:n,precision:parseFloat((0).toPrecision(a)+\"1\")}).toFixed(a)},this.longitude=function(t,n,a){return t=t||180,n=n||-180,a=a||4,e.datatype.number({max:t,min:n,precision:parseFloat((0).toPrecision(a)+\"1\")}).toFixed(a)},this.direction=function(t){return void 0===t||!1===t?e.random.arrayElement(e.definitions.address.direction):e.random.arrayElement(e.definitions.address.direction_abbr)},this.direction.schema={description:\"Generates a direction. Use optional useAbbr bool to return abbreviation\",sampleResults:[\"Northwest\",\"South\",\"SW\",\"E\"]},this.cardinalDirection=function(t){return void 0===t||!1===t?e.random.arrayElement(e.definitions.address.direction.slice(0,4)):e.random.arrayElement(e.definitions.address.direction_abbr.slice(0,4))},this.cardinalDirection.schema={description:\"Generates a cardinal direction. Use optional useAbbr boolean to return abbreviation\",sampleResults:[\"North\",\"South\",\"E\",\"W\"]},this.ordinalDirection=function(t){return void 0===t||!1===t?e.random.arrayElement(e.definitions.address.direction.slice(4,8)):e.random.arrayElement(e.definitions.address.direction_abbr.slice(4,8))},this.ordinalDirection.schema={description:\"Generates an ordinal direction. Use optional useAbbr boolean to return abbreviation\",sampleResults:[\"Northwest\",\"Southeast\",\"SW\",\"NE\"]},this.nearbyGPSCoordinate=function(t,n,a){function r(e){return e*(Math.PI/180)}function i(e){return e*(180/Math.PI)}if(void 0===t)return[e.address.latitude(),e.address.longitude()];n=n||10,a=a||!1;var o=function(e,t,n,a){var o=6378.137,s=a?n:.621371*n,c=r(e[0]),u=r(e[1]),l=Math.asin(Math.sin(c)*Math.cos(s/o)+Math.cos(c)*Math.sin(s/o)*Math.cos(t)),p=u+Math.atan2(Math.sin(t)*Math.sin(s/o)*Math.cos(c),Math.cos(s/o)-Math.sin(c)*Math.sin(l));return p>r(180)?p-=r(360):p<r(-180)&&(p+=r(360)),[i(l),i(p)]}(t,r(360*Math.random()),n,a);return[o[0].toFixed(4),o[1].toFixed(4)]},this.timeZone=function(){return e.random.arrayElement(e.definitions.address.time_zone)},this}},{}],22:[function(e,t,n){t.exports=function(e){var t=this;return t.dog=function(){return e.random.arrayElement(e.definitions.animal.dog)},t.cat=function(){return e.random.arrayElement(e.definitions.animal.cat)},t.snake=function(){return e.random.arrayElement(e.definitions.animal.snake)},t.bear=function(){return e.random.arrayElement(e.definitions.animal.bear)},t.lion=function(){return e.random.arrayElement(e.definitions.animal.lion)},t.cetacean=function(){return e.random.arrayElement(e.definitions.animal.cetacean)},t.horse=function(){return e.random.arrayElement(e.definitions.animal.horse)},t.bird=function(){return e.random.arrayElement(e.definitions.animal.bird)},t.cow=function(){return e.random.arrayElement(e.definitions.animal.cow)},t.fish=function(){return e.random.arrayElement(e.definitions.animal.fish)},t.crocodilia=function(){return e.random.arrayElement(e.definitions.animal.crocodilia)},t.insect=function(){return e.random.arrayElement(e.definitions.animal.insect)},t.rabbit=function(){return e.random.arrayElement(e.definitions.animal.rabbit)},t.type=function(){return e.random.arrayElement(e.definitions.animal.type)},t}},{}],23:[function(e,t,n){t.exports=function(e){var t=this;return t.color=function(){return e.random.arrayElement(e.definitions.commerce.color)},t.department=function(){return e.random.arrayElement(e.definitions.commerce.department)},t.productName=function(){return e.commerce.productAdjective()+\" \"+e.commerce.productMaterial()+\" \"+e.commerce.product()},t.price=function(t,n,a,r){if(n=n||1e3,a=void 0===a?2:a,r=r||\"\",(t=t||1)<0||n<0)return r+0;var i=e.datatype.number({max:n,min:t});return r+(Math.round(i*Math.pow(10,a))/Math.pow(10,a)).toFixed(a)},t.productAdjective=function(){return e.random.arrayElement(e.definitions.commerce.product_name.adjective)},t.productMaterial=function(){return e.random.arrayElement(e.definitions.commerce.product_name.material)},t.product=function(){return e.random.arrayElement(e.definitions.commerce.product_name.product)},t.productDescription=function(){return e.random.arrayElement(e.definitions.commerce.product_description)},t}},{}],24:[function(e,t,n){t.exports=function(e){var t=e.fake;this.suffixes=function(){return e.definitions.company.suffix.slice(0)},this.companyName=function(n){var a=[\"{{name.lastName}} {{company.companySuffix}}\",\"{{name.lastName}} - {{name.lastName}}\",\"{{name.lastName}}, {{name.lastName}} and {{name.lastName}}\"];return\"number\"!=typeof n&&(n=e.datatype.number(a.length-1)),t(a[n])},this.companySuffix=function(){return e.random.arrayElement(e.company.suffixes())},this.catchPhrase=function(){return t(\"{{company.catchPhraseAdjective}} {{company.catchPhraseDescriptor}} {{company.catchPhraseNoun}}\")},this.bs=function(){return t(\"{{company.bsBuzz}} {{company.bsAdjective}} {{company.bsNoun}}\")},this.catchPhraseAdjective=function(){return e.random.arrayElement(e.definitions.company.adjective)},this.catchPhraseDescriptor=function(){return e.random.arrayElement(e.definitions.company.descriptor)},this.catchPhraseNoun=function(){return e.random.arrayElement(e.definitions.company.noun)},this.bsAdjective=function(){return e.random.arrayElement(e.definitions.company.bs_adjective)},this.bsBuzz=function(){return e.random.arrayElement(e.definitions.company.bs_verb)},this.bsNoun=function(){return e.random.arrayElement(e.definitions.company.bs_noun)}}},{}],25:[function(e,t,n){t.exports=function(e){var t=this;t.column=function(){return e.random.arrayElement(e.definitions.database.column)},t.column.schema={description:\"Generates a column name.\",sampleResults:[\"id\",\"title\",\"createdAt\"]},t.type=function(){return e.random.arrayElement(e.definitions.database.type)},t.type.schema={description:\"Generates a column type.\",sampleResults:[\"byte\",\"int\",\"varchar\",\"timestamp\"]},t.collation=function(){return e.random.arrayElement(e.definitions.database.collation)},t.collation.schema={description:\"Generates a collation.\",sampleResults:[\"utf8_unicode_ci\",\"utf8_bin\"]},t.engine=function(){return e.random.arrayElement(e.definitions.database.engine)},t.engine.schema={description:\"Generates a storage engine.\",sampleResults:[\"MyISAM\",\"InnoDB\"]}}},{}],26:[function(e,t,n){t.exports=function(e,t){return Array.isArray(t)&&t.length?e.mersenne.seed_array(t):isNaN(t)||e.mersenne.seed(t),this.number=function(t){\"number\"==typeof t&&(t={max:t}),void 0===(t=t||{}).min&&(t.min=0),void 0===t.max&&(t.max=99999),void 0===t.precision&&(t.precision=1);var n=t.max;n>=0&&(n+=t.precision);var a=Math.floor(e.mersenne.rand(n/t.precision,t.min/t.precision));return a/=1/t.precision},this.float=function(t){\"number\"==typeof t&&(t={precision:t}),t=t||{};var n={};for(var a in t)n[a]=t[a];return void 0===n.precision&&(n.precision=.01),e.datatype.number(n)},this.datetime=function(t){\"number\"==typeof t&&(t={max:t});var n=864e13;(void 0===(t=t||{}).min||t.min<-1*n)&&(t.min=(new Date).setFullYear(1990,1,1)),(void 0===t.max||t.max>n)&&(t.max=(new Date).setFullYear(2100,1,1));var a=e.datatype.number(t);return new Date(a)},this.string=function(t){void 0===t&&(t=10);var n=Math.pow(2,20);t>=n&&(t=n);for(var a={min:33,max:125},r=\"\",i=0;i<t;i++)r+=String.fromCharCode(e.datatype.number(a));return r},this.uuid=function(){return\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g,(function(t){var n=e.datatype.number({min:0,max:15});return(\"x\"==t?n:3&n|8).toString(16)}))},this.boolean=function(){return!!e.datatype.number(1)},this.hexaDecimal=function(t){void 0===t&&(t=1);for(var n=\"\",a=0;a<t;a++)n+=e.random.arrayElement([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]);return\"0x\"+n},this.json=function(){var t={};return[\"foo\",\"bar\",\"bike\",\"a\",\"b\",\"name\",\"prop\"].forEach((function(n){t[n]=e.datatype.boolean()?e.datatype.string():e.datatype.number()})),JSON.stringify(t)},this.array=function(t){void 0===t&&(t=10);for(var n=new Array(t),a=0;a<t;a++)n[a]=e.datatype.boolean()?e.datatype.string():e.datatype.number();return n},this}},{}],27:[function(e,t,n){t.exports=function(e){var t=this;return t.past=function(t,n){var a=new Date;void 0!==n&&(a=new Date(Date.parse(n)));var r={min:1e3,max:365*(t||1)*24*3600*1e3},i=a.getTime();return i-=e.datatype.number(r),a.setTime(i),a},t.future=function(t,n){var a=new Date;void 0!==n&&(a=new Date(Date.parse(n)));var r={min:1e3,max:365*(t||1)*24*3600*1e3},i=a.getTime();return i+=e.datatype.number(r),a.setTime(i),a},t.between=function(t,n){var a=Date.parse(t),r=e.datatype.number(Date.parse(n)-a);return new Date(a+r)},t.betweens=function(e,t,n){void 0===n&&(n=3);for(var a=[],r=Date.parse(e),i=(Date.parse(t)-r)/(n+1),o=e,s=0;s<n;s++)r=Date.parse(o),o=new Date(r+i),a.push(o);return a},t.recent=function(t,n){var a=new Date;void 0!==n&&(a=new Date(Date.parse(n)));var r={min:1e3,max:24*(t||1)*3600*1e3},i=a.getTime();return i-=e.datatype.number(r),a.setTime(i),a},t.soon=function(t,n){var a=new Date;void 0!==n&&(a=new Date(Date.parse(n)));var r={min:1e3,max:24*(t||1)*3600*1e3},i=a.getTime();return i+=e.datatype.number(r),a.setTime(i),a},t.month=function(t){var n=\"wide\";(t=t||{}).abbr&&(n=\"abbr\"),t.context&&void 0!==e.definitions.date.month[n+\"_context\"]&&(n+=\"_context\");var a=e.definitions.date.month[n];return e.random.arrayElement(a)},t.weekday=function(t){var n=\"wide\";(t=t||{}).abbr&&(n=\"abbr\"),t.context&&void 0!==e.definitions.date.weekday[n+\"_context\"]&&(n+=\"_context\");var a=e.definitions.date.weekday[n];return e.random.arrayElement(a)},t}},{}],28:[function(e,t,n){t.exports=function(e){return this.fake=function t(n){if(\"string\"!=typeof n||0===n.length)throw new Error(\"string parameter is required!\");var a=n.search(\"{{\"),r=n.search(\"}}\");if(-1===a&&-1===r)return n;var i=n.substr(a+2,r-a-2),o=i.replace(\"}}\",\"\").replace(\"{{\",\"\"),s=/\\(([^)]+)\\)/,c=s.exec(o),u=\"\";c&&(o=o.replace(s,\"\"),u=c[1]);var l=o.split(\".\");if(void 0===e[l[0]])throw new Error(\"Invalid module: \"+l[0]);if(void 0===e[l[0]][l[1]])throw new Error(\"Invalid method: \"+l[0]+\".\"+l[1]);var p,d,f=e[l[0]][l[1]];try{p=JSON.parse(u)}catch(h){p=u}return d=\"string\"==typeof p&&0===p.length?f.call(this):f.call(this,p),t(n.replace(\"{{\"+i+\"}}\",d))},this}},{}],29:[function(e,t,n){t.exports=function(t){var n=e(\"./iban\"),a=t.helpers,r=this;r.account=function(e){e=e||8;for(var t=\"\",n=0;n<e;n++)t+=\"#\";return e=null,a.replaceSymbolWithNumber(t)},r.accountName=function(){return[a.randomize(t.definitions.finance.account_type),\"Account\"].join(\" \")},r.routingNumber=function(){for(var e=a.replaceSymbolWithNumber(\"########\"),t=0,n=0;n<e.length;n+=3)t+=3*Number(e[n]),t+=7*Number(e[n+1]),t+=Number(e[n+2])||0;return e+(10*Math.ceil(t/10)-t)},r.mask=function(e,t,n){e=0!=e&&e&&void 0!==e?e:4,t=null===t||t,n=null===n||n;for(var r=\"\",i=0;i<e;i++)r+=\"#\";return r=n?[\"...\",r].join(\"\"):r,r=t?[\"(\",r,\")\"].join(\"\"):r,r=a.replaceSymbolWithNumber(r)},r.amount=function(e,n,a,r,i){e=e||0,n=n||1e3,a=void 0===a?2:a,r=r||\"\";const o=t.datatype.number({max:n,min:e,precision:Math.pow(10,-a)});return r+(i?o.toLocaleString(void 0,{minimumFractionDigits:a}):o.toFixed(a))},r.transactionType=function(){return a.randomize(t.definitions.finance.transaction_type)},r.currencyCode=function(){return t.random.objectElement(t.definitions.finance.currency).code},r.currencyName=function(){return t.random.objectElement(t.definitions.finance.currency,\"key\")},r.currencySymbol=function(){for(var e;!e;)e=t.random.objectElement(t.definitions.finance.currency).symbol;return e},r.bitcoinAddress=function(){for(var e=t.datatype.number({min:25,max:34}),n=t.random.arrayElement([\"1\",\"3\"]),a=0;a<e-1;a++)n+=t.random.arrayElement(\"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\".split(\"\"));return n},r.litecoinAddress=function(){for(var e=t.datatype.number({min:26,max:33}),n=t.random.arrayElement([\"L\",\"M\",\"3\"]),a=0;a<e-1;a++)n+=t.random.arrayElement(\"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\".split(\"\"));return n},r.creditCardNumber=function(e){var n,r;e=e||\"\";var i=t.definitions.finance.credit_card;return e in i?n=\"string\"==typeof(r=i[e])?r:t.random.arrayElement(r):e.match(/#/)?n=e:\"string\"==typeof i?n=i:\"object\"==typeof i&&(n=\"string\"==typeof(r=t.random.objectElement(i,\"value\"))?r:t.random.arrayElement(r)),n=n.replace(/\\//g,\"\"),a.replaceCreditCardSymbols(n)},r.creditCardCVV=function(){for(var e=\"\",n=0;n<3;n++)e+=t.datatype.number({max:9}).toString();return e},r.ethereumAddress=function(){return t.datatype.hexaDecimal(40).toLowerCase()},r.iban=function(e,a){var r;if(a){r=n.formats.find((function(e){return e.country===a}))}else r=t.random.arrayElement(n.formats);if(!r)throw new Error(\"Country code \"+a+\" not supported.\");for(var i=\"\",o=0,s=0;s<r.bban.length;s++){var c=r.bban[s],u=c.count;for(o+=c.count;u>0;)\"a\"==c.type?i+=t.random.arrayElement(n.alpha):\"c\"==c.type?t.datatype.number(100)<80?i+=t.datatype.number(9):i+=t.random.arrayElement(n.alpha):u>=3&&t.datatype.number(100)<30?t.datatype.boolean()?(i+=t.random.arrayElement(n.pattern100),u-=2):(i+=t.random.arrayElement(n.pattern10),u--):i+=t.datatype.number(9),u--;i=i.substring(0,o)}var l=98-n.mod97(n.toDigitString(i+r.country+\"00\"));l<10&&(l=\"0\"+l);var p=r.country+l+i;return e?p.match(/.{1,4}/g).join(\" \"):p},r.bic=function(){var e=[\"A\",\"E\",\"I\",\"O\",\"U\"],r=t.datatype.number(100);return a.replaceSymbols(\"???\")+t.random.arrayElement(e)+t.random.arrayElement(n.iso3166)+a.replaceSymbols(\"?\")+\"1\"+(r<10?a.replaceSymbols(\"?\"+t.random.arrayElement(e)+\"?\"):r<40?a.replaceSymbols(\"###\"):\"\")},r.transactionDescription=function(){var e=a.createTransaction(),n=e.account,r=e.amount;return e.type+\" transaction at \"+e.business+\" using card ending with ***\"+t.finance.mask()+\" for \"+t.finance.currencyCode()+\" \"+r+\" in account ***\"+n}}},{\"./iban\":33}],30:[function(e,t,n){t.exports=function(e){var t=this,n=e.fake,a=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"];return t.branch=function(){return e.hacker.noun().replace(\" \",\"-\")+\"-\"+e.hacker.verb().replace(\" \",\"-\")},t.commitEntry=function(t){var a=\"commit {{git.commitSha}}\\r\\n\";return((t=t||{}).merge||0===e.datatype.number({min:0,max:4}))&&(a+=\"Merge: {{git.shortSha}} {{git.shortSha}}\\r\\n\"),a+=\"Author: {{name.firstName}} {{name.lastName}} <{{internet.email}}>\\r\\n\",a+=\"Date: \"+e.date.recent().toString()+\"\\r\\n\",n(a+=\"\\r\\n    {{git.commitMessage}}\\r\\n\")},t.commitMessage=function(){return n(\"{{hacker.verb}} {{hacker.adjective}} {{hacker.noun}}\")},t.commitSha=function(){for(var t=\"\",n=0;n<40;n++)t+=e.random.arrayElement(a);return t},t.shortSha=function(){for(var t=\"\",n=0;n<7;n++)t+=e.random.arrayElement(a);return t},t}},{}],31:[function(e,t,n){t.exports=function(e){var t=this;return t.abbreviation=function(){return e.random.arrayElement(e.definitions.hacker.abbreviation)},t.adjective=function(){return e.random.arrayElement(e.definitions.hacker.adjective)},t.noun=function(){return e.random.arrayElement(e.definitions.hacker.noun)},t.verb=function(){return e.random.arrayElement(e.definitions.hacker.verb)},t.ingverb=function(){return e.random.arrayElement(e.definitions.hacker.ingverb)},t.phrase=function(){var n={abbreviation:t.abbreviation,adjective:t.adjective,ingverb:t.ingverb,noun:t.noun,verb:t.verb},a=e.random.arrayElement(e.definitions.hacker.phrase);return e.helpers.mustache(a,n)},t}},{}],32:[function(e,t,n){t.exports=function(e){var t=this;return t.randomize=function(t){return t=t||[\"a\",\"b\",\"c\"],e.random.arrayElement(t)},t.slugify=function(e){return(e=e||\"\").replace(/ /g,\"-\").replace(/[^一-龠ぁ-ゔァ-ヴー\\w\\.\\-]+/g,\"\")},t.replaceSymbolWithNumber=function(t,n){t=t||\"\",void 0===n&&(n=\"#\");for(var a=\"\",r=0;r<t.length;r++)t.charAt(r)==n?a+=e.datatype.number(9):\"!\"==t.charAt(r)?a+=e.datatype.number({min:2,max:9}):a+=t.charAt(r);return a},t.replaceSymbols=function(t){t=t||\"\";for(var n=[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"],a=\"\",r=0;r<t.length;r++)\"#\"==t.charAt(r)?a+=e.datatype.number(9):\"?\"==t.charAt(r)?a+=e.random.arrayElement(n):\"*\"==t.charAt(r)?a+=e.datatype.boolean()?e.random.arrayElement(n):e.datatype.number(9):a+=t.charAt(r);return a},t.replaceCreditCardSymbols=function(t,n){t=t||\"6453-####-####-####-###L\",n=n||\"#\";t=e.helpers.regexpStyleStringParse(t);var a,r=(t=e.helpers.replaceSymbolWithNumber(t,n)).replace(/\\D/g,\"\").split(\"\").map((function(e){return parseInt(e)})),i=((a=r).reverse(),(a=a.map((function(e,t){return t%2==0&&(e*=2)>9&&(e-=9),e}))).reduce((function(e,t){return e+t}))%10);return t.replace(\"L\",i)},t.repeatString=function(e,t){void 0===t&&(t=0);for(var n=\"\",a=0;a<t;a++)n+=e.toString();return n},t.regexpStyleStringParse=function(t){for(var n,a,r,i,o=/(.)\\{(\\d+)\\,(\\d+)\\}/,s=/(.)\\{(\\d+)\\}/,c=/\\[(\\d+)\\-(\\d+)\\]/,u=(t=t||\"\").match(o);null!==u;)(n=parseInt(u[2]))>(a=parseInt(u[3]))&&(r=a,a=n,n=r),i=e.datatype.number({min:n,max:a}),u=(t=t.slice(0,u.index)+e.helpers.repeatString(u[1],i)+t.slice(u.index+u[0].length)).match(o);for(u=t.match(s);null!==u;)i=parseInt(u[2]),u=(t=t.slice(0,u.index)+e.helpers.repeatString(u[1],i)+t.slice(u.index+u[0].length)).match(s);for(u=t.match(c);null!==u;)(n=parseInt(u[1]))>(a=parseInt(u[2]))&&(r=a,a=n,n=r),u=(t=t.slice(0,u.index)+e.datatype.number({min:n,max:a}).toString()+t.slice(u.index+u[0].length)).match(c);return t},t.shuffle=function(t){if(void 0===t||0===t.length)return t||[];for(var n,a,r=(t=t||[\"a\",\"b\",\"c\"]).length-1;r>0;--r)a=e.datatype.number(r),n=t[r],t[r]=t[a],t[a]=n;return t},t.mustache=function(e,t){if(void 0===e)return\"\";for(var n in t){var a=new RegExp(\"{{\"+n+\"}}\",\"g\");e=e.replace(a,t[n])}return e},t.createCard=function(){return{name:e.name.findName(),username:e.internet.userName(),email:e.internet.email(),address:{streetA:e.address.streetName(),streetB:e.address.streetAddress(),streetC:e.address.streetAddress(!0),streetD:e.address.secondaryAddress(),city:e.address.city(),state:e.address.state(),country:e.address.country(),zipcode:e.address.zipCode(),geo:{lat:e.address.latitude(),lng:e.address.longitude()}},phone:e.phone.phoneNumber(),website:e.internet.domainName(),company:{name:e.company.companyName(),catchPhrase:e.company.catchPhrase(),bs:e.company.bs()},posts:[{words:e.lorem.words(),sentence:e.lorem.sentence(),sentences:e.lorem.sentences(),paragraph:e.lorem.paragraph()},{words:e.lorem.words(),sentence:e.lorem.sentence(),sentences:e.lorem.sentences(),paragraph:e.lorem.paragraph()},{words:e.lorem.words(),sentence:e.lorem.sentence(),sentences:e.lorem.sentences(),paragraph:e.lorem.paragraph()}],accountHistory:[e.helpers.createTransaction(),e.helpers.createTransaction(),e.helpers.createTransaction()]}},t.contextualCard=function(){var t=e.name.firstName(),n=e.internet.userName(t);return{name:t,username:n,avatar:e.internet.avatar(),email:e.internet.email(n),dob:e.date.past(50,new Date(\"Sat Sep 20 1992 21:35:02 GMT+0200 (CEST)\")),phone:e.phone.phoneNumber(),address:{street:e.address.streetName(!0),suite:e.address.secondaryAddress(),city:e.address.city(),zipcode:e.address.zipCode(),geo:{lat:e.address.latitude(),lng:e.address.longitude()}},website:e.internet.domainName(),company:{name:e.company.companyName(),catchPhrase:e.company.catchPhrase(),bs:e.company.bs()}}},t.userCard=function(){return{name:e.name.findName(),username:e.internet.userName(),email:e.internet.email(),address:{street:e.address.streetName(!0),suite:e.address.secondaryAddress(),city:e.address.city(),zipcode:e.address.zipCode(),geo:{lat:e.address.latitude(),lng:e.address.longitude()}},phone:e.phone.phoneNumber(),website:e.internet.domainName(),company:{name:e.company.companyName(),catchPhrase:e.company.catchPhrase(),bs:e.company.bs()}}},t.createTransaction=function(){return{amount:e.finance.amount(),date:new Date(2012,1,2),business:e.company.companyName(),name:[e.finance.accountName(),e.finance.mask()].join(\" \"),type:t.randomize(e.definitions.finance.transaction_type),account:e.finance.account()}},t}},{}],33:[function(e,t,n){t.exports={alpha:[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"],pattern10:[\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\"],pattern100:[\"001\",\"002\",\"003\",\"004\",\"005\",\"006\",\"007\",\"008\",\"009\"],toDigitString:function(e){return e.replace(/[A-Z]/gi,(function(e){return e.toUpperCase().charCodeAt(0)-55}))},mod97:function(e){for(var t=0,n=0;n<e.length;n++)t=(10*t+(0|e[n]))%97;return t},formats:[{country:\"AL\",total:28,bban:[{type:\"n\",count:8},{type:\"c\",count:16}],format:\"ALkk bbbs sssx cccc cccc cccc cccc\"},{country:\"AD\",total:24,bban:[{type:\"n\",count:8},{type:\"c\",count:12}],format:\"ADkk bbbb ssss cccc cccc cccc\"},{country:\"AT\",total:20,bban:[{type:\"n\",count:5},{type:\"n\",count:11}],format:\"ATkk bbbb bccc cccc cccc\"},{country:\"AZ\",total:28,bban:[{type:\"a\",count:4},{type:\"n\",count:20}],format:\"AZkk bbbb cccc cccc cccc cccc cccc\"},{country:\"BH\",total:22,bban:[{type:\"a\",count:4},{type:\"c\",count:14}],format:\"BHkk bbbb cccc cccc cccc cc\"},{country:\"BE\",total:16,bban:[{type:\"n\",count:3},{type:\"n\",count:9}],format:\"BEkk bbbc cccc ccxx\"},{country:\"BA\",total:20,bban:[{type:\"n\",count:6},{type:\"n\",count:10}],format:\"BAkk bbbs sscc cccc ccxx\"},{country:\"BR\",total:29,bban:[{type:\"n\",count:13},{type:\"n\",count:10},{type:\"a\",count:1},{type:\"c\",count:1}],format:\"BRkk bbbb bbbb ssss sccc cccc ccct n\"},{country:\"BG\",total:22,bban:[{type:\"a\",count:4},{type:\"n\",count:6},{type:\"c\",count:8}],format:\"BGkk bbbb ssss ddcc cccc cc\"},{country:\"CR\",total:21,bban:[{type:\"n\",count:3},{type:\"n\",count:14}],format:\"CRkk bbbc cccc cccc cccc c\"},{country:\"HR\",total:21,bban:[{type:\"n\",count:7},{type:\"n\",count:10}],format:\"HRkk bbbb bbbc cccc cccc c\"},{country:\"CY\",total:28,bban:[{type:\"n\",count:8},{type:\"c\",count:16}],format:\"CYkk bbbs ssss cccc cccc cccc cccc\"},{country:\"CZ\",total:24,bban:[{type:\"n\",count:10},{type:\"n\",count:10}],format:\"CZkk bbbb ssss sscc cccc cccc\"},{country:\"DK\",total:18,bban:[{type:\"n\",count:4},{type:\"n\",count:10}],format:\"DKkk bbbb cccc cccc cc\"},{country:\"DO\",total:28,bban:[{type:\"a\",count:4},{type:\"n\",count:20}],format:\"DOkk bbbb cccc cccc cccc cccc cccc\"},{country:\"TL\",total:23,bban:[{type:\"n\",count:3},{type:\"n\",count:16}],format:\"TLkk bbbc cccc cccc cccc cxx\"},{country:\"EE\",total:20,bban:[{type:\"n\",count:4},{type:\"n\",count:12}],format:\"EEkk bbss cccc cccc cccx\"},{country:\"FO\",total:18,bban:[{type:\"n\",count:4},{type:\"n\",count:10}],format:\"FOkk bbbb cccc cccc cx\"},{country:\"FI\",total:18,bban:[{type:\"n\",count:6},{type:\"n\",count:8}],format:\"FIkk bbbb bbcc cccc cx\"},{country:\"FR\",total:27,bban:[{type:\"n\",count:10},{type:\"c\",count:11},{type:\"n\",count:2}],format:\"FRkk bbbb bggg ggcc cccc cccc cxx\"},{country:\"GE\",total:22,bban:[{type:\"a\",count:2},{type:\"n\",count:16}],format:\"GEkk bbcc cccc cccc cccc cc\"},{country:\"DE\",total:22,bban:[{type:\"n\",count:8},{type:\"n\",count:10}],format:\"DEkk bbbb bbbb cccc cccc cc\"},{country:\"GI\",total:23,bban:[{type:\"a\",count:4},{type:\"c\",count:15}],format:\"GIkk bbbb cccc cccc cccc ccc\"},{country:\"GR\",total:27,bban:[{type:\"n\",count:7},{type:\"c\",count:16}],format:\"GRkk bbbs sssc cccc cccc cccc ccc\"},{country:\"GL\",total:18,bban:[{type:\"n\",count:4},{type:\"n\",count:10}],format:\"GLkk bbbb cccc cccc cc\"},{country:\"GT\",total:28,bban:[{type:\"c\",count:4},{type:\"c\",count:4},{type:\"c\",count:16}],format:\"GTkk bbbb mmtt cccc cccc cccc cccc\"},{country:\"HU\",total:28,bban:[{type:\"n\",count:8},{type:\"n\",count:16}],format:\"HUkk bbbs sssk cccc cccc cccc cccx\"},{country:\"IS\",total:26,bban:[{type:\"n\",count:6},{type:\"n\",count:16}],format:\"ISkk bbbb sscc cccc iiii iiii ii\"},{country:\"IE\",total:22,bban:[{type:\"c\",count:4},{type:\"n\",count:6},{type:\"n\",count:8}],format:\"IEkk aaaa bbbb bbcc cccc cc\"},{country:\"IL\",total:23,bban:[{type:\"n\",count:6},{type:\"n\",count:13}],format:\"ILkk bbbn nncc cccc cccc ccc\"},{country:\"IT\",total:27,bban:[{type:\"a\",count:1},{type:\"n\",count:10},{type:\"c\",count:12}],format:\"ITkk xaaa aabb bbbc cccc cccc ccc\"},{country:\"JO\",total:30,bban:[{type:\"a\",count:4},{type:\"n\",count:4},{type:\"n\",count:18}],format:\"JOkk bbbb nnnn cccc cccc cccc cccc cc\"},{country:\"KZ\",total:20,bban:[{type:\"n\",count:3},{type:\"c\",count:13}],format:\"KZkk bbbc cccc cccc cccc\"},{country:\"XK\",total:20,bban:[{type:\"n\",count:4},{type:\"n\",count:12}],format:\"XKkk bbbb cccc cccc cccc\"},{country:\"KW\",total:30,bban:[{type:\"a\",count:4},{type:\"c\",count:22}],format:\"KWkk bbbb cccc cccc cccc cccc cccc cc\"},{country:\"LV\",total:21,bban:[{type:\"a\",count:4},{type:\"c\",count:13}],format:\"LVkk bbbb cccc cccc cccc c\"},{country:\"LB\",total:28,bban:[{type:\"n\",count:4},{type:\"c\",count:20}],format:\"LBkk bbbb cccc cccc cccc cccc cccc\"},{country:\"LI\",total:21,bban:[{type:\"n\",count:5},{type:\"c\",count:12}],format:\"LIkk bbbb bccc cccc cccc c\"},{country:\"LT\",total:20,bban:[{type:\"n\",count:5},{type:\"n\",count:11}],format:\"LTkk bbbb bccc cccc cccc\"},{country:\"LU\",total:20,bban:[{type:\"n\",count:3},{type:\"c\",count:13}],format:\"LUkk bbbc cccc cccc cccc\"},{country:\"MK\",total:19,bban:[{type:\"n\",count:3},{type:\"c\",count:10},{type:\"n\",count:2}],format:\"MKkk bbbc cccc cccc cxx\"},{country:\"MT\",total:31,bban:[{type:\"a\",count:4},{type:\"n\",count:5},{type:\"c\",count:18}],format:\"MTkk bbbb ssss sccc cccc cccc cccc ccc\"},{country:\"MR\",total:27,bban:[{type:\"n\",count:10},{type:\"n\",count:13}],format:\"MRkk bbbb bsss sscc cccc cccc cxx\"},{country:\"MU\",total:30,bban:[{type:\"a\",count:4},{type:\"n\",count:4},{type:\"n\",count:15},{type:\"a\",count:3}],format:\"MUkk bbbb bbss cccc cccc cccc 000d dd\"},{country:\"MC\",total:27,bban:[{type:\"n\",count:10},{type:\"c\",count:11},{type:\"n\",count:2}],format:\"MCkk bbbb bsss sscc cccc cccc cxx\"},{country:\"MD\",total:24,bban:[{type:\"c\",count:2},{type:\"c\",count:18}],format:\"MDkk bbcc cccc cccc cccc cccc\"},{country:\"ME\",total:22,bban:[{type:\"n\",count:3},{type:\"n\",count:15}],format:\"MEkk bbbc cccc cccc cccc xx\"},{country:\"NL\",total:18,bban:[{type:\"a\",count:4},{type:\"n\",count:10}],format:\"NLkk bbbb cccc cccc cc\"},{country:\"NO\",total:15,bban:[{type:\"n\",count:4},{type:\"n\",count:7}],format:\"NOkk bbbb cccc ccx\"},{country:\"PK\",total:24,bban:[{type:\"a\",count:4},{type:\"n\",count:16}],format:\"PKkk bbbb cccc cccc cccc cccc\"},{country:\"PS\",total:29,bban:[{type:\"c\",count:4},{type:\"n\",count:9},{type:\"n\",count:12}],format:\"PSkk bbbb xxxx xxxx xccc cccc cccc c\"},{country:\"PL\",total:28,bban:[{type:\"n\",count:8},{type:\"n\",count:16}],format:\"PLkk bbbs sssx cccc cccc cccc cccc\"},{country:\"PT\",total:25,bban:[{type:\"n\",count:8},{type:\"n\",count:13}],format:\"PTkk bbbb ssss cccc cccc cccx x\"},{country:\"QA\",total:29,bban:[{type:\"a\",count:4},{type:\"c\",count:21}],format:\"QAkk bbbb cccc cccc cccc cccc cccc c\"},{country:\"RO\",total:24,bban:[{type:\"a\",count:4},{type:\"c\",count:16}],format:\"ROkk bbbb cccc cccc cccc cccc\"},{country:\"SM\",total:27,bban:[{type:\"a\",count:1},{type:\"n\",count:10},{type:\"c\",count:12}],format:\"SMkk xaaa aabb bbbc cccc cccc ccc\"},{country:\"SA\",total:24,bban:[{type:\"n\",count:2},{type:\"c\",count:18}],format:\"SAkk bbcc cccc cccc cccc cccc\"},{country:\"RS\",total:22,bban:[{type:\"n\",count:3},{type:\"n\",count:15}],format:\"RSkk bbbc cccc cccc cccc xx\"},{country:\"SK\",total:24,bban:[{type:\"n\",count:10},{type:\"n\",count:10}],format:\"SKkk bbbb ssss sscc cccc cccc\"},{country:\"SI\",total:19,bban:[{type:\"n\",count:5},{type:\"n\",count:10}],format:\"SIkk bbss sccc cccc cxx\"},{country:\"ES\",total:24,bban:[{type:\"n\",count:10},{type:\"n\",count:10}],format:\"ESkk bbbb gggg xxcc cccc cccc\"},{country:\"SE\",total:24,bban:[{type:\"n\",count:3},{type:\"n\",count:17}],format:\"SEkk bbbc cccc cccc cccc cccc\"},{country:\"CH\",total:21,bban:[{type:\"n\",count:5},{type:\"c\",count:12}],format:\"CHkk bbbb bccc cccc cccc c\"},{country:\"TN\",total:24,bban:[{type:\"n\",count:5},{type:\"n\",count:15}],format:\"TNkk bbss sccc cccc cccc cccc\"},{country:\"TR\",total:26,bban:[{type:\"n\",count:5},{type:\"n\",count:1},{type:\"n\",count:16}],format:\"TRkk bbbb bxcc cccc cccc cccc cc\"},{country:\"AE\",total:23,bban:[{type:\"n\",count:3},{type:\"n\",count:16}],format:\"AEkk bbbc cccc cccc cccc ccc\"},{country:\"GB\",total:22,bban:[{type:\"a\",count:4},{type:\"n\",count:6},{type:\"n\",count:8}],format:\"GBkk bbbb ssss sscc cccc cc\"},{country:\"VG\",total:24,bban:[{type:\"c\",count:4},{type:\"n\",count:16}],format:\"VGkk bbbb cccc cccc cccc cccc\"}],iso3166:[\"AC\",\"AD\",\"AE\",\"AF\",\"AG\",\"AI\",\"AL\",\"AM\",\"AN\",\"AO\",\"AQ\",\"AR\",\"AS\",\"AT\",\"AU\",\"AW\",\"AX\",\"AZ\",\"BA\",\"BB\",\"BD\",\"BE\",\"BF\",\"BG\",\"BH\",\"BI\",\"BJ\",\"BL\",\"BM\",\"BN\",\"BO\",\"BQ\",\"BR\",\"BS\",\"BT\",\"BU\",\"BV\",\"BW\",\"BY\",\"BZ\",\"CA\",\"CC\",\"CD\",\"CE\",\"CF\",\"CG\",\"CH\",\"CI\",\"CK\",\"CL\",\"CM\",\"CN\",\"CO\",\"CP\",\"CR\",\"CS\",\"CS\",\"CU\",\"CV\",\"CW\",\"CX\",\"CY\",\"CZ\",\"DD\",\"DE\",\"DG\",\"DJ\",\"DK\",\"DM\",\"DO\",\"DZ\",\"EA\",\"EC\",\"EE\",\"EG\",\"EH\",\"ER\",\"ES\",\"ET\",\"EU\",\"FI\",\"FJ\",\"FK\",\"FM\",\"FO\",\"FR\",\"FX\",\"GA\",\"GB\",\"GD\",\"GE\",\"GF\",\"GG\",\"GH\",\"GI\",\"GL\",\"GM\",\"GN\",\"GP\",\"GQ\",\"GR\",\"GS\",\"GT\",\"GU\",\"GW\",\"GY\",\"HK\",\"HM\",\"HN\",\"HR\",\"HT\",\"HU\",\"IC\",\"ID\",\"IE\",\"IL\",\"IM\",\"IN\",\"IO\",\"IQ\",\"IR\",\"IS\",\"IT\",\"JE\",\"JM\",\"JO\",\"JP\",\"KE\",\"KG\",\"KH\",\"KI\",\"KM\",\"KN\",\"KP\",\"KR\",\"KW\",\"KY\",\"KZ\",\"LA\",\"LB\",\"LC\",\"LI\",\"LK\",\"LR\",\"LS\",\"LT\",\"LU\",\"LV\",\"LY\",\"MA\",\"MC\",\"MD\",\"ME\",\"MF\",\"MG\",\"MH\",\"MK\",\"ML\",\"MM\",\"MN\",\"MO\",\"MP\",\"MQ\",\"MR\",\"MS\",\"MT\",\"MU\",\"MV\",\"MW\",\"MX\",\"MY\",\"MZ\",\"NA\",\"NC\",\"NE\",\"NF\",\"NG\",\"NI\",\"NL\",\"NO\",\"NP\",\"NR\",\"NT\",\"NU\",\"NZ\",\"OM\",\"PA\",\"PE\",\"PF\",\"PG\",\"PH\",\"PK\",\"PL\",\"PM\",\"PN\",\"PR\",\"PS\",\"PT\",\"PW\",\"PY\",\"QA\",\"RE\",\"RO\",\"RS\",\"RU\",\"RW\",\"SA\",\"SB\",\"SC\",\"SD\",\"SE\",\"SG\",\"SH\",\"SI\",\"SJ\",\"SK\",\"SL\",\"SM\",\"SN\",\"SO\",\"SR\",\"SS\",\"ST\",\"SU\",\"SV\",\"SX\",\"SY\",\"SZ\",\"TA\",\"TC\",\"TD\",\"TF\",\"TG\",\"TH\",\"TJ\",\"TK\",\"TL\",\"TM\",\"TN\",\"TO\",\"TR\",\"TT\",\"TV\",\"TW\",\"TZ\",\"UA\",\"UG\",\"UM\",\"US\",\"UY\",\"UZ\",\"VA\",\"VC\",\"VE\",\"VG\",\"VI\",\"VN\",\"VU\",\"WF\",\"WS\",\"YE\",\"YT\",\"YU\",\"ZA\",\"ZM\",\"ZR\",\"ZW\"]}},{}],34:[function(e,t,n){t.exports=function(t){var n=this,a=e(\"./image_providers/lorempixel\"),r=e(\"./image_providers/unsplash\"),i=e(\"./image_providers/lorempicsum\");n.image=function(e,a,r){return n[t.random.arrayElement([\"abstract\",\"animals\",\"business\",\"cats\",\"city\",\"food\",\"nightlife\",\"fashion\",\"people\",\"nature\",\"sports\",\"technics\",\"transport\"])](e,a,r)},n.avatar=function(){return t.internet.avatar()},n.imageUrl=function(e,n,a,r,i){var o=\"http://\";void 0!==i&&!0===i&&(o=\"https://\");var s=o+\"placeimg.com/\"+(e=e||640)+\"/\"+(n=n||480);return void 0!==a&&(s+=\"/\"+a),r&&(s+=\"?\"+t.datatype.number()),s},n.abstract=function(e,n,a){return t.image.imageUrl(e,n,\"abstract\",a)},n.animals=function(e,n,a){return t.image.imageUrl(e,n,\"animals\",a)},n.business=function(e,n,a){return t.image.imageUrl(e,n,\"business\",a)},n.cats=function(e,n,a){return t.image.imageUrl(e,n,\"cats\",a)},n.city=function(e,n,a){return t.image.imageUrl(e,n,\"city\",a)},n.food=function(e,n,a){return t.image.imageUrl(e,n,\"food\",a)},n.nightlife=function(e,n,a){return t.image.imageUrl(e,n,\"nightlife\",a)},n.fashion=function(e,n,a){return t.image.imageUrl(e,n,\"fashion\",a)},n.people=function(e,n,a){return t.image.imageUrl(e,n,\"people\",a)},n.nature=function(e,n,a){return t.image.imageUrl(e,n,\"nature\",a)},n.sports=function(e,n,a){return t.image.imageUrl(e,n,\"sports\",a)},n.technics=function(e,n,a){return t.image.imageUrl(e,n,\"technics\",a)},n.transport=function(e,n,a){return t.image.imageUrl(e,n,\"transport\",a)},n.dataUri=function(e,t,n){n=n||\"grey\";return\"data:image/svg+xml;charset=UTF-8,\"+encodeURIComponent('<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" baseProfile=\"full\" width=\"'+e+'\" height=\"'+t+'\"><rect width=\"100%\" height=\"100%\" fill=\"'+n+'\"/><text x=\"'+e/2+'\" y=\"'+t/2+'\" font-size=\"20\" alignment-baseline=\"middle\" text-anchor=\"middle\" fill=\"white\">'+e+\"x\"+t+\"</text></svg>\")},n.lorempixel=new a(t),n.unsplash=new r(t),n.lorempicsum=new i(t)}},{\"./image_providers/lorempicsum\":35,\"./image_providers/lorempixel\":36,\"./image_providers/unsplash\":37}],35:[function(e,t,n){t.exports=function(e){var t=this;t.image=function(e,n,a,r){return t.imageUrl(e,n,a,r)},t.imageGrayscale=function(e,n,a){return t.imageUrl(e,n,a)},t.imageBlurred=function(e,n,a){return t.imageUrl(e,n,void 0,a)},t.imageRandomSeeded=function(e,n,a,r,i){return t.imageUrl(e,n,a,r,i)},t.avatar=function(){return e.internet.avatar()},t.imageUrl=function(e,t,n,a,r){var i=\"https://picsum.photos\";return r&&(i+=\"/seed/\"+r),i+=\"/\"+(e=e||640)+\"/\"+(t=t||480),n&&a?i+\"?grayscale&blur=\"+a:n?i+\"?grayscale\":a?i+\"?blur=\"+a:i}}},{}],36:[function(e,t,n){t.exports=function(e){var t=this;t.image=function(n,a,r){return t[e.random.arrayElement([\"abstract\",\"animals\",\"business\",\"cats\",\"city\",\"food\",\"nightlife\",\"fashion\",\"people\",\"nature\",\"sports\",\"technics\",\"transport\"])](n,a,r)},t.avatar=function(){return e.internet.avatar()},t.imageUrl=function(t,n,a,r){var i=\"https://lorempixel.com/\"+(t=t||640)+\"/\"+(n=n||480);return void 0!==a&&(i+=\"/\"+a),r&&(i+=\"?\"+e.datatype.number()),i},t.abstract=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"abstract\",a)},t.animals=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"animals\",a)},t.business=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"business\",a)},t.cats=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"cats\",a)},t.city=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"city\",a)},t.food=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"food\",a)},t.nightlife=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"nightlife\",a)},t.fashion=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"fashion\",a)},t.people=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"people\",a)},t.nature=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"nature\",a)},t.sports=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"sports\",a)},t.technics=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"technics\",a)},t.transport=function(t,n,a){return e.image.lorempixel.imageUrl(t,n,\"transport\",a)}}},{}],37:[function(e,t,n){t.exports=function(e){var t=this;t.image=function(e,n,a){return t.imageUrl(e,n,void 0,a)},t.avatar=function(){return e.internet.avatar()},t.imageUrl=function(e,t,n,a){var r=\"https://source.unsplash.com\";(void 0!==n&&(r+=\"/category/\"+n),r+=\"/\"+(e=e||640)+\"x\"+(t=t||480),void 0!==a)&&(new RegExp(\"^([A-Za-z0-9].+,[A-Za-z0-9]+)$|^([A-Za-z0-9]+)$\").test(a)&&(r+=\"?\"+a));return r},t.food=function(t,n,a){return e.image.unsplash.imageUrl(t,n,\"food\",a)},t.people=function(t,n,a){return e.image.unsplash.imageUrl(t,n,\"people\",a)},t.nature=function(t,n,a){return e.image.unsplash.imageUrl(t,n,\"nature\",a)},t.technology=function(t,n,a){return e.image.unsplash.imageUrl(t,n,\"technology\",a)},t.objects=function(t,n,a){return e.image.unsplash.imageUrl(t,n,\"objects\",a)},t.buildings=function(t,n,a){return e.image.unsplash.imageUrl(t,n,\"buildings\",a)}}},{}],38:[function(e,t,n){function a(t){var n=this;t=t||{};var a=n.locales||t.locales||{},r=n.locale||t.locale||\"en\",i=n.localeFallback||t.localeFallback||\"en\";n.locales=a,n.locale=r,n.localeFallback=i,n.definitions={};var o={name:[\"first_name\",\"last_name\",\"prefix\",\"suffix\",\"binary_gender\",\"gender\",\"title\",\"male_prefix\",\"female_prefix\",\"male_first_name\",\"female_first_name\",\"male_middle_name\",\"female_middle_name\",\"male_last_name\",\"female_last_name\"],address:[\"city_name\",\"city_prefix\",\"city_suffix\",\"street_suffix\",\"county\",\"country\",\"country_code\",\"country_code_alpha_3\",\"state\",\"state_abbr\",\"street_prefix\",\"postcode\",\"postcode_by_state\",\"direction\",\"direction_abbr\",\"time_zone\"],animal:[\"dog\",\"cat\",\"snake\",\"bear\",\"lion\",\"cetacean\",\"insect\",\"crocodilia\",\"cow\",\"bird\",\"fish\",\"rabbit\",\"horse\",\"type\"],company:[\"adjective\",\"noun\",\"descriptor\",\"bs_adjective\",\"bs_noun\",\"bs_verb\",\"suffix\"],lorem:[\"words\"],hacker:[\"abbreviation\",\"adjective\",\"noun\",\"verb\",\"ingverb\",\"phrase\"],phone_number:[\"formats\"],finance:[\"account_type\",\"transaction_type\",\"currency\",\"iban\",\"credit_card\"],internet:[\"avatar_uri\",\"domain_suffix\",\"free_email\",\"example_email\",\"password\"],commerce:[\"color\",\"department\",\"product_name\",\"price\",\"categories\",\"product_description\"],database:[\"collation\",\"column\",\"engine\",\"type\"],system:[\"mimeTypes\",\"directoryPaths\"],date:[\"month\",\"weekday\"],vehicle:[\"vehicle\",\"manufacturer\",\"model\",\"type\",\"fuel\",\"vin\",\"color\"],music:[\"genre\"],title:\"\",separator:\"\"};Object.keys(o).forEach((function(e){void 0===n.definitions[e]&&(n.definitions[e]={}),\"string\"!=typeof o[e]?o[e].forEach((function(t){Object.defineProperty(n.definitions[e],t,{get:function(){return void 0===n.locales[n.locale][e]||void 0===n.locales[n.locale][e][t]?n.locales[i][e][t]:n.locales[n.locale][e][t]}})})):n.definitions[e]=o[e]}));var s=e(\"./fake\");n.fake=new s(n).fake;var c=e(\"./unique\");n.unique=new c(n).unique;var u=e(\"./mersenne\");n.mersenne=new u;var l=e(\"./random\");n.random=new l(n);var p=e(\"./helpers\");n.helpers=new p(n);var d=e(\"./name\");n.name=new d(n);var f=e(\"./address\");n.address=new f(n);var h=e(\"./animal\");n.animal=new h(n);var m=e(\"./company\");n.company=new m(n);var g=e(\"./finance\");n.finance=new g(n);var y=e(\"./image\");n.image=new y(n);var v=e(\"./lorem\");n.lorem=new v(n);var b=e(\"./hacker\");n.hacker=new b(n);var x=e(\"./internet\");n.internet=new x(n);var w=e(\"./database\");n.database=new w(n);var k=e(\"./phone_number\");n.phone=new k(n);var _=e(\"./date\");n.date=new _(n);var j=e(\"./time\");n.time=new j(n);var S=e(\"./commerce\");n.commerce=new S(n);var A=e(\"./system\");n.system=new A(n);var E=e(\"./git\");n.git=new E(n);var C=e(\"./vehicle\");n.vehicle=new C(n);var T=e(\"./music\");n.music=new T(n);var P=e(\"./datatype\");n.datatype=new P(n)}a.prototype.setLocale=function(e){this.locale=e},a.prototype.seed=function(t){var n=e(\"./random\"),a=e(\"./datatype\");this.seedValue=t,this.random=new n(this,this.seedValue),this.datatype=new a(this,this.seedValue)},t.exports=a},{\"./address\":21,\"./animal\":22,\"./commerce\":23,\"./company\":24,\"./database\":25,\"./datatype\":26,\"./date\":27,\"./fake\":28,\"./finance\":29,\"./git\":30,\"./hacker\":31,\"./helpers\":32,\"./image\":34,\"./internet\":39,\"./lorem\":168,\"./mersenne\":169,\"./music\":170,\"./name\":171,\"./phone_number\":172,\"./random\":173,\"./system\":174,\"./time\":175,\"./unique\":176,\"./vehicle\":177}],39:[function(e,t,n){var a=e(\"../vendor/user-agent\");t.exports=function(e){var t=this;t.avatar=function(){return\"https://cdn.fakercloud.com/avatars/\"+e.random.arrayElement(e.definitions.internet.avatar_uri)},t.avatar.schema={description:\"Generates a URL for an avatar.\",sampleResults:[\"https://cdn.fakercloud.com/avatars/sydlawrence_128.jpg\"]},t.email=function(t,n,a){return a=a||e.random.arrayElement(e.definitions.internet.free_email),e.helpers.slugify(e.internet.userName(t,n))+\"@\"+a},t.email.schema={description:\"Generates a valid email address based on optional input criteria\",sampleResults:[\"foo.bar@gmail.com\"],properties:{firstName:{type:\"string\",required:!1,description:\"The first name of the user\"},lastName:{type:\"string\",required:!1,description:\"The last name of the user\"},provider:{type:\"string\",required:!1,description:\"The domain of the user\"}}},t.exampleEmail=function(n,a){var r=e.random.arrayElement(e.definitions.internet.example_email);return t.email(n,a,r)},t.userName=function(t,n){var a;switch(t=t||e.name.firstName(),n=n||e.name.lastName(),e.datatype.number(2)){case 0:a=t+e.datatype.number(99);break;case 1:a=t+e.random.arrayElement([\".\",\"_\"])+n;break;case 2:a=t+e.random.arrayElement([\".\",\"_\"])+n+e.datatype.number(99)}return a=(a=a.toString().replace(/'/g,\"\")).replace(/ /g,\"\")},t.userName.schema={description:\"Generates a username based on one of several patterns. The pattern is chosen randomly.\",sampleResults:[\"Kirstin39\",\"Kirstin.Smith\",\"Kirstin.Smith39\",\"KirstinSmith\",\"KirstinSmith39\"],properties:{firstName:{type:\"string\",required:!1,description:\"The first name of the user\"},lastName:{type:\"string\",required:!1,description:\"The last name of the user\"}}},t.protocol=function(){return e.random.arrayElement([\"http\",\"https\"])},t.protocol.schema={description:\"Randomly generates http or https\",sampleResults:[\"https\",\"http\"]},t.httpMethod=function(){return e.random.arrayElement([\"GET\",\"POST\",\"PUT\",\"DELETE\",\"PATCH\"])},t.httpMethod.schema={description:\"Randomly generates HTTP Methods (GET, POST, PUT, DELETE, PATCH)\",sampleResults:[\"GET\",\"POST\",\"PUT\",\"DELETE\",\"PATCH\"]},t.url=function(){return e.internet.protocol()+\"://\"+e.internet.domainName()},t.url.schema={description:\"Generates a random URL. The URL could be secure or insecure.\",sampleResults:[\"http://rashawn.name\",\"https://rashawn.name\"]},t.domainName=function(){return e.internet.domainWord()+\".\"+e.internet.domainSuffix()},t.domainName.schema={description:\"Generates a random domain name.\",sampleResults:[\"marvin.org\"]},t.domainSuffix=function(){return e.random.arrayElement(e.definitions.internet.domain_suffix)},t.domainSuffix.schema={description:\"Generates a random domain suffix.\",sampleResults:[\"net\"]},t.domainWord=function(){return e.name.firstName().replace(/([\\\\~#&*{}/:<>?|\\\"'])/gi,\"\").toLowerCase()},t.domainWord.schema={description:\"Generates a random domain word.\",sampleResults:[\"alyce\"]},t.ip=function(){for(var t=[],n=0;n<4;n++)t[n]=e.datatype.number(255).toFixed(0);return t.join(\".\")},t.ip.schema={description:\"Generates a random IP.\",sampleResults:[\"97.238.241.11\"]},t.ipv6=function(){for(var t=function(){for(var t=\"\",n=0;n<4;n++)t+=e.random.arrayElement([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]);return t},n=[],a=0;a<8;a++)n[a]=t();return n.join(\":\")},t.ipv6.schema={description:\"Generates a random IPv6 address.\",sampleResults:[\"2001:0db8:6276:b1a7:5213:22f1:25df:c8a0\"]},t.port=function(){return e.datatype.number({min:0,max:65535})},t.port.schema={description:\"Generates a random port number.\",sampleResults:[\"4422\"]},t.userAgent=function(){return a.generate(e)},t.userAgent.schema={description:\"Generates a random user agent.\",sampleResults:[\"Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_7_5 rv:6.0; SL) AppleWebKit/532.0.1 (KHTML, like Gecko) Version/7.1.6 Safari/532.0.1\"]},t.color=function(t,n,a){t=t||0,n=n||0,a=a||0;var r=Math.floor((e.datatype.number(256)+t)/2),i=Math.floor((e.datatype.number(256)+n)/2),o=Math.floor((e.datatype.number(256)+a)/2),s=r.toString(16),c=i.toString(16),u=o.toString(16);return\"#\"+(1===s.length?\"0\":\"\")+s+(1===c.length?\"0\":\"\")+c+(1===u.length?\"0\":\"\")+u},t.color.schema={description:\"Generates a random hexadecimal color.\",sampleResults:[\"#06267f\"],properties:{baseRed255:{type:\"number\",required:!1,description:\"The red value. Valid values are 0 - 255.\"},baseGreen255:{type:\"number\",required:!1,description:\"The green value. Valid values are 0 - 255.\"},baseBlue255:{type:\"number\",required:!1,description:\"The blue value. Valid values are 0 - 255.\"}}},t.mac=function(t){var n,a=\"\",r=\":\";for(-1!==[\"-\",\"\"].indexOf(t)&&(r=t),n=0;n<12;n++)a+=e.datatype.number(15).toString(16),n%2==1&&11!=n&&(a+=r);return a},t.mac.schema={description:\"Generates a random mac address.\",sampleResults:[\"78:06:cc:ae:b3:81\"]},t.password=function(t,n,a,r){var i,o;void 0===n&&(n=!1),o=/[aeiouAEIOU]$/,i=/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;var s=function(t,n,a,r){var c,u;return null==t&&(t=10),null==n&&(n=!0),null==a&&(a=/\\w/),null==r&&(r=\"\"),r.length>=t?r:(n&&(a=r.match(i)?o:i),u=e.datatype.number(94)+33,c=String.fromCharCode(u),n&&(c=c.toLowerCase()),c.match(a)?s(t,n,a,\"\"+r+c):s(t,n,a,r))};return s(t=t||15,n,a,r)},t.password.schema={description:\"Generates a random password.\",sampleResults:[\"AM7zl6Mg\",\"susejofe\"],properties:{length:{type:\"number\",required:!1,description:\"The number of characters in the password.\"},memorable:{type:\"boolean\",required:!1,description:\"Whether a password should be easy to remember.\"},pattern:{type:\"regex\",required:!1,description:\"A regex to match each character of the password against. This parameter will be negated if the memorable setting is turned on.\"},prefix:{type:\"string\",required:!1,description:\"A value to prepend to the generated password. The prefix counts towards the length of the password.\"}}}}},{\"../vendor/user-agent\":181}],40:[function(e,t,n){t.exports=[\"#####\",\"####\",\"###\"]},{}],41:[function(e,t,n){t.exports=[\"#{city_prefix} #{Name.first_name}#{city_suffix}\",\"#{city_prefix} #{Name.first_name}\",\"#{Name.first_name}#{city_suffix}\",\"#{Name.last_name}#{city_suffix}\"]},{}],42:[function(e,t,n){t.exports=[\"Abilene\",\"Akron\",\"Alafaya\",\"Alameda\",\"Albany\",\"Albany\",\"Albany\",\"Albuquerque\",\"Alexandria\",\"Alexandria\",\"Alhambra\",\"Aliso Viejo\",\"Allen\",\"Allentown\",\"Aloha\",\"Alpharetta\",\"Altadena\",\"Altamonte Springs\",\"Altoona\",\"Amarillo\",\"Ames\",\"Anaheim\",\"Anchorage\",\"Anderson\",\"Ankeny\",\"Ann Arbor\",\"Annandale\",\"Antelope\",\"Antioch\",\"Apex\",\"Apopka\",\"Apple Valley\",\"Apple Valley\",\"Appleton\",\"Arcadia\",\"Arden-Arcade\",\"Arecibo\",\"Arlington\",\"Arlington\",\"Arlington\",\"Arlington Heights\",\"Arvada\",\"Ashburn\",\"Asheville\",\"Aspen Hill\",\"Atascocita\",\"Athens-Clarke County\",\"Atlanta\",\"Attleboro\",\"Auburn\",\"Auburn\",\"Augusta-Richmond County\",\"Aurora\",\"Aurora\",\"Austin\",\"Avondale\",\"Azusa\",\"Bakersfield\",\"Baldwin Park\",\"Baltimore\",\"Barnstable Town\",\"Bartlett\",\"Bartlett\",\"Baton Rouge\",\"Battle Creek\",\"Bayamon\",\"Bayonne\",\"Baytown\",\"Beaumont\",\"Beaumont\",\"Beavercreek\",\"Beaverton\",\"Bedford\",\"Bel Air South\",\"Bell Gardens\",\"Belleville\",\"Bellevue\",\"Bellevue\",\"Bellflower\",\"Bellingham\",\"Bend\",\"Bentonville\",\"Berkeley\",\"Berwyn\",\"Bethesda\",\"Bethlehem\",\"Billings\",\"Biloxi\",\"Binghamton\",\"Birmingham\",\"Bismarck\",\"Blacksburg\",\"Blaine\",\"Bloomington\",\"Bloomington\",\"Bloomington\",\"Blue Springs\",\"Boca Raton\",\"Boise City\",\"Bolingbrook\",\"Bonita Springs\",\"Bossier City\",\"Boston\",\"Bothell\",\"Boulder\",\"Bountiful\",\"Bowie\",\"Bowling Green\",\"Boynton Beach\",\"Bozeman\",\"Bradenton\",\"Brandon\",\"Brentwood\",\"Brentwood\",\"Bridgeport\",\"Bristol\",\"Brockton\",\"Broken Arrow\",\"Brookhaven\",\"Brookline\",\"Brooklyn Park\",\"Broomfield\",\"Brownsville\",\"Bryan\",\"Buckeye\",\"Buena Park\",\"Buffalo\",\"Buffalo Grove\",\"Burbank\",\"Burien\",\"Burke\",\"Burleson\",\"Burlington\",\"Burlington\",\"Burnsville\",\"Caguas\",\"Caldwell\",\"Camarillo\",\"Cambridge\",\"Camden\",\"Canton\",\"Cape Coral\",\"Carlsbad\",\"Carmel\",\"Carmichael\",\"Carolina\",\"Carrollton\",\"Carson\",\"Carson City\",\"Cary\",\"Casa Grande\",\"Casas Adobes\",\"Casper\",\"Castle Rock\",\"Castro Valley\",\"Catalina Foothills\",\"Cathedral City\",\"Catonsville\",\"Cedar Hill\",\"Cedar Park\",\"Cedar Rapids\",\"Centennial\",\"Centreville\",\"Ceres\",\"Cerritos\",\"Champaign\",\"Chandler\",\"Chapel Hill\",\"Charleston\",\"Charleston\",\"Charlotte\",\"Charlottesville\",\"Chattanooga\",\"Cheektowaga\",\"Chesapeake\",\"Chesterfield\",\"Cheyenne\",\"Chicago\",\"Chico\",\"Chicopee\",\"Chino\",\"Chino Hills\",\"Chula Vista\",\"Cicero\",\"Cincinnati\",\"Citrus Heights\",\"Clarksville\",\"Clearwater\",\"Cleveland\",\"Cleveland\",\"Cleveland Heights\",\"Clifton\",\"Clovis\",\"Coachella\",\"Coconut Creek\",\"Coeur d'Alene\",\"College Station\",\"Collierville\",\"Colorado Springs\",\"Colton\",\"Columbia\",\"Columbia\",\"Columbia\",\"Columbus\",\"Columbus\",\"Columbus\",\"Commerce City\",\"Compton\",\"Concord\",\"Concord\",\"Concord\",\"Conroe\",\"Conway\",\"Coon Rapids\",\"Coral Gables\",\"Coral Springs\",\"Corona\",\"Corpus Christi\",\"Corvallis\",\"Costa Mesa\",\"Council Bluffs\",\"Country Club\",\"Covina\",\"Cranston\",\"Cupertino\",\"Cutler Bay\",\"Cuyahoga Falls\",\"Cypress\",\"Dale City\",\"Dallas\",\"Daly City\",\"Danbury\",\"Danville\",\"Danville\",\"Davenport\",\"Davie\",\"Davis\",\"Dayton\",\"Daytona Beach\",\"DeKalb\",\"DeSoto\",\"Dearborn\",\"Dearborn Heights\",\"Decatur\",\"Decatur\",\"Deerfield Beach\",\"Delano\",\"Delray Beach\",\"Deltona\",\"Denton\",\"Denver\",\"Des Moines\",\"Des Plaines\",\"Detroit\",\"Diamond Bar\",\"Doral\",\"Dothan\",\"Downers Grove\",\"Downey\",\"Draper\",\"Dublin\",\"Dublin\",\"Dubuque\",\"Duluth\",\"Dundalk\",\"Dunwoody\",\"Durham\",\"Eagan\",\"East Hartford\",\"East Honolulu\",\"East Lansing\",\"East Los Angeles\",\"East Orange\",\"East Providence\",\"Eastvale\",\"Eau Claire\",\"Eden Prairie\",\"Edina\",\"Edinburg\",\"Edmond\",\"El Cajon\",\"El Centro\",\"El Dorado Hills\",\"El Monte\",\"El Paso\",\"Elgin\",\"Elizabeth\",\"Elk Grove\",\"Elkhart\",\"Ellicott City\",\"Elmhurst\",\"Elyria\",\"Encinitas\",\"Enid\",\"Enterprise\",\"Erie\",\"Escondido\",\"Euclid\",\"Eugene\",\"Euless\",\"Evanston\",\"Evansville\",\"Everett\",\"Everett\",\"Fairfield\",\"Fairfield\",\"Fall River\",\"Fargo\",\"Farmington\",\"Farmington Hills\",\"Fayetteville\",\"Fayetteville\",\"Federal Way\",\"Findlay\",\"Fishers\",\"Flagstaff\",\"Flint\",\"Florence-Graham\",\"Florin\",\"Florissant\",\"Flower Mound\",\"Folsom\",\"Fond du Lac\",\"Fontana\",\"Fort Collins\",\"Fort Lauderdale\",\"Fort Myers\",\"Fort Pierce\",\"Fort Smith\",\"Fort Wayne\",\"Fort Worth\",\"Fountain Valley\",\"Fountainebleau\",\"Framingham\",\"Franklin\",\"Frederick\",\"Freeport\",\"Fremont\",\"Fresno\",\"Frisco\",\"Fullerton\",\"Gainesville\",\"Gaithersburg\",\"Galveston\",\"Garden Grove\",\"Gardena\",\"Garland\",\"Gary\",\"Gastonia\",\"Georgetown\",\"Germantown\",\"Gilbert\",\"Gilroy\",\"Glen Burnie\",\"Glendale\",\"Glendale\",\"Glendora\",\"Glenview\",\"Goodyear\",\"Grand Forks\",\"Grand Island\",\"Grand Junction\",\"Grand Prairie\",\"Grand Rapids\",\"Grapevine\",\"Great Falls\",\"Greeley\",\"Green Bay\",\"Greensboro\",\"Greenville\",\"Greenville\",\"Greenwood\",\"Gresham\",\"Guaynabo\",\"Gulfport\",\"Hacienda Heights\",\"Hackensack\",\"Haltom City\",\"Hamilton\",\"Hammond\",\"Hampton\",\"Hanford\",\"Harlingen\",\"Harrisburg\",\"Harrisonburg\",\"Hartford\",\"Hattiesburg\",\"Haverhill\",\"Hawthorne\",\"Hayward\",\"Hemet\",\"Hempstead\",\"Henderson\",\"Hendersonville\",\"Hesperia\",\"Hialeah\",\"Hicksville\",\"High Point\",\"Highland\",\"Highlands Ranch\",\"Hillsboro\",\"Hilo\",\"Hoboken\",\"Hoffman Estates\",\"Hollywood\",\"Homestead\",\"Honolulu\",\"Hoover\",\"Houston\",\"Huntersville\",\"Huntington\",\"Huntington Beach\",\"Huntington Park\",\"Huntsville\",\"Hutchinson\",\"Idaho Falls\",\"Independence\",\"Indianapolis\",\"Indio\",\"Inglewood\",\"Iowa City\",\"Irondequoit\",\"Irvine\",\"Irving\",\"Jackson\",\"Jackson\",\"Jacksonville\",\"Jacksonville\",\"Janesville\",\"Jefferson City\",\"Jeffersonville\",\"Jersey City\",\"Johns Creek\",\"Johnson City\",\"Joliet\",\"Jonesboro\",\"Joplin\",\"Jupiter\",\"Jurupa Valley\",\"Kalamazoo\",\"Kannapolis\",\"Kansas City\",\"Kansas City\",\"Kearny\",\"Keller\",\"Kendale Lakes\",\"Kendall\",\"Kenner\",\"Kennewick\",\"Kenosha\",\"Kent\",\"Kentwood\",\"Kettering\",\"Killeen\",\"Kingsport\",\"Kirkland\",\"Kissimmee\",\"Knoxville\",\"Kokomo\",\"La Crosse\",\"La Habra\",\"La Mesa\",\"La Mirada\",\"Lacey\",\"Lafayette\",\"Lafayette\",\"Laguna Niguel\",\"Lake Charles\",\"Lake Elsinore\",\"Lake Forest\",\"Lake Havasu City\",\"Lake Ridge\",\"Lakeland\",\"Lakeville\",\"Lakewood\",\"Lakewood\",\"Lakewood\",\"Lakewood\",\"Lakewood\",\"Lancaster\",\"Lancaster\",\"Lansing\",\"Laredo\",\"Largo\",\"Las Cruces\",\"Las Vegas\",\"Lauderhill\",\"Lawrence\",\"Lawrence\",\"Lawrence\",\"Lawton\",\"Layton\",\"League City\",\"Lee's Summit\",\"Leesburg\",\"Lehi\",\"Lehigh Acres\",\"Lenexa\",\"Levittown\",\"Levittown\",\"Lewisville\",\"Lexington-Fayette\",\"Lincoln\",\"Lincoln\",\"Linden\",\"Little Rock\",\"Littleton\",\"Livermore\",\"Livonia\",\"Lodi\",\"Logan\",\"Lombard\",\"Lompoc\",\"Long Beach\",\"Longmont\",\"Longview\",\"Lorain\",\"Los Angeles\",\"Louisville/Jefferson County\",\"Loveland\",\"Lowell\",\"Lubbock\",\"Lynchburg\",\"Lynn\",\"Lynwood\",\"Macon-Bibb County\",\"Madera\",\"Madison\",\"Madison\",\"Malden\",\"Manchester\",\"Manhattan\",\"Mansfield\",\"Mansfield\",\"Manteca\",\"Maple Grove\",\"Margate\",\"Maricopa\",\"Marietta\",\"Marysville\",\"Mayaguez\",\"McAllen\",\"McKinney\",\"McLean\",\"Medford\",\"Medford\",\"Melbourne\",\"Memphis\",\"Menifee\",\"Mentor\",\"Merced\",\"Meriden\",\"Meridian\",\"Mesa\",\"Mesquite\",\"Metairie\",\"Methuen Town\",\"Miami\",\"Miami Beach\",\"Miami Gardens\",\"Middletown\",\"Middletown\",\"Midland\",\"Midland\",\"Midwest City\",\"Milford\",\"Millcreek\",\"Milpitas\",\"Milwaukee\",\"Minneapolis\",\"Minnetonka\",\"Minot\",\"Miramar\",\"Mishawaka\",\"Mission\",\"Mission Viejo\",\"Missoula\",\"Missouri City\",\"Mobile\",\"Modesto\",\"Moline\",\"Monroe\",\"Montebello\",\"Monterey Park\",\"Montgomery\",\"Moore\",\"Moreno Valley\",\"Morgan Hill\",\"Mount Pleasant\",\"Mount Prospect\",\"Mount Vernon\",\"Mountain View\",\"Muncie\",\"Murfreesboro\",\"Murray\",\"Murrieta\",\"Nampa\",\"Napa\",\"Naperville\",\"Nashua\",\"Nashville-Davidson\",\"National City\",\"New Bedford\",\"New Braunfels\",\"New Britain\",\"New Brunswick\",\"New Haven\",\"New Orleans\",\"New Rochelle\",\"New York\",\"Newark\",\"Newark\",\"Newark\",\"Newport Beach\",\"Newport News\",\"Newton\",\"Niagara Falls\",\"Noblesville\",\"Norfolk\",\"Normal\",\"Norman\",\"North Bethesda\",\"North Charleston\",\"North Highlands\",\"North Las Vegas\",\"North Lauderdale\",\"North Little Rock\",\"North Miami\",\"North Miami Beach\",\"North Port\",\"North Richland Hills\",\"Norwalk\",\"Norwalk\",\"Novato\",\"Novi\",\"O'Fallon\",\"Oak Lawn\",\"Oak Park\",\"Oakland\",\"Oakland Park\",\"Ocala\",\"Oceanside\",\"Odessa\",\"Ogden\",\"Oklahoma City\",\"Olathe\",\"Olympia\",\"Omaha\",\"Ontario\",\"Orange\",\"Orem\",\"Orland Park\",\"Orlando\",\"Oro Valley\",\"Oshkosh\",\"Overland Park\",\"Owensboro\",\"Oxnard\",\"Palatine\",\"Palm Bay\",\"Palm Beach Gardens\",\"Palm Coast\",\"Palm Desert\",\"Palm Harbor\",\"Palm Springs\",\"Palmdale\",\"Palo Alto\",\"Paradise\",\"Paramount\",\"Parker\",\"Parma\",\"Pasadena\",\"Pasadena\",\"Pasco\",\"Passaic\",\"Paterson\",\"Pawtucket\",\"Peabody\",\"Pearl City\",\"Pearland\",\"Pembroke Pines\",\"Pensacola\",\"Peoria\",\"Peoria\",\"Perris\",\"Perth Amboy\",\"Petaluma\",\"Pflugerville\",\"Pharr\",\"Philadelphia\",\"Phoenix\",\"Pico Rivera\",\"Pine Bluff\",\"Pine Hills\",\"Pinellas Park\",\"Pittsburg\",\"Pittsburgh\",\"Pittsfield\",\"Placentia\",\"Plainfield\",\"Plainfield\",\"Plano\",\"Plantation\",\"Pleasanton\",\"Plymouth\",\"Pocatello\",\"Poinciana\",\"Pomona\",\"Pompano Beach\",\"Ponce\",\"Pontiac\",\"Port Arthur\",\"Port Charlotte\",\"Port Orange\",\"Port St. Lucie\",\"Portage\",\"Porterville\",\"Portland\",\"Portland\",\"Portsmouth\",\"Potomac\",\"Poway\",\"Providence\",\"Provo\",\"Pueblo\",\"Quincy\",\"Racine\",\"Raleigh\",\"Rancho Cordova\",\"Rancho Cucamonga\",\"Rancho Palos Verdes\",\"Rancho Santa Margarita\",\"Rapid City\",\"Reading\",\"Redding\",\"Redlands\",\"Redmond\",\"Redondo Beach\",\"Redwood City\",\"Reno\",\"Renton\",\"Reston\",\"Revere\",\"Rialto\",\"Richardson\",\"Richland\",\"Richmond\",\"Richmond\",\"Rio Rancho\",\"Riverside\",\"Riverton\",\"Riverview\",\"Roanoke\",\"Rochester\",\"Rochester\",\"Rochester Hills\",\"Rock Hill\",\"Rockford\",\"Rocklin\",\"Rockville\",\"Rockwall\",\"Rocky Mount\",\"Rogers\",\"Rohnert Park\",\"Rosemead\",\"Roseville\",\"Roseville\",\"Roswell\",\"Roswell\",\"Round Rock\",\"Rowland Heights\",\"Rowlett\",\"Royal Oak\",\"Sacramento\",\"Saginaw\",\"Salem\",\"Salem\",\"Salina\",\"Salinas\",\"Salt Lake City\",\"Sammamish\",\"San Angelo\",\"San Antonio\",\"San Bernardino\",\"San Bruno\",\"San Buenaventura (Ventura)\",\"San Clemente\",\"San Diego\",\"San Francisco\",\"San Jacinto\",\"San Jose\",\"San Juan\",\"San Leandro\",\"San Luis Obispo\",\"San Marcos\",\"San Marcos\",\"San Mateo\",\"San Rafael\",\"San Ramon\",\"San Tan Valley\",\"Sandy\",\"Sandy Springs\",\"Sanford\",\"Santa Ana\",\"Santa Barbara\",\"Santa Clara\",\"Santa Clarita\",\"Santa Cruz\",\"Santa Fe\",\"Santa Maria\",\"Santa Monica\",\"Santa Rosa\",\"Santee\",\"Sarasota\",\"Savannah\",\"Sayreville\",\"Schaumburg\",\"Schenectady\",\"Scottsdale\",\"Scranton\",\"Seattle\",\"Severn\",\"Shawnee\",\"Sheboygan\",\"Shoreline\",\"Shreveport\",\"Sierra Vista\",\"Silver Spring\",\"Simi Valley\",\"Sioux City\",\"Sioux Falls\",\"Skokie\",\"Smyrna\",\"Smyrna\",\"Somerville\",\"South Bend\",\"South Gate\",\"South Hill\",\"South Jordan\",\"South San Francisco\",\"South Valley\",\"South Whittier\",\"Southaven\",\"Southfield\",\"Sparks\",\"Spokane\",\"Spokane Valley\",\"Spring\",\"Spring Hill\",\"Spring Valley\",\"Springdale\",\"Springfield\",\"Springfield\",\"Springfield\",\"Springfield\",\"Springfield\",\"St. Charles\",\"St. Clair Shores\",\"St. Cloud\",\"St. Cloud\",\"St. George\",\"St. Joseph\",\"St. Louis\",\"St. Louis Park\",\"St. Paul\",\"St. Peters\",\"St. Petersburg\",\"Stamford\",\"State College\",\"Sterling Heights\",\"Stillwater\",\"Stockton\",\"Stratford\",\"Strongsville\",\"Suffolk\",\"Sugar Land\",\"Summerville\",\"Sunnyvale\",\"Sunrise\",\"Sunrise Manor\",\"Surprise\",\"Syracuse\",\"Tacoma\",\"Tallahassee\",\"Tamarac\",\"Tamiami\",\"Tampa\",\"Taunton\",\"Taylor\",\"Taylorsville\",\"Temecula\",\"Tempe\",\"Temple\",\"Terre Haute\",\"Texas City\",\"The Hammocks\",\"The Villages\",\"The Woodlands\",\"Thornton\",\"Thousand Oaks\",\"Tigard\",\"Tinley Park\",\"Titusville\",\"Toledo\",\"Toms River\",\"Tonawanda\",\"Topeka\",\"Torrance\",\"Town 'n' Country\",\"Towson\",\"Tracy\",\"Trenton\",\"Troy\",\"Troy\",\"Trujillo Alto\",\"Tuckahoe\",\"Tucson\",\"Tulare\",\"Tulsa\",\"Turlock\",\"Tuscaloosa\",\"Tustin\",\"Twin Falls\",\"Tyler\",\"Union City\",\"Union City\",\"University\",\"Upland\",\"Urbana\",\"Urbandale\",\"Utica\",\"Vacaville\",\"Valdosta\",\"Vallejo\",\"Vancouver\",\"Victoria\",\"Victorville\",\"Vineland\",\"Virginia Beach\",\"Visalia\",\"Vista\",\"Waco\",\"Waipahu\",\"Waldorf\",\"Walnut Creek\",\"Waltham\",\"Warner Robins\",\"Warren\",\"Warwick\",\"Washington\",\"Waterbury\",\"Waterloo\",\"Watsonville\",\"Waukegan\",\"Waukesha\",\"Wauwatosa\",\"Wellington\",\"Wesley Chapel\",\"West Allis\",\"West Babylon\",\"West Covina\",\"West Des Moines\",\"West Hartford\",\"West Haven\",\"West Jordan\",\"West Lafayette\",\"West New York\",\"West Palm Beach\",\"West Sacramento\",\"West Seneca\",\"West Valley City\",\"Westfield\",\"Westland\",\"Westminster\",\"Westminster\",\"Weston\",\"Weymouth Town\",\"Wheaton\",\"Wheaton\",\"White Plains\",\"Whittier\",\"Wichita\",\"Wichita Falls\",\"Wilmington\",\"Wilmington\",\"Wilson\",\"Winston-Salem\",\"Woodbury\",\"Woodland\",\"Worcester\",\"Wylie\",\"Wyoming\",\"Yakima\",\"Yonkers\",\"Yorba Linda\",\"York\",\"Youngstown\",\"Yuba City\",\"Yucaipa\",\"Yuma\"]},{}],43:[function(e,t,n){t.exports=[\"North\",\"East\",\"West\",\"South\",\"New\",\"Lake\",\"Port\"]},{}],44:[function(e,t,n){t.exports=[\"town\",\"ton\",\"land\",\"ville\",\"berg\",\"burgh\",\"borough\",\"bury\",\"view\",\"port\",\"mouth\",\"stad\",\"furt\",\"chester\",\"mouth\",\"fort\",\"haven\",\"side\",\"shire\"]},{}],45:[function(e,t,n){t.exports=[\"Afghanistan\",\"Albania\",\"Algeria\",\"American Samoa\",\"Andorra\",\"Angola\",\"Anguilla\",\"Antarctica (the territory South of 60 deg S)\",\"Antigua and Barbuda\",\"Argentina\",\"Armenia\",\"Aruba\",\"Australia\",\"Austria\",\"Azerbaijan\",\"Bahamas\",\"Bahrain\",\"Bangladesh\",\"Barbados\",\"Belarus\",\"Belgium\",\"Belize\",\"Benin\",\"Bermuda\",\"Bhutan\",\"Bolivia\",\"Bosnia and Herzegovina\",\"Botswana\",\"Bouvet Island (Bouvetoya)\",\"Brazil\",\"British Indian Ocean Territory (Chagos Archipelago)\",\"Brunei Darussalam\",\"Bulgaria\",\"Burkina Faso\",\"Burundi\",\"Cambodia\",\"Cameroon\",\"Canada\",\"Cape Verde\",\"Cayman Islands\",\"Central African Republic\",\"Chad\",\"Chile\",\"China\",\"Christmas Island\",\"Cocos (Keeling) Islands\",\"Colombia\",\"Comoros\",\"Congo\",\"Cook Islands\",\"Costa Rica\",\"Cote d'Ivoire\",\"Croatia\",\"Cuba\",\"Cyprus\",\"Czech Republic\",\"Denmark\",\"Djibouti\",\"Dominica\",\"Dominican Republic\",\"Ecuador\",\"Egypt\",\"El Salvador\",\"Equatorial Guinea\",\"Eritrea\",\"Estonia\",\"Ethiopia\",\"Faroe Islands\",\"Falkland Islands (Malvinas)\",\"Fiji\",\"Finland\",\"France\",\"French Guiana\",\"French Polynesia\",\"French Southern Territories\",\"Gabon\",\"Gambia\",\"Georgia\",\"Germany\",\"Ghana\",\"Gibraltar\",\"Greece\",\"Greenland\",\"Grenada\",\"Guadeloupe\",\"Guam\",\"Guatemala\",\"Guernsey\",\"Guinea\",\"Guinea-Bissau\",\"Guyana\",\"Haiti\",\"Heard Island and McDonald Islands\",\"Holy See (Vatican City State)\",\"Honduras\",\"Hong Kong\",\"Hungary\",\"Iceland\",\"India\",\"Indonesia\",\"Iran\",\"Iraq\",\"Ireland\",\"Isle of Man\",\"Israel\",\"Italy\",\"Jamaica\",\"Japan\",\"Jersey\",\"Jordan\",\"Kazakhstan\",\"Kenya\",\"Kiribati\",\"Democratic People's Republic of Korea\",\"Republic of Korea\",\"Kuwait\",\"Kyrgyz Republic\",\"Lao People's Democratic Republic\",\"Latvia\",\"Lebanon\",\"Lesotho\",\"Liberia\",\"Libyan Arab Jamahiriya\",\"Liechtenstein\",\"Lithuania\",\"Luxembourg\",\"Macao\",\"Macedonia\",\"Madagascar\",\"Malawi\",\"Malaysia\",\"Maldives\",\"Mali\",\"Malta\",\"Marshall Islands\",\"Martinique\",\"Mauritania\",\"Mauritius\",\"Mayotte\",\"Mexico\",\"Micronesia\",\"Moldova\",\"Monaco\",\"Mongolia\",\"Montenegro\",\"Montserrat\",\"Morocco\",\"Mozambique\",\"Myanmar\",\"Namibia\",\"Nauru\",\"Nepal\",\"Netherlands Antilles\",\"Netherlands\",\"New Caledonia\",\"New Zealand\",\"Nicaragua\",\"Niger\",\"Nigeria\",\"Niue\",\"Norfolk Island\",\"Northern Mariana Islands\",\"Norway\",\"Oman\",\"Pakistan\",\"Palau\",\"Palestinian Territory\",\"Panama\",\"Papua New Guinea\",\"Paraguay\",\"Peru\",\"Philippines\",\"Pitcairn Islands\",\"Poland\",\"Portugal\",\"Puerto Rico\",\"Qatar\",\"Reunion\",\"Romania\",\"Russian Federation\",\"Rwanda\",\"Saint Barthelemy\",\"Saint Helena\",\"Saint Kitts and Nevis\",\"Saint Lucia\",\"Saint Martin\",\"Saint Pierre and Miquelon\",\"Saint Vincent and the Grenadines\",\"Samoa\",\"San Marino\",\"Sao Tome and Principe\",\"Saudi Arabia\",\"Senegal\",\"Serbia\",\"Seychelles\",\"Sierra Leone\",\"Singapore\",\"Slovakia (Slovak Republic)\",\"Slovenia\",\"Solomon Islands\",\"Somalia\",\"South Africa\",\"South Georgia and the South Sandwich Islands\",\"Spain\",\"Sri Lanka\",\"Sudan\",\"Suriname\",\"Svalbard & Jan Mayen Islands\",\"Swaziland\",\"Sweden\",\"Switzerland\",\"Syrian Arab Republic\",\"Taiwan\",\"Tajikistan\",\"Tanzania\",\"Thailand\",\"Timor-Leste\",\"Togo\",\"Tokelau\",\"Tonga\",\"Trinidad and Tobago\",\"Tunisia\",\"Turkey\",\"Turkmenistan\",\"Turks and Caicos Islands\",\"Tuvalu\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\"United Kingdom\",\"United States of America\",\"United States Minor Outlying Islands\",\"Uruguay\",\"Uzbekistan\",\"Vanuatu\",\"Venezuela\",\"Vietnam\",\"Virgin Islands, British\",\"Virgin Islands, U.S.\",\"Wallis and Futuna\",\"Western Sahara\",\"Yemen\",\"Zambia\",\"Zimbabwe\"]},{}],46:[function(e,t,n){t.exports=[\"AD\",\"AE\",\"AF\",\"AG\",\"AI\",\"AL\",\"AM\",\"AO\",\"AQ\",\"AR\",\"AS\",\"AT\",\"AU\",\"AW\",\"AX\",\"AZ\",\"BA\",\"BB\",\"BD\",\"BE\",\"BF\",\"BG\",\"BH\",\"BI\",\"BJ\",\"BL\",\"BM\",\"BN\",\"BO\",\"BQ\",\"BR\",\"BS\",\"BT\",\"BV\",\"BW\",\"BY\",\"BZ\",\"CA\",\"CC\",\"CD\",\"CF\",\"CG\",\"CH\",\"CI\",\"CK\",\"CL\",\"CM\",\"CN\",\"CO\",\"CR\",\"CU\",\"CV\",\"CW\",\"CX\",\"CY\",\"CZ\",\"DE\",\"DJ\",\"DK\",\"DM\",\"DO\",\"DZ\",\"EC\",\"EE\",\"EG\",\"EH\",\"ER\",\"ES\",\"ET\",\"FI\",\"FJ\",\"FK\",\"FM\",\"FO\",\"FR\",\"GA\",\"GB\",\"GD\",\"GE\",\"GF\",\"GG\",\"GH\",\"GI\",\"GL\",\"GM\",\"GN\",\"GP\",\"GQ\",\"GR\",\"GS\",\"GT\",\"GU\",\"GW\",\"GY\",\"HK\",\"HM\",\"HN\",\"HR\",\"HT\",\"HU\",\"ID\",\"IE\",\"IL\",\"IM\",\"IN\",\"IO\",\"IQ\",\"IR\",\"IS\",\"IT\",\"JE\",\"JM\",\"JO\",\"JP\",\"KE\",\"KG\",\"KH\",\"KI\",\"KM\",\"KN\",\"KP\",\"KR\",\"KW\",\"KY\",\"KZ\",\"LA\",\"LB\",\"LC\",\"LI\",\"LK\",\"LR\",\"LS\",\"LT\",\"LU\",\"LV\",\"LY\",\"MA\",\"MC\",\"MD\",\"ME\",\"MF\",\"MG\",\"MH\",\"MK\",\"ML\",\"MM\",\"MN\",\"MO\",\"MP\",\"MQ\",\"MR\",\"MS\",\"MT\",\"MU\",\"MV\",\"MW\",\"MX\",\"MY\",\"MZ\",\"NA\",\"NC\",\"NE\",\"NF\",\"NG\",\"NI\",\"NL\",\"NO\",\"NP\",\"NR\",\"NU\",\"NZ\",\"OM\",\"PA\",\"PE\",\"PF\",\"PG\",\"PH\",\"PK\",\"PL\",\"PM\",\"PN\",\"PR\",\"PS\",\"PT\",\"PW\",\"PY\",\"QA\",\"RE\",\"RO\",\"RS\",\"RU\",\"RW\",\"SA\",\"SB\",\"SC\",\"SD\",\"SE\",\"SG\",\"SH\",\"SI\",\"SJ\",\"SK\",\"SL\",\"SM\",\"SN\",\"SO\",\"SR\",\"SS\",\"ST\",\"SV\",\"SX\",\"SY\",\"SZ\",\"TC\",\"TD\",\"TF\",\"TG\",\"TH\",\"TJ\",\"TK\",\"TL\",\"TM\",\"TN\",\"TO\",\"TR\",\"TT\",\"TV\",\"TW\",\"TZ\",\"UA\",\"UG\",\"UM\",\"US\",\"UY\",\"UZ\",\"VA\",\"VC\",\"VE\",\"VG\",\"VI\",\"VN\",\"VU\",\"WF\",\"WS\",\"YE\",\"YT\",\"ZA\",\"ZM\",\"ZW\"]},{}],47:[function(e,t,n){t.exports=[\"BGD\",\"BEL\",\"BFA\",\"BGR\",\"BIH\",\"BRB\",\"WLF\",\"BLM\",\"BMU\",\"BRN\",\"BOL\",\"BHR\",\"BDI\",\"BEN\",\"BTN\",\"JAM\",\"BVT\",\"BWA\",\"WSM\",\"BES\",\"BRA\",\"BHS\",\"JEY\",\"BLR\",\"BLZ\",\"RUS\",\"RWA\",\"SRB\",\"TLS\",\"REU\",\"TKM\",\"TJK\",\"ROU\",\"TKL\",\"GNB\",\"GUM\",\"GTM\",\"SGS\",\"GRC\",\"GNQ\",\"GLP\",\"JPN\",\"GUY\",\"GGY\",\"GUF\",\"GEO\",\"GRD\",\"GBR\",\"GAB\",\"SLV\",\"GIN\",\"GMB\",\"GRL\",\"GIB\",\"GHA\",\"OMN\",\"TUN\",\"JOR\",\"HRV\",\"HTI\",\"HUN\",\"HKG\",\"HND\",\"HMD\",\"VEN\",\"PRI\",\"PSE\",\"PLW\",\"PRT\",\"SJM\",\"PRY\",\"IRQ\",\"PAN\",\"PYF\",\"PNG\",\"PER\",\"PAK\",\"PHL\",\"PCN\",\"POL\",\"SPM\",\"ZMB\",\"ESH\",\"EST\",\"EGY\",\"ZAF\",\"ECU\",\"ITA\",\"VNM\",\"SLB\",\"ETH\",\"SOM\",\"ZWE\",\"SAU\",\"ESP\",\"ERI\",\"MNE\",\"MDA\",\"MDG\",\"MAF\",\"MAR\",\"MCO\",\"UZB\",\"MMR\",\"MLI\",\"MAC\",\"MNG\",\"MHL\",\"MKD\",\"MUS\",\"MLT\",\"MWI\",\"MDV\",\"MTQ\",\"MNP\",\"MSR\",\"MRT\",\"IMN\",\"UGA\",\"TZA\",\"MYS\",\"MEX\",\"ISR\",\"FRA\",\"IOT\",\"SHN\",\"FIN\",\"FJI\",\"FLK\",\"FSM\",\"FRO\",\"NIC\",\"NLD\",\"NOR\",\"NAM\",\"VUT\",\"NCL\",\"NER\",\"NFK\",\"NGA\",\"NZL\",\"NPL\",\"NRU\",\"NIU\",\"COK\",\"XKX\",\"CIV\",\"CHE\",\"COL\",\"CHN\",\"CMR\",\"CHL\",\"CCK\",\"CAN\",\"COG\",\"CAF\",\"COD\",\"CZE\",\"CYP\",\"CXR\",\"CRI\",\"CUW\",\"CPV\",\"CUB\",\"SWZ\",\"SYR\",\"SXM\",\"KGZ\",\"KEN\",\"SSD\",\"SUR\",\"KIR\",\"KHM\",\"KNA\",\"COM\",\"STP\",\"SVK\",\"KOR\",\"SVN\",\"PRK\",\"KWT\",\"SEN\",\"SMR\",\"SLE\",\"SYC\",\"KAZ\",\"CYM\",\"SGP\",\"SWE\",\"SDN\",\"DOM\",\"DMA\",\"DJI\",\"DNK\",\"VGB\",\"DEU\",\"YEM\",\"DZA\",\"USA\",\"URY\",\"MYT\",\"UMI\",\"LBN\",\"LCA\",\"LAO\",\"TUV\",\"TWN\",\"TTO\",\"TUR\",\"LKA\",\"LIE\",\"LVA\",\"TON\",\"LTU\",\"LUX\",\"LBR\",\"LSO\",\"THA\",\"ATF\",\"TGO\",\"TCD\",\"TCA\",\"LBY\",\"VAT\",\"VCT\",\"ARE\",\"AND\",\"ATG\",\"AFG\",\"AIA\",\"VIR\",\"ISL\",\"IRN\",\"ARM\",\"ALB\",\"AGO\",\"ATA\",\"ASM\",\"ARG\",\"AUS\",\"AUT\",\"ABW\",\"IND\",\"ALA\",\"AZE\",\"IRL\",\"IDN\",\"UKR\",\"QAT\",\"MOZ\"]},{}],48:[function(e,t,n){t.exports=[\"Avon\",\"Bedfordshire\",\"Berkshire\",\"Borders\",\"Buckinghamshire\",\"Cambridgeshire\"]},{}],49:[function(e,t,n){t.exports=[\"United States of America\"]},{}],50:[function(e,t,n){t.exports=[\"North\",\"East\",\"South\",\"West\",\"Northeast\",\"Northwest\",\"Southeast\",\"Southwest\"]},{}],51:[function(e,t,n){t.exports=[\"N\",\"E\",\"S\",\"W\",\"NE\",\"NW\",\"SE\",\"SW\"]},{}],52:[function(e,t,n){var a={};t.exports=a,a.city_prefix=e(\"./city_prefix\"),a.city_suffix=e(\"./city_suffix\"),a.city_name=e(\"./city_name\"),a.county=e(\"./county\"),a.country=e(\"./country\"),a.country_code=e(\"./country_code\"),a.country_code_alpha_3=e(\"./country_code_alpha_3\"),a.building_number=e(\"./building_number\"),a.street_suffix=e(\"./street_suffix\"),a.secondary_address=e(\"./secondary_address\"),a.postcode=e(\"./postcode\"),a.postcode_by_state=e(\"./postcode_by_state\"),a.state=e(\"./state\"),a.state_abbr=e(\"./state_abbr\"),a.time_zone=e(\"./time_zone\"),a.city=e(\"./city\"),a.street_name=e(\"./street_name\"),a.street_address=e(\"./street_address\"),a.default_country=e(\"./default_country\"),a.direction=e(\"./direction\"),a.direction_abbr=e(\"./direction_abbr\")},{\"./building_number\":40,\"./city\":41,\"./city_name\":42,\"./city_prefix\":43,\"./city_suffix\":44,\"./country\":45,\"./country_code\":46,\"./country_code_alpha_3\":47,\"./county\":48,\"./default_country\":49,\"./direction\":50,\"./direction_abbr\":51,\"./postcode\":53,\"./postcode_by_state\":54,\"./secondary_address\":55,\"./state\":56,\"./state_abbr\":57,\"./street_address\":58,\"./street_name\":59,\"./street_suffix\":60,\"./time_zone\":61}],53:[function(e,t,n){t.exports=[\"#####\",\"#####-####\"]},{}],54:[function(e,t,n){arguments[4][53][0].apply(n,arguments)},{dup:53}],55:[function(e,t,n){t.exports=[\"Apt. ###\",\"Suite ###\"]},{}],56:[function(e,t,n){t.exports=[\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"]},{}],57:[function(e,t,n){t.exports=[\"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"FL\",\"GA\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"]},{}],58:[function(e,t,n){t.exports=[\"#{building_number} #{street_name}\"]},{}],59:[function(e,t,n){t.exports=[\"#{Name.first_name} #{street_suffix}\",\"#{Name.last_name} #{street_suffix}\"]},{}],60:[function(e,t,n){t.exports=[\"Alley\",\"Avenue\",\"Branch\",\"Bridge\",\"Brook\",\"Brooks\",\"Burg\",\"Burgs\",\"Bypass\",\"Camp\",\"Canyon\",\"Cape\",\"Causeway\",\"Center\",\"Centers\",\"Circle\",\"Circles\",\"Cliff\",\"Cliffs\",\"Club\",\"Common\",\"Corner\",\"Corners\",\"Course\",\"Court\",\"Courts\",\"Cove\",\"Coves\",\"Creek\",\"Crescent\",\"Crest\",\"Crossing\",\"Crossroad\",\"Curve\",\"Dale\",\"Dam\",\"Divide\",\"Drive\",\"Drive\",\"Drives\",\"Estate\",\"Estates\",\"Expressway\",\"Extension\",\"Extensions\",\"Fall\",\"Falls\",\"Ferry\",\"Field\",\"Fields\",\"Flat\",\"Flats\",\"Ford\",\"Fords\",\"Forest\",\"Forge\",\"Forges\",\"Fork\",\"Forks\",\"Fort\",\"Freeway\",\"Garden\",\"Gardens\",\"Gateway\",\"Glen\",\"Glens\",\"Green\",\"Greens\",\"Grove\",\"Groves\",\"Harbor\",\"Harbors\",\"Haven\",\"Heights\",\"Highway\",\"Hill\",\"Hills\",\"Hollow\",\"Inlet\",\"Inlet\",\"Island\",\"Island\",\"Islands\",\"Islands\",\"Isle\",\"Isle\",\"Junction\",\"Junctions\",\"Key\",\"Keys\",\"Knoll\",\"Knolls\",\"Lake\",\"Lakes\",\"Land\",\"Landing\",\"Lane\",\"Light\",\"Lights\",\"Loaf\",\"Lock\",\"Locks\",\"Locks\",\"Lodge\",\"Lodge\",\"Loop\",\"Mall\",\"Manor\",\"Manors\",\"Meadow\",\"Meadows\",\"Mews\",\"Mill\",\"Mills\",\"Mission\",\"Mission\",\"Motorway\",\"Mount\",\"Mountain\",\"Mountain\",\"Mountains\",\"Mountains\",\"Neck\",\"Orchard\",\"Oval\",\"Overpass\",\"Park\",\"Parks\",\"Parkway\",\"Parkways\",\"Pass\",\"Passage\",\"Path\",\"Pike\",\"Pine\",\"Pines\",\"Place\",\"Plain\",\"Plains\",\"Plains\",\"Plaza\",\"Plaza\",\"Point\",\"Points\",\"Port\",\"Port\",\"Ports\",\"Ports\",\"Prairie\",\"Prairie\",\"Radial\",\"Ramp\",\"Ranch\",\"Rapid\",\"Rapids\",\"Rest\",\"Ridge\",\"Ridges\",\"River\",\"Road\",\"Road\",\"Roads\",\"Roads\",\"Route\",\"Row\",\"Rue\",\"Run\",\"Shoal\",\"Shoals\",\"Shore\",\"Shores\",\"Skyway\",\"Spring\",\"Springs\",\"Springs\",\"Spur\",\"Spurs\",\"Square\",\"Square\",\"Squares\",\"Squares\",\"Station\",\"Station\",\"Stravenue\",\"Stravenue\",\"Stream\",\"Stream\",\"Street\",\"Street\",\"Streets\",\"Summit\",\"Summit\",\"Terrace\",\"Throughway\",\"Trace\",\"Track\",\"Trafficway\",\"Trail\",\"Trail\",\"Tunnel\",\"Tunnel\",\"Turnpike\",\"Turnpike\",\"Underpass\",\"Union\",\"Unions\",\"Valley\",\"Valleys\",\"Via\",\"Viaduct\",\"View\",\"Views\",\"Village\",\"Village\",\"Villages\",\"Ville\",\"Vista\",\"Vista\",\"Walk\",\"Walks\",\"Wall\",\"Way\",\"Ways\",\"Well\",\"Wells\"]},{}],61:[function(e,t,n){t.exports=[\"Pacific/Midway\",\"Pacific/Pago_Pago\",\"Pacific/Honolulu\",\"America/Juneau\",\"America/Los_Angeles\",\"America/Tijuana\",\"America/Denver\",\"America/Phoenix\",\"America/Chihuahua\",\"America/Mazatlan\",\"America/Chicago\",\"America/Regina\",\"America/Mexico_City\",\"America/Mexico_City\",\"America/Monterrey\",\"America/Guatemala\",\"America/New_York\",\"America/Indiana/Indianapolis\",\"America/Bogota\",\"America/Lima\",\"America/Lima\",\"America/Halifax\",\"America/Caracas\",\"America/La_Paz\",\"America/Santiago\",\"America/St_Johns\",\"America/Sao_Paulo\",\"America/Argentina/Buenos_Aires\",\"America/Guyana\",\"America/Godthab\",\"Atlantic/South_Georgia\",\"Atlantic/Azores\",\"Atlantic/Cape_Verde\",\"Europe/Dublin\",\"Europe/London\",\"Europe/Lisbon\",\"Europe/London\",\"Africa/Casablanca\",\"Africa/Monrovia\",\"Etc/UTC\",\"Europe/Belgrade\",\"Europe/Bratislava\",\"Europe/Budapest\",\"Europe/Ljubljana\",\"Europe/Prague\",\"Europe/Sarajevo\",\"Europe/Skopje\",\"Europe/Warsaw\",\"Europe/Zagreb\",\"Europe/Brussels\",\"Europe/Copenhagen\",\"Europe/Madrid\",\"Europe/Paris\",\"Europe/Amsterdam\",\"Europe/Berlin\",\"Europe/Berlin\",\"Europe/Rome\",\"Europe/Stockholm\",\"Europe/Vienna\",\"Africa/Algiers\",\"Europe/Bucharest\",\"Africa/Cairo\",\"Europe/Helsinki\",\"Europe/Kiev\",\"Europe/Riga\",\"Europe/Sofia\",\"Europe/Tallinn\",\"Europe/Vilnius\",\"Europe/Athens\",\"Europe/Istanbul\",\"Europe/Minsk\",\"Asia/Jerusalem\",\"Africa/Harare\",\"Africa/Johannesburg\",\"Europe/Moscow\",\"Europe/Moscow\",\"Europe/Moscow\",\"Asia/Kuwait\",\"Asia/Riyadh\",\"Africa/Nairobi\",\"Asia/Baghdad\",\"Asia/Tehran\",\"Asia/Muscat\",\"Asia/Muscat\",\"Asia/Baku\",\"Asia/Tbilisi\",\"Asia/Yerevan\",\"Asia/Kabul\",\"Asia/Yekaterinburg\",\"Asia/Karachi\",\"Asia/Karachi\",\"Asia/Tashkent\",\"Asia/Kolkata\",\"Asia/Kolkata\",\"Asia/Kolkata\",\"Asia/Kolkata\",\"Asia/Kathmandu\",\"Asia/Dhaka\",\"Asia/Dhaka\",\"Asia/Colombo\",\"Asia/Almaty\",\"Asia/Novosibirsk\",\"Asia/Rangoon\",\"Asia/Bangkok\",\"Asia/Bangkok\",\"Asia/Jakarta\",\"Asia/Krasnoyarsk\",\"Asia/Shanghai\",\"Asia/Chongqing\",\"Asia/Hong_Kong\",\"Asia/Urumqi\",\"Asia/Kuala_Lumpur\",\"Asia/Singapore\",\"Asia/Taipei\",\"Australia/Perth\",\"Asia/Irkutsk\",\"Asia/Ulaanbaatar\",\"Asia/Seoul\",\"Asia/Tokyo\",\"Asia/Tokyo\",\"Asia/Tokyo\",\"Asia/Yakutsk\",\"Australia/Darwin\",\"Australia/Adelaide\",\"Australia/Melbourne\",\"Australia/Melbourne\",\"Australia/Sydney\",\"Australia/Brisbane\",\"Australia/Hobart\",\"Asia/Vladivostok\",\"Pacific/Guam\",\"Pacific/Port_Moresby\",\"Asia/Magadan\",\"Asia/Magadan\",\"Pacific/Noumea\",\"Pacific/Fiji\",\"Asia/Kamchatka\",\"Pacific/Majuro\",\"Pacific/Auckland\",\"Pacific/Auckland\",\"Pacific/Tongatapu\",\"Pacific/Fakaofo\",\"Pacific/Apia\"]},{}],62:[function(e,t,n){t.exports=[\"Giant panda\",\"Spectacled bear\",\"Sun bear\",\"Sloth bear\",\"American black bear\",\"Asian black bear\",\"Brown bear\",\"Polar bear\"]},{}],63:[function(e,t,n){t.exports=[\"Red-throated Loon\",\"Arctic Loon\",\"Pacific Loon\",\"Common Loon\",\"Yellow-billed Loon\",\"Least Grebe\",\"Pied-billed Grebe\",\"Horned Grebe\",\"Red-necked Grebe\",\"Eared Grebe\",\"Western Grebe\",\"Clark's Grebe\",\"Yellow-nosed Albatross\",\"Shy Albatross\",\"Black-browed Albatross\",\"Wandering Albatross\",\"Laysan Albatross\",\"Black-footed Albatross\",\"Short-tailed Albatross\",\"Northern Fulmar\",\"Herald Petrel\",\"Murphy's Petrel\",\"Mottled Petrel\",\"Black-capped Petrel\",\"Cook's Petrel\",\"Stejneger's Petrel\",\"White-chinned Petrel\",\"Streaked Shearwater\",\"Cory's Shearwater\",\"Pink-footed Shearwater\",\"Flesh-footed Shearwater\",\"Greater Shearwater\",\"Wedge-tailed Shearwater\",\"Buller's Shearwater\",\"Sooty Shearwater\",\"Short-tailed Shearwater\",\"Manx Shearwater\",\"Black-vented Shearwater\",\"Audubon's Shearwater\",\"Little Shearwater\",\"Wilson's Storm-Petrel\",\"White-faced Storm-Petrel\",\"European Storm-Petrel\",\"Fork-tailed Storm-Petrel\",\"Leach's Storm-Petrel\",\"Ashy Storm-Petrel\",\"Band-rumped Storm-Petrel\",\"Wedge-rumped Storm-Petrel\",\"Black Storm-Petrel\",\"Least Storm-Petrel\",\"White-tailed Tropicbird\",\"Red-billed Tropicbird\",\"Red-tailed Tropicbird\",\"Masked Booby\",\"Blue-footed Booby\",\"Brown Booby\",\"Red-footed Booby\",\"Northern Gannet\",\"American White Pelican\",\"Brown Pelican\",\"Brandt's Cormorant\",\"Neotropic Cormorant\",\"Double-crested Cormorant\",\"Great Cormorant\",\"Red-faced Cormorant\",\"Pelagic Cormorant\",\"Anhinga\",\"Magnificent Frigatebird\",\"Great Frigatebird\",\"Lesser Frigatebird\",\"American Bittern\",\"Yellow Bittern\",\"Least Bittern\",\"Great Blue Heron\",\"Great Egret\",\"Chinese Egret\",\"Little Egret\",\"Western Reef-Heron\",\"Snowy Egret\",\"Little Blue Heron\",\"Tricolored Heron\",\"Reddish Egret\",\"Cattle Egret\",\"Green Heron\",\"Black-crowned Night-Heron\",\"Yellow-crowned Night-Heron\",\"White Ibis\",\"Scarlet Ibis\",\"Glossy Ibis\",\"White-faced Ibis\",\"Roseate Spoonbill\",\"Jabiru\",\"Wood Stork\",\"Black Vulture\",\"Turkey Vulture\",\"California Condor\",\"Greater Flamingo\",\"Black-bellied Whistling-Duck\",\"Fulvous Whistling-Duck\",\"Bean Goose\",\"Pink-footed Goose\",\"Greater White-fronted Goose\",\"Lesser White-fronted Goose\",\"Emperor Goose\",\"Snow Goose\",\"Ross's Goose\",\"Canada Goose\",\"Brant\",\"Barnacle Goose\",\"Mute Swan\",\"Trumpeter Swan\",\"Tundra Swan\",\"Whooper Swan\",\"Muscovy Duck\",\"Wood Duck\",\"Gadwall\",\"Falcated Duck\",\"Eurasian Wigeon\",\"American Wigeon\",\"American Black Duck\",\"Mallard\",\"Mottled Duck\",\"Spot-billed Duck\",\"Blue-winged Teal\",\"Cinnamon Teal\",\"Northern Shoveler\",\"White-cheeked Pintail\",\"Northern Pintail\",\"Garganey\",\"Baikal Teal\",\"Green-winged Teal\",\"Canvasback\",\"Redhead\",\"Common Pochard\",\"Ring-necked Duck\",\"Tufted Duck\",\"Greater Scaup\",\"Lesser Scaup\",\"Steller's Eider\",\"Spectacled Eider\",\"King Eider\",\"Common Eider\",\"Harlequin Duck\",\"Labrador Duck\",\"Surf Scoter\",\"White-winged Scoter\",\"Black Scoter\",\"Oldsquaw\",\"Bufflehead\",\"Common Goldeneye\",\"Barrow's Goldeneye\",\"Smew\",\"Hooded Merganser\",\"Common Merganser\",\"Red-breasted Merganser\",\"Masked Duck\",\"Ruddy Duck\",\"Osprey\",\"Hook-billed Kite\",\"Swallow-tailed Kite\",\"White-tailed Kite\",\"Snail Kite\",\"Mississippi Kite\",\"Bald Eagle\",\"White-tailed Eagle\",\"Steller's Sea-Eagle\",\"Northern Harrier\",\"Sharp-shinned Hawk\",\"Cooper's Hawk\",\"Northern Goshawk\",\"Crane Hawk\",\"Gray Hawk\",\"Common Black-Hawk\",\"Harris's Hawk\",\"Roadside Hawk\",\"Red-shouldered Hawk\",\"Broad-winged Hawk\",\"Short-tailed Hawk\",\"Swainson's Hawk\",\"White-tailed Hawk\",\"Zone-tailed Hawk\",\"Red-tailed Hawk\",\"Ferruginous Hawk\",\"Rough-legged Hawk\",\"Golden Eagle\",\"Collared Forest-Falcon\",\"Crested Caracara\",\"Eurasian Kestrel\",\"American Kestrel\",\"Merlin\",\"Eurasian Hobby\",\"Aplomado Falcon\",\"Gyrfalcon\",\"Peregrine Falcon\",\"Prairie Falcon\",\"Plain Chachalaca\",\"Chukar\",\"Himalayan Snowcock\",\"Gray Partridge\",\"Ring-necked Pheasant\",\"Ruffed Grouse\",\"Sage Grouse\",\"Spruce Grouse\",\"Willow Ptarmigan\",\"Rock Ptarmigan\",\"White-tailed Ptarmigan\",\"Blue Grouse\",\"Sharp-tailed Grouse\",\"Greater Prairie-chicken\",\"Lesser Prairie-chicken\",\"Wild Turkey\",\"Mountain Quail\",\"Scaled Quail\",\"California Quail\",\"Gambel's Quail\",\"Northern Bobwhite\",\"Montezuma Quail\",\"Yellow Rail\",\"Black Rail\",\"Corn Crake\",\"Clapper Rail\",\"King Rail\",\"Virginia Rail\",\"Sora\",\"Paint-billed Crake\",\"Spotted Rail\",\"Purple Gallinule\",\"Azure Gallinule\",\"Common Moorhen\",\"Eurasian Coot\",\"American Coot\",\"Limpkin\",\"Sandhill Crane\",\"Common Crane\",\"Whooping Crane\",\"Double-striped Thick-knee\",\"Northern Lapwing\",\"Black-bellied Plover\",\"European Golden-Plover\",\"American Golden-Plover\",\"Pacific Golden-Plover\",\"Mongolian Plover\",\"Collared Plover\",\"Snowy Plover\",\"Wilson's Plover\",\"Common Ringed Plover\",\"Semipalmated Plover\",\"Piping Plover\",\"Little Ringed Plover\",\"Killdeer\",\"Mountain Plover\",\"Eurasian Dotterel\",\"Eurasian Oystercatcher\",\"American Oystercatcher\",\"Black Oystercatcher\",\"Black-winged Stilt\",\"Black-necked Stilt\",\"American Avocet\",\"Northern Jacana\",\"Common Greenshank\",\"Greater Yellowlegs\",\"Lesser Yellowlegs\",\"Marsh Sandpiper\",\"Spotted Redshank\",\"Wood Sandpiper\",\"Green Sandpiper\",\"Solitary Sandpiper\",\"Willet\",\"Wandering Tattler\",\"Gray-tailed Tattler\",\"Common Sandpiper\",\"Spotted Sandpiper\",\"Terek Sandpiper\",\"Upland Sandpiper\",\"Little Curlew\",\"Eskimo Curlew\",\"Whimbrel\",\"Bristle-thighed Curlew\",\"Far Eastern Curlew\",\"Slender-billed Curlew\",\"Eurasian Curlew\",\"Long-billed Curlew\",\"Black-tailed Godwit\",\"Hudsonian Godwit\",\"Bar-tailed Godwit\",\"Marbled Godwit\",\"Ruddy Turnstone\",\"Black Turnstone\",\"Surfbird\",\"Great Knot\",\"Red Knot\",\"Sanderling\",\"Semipalmated Sandpiper\",\"Western Sandpiper\",\"Red-necked Stint\",\"Little Stint\",\"Temminck's Stint\",\"Long-toed Stint\",\"Least Sandpiper\",\"White-rumped Sandpiper\",\"Baird's Sandpiper\",\"Pectoral Sandpiper\",\"Sharp-tailed Sandpiper\",\"Purple Sandpiper\",\"Rock Sandpiper\",\"Dunlin\",\"Curlew Sandpiper\",\"Stilt Sandpiper\",\"Spoonbill Sandpiper\",\"Broad-billed Sandpiper\",\"Buff-breasted Sandpiper\",\"Ruff\",\"Short-billed Dowitcher\",\"Long-billed Dowitcher\",\"Jack Snipe\",\"Common Snipe\",\"Pin-tailed Snipe\",\"Eurasian Woodcock\",\"American Woodcock\",\"Wilson's Phalarope\",\"Red-necked Phalarope\",\"Red Phalarope\",\"Oriental Pratincole\",\"Great Skua\",\"South Polar Skua\",\"Pomarine Jaeger\",\"Parasitic Jaeger\",\"Long-tailed Jaeger\",\"Laughing Gull\",\"Franklin's Gull\",\"Little Gull\",\"Black-headed Gull\",\"Bonaparte's Gull\",\"Heermann's Gull\",\"Band-tailed Gull\",\"Black-tailed Gull\",\"Mew Gull\",\"Ring-billed Gull\",\"California Gull\",\"Herring Gull\",\"Yellow-legged Gull\",\"Thayer's Gull\",\"Iceland Gull\",\"Lesser Black-backed Gull\",\"Slaty-backed Gull\",\"Yellow-footed Gull\",\"Western Gull\",\"Glaucous-winged Gull\",\"Glaucous Gull\",\"Great Black-backed Gull\",\"Sabine's Gull\",\"Black-legged Kittiwake\",\"Red-legged Kittiwake\",\"Ross's Gull\",\"Ivory Gull\",\"Gull-billed Tern\",\"Caspian Tern\",\"Royal Tern\",\"Elegant Tern\",\"Sandwich Tern\",\"Roseate Tern\",\"Common Tern\",\"Arctic Tern\",\"Forster's Tern\",\"Least Tern\",\"Aleutian Tern\",\"Bridled Tern\",\"Sooty Tern\",\"Large-billed Tern\",\"White-winged Tern\",\"Whiskered Tern\",\"Black Tern\",\"Brown Noddy\",\"Black Noddy\",\"Black Skimmer\",\"Dovekie\",\"Common Murre\",\"Thick-billed Murre\",\"Razorbill\",\"Great Auk\",\"Black Guillemot\",\"Pigeon Guillemot\",\"Long-billed Murrelet\",\"Marbled Murrelet\",\"Kittlitz's Murrelet\",\"Xantus's Murrelet\",\"Craveri's Murrelet\",\"Ancient Murrelet\",\"Cassin's Auklet\",\"Parakeet Auklet\",\"Least Auklet\",\"Whiskered Auklet\",\"Crested Auklet\",\"Rhinoceros Auklet\",\"Atlantic Puffin\",\"Horned Puffin\",\"Tufted Puffin\",\"Rock Dove\",\"Scaly-naped Pigeon\",\"White-crowned Pigeon\",\"Red-billed Pigeon\",\"Band-tailed Pigeon\",\"Oriental Turtle-Dove\",\"European Turtle-Dove\",\"Eurasian Collared-Dove\",\"Spotted Dove\",\"White-winged Dove\",\"Zenaida Dove\",\"Mourning Dove\",\"Passenger Pigeon\",\"Inca Dove\",\"Common Ground-Dove\",\"Ruddy Ground-Dove\",\"White-tipped Dove\",\"Key West Quail-Dove\",\"Ruddy Quail-Dove\",\"Budgerigar\",\"Monk Parakeet\",\"Carolina Parakeet\",\"Thick-billed Parrot\",\"White-winged Parakeet\",\"Red-crowned Parrot\",\"Common Cuckoo\",\"Oriental Cuckoo\",\"Black-billed Cuckoo\",\"Yellow-billed Cuckoo\",\"Mangrove Cuckoo\",\"Greater Roadrunner\",\"Smooth-billed Ani\",\"Groove-billed Ani\",\"Barn Owl\",\"Flammulated Owl\",\"Oriental Scops-Owl\",\"Western Screech-Owl\",\"Eastern Screech-Owl\",\"Whiskered Screech-Owl\",\"Great Horned Owl\",\"Snowy Owl\",\"Northern Hawk Owl\",\"Northern Pygmy-Owl\",\"Ferruginous Pygmy-Owl\",\"Elf Owl\",\"Burrowing Owl\",\"Mottled Owl\",\"Spotted Owl\",\"Barred Owl\",\"Great Gray Owl\",\"Long-eared Owl\",\"Short-eared Owl\",\"Boreal Owl\",\"Northern Saw-whet Owl\",\"Lesser Nighthawk\",\"Common Nighthawk\",\"Antillean Nighthawk\",\"Common Pauraque\",\"Common Poorwill\",\"Chuck-will's-widow\",\"Buff-collared Nightjar\",\"Whip-poor-will\",\"Jungle Nightjar\",\"Black Swift\",\"White-collared Swift\",\"Chimney Swift\",\"Vaux's Swift\",\"White-throated Needletail\",\"Common Swift\",\"Fork-tailed Swift\",\"White-throated Swift\",\"Antillean Palm Swift\",\"Green Violet-ear\",\"Green-breasted Mango\",\"Broad-billed Hummingbird\",\"White-eared Hummingbird\",\"Xantus's Hummingbird\",\"Berylline Hummingbird\",\"Buff-bellied Hummingbird\",\"Cinnamon Hummingbird\",\"Violet-crowned Hummingbird\",\"Blue-throated Hummingbird\",\"Magnificent Hummingbird\",\"Plain-capped Starthroat\",\"Bahama Woodstar\",\"Lucifer Hummingbird\",\"Ruby-throated Hummingbird\",\"Black-chinned Hummingbird\",\"Anna's Hummingbird\",\"Costa's Hummingbird\",\"Calliope Hummingbird\",\"Bumblebee Hummingbird\",\"Broad-tailed Hummingbird\",\"Rufous Hummingbird\",\"Allen's Hummingbird\",\"Elegant Trogon\",\"Eared Trogon\",\"Hoopoe\",\"Ringed Kingfisher\",\"Belted Kingfisher\",\"Green Kingfisher\",\"Eurasian Wryneck\",\"Lewis's Woodpecker\",\"Red-headed Woodpecker\",\"Acorn Woodpecker\",\"Gila Woodpecker\",\"Golden-fronted Woodpecker\",\"Red-bellied Woodpecker\",\"Williamson's Sapsucker\",\"Yellow-bellied Sapsucker\",\"Red-naped Sapsucker\",\"Red-breasted Sapsucker\",\"Great Spotted Woodpecker\",\"Ladder-backed Woodpecker\",\"Nuttall's Woodpecker\",\"Downy Woodpecker\",\"Hairy Woodpecker\",\"Strickland's Woodpecker\",\"Red-cockaded Woodpecker\",\"White-headed Woodpecker\",\"Three-toed Woodpecker\",\"Black-backed Woodpecker\",\"Northern Flicker\",\"Gilded Flicker\",\"Pileated Woodpecker\",\"Ivory-billed Woodpecker\",\"Northern Beardless-Tyrannulet\",\"Greenish Elaenia\",\"Caribbean Elaenia\",\"Tufted Flycatcher\",\"Olive-sided Flycatcher\",\"Greater Pewee\",\"Western Wood-Pewee\",\"Eastern Wood-Pewee\",\"Yellow-bellied Flycatcher\",\"Acadian Flycatcher\",\"Alder Flycatcher\",\"Willow Flycatcher\",\"Least Flycatcher\",\"Hammond's Flycatcher\",\"Dusky Flycatcher\",\"Gray Flycatcher\",\"Pacific-slope Flycatcher\",\"Cordilleran Flycatcher\",\"Buff-breasted Flycatcher\",\"Black Phoebe\",\"Eastern Phoebe\",\"Say's Phoebe\",\"Vermilion Flycatcher\",\"Dusky-capped Flycatcher\",\"Ash-throated Flycatcher\",\"Nutting's Flycatcher\",\"Great Crested Flycatcher\",\"Brown-crested Flycatcher\",\"La Sagra's Flycatcher\",\"Great Kiskadee\",\"Sulphur-bellied Flycatcher\",\"Variegated Flycatcher\",\"Tropical Kingbird\",\"Couch's Kingbird\",\"Cassin's Kingbird\",\"Thick-billed Kingbird\",\"Western Kingbird\",\"Eastern Kingbird\",\"Gray Kingbird\",\"Loggerhead Kingbird\",\"Scissor-tailed Flycatcher\",\"Fork-tailed Flycatcher\",\"Rose-throated Becard\",\"Masked Tityra\",\"Brown Shrike\",\"Loggerhead Shrike\",\"Northern Shrike\",\"White-eyed Vireo\",\"Thick-billed Vireo\",\"Bell's Vireo\",\"Black-capped Vireo\",\"Gray Vireo\",\"Yellow-throated Vireo\",\"Plumbeous Vireo\",\"Cassin's Vireo\",\"Blue-headed Vireo\",\"Hutton's Vireo\",\"Warbling Vireo\",\"Philadelphia Vireo\",\"Red-eyed Vireo\",\"Yellow-green Vireo\",\"Black-whiskered Vireo\",\"Yucatan Vireo\",\"Gray Jay\",\"Steller's Jay\",\"Blue Jay\",\"Green Jay\",\"Brown Jay\",\"Florida Scrub-Jay\",\"Island Scrub-Jay\",\"Western Scrub-Jay\",\"Mexican Jay\",\"Pinyon Jay\",\"Clark's Nutcracker\",\"Black-billed Magpie\",\"Yellow-billed Magpie\",\"Eurasian Jackdaw\",\"American Crow\",\"Northwestern Crow\",\"Tamaulipas Crow\",\"Fish Crow\",\"Chihuahuan Raven\",\"Common Raven\",\"Sky Lark\",\"Horned Lark\",\"Purple Martin\",\"Cuban Martin\",\"Gray-breasted Martin\",\"Southern Martin\",\"Brown-chested Martin\",\"Tree Swallow\",\"Violet-green Swallow\",\"Bahama Swallow\",\"Northern Rough-winged Swallow\",\"Bank Swallow\",\"Cliff Swallow\",\"Cave Swallow\",\"Barn Swallow\",\"Common House-Martin\",\"Carolina Chickadee\",\"Black-capped Chickadee\",\"Mountain Chickadee\",\"Mexican Chickadee\",\"Chestnut-backed Chickadee\",\"Boreal Chickadee\",\"Gray-headed Chickadee\",\"Bridled Titmouse\",\"Oak Titmouse\",\"Juniper Titmouse\",\"Tufted Titmouse\",\"Verdin\",\"Bushtit\",\"Red-breasted Nuthatch\",\"White-breasted Nuthatch\",\"Pygmy Nuthatch\",\"Brown-headed Nuthatch\",\"Brown Creeper\",\"Cactus Wren\",\"Rock Wren\",\"Canyon Wren\",\"Carolina Wren\",\"Bewick's Wren\",\"House Wren\",\"Winter Wren\",\"Sedge Wren\",\"Marsh Wren\",\"American Dipper\",\"Red-whiskered Bulbul\",\"Golden-crowned Kinglet\",\"Ruby-crowned Kinglet\",\"Middendorff's Grasshopper-Warbler\",\"Lanceolated Warbler\",\"Wood Warbler\",\"Dusky Warbler\",\"Arctic Warbler\",\"Blue-gray Gnatcatcher\",\"California Gnatcatcher\",\"Black-tailed Gnatcatcher\",\"Black-capped Gnatcatcher\",\"Narcissus Flycatcher\",\"Mugimaki Flycatcher\",\"Red-breasted Flycatcher\",\"Siberian Flycatcher\",\"Gray-spotted Flycatcher\",\"Asian Brown Flycatcher\",\"Siberian Rubythroat\",\"Bluethroat\",\"Siberian Blue Robin\",\"Red-flanked Bluetail\",\"Northern Wheatear\",\"Stonechat\",\"Eastern Bluebird\",\"Western Bluebird\",\"Mountain Bluebird\",\"Townsend's Solitaire\",\"Veery\",\"Gray-cheeked Thrush\",\"Bicknell's Thrush\",\"Swainson's Thrush\",\"Hermit Thrush\",\"Wood Thrush\",\"Eurasian Blackbird\",\"Eyebrowed Thrush\",\"Dusky Thrush\",\"Fieldfare\",\"Redwing\",\"Clay-colored Robin\",\"White-throated Robin\",\"Rufous-backed Robin\",\"American Robin\",\"Varied Thrush\",\"Aztec Thrush\",\"Wrentit\",\"Gray Catbird\",\"Black Catbird\",\"Northern Mockingbird\",\"Bahama Mockingbird\",\"Sage Thrasher\",\"Brown Thrasher\",\"Long-billed Thrasher\",\"Bendire's Thrasher\",\"Curve-billed Thrasher\",\"California Thrasher\",\"Crissal Thrasher\",\"Le Conte's Thrasher\",\"Blue Mockingbird\",\"European Starling\",\"Crested Myna\",\"Siberian Accentor\",\"Yellow Wagtail\",\"Citrine Wagtail\",\"Gray Wagtail\",\"White Wagtail\",\"Black-backed Wagtail\",\"Tree Pipit\",\"Olive-backed Pipit\",\"Pechora Pipit\",\"Red-throated Pipit\",\"American Pipit\",\"Sprague's Pipit\",\"Bohemian Waxwing\",\"Cedar Waxwing\",\"Gray Silky-flycatcher\",\"Phainopepla\",\"Olive Warbler\",\"Bachman's Warbler\",\"Blue-winged Warbler\",\"Golden-winged Warbler\",\"Tennessee Warbler\",\"Orange-crowned Warbler\",\"Nashville Warbler\",\"Virginia's Warbler\",\"Colima Warbler\",\"Lucy's Warbler\",\"Crescent-chested Warbler\",\"Northern Parula\",\"Tropical Parula\",\"Yellow Warbler\",\"Chestnut-sided Warbler\",\"Magnolia Warbler\",\"Cape May Warbler\",\"Black-throated Blue Warbler\",\"Yellow-rumped Warbler\",\"Black-throated Gray Warbler\",\"Golden-cheeked Warbler\",\"Black-throated Green Warbler\",\"Townsend's Warbler\",\"Hermit Warbler\",\"Blackburnian Warbler\",\"Yellow-throated Warbler\",\"Grace's Warbler\",\"Pine Warbler\",\"Kirtland's Warbler\",\"Prairie Warbler\",\"Palm Warbler\",\"Bay-breasted Warbler\",\"Blackpoll Warbler\",\"Cerulean Warbler\",\"Black-and-white Warbler\",\"American Redstart\",\"Prothonotary Warbler\",\"Worm-eating Warbler\",\"Swainson's Warbler\",\"Ovenbird\",\"Northern Waterthrush\",\"Louisiana Waterthrush\",\"Kentucky Warbler\",\"Connecticut Warbler\",\"Mourning Warbler\",\"MacGillivray's Warbler\",\"Common Yellowthroat\",\"Gray-crowned Yellowthroat\",\"Hooded Warbler\",\"Wilson's Warbler\",\"Canada Warbler\",\"Red-faced Warbler\",\"Painted Redstart\",\"Slate-throated Redstart\",\"Fan-tailed Warbler\",\"Golden-crowned Warbler\",\"Rufous-capped Warbler\",\"Yellow-breasted Chat\",\"Bananaquit\",\"Hepatic Tanager\",\"Summer Tanager\",\"Scarlet Tanager\",\"Western Tanager\",\"Flame-colored Tanager\",\"Stripe-headed Tanager\",\"White-collared Seedeater\",\"Yellow-faced Grassquit\",\"Black-faced Grassquit\",\"Olive Sparrow\",\"Green-tailed Towhee\",\"Spotted Towhee\",\"Eastern Towhee\",\"Canyon Towhee\",\"California Towhee\",\"Abert's Towhee\",\"Rufous-winged Sparrow\",\"Cassin's Sparrow\",\"Bachman's Sparrow\",\"Botteri's Sparrow\",\"Rufous-crowned Sparrow\",\"Five-striped Sparrow\",\"American Tree Sparrow\",\"Chipping Sparrow\",\"Clay-colored Sparrow\",\"Brewer's Sparrow\",\"Field Sparrow\",\"Worthen's Sparrow\",\"Black-chinned Sparrow\",\"Vesper Sparrow\",\"Lark Sparrow\",\"Black-throated Sparrow\",\"Sage Sparrow\",\"Lark Bunting\",\"Savannah Sparrow\",\"Grasshopper Sparrow\",\"Baird's Sparrow\",\"Henslow's Sparrow\",\"Le Conte's Sparrow\",\"Nelson's Sharp-tailed Sparrow\",\"Saltmarsh Sharp-tailed Sparrow\",\"Seaside Sparrow\",\"Fox Sparrow\",\"Song Sparrow\",\"Lincoln's Sparrow\",\"Swamp Sparrow\",\"White-throated Sparrow\",\"Harris's Sparrow\",\"White-crowned Sparrow\",\"Golden-crowned Sparrow\",\"Dark-eyed Junco\",\"Yellow-eyed Junco\",\"McCown's Longspur\",\"Lapland Longspur\",\"Smith's Longspur\",\"Chestnut-collared Longspur\",\"Pine Bunting\",\"Little Bunting\",\"Rustic Bunting\",\"Yellow-breasted Bunting\",\"Gray Bunting\",\"Pallas's Bunting\",\"Reed Bunting\",\"Snow Bunting\",\"McKay's Bunting\",\"Crimson-collared Grosbeak\",\"Northern Cardinal\",\"Pyrrhuloxia\",\"Yellow Grosbeak\",\"Rose-breasted Grosbeak\",\"Black-headed Grosbeak\",\"Blue Bunting\",\"Blue Grosbeak\",\"Lazuli Bunting\",\"Indigo Bunting\",\"Varied Bunting\",\"Painted Bunting\",\"Dickcissel\",\"Bobolink\",\"Red-winged Blackbird\",\"Tricolored Blackbird\",\"Tawny-shouldered Blackbird\",\"Eastern Meadowlark\",\"Western Meadowlark\",\"Yellow-headed Blackbird\",\"Rusty Blackbird\",\"Brewer's Blackbird\",\"Common Grackle\",\"Boat-tailed Grackle\",\"Great-tailed Grackle\",\"Shiny Cowbird\",\"Bronzed Cowbird\",\"Brown-headed Cowbird\",\"Black-vented Oriole\",\"Orchard Oriole\",\"Hooded Oriole\",\"Streak-backed Oriole\",\"Spot-breasted Oriole\",\"Altamira Oriole\",\"Audubon's Oriole\",\"Baltimore Oriole\",\"Bullock's Oriole\",\"Scott's Oriole\",\"Common Chaffinch\",\"Brambling\",\"Gray-crowned Rosy-Finch\",\"Black Rosy-Finch\",\"Brown-capped Rosy-Finch\",\"Pine Grosbeak\",\"Common Rosefinch\",\"Purple Finch\",\"Cassin's Finch\",\"House Finch\",\"Red Crossbill\",\"White-winged Crossbill\",\"Common Redpoll\",\"Hoary Redpoll\",\"Eurasian Siskin\",\"Pine Siskin\",\"Lesser Goldfinch\",\"Lawrence's Goldfinch\",\"American Goldfinch\",\"Oriental Greenfinch\",\"Eurasian Bullfinch\",\"Evening Grosbeak\",\"Hawfinch\",\"House Sparrow\",\"Eurasian Tree Sparrow\"]},{}],64:[function(e,t,n){t.exports=[\"Abyssinian\",\"American Bobtail\",\"American Curl\",\"American Shorthair\",\"American Wirehair\",\"Balinese\",\"Bengal\",\"Birman\",\"Bombay\",\"British Shorthair\",\"Burmese\",\"Chartreux\",\"Chausie\",\"Cornish Rex\",\"Devon Rex\",\"Donskoy\",\"Egyptian Mau\",\"Exotic Shorthair\",\"Havana\",\"Highlander\",\"Himalayan\",\"Japanese Bobtail\",\"Korat\",\"Kurilian Bobtail\",\"LaPerm\",\"Maine Coon\",\"Manx\",\"Minskin\",\"Munchkin\",\"Nebelung\",\"Norwegian Forest Cat\",\"Ocicat\",\"Ojos Azules\",\"Oriental\",\"Persian\",\"Peterbald\",\"Pixiebob\",\"Ragdoll\",\"Russian Blue\",\"Savannah\",\"Scottish Fold\",\"Selkirk Rex\",\"Serengeti\",\"Siberian\",\"Siamese\",\"Singapura\",\"Snowshoe\",\"Sokoke\",\"Somali\",\"Sphynx\",\"Thai\",\"Tonkinese\",\"Toyger\",\"Turkish Angora\",\"Turkish Van\"]},{}],65:[function(e,t,n){t.exports=[\"Blue Whale\",\"Fin Whale\",\"Sei Whale\",\"Sperm Whale\",\"Bryde’s whale\",\"Omura’s whale\",\"Humpback whale\",\"Long-Beaked Common Dolphin\",\"Short-Beaked Common Dolphin\",\"Bottlenose Dolphin\",\"Indo-Pacific Bottlenose Dolphin\",\"Northern Rightwhale Dolphin\",\"Southern Rightwhale Dolphin\",\"Tucuxi\",\"Costero\",\"Indo-Pacific Hump-backed Dolphin\",\"Chinese White Dolphin\",\"Atlantic Humpbacked Dolphin\",\"Atlantic Spotted Dolphin\",\"Clymene Dolphin\",\"Pantropical Spotted Dolphin\",\"Spinner Dolphin\",\"Striped Dolphin\",\"Rough-Toothed Dolphin\",\"Chilean Dolphin\",\"Commerson’s Dolphin\",\"Heaviside’s Dolphin\",\"Hector’s Dolphin\",\"Risso’s Dolphin\",\"Fraser’s Dolphin\",\"Atlantic White-Sided Dolphin\",\"Dusky Dolphin\",\"Hourglass Dolphin\",\"Pacific White-Sided Dolphin\",\"Peale’s Dolphin\",\"White-Beaked Dolphin\",\"Australian Snubfin Dolphin\",\"Irrawaddy Dolphin\",\"Melon-headed Whale\",\"Killer Whale (Orca)\",\"Pygmy Killer Whale\",\"False Killer Whale\",\"Long-finned Pilot Whale\",\"Short-finned Pilot Whale\",\"Guiana Dolphin\",\"Burrunan Dolphin\",\"Australian humpback Dolphin\",\"Amazon River Dolphin\",\"Chinese River Dolphin\",\"Ganges River Dolphin\",\"La Plata Dolphin\",\"Southern Bottlenose Whale\",\"Longman's Beaked Whale\",\"Arnoux's Beaked Whale\"]},{}],66:[function(e,t,n){t.exports=[\"Aberdeen Angus\",\"Abergele\",\"Abigar\",\"Abondance\",\"Abyssinian Shorthorned Zebu\",\"Aceh\",\"Achham\",\"Adamawa\",\"Adaptaur\",\"Afar\",\"Africangus\",\"Afrikaner\",\"Agerolese\",\"Alambadi\",\"Alatau\",\"Albanian\",\"Albera\",\"Alderney\",\"Alentejana\",\"Aleutian wild cattle\",\"Aliad Dinka\",\"Alistana-Sanabresa\",\"Allmogekor\",\"Alur\",\"American\",\"American Angus\",\"American Beef Friesian\",\"American Brown Swiss\",\"American Milking Devon\",\"American White Park\",\"Amerifax\",\"Amrit Mahal\",\"Amsterdam Island cattle\",\"Anatolian Black\",\"Andalusian Black\",\"Andalusian Blond\",\"Andalusian Grey\",\"Angeln\",\"Angoni\",\"Ankina\",\"Ankole\",\"Ankole-Watusi\",\"Aracena\",\"Arado\",\"Argentine Criollo\",\"Argentine Friesian\",\"Armorican\",\"Arouquesa\",\"Arsi\",\"Asturian Mountain\",\"Asturian Valley\",\"Aubrac\",\"Aulie-Ata\",\"Aure et Saint-Girons\",\"Australian Braford\",\"Australian Brangus\",\"Australian Charbray\",\"Australian Friesian Sahiwal\",\"Australian Lowline\",\"Australian Milking Zebu\",\"Australian Shorthorn\",\"Austrian Simmental\",\"Austrian Yellow\",\"Avétonou\",\"Avileña-Negra Ibérica\",\"Aweil Dinka\",\"Ayrshire\",\"Azaouak\",\"Azebuado\",\"Azerbaijan Zebu\",\"Azores\",\"Bedit\",\"Breed\",\"Bachaur cattle\",\"Baherie cattle\",\"Bakosi cattle\",\"Balancer\",\"Baoule\",\"Bargur cattle\",\"Barrosã\",\"Barzona\",\"Bazadaise\",\"Beef Freisian\",\"Beefalo\",\"Beefmaker\",\"Beefmaster\",\"Begayt\",\"Belgian Blue\",\"Belgian Red\",\"Belgian Red Pied\",\"Belgian White-and-Red\",\"Belmont Red\",\"Belted Galloway\",\"Bernese\",\"Berrenda cattle\",\"Betizu\",\"Bianca Modenese\",\"Blaarkop\",\"Black Angus\",\"Black Baldy\",\"Black Hereford\",\"Blanca Cacereña\",\"Blanco Orejinegro BON\",\"Blonde d'Aquitaine\",\"Blue Albion\",\"Blue Grey\",\"Bohuskulla\",\"Bonsmara\",\"Boran\",\"Boškarin\",\"Braford\",\"Brahman\",\"Brahmousin\",\"Brangus\",\"Braunvieh\",\"Brava\",\"British White\",\"British Friesian\",\"Brown Carpathian\",\"Brown Caucasian\",\"Brown Swiss\",\"Bue Lingo\",\"Burlina\",\"Buša cattle\",\"Butana cattle\",\"Bushuyev\",\"Cedit\",\"Breed\",\"Cachena\",\"Caldelana\",\"Camargue\",\"Campbell Island cattle\",\"Canadian Speckle Park\",\"Canadienne\",\"Canaria\",\"Canchim\",\"Caracu\",\"Cárdena Andaluza\",\"Carinthian Blondvieh\",\"Carora\",\"Charbray\",\"Charolais\",\"Chateaubriand\",\"Chiangus\",\"Chianina\",\"Chillingham cattle\",\"Chinese Black Pied\",\"Cholistani\",\"Coloursided White Back\",\"Commercial\",\"Corriente\",\"Corsican cattle\",\"Costeño con Cuernos\",\"Crioulo Lageano\",\"Dedit\",\"Breed\",\"Dajal\",\"Dangi cattle\",\"Danish Black-Pied\",\"Danish Jersey\",\"Danish Red\",\"Deep Red cattle\",\"Deoni\",\"Devon\",\"Dexter cattle\",\"Dhanni\",\"Doayo cattle\",\"Doela\",\"Drakensberger\",\"Dølafe\",\"Droughtmaster\",\"Dulong'\",\"Dutch Belted\",\"Dutch Friesian\",\"Dwarf Lulu\",\"Eedit\",\"Breed\",\"East Anatolian Red\",\"Eastern Finncattle\",\"Eastern Red Polled\",\"Enderby Island cattle\",\"English Longhorn\",\"Ennstaler Bergscheck\",\"Estonian Holstein\",\"Estonian Native\",\"Estonian Red cattle\",\"Évolène cattle\",\"Fedit\",\"Breed\",\"Fēng Cattle\",\"Finnish Ayrshire\",\"Finncattle\",\"Finnish Holstein-Friesian\",\"Fjäll\",\"Fleckvieh\",\"Florida Cracker cattle\",\"Fogera\",\"French Simmental\",\"Fribourgeoise\",\"Friesian Red and White\",\"Fulani Sudanese\",\"Gedit\",\"Breed\",\"Galician Blond\",\"Galloway cattle\",\"Gangatiri\",\"Gaolao\",\"Garvonesa\",\"Gascon cattle\",\"Gelbvieh\",\"Georgian Mountain cattle\",\"German Angus\",\"German Black Pied cattle\",\"German Black Pied Dairy\",\"German Red Pied\",\"Gir\",\"Glan cattle\",\"Gloucester\",\"Gobra\",\"Greek Shorthorn\",\"Greek Steppe\",\"Greyman cattle\",\"Gudali\",\"Guernsey cattle\",\"Guzerá\",\"Hedit\",\"Breed\",\"Hallikar4\",\"Hanwoo\",\"Hariana cattle\",\"Hartón del Valle\",\"Harzer Rotvieh\",\"Hays Converter\",\"Heck cattle\",\"Hereford\",\"Herens\",\"Hybridmaster\",\"Highland cattle\",\"Hinterwald\",\"Holando-Argentino\",\"Holstein Friesian cattle\",\"Horro\",\"Huáng Cattle\",\"Hungarian Grey\",\"Iedit\",\"Breed\",\"Iberian cattle\",\"Icelandic\",\"Illawarra cattle\",\"Improved Red and White\",\"Indo-Brazilian\",\"Irish Moiled\",\"Israeli Holstein\",\"Israeli Red\",\"Istoben cattle\",\"Istrian cattle\",\"Jedit\",\"Breed\",\"Jamaica Black\",\"Jamaica Hope\",\"Jamaica Red\",\"Japanese Brown\",\"Jarmelista\",\"Javari cattle\",\"Jersey cattle\",\"Jutland cattle\",\"Kedit\",\"Breed\",\"Kabin Buri cattle\",\"Kalmyk cattle\",\"Kangayam\",\"Kankrej\",\"Kamphaeng Saen cattle\",\"Karan Swiss\",\"Kasaragod Dwarf cattle\",\"Kathiawadi\",\"Kazakh Whiteheaded\",\"Kenana cattle\",\"Kenkatha cattle\",\"Kerry cattle\",\"Kherigarh\",\"Khillari cattle\",\"Kholomogory\",\"Korat Wagyu\",\"Kostroma cattle\",\"Krishna Valley cattle\",\"Kuri\",\"Kurgan cattle\",\"Ledit\",\"Breed\",\"La Reina cattle\",\"Lakenvelder cattle\",\"Lampurger\",\"Latvian Blue\",\"Latvian Brown\",\"Latvian Danish Red\",\"Lebedyn\",\"Levantina\",\"Limia cattle\",\"Limousin\",\"Limpurger\",\"Lincoln Red\",\"Lineback\",\"Lithuanian Black-and-White\",\"Lithuanian Light Grey\",\"Lithuanian Red\",\"Lithuanian White-Backed\",\"Lohani cattle\",\"Lourdais\",\"Lucerna cattle\",\"Luing\",\"Medit\",\"Breed\",\"Madagascar Zebu\",\"Madura\",\"Maine-Anjou\",\"Malnad Gidda\",\"Malvi\",\"Mandalong Special\",\"Mantequera Leonesa\",\"Maramureş Brown\",\"Marchigiana\",\"Maremmana\",\"Marinhoa\",\"Maronesa\",\"Masai\",\"Mashona\",\"Menorquina\",\"Mertolenga\",\"Meuse-Rhine-Issel\",\"Mewati\",\"Milking Shorthorn\",\"Minhota\",\"Mirandesa\",\"Mirkadim\",\"Mocăniţă\",\"Mollie\",\"Monchina\",\"Mongolian\",\"Montbéliarde\",\"Morucha\",\"Muturu\",\"Murboden\",\"Murnau-Werdenfels\",\"Murray Grey\",\"Nedit\",\"Breed\",\"Nagori\",\"N'Dama\",\"Negra Andaluza\",\"Nelore\",\"Nguni\",\"Nimari\",\"Normande\",\"North Bengal Grey\",\"Northern Finncattle\",\"Northern Shorthorn\",\"Norwegian Red\",\"Oedit]\",\"Breed\",\"Ongole\",\"Original Simmental\",\"Pedit\",\"Breed\",\"Pajuna\",\"Palmera\",\"Pantaneiro\",\"Parda Alpina\",\"Parthenaise\",\"Pasiega\",\"Pembroke\",\"Philippine Native\",\"Pie Rouge des Plaines\",\"Piedmontese cattle\",\"Pineywoods\",\"Pinzgauer\",\"Pirenaica\",\"Podolac\",\"Podolica\",\"Polish Black-and-White\",\"Polish Red\",\"Polled Hereford\",\"Poll Shorthorn\",\"Polled Shorthorn\",\"Ponwar\",\"Preta\",\"Punganur\",\"Pulikulam\",\"Pustertaler Sprinzen\",\"Qedit\",\"Breed\",\"Qinchaun\",\"Queensland Miniature Boran\",\"Redit\",\"Breed\",\"Ramo Grande\",\"Randall\",\"Raramuri Criollo\",\"Rathi\",\"Rätisches Grauvieh\",\"Raya\",\"Red Angus\",\"Red Brangus\",\"Red Chittagong\",\"Red Fulani\",\"Red Gorbatov\",\"Red Holstein\",\"Red Kandhari\",\"Red Mingrelian\",\"Red Poll\",\"Red Polled Østland\",\"Red Sindhi\",\"Retinta\",\"Riggit Galloway\",\"Ringamåla\",\"Rohjan\",\"Romagnola\",\"Romanian Bălţata\",\"Romanian Steppe Gray\",\"Romosinuano\",\"Russian Black Pied\",\"RX3\",\"Sedit\",\"Breed\",\"Sahiwal\",\"Salers\",\"Salorn\",\"Sanga\",\"Sanhe\",\"Santa Cruz\",\"Santa Gertrudis\",\"Sayaguesa\",\"Schwyz\",\"Selembu\",\"Senepol\",\"Serbian Pied\",\"Serbian Steppe\",\"Sheko\",\"Shetland\",\"Shorthorn\",\"Siboney de Cuba\",\"Simbrah\",\"Simford\",\"Simmental\",\"Siri\",\"South Devon\",\"Spanish Fighting Bull\",\"Speckle Park\",\"Square Meater\",\"Sussex\",\"Swedish Friesian\",\"Swedish Polled\",\"Swedish Red Pied\",\"Swedish Red Polled\",\"Swedish Red-and-White\",\"Tedit\",\"Breed\",\"Tabapuã\",\"Tarentaise\",\"Tasmanian Grey\",\"Tauros\",\"Telemark\",\"Texas Longhorn\",\"Texon\",\"Thai Black\",\"Thai Fighting Bull\",\"Thai Friesian\",\"Thai Milking Zebu\",\"Tharparkar\",\"Tswana\",\"Tudanca\",\"Tuli\",\"Tulim\",\"Turkish Grey Steppe\",\"Tux-Zillertal\",\"Tyrol Grey\",\"Uedit\",\"Breed\",\"Umblachery\",\"Ukrainian Grey\",\"Vedit\",\"Breed\",\"Valdostana Castana\",\"Valdostana Pezzata Nera\",\"Valdostana Pezzata Rossa\",\"Väneko\",\"Vaynol\",\"Vechur8\",\"Vestland Fjord\",\"Vestland Red Polled\",\"Vianesa\",\"Volinian Beef\",\"Vorderwald\",\"Vosgienne\",\"Wedit\",\"Breed\",\"Wagyu\",\"Waguli\",\"Wangus\",\"Welsh Black\",\"Western Finncattle\",\"White Cáceres\",\"White Fulani\",\"White Lamphun\",\"White Park\",\"Whitebred Shorthorn\",\"Xedit\",\"Breed\",\"Xingjiang Brown\",\"Yedit\",\"Breed\",\"Yakutian\",\"Yanbian\",\"Yanhuang\",\"Yurino\",\"Zedit\",\"Breed\",\"Żubroń\",\"Zebu\"]},{}],67:[function(e,t,n){t.exports=[\"Alligator mississippiensis\",\"Chinese Alligator\",\"Black Caiman\",\"Broad-snouted Caiman\",\"Spectacled Caiman\",\"Yacare Caiman\",\"Cuvier’s Dwarf Caiman\",\"Schneider’s Smooth-fronted Caiman\",\"African Slender-snouted Crocodile\",\"American Crocodile\",\"Australian Freshwater Crocodile\",\"Cuban Crocodile\",\"Dwarf Crocodile\",\"Morelet’s Crocodile\",\"Mugger Crocodile\",\"New Guinea Freshwater Crocodile\",\"Nile Crocodile\",\"West African Crocodile\",\"Orinoco Crocodile\",\"Philippine Crocodile\",\"Saltwater Crocodile\",\"Siamese Crocodile\",\"Gharial\",\"Tomistoma\"]},{}],68:[function(e,t,n){t.exports=[\"Affenpinscher\",\"Afghan Hound\",\"Aidi\",\"Airedale Terrier\",\"Akbash\",\"Akita\",\"Alano Español\",\"Alapaha Blue Blood Bulldog\",\"Alaskan Husky\",\"Alaskan Klee Kai\",\"Alaskan Malamute\",\"Alopekis\",\"Alpine Dachsbracke\",\"American Bulldog\",\"American Bully\",\"American Cocker Spaniel\",\"American English Coonhound\",\"American Foxhound\",\"American Hairless Terrier\",\"American Pit Bull Terrier\",\"American Staffordshire Terrier\",\"American Water Spaniel\",\"Andalusian Hound\",\"Anglo-Français de Petite Vénerie\",\"Appenzeller Sennenhund\",\"Ariegeois\",\"Armant\",\"Armenian Gampr dog\",\"Artois Hound\",\"Australian Cattle Dog\",\"Australian Kelpie\",\"Australian Shepherd\",\"Australian Stumpy Tail Cattle Dog\",\"Australian Terrier\",\"Austrian Black and Tan Hound\",\"Austrian Pinscher\",\"Azawakh\",\"Bakharwal dog\",\"Banjara Hound\",\"Barbado da Terceira\",\"Barbet\",\"Basenji\",\"Basque Shepherd Dog\",\"Basset Artésien Normand\",\"Basset Bleu de Gascogne\",\"Basset Fauve de Bretagne\",\"Basset Hound\",\"Bavarian Mountain Hound\",\"Beagle\",\"Beagle-Harrier\",\"Belgian Shepherd\",\"Bearded Collie\",\"Beauceron\",\"Bedlington Terrier\",\"Bergamasco Shepherd\",\"Berger Picard\",\"Bernese Mountain Dog\",\"Bhotia\",\"Bichon Frisé\",\"Billy\",\"Black and Tan Coonhound\",\"Black Norwegian Elkhound\",\"Black Russian Terrier\",\"Black Mouth Cur\",\"Bloodhound\",\"Blue Lacy\",\"Blue Picardy Spaniel\",\"Bluetick Coonhound\",\"Boerboel\",\"Bohemian Shepherd\",\"Bolognese\",\"Border Collie\",\"Border Terrier\",\"Borzoi\",\"Bosnian Coarse-haired Hound\",\"Boston Terrier\",\"Bouvier des Ardennes\",\"Bouvier des Flandres\",\"Boxer\",\"Boykin Spaniel\",\"Bracco Italiano\",\"Braque d'Auvergne\",\"Braque de l'Ariège\",\"Braque du Bourbonnais\",\"Braque Francais\",\"Braque Saint-Germain\",\"Briard\",\"Briquet Griffon Vendéen\",\"Brittany\",\"Broholmer\",\"Bruno Jura Hound\",\"Brussels Griffon\",\"Bucovina Shepherd Dog\",\"Bull Arab\",\"Bull Terrier\",\"Bulldog\",\"Bullmastiff\",\"Bully Kutta\",\"Burgos Pointer\",\"Cairn Terrier\",\"Campeiro Bulldog\",\"Canaan Dog\",\"Canadian Eskimo Dog\",\"Cane Corso\",\"Cane di Oropa\",\"Cane Paratore\",\"Cantabrian Water Dog\",\"Can de Chira\",\"Cão da Serra de Aires\",\"Cão de Castro Laboreiro\",\"Cão de Gado Transmontano\",\"Cão Fila de São Miguel\",\"Cardigan Welsh Corgi\",\"Carea Castellano Manchego\",\"Carolina Dog\",\"Carpathian Shepherd Dog\",\"Catahoula Leopard Dog\",\"Catalan Sheepdog\",\"Caucasian Shepherd Dog\",\"Cavalier King Charles Spaniel\",\"Central Asian Shepherd Dog\",\"Cesky Fousek\",\"Cesky Terrier\",\"Chesapeake Bay Retriever\",\"Chien Français Blanc et Noir\",\"Chien Français Blanc et Orange\",\"Chien Français Tricolore\",\"Chihuahua\",\"Chilean Terrier\",\"Chinese Chongqing Dog\",\"Chinese Crested Dog\",\"Chinook\",\"Chippiparai\",\"Chongqing dog\",\"Chortai\",\"Chow Chow\",\"Cimarrón Uruguayo\",\"Cirneco dell'Etna\",\"Clumber Spaniel\",\"Colombian fino hound\",\"Coton de Tulear\",\"Cretan Hound\",\"Croatian Sheepdog\",\"Curly-Coated Retriever\",\"Cursinu\",\"Czechoslovakian Wolfdog\",\"Dachshund\",\"Dalmatian\",\"Dandie Dinmont Terrier\",\"Danish-Swedish Farmdog\",\"Denmark Feist\",\"Dingo\",\"Doberman Pinscher\",\"Dogo Argentino\",\"Dogo Guatemalteco\",\"Dogo Sardesco\",\"Dogue Brasileiro\",\"Dogue de Bordeaux\",\"Drentse Patrijshond\",\"Drever\",\"Dunker\",\"Dutch Shepherd\",\"Dutch Smoushond\",\"East Siberian Laika\",\"East European Shepherd\",\"English Cocker Spaniel\",\"English Foxhound\",\"English Mastiff\",\"English Setter\",\"English Shepherd\",\"English Springer Spaniel\",\"English Toy Terrier\",\"Entlebucher Mountain Dog\",\"Estonian Hound\",\"Estrela Mountain Dog\",\"Eurasier\",\"Field Spaniel\",\"Fila Brasileiro\",\"Finnish Hound\",\"Finnish Lapphund\",\"Finnish Spitz\",\"Flat-Coated Retriever\",\"French Bulldog\",\"French Spaniel\",\"Galgo Español\",\"Galician Shepherd Dog\",\"Garafian Shepherd\",\"Gascon Saintongeois\",\"Georgian Shepherd\",\"German Hound\",\"German Longhaired Pointer\",\"German Pinscher\",\"German Roughhaired Pointer\",\"German Shepherd Dog\",\"German Shorthaired Pointer\",\"German Spaniel\",\"German Spitz\",\"German Wirehaired Pointer\",\"Giant Schnauzer\",\"Glen of Imaal Terrier\",\"Golden Retriever\",\"Gończy Polski\",\"Gordon Setter\",\"Grand Anglo-Français Blanc et Noir\",\"Grand Anglo-Français Blanc et Orange\",\"Grand Anglo-Français Tricolore\",\"Grand Basset Griffon Vendéen\",\"Grand Bleu de Gascogne\",\"Grand Griffon Vendéen\",\"Great Dane\",\"Greater Swiss Mountain Dog\",\"Greek Harehound\",\"Greek Shepherd\",\"Greenland Dog\",\"Greyhound\",\"Griffon Bleu de Gascogne\",\"Griffon Fauve de Bretagne\",\"Griffon Nivernais\",\"Gull Dong\",\"Gull Terrier\",\"Hällefors Elkhound\",\"Hamiltonstövare\",\"Hanover Hound\",\"Harrier\",\"Havanese\",\"Hierran Wolfdog\",\"Hokkaido\",\"Hovawart\",\"Huntaway\",\"Hygen Hound\",\"Ibizan Hound\",\"Icelandic Sheepdog\",\"Indian pariah dog\",\"Indian Spitz\",\"Irish Red and White Setter\",\"Irish Setter\",\"Irish Terrier\",\"Irish Water Spaniel\",\"Irish Wolfhound\",\"Istrian Coarse-haired Hound\",\"Istrian Shorthaired Hound\",\"Italian Greyhound\",\"Jack Russell Terrier\",\"Jagdterrier\",\"Japanese Chin\",\"Japanese Spitz\",\"Japanese Terrier\",\"Jindo\",\"Jonangi\",\"Kai Ken\",\"Kaikadi\",\"Kangal Shepherd Dog\",\"Kanni\",\"Karakachan dog\",\"Karelian Bear Dog\",\"Kars\",\"Karst Shepherd\",\"Keeshond\",\"Kerry Beagle\",\"Kerry Blue Terrier\",\"King Charles Spaniel\",\"King Shepherd\",\"Kintamani\",\"Kishu\",\"Kokoni\",\"Kombai\",\"Komondor\",\"Kooikerhondje\",\"Koolie\",\"Koyun dog\",\"Kromfohrländer\",\"Kuchi\",\"Kuvasz\",\"Labrador Retriever\",\"Lagotto Romagnolo\",\"Lakeland Terrier\",\"Lancashire Heeler\",\"Landseer\",\"Lapponian Herder\",\"Large Münsterländer\",\"Leonberger\",\"Levriero Sardo\",\"Lhasa Apso\",\"Lithuanian Hound\",\"Löwchen\",\"Lupo Italiano\",\"Mackenzie River Husky\",\"Magyar agár\",\"Mahratta Greyhound\",\"Maltese\",\"Manchester Terrier\",\"Maremmano-Abruzzese Sheepdog\",\"McNab dog\",\"Miniature American Shepherd\",\"Miniature Bull Terrier\",\"Miniature Fox Terrier\",\"Miniature Pinscher\",\"Miniature Schnauzer\",\"Molossus of Epirus\",\"Montenegrin Mountain Hound\",\"Mountain Cur\",\"Mountain Feist\",\"Mucuchies\",\"Mudhol Hound\",\"Mudi\",\"Neapolitan Mastiff\",\"New Guinea Singing Dog\",\"New Zealand Heading Dog\",\"Newfoundland\",\"Norfolk Terrier\",\"Norrbottenspets\",\"Northern Inuit Dog\",\"Norwegian Buhund\",\"Norwegian Elkhound\",\"Norwegian Lundehund\",\"Norwich Terrier\",\"Nova Scotia Duck Tolling Retriever\",\"Old Croatian Sighthound\",\"Old Danish Pointer\",\"Old English Sheepdog\",\"Old English Terrier\",\"Olde English Bulldogge\",\"Otterhound\",\"Pachon Navarro\",\"Pampas Deerhound\",\"Paisley Terrier\",\"Papillon\",\"Parson Russell Terrier\",\"Pastore della Lessinia e del Lagorai\",\"Patagonian Sheepdog\",\"Patterdale Terrier\",\"Pekingese\",\"Pembroke Welsh Corgi\",\"Perro Majorero\",\"Perro de Pastor Mallorquin\",\"Perro de Presa Canario\",\"Perro de Presa Mallorquin\",\"Peruvian Inca Orchid\",\"Petit Basset Griffon Vendéen\",\"Petit Bleu de Gascogne\",\"Phalène\",\"Pharaoh Hound\",\"Phu Quoc Ridgeback\",\"Picardy Spaniel\",\"Plummer Terrier\",\"Plott Hound\",\"Podenco Canario\",\"Podenco Valenciano\",\"Pointer\",\"Poitevin\",\"Polish Greyhound\",\"Polish Hound\",\"Polish Lowland Sheepdog\",\"Polish Tatra Sheepdog\",\"Pomeranian\",\"Pont-Audemer Spaniel\",\"Poodle\",\"Porcelaine\",\"Portuguese Podengo\",\"Portuguese Pointer\",\"Portuguese Water Dog\",\"Posavac Hound\",\"Pražský Krysařík\",\"Pshdar Dog\",\"Pudelpointer\",\"Pug\",\"Puli\",\"Pumi\",\"Pungsan Dog\",\"Pyrenean Mastiff\",\"Pyrenean Mountain Dog\",\"Pyrenean Sheepdog\",\"Rafeiro do Alentejo\",\"Rajapalayam\",\"Rampur Greyhound\",\"Rat Terrier\",\"Ratonero Bodeguero Andaluz\",\"Ratonero Mallorquin\",\"Ratonero Murciano de Huerta\",\"Ratonero Valenciano\",\"Redbone Coonhound\",\"Rhodesian Ridgeback\",\"Romanian Mioritic Shepherd Dog\",\"Romanian Raven Shepherd Dog\",\"Rottweiler\",\"Rough Collie\",\"Russian Spaniel\",\"Russian Toy\",\"Russo-European Laika\",\"Saarloos Wolfdog\",\"Sabueso Español\",\"Saint Bernard\",\"Saint Hubert Jura Hound\",\"Saint-Usuge Spaniel\",\"Saluki\",\"Samoyed\",\"Sapsali\",\"Sarabi dog\",\"Šarplaninac\",\"Schapendoes\",\"Schillerstövare\",\"Schipperke\",\"Schweizer Laufhund\",\"Schweizerischer Niederlaufhund\",\"Scottish Deerhound\",\"Scottish Terrier\",\"Sealyham Terrier\",\"Segugio dell'Appennino\",\"Segugio Italiano\",\"Segugio Maremmano\",\"Seppala Siberian Sleddog\",\"Serbian Hound\",\"Serbian Tricolour Hound\",\"Serrano Bulldog\",\"Shar Pei\",\"Shetland Sheepdog\",\"Shiba Inu\",\"Shih Tzu\",\"Shikoku\",\"Shiloh Shepherd\",\"Siberian Husky\",\"Silken Windhound\",\"Silky Terrier\",\"Sinhala Hound\",\"Skye Terrier\",\"Sloughi\",\"Slovakian Wirehaired Pointer\",\"Slovenský Cuvac\",\"Slovenský Kopov\",\"Smalandstövare\",\"Small Greek domestic dog\",\"Small Münsterländer\",\"Smooth Collie\",\"Smooth Fox Terrier\",\"Soft-Coated Wheaten Terrier\",\"South Russian Ovcharka\",\"Spanish Mastiff\",\"Spanish Water Dog\",\"Spinone Italiano\",\"Sporting Lucas Terrier\",\"Sardinian Shepherd Dog\",\"Stabyhoun\",\"Staffordshire Bull Terrier\",\"Standard Schnauzer\",\"Stephens Stock\",\"Styrian Coarse-haired Hound\",\"Sussex Spaniel\",\"Swedish Elkhound\",\"Swedish Lapphund\",\"Swedish Vallhund\",\"Swedish White Elkhound\",\"Taigan\",\"Taiwan Dog\",\"Tamaskan Dog\",\"Teddy Roosevelt Terrier\",\"Telomian\",\"Tenterfield Terrier\",\"Terrier Brasileiro\",\"Thai Bangkaew Dog\",\"Thai Ridgeback\",\"Tibetan Mastiff\",\"Tibetan Spaniel\",\"Tibetan Terrier\",\"Tornjak\",\"Tosa\",\"Toy Fox Terrier\",\"Toy Manchester Terrier\",\"Transylvanian Hound\",\"Treeing Cur\",\"Treeing Feist\",\"Treeing Tennessee Brindle\",\"Treeing Walker Coonhound\",\"Trigg Hound\",\"Tyrolean Hound\",\"Vikhan\",\"Villano de Las Encartaciones\",\"Villanuco de Las Encartaciones\",\"Vizsla\",\"Volpino Italiano\",\"Weimaraner\",\"Welsh Sheepdog\",\"Welsh Springer Spaniel\",\"Welsh Terrier\",\"West Highland White Terrier\",\"West Siberian Laika\",\"Westphalian Dachsbracke\",\"Wetterhoun\",\"Whippet\",\"White Shepherd\",\"White Swiss Shepherd Dog\",\"Wire Fox Terrier\",\"Wirehaired Pointing Griffon\",\"Wirehaired Vizsla\",\"Xiasi Dog\",\"Xoloitzcuintli\",\"Yakutian Laika\",\"Yorkshire Terrier\"]},{}],69:[function(e,t,n){t.exports=[\"Grass carp\",\"Peruvian anchoveta\",\"Silver carp\",\"Common carp\",\"Asari,\",\"Japanese littleneck,\",\"Filipino Venus,\",\"Japanese cockle,\",\"Alaska pollock\",\"Nile tilapia\",\"Whiteleg shrimp\",\"Bighead carp\",\"Skipjack tuna\",\"Catla\",\"Crucian carp\",\"Atlantic salmon\",\"Atlantic herring\",\"Chub mackerel\",\"Rohu\",\"Yellowfin tuna\",\"Japanese anchovy\",\"Largehead hairtail\",\"Atlantic cod\",\"European pilchard\",\"Capelin\",\"Jumbo flying squid\",\"Milkfish\",\"Atlantic mackerel\",\"Rainbow trout\",\"Araucanian herring\",\"Wuchang bream\",\"Gulf menhaden\",\"Indian oil sardine\",\"Black carp\",\"European anchovy\",\"Northern snakehead\",\"Pacific cod\",\"Pacific saury\",\"Pacific herring\",\"Bigeye tuna\",\"Chilean jack mackerel\",\"Yellow croaker\",\"Haddock\",\"Gazami crab\",\"Amur catfish\",\"Japanese common catfish\",\"European sprat\",\"Pink salmon\",\"Mrigal carp\",\"Channel catfish\",\"Blood cockle\",\"Blue whiting\",\"Hilsa shad\",\"Daggertooth pike conger\",\"California pilchard\",\"Cape horse mackerel\",\"Pacific anchoveta\",\"Japanese flying squid\",\"Pollock\",\"Chinese softshell turtle\",\"Kawakawa\",\"Indian mackerel\",\"Asian swamp eel\",\"Argentine hake\",\"Short mackerel\",\"Southern rough shrimp\",\"Southern African anchovy\",\"Pond loach\",\"Iridescent shark\",\"Mandarin fish\",\"Chinese perch\",\"Nile perch\",\"Round sardinella\",\"Japanese pilchard\",\"Bombay-duck\",\"Yellowhead catfish\",\"Korean bullhead\",\"Narrow-barred Spanish mackerel\",\"Albacore\",\"Madeiran sardinella\",\"Bonga shad\",\"Silver cyprinid\",\"Nile tilapia\",\"Longtail tuna\",\"Atlantic menhaden\",\"North Pacific hake\",\"Atlantic horse mackerel\",\"Japanese jack mackerel\",\"Pacific thread herring\",\"Bigeye scad\",\"Yellowstripe scad\",\"Chum salmon\",\"Blue swimming crab\",\"Pacific sand lance\",\"Pacific sandlance\",\"Goldstripe sardinella\"]},{}],70:[function(e,t,n){t.exports=[\"American Albino\",\"Abaco Barb\",\"Abtenauer\",\"Abyssinian\",\"Aegidienberger\",\"Akhal-Teke\",\"Albanian Horse\",\"Altai Horse\",\"Altèr Real\",\"American Cream Draft\",\"American Indian Horse\",\"American Paint Horse\",\"American Quarter Horse\",\"American Saddlebred\",\"American Warmblood\",\"Andalusian Horse\",\"Andravida Horse\",\"Anglo-Arabian\",\"Anglo-Arabo-Sardo\",\"Anglo-Kabarda\",\"Appaloosa\",\"AraAppaloosa\",\"Arabian Horse\",\"Ardennes Horse\",\"Arenberg-Nordkirchen\",\"Argentine Criollo\",\"Asian wild Horse\",\"Assateague Horse\",\"Asturcón\",\"Augeron\",\"Australian Brumby\",\"Australian Draught Horse\",\"Australian Stock Horse\",\"Austrian Warmblood\",\"Auvergne Horse\",\"Auxois\",\"Azerbaijan Horse\",\"Azteca Horse\",\"Baise Horse\",\"Bale\",\"Balearic Horse\",\"Balikun Horse\",\"Baluchi Horse\",\"Banker Horse\",\"Barb Horse\",\"Bardigiano\",\"Bashkir Curly\",\"Basque Mountain Horse\",\"Bavarian Warmblood\",\"Belgian Half-blood\",\"Belgian Horse\",\"Belgian Warmblood \",\"Bhutia Horse\",\"Black Forest Horse\",\"Blazer Horse\",\"Boerperd\",\"Borana\",\"Boulonnais Horse\",\"Brabant\",\"Brandenburger\",\"Brazilian Sport Horse\",\"Breton Horse\",\"Brumby\",\"Budyonny Horse\",\"Burguete Horse\",\"Burmese Horse\",\"Byelorussian Harness Horse\",\"Calabrese Horse\",\"Camargue Horse\",\"Camarillo White Horse\",\"Campeiro\",\"Campolina\",\"Canadian Horse\",\"Canadian Pacer\",\"Carolina Marsh Tacky\",\"Carthusian Horse\",\"Caspian Horse\",\"Castilian Horse\",\"Castillonnais\",\"Catria Horse\",\"Cavallo Romano della Maremma Laziale\",\"Cerbat Mustang\",\"Chickasaw Horse\",\"Chilean Corralero\",\"Choctaw Horse\",\"Cleveland Bay\",\"Clydesdale Horse\",\"Cob\",\"Coldblood Trotter\",\"Colonial Spanish Horse\",\"Colorado Ranger\",\"Comtois Horse\",\"Corsican Horse\",\"Costa Rican Saddle Horse\",\"Cretan Horse\",\"Criollo Horse\",\"Croatian Coldblood\",\"Cuban Criollo\",\"Cumberland Island Horse\",\"Curly Horse\",\"Czech Warmblood\",\"Daliboz\",\"Danish Warmblood\",\"Danube Delta Horse\",\"Dole Gudbrandsdal\",\"Don\",\"Dongola Horse\",\"Draft Trotter\",\"Dutch Harness Horse\",\"Dutch Heavy Draft\",\"Dutch Warmblood\",\"Dzungarian Horse\",\"East Bulgarian\",\"East Friesian Horse\",\"Estonian Draft\",\"Estonian Horse\",\"Falabella\",\"Faroese\",\"Finnhorse\",\"Fjord Horse\",\"Fleuve\",\"Florida Cracker Horse\",\"Foutanké\",\"Frederiksborg Horse\",\"Freiberger\",\"French Trotter\",\"Friesian Cross\",\"Friesian Horse\",\"Friesian Sporthorse\",\"Furioso-North Star\",\"Galiceño\",\"Galician Pony\",\"Gelderland Horse\",\"Georgian Grande Horse\",\"German Warmblood\",\"Giara Horse\",\"Gidran\",\"Groningen Horse\",\"Gypsy Horse\",\"Hackney Horse\",\"Haflinger\",\"Hanoverian Horse\",\"Heck Horse\",\"Heihe Horse\",\"Henson Horse\",\"Hequ Horse\",\"Hirzai\",\"Hispano-Bretón\",\"Holsteiner Horse\",\"Horro\",\"Hungarian Warmblood\",\"Icelandic Horse\",\"Iomud\",\"Irish Draught\",\"Irish Sport Horse sometimes called Irish Hunter\",\"Italian Heavy Draft\",\"Italian Trotter\",\"Jaca Navarra\",\"Jeju Horse\",\"Jutland Horse\",\"Kabarda Horse\",\"Kafa\",\"Kaimanawa Horses\",\"Kalmyk Horse\",\"Karabair\",\"Karabakh Horse\",\"Karachai Horse\",\"Karossier\",\"Kathiawari\",\"Kazakh Horse\",\"Kentucky Mountain Saddle Horse\",\"Kiger Mustang\",\"Kinsky Horse\",\"Kisber Felver\",\"Kiso Horse\",\"Kladruber\",\"Knabstrupper\",\"Konik\",\"Kundudo\",\"Kustanair\",\"Kyrgyz Horse\",\"Latvian Horse\",\"Lipizzan\",\"Lithuanian Heavy Draught\",\"Lokai\",\"Losino Horse\",\"Lusitano\",\"Lyngshest\",\"M'Bayar\",\"M'Par\",\"Mallorquín\",\"Malopolski\",\"Mangalarga\",\"Mangalarga Marchador\",\"Maremmano\",\"Marismeño Horse\",\"Marsh Tacky\",\"Marwari Horse\",\"Mecklenburger\",\"Međimurje Horse\",\"Menorquín\",\"Mérens Horse\",\"Messara Horse\",\"Metis Trotter\",\"Mezőhegyesi Sport Horse\",\"Miniature Horse\",\"Misaki Horse\",\"Missouri Fox Trotter\",\"Monchina\",\"Mongolian Horse\",\"Mongolian Wild Horse\",\"Monterufolino\",\"Morab\",\"Morgan Horse\",\"Mountain Pleasure Horse\",\"Moyle Horse\",\"Murakoz Horse\",\"Murgese\",\"Mustang Horse\",\"Namib Desert Horse\",\"Nangchen Horse\",\"National Show Horse\",\"Nez Perce Horse\",\"Nivernais Horse\",\"Nokota Horse\",\"Noma\",\"Nonius Horse\",\"Nooitgedachter\",\"Nordlandshest\",\"Noriker Horse\",\"Norman Cob\",\"North American Single-Footer Horse\",\"North Swedish Horse\",\"Norwegian Coldblood Trotter\",\"Norwegian Fjord\",\"Novokirghiz\",\"Oberlander Horse\",\"Ogaden\",\"Oldenburg Horse\",\"Orlov trotter\",\"Ostfriesen\",\"Paint\",\"Pampa Horse\",\"Paso Fino\",\"Pentro Horse\",\"Percheron\",\"Persano Horse\",\"Peruvian Paso\",\"Pintabian\",\"Pleven Horse\",\"Poitevin Horse\",\"Posavac Horse\",\"Pottok\",\"Pryor Mountain Mustang\",\"Przewalski's Horse\",\"Pura Raza Española\",\"Purosangue Orientale\",\"Qatgani\",\"Quarab\",\"Quarter Horse\",\"Racking Horse\",\"Retuerta Horse\",\"Rhenish German Coldblood\",\"Rhinelander Horse\",\"Riwoche Horse\",\"Rocky Mountain Horse\",\"Romanian Sporthorse\",\"Rottaler\",\"Russian Don\",\"Russian Heavy Draft\",\"Russian Trotter\",\"Saddlebred\",\"Salerno Horse\",\"Samolaco Horse\",\"San Fratello Horse\",\"Sarcidano Horse\",\"Sardinian Anglo-Arab\",\"Schleswig Coldblood\",\"Schwarzwälder Kaltblut\",\"Selale\",\"Sella Italiano\",\"Selle Français\",\"Shagya Arabian\",\"Shan Horse\",\"Shire Horse\",\"Siciliano Indigeno\",\"Silesian Horse\",\"Sokolsky Horse\",\"Sorraia\",\"South German Coldblood\",\"Soviet Heavy Draft\",\"Spanish Anglo-Arab\",\"Spanish Barb\",\"Spanish Jennet Horse\",\"Spanish Mustang\",\"Spanish Tarpan\",\"Spanish-Norman Horse\",\"Spiti Horse\",\"Spotted Saddle Horse\",\"Standardbred Horse\",\"Suffolk Punch\",\"Swedish Ardennes\",\"Swedish coldblood trotter\",\"Swedish Warmblood\",\"Swiss Warmblood\",\"Taishū Horse\",\"Takhi\",\"Tawleed\",\"Tchernomor\",\"Tennessee Walking Horse\",\"Tersk Horse\",\"Thoroughbred\",\"Tiger Horse\",\"Tinker Horse\",\"Tolfetano\",\"Tori Horse\",\"Trait Du Nord\",\"Trakehner\",\"Tsushima\",\"Tuigpaard\",\"Ukrainian Riding Horse\",\"Unmol Horse\",\"Uzunyayla\",\"Ventasso Horse\",\"Virginia Highlander\",\"Vlaamperd\",\"Vladimir Heavy Draft\",\"Vyatka\",\"Waler\",\"Waler Horse\",\"Walkaloosa\",\"Warlander\",\"Warmblood\",\"Welsh Cob\",\"Westphalian Horse\",\"Wielkopolski\",\"Württemberger\",\"Xilingol Horse\",\"Yakutian Horse\",\"Yili Horse\",\"Yonaguni Horse\",\"Zaniskari\",\"Žemaitukas\",\"Zhemaichu\",\"Zweibrücker\"]},{}],71:[function(e,t,n){var a={};t.exports=a,a.dog=e(\"./dog\"),a.cat=e(\"./cat\"),a.snake=e(\"./snake\"),a.horse=e(\"./horse\"),a.cetacean=e(\"./cetacean\"),a.rabbit=e(\"./rabbit\"),a.insect=e(\"./insect\"),a.bear=e(\"./bear\"),a.lion=e(\"./lion\"),a.cow=e(\"./cow\"),a.bird=e(\"./bird\"),a.fish=e(\"./fish\"),a.crocodilia=e(\"./crocodilia\"),a.type=e(\"./type\")},{\"./bear\":62,\"./bird\":63,\"./cat\":64,\"./cetacean\":65,\"./cow\":66,\"./crocodilia\":67,\"./dog\":68,\"./fish\":69,\"./horse\":70,\"./insect\":72,\"./lion\":73,\"./rabbit\":74,\"./snake\":75,\"./type\":76}],72:[function(e,t,n){t.exports=[\"Acacia-ants\",\"Acorn-plum gall\",\"Aerial yellowjacket\",\"Africanized honey bee\",\"Allegheny mound ant\",\"Almond stone wasp\",\"Ant\",\"Arboreal ant\",\"Argentine ant\",\"Asian paper wasp\",\"Baldfaced hornet\",\"Bee\",\"Bigheaded ant\",\"Black and yellow mud dauber\",\"Black carpenter ant\",\"Black imported fire ant\",\"Blue horntail woodwasp\",\"Blue orchard bee\",\"Braconid wasp\",\"Bumble bee\",\"Carpenter ant\",\"Carpenter wasp\",\"Chalcid wasp\",\"Cicada killer\",\"Citrus blackfly parasitoid\",\"Common paper wasp\",\"Crazy ant\",\"Cuckoo wasp\",\"Cynipid gall wasp\",\"Eastern Carpenter bee\",\"Eastern yellowjacket\",\"Elm sawfly\",\"Encyrtid wasp\",\"Erythrina gall wasp\",\"Eulophid wasp\",\"European hornet\",\"European imported fire ant\",\"False honey ant\",\"Fire ant\",\"Forest bachac\",\"Forest yellowjacket\",\"German yellowjacket\",\"Ghost ant\",\"Giant ichneumon wasp\",\"Giant resin bee\",\"Giant wood wasp\",\"Golden northern bumble bee\",\"Golden paper wasp\",\"Gouty oak gall\",\"Grass Carrying Wasp\",\"Great black wasp\",\"Great golden digger wasp\",\"Hackberry nipple gall parasitoid\",\"Honey bee\",\"Horned oak gall\",\"Horse guard wasp\",\"Horse guard wasp\",\"Hunting wasp\",\"Ichneumonid wasp\",\"Keyhole wasp\",\"Knopper gall\",\"Large garden bumble bee\",\"Large oak-apple gall\",\"Leafcutting bee\",\"Little fire ant\",\"Little yellow ant\",\"Long-horned bees\",\"Long-legged ant\",\"Macao paper wasp\",\"Mallow bee\",\"Marble gall\",\"Mossyrose gall wasp\",\"Mud-daubers\",\"Multiflora rose seed chalcid\",\"Oak apple gall wasp\",\"Oak rough bulletgall wasp\",\"Oak saucer gall\",\"Oak shoot sawfly\",\"Odorous house ant\",\"Orange-tailed bumble bee\",\"Orangetailed potter wasp\",\"Oriental chestnut gall wasp\",\"Paper wasp\",\"Pavement ant\",\"Pigeon tremex\",\"Pip gall wasp\",\"Prairie yellowjacket\",\"Pteromalid wasp\",\"Pyramid ant\",\"Raspberry Horntail\",\"Red ant\",\"Red carpenter ant\",\"Red harvester ant\",\"Red imported fire ant\",\"Red wasp\",\"Red wood ant\",\"Red-tailed wasp\",\"Reddish carpenter ant\",\"Rough harvester ant\",\"Sawfly parasitic wasp\",\"Scale parasitoid\",\"Silky ant\",\"Sirex woodwasp\",\"Siricid woodwasp\",\"Smaller yellow ant\",\"Southeastern blueberry bee\",\"Southern fire ant\",\"Southern yellowjacket\",\"Sphecid wasp\",\"Stony gall\",\"Sweat bee\",\"Texas leafcutting ant\",\"Tiphiid wasp\",\"Torymid wasp\",\"Tramp ant\",\"Valentine ant\",\"Velvet ant\",\"Vespid wasp\",\"Weevil parasitoid\",\"Western harvester ant\",\"Western paper wasp\",\"Western thatching ant\",\"Western yellowjacket\",\"White-horned horntail\",\"Willow shoot sawfly\",\"Woodwasp\",\"Wool sower gall maker\",\"Yellow and black potter wasp\",\"Yellow Crazy Ant\",\"Yellow-horned horntail\"]},{}],73:[function(e,t,n){t.exports=[\"Asiatic Lion\",\"Barbary Lion\",\"West African Lion\",\"Northeast Congo Lion\",\"Masai Lion\",\"Transvaal lion\",\"Cape lion\"]},{}],74:[function(e,t,n){t.exports=[\"American\",\"American Chinchilla\",\"American Fuzzy Lop\",\"American Sable\",\"Argente Brun\",\"Belgian Hare\",\"Beveren\",\"Blanc de Hotot\",\"Britannia Petite\",\"Californian\",\"Champagne D’Argent\",\"Checkered Giant\",\"Cinnamon\",\"Crème D’Argent\",\"Dutch\",\"Dwarf Hotot\",\"English Angora\",\"English Lop\",\"English Spot\",\"Flemish Giant\",\"Florida White\",\"French Angora\",\"French Lop\",\"Giant Angora\",\"Giant Chinchilla\",\"Harlequin\",\"Havana\",\"Himalayan\",\"Holland Lop\",\"Jersey Wooly\",\"Lilac\",\"Lionhead\",\"Mini Lop\",\"Mini Rex\",\"Mini Satin\",\"Netherland Dwarf\",\"New Zealand\",\"Palomino\",\"Polish\",\"Rex\",\"Rhinelander\",\"Satin\",\"Satin Angora\",\"Silver\",\"Silver Fox\",\"Silver Marten\",\"Standard Chinchilla\",\"Tan\",\"Thrianta\"]},{}],75:[function(e,t,n){t.exports=[\"Viper Adder\",\"Common adder\",\"Death Adder\",\"Desert death adder\",\"Horned adder\",\"Long-nosed adder\",\"Many-horned adder\",\"Mountain adder\",\"Mud adder\",\"Namaqua dwarf adder\",\"Nightingale adder\",\"Peringuey's adder\",\"Puff adder\",\"African puff adder\",\"Rhombic night adder\",\"Sand adder\",\"Dwarf sand adder\",\"Namib dwarf sand adder\",\"Water adder\",\"Aesculapian snake\",\"Anaconda\",\"Bolivian anaconda\",\"De Schauensee's anaconda\",\"Green anaconda\",\"Yellow anaconda\",\"Arafura file snake\",\"Asp\",\"European asp\",\"Egyptian asp\",\"African beaked snake\",\"Ball Python\",\"Bird snake\",\"Black-headed snake\",\"Mexican black kingsnake\",\"Black rat snake\",\"Black snake\",\"Red-bellied black snake\",\"Blind snake\",\"Brahminy blind snake\",\"Texas blind snake\",\"Western blind snake\",\"Boa\",\"Abaco Island boa\",\"Amazon tree boa\",\"Boa constrictor\",\"Cuban boa\",\"Dumeril's boa\",\"Dwarf boa\",\"Emerald tree boa\",\"Hogg Island boa\",\"Jamaican boa\",\"Madagascar ground boa\",\"Madagascar tree boa\",\"Puerto Rican boa\",\"Rainbow boa\",\"Red-tailed boa\",\"Rosy boa\",\"Rubber boa\",\"Sand boa\",\"Tree boa\",\"Boiga\",\"Boomslang\",\"Brown snake\",\"Eastern brown snake\",\"Bull snake\",\"Bushmaster\",\"Dwarf beaked snake\",\"Rufous beaked snake\",\"Canebrake\",\"Cantil\",\"Cascabel\",\"Cat-eyed snake\",\"Banded cat-eyed snake\",\"Green cat-eyed snake\",\"Cat snake\",\"Andaman cat snake\",\"Beddome's cat snake\",\"Dog-toothed cat snake\",\"Forsten's cat snake\",\"Gold-ringed cat snake\",\"Gray cat snake\",\"Many-spotted cat snake\",\"Tawny cat snake\",\"Chicken snake\",\"Coachwhip snake\",\"Cobra\",\"Andaman cobra\",\"Arabian cobra\",\"Asian cobra\",\"Banded water cobra\",\"Black-necked cobra\",\"Black-necked spitting cobra\",\"Black tree cobra\",\"Burrowing cobra\",\"Cape cobra\",\"Caspian cobra\",\"Congo water cobra\",\"Common cobra\",\"Eastern water cobra\",\"Egyptian cobra\",\"Equatorial spitting cobra\",\"False cobra\",\"False water cobra\",\"Forest cobra\",\"Gold tree cobra\",\"Indian cobra\",\"Indochinese spitting cobra\",\"Javan spitting cobra\",\"King cobra\",\"Mandalay cobra\",\"Mozambique spitting cobra\",\"North Philippine cobra\",\"Nubian spitting cobra\",\"Philippine cobra\",\"Red spitting cobra\",\"Rinkhals cobra\",\"Shield-nosed cobra\",\"Sinai desert cobra\",\"Southern Indonesian spitting cobra\",\"Southern Philippine cobra\",\"Southwestern black spitting cobra\",\"Snouted cobra\",\"Spectacled cobra\",\"Spitting cobra\",\"Storm water cobra\",\"Thai cobra\",\"Taiwan cobra\",\"Zebra spitting cobra\",\"Collett's snake\",\"Congo snake\",\"Copperhead\",\"American copperhead\",\"Australian copperhead\",\"Coral snake\",\"Arizona coral snake\",\"Beddome's coral snake\",\"Brazilian coral snake\",\"Cape coral snake\",\"Harlequin coral snake\",\"High Woods coral snake\",\"Malayan long-glanded coral snake\",\"Texas Coral Snake\",\"Western coral snake\",\"Corn snake\",\"South eastern corn snake\",\"Cottonmouth\",\"Crowned snake\",\"Cuban wood snake\",\"Eastern hognose snake\",\"Egg-eater\",\"Eastern coral snake\",\"Fer-de-lance\",\"Fierce snake\",\"Fishing snake\",\"Flying snake\",\"Golden tree snake\",\"Indian flying snake\",\"Moluccan flying snake\",\"Ornate flying snake\",\"Paradise flying snake\",\"Twin-Barred tree snake\",\"Banded Flying Snake\",\"Fox snake, three species of Pantherophis\",\"Forest flame snake\",\"Garter snake\",\"Checkered garter snake\",\"Common garter snake\",\"San Francisco garter snake\",\"Texas garter snake\",\"Cape gopher snake\",\"Grass snake\",\"Green snake\",\"Rough green snake\",\"Smooth green snake\",\"Ground snake\",\"Common ground snake\",\"Three-lined ground snake\",\"Western ground snake\",\"Habu\",\"Hognose snake\",\"Blonde hognose snake\",\"Dusty hognose snake\",\"Eastern hognose snake\",\"Jan's hognose snake\",\"Giant Malagasy hognose snake\",\"Mexican hognose snake\",\"South American hognose snake\",\"Hundred pacer\",\"Ikaheka snake\",\"Indigo snake\",\"Jamaican Tree Snake\",\"Keelback\",\"Asian keelback\",\"Assam keelback\",\"Black-striped keelback\",\"Buff striped keelback\",\"Burmese keelback\",\"Checkered keelback\",\"Common keelback\",\"Hill keelback\",\"Himalayan keelback\",\"Khasi Hills keelback\",\"Modest keelback\",\"Nicobar Island keelback\",\"Nilgiri keelback\",\"Orange-collared keelback\",\"Red-necked keelback\",\"Sikkim keelback\",\"Speckle-bellied keelback\",\"White-lipped keelback\",\"Wynaad keelback\",\"Yunnan keelback\",\"King brown\",\"King cobra\",\"King snake\",\"California kingsnake\",\"Desert kingsnake\",\"Grey-banded kingsnake\",\"North eastern king snake\",\"Prairie kingsnake\",\"Scarlet kingsnake\",\"Speckled kingsnake\",\"Krait\",\"Banded krait\",\"Blue krait\",\"Black krait\",\"Burmese krait\",\"Ceylon krait\",\"Indian krait\",\"Lesser black krait\",\"Malayan krait\",\"Many-banded krait\",\"Northeastern hill krait\",\"Red-headed krait\",\"Sind krait\",\"Large shield snake\",\"Lancehead\",\"Common lancehead\",\"Lora\",\"Grey Lora\",\"Lyre snake\",\"Baja California lyresnake\",\"Central American lyre snake\",\"Texas lyre snake\",\"Eastern lyre snake\",\"Machete savane\",\"Mamba\",\"Black mamba\",\"Green mamba\",\"Eastern green mamba\",\"Western green mamba\",\"Mamushi\",\"Mangrove snake\",\"Milk snake\",\"Moccasin snake\",\"Montpellier snake\",\"Mud snake\",\"Eastern mud snake\",\"Western mud snake\",\"Mussurana\",\"Night snake\",\"Cat-eyed night snake\",\"Texas night snake\",\"Nichell snake\",\"Narrowhead Garter Snake\",\"Nose-horned viper\",\"Rhinoceros viper\",\"Vipera ammodytes\",\"Parrot snake\",\"Mexican parrot snake\",\"Patchnose snake\",\"Perrotet's shieldtail snake\",\"Pine snake\",\"Pipe snake\",\"Asian pipe snake\",\"Dwarf pipe snake\",\"Red-tailed pipe snake\",\"Python\",\"African rock python\",\"Amethystine python\",\"Angolan python\",\"Australian scrub python\",\"Ball python\",\"Bismarck ringed python\",\"Black headed python\",\"Blood python\",\"Boelen python\",\"Borneo short-tailed python\",\"Bredl's python\",\"Brown water python\",\"Burmese python\",\"Calabar python\",\"Western carpet python\",\"Centralian carpet python\",\"Coastal carpet python\",\"Inland carpet python\",\"Jungle carpet python\",\"New Guinea carpet python\",\"Northwestern carpet python\",\"Southwestern carpet python\",\"Children's python\",\"Dauan Island water python\",\"Desert woma python\",\"Diamond python\",\"Flinders python\",\"Green tree python\",\"Halmahera python\",\"Indian python\",\"Indonesian water python\",\"Macklot's python\",\"Mollucan python\",\"Oenpelli python\",\"Olive python\",\"Papuan python\",\"Pygmy python\",\"Red blood python\",\"Reticulated python\",\"Kayaudi dwarf reticulated python\",\"Selayer reticulated python\",\"Rough-scaled python\",\"Royal python\",\"Savu python\",\"Spotted python\",\"Stimson's python\",\"Sumatran short-tailed python\",\"Tanimbar python\",\"Timor python\",\"Wetar Island python\",\"White-lipped python\",\"Brown white-lipped python\",\"Northern white-lipped python\",\"Southern white-lipped python\",\"Woma python\",\"Western woma python\",\"Queen snake\",\"Racer\",\"Bimini racer\",\"Buttermilk racer\",\"Eastern racer\",\"Eastern yellowbelly sad racer\",\"Mexican racer\",\"Southern black racer\",\"Tan racer\",\"West Indian racer\",\"Raddysnake\",\"Southwestern blackhead snake\",\"Rat snake\",\"Baird's rat snake\",\"Beauty rat snake\",\"Great Plains rat snake\",\"Green rat snake\",\"Japanese forest rat snake\",\"Japanese rat snake\",\"King rat snake\",\"Mandarin rat snake\",\"Persian rat snake\",\"Red-backed rat snake\",\"Twin-spotted rat snake\",\"Yellow-striped rat snake\",\"Manchurian Black Water Snake\",\"Rattlesnake\",\"Arizona black rattlesnake\",\"Aruba rattlesnake\",\"Chihuahuan ridge-nosed rattlesnake\",\"Coronado Island rattlesnake\",\"Durango rock rattlesnake\",\"Dusky pigmy rattlesnake\",\"Eastern diamondback rattlesnake\",\"Grand Canyon rattlesnake\",\"Great Basin rattlesnake\",\"Hopi rattlesnake\",\"Lance-headed rattlesnake\",\"Long-tailed rattlesnake\",\"Massasauga rattlesnake\",\"Mexican green rattlesnake\",\"Mexican west coast rattlesnake\",\"Midget faded rattlesnake\",\"Mojave rattlesnake\",\"Northern black-tailed rattlesnake\",\"Oaxacan small-headed rattlesnake\",\"Rattler\",\"Red diamond rattlesnake\",\"Southern Pacific rattlesnake\",\"Southwestern speckled rattlesnake\",\"Tancitaran dusky rattlesnake\",\"Tiger rattlesnake\",\"Timber rattlesnake\",\"Tropical rattlesnake\",\"Twin-spotted rattlesnake\",\"Uracoan rattlesnake\",\"Western diamondback rattlesnake\",\"Ribbon snake\",\"Rinkhals\",\"River jack\",\"Sea snake\",\"Annulated sea snake\",\"Beaked sea snake\",\"Dubois's sea snake\",\"Hardwicke's sea snake\",\"Hook Nosed Sea Snake\",\"Olive sea snake\",\"Pelagic sea snake\",\"Stoke's sea snake\",\"Yellow-banded sea snake\",\"Yellow-bellied sea snake\",\"Yellow-lipped sea snake\",\"Shield-tailed snake\",\"Sidewinder\",\"Colorado desert sidewinder\",\"Mojave desert sidewinder\",\"Sonoran sidewinder\",\"Small-eyed snake\",\"Smooth snake\",\"Brazilian smooth snake\",\"European smooth snake\",\"Stiletto snake\",\"Striped snake\",\"Japanese striped snake\",\"Sunbeam snake\",\"Taipan\",\"Central ranges taipan\",\"Coastal taipan\",\"Inland taipan\",\"Paupan taipan\",\"Tentacled snake\",\"Tic polonga\",\"Tiger snake\",\"Chappell Island tiger snake\",\"Common tiger snake\",\"Down's tiger snake\",\"Eastern tiger snake\",\"King Island tiger snake\",\"Krefft's tiger snake\",\"Peninsula tiger snake\",\"Tasmanian tiger snake\",\"Western tiger snake\",\"Tigre snake\",\"Tree snake\",\"Blanding's tree snake\",\"Blunt-headed tree snake\",\"Brown tree snake\",\"Long-nosed tree snake\",\"Many-banded tree snake\",\"Northern tree snake\",\"Trinket snake\",\"Black-banded trinket snake\",\"Twig snake\",\"African twig snake\",\"Twin Headed King Snake\",\"Titanboa\",\"Urutu\",\"Vine snake\",\"Asian Vine Snake, Whip Snake\",\"American Vine Snake\",\"Mexican vine snake\",\"Viper\",\"Asp viper\",\"Bamboo viper\",\"Bluntnose viper\",\"Brazilian mud Viper\",\"Burrowing viper\",\"Bush viper\",\"Great Lakes bush viper\",\"Hairy bush viper\",\"Nitsche's bush viper\",\"Rough-scaled bush viper\",\"Spiny bush viper\",\"Carpet viper\",\"Crossed viper\",\"Cyclades blunt-nosed viper\",\"Eyelash viper\",\"False horned viper\",\"Fea's viper\",\"Fifty pacer\",\"Gaboon viper\",\"Hognosed viper\",\"Horned desert viper\",\"Horned viper\",\"Jumping viper\",\"Kaznakov's viper\",\"Leaf-nosed viper\",\"Leaf viper\",\"Levant viper\",\"Long-nosed viper\",\"McMahon's viper\",\"Mole viper\",\"Nose-horned viper\",\"Rhinoceros viper\",\"Vipera ammodytes\",\"Palestine viper\",\"Pallas' viper\",\"Palm viper\",\"Amazonian palm viper\",\"Black-speckled palm-pitviper\",\"Eyelash palm-pitviper\",\"Green palm viper\",\"Mexican palm-pitviper\",\"Guatemalan palm viper\",\"Honduran palm viper\",\"Siamese palm viper\",\"Side-striped palm-pitviper\",\"Yellow-lined palm viper\",\"Pit viper\",\"Banded pitviper\",\"Bamboo pitviper\",\"Barbour's pit viper\",\"Black-tailed horned pit viper\",\"Bornean pitviper\",\"Brongersma's pitviper\",\"Brown spotted pitviper[4]\",\"Cantor's pitviper\",\"Elegant pitviper\",\"Eyelash pit viper\",\"Fan-Si-Pan horned pitviper\",\"Flat-nosed pitviper\",\"Godman's pit viper\",\"Green tree pit viper\",\"Habu pit viper\",\"Hagen's pitviper\",\"Horseshoe pitviper\",\"Jerdon's pitviper\",\"Kanburian pit viper\",\"Kaulback's lance-headed pitviper\",\"Kham Plateau pitviper\",\"Large-eyed pitviper\",\"Malabar rock pitviper\",\"Malayan pit viper\",\"Mangrove pit viper\",\"Mangshan pitviper\",\"Motuo bamboo pitviper\",\"Nicobar bamboo pitviper\",\"Philippine pitviper\",\"Pointed-scaled pit viper[5]\",\"Red-tailed bamboo pitviper\",\"Schultze's pitviper\",\"Stejneger's bamboo pitviper\",\"Sri Lankan pit viper\",\"Temple pit viper\",\"Tibetan bamboo pitviper\",\"Tiger pit viper\",\"Undulated pit viper\",\"Wagler's pit viper\",\"Wirot's pit viper\",\"Portuguese viper\",\"Saw-scaled viper\",\"Schlegel's viper\",\"Sedge viper\",\"Sharp-nosed viper\",\"Snorkel viper\",\"Temple viper\",\"Tree viper\",\"Chinese tree viper\",\"Guatemalan tree viper\",\"Hutton's tree viper\",\"Indian tree viper\",\"Large-scaled tree viper\",\"Malcolm's tree viper\",\"Nitsche's tree viper\",\"Pope's tree viper\",\"Rough-scaled tree viper\",\"Rungwe tree viper\",\"Sumatran tree viper\",\"White-lipped tree viper\",\"Ursini's viper\",\"Western hog-nosed viper\",\"Wart snake\",\"Water moccasin\",\"Water snake\",\"Bocourt's water snake\",\"Northern water snake\",\"Whip snake\",\"Long-nosed whip snake\",\"Wolf snake\",\"African wolf snake\",\"Barred wolf snake\",\"Worm snake\",\"Common worm snake\",\"Longnosed worm snake\",\"Wutu\",\"Yarara\",\"Zebra snake\"]},{}],76:[function(e,t,n){t.exports=[\"dog\",\"cat\",\"snake\",\"bear\",\"lion\",\"cetacean\",\"insect\",\"crocodilia\",\"cow\",\"bird\",\"fish\",\"rabbit\",\"horse\"]},{}],77:[function(e,t,n){t.exports=[\"#{Name.name}\",\"#{Company.name}\"]},{}],78:[function(e,t,n){var a={};t.exports=a,a.name=e(\"./name\"),a.version=e(\"./version\"),a.author=e(\"./author\")},{\"./author\":77,\"./name\":79,\"./version\":80}],79:[function(e,t,n){t.exports=[\"Redhold\",\"Treeflex\",\"Trippledex\",\"Kanlam\",\"Bigtax\",\"Daltfresh\",\"Toughjoyfax\",\"Mat Lam Tam\",\"Otcom\",\"Tres-Zap\",\"Y-Solowarm\",\"Tresom\",\"Voltsillam\",\"Biodex\",\"Greenlam\",\"Viva\",\"Matsoft\",\"Temp\",\"Zoolab\",\"Subin\",\"Rank\",\"Job\",\"Stringtough\",\"Tin\",\"It\",\"Home Ing\",\"Zamit\",\"Sonsing\",\"Konklab\",\"Alpha\",\"Latlux\",\"Voyatouch\",\"Alphazap\",\"Holdlamis\",\"Zaam-Dox\",\"Sub-Ex\",\"Quo Lux\",\"Bamity\",\"Ventosanzap\",\"Lotstring\",\"Hatity\",\"Tempsoft\",\"Overhold\",\"Fixflex\",\"Konklux\",\"Zontrax\",\"Tampflex\",\"Span\",\"Namfix\",\"Transcof\",\"Stim\",\"Fix San\",\"Sonair\",\"Stronghold\",\"Fintone\",\"Y-find\",\"Opela\",\"Lotlux\",\"Ronstring\",\"Zathin\",\"Duobam\",\"Keylex\"]},{}],80:[function(e,t,n){t.exports=[\"0.#.#\",\"0.##\",\"#.##\",\"#.#\",\"#.#.#\"]},{}],81:[function(e,t,n){t.exports=[\"2011-10-12\",\"2012-11-12\",\"2015-11-11\",\"2013-9-12\"]},{}],82:[function(e,t,n){t.exports=[\"1234-2121-1221-1211\",\"1212-1221-1121-1234\",\"1211-1221-1234-2201\",\"1228-1221-1221-1431\"]},{}],83:[function(e,t,n){t.exports=[\"visa\",\"mastercard\",\"americanexpress\",\"discover\"]},{}],84:[function(e,t,n){var a={};t.exports=a,a.credit_card_numbers=e(\"./credit_card_numbers\"),a.credit_card_expiry_dates=e(\"./credit_card_expiry_dates\"),a.credit_card_types=e(\"./credit_card_types\")},{\"./credit_card_expiry_dates\":81,\"./credit_card_numbers\":82,\"./credit_card_types\":83}],85:[function(e,t,n){t.exports=[\"###-###-####\",\"(###) ###-####\",\"1-###-###-####\",\"###.###.####\"]},{}],86:[function(e,t,n){var a={};t.exports=a,a.formats=e(\"./formats\")},{\"./formats\":85}],87:[function(e,t,n){t.exports=[\"red\",\"green\",\"blue\",\"yellow\",\"purple\",\"mint green\",\"teal\",\"white\",\"black\",\"orange\",\"pink\",\"grey\",\"maroon\",\"violet\",\"turquoise\",\"tan\",\"sky blue\",\"salmon\",\"plum\",\"orchid\",\"olive\",\"magenta\",\"lime\",\"ivory\",\"indigo\",\"gold\",\"fuchsia\",\"cyan\",\"azure\",\"lavender\",\"silver\"]},{}],88:[function(e,t,n){t.exports=[\"Books\",\"Movies\",\"Music\",\"Games\",\"Electronics\",\"Computers\",\"Home\",\"Garden\",\"Tools\",\"Grocery\",\"Health\",\"Beauty\",\"Toys\",\"Kids\",\"Baby\",\"Clothing\",\"Shoes\",\"Jewelery\",\"Sports\",\"Outdoors\",\"Automotive\",\"Industrial\"]},{}],89:[function(e,t,n){var a={};t.exports=a,a.color=e(\"./color\"),a.department=e(\"./department\"),a.product_name=e(\"./product_name\"),a.product_description=e(\"./product_description\")},{\"./color\":87,\"./department\":88,\"./product_description\":90,\"./product_name\":91}],90:[function(e,t,n){t.exports=[\"Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support\",\"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\"New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016\",\"The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality\",\"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\"The Football Is Good For Training And Recreational Purposes\",\"Carbonite web goalkeeper gloves are ergonomically designed to give easy fit\",\"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\"New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart\",\"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients\",\"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\"]},{}],91:[function(e,t,n){t.exports={adjective:[\"Small\",\"Ergonomic\",\"Rustic\",\"Intelligent\",\"Gorgeous\",\"Incredible\",\"Fantastic\",\"Practical\",\"Sleek\",\"Awesome\",\"Generic\",\"Handcrafted\",\"Handmade\",\"Licensed\",\"Refined\",\"Unbranded\",\"Tasty\"],material:[\"Steel\",\"Wooden\",\"Concrete\",\"Plastic\",\"Cotton\",\"Granite\",\"Rubber\",\"Metal\",\"Soft\",\"Fresh\",\"Frozen\"],product:[\"Chair\",\"Car\",\"Computer\",\"Keyboard\",\"Mouse\",\"Bike\",\"Ball\",\"Gloves\",\"Pants\",\"Shirt\",\"Table\",\"Shoes\",\"Hat\",\"Towels\",\"Soap\",\"Tuna\",\"Chicken\",\"Fish\",\"Cheese\",\"Bacon\",\"Pizza\",\"Salad\",\"Sausages\",\"Chips\"]}},{}],92:[function(e,t,n){t.exports=[\"Adaptive\",\"Advanced\",\"Ameliorated\",\"Assimilated\",\"Automated\",\"Balanced\",\"Business-focused\",\"Centralized\",\"Cloned\",\"Compatible\",\"Configurable\",\"Cross-group\",\"Cross-platform\",\"Customer-focused\",\"Customizable\",\"Decentralized\",\"De-engineered\",\"Devolved\",\"Digitized\",\"Distributed\",\"Diverse\",\"Down-sized\",\"Enhanced\",\"Enterprise-wide\",\"Ergonomic\",\"Exclusive\",\"Expanded\",\"Extended\",\"Face to face\",\"Focused\",\"Front-line\",\"Fully-configurable\",\"Function-based\",\"Fundamental\",\"Future-proofed\",\"Grass-roots\",\"Horizontal\",\"Implemented\",\"Innovative\",\"Integrated\",\"Intuitive\",\"Inverse\",\"Managed\",\"Mandatory\",\"Monitored\",\"Multi-channelled\",\"Multi-lateral\",\"Multi-layered\",\"Multi-tiered\",\"Networked\",\"Object-based\",\"Open-architected\",\"Open-source\",\"Operative\",\"Optimized\",\"Optional\",\"Organic\",\"Organized\",\"Persevering\",\"Persistent\",\"Phased\",\"Polarised\",\"Pre-emptive\",\"Proactive\",\"Profit-focused\",\"Profound\",\"Programmable\",\"Progressive\",\"Public-key\",\"Quality-focused\",\"Reactive\",\"Realigned\",\"Re-contextualized\",\"Re-engineered\",\"Reduced\",\"Reverse-engineered\",\"Right-sized\",\"Robust\",\"Seamless\",\"Secured\",\"Self-enabling\",\"Sharable\",\"Stand-alone\",\"Streamlined\",\"Switchable\",\"Synchronised\",\"Synergistic\",\"Synergized\",\"Team-oriented\",\"Total\",\"Triple-buffered\",\"Universal\",\"Up-sized\",\"Upgradable\",\"User-centric\",\"User-friendly\",\"Versatile\",\"Virtual\",\"Visionary\",\"Vision-oriented\"]},{}],93:[function(e,t,n){t.exports=[\"clicks-and-mortar\",\"value-added\",\"vertical\",\"proactive\",\"robust\",\"revolutionary\",\"scalable\",\"leading-edge\",\"innovative\",\"intuitive\",\"strategic\",\"e-business\",\"mission-critical\",\"sticky\",\"one-to-one\",\"24/7\",\"end-to-end\",\"global\",\"B2B\",\"B2C\",\"granular\",\"frictionless\",\"virtual\",\"viral\",\"dynamic\",\"24/365\",\"best-of-breed\",\"killer\",\"magnetic\",\"bleeding-edge\",\"web-enabled\",\"interactive\",\"dot-com\",\"sexy\",\"back-end\",\"real-time\",\"efficient\",\"front-end\",\"distributed\",\"seamless\",\"extensible\",\"turn-key\",\"world-class\",\"open-source\",\"cross-platform\",\"cross-media\",\"synergistic\",\"bricks-and-clicks\",\"out-of-the-box\",\"enterprise\",\"integrated\",\"impactful\",\"wireless\",\"transparent\",\"next-generation\",\"cutting-edge\",\"user-centric\",\"visionary\",\"customized\",\"ubiquitous\",\"plug-and-play\",\"collaborative\",\"compelling\",\"holistic\",\"rich\"]},{}],94:[function(e,t,n){t.exports=[\"synergies\",\"web-readiness\",\"paradigms\",\"markets\",\"partnerships\",\"infrastructures\",\"platforms\",\"initiatives\",\"channels\",\"eyeballs\",\"communities\",\"ROI\",\"solutions\",\"e-tailers\",\"e-services\",\"action-items\",\"portals\",\"niches\",\"technologies\",\"content\",\"vortals\",\"supply-chains\",\"convergence\",\"relationships\",\"architectures\",\"interfaces\",\"e-markets\",\"e-commerce\",\"systems\",\"bandwidth\",\"infomediaries\",\"models\",\"mindshare\",\"deliverables\",\"users\",\"schemas\",\"networks\",\"applications\",\"metrics\",\"e-business\",\"functionalities\",\"experiences\",\"web services\",\"methodologies\",\"blockchains\"]},{}],95:[function(e,t,n){t.exports=[\"implement\",\"utilize\",\"integrate\",\"streamline\",\"optimize\",\"evolve\",\"transform\",\"embrace\",\"enable\",\"orchestrate\",\"leverage\",\"reinvent\",\"aggregate\",\"architect\",\"enhance\",\"incentivize\",\"morph\",\"empower\",\"envisioneer\",\"monetize\",\"harness\",\"facilitate\",\"seize\",\"disintermediate\",\"synergize\",\"strategize\",\"deploy\",\"brand\",\"grow\",\"target\",\"syndicate\",\"synthesize\",\"deliver\",\"mesh\",\"incubate\",\"engage\",\"maximize\",\"benchmark\",\"expedite\",\"reintermediate\",\"whiteboard\",\"visualize\",\"repurpose\",\"innovate\",\"scale\",\"unleash\",\"drive\",\"extend\",\"engineer\",\"revolutionize\",\"generate\",\"exploit\",\"transition\",\"e-enable\",\"iterate\",\"cultivate\",\"matrix\",\"productize\",\"redefine\",\"recontextualize\"]},{}],96:[function(e,t,n){t.exports=[\"24 hour\",\"24/7\",\"3rd generation\",\"4th generation\",\"5th generation\",\"6th generation\",\"actuating\",\"analyzing\",\"asymmetric\",\"asynchronous\",\"attitude-oriented\",\"background\",\"bandwidth-monitored\",\"bi-directional\",\"bifurcated\",\"bottom-line\",\"clear-thinking\",\"client-driven\",\"client-server\",\"coherent\",\"cohesive\",\"composite\",\"context-sensitive\",\"contextually-based\",\"content-based\",\"dedicated\",\"demand-driven\",\"didactic\",\"directional\",\"discrete\",\"disintermediate\",\"dynamic\",\"eco-centric\",\"empowering\",\"encompassing\",\"even-keeled\",\"executive\",\"explicit\",\"exuding\",\"fault-tolerant\",\"foreground\",\"fresh-thinking\",\"full-range\",\"global\",\"grid-enabled\",\"heuristic\",\"high-level\",\"holistic\",\"homogeneous\",\"human-resource\",\"hybrid\",\"impactful\",\"incremental\",\"intangible\",\"interactive\",\"intermediate\",\"leading edge\",\"local\",\"logistical\",\"maximized\",\"methodical\",\"mission-critical\",\"mobile\",\"modular\",\"motivating\",\"multimedia\",\"multi-state\",\"multi-tasking\",\"national\",\"needs-based\",\"neutral\",\"next generation\",\"non-volatile\",\"object-oriented\",\"optimal\",\"optimizing\",\"radical\",\"real-time\",\"reciprocal\",\"regional\",\"responsive\",\"scalable\",\"secondary\",\"solution-oriented\",\"stable\",\"static\",\"systematic\",\"systemic\",\"system-worthy\",\"tangible\",\"tertiary\",\"transitional\",\"uniform\",\"upward-trending\",\"user-facing\",\"value-added\",\"web-enabled\",\"well-modulated\",\"zero administration\",\"zero defect\",\"zero tolerance\"]},{}],97:[function(e,t,n){var a={};t.exports=a,a.suffix=e(\"./suffix\"),a.adjective=e(\"./adjective\"),a.descriptor=e(\"./descriptor\"),a.noun=e(\"./noun\"),a.bs_verb=e(\"./bs_verb\"),a.bs_adjective=e(\"./bs_adjective\"),a.bs_noun=e(\"./bs_noun\"),a.name=e(\"./name\")},{\"./adjective\":92,\"./bs_adjective\":93,\"./bs_noun\":94,\"./bs_verb\":95,\"./descriptor\":96,\"./name\":98,\"./noun\":99,\"./suffix\":100}],98:[function(e,t,n){t.exports=[\"#{Name.last_name} #{suffix}\",\"#{Name.last_name}-#{Name.last_name}\",\"#{Name.last_name}, #{Name.last_name} and #{Name.last_name}\"]},{}],99:[function(e,t,n){t.exports=[\"ability\",\"access\",\"adapter\",\"algorithm\",\"alliance\",\"analyzer\",\"application\",\"approach\",\"architecture\",\"archive\",\"artificial intelligence\",\"array\",\"attitude\",\"benchmark\",\"budgetary management\",\"capability\",\"capacity\",\"challenge\",\"circuit\",\"collaboration\",\"complexity\",\"concept\",\"conglomeration\",\"contingency\",\"core\",\"customer loyalty\",\"database\",\"data-warehouse\",\"definition\",\"emulation\",\"encoding\",\"encryption\",\"extranet\",\"firmware\",\"flexibility\",\"focus group\",\"forecast\",\"frame\",\"framework\",\"function\",\"functionalities\",\"Graphic Interface\",\"groupware\",\"Graphical User Interface\",\"hardware\",\"help-desk\",\"hierarchy\",\"hub\",\"implementation\",\"info-mediaries\",\"infrastructure\",\"initiative\",\"installation\",\"instruction set\",\"interface\",\"internet solution\",\"intranet\",\"knowledge user\",\"knowledge base\",\"local area network\",\"leverage\",\"matrices\",\"matrix\",\"methodology\",\"middleware\",\"migration\",\"model\",\"moderator\",\"monitoring\",\"moratorium\",\"neural-net\",\"open architecture\",\"open system\",\"orchestration\",\"paradigm\",\"parallelism\",\"policy\",\"portal\",\"pricing structure\",\"process improvement\",\"product\",\"productivity\",\"project\",\"projection\",\"protocol\",\"secured line\",\"service-desk\",\"software\",\"solution\",\"standardization\",\"strategy\",\"structure\",\"success\",\"superstructure\",\"support\",\"synergy\",\"system engine\",\"task-force\",\"throughput\",\"time-frame\",\"toolset\",\"utilisation\",\"website\",\"workforce\"]},{}],100:[function(e,t,n){t.exports=[\"Inc\",\"and Sons\",\"LLC\",\"Group\"]},{}],101:[function(e,t,n){t.exports=[\"utf8_unicode_ci\",\"utf8_general_ci\",\"utf8_bin\",\"ascii_bin\",\"ascii_general_ci\",\"cp1250_bin\",\"cp1250_general_ci\"]},{}],102:[function(e,t,n){t.exports=[\"id\",\"title\",\"name\",\"email\",\"phone\",\"token\",\"group\",\"category\",\"password\",\"comment\",\"avatar\",\"status\",\"createdAt\",\"updatedAt\"]},{}],103:[function(e,t,n){t.exports=[\"InnoDB\",\"MyISAM\",\"MEMORY\",\"CSV\",\"BLACKHOLE\",\"ARCHIVE\"]},{}],104:[function(e,t,n){var a={};t.exports=a,a.collation=e(\"./collation\"),a.column=e(\"./column\"),a.engine=e(\"./engine\"),a.type=e(\"./type\")},{\"./collation\":101,\"./column\":102,\"./engine\":103,\"./type\":105}],105:[function(e,t,n){t.exports=[\"int\",\"varchar\",\"text\",\"date\",\"datetime\",\"tinyint\",\"time\",\"timestamp\",\"smallint\",\"mediumint\",\"bigint\",\"decimal\",\"float\",\"double\",\"real\",\"bit\",\"boolean\",\"serial\",\"blob\",\"binary\",\"enum\",\"set\",\"geometry\",\"point\"]},{}],106:[function(e,t,n){var a={};t.exports=a,a.month=e(\"./month\"),a.weekday=e(\"./weekday\")},{\"./month\":107,\"./weekday\":108}],107:[function(e,t,n){t.exports={wide:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],wide_context:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],abbr:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],abbr_context:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]}},{}],108:[function(e,t,n){t.exports={wide:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],wide_context:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],abbr:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],abbr_context:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]}},{}],109:[function(e,t,n){t.exports=[\"Checking\",\"Savings\",\"Money Market\",\"Investment\",\"Home Loan\",\"Credit Card\",\"Auto Loan\",\"Personal Loan\"]},{}],110:[function(e,t,n){t.exports=[\"34##-######-####L\",\"37##-######-####L\"]},{}],111:[function(e,t,n){t.exports=[\"30[0-5]#-######-###L\",\"36##-######-###L\",\"54##-####-####-###L\"]},{}],112:[function(e,t,n){t.exports=[\"6011-####-####-###L\",\"65##-####-####-###L\",\"64[4-9]#-####-####-###L\",\"6011-62##-####-####-###L\",\"65##-62##-####-####-###L\",\"64[4-9]#-62##-####-####-###L\"]},{}],113:[function(e,t,n){var a={};t.exports=a,a.visa=e(\"./visa\"),a.mastercard=e(\"./mastercard\"),a.discover=e(\"./discover\"),a.american_express=e(\"./american_express\"),a.diners_club=e(\"./diners_club\"),a.jcb=e(\"./jcb\"),a.switch=e(\"./switch\"),a.solo=e(\"./solo\"),a.maestro=e(\"./maestro\"),a.laser=e(\"./laser\"),a.instapayment=e(\"./instapayment.js\")},{\"./american_express\":110,\"./diners_club\":111,\"./discover\":112,\"./instapayment.js\":114,\"./jcb\":115,\"./laser\":116,\"./maestro\":117,\"./mastercard\":118,\"./solo\":119,\"./switch\":120,\"./visa\":121}],114:[function(e,t,n){t.exports=[\"63[7-9]#-####-####-###L\"]},{}],115:[function(e,t,n){t.exports=[\"3528-####-####-###L\",\"3529-####-####-###L\",\"35[3-8]#-####-####-###L\"]},{}],116:[function(e,t,n){t.exports=[\"6304###########L\",\"6706###########L\",\"6771###########L\",\"6709###########L\",\"6304#########{5,6}L\",\"6706#########{5,6}L\",\"6771#########{5,6}L\",\"6709#########{5,6}L\"]},{}],117:[function(e,t,n){t.exports=[\"5018-#{4}-#{4}-#{3}L\",\"5020-#{4}-#{4}-#{3}L\",\"5038-#{4}-#{4}-#{3}L\",\"5893-#{4}-#{4}-#{3}L\",\"6304-#{4}-#{4}-#{3}L\",\"6759-#{4}-#{4}-#{3}L\",\"676[1-3]-####-####-###L\",\"5018#{11,15}L\",\"5020#{11,15}L\",\"5038#{11,15}L\",\"5893#{11,15}L\",\"6304#{11,15}L\",\"6759#{11,15}L\",\"676[1-3]#{11,15}L\"]},{}],118:[function(e,t,n){t.exports=[\"5[1-5]##-####-####-###L\",\"6771-89##-####-###L\"]},{}],119:[function(e,t,n){t.exports=[\"6767-####-####-###L\",\"6767-####-####-####-#L\",\"6767-####-####-####-##L\"]},{}],120:[function(e,t,n){t.exports=[\"6759-####-####-###L\",\"6759-####-####-####-#L\",\"6759-####-####-####-##L\"]},{}],121:[function(e,t,n){t.exports=[\"4###########L\",\"4###-####-####-###L\"]},{}],122:[function(e,t,n){t.exports={\"UAE Dirham\":{code:\"AED\",symbol:\"\"},Afghani:{code:\"AFN\",symbol:\"؋\"},Lek:{code:\"ALL\",symbol:\"Lek\"},\"Armenian Dram\":{code:\"AMD\",symbol:\"\"},\"Netherlands Antillian Guilder\":{code:\"ANG\",symbol:\"ƒ\"},Kwanza:{code:\"AOA\",symbol:\"\"},\"Argentine Peso\":{code:\"ARS\",symbol:\"$\"},\"Australian Dollar\":{code:\"AUD\",symbol:\"$\"},\"Aruban Guilder\":{code:\"AWG\",symbol:\"ƒ\"},\"Azerbaijanian Manat\":{code:\"AZN\",symbol:\"ман\"},\"Convertible Marks\":{code:\"BAM\",symbol:\"KM\"},\"Barbados Dollar\":{code:\"BBD\",symbol:\"$\"},Taka:{code:\"BDT\",symbol:\"\"},\"Bulgarian Lev\":{code:\"BGN\",symbol:\"лв\"},\"Bahraini Dinar\":{code:\"BHD\",symbol:\"\"},\"Burundi Franc\":{code:\"BIF\",symbol:\"\"},\"Bermudian Dollar (customarily known as Bermuda Dollar)\":{code:\"BMD\",symbol:\"$\"},\"Brunei Dollar\":{code:\"BND\",symbol:\"$\"},\"Boliviano boliviano\":{code:\"BOB\",symbol:\"Bs\"},\"Brazilian Real\":{code:\"BRL\",symbol:\"R$\"},\"Bahamian Dollar\":{code:\"BSD\",symbol:\"$\"},Pula:{code:\"BWP\",symbol:\"P\"},\"Belarussian Ruble\":{code:\"BYR\",symbol:\"p.\"},\"Belize Dollar\":{code:\"BZD\",symbol:\"BZ$\"},\"Canadian Dollar\":{code:\"CAD\",symbol:\"$\"},\"Congolese Franc\":{code:\"CDF\",symbol:\"\"},\"Swiss Franc\":{code:\"CHF\",symbol:\"CHF\"},\"Chilean Peso\":{code:\"CLP\",symbol:\"$\"},\"Yuan Renminbi\":{code:\"CNY\",symbol:\"¥\"},\"Colombian Peso\":{code:\"COP\",symbol:\"$\"},\"Costa Rican Colon\":{code:\"CRC\",symbol:\"₡\"},\"Cuban Peso\":{code:\"CUP\",symbol:\"₱\"},\"Cuban Peso Convertible\":{code:\"CUC\",symbol:\"$\"},\"Cape Verde Escudo\":{code:\"CVE\",symbol:\"\"},\"Czech Koruna\":{code:\"CZK\",symbol:\"Kč\"},\"Djibouti Franc\":{code:\"DJF\",symbol:\"\"},\"Danish Krone\":{code:\"DKK\",symbol:\"kr\"},\"Dominican Peso\":{code:\"DOP\",symbol:\"RD$\"},\"Algerian Dinar\":{code:\"DZD\",symbol:\"\"},Kroon:{code:\"EEK\",symbol:\"\"},\"Egyptian Pound\":{code:\"EGP\",symbol:\"£\"},Nakfa:{code:\"ERN\",symbol:\"\"},\"Ethiopian Birr\":{code:\"ETB\",symbol:\"\"},Euro:{code:\"EUR\",symbol:\"€\"},\"Fiji Dollar\":{code:\"FJD\",symbol:\"$\"},\"Falkland Islands Pound\":{code:\"FKP\",symbol:\"£\"},\"Pound Sterling\":{code:\"GBP\",symbol:\"£\"},Lari:{code:\"GEL\",symbol:\"\"},Cedi:{code:\"GHS\",symbol:\"\"},\"Gibraltar Pound\":{code:\"GIP\",symbol:\"£\"},Dalasi:{code:\"GMD\",symbol:\"\"},\"Guinea Franc\":{code:\"GNF\",symbol:\"\"},Quetzal:{code:\"GTQ\",symbol:\"Q\"},\"Guyana Dollar\":{code:\"GYD\",symbol:\"$\"},\"Hong Kong Dollar\":{code:\"HKD\",symbol:\"$\"},Lempira:{code:\"HNL\",symbol:\"L\"},\"Croatian Kuna\":{code:\"HRK\",symbol:\"kn\"},Gourde:{code:\"HTG\",symbol:\"\"},Forint:{code:\"HUF\",symbol:\"Ft\"},Rupiah:{code:\"IDR\",symbol:\"Rp\"},\"New Israeli Sheqel\":{code:\"ILS\",symbol:\"₪\"},\"Bhutanese Ngultrum\":{code:\"BTN\",symbol:\"Nu\"},\"Indian Rupee\":{code:\"INR\",symbol:\"₹\"},\"Iraqi Dinar\":{code:\"IQD\",symbol:\"\"},\"Iranian Rial\":{code:\"IRR\",symbol:\"﷼\"},\"Iceland Krona\":{code:\"ISK\",symbol:\"kr\"},\"Jamaican Dollar\":{code:\"JMD\",symbol:\"J$\"},\"Jordanian Dinar\":{code:\"JOD\",symbol:\"\"},Yen:{code:\"JPY\",symbol:\"¥\"},\"Kenyan Shilling\":{code:\"KES\",symbol:\"\"},Som:{code:\"KGS\",symbol:\"лв\"},Riel:{code:\"KHR\",symbol:\"៛\"},\"Comoro Franc\":{code:\"KMF\",symbol:\"\"},\"North Korean Won\":{code:\"KPW\",symbol:\"₩\"},Won:{code:\"KRW\",symbol:\"₩\"},\"Kuwaiti Dinar\":{code:\"KWD\",symbol:\"\"},\"Cayman Islands Dollar\":{code:\"KYD\",symbol:\"$\"},Tenge:{code:\"KZT\",symbol:\"лв\"},Kip:{code:\"LAK\",symbol:\"₭\"},\"Lebanese Pound\":{code:\"LBP\",symbol:\"£\"},\"Sri Lanka Rupee\":{code:\"LKR\",symbol:\"₨\"},\"Liberian Dollar\":{code:\"LRD\",symbol:\"$\"},\"Lithuanian Litas\":{code:\"LTL\",symbol:\"Lt\"},\"Latvian Lats\":{code:\"LVL\",symbol:\"Ls\"},\"Libyan Dinar\":{code:\"LYD\",symbol:\"\"},\"Moroccan Dirham\":{code:\"MAD\",symbol:\"\"},\"Moldovan Leu\":{code:\"MDL\",symbol:\"\"},\"Malagasy Ariary\":{code:\"MGA\",symbol:\"\"},Denar:{code:\"MKD\",symbol:\"ден\"},Kyat:{code:\"MMK\",symbol:\"\"},Tugrik:{code:\"MNT\",symbol:\"₮\"},Pataca:{code:\"MOP\",symbol:\"\"},Ouguiya:{code:\"MRO\",symbol:\"\"},\"Mauritius Rupee\":{code:\"MUR\",symbol:\"₨\"},Rufiyaa:{code:\"MVR\",symbol:\"\"},Kwacha:{code:\"MWK\",symbol:\"\"},\"Mexican Peso\":{code:\"MXN\",symbol:\"$\"},\"Malaysian Ringgit\":{code:\"MYR\",symbol:\"RM\"},Metical:{code:\"MZN\",symbol:\"MT\"},Naira:{code:\"NGN\",symbol:\"₦\"},\"Cordoba Oro\":{code:\"NIO\",symbol:\"C$\"},\"Norwegian Krone\":{code:\"NOK\",symbol:\"kr\"},\"Nepalese Rupee\":{code:\"NPR\",symbol:\"₨\"},\"New Zealand Dollar\":{code:\"NZD\",symbol:\"$\"},\"Rial Omani\":{code:\"OMR\",symbol:\"﷼\"},Balboa:{code:\"PAB\",symbol:\"B/.\"},\"Nuevo Sol\":{code:\"PEN\",symbol:\"S/.\"},Kina:{code:\"PGK\",symbol:\"\"},\"Philippine Peso\":{code:\"PHP\",symbol:\"Php\"},\"Pakistan Rupee\":{code:\"PKR\",symbol:\"₨\"},Zloty:{code:\"PLN\",symbol:\"zł\"},Guarani:{code:\"PYG\",symbol:\"Gs\"},\"Qatari Rial\":{code:\"QAR\",symbol:\"﷼\"},\"New Leu\":{code:\"RON\",symbol:\"lei\"},\"Serbian Dinar\":{code:\"RSD\",symbol:\"Дин.\"},\"Russian Ruble\":{code:\"RUB\",symbol:\"руб\"},\"Rwanda Franc\":{code:\"RWF\",symbol:\"\"},\"Saudi Riyal\":{code:\"SAR\",symbol:\"﷼\"},\"Solomon Islands Dollar\":{code:\"SBD\",symbol:\"$\"},\"Seychelles Rupee\":{code:\"SCR\",symbol:\"₨\"},\"Sudanese Pound\":{code:\"SDG\",symbol:\"\"},\"Swedish Krona\":{code:\"SEK\",symbol:\"kr\"},\"Singapore Dollar\":{code:\"SGD\",symbol:\"$\"},\"Saint Helena Pound\":{code:\"SHP\",symbol:\"£\"},Leone:{code:\"SLL\",symbol:\"\"},\"Somali Shilling\":{code:\"SOS\",symbol:\"S\"},\"Surinam Dollar\":{code:\"SRD\",symbol:\"$\"},Dobra:{code:\"STN\",symbol:\"Db\"},\"El Salvador Colon\":{code:\"SVC\",symbol:\"₡\"},\"Syrian Pound\":{code:\"SYP\",symbol:\"£\"},Lilangeni:{code:\"SZL\",symbol:\"\"},Baht:{code:\"THB\",symbol:\"฿\"},Somoni:{code:\"TJS\",symbol:\"\"},Manat:{code:\"TMT\",symbol:\"\"},\"Tunisian Dinar\":{code:\"TND\",symbol:\"\"},\"Pa'anga\":{code:\"TOP\",symbol:\"\"},\"Turkish Lira\":{code:\"TRY\",symbol:\"₺\"},\"Trinidad and Tobago Dollar\":{code:\"TTD\",symbol:\"TT$\"},\"New Taiwan Dollar\":{code:\"TWD\",symbol:\"NT$\"},\"Tanzanian Shilling\":{code:\"TZS\",symbol:\"\"},Hryvnia:{code:\"UAH\",symbol:\"₴\"},\"Uganda Shilling\":{code:\"UGX\",symbol:\"\"},\"US Dollar\":{code:\"USD\",symbol:\"$\"},\"Peso Uruguayo\":{code:\"UYU\",symbol:\"$U\"},\"Uzbekistan Sum\":{code:\"UZS\",symbol:\"лв\"},\"Bolivar Fuerte\":{code:\"VEF\",symbol:\"Bs\"},Dong:{code:\"VND\",symbol:\"₫\"},Vatu:{code:\"VUV\",symbol:\"\"},Tala:{code:\"WST\",symbol:\"\"},\"CFA Franc BEAC\":{code:\"XAF\",symbol:\"\"},Silver:{code:\"XAG\",symbol:\"\"},Gold:{code:\"XAU\",symbol:\"\"},\"Bond Markets Units European Composite Unit (EURCO)\":{code:\"XBA\",symbol:\"\"},\"European Monetary Unit (E.M.U.-6)\":{code:\"XBB\",symbol:\"\"},\"European Unit of Account 9(E.U.A.-9)\":{code:\"XBC\",symbol:\"\"},\"European Unit of Account 17(E.U.A.-17)\":{code:\"XBD\",symbol:\"\"},\"East Caribbean Dollar\":{code:\"XCD\",symbol:\"$\"},SDR:{code:\"XDR\",symbol:\"\"},\"UIC-Franc\":{code:\"XFU\",symbol:\"\"},\"CFA Franc BCEAO\":{code:\"XOF\",symbol:\"\"},Palladium:{code:\"XPD\",symbol:\"\"},\"CFP Franc\":{code:\"XPF\",symbol:\"\"},Platinum:{code:\"XPT\",symbol:\"\"},\"Codes specifically reserved for testing purposes\":{code:\"XTS\",symbol:\"\"},\"Yemeni Rial\":{code:\"YER\",symbol:\"﷼\"},Rand:{code:\"ZAR\",symbol:\"R\"},\"Lesotho Loti\":{code:\"LSL\",symbol:\"\"},\"Namibia Dollar\":{code:\"NAD\",symbol:\"N$\"},\"Zambian Kwacha\":{code:\"ZMK\",symbol:\"\"},\"Zimbabwe Dollar\":{code:\"ZWL\",symbol:\"\"}}},{}],123:[function(e,t,n){var a={};t.exports=a,a.account_type=e(\"./account_type\"),a.transaction_type=e(\"./transaction_type\"),a.currency=e(\"./currency\"),a.credit_card=e(\"./credit_card\")},{\"./account_type\":109,\"./credit_card\":113,\"./currency\":122,\"./transaction_type\":124}],124:[function(e,t,n){t.exports=[\"deposit\",\"withdrawal\",\"payment\",\"invoice\"]},{}],125:[function(e,t,n){t.exports=[\"TCP\",\"HTTP\",\"SDD\",\"RAM\",\"GB\",\"CSS\",\"SSL\",\"AGP\",\"SQL\",\"FTP\",\"PCI\",\"AI\",\"ADP\",\"RSS\",\"XML\",\"EXE\",\"COM\",\"HDD\",\"THX\",\"SMTP\",\"SMS\",\"USB\",\"PNG\",\"SAS\",\"IB\",\"SCSI\",\"JSON\",\"XSS\",\"JBOD\"]},{}],126:[function(e,t,n){t.exports=[\"auxiliary\",\"primary\",\"back-end\",\"digital\",\"open-source\",\"virtual\",\"cross-platform\",\"redundant\",\"online\",\"haptic\",\"multi-byte\",\"bluetooth\",\"wireless\",\"1080p\",\"neural\",\"optical\",\"solid state\",\"mobile\"]},{}],127:[function(e,t,n){var a={};t.exports=a,a.abbreviation=e(\"./abbreviation\"),a.adjective=e(\"./adjective\"),a.noun=e(\"./noun\"),a.verb=e(\"./verb\"),a.ingverb=e(\"./ingverb\"),a.phrase=e(\"./phrase\")},{\"./abbreviation\":125,\"./adjective\":126,\"./ingverb\":128,\"./noun\":129,\"./phrase\":130,\"./verb\":131}],128:[function(e,t,n){t.exports=[\"backing up\",\"bypassing\",\"hacking\",\"overriding\",\"compressing\",\"copying\",\"navigating\",\"indexing\",\"connecting\",\"generating\",\"quantifying\",\"calculating\",\"synthesizing\",\"transmitting\",\"programming\",\"parsing\"]},{}],129:[function(e,t,n){t.exports=[\"driver\",\"protocol\",\"bandwidth\",\"panel\",\"microchip\",\"program\",\"port\",\"card\",\"array\",\"interface\",\"system\",\"sensor\",\"firewall\",\"hard drive\",\"pixel\",\"alarm\",\"feed\",\"monitor\",\"application\",\"transmitter\",\"bus\",\"circuit\",\"capacitor\",\"matrix\"]},{}],130:[function(e,t,n){t.exports=[\"If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!\",\"We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!\",\"Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!\",\"You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!\",\"Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!\",\"The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!\",\"{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!\",\"I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!\"]},{}],131:[function(e,t,n){t.exports=[\"back up\",\"bypass\",\"hack\",\"override\",\"compress\",\"copy\",\"navigate\",\"index\",\"connect\",\"generate\",\"quantify\",\"calculate\",\"synthesize\",\"input\",\"transmit\",\"program\",\"reboot\",\"parse\"]},{}],132:[function(e,t,n){var a={};t.exports=a,a.title=\"English\",a.separator=\" & \",a.address=e(\"./address\"),a.animal=e(\"./animal\"),a.company=e(\"./company\"),a.internet=e(\"./internet\"),a.database=e(\"./database\"),a.lorem=e(\"./lorem\"),a.name=e(\"./name\"),a.phone_number=e(\"./phone_number\"),a.cell_phone=e(\"./cell_phone\"),a.business=e(\"./business\"),a.commerce=e(\"./commerce\"),a.team=e(\"./team\"),a.hacker=e(\"./hacker\"),a.app=e(\"./app\"),a.finance=e(\"./finance\"),a.date=e(\"./date\"),a.system=e(\"./system\"),a.vehicle=e(\"./vehicle\"),a.music=e(\"./music\")},{\"./address\":52,\"./animal\":71,\"./app\":78,\"./business\":84,\"./cell_phone\":86,\"./commerce\":89,\"./company\":97,\"./database\":104,\"./date\":106,\"./finance\":123,\"./hacker\":127,\"./internet\":137,\"./lorem\":138,\"./music\":142,\"./name\":147,\"./phone_number\":155,\"./system\":157,\"./team\":160,\"./vehicle\":164}],133:[function(e,t,n){t.exports=[\"0therplanet_128.jpg\",\"1markiz_128.jpg\",\"2fockus_128.jpg\",\"8d3k_128.jpg\",\"91bilal_128.jpg\",\"9lessons_128.jpg\",\"AM_Kn2_128.jpg\",\"AlbertoCococi_128.jpg\",\"BenouarradeM_128.jpg\",\"BillSKenney_128.jpg\",\"BrianPurkiss_128.jpg\",\"BroumiYoussef_128.jpg\",\"BryanHorsey_128.jpg\",\"Chakintosh_128.jpg\",\"ChrisFarina78_128.jpg\",\"Elt_n_128.jpg\",\"GavicoInd_128.jpg\",\"HenryHoffman_128.jpg\",\"IsaryAmairani_128.jpg\",\"Karimmove_128.jpg\",\"LucasPerdidao_128.jpg\",\"ManikRathee_128.jpg\",\"RussellBishop_128.jpg\",\"S0ufi4n3_128.jpg\",\"SULiik_128.jpg\",\"Shriiiiimp_128.jpg\",\"Silveredge9_128.jpg\",\"Skyhartman_128.jpg\",\"SlaapMe_128.jpg\",\"Stievius_128.jpg\",\"Talbi_ConSept_128.jpg\",\"VMilescu_128.jpg\",\"VinThomas_128.jpg\",\"YoungCutlass_128.jpg\",\"ZacharyZorbas_128.jpg\",\"_dwite__128.jpg\",\"_kkga_128.jpg\",\"_pedropinho_128.jpg\",\"_ragzor_128.jpg\",\"_scottburgess_128.jpg\",\"_shahedk_128.jpg\",\"_victa_128.jpg\",\"_vojto_128.jpg\",\"_williamguerra_128.jpg\",\"_yardenoon_128.jpg\",\"a1chapone_128.jpg\",\"a_brixen_128.jpg\",\"a_harris88_128.jpg\",\"aaronalfred_128.jpg\",\"aaroni_128.jpg\",\"aaronkwhite_128.jpg\",\"abdots_128.jpg\",\"abdulhyeuk_128.jpg\",\"abdullindenis_128.jpg\",\"abelcabans_128.jpg\",\"abotap_128.jpg\",\"abovefunction_128.jpg\",\"adamawesomeface_128.jpg\",\"adammarsbar_128.jpg\",\"adamnac_128.jpg\",\"adamsxu_128.jpg\",\"adellecharles_128.jpg\",\"ademilter_128.jpg\",\"adhamdannaway_128.jpg\",\"adhiardana_128.jpg\",\"adityasutomo_128.jpg\",\"adobi_128.jpg\",\"adrienths_128.jpg\",\"aeon56_128.jpg\",\"afusinatto_128.jpg\",\"agromov_128.jpg\",\"agustincruiz_128.jpg\",\"ah_lice_128.jpg\",\"ahmadajmi_128.jpg\",\"ahmetalpbalkan_128.jpg\",\"ahmetsulek_128.jpg\",\"aiiaiiaii_128.jpg\",\"ainsleywagon_128.jpg\",\"aio____128.jpg\",\"airskylar_128.jpg\",\"aislinnkelly_128.jpg\",\"ajaxy_ru_128.jpg\",\"aka_james_128.jpg\",\"akashsharma39_128.jpg\",\"akmalfikri_128.jpg\",\"akmur_128.jpg\",\"al_li_128.jpg\",\"alagoon_128.jpg\",\"alan_zhang__128.jpg\",\"albertaugustin_128.jpg\",\"alecarpentier_128.jpg\",\"aleclarsoniv_128.jpg\",\"aleinadsays_128.jpg\",\"alek_djuric_128.jpg\",\"aleksitappura_128.jpg\",\"alessandroribe_128.jpg\",\"alevizio_128.jpg\",\"alexandermayes_128.jpg\",\"alexivanichkin_128.jpg\",\"algunsanabria_128.jpg\",\"allagringaus_128.jpg\",\"allfordesign_128.jpg\",\"allthingssmitty_128.jpg\",\"alsobrooks_128.jpg\",\"alterchuca_128.jpg\",\"aluisio_azevedo_128.jpg\",\"alxleroydeval_128.jpg\",\"alxndrustinov_128.jpg\",\"amandabuzard_128.jpg\",\"amanruzaini_128.jpg\",\"amayvs_128.jpg\",\"amywebbb_128.jpg\",\"anaami_128.jpg\",\"anasnakawa_128.jpg\",\"anatolinicolae_128.jpg\",\"andrea211087_128.jpg\",\"andreas_pr_128.jpg\",\"andresdjasso_128.jpg\",\"andresenfredrik_128.jpg\",\"andrewabogado_128.jpg\",\"andrewarrow_128.jpg\",\"andrewcohen_128.jpg\",\"andrewofficer_128.jpg\",\"andyisonline_128.jpg\",\"andysolomon_128.jpg\",\"andytlaw_128.jpg\",\"angelceballos_128.jpg\",\"angelcolberg_128.jpg\",\"angelcreative_128.jpg\",\"anjhero_128.jpg\",\"ankitind_128.jpg\",\"anoff_128.jpg\",\"anthonysukow_128.jpg\",\"antjanus_128.jpg\",\"antongenkin_128.jpg\",\"antonyryndya_128.jpg\",\"antonyzotov_128.jpg\",\"aoimedia_128.jpg\",\"apriendeau_128.jpg\",\"arashmanteghi_128.jpg\",\"areandacom_128.jpg\",\"areus_128.jpg\",\"ariffsetiawan_128.jpg\",\"ariil_128.jpg\",\"arindam__128.jpg\",\"arishi__128.jpg\",\"arkokoley_128.jpg\",\"aroon_sharma_128.jpg\",\"arpitnj_128.jpg\",\"artd_sign_128.jpg\",\"artem_kostenko_128.jpg\",\"arthurholcombe1_128.jpg\",\"artvavs_128.jpg\",\"ashernatali_128.jpg\",\"ashocka18_128.jpg\",\"atanism_128.jpg\",\"atariboy_128.jpg\",\"ateneupopular_128.jpg\",\"attacks_128.jpg\",\"aviddayentonbay_128.jpg\",\"axel_128.jpg\",\"badlittleduck_128.jpg\",\"bagawarman_128.jpg\",\"baires_128.jpg\",\"balakayuriy_128.jpg\",\"balintorosz_128.jpg\",\"baliomega_128.jpg\",\"baluli_128.jpg\",\"bargaorobalo_128.jpg\",\"barputro_128.jpg\",\"bartjo_128.jpg\",\"bartoszdawydzik_128.jpg\",\"bassamology_128.jpg\",\"batsirai_128.jpg\",\"baumann_alex_128.jpg\",\"baumannzone_128.jpg\",\"bboy1895_128.jpg\",\"bcrad_128.jpg\",\"begreative_128.jpg\",\"belyaev_rs_128.jpg\",\"benefritz_128.jpg\",\"benjamin_knight_128.jpg\",\"bennyjien_128.jpg\",\"benoitboucart_128.jpg\",\"bereto_128.jpg\",\"bergmartin_128.jpg\",\"bermonpainter_128.jpg\",\"bertboerland_128.jpg\",\"besbujupi_128.jpg\",\"beshur_128.jpg\",\"betraydan_128.jpg\",\"beweinreich_128.jpg\",\"bfrohs_128.jpg\",\"bighanddesign_128.jpg\",\"bigmancho_128.jpg\",\"billyroshan_128.jpg\",\"bistrianiosip_128.jpg\",\"blakehawksworth_128.jpg\",\"blakesimkins_128.jpg\",\"bluefx__128.jpg\",\"bluesix_128.jpg\",\"bobbytwoshoes_128.jpg\",\"bobwassermann_128.jpg\",\"bolzanmarco_128.jpg\",\"borantula_128.jpg\",\"borges_marcos_128.jpg\",\"bowbrick_128.jpg\",\"boxmodel_128.jpg\",\"bpartridge_128.jpg\",\"bradenhamm_128.jpg\",\"brajeshwar_128.jpg\",\"brandclay_128.jpg\",\"brandonburke_128.jpg\",\"brandonflatsoda_128.jpg\",\"brandonmorreale_128.jpg\",\"brenmurrell_128.jpg\",\"brenton_clarke_128.jpg\",\"bruno_mart_128.jpg\",\"brunodesign1206_128.jpg\",\"bryan_topham_128.jpg\",\"bu7921_128.jpg\",\"bublienko_128.jpg\",\"buddhasource_128.jpg\",\"buleswapnil_128.jpg\",\"bungiwan_128.jpg\",\"buryaknick_128.jpg\",\"buzzusborne_128.jpg\",\"byrnecore_128.jpg\",\"byryan_128.jpg\",\"cadikkara_128.jpg\",\"calebjoyce_128.jpg\",\"calebogden_128.jpg\",\"canapud_128.jpg\",\"carbontwelve_128.jpg\",\"carlfairclough_128.jpg\",\"carlosblanco_eu_128.jpg\",\"carlosgavina_128.jpg\",\"carlosjgsousa_128.jpg\",\"carlosm_128.jpg\",\"carlyson_128.jpg\",\"caseycavanagh_128.jpg\",\"caspergrl_128.jpg\",\"catadeleon_128.jpg\",\"catarino_128.jpg\",\"cboller1_128.jpg\",\"cbracco_128.jpg\",\"ccinojasso1_128.jpg\",\"cdavis565_128.jpg\",\"cdharrison_128.jpg\",\"ceekaytweet_128.jpg\",\"cemshid_128.jpg\",\"cggaurav_128.jpg\",\"chaabane_wail_128.jpg\",\"chacky14_128.jpg\",\"chadami_128.jpg\",\"chadengle_128.jpg\",\"chaensel_128.jpg\",\"chandlervdw_128.jpg\",\"chanpory_128.jpg\",\"charlesrpratt_128.jpg\",\"charliecwaite_128.jpg\",\"charliegann_128.jpg\",\"chatyrko_128.jpg\",\"cherif_b_128.jpg\",\"chris_frees_128.jpg\",\"chris_witko_128.jpg\",\"chrismj83_128.jpg\",\"chrisslowik_128.jpg\",\"chrisstumph_128.jpg\",\"christianoliff_128.jpg\",\"chrisvanderkooi_128.jpg\",\"ciaranr_128.jpg\",\"cicerobr_128.jpg\",\"claudioguglieri_128.jpg\",\"cloudstudio_128.jpg\",\"clubb3rry_128.jpg\",\"cocolero_128.jpg\",\"codepoet_ru_128.jpg\",\"coderdiaz_128.jpg\",\"codysanfilippo_128.jpg\",\"cofla_128.jpg\",\"colgruv_128.jpg\",\"colirpixoil_128.jpg\",\"collegeman_128.jpg\",\"commadelimited_128.jpg\",\"conspirator_128.jpg\",\"constantx_128.jpg\",\"coreyginnivan_128.jpg\",\"coreyhaggard_128.jpg\",\"coreyweb_128.jpg\",\"craigelimeliah_128.jpg\",\"craighenneberry_128.jpg\",\"craigrcoles_128.jpg\",\"creartinc_128.jpg\",\"croakx_128.jpg\",\"curiousoffice_128.jpg\",\"curiousonaut_128.jpg\",\"cybind_128.jpg\",\"cynthiasavard_128.jpg\",\"cyril_gaillard_128.jpg\",\"d00maz_128.jpg\",\"d33pthought_128.jpg\",\"d_kobelyatsky_128.jpg\",\"d_nny_m_cher_128.jpg\",\"dactrtr_128.jpg\",\"dahparra_128.jpg\",\"dallasbpeters_128.jpg\",\"damenleeturks_128.jpg\",\"danillos_128.jpg\",\"daniloc_128.jpg\",\"danmartin70_128.jpg\",\"dannol_128.jpg\",\"danpliego_128.jpg\",\"danro_128.jpg\",\"dansowter_128.jpg\",\"danthms_128.jpg\",\"danvernon_128.jpg\",\"danvierich_128.jpg\",\"darcystonge_128.jpg\",\"darylws_128.jpg\",\"davecraige_128.jpg\",\"davidbaldie_128.jpg\",\"davidcazalis_128.jpg\",\"davidhemphill_128.jpg\",\"davidmerrique_128.jpg\",\"davidsasda_128.jpg\",\"dawidwu_128.jpg\",\"daykiine_128.jpg\",\"dc_user_128.jpg\",\"dcalonaci_128.jpg\",\"ddggccaa_128.jpg\",\"de_ascanio_128.jpg\",\"deeenright_128.jpg\",\"demersdesigns_128.jpg\",\"denisepires_128.jpg\",\"depaulawagner_128.jpg\",\"derekcramer_128.jpg\",\"derekebradley_128.jpg\",\"derienzo777_128.jpg\",\"desastrozo_128.jpg\",\"designervzm_128.jpg\",\"dev_essentials_128.jpg\",\"devankoshal_128.jpg\",\"deviljho__128.jpg\",\"devinhalladay_128.jpg\",\"dgajjar_128.jpg\",\"dgclegg_128.jpg\",\"dhilipsiva_128.jpg\",\"dhoot_amit_128.jpg\",\"dhooyenga_128.jpg\",\"dhrubo_128.jpg\",\"diansigitp_128.jpg\",\"dicesales_128.jpg\",\"diesellaws_128.jpg\",\"digitalmaverick_128.jpg\",\"dimaposnyy_128.jpg\",\"dingyi_128.jpg\",\"divya_128.jpg\",\"dixchen_128.jpg\",\"djsherman_128.jpg\",\"dmackerman_128.jpg\",\"dmitriychuta_128.jpg\",\"dnezkumar_128.jpg\",\"dnirmal_128.jpg\",\"donjain_128.jpg\",\"doooon_128.jpg\",\"doronmalki_128.jpg\",\"dorphern_128.jpg\",\"dotgridline_128.jpg\",\"dparrelli_128.jpg\",\"dpmachado_128.jpg\",\"dreizle_128.jpg\",\"drewbyreese_128.jpg\",\"dshster_128.jpg\",\"dss49_128.jpg\",\"dudestein_128.jpg\",\"duivvv_128.jpg\",\"dutchnadia_128.jpg\",\"dvdwinden_128.jpg\",\"dzantievm_128.jpg\",\"ecommerceil_128.jpg\",\"eddiechen_128.jpg\",\"edgarchris99_128.jpg\",\"edhenderson_128.jpg\",\"edkf_128.jpg\",\"edobene_128.jpg\",\"eduardostuart_128.jpg\",\"ehsandiary_128.jpg\",\"eitarafa_128.jpg\",\"el_fuertisimo_128.jpg\",\"elbuscainfo_128.jpg\",\"elenadissi_128.jpg\",\"elisabethkjaer_128.jpg\",\"elliotlewis_128.jpg\",\"elliotnolten_128.jpg\",\"embrcecreations_128.jpg\",\"emileboudeling_128.jpg\",\"emmandenn_128.jpg\",\"emmeffess_128.jpg\",\"emsgulam_128.jpg\",\"enda_128.jpg\",\"enjoythetau_128.jpg\",\"enricocicconi_128.jpg\",\"envex_128.jpg\",\"ernestsemerda_128.jpg\",\"erwanhesry_128.jpg\",\"estebanuribe_128.jpg\",\"eugeneeweb_128.jpg\",\"evandrix_128.jpg\",\"evanshajed_128.jpg\",\"exentrich_128.jpg\",\"eyronn_128.jpg\",\"fabbianz_128.jpg\",\"fabbrucci_128.jpg\",\"faisalabid_128.jpg\",\"falconerie_128.jpg\",\"falling_soul_128.jpg\",\"falvarad_128.jpg\",\"felipeapiress_128.jpg\",\"felipecsl_128.jpg\",\"ffbel_128.jpg\",\"finchjke_128.jpg\",\"findingjenny_128.jpg\",\"fiterik_128.jpg\",\"fjaguero_128.jpg\",\"flashmurphy_128.jpg\",\"flexrs_128.jpg\",\"foczzi_128.jpg\",\"fotomagin_128.jpg\",\"fran_mchamy_128.jpg\",\"francis_vega_128.jpg\",\"franciscoamk_128.jpg\",\"frankiefreesbie_128.jpg\",\"fronx_128.jpg\",\"funwatercat_128.jpg\",\"g3d_128.jpg\",\"gaborenton_128.jpg\",\"gabrielizalo_128.jpg\",\"gabrielrosser_128.jpg\",\"ganserene_128.jpg\",\"garand_128.jpg\",\"gauchomatt_128.jpg\",\"gauravjassal_128.jpg\",\"gavr1l0_128.jpg\",\"gcmorley_128.jpg\",\"gearpixels_128.jpg\",\"geneseleznev_128.jpg\",\"geobikas_128.jpg\",\"geran7_128.jpg\",\"geshan_128.jpg\",\"giancarlon_128.jpg\",\"gipsy_raf_128.jpg\",\"giuliusa_128.jpg\",\"gizmeedevil1991_128.jpg\",\"gkaam_128.jpg\",\"gmourier_128.jpg\",\"goddardlewis_128.jpg\",\"gofrasdesign_128.jpg\",\"gojeanyn_128.jpg\",\"gonzalorobaina_128.jpg\",\"grahamkennery_128.jpg\",\"greenbes_128.jpg\",\"gregkilian_128.jpg\",\"gregrwilkinson_128.jpg\",\"gregsqueeb_128.jpg\",\"grrr_nl_128.jpg\",\"gseguin_128.jpg\",\"gt_128.jpg\",\"gu5taf_128.jpg\",\"guiiipontes_128.jpg\",\"guillemboti_128.jpg\",\"guischmitt_128.jpg\",\"gusoto_128.jpg\",\"h1brd_128.jpg\",\"hafeeskhan_128.jpg\",\"hai_ninh_nguyen_128.jpg\",\"haligaliharun_128.jpg\",\"hanna_smi_128.jpg\",\"happypeter1983_128.jpg\",\"harry_sistalam_128.jpg\",\"haruintesettden_128.jpg\",\"hasslunsford_128.jpg\",\"haydn_woods_128.jpg\",\"helderleal_128.jpg\",\"hellofeverrrr_128.jpg\",\"her_ruu_128.jpg\",\"herbigt_128.jpg\",\"herkulano_128.jpg\",\"hermanobrother_128.jpg\",\"herrhaase_128.jpg\",\"heycamtaylor_128.jpg\",\"heyimjuani_128.jpg\",\"heykenneth_128.jpg\",\"hfalucas_128.jpg\",\"hgharrygo_128.jpg\",\"hiemil_128.jpg\",\"hjartstrorn_128.jpg\",\"hoangloi_128.jpg\",\"holdenweb_128.jpg\",\"homka_128.jpg\",\"horaciobella_128.jpg\",\"hota_v_128.jpg\",\"hsinyo23_128.jpg\",\"hugocornejo_128.jpg\",\"hugomano_128.jpg\",\"iamgarth_128.jpg\",\"iamglimy_128.jpg\",\"iamjdeleon_128.jpg\",\"iamkarna_128.jpg\",\"iamkeithmason_128.jpg\",\"iamsteffen_128.jpg\",\"id835559_128.jpg\",\"idiot_128.jpg\",\"iduuck_128.jpg\",\"ifarafonow_128.jpg\",\"igorgarybaldi_128.jpg\",\"illyzoren_128.jpg\",\"ilya_pestov_128.jpg\",\"imammuht_128.jpg\",\"imcoding_128.jpg\",\"imomenui_128.jpg\",\"imsoper_128.jpg\",\"increase_128.jpg\",\"incubo82_128.jpg\",\"instalox_128.jpg\",\"ionuss_128.jpg\",\"ipavelek_128.jpg\",\"iqbalperkasa_128.jpg\",\"iqonicd_128.jpg\",\"irae_128.jpg\",\"isaacfifth_128.jpg\",\"isacosta_128.jpg\",\"ismail_biltagi_128.jpg\",\"isnifer_128.jpg\",\"itolmach_128.jpg\",\"itsajimithing_128.jpg\",\"itskawsar_128.jpg\",\"itstotallyamy_128.jpg\",\"ivanfilipovbg_128.jpg\",\"j04ntoh_128.jpg\",\"j2deme_128.jpg\",\"j_drake__128.jpg\",\"jackiesaik_128.jpg\",\"jacksonlatka_128.jpg\",\"jacobbennett_128.jpg\",\"jagan123_128.jpg\",\"jakemoore_128.jpg\",\"jamiebrittain_128.jpg\",\"janpalounek_128.jpg\",\"jarjan_128.jpg\",\"jarsen_128.jpg\",\"jasonmarkjones_128.jpg\",\"javorszky_128.jpg\",\"jay_wilburn_128.jpg\",\"jayphen_128.jpg\",\"jayrobinson_128.jpg\",\"jcubic_128.jpg\",\"jedbridges_128.jpg\",\"jefffis_128.jpg\",\"jeffgolenski_128.jpg\",\"jehnglynn_128.jpg\",\"jennyshen_128.jpg\",\"jennyyo_128.jpg\",\"jeremery_128.jpg\",\"jeremiaha_128.jpg\",\"jeremiespoken_128.jpg\",\"jeremymouton_128.jpg\",\"jeremyshimko_128.jpg\",\"jeremyworboys_128.jpg\",\"jerrybai1907_128.jpg\",\"jervo_128.jpg\",\"jesseddy_128.jpg\",\"jffgrdnr_128.jpg\",\"jghyllebert_128.jpg\",\"jimmuirhead_128.jpg\",\"jitachi_128.jpg\",\"jjshaw14_128.jpg\",\"jjsiii_128.jpg\",\"jlsolerdeltoro_128.jpg\",\"jm_denis_128.jpg\",\"jmfsocial_128.jpg\",\"jmillspaysbills_128.jpg\",\"jnmnrd_128.jpg\",\"joannefournier_128.jpg\",\"joaoedumedeiros_128.jpg\",\"jodytaggart_128.jpg\",\"joe_black_128.jpg\",\"joelcipriano_128.jpg\",\"joelhelin_128.jpg\",\"joemdesign_128.jpg\",\"joetruesdell_128.jpg\",\"joeymurdah_128.jpg\",\"johannesneu_128.jpg\",\"johncafazza_128.jpg\",\"johndezember_128.jpg\",\"johnriordan_128.jpg\",\"johnsmithagency_128.jpg\",\"joki4_128.jpg\",\"jomarmen_128.jpg\",\"jonathansimmons_128.jpg\",\"jonkspr_128.jpg\",\"jonsgotwood_128.jpg\",\"jordyvdboom_128.jpg\",\"joreira_128.jpg\",\"josecarlospsh_128.jpg\",\"josemarques_128.jpg\",\"josep_martins_128.jpg\",\"josevnclch_128.jpg\",\"joshaustin_128.jpg\",\"joshhemsley_128.jpg\",\"joshmedeski_128.jpg\",\"joshuaraichur_128.jpg\",\"joshuasortino_128.jpg\",\"jpenico_128.jpg\",\"jpscribbles_128.jpg\",\"jqiuss_128.jpg\",\"juamperro_128.jpg\",\"juangomezw_128.jpg\",\"juanmamartinez_128.jpg\",\"juaumlol_128.jpg\",\"judzhin_miles_128.jpg\",\"justinrgraham_128.jpg\",\"justinrhee_128.jpg\",\"justinrob_128.jpg\",\"justme_timothyg_128.jpg\",\"jwalter14_128.jpg\",\"jydesign_128.jpg\",\"kaelifa_128.jpg\",\"kalmerrautam_128.jpg\",\"kamal_chaneman_128.jpg\",\"kanickairaj_128.jpg\",\"kapaluccio_128.jpg\",\"karalek_128.jpg\",\"karlkanall_128.jpg\",\"karolkrakowiak__128.jpg\",\"karsh_128.jpg\",\"karthipanraj_128.jpg\",\"kaspernordkvist_128.jpg\",\"katiemdaly_128.jpg\",\"kaysix_dizzy_128.jpg\",\"kazaky999_128.jpg\",\"kennyadr_128.jpg\",\"kerem_128.jpg\",\"kerihenare_128.jpg\",\"keryilmaz_128.jpg\",\"kevinjohndayy_128.jpg\",\"kevinoh_128.jpg\",\"kevka_128.jpg\",\"keyuri85_128.jpg\",\"kianoshp_128.jpg\",\"kijanmaharjan_128.jpg\",\"kikillo_128.jpg\",\"kimcool_128.jpg\",\"kinday_128.jpg\",\"kirangopal_128.jpg\",\"kiwiupover_128.jpg\",\"kkusaa_128.jpg\",\"klefue_128.jpg\",\"klimmka_128.jpg\",\"knilob_128.jpg\",\"kohette_128.jpg\",\"kojourin_128.jpg\",\"kolage_128.jpg\",\"kolmarlopez_128.jpg\",\"kolsvein_128.jpg\",\"konus_128.jpg\",\"koridhandy_128.jpg\",\"kosmar_128.jpg\",\"kostaspt_128.jpg\",\"krasnoukhov_128.jpg\",\"krystalfister_128.jpg\",\"kucingbelang4_128.jpg\",\"kudretkeskin_128.jpg\",\"kuldarkalvik_128.jpg\",\"kumarrajan12123_128.jpg\",\"kurafire_128.jpg\",\"kurtinc_128.jpg\",\"kushsolitary_128.jpg\",\"kvasnic_128.jpg\",\"ky_128.jpg\",\"kylefoundry_128.jpg\",\"kylefrost_128.jpg\",\"laasli_128.jpg\",\"lanceguyatt_128.jpg\",\"langate_128.jpg\",\"larrybolt_128.jpg\",\"larrygerard_128.jpg\",\"laurengray_128.jpg\",\"lawlbwoy_128.jpg\",\"layerssss_128.jpg\",\"leandrovaranda_128.jpg\",\"lebinoclard_128.jpg\",\"lebronjennan_128.jpg\",\"leehambley_128.jpg\",\"leeiio_128.jpg\",\"leemunroe_128.jpg\",\"leonfedotov_128.jpg\",\"lepetitogre_128.jpg\",\"lepinski_128.jpg\",\"levisan_128.jpg\",\"lewisainslie_128.jpg\",\"lhausermann_128.jpg\",\"liminha_128.jpg\",\"lingeswaran_128.jpg\",\"linkibol_128.jpg\",\"linux29_128.jpg\",\"lisovsky_128.jpg\",\"llun_128.jpg\",\"lmjabreu_128.jpg\",\"loganjlambert_128.jpg\",\"logorado_128.jpg\",\"lokesh_coder_128.jpg\",\"lonesomelemon_128.jpg\",\"longlivemyword_128.jpg\",\"looneydoodle_128.jpg\",\"lososina_128.jpg\",\"louis_currie_128.jpg\",\"low_res_128.jpg\",\"lowie_128.jpg\",\"lu4sh1i_128.jpg\",\"ludwiczakpawel_128.jpg\",\"luxe_128.jpg\",\"lvovenok_128.jpg\",\"m4rio_128.jpg\",\"m_kalibry_128.jpg\",\"ma_tiax_128.jpg\",\"mactopus_128.jpg\",\"macxim_128.jpg\",\"madcampos_128.jpg\",\"madebybrenton_128.jpg\",\"madebyvadim_128.jpg\",\"madewulf_128.jpg\",\"madshensel_128.jpg\",\"madysondesigns_128.jpg\",\"magoo04_128.jpg\",\"magugzbrand2d_128.jpg\",\"mahdif_128.jpg\",\"mahmoudmetwally_128.jpg\",\"maikelk_128.jpg\",\"maiklam_128.jpg\",\"malgordon_128.jpg\",\"malykhinv_128.jpg\",\"mandalareopens_128.jpg\",\"manekenthe_128.jpg\",\"mangosango_128.jpg\",\"manigm_128.jpg\",\"marakasina_128.jpg\",\"marciotoledo_128.jpg\",\"marclgonzales_128.jpg\",\"marcobarbosa_128.jpg\",\"marcomano__128.jpg\",\"marcoramires_128.jpg\",\"marcusgorillius_128.jpg\",\"markjenkins_128.jpg\",\"marklamb_128.jpg\",\"markolschesky_128.jpg\",\"markretzloff_128.jpg\",\"markwienands_128.jpg\",\"marlinjayakody_128.jpg\",\"marosholly_128.jpg\",\"marrimo_128.jpg\",\"marshallchen__128.jpg\",\"martinansty_128.jpg\",\"martip07_128.jpg\",\"mashaaaaal_128.jpg\",\"mastermindesign_128.jpg\",\"matbeedotcom_128.jpg\",\"mateaodviteza_128.jpg\",\"matkins_128.jpg\",\"matt3224_128.jpg\",\"mattbilotti_128.jpg\",\"mattdetails_128.jpg\",\"matthewkay__128.jpg\",\"mattlat_128.jpg\",\"mattsapii_128.jpg\",\"mauriolg_128.jpg\",\"maximseshuk_128.jpg\",\"maximsorokin_128.jpg\",\"maxlinderman_128.jpg\",\"maz_128.jpg\",\"mbilalsiddique1_128.jpg\",\"mbilderbach_128.jpg\",\"mcflydesign_128.jpg\",\"mds_128.jpg\",\"mdsisto_128.jpg\",\"meelford_128.jpg\",\"megdraws_128.jpg\",\"mekal_128.jpg\",\"meln1ks_128.jpg\",\"melvindidit_128.jpg\",\"mfacchinello_128.jpg\",\"mgonto_128.jpg\",\"mhaligowski_128.jpg\",\"mhesslow_128.jpg\",\"mhudobivnik_128.jpg\",\"michaelabehsera_128.jpg\",\"michaelbrooksjr_128.jpg\",\"michaelcolenso_128.jpg\",\"michaelcomiskey_128.jpg\",\"michaelkoper_128.jpg\",\"michaelmartinho_128.jpg\",\"michalhron_128.jpg\",\"michigangraham_128.jpg\",\"michzen_128.jpg\",\"mighty55_128.jpg\",\"miguelkooreman_128.jpg\",\"miguelmendes_128.jpg\",\"mikaeljorhult_128.jpg\",\"mikebeecham_128.jpg\",\"mikemai2awesome_128.jpg\",\"millinet_128.jpg\",\"mirfanqureshi_128.jpg\",\"missaaamy_128.jpg\",\"mizhgan_128.jpg\",\"mizko_128.jpg\",\"mkginfo_128.jpg\",\"mocabyte_128.jpg\",\"mohanrohith_128.jpg\",\"moscoz_128.jpg\",\"motionthinks_128.jpg\",\"moynihan_128.jpg\",\"mr_shiznit_128.jpg\",\"mr_subtle_128.jpg\",\"mrebay007_128.jpg\",\"mrjamesnoble_128.jpg\",\"mrmartineau_128.jpg\",\"mrxloka_128.jpg\",\"mslarkina_128.jpg\",\"msveet_128.jpg\",\"mtolokonnikov_128.jpg\",\"mufaddal_mw_128.jpg\",\"mugukamil_128.jpg\",\"muridrahhal_128.jpg\",\"muringa_128.jpg\",\"murrayswift_128.jpg\",\"mutlu82_128.jpg\",\"mutu_krish_128.jpg\",\"mvdheuvel_128.jpg\",\"mwarkentin_128.jpg\",\"myastro_128.jpg\",\"mylesb_128.jpg\",\"mymyboy_128.jpg\",\"n1ght_coder_128.jpg\",\"n3dmax_128.jpg\",\"n_tassone_128.jpg\",\"nacho_128.jpg\",\"naitanamoreno_128.jpg\",\"namankreative_128.jpg\",\"nandini_m_128.jpg\",\"nasirwd_128.jpg\",\"nastya_mane_128.jpg\",\"nateschulte_128.jpg\",\"nathalie_fs_128.jpg\",\"naupintos_128.jpg\",\"nbirckel_128.jpg\",\"nckjrvs_128.jpg\",\"necodymiconer_128.jpg\",\"nehfy_128.jpg\",\"nellleo_128.jpg\",\"nelshd_128.jpg\",\"nelsonjoyce_128.jpg\",\"nemanjaivanovic_128.jpg\",\"nepdud_128.jpg\",\"nerdgr8_128.jpg\",\"nerrsoft_128.jpg\",\"nessoila_128.jpg\",\"netonet_il_128.jpg\",\"newbrushes_128.jpg\",\"nfedoroff_128.jpg\",\"nickfratter_128.jpg\",\"nicklacke_128.jpg\",\"nicolai_larsen_128.jpg\",\"nicolasfolliot_128.jpg\",\"nicoleglynn_128.jpg\",\"nicollerich_128.jpg\",\"nilshelmersson_128.jpg\",\"nilshoenson_128.jpg\",\"ninjad3m0_128.jpg\",\"nitinhayaran_128.jpg\",\"nomidesigns_128.jpg\",\"normanbox_128.jpg\",\"notbadart_128.jpg\",\"noufalibrahim_128.jpg\",\"noxdzine_128.jpg\",\"nsamoylov_128.jpg\",\"ntfblog_128.jpg\",\"nutzumi_128.jpg\",\"nvkznemo_128.jpg\",\"nwdsha_128.jpg\",\"nyancecom_128.jpg\",\"oaktreemedia_128.jpg\",\"okandungel_128.jpg\",\"okansurreel_128.jpg\",\"okcoker_128.jpg\",\"oksanafrewer_128.jpg\",\"okseanjay_128.jpg\",\"oktayelipek_128.jpg\",\"olaolusoga_128.jpg\",\"olgary_128.jpg\",\"omnizya_128.jpg\",\"ooomz_128.jpg\",\"operatino_128.jpg\",\"opnsrce_128.jpg\",\"orkuncaylar_128.jpg\",\"oscarowusu_128.jpg\",\"oskamaya_128.jpg\",\"oskarlevinson_128.jpg\",\"osmanince_128.jpg\",\"osmond_128.jpg\",\"ostirbu_128.jpg\",\"osvaldas_128.jpg\",\"otozk_128.jpg\",\"ovall_128.jpg\",\"overcloacked_128.jpg\",\"overra_128.jpg\",\"panchajanyag_128.jpg\",\"panghal0_128.jpg\",\"patrickcoombe_128.jpg\",\"paulfarino_128.jpg\",\"pcridesagain_128.jpg\",\"peachananr_128.jpg\",\"pechkinator_128.jpg\",\"peejfancher_128.jpg\",\"pehamondello_128.jpg\",\"perfectflow_128.jpg\",\"perretmagali_128.jpg\",\"petar_prog_128.jpg\",\"petebernardo_128.jpg\",\"peter576_128.jpg\",\"peterlandt_128.jpg\",\"petrangr_128.jpg\",\"phillapier_128.jpg\",\"picard102_128.jpg\",\"pierre_nel_128.jpg\",\"pierrestoffe_128.jpg\",\"pifagor_128.jpg\",\"pixage_128.jpg\",\"plasticine_128.jpg\",\"plbabin_128.jpg\",\"pmeissner_128.jpg\",\"polarity_128.jpg\",\"ponchomendivil_128.jpg\",\"poormini_128.jpg\",\"popey_128.jpg\",\"posterjob_128.jpg\",\"praveen_vijaya_128.jpg\",\"prheemo_128.jpg\",\"primozcigler_128.jpg\",\"prinzadi_128.jpg\",\"privetwagner_128.jpg\",\"prrstn_128.jpg\",\"psaikali_128.jpg\",\"psdesignuk_128.jpg\",\"puzik_128.jpg\",\"pyronite_128.jpg\",\"quailandquasar_128.jpg\",\"r_garcia_128.jpg\",\"r_oy_128.jpg\",\"rachelreveley_128.jpg\",\"rahmeen_128.jpg\",\"ralph_lam_128.jpg\",\"ramanathan_pdy_128.jpg\",\"randomlies_128.jpg\",\"rangafangs_128.jpg\",\"raphaelnikson_128.jpg\",\"raquelwilson_128.jpg\",\"ratbus_128.jpg\",\"rawdiggie_128.jpg\",\"rdbannon_128.jpg\",\"rdsaunders_128.jpg\",\"reabo101_128.jpg\",\"reetajayendra_128.jpg\",\"rehatkathuria_128.jpg\",\"reideiredale_128.jpg\",\"renbyrd_128.jpg\",\"rez___a_128.jpg\",\"ricburton_128.jpg\",\"richardgarretts_128.jpg\",\"richwild_128.jpg\",\"rickdt_128.jpg\",\"rickyyean_128.jpg\",\"rikas_128.jpg\",\"ripplemdk_128.jpg\",\"rmlewisuk_128.jpg\",\"rob_thomas10_128.jpg\",\"robbschiller_128.jpg\",\"robergd_128.jpg\",\"robinclediere_128.jpg\",\"robinlayfield_128.jpg\",\"robturlinckx_128.jpg\",\"rodnylobos_128.jpg\",\"rohixx_128.jpg\",\"romanbulah_128.jpg\",\"roxanejammet_128.jpg\",\"roybarberuk_128.jpg\",\"rpatey_128.jpg\",\"rpeezy_128.jpg\",\"rtgibbons_128.jpg\",\"rtyukmaev_128.jpg\",\"rude_128.jpg\",\"ruehldesign_128.jpg\",\"runningskull_128.jpg\",\"russell_baylis_128.jpg\",\"russoedu_128.jpg\",\"ruzinav_128.jpg\",\"rweve_128.jpg\",\"ryandownie_128.jpg\",\"ryanjohnson_me_128.jpg\",\"ryankirkman_128.jpg\",\"ryanmclaughlin_128.jpg\",\"ryhanhassan_128.jpg\",\"ryuchi311_128.jpg\",\"s4f1_128.jpg\",\"saarabpreet_128.jpg\",\"sachacorazzi_128.jpg\",\"sachingawas_128.jpg\",\"safrankov_128.jpg\",\"sainraja_128.jpg\",\"salimianoff_128.jpg\",\"salleedesign_128.jpg\",\"salvafc_128.jpg\",\"samgrover_128.jpg\",\"samihah_128.jpg\",\"samscouto_128.jpg\",\"samuelkraft_128.jpg\",\"sandywoodruff_128.jpg\",\"sangdth_128.jpg\",\"santi_urso_128.jpg\",\"saschadroste_128.jpg\",\"saschamt_128.jpg\",\"sasha_shestakov_128.jpg\",\"saulihirvi_128.jpg\",\"sawalazar_128.jpg\",\"sawrb_128.jpg\",\"sbtransparent_128.jpg\",\"scips_128.jpg\",\"scott_riley_128.jpg\",\"scottfeltham_128.jpg\",\"scottgallant_128.jpg\",\"scottiedude_128.jpg\",\"scottkclark_128.jpg\",\"scrapdnb_128.jpg\",\"sdidonato_128.jpg\",\"sebashton_128.jpg\",\"sementiy_128.jpg\",\"serefka_128.jpg\",\"sergeyalmone_128.jpg\",\"sergeysafonov_128.jpg\",\"sethlouey_128.jpg\",\"seyedhossein1_128.jpg\",\"sgaurav_baghel_128.jpg\",\"shadeed9_128.jpg\",\"shalt0ni_128.jpg\",\"shaneIxD_128.jpg\",\"shanehudson_128.jpg\",\"sharvin_128.jpg\",\"shesgared_128.jpg\",\"shinze_128.jpg\",\"shoaib253_128.jpg\",\"shojberg_128.jpg\",\"shvelo96_128.jpg\",\"silv3rgvn_128.jpg\",\"silvanmuhlemann_128.jpg\",\"simobenso_128.jpg\",\"sindresorhus_128.jpg\",\"sircalebgrove_128.jpg\",\"skkirilov_128.jpg\",\"slowspock_128.jpg\",\"smaczny_128.jpg\",\"smalonso_128.jpg\",\"smenov_128.jpg\",\"snowshade_128.jpg\",\"snowwrite_128.jpg\",\"sokaniwaal_128.jpg\",\"solid_color_128.jpg\",\"souperphly_128.jpg\",\"souuf_128.jpg\",\"sovesove_128.jpg\",\"soyjavi_128.jpg\",\"spacewood__128.jpg\",\"spbroma_128.jpg\",\"spedwig_128.jpg\",\"sprayaga_128.jpg\",\"sreejithexp_128.jpg\",\"ssbb_me_128.jpg\",\"ssiskind_128.jpg\",\"sta1ex_128.jpg\",\"stalewine_128.jpg\",\"stan_128.jpg\",\"stayuber_128.jpg\",\"stefanotirloni_128.jpg\",\"stefanozoffoli_128.jpg\",\"stefooo_128.jpg\",\"stefvdham_128.jpg\",\"stephcoue_128.jpg\",\"sterlingrules_128.jpg\",\"stevedesigner_128.jpg\",\"steynviljoen_128.jpg\",\"strikewan_128.jpg\",\"stushona_128.jpg\",\"sulaqo_128.jpg\",\"sunlandictwin_128.jpg\",\"sunshinedgirl_128.jpg\",\"superoutman_128.jpg\",\"supervova_128.jpg\",\"supjoey_128.jpg\",\"suprb_128.jpg\",\"sur4dye_128.jpg\",\"surgeonist_128.jpg\",\"suribbles_128.jpg\",\"svenlen_128.jpg\",\"swaplord_128.jpg\",\"sweetdelisa_128.jpg\",\"switmer777_128.jpg\",\"swooshycueb_128.jpg\",\"sydlawrence_128.jpg\",\"syropian_128.jpg\",\"tanveerrao_128.jpg\",\"taybenlor_128.jpg\",\"taylorling_128.jpg\",\"tbakdesigns_128.jpg\",\"teddyzetterlund_128.jpg\",\"teeragit_128.jpg\",\"tereshenkov_128.jpg\",\"terpimost_128.jpg\",\"terrorpixel_128.jpg\",\"terryxlife_128.jpg\",\"teylorfeliz_128.jpg\",\"tgerken_128.jpg\",\"tgormtx_128.jpg\",\"thaisselenator__128.jpg\",\"thaodang17_128.jpg\",\"thatonetommy_128.jpg\",\"the_purplebunny_128.jpg\",\"the_winslet_128.jpg\",\"thedamianhdez_128.jpg\",\"thedjpetersen_128.jpg\",\"thehacker_128.jpg\",\"thekevinjones_128.jpg\",\"themadray_128.jpg\",\"themikenagle_128.jpg\",\"themrdave_128.jpg\",\"theonlyzeke_128.jpg\",\"therealmarvin_128.jpg\",\"thewillbeard_128.jpg\",\"thiagovernetti_128.jpg\",\"thibaut_re_128.jpg\",\"thierrykoblentz_128.jpg\",\"thierrymeier__128.jpg\",\"thimo_cz_128.jpg\",\"thinkleft_128.jpg\",\"thomasgeisen_128.jpg\",\"thomasschrijer_128.jpg\",\"timgthomas_128.jpg\",\"timmillwood_128.jpg\",\"timothycd_128.jpg\",\"timpetricola_128.jpg\",\"tjrus_128.jpg\",\"to_soham_128.jpg\",\"tobysaxon_128.jpg\",\"toddrew_128.jpg\",\"tom_even_128.jpg\",\"tomas_janousek_128.jpg\",\"tonymillion_128.jpg\",\"traneblow_128.jpg\",\"travis_arnold_128.jpg\",\"travishines_128.jpg\",\"tristanlegros_128.jpg\",\"trubeatto_128.jpg\",\"trueblood_33_128.jpg\",\"tumski_128.jpg\",\"tur8le_128.jpg\",\"turkutuuli_128.jpg\",\"tweetubhai_128.jpg\",\"twittypork_128.jpg\",\"txcx_128.jpg\",\"uberschizo_128.jpg\",\"ultragex_128.jpg\",\"umurgdk_128.jpg\",\"unterdreht_128.jpg\",\"urrutimeoli_128.jpg\",\"uxalex_128.jpg\",\"uxpiper_128.jpg\",\"uxward_128.jpg\",\"vanchesz_128.jpg\",\"vaughanmoffitt_128.jpg\",\"vc27_128.jpg\",\"vicivadeline_128.jpg\",\"victorDubugras_128.jpg\",\"victor_haydin_128.jpg\",\"victordeanda_128.jpg\",\"victorerixon_128.jpg\",\"victorquinn_128.jpg\",\"victorstuber_128.jpg\",\"vigobronx_128.jpg\",\"vijaykarthik_128.jpg\",\"vikashpathak18_128.jpg\",\"vikasvinfotech_128.jpg\",\"vimarethomas_128.jpg\",\"vinciarts_128.jpg\",\"vitor376_128.jpg\",\"vitorleal_128.jpg\",\"vivekprvr_128.jpg\",\"vj_demien_128.jpg\",\"vladarbatov_128.jpg\",\"vladimirdevic_128.jpg\",\"vladyn_128.jpg\",\"vlajki_128.jpg\",\"vm_f_128.jpg\",\"vocino_128.jpg\",\"vonachoo_128.jpg\",\"vovkasolovev_128.jpg\",\"vytautas_a_128.jpg\",\"waghner_128.jpg\",\"wake_gs_128.jpg\",\"we_social_128.jpg\",\"wearesavas_128.jpg\",\"weavermedia_128.jpg\",\"webtanya_128.jpg\",\"weglov_128.jpg\",\"wegotvices_128.jpg\",\"wesleytrankin_128.jpg\",\"wikiziner_128.jpg\",\"wiljanslofstra_128.jpg\",\"wim1k_128.jpg\",\"wintopia_128.jpg\",\"woodsman001_128.jpg\",\"woodydotmx_128.jpg\",\"wtrsld_128.jpg\",\"xadhix_128.jpg\",\"xalionmalik_128.jpg\",\"xamorep_128.jpg\",\"xiel_128.jpg\",\"xilantra_128.jpg\",\"xravil_128.jpg\",\"xripunov_128.jpg\",\"xtopherpaul_128.jpg\",\"y2graphic_128.jpg\",\"yalozhkin_128.jpg\",\"yassiryahya_128.jpg\",\"yayteejay_128.jpg\",\"yecidsm_128.jpg\",\"yehudab_128.jpg\",\"yesmeck_128.jpg\",\"yigitpinarbasi_128.jpg\",\"zackeeler_128.jpg\",\"zaki3d_128.jpg\",\"zauerkraut_128.jpg\",\"zforrester_128.jpg\",\"zvchkelly_128.jpg\"]},{}],134:[function(e,t,n){t.exports=[\"com\",\"biz\",\"info\",\"name\",\"net\",\"org\"]},{}],135:[function(e,t,n){t.exports=[\"example.org\",\"example.com\",\"example.net\"]},{}],136:[function(e,t,n){t.exports=[\"gmail.com\",\"yahoo.com\",\"hotmail.com\"]},{}],137:[function(e,t,n){var a={};t.exports=a,a.free_email=e(\"./free_email\"),a.example_email=e(\"./example_email\"),a.domain_suffix=e(\"./domain_suffix\"),a.avatar_uri=e(\"./avatar_uri\")},{\"./avatar_uri\":133,\"./domain_suffix\":134,\"./example_email\":135,\"./free_email\":136}],138:[function(e,t,n){var a={};t.exports=a,a.words=e(\"./words\"),a.supplemental=e(\"./supplemental\")},{\"./supplemental\":139,\"./words\":140}],139:[function(e,t,n){t.exports=[\"abbas\",\"abduco\",\"abeo\",\"abscido\",\"absconditus\",\"absens\",\"absorbeo\",\"absque\",\"abstergo\",\"absum\",\"abundans\",\"abutor\",\"accedo\",\"accendo\",\"acceptus\",\"accipio\",\"accommodo\",\"accusator\",\"acer\",\"acerbitas\",\"acervus\",\"acidus\",\"acies\",\"acquiro\",\"acsi\",\"adamo\",\"adaugeo\",\"addo\",\"adduco\",\"ademptio\",\"adeo\",\"adeptio\",\"adfectus\",\"adfero\",\"adficio\",\"adflicto\",\"adhaero\",\"adhuc\",\"adicio\",\"adimpleo\",\"adinventitias\",\"adipiscor\",\"adiuvo\",\"administratio\",\"admiratio\",\"admitto\",\"admoneo\",\"admoveo\",\"adnuo\",\"adopto\",\"adsidue\",\"adstringo\",\"adsuesco\",\"adsum\",\"adulatio\",\"adulescens\",\"adultus\",\"aduro\",\"advenio\",\"adversus\",\"advoco\",\"aedificium\",\"aeger\",\"aegre\",\"aegrotatio\",\"aegrus\",\"aeneus\",\"aequitas\",\"aequus\",\"aer\",\"aestas\",\"aestivus\",\"aestus\",\"aetas\",\"aeternus\",\"ager\",\"aggero\",\"aggredior\",\"agnitio\",\"agnosco\",\"ago\",\"ait\",\"aiunt\",\"alienus\",\"alii\",\"alioqui\",\"aliqua\",\"alius\",\"allatus\",\"alo\",\"alter\",\"altus\",\"alveus\",\"amaritudo\",\"ambitus\",\"ambulo\",\"amicitia\",\"amiculum\",\"amissio\",\"amita\",\"amitto\",\"amo\",\"amor\",\"amoveo\",\"amplexus\",\"amplitudo\",\"amplus\",\"ancilla\",\"angelus\",\"angulus\",\"angustus\",\"animadverto\",\"animi\",\"animus\",\"annus\",\"anser\",\"ante\",\"antea\",\"antepono\",\"antiquus\",\"aperio\",\"aperte\",\"apostolus\",\"apparatus\",\"appello\",\"appono\",\"appositus\",\"approbo\",\"apto\",\"aptus\",\"apud\",\"aqua\",\"ara\",\"aranea\",\"arbitro\",\"arbor\",\"arbustum\",\"arca\",\"arceo\",\"arcesso\",\"arcus\",\"argentum\",\"argumentum\",\"arguo\",\"arma\",\"armarium\",\"armo\",\"aro\",\"ars\",\"articulus\",\"artificiose\",\"arto\",\"arx\",\"ascisco\",\"ascit\",\"asper\",\"aspicio\",\"asporto\",\"assentator\",\"astrum\",\"atavus\",\"ater\",\"atqui\",\"atrocitas\",\"atrox\",\"attero\",\"attollo\",\"attonbitus\",\"auctor\",\"auctus\",\"audacia\",\"audax\",\"audentia\",\"audeo\",\"audio\",\"auditor\",\"aufero\",\"aureus\",\"auris\",\"aurum\",\"aut\",\"autem\",\"autus\",\"auxilium\",\"avaritia\",\"avarus\",\"aveho\",\"averto\",\"avoco\",\"baiulus\",\"balbus\",\"barba\",\"bardus\",\"basium\",\"beatus\",\"bellicus\",\"bellum\",\"bene\",\"beneficium\",\"benevolentia\",\"benigne\",\"bestia\",\"bibo\",\"bis\",\"blandior\",\"bonus\",\"bos\",\"brevis\",\"cado\",\"caecus\",\"caelestis\",\"caelum\",\"calamitas\",\"calcar\",\"calco\",\"calculus\",\"callide\",\"campana\",\"candidus\",\"canis\",\"canonicus\",\"canto\",\"capillus\",\"capio\",\"capitulus\",\"capto\",\"caput\",\"carbo\",\"carcer\",\"careo\",\"caries\",\"cariosus\",\"caritas\",\"carmen\",\"carpo\",\"carus\",\"casso\",\"caste\",\"casus\",\"catena\",\"caterva\",\"cattus\",\"cauda\",\"causa\",\"caute\",\"caveo\",\"cavus\",\"cedo\",\"celebrer\",\"celer\",\"celo\",\"cena\",\"cenaculum\",\"ceno\",\"censura\",\"centum\",\"cerno\",\"cernuus\",\"certe\",\"certo\",\"certus\",\"cervus\",\"cetera\",\"charisma\",\"chirographum\",\"cibo\",\"cibus\",\"cicuta\",\"cilicium\",\"cimentarius\",\"ciminatio\",\"cinis\",\"circumvenio\",\"cito\",\"civis\",\"civitas\",\"clam\",\"clamo\",\"claro\",\"clarus\",\"claudeo\",\"claustrum\",\"clementia\",\"clibanus\",\"coadunatio\",\"coaegresco\",\"coepi\",\"coerceo\",\"cogito\",\"cognatus\",\"cognomen\",\"cogo\",\"cohaero\",\"cohibeo\",\"cohors\",\"colligo\",\"colloco\",\"collum\",\"colo\",\"color\",\"coma\",\"combibo\",\"comburo\",\"comedo\",\"comes\",\"cometes\",\"comis\",\"comitatus\",\"commemoro\",\"comminor\",\"commodo\",\"communis\",\"comparo\",\"compello\",\"complectus\",\"compono\",\"comprehendo\",\"comptus\",\"conatus\",\"concedo\",\"concido\",\"conculco\",\"condico\",\"conduco\",\"confero\",\"confido\",\"conforto\",\"confugo\",\"congregatio\",\"conicio\",\"coniecto\",\"conitor\",\"coniuratio\",\"conor\",\"conqueror\",\"conscendo\",\"conservo\",\"considero\",\"conspergo\",\"constans\",\"consuasor\",\"contabesco\",\"contego\",\"contigo\",\"contra\",\"conturbo\",\"conventus\",\"convoco\",\"copia\",\"copiose\",\"cornu\",\"corona\",\"corpus\",\"correptius\",\"corrigo\",\"corroboro\",\"corrumpo\",\"coruscus\",\"cotidie\",\"crapula\",\"cras\",\"crastinus\",\"creator\",\"creber\",\"crebro\",\"credo\",\"creo\",\"creptio\",\"crepusculum\",\"cresco\",\"creta\",\"cribro\",\"crinis\",\"cruciamentum\",\"crudelis\",\"cruentus\",\"crur\",\"crustulum\",\"crux\",\"cubicularis\",\"cubitum\",\"cubo\",\"cui\",\"cuius\",\"culpa\",\"culpo\",\"cultellus\",\"cultura\",\"cum\",\"cunabula\",\"cunae\",\"cunctatio\",\"cupiditas\",\"cupio\",\"cuppedia\",\"cupressus\",\"cur\",\"cura\",\"curatio\",\"curia\",\"curiositas\",\"curis\",\"curo\",\"curriculum\",\"currus\",\"cursim\",\"curso\",\"cursus\",\"curto\",\"curtus\",\"curvo\",\"curvus\",\"custodia\",\"damnatio\",\"damno\",\"dapifer\",\"debeo\",\"debilito\",\"decens\",\"decerno\",\"decet\",\"decimus\",\"decipio\",\"decor\",\"decretum\",\"decumbo\",\"dedecor\",\"dedico\",\"deduco\",\"defaeco\",\"defendo\",\"defero\",\"defessus\",\"defetiscor\",\"deficio\",\"defigo\",\"defleo\",\"defluo\",\"defungo\",\"degenero\",\"degero\",\"degusto\",\"deinde\",\"delectatio\",\"delego\",\"deleo\",\"delibero\",\"delicate\",\"delinquo\",\"deludo\",\"demens\",\"demergo\",\"demitto\",\"demo\",\"demonstro\",\"demoror\",\"demulceo\",\"demum\",\"denego\",\"denique\",\"dens\",\"denuncio\",\"denuo\",\"deorsum\",\"depereo\",\"depono\",\"depopulo\",\"deporto\",\"depraedor\",\"deprecator\",\"deprimo\",\"depromo\",\"depulso\",\"deputo\",\"derelinquo\",\"derideo\",\"deripio\",\"desidero\",\"desino\",\"desipio\",\"desolo\",\"desparatus\",\"despecto\",\"despirmatio\",\"infit\",\"inflammatio\",\"paens\",\"patior\",\"patria\",\"patrocinor\",\"patruus\",\"pauci\",\"paulatim\",\"pauper\",\"pax\",\"peccatus\",\"pecco\",\"pecto\",\"pectus\",\"pecunia\",\"pecus\",\"peior\",\"pel\",\"ocer\",\"socius\",\"sodalitas\",\"sol\",\"soleo\",\"solio\",\"solitudo\",\"solium\",\"sollers\",\"sollicito\",\"solum\",\"solus\",\"solutio\",\"solvo\",\"somniculosus\",\"somnus\",\"sonitus\",\"sono\",\"sophismata\",\"sopor\",\"sordeo\",\"sortitus\",\"spargo\",\"speciosus\",\"spectaculum\",\"speculum\",\"sperno\",\"spero\",\"spes\",\"spiculum\",\"spiritus\",\"spoliatio\",\"sponte\",\"stabilis\",\"statim\",\"statua\",\"stella\",\"stillicidium\",\"stipes\",\"stips\",\"sto\",\"strenuus\",\"strues\",\"studio\",\"stultus\",\"suadeo\",\"suasoria\",\"sub\",\"subito\",\"subiungo\",\"sublime\",\"subnecto\",\"subseco\",\"substantia\",\"subvenio\",\"succedo\",\"succurro\",\"sufficio\",\"suffoco\",\"suffragium\",\"suggero\",\"sui\",\"sulum\",\"sum\",\"summa\",\"summisse\",\"summopere\",\"sumo\",\"sumptus\",\"supellex\",\"super\",\"suppellex\",\"supplanto\",\"suppono\",\"supra\",\"surculus\",\"surgo\",\"sursum\",\"suscipio\",\"suspendo\",\"sustineo\",\"suus\",\"synagoga\",\"tabella\",\"tabernus\",\"tabesco\",\"tabgo\",\"tabula\",\"taceo\",\"tactus\",\"taedium\",\"talio\",\"talis\",\"talus\",\"tam\",\"tamdiu\",\"tamen\",\"tametsi\",\"tamisium\",\"tamquam\",\"tandem\",\"tantillus\",\"tantum\",\"tardus\",\"tego\",\"temeritas\",\"temperantia\",\"templum\",\"temptatio\",\"tempus\",\"tenax\",\"tendo\",\"teneo\",\"tener\",\"tenuis\",\"tenus\",\"tepesco\",\"tepidus\",\"ter\",\"terebro\",\"teres\",\"terga\",\"tergeo\",\"tergiversatio\",\"tergo\",\"tergum\",\"termes\",\"terminatio\",\"tero\",\"terra\",\"terreo\",\"territo\",\"terror\",\"tersus\",\"tertius\",\"testimonium\",\"texo\",\"textilis\",\"textor\",\"textus\",\"thalassinus\",\"theatrum\",\"theca\",\"thema\",\"theologus\",\"thermae\",\"thesaurus\",\"thesis\",\"thorax\",\"thymbra\",\"thymum\",\"tibi\",\"timidus\",\"timor\",\"titulus\",\"tolero\",\"tollo\",\"tondeo\",\"tonsor\",\"torqueo\",\"torrens\",\"tot\",\"totidem\",\"toties\",\"totus\",\"tracto\",\"trado\",\"traho\",\"trans\",\"tredecim\",\"tremo\",\"trepide\",\"tres\",\"tribuo\",\"tricesimus\",\"triduana\",\"triginta\",\"tripudio\",\"tristis\",\"triumphus\",\"trucido\",\"truculenter\",\"tubineus\",\"tui\",\"tum\",\"tumultus\",\"tunc\",\"turba\",\"turbo\",\"turpe\",\"turpis\",\"tutamen\",\"tutis\",\"tyrannus\",\"uberrime\",\"ubi\",\"ulciscor\",\"ullus\",\"ulterius\",\"ultio\",\"ultra\",\"umbra\",\"umerus\",\"umquam\",\"una\",\"unde\",\"undique\",\"universe\",\"unus\",\"urbanus\",\"urbs\",\"uredo\",\"usitas\",\"usque\",\"ustilo\",\"ustulo\",\"usus\",\"uter\",\"uterque\",\"utilis\",\"utique\",\"utor\",\"utpote\",\"utrimque\",\"utroque\",\"utrum\",\"uxor\",\"vaco\",\"vacuus\",\"vado\",\"vae\",\"valde\",\"valens\",\"valeo\",\"valetudo\",\"validus\",\"vallum\",\"vapulus\",\"varietas\",\"varius\",\"vehemens\",\"vel\",\"velociter\",\"velum\",\"velut\",\"venia\",\"venio\",\"ventito\",\"ventosus\",\"ventus\",\"venustas\",\"ver\",\"verbera\",\"verbum\",\"vere\",\"verecundia\",\"vereor\",\"vergo\",\"veritas\",\"vero\",\"versus\",\"verto\",\"verumtamen\",\"verus\",\"vesco\",\"vesica\",\"vesper\",\"vespillo\",\"vester\",\"vestigium\",\"vestrum\",\"vetus\",\"via\",\"vicinus\",\"vicissitudo\",\"victoria\",\"victus\",\"videlicet\",\"video\",\"viduata\",\"viduo\",\"vigilo\",\"vigor\",\"vilicus\",\"vilis\",\"vilitas\",\"villa\",\"vinco\",\"vinculum\",\"vindico\",\"vinitor\",\"vinum\",\"vir\",\"virga\",\"virgo\",\"viridis\",\"viriliter\",\"virtus\",\"vis\",\"viscus\",\"vita\",\"vitiosus\",\"vitium\",\"vito\",\"vivo\",\"vix\",\"vobis\",\"vociferor\",\"voco\",\"volaticus\",\"volo\",\"volubilis\",\"voluntarius\",\"volup\",\"volutabrum\",\"volva\",\"vomer\",\"vomica\",\"vomito\",\"vorago\",\"vorax\",\"voro\",\"vos\",\"votum\",\"voveo\",\"vox\",\"vulariter\",\"vulgaris\",\"vulgivagus\",\"vulgo\",\"vulgus\",\"vulnero\",\"vulnus\",\"vulpes\",\"vulticulus\",\"vultuosus\",\"xiphias\"]},{}],140:[function(e,t,n){t.exports=[\"alias\",\"consequatur\",\"aut\",\"perferendis\",\"sit\",\"voluptatem\",\"accusantium\",\"doloremque\",\"aperiam\",\"eaque\",\"ipsa\",\"quae\",\"ab\",\"illo\",\"inventore\",\"veritatis\",\"et\",\"quasi\",\"architecto\",\"beatae\",\"vitae\",\"dicta\",\"sunt\",\"explicabo\",\"aspernatur\",\"aut\",\"odit\",\"aut\",\"fugit\",\"sed\",\"quia\",\"consequuntur\",\"magni\",\"dolores\",\"eos\",\"qui\",\"ratione\",\"voluptatem\",\"sequi\",\"nesciunt\",\"neque\",\"dolorem\",\"ipsum\",\"quia\",\"dolor\",\"sit\",\"amet\",\"consectetur\",\"adipisci\",\"velit\",\"sed\",\"quia\",\"non\",\"numquam\",\"eius\",\"modi\",\"tempora\",\"incidunt\",\"ut\",\"labore\",\"et\",\"dolore\",\"magnam\",\"aliquam\",\"quaerat\",\"voluptatem\",\"ut\",\"enim\",\"ad\",\"minima\",\"veniam\",\"quis\",\"nostrum\",\"exercitationem\",\"ullam\",\"corporis\",\"nemo\",\"enim\",\"ipsam\",\"voluptatem\",\"quia\",\"voluptas\",\"sit\",\"suscipit\",\"laboriosam\",\"nisi\",\"ut\",\"aliquid\",\"ex\",\"ea\",\"commodi\",\"consequatur\",\"quis\",\"autem\",\"vel\",\"eum\",\"iure\",\"reprehenderit\",\"qui\",\"in\",\"ea\",\"voluptate\",\"velit\",\"esse\",\"quam\",\"nihil\",\"molestiae\",\"et\",\"iusto\",\"odio\",\"dignissimos\",\"ducimus\",\"qui\",\"blanditiis\",\"praesentium\",\"laudantium\",\"totam\",\"rem\",\"voluptatum\",\"deleniti\",\"atque\",\"corrupti\",\"quos\",\"dolores\",\"et\",\"quas\",\"molestias\",\"excepturi\",\"sint\",\"occaecati\",\"cupiditate\",\"non\",\"provident\",\"sed\",\"ut\",\"perspiciatis\",\"unde\",\"omnis\",\"iste\",\"natus\",\"error\",\"similique\",\"sunt\",\"in\",\"culpa\",\"qui\",\"officia\",\"deserunt\",\"mollitia\",\"animi\",\"id\",\"est\",\"laborum\",\"et\",\"dolorum\",\"fuga\",\"et\",\"harum\",\"quidem\",\"rerum\",\"facilis\",\"est\",\"et\",\"expedita\",\"distinctio\",\"nam\",\"libero\",\"tempore\",\"cum\",\"soluta\",\"nobis\",\"est\",\"eligendi\",\"optio\",\"cumque\",\"nihil\",\"impedit\",\"quo\",\"porro\",\"quisquam\",\"est\",\"qui\",\"minus\",\"id\",\"quod\",\"maxime\",\"placeat\",\"facere\",\"possimus\",\"omnis\",\"voluptas\",\"assumenda\",\"est\",\"omnis\",\"dolor\",\"repellendus\",\"temporibus\",\"autem\",\"quibusdam\",\"et\",\"aut\",\"consequatur\",\"vel\",\"illum\",\"qui\",\"dolorem\",\"eum\",\"fugiat\",\"quo\",\"voluptas\",\"nulla\",\"pariatur\",\"at\",\"vero\",\"eos\",\"et\",\"accusamus\",\"officiis\",\"debitis\",\"aut\",\"rerum\",\"necessitatibus\",\"saepe\",\"eveniet\",\"ut\",\"et\",\"voluptates\",\"repudiandae\",\"sint\",\"et\",\"molestiae\",\"non\",\"recusandae\",\"itaque\",\"earum\",\"rerum\",\"hic\",\"tenetur\",\"a\",\"sapiente\",\"delectus\",\"ut\",\"aut\",\"reiciendis\",\"voluptatibus\",\"maiores\",\"doloribus\",\"asperiores\",\"repellat\"]},{}],141:[function(e,t,n){t.exports=[\"Rock\",\"Metal\",\"Pop\",\"Electronic\",\"Folk\",\"World\",\"Country\",\"Jazz\",\"Funk\",\"Soul\",\"Hip Hop\",\"Classical\",\"Latin\",\"Reggae\",\"Stage And Screen\",\"Blues\",\"Non Music\",\"Rap\"]},{}],142:[function(e,t,n){var a={};t.exports=a,a.genre=e(\"./genre\")},{\"./genre\":141}],143:[function(e,t,n){t.exports=[\"Female\",\"Male\"]},{}],144:[function(e,t,n){t.exports=[\"Mary\",\"Patricia\",\"Linda\",\"Barbara\",\"Elizabeth\",\"Jennifer\",\"Maria\",\"Susan\",\"Margaret\",\"Dorothy\",\"Lisa\",\"Nancy\",\"Karen\",\"Betty\",\"Helen\",\"Sandra\",\"Donna\",\"Carol\",\"Ruth\",\"Sharon\",\"Michelle\",\"Laura\",\"Sarah\",\"Kimberly\",\"Deborah\",\"Jessica\",\"Shirley\",\"Cynthia\",\"Angela\",\"Melissa\",\"Brenda\",\"Amy\",\"Anna\",\"Rebecca\",\"Virginia\",\"Kathleen\",\"Pamela\",\"Martha\",\"Debra\",\"Amanda\",\"Stephanie\",\"Carolyn\",\"Christine\",\"Marie\",\"Janet\",\"Catherine\",\"Frances\",\"Ann\",\"Joyce\",\"Diane\",\"Alice\",\"Julie\",\"Heather\",\"Teresa\",\"Doris\",\"Gloria\",\"Evelyn\",\"Jean\",\"Cheryl\",\"Mildred\",\"Katherine\",\"Joan\",\"Ashley\",\"Judith\",\"Rose\",\"Janice\",\"Kelly\",\"Nicole\",\"Judy\",\"Christina\",\"Kathy\",\"Theresa\",\"Beverly\",\"Denise\",\"Tammy\",\"Irene\",\"Jane\",\"Lori\",\"Rachel\",\"Marilyn\",\"Andrea\",\"Kathryn\",\"Louise\",\"Sara\",\"Anne\",\"Jacqueline\",\"Wanda\",\"Bonnie\",\"Julia\",\"Ruby\",\"Lois\",\"Tina\",\"Phyllis\",\"Norma\",\"Paula\",\"Diana\",\"Annie\",\"Lillian\",\"Emily\",\"Robin\",\"Peggy\",\"Crystal\",\"Gladys\",\"Rita\",\"Dawn\",\"Connie\",\"Florence\",\"Tracy\",\"Edna\",\"Tiffany\",\"Carmen\",\"Rosa\",\"Cindy\",\"Grace\",\"Wendy\",\"Victoria\",\"Edith\",\"Kim\",\"Sherry\",\"Sylvia\",\"Josephine\",\"Thelma\",\"Shannon\",\"Sheila\",\"Ethel\",\"Ellen\",\"Elaine\",\"Marjorie\",\"Carrie\",\"Charlotte\",\"Monica\",\"Esther\",\"Pauline\",\"Emma\",\"Juanita\",\"Anita\",\"Rhonda\",\"Hazel\",\"Amber\",\"Eva\",\"Debbie\",\"April\",\"Leslie\",\"Clara\",\"Lucille\",\"Jamie\",\"Joanne\",\"Eleanor\",\"Valerie\",\"Danielle\",\"Megan\",\"Alicia\",\"Suzanne\",\"Michele\",\"Gail\",\"Bertha\",\"Darlene\",\"Veronica\",\"Jill\",\"Erin\",\"Geraldine\",\"Lauren\",\"Cathy\",\"Joann\",\"Lorraine\",\"Lynn\",\"Sally\",\"Regina\",\"Erica\",\"Beatrice\",\"Dolores\",\"Bernice\",\"Audrey\",\"Yvonne\",\"Annette\",\"June\",\"Samantha\",\"Marion\",\"Dana\",\"Stacy\",\"Ana\",\"Renee\",\"Ida\",\"Vivian\",\"Roberta\",\"Holly\",\"Brittany\",\"Melanie\",\"Loretta\",\"Yolanda\",\"Jeanette\",\"Laurie\",\"Katie\",\"Kristen\",\"Vanessa\",\"Alma\",\"Sue\",\"Elsie\",\"Beth\",\"Jeanne\",\"Vicki\",\"Carla\",\"Tara\",\"Rosemary\",\"Eileen\",\"Terri\",\"Gertrude\",\"Lucy\",\"Tonya\",\"Ella\",\"Stacey\",\"Wilma\",\"Gina\",\"Kristin\",\"Jessie\",\"Natalie\",\"Agnes\",\"Vera\",\"Willie\",\"Charlene\",\"Bessie\",\"Delores\",\"Melinda\",\"Pearl\",\"Arlene\",\"Maureen\",\"Colleen\",\"Allison\",\"Tamara\",\"Joy\",\"Georgia\",\"Constance\",\"Lillie\",\"Claudia\",\"Jackie\",\"Marcia\",\"Tanya\",\"Nellie\",\"Minnie\",\"Marlene\",\"Heidi\",\"Glenda\",\"Lydia\",\"Viola\",\"Courtney\",\"Marian\",\"Stella\",\"Caroline\",\"Dora\",\"Jo\",\"Vickie\",\"Mattie\",\"Terry\",\"Maxine\",\"Irma\",\"Mabel\",\"Marsha\",\"Myrtle\",\"Lena\",\"Christy\",\"Deanna\",\"Patsy\",\"Hilda\",\"Gwendolyn\",\"Jennie\",\"Nora\",\"Margie\",\"Nina\",\"Cassandra\",\"Leah\",\"Penny\",\"Kay\",\"Priscilla\",\"Naomi\",\"Carole\",\"Brandy\",\"Olga\",\"Billie\",\"Dianne\",\"Tracey\",\"Leona\",\"Jenny\",\"Felicia\",\"Sonia\",\"Miriam\",\"Velma\",\"Becky\",\"Bobbie\",\"Violet\",\"Kristina\",\"Toni\",\"Misty\",\"Mae\",\"Shelly\",\"Daisy\",\"Ramona\",\"Sherri\",\"Erika\",\"Katrina\",\"Claire\",\"Lindsey\",\"Lindsay\",\"Geneva\",\"Guadalupe\",\"Belinda\",\"Margarita\",\"Sheryl\",\"Cora\",\"Faye\",\"Ada\",\"Natasha\",\"Sabrina\",\"Isabel\",\"Marguerite\",\"Hattie\",\"Harriet\",\"Molly\",\"Cecilia\",\"Kristi\",\"Brandi\",\"Blanche\",\"Sandy\",\"Rosie\",\"Joanna\",\"Iris\",\"Eunice\",\"Angie\",\"Inez\",\"Lynda\",\"Madeline\",\"Amelia\",\"Alberta\",\"Genevieve\",\"Monique\",\"Jodi\",\"Janie\",\"Maggie\",\"Kayla\",\"Sonya\",\"Jan\",\"Lee\",\"Kristine\",\"Candace\",\"Fannie\",\"Maryann\",\"Opal\",\"Alison\",\"Yvette\",\"Melody\",\"Luz\",\"Susie\",\"Olivia\",\"Flora\",\"Shelley\",\"Kristy\",\"Mamie\",\"Lula\",\"Lola\",\"Verna\",\"Beulah\",\"Antoinette\",\"Candice\",\"Juana\",\"Jeannette\",\"Pam\",\"Kelli\",\"Hannah\",\"Whitney\",\"Bridget\",\"Karla\",\"Celia\",\"Latoya\",\"Patty\",\"Shelia\",\"Gayle\",\"Della\",\"Vicky\",\"Lynne\",\"Sheri\",\"Marianne\",\"Kara\",\"Jacquelyn\",\"Erma\",\"Blanca\",\"Myra\",\"Leticia\",\"Pat\",\"Krista\",\"Roxanne\",\"Angelica\",\"Johnnie\",\"Robyn\",\"Francis\",\"Adrienne\",\"Rosalie\",\"Alexandra\",\"Brooke\",\"Bethany\",\"Sadie\",\"Bernadette\",\"Traci\",\"Jody\",\"Kendra\",\"Jasmine\",\"Nichole\",\"Rachael\",\"Chelsea\",\"Mable\",\"Ernestine\",\"Muriel\",\"Marcella\",\"Elena\",\"Krystal\",\"Angelina\",\"Nadine\",\"Kari\",\"Estelle\",\"Dianna\",\"Paulette\",\"Lora\",\"Mona\",\"Doreen\",\"Rosemarie\",\"Angel\",\"Desiree\",\"Antonia\",\"Hope\",\"Ginger\",\"Janis\",\"Betsy\",\"Christie\",\"Freda\",\"Mercedes\",\"Meredith\",\"Lynette\",\"Teri\",\"Cristina\",\"Eula\",\"Leigh\",\"Meghan\",\"Sophia\",\"Eloise\",\"Rochelle\",\"Gretchen\",\"Cecelia\",\"Raquel\",\"Henrietta\",\"Alyssa\",\"Jana\",\"Kelley\",\"Gwen\",\"Kerry\",\"Jenna\",\"Tricia\",\"Laverne\",\"Olive\",\"Alexis\",\"Tasha\",\"Silvia\",\"Elvira\",\"Casey\",\"Delia\",\"Sophie\",\"Kate\",\"Patti\",\"Lorena\",\"Kellie\",\"Sonja\",\"Lila\",\"Lana\",\"Darla\",\"May\",\"Mindy\",\"Essie\",\"Mandy\",\"Lorene\",\"Elsa\",\"Josefina\",\"Jeannie\",\"Miranda\",\"Dixie\",\"Lucia\",\"Marta\",\"Faith\",\"Lela\",\"Johanna\",\"Shari\",\"Camille\",\"Tami\",\"Shawna\",\"Elisa\",\"Ebony\",\"Melba\",\"Ora\",\"Nettie\",\"Tabitha\",\"Ollie\",\"Jaime\",\"Winifred\",\"Kristie\"]},{}],145:[function(e,t,n){t.exports=[\"Aaliyah\",\"Aaron\",\"Abagail\",\"Abbey\",\"Abbie\",\"Abbigail\",\"Abby\",\"Abdiel\",\"Abdul\",\"Abdullah\",\"Abe\",\"Abel\",\"Abelardo\",\"Abigail\",\"Abigale\",\"Abigayle\",\"Abner\",\"Abraham\",\"Ada\",\"Adah\",\"Adalberto\",\"Adaline\",\"Adam\",\"Adan\",\"Addie\",\"Addison\",\"Adela\",\"Adelbert\",\"Adele\",\"Adelia\",\"Adeline\",\"Adell\",\"Adella\",\"Adelle\",\"Aditya\",\"Adolf\",\"Adolfo\",\"Adolph\",\"Adolphus\",\"Adonis\",\"Adrain\",\"Adrian\",\"Adriana\",\"Adrianna\",\"Adriel\",\"Adrien\",\"Adrienne\",\"Afton\",\"Aglae\",\"Agnes\",\"Agustin\",\"Agustina\",\"Ahmad\",\"Ahmed\",\"Aida\",\"Aidan\",\"Aiden\",\"Aileen\",\"Aimee\",\"Aisha\",\"Aiyana\",\"Akeem\",\"Al\",\"Alaina\",\"Alan\",\"Alana\",\"Alanis\",\"Alanna\",\"Alayna\",\"Alba\",\"Albert\",\"Alberta\",\"Albertha\",\"Alberto\",\"Albin\",\"Albina\",\"Alda\",\"Alden\",\"Alec\",\"Aleen\",\"Alejandra\",\"Alejandrin\",\"Alek\",\"Alena\",\"Alene\",\"Alessandra\",\"Alessandro\",\"Alessia\",\"Aletha\",\"Alex\",\"Alexa\",\"Alexander\",\"Alexandra\",\"Alexandre\",\"Alexandrea\",\"Alexandria\",\"Alexandrine\",\"Alexandro\",\"Alexane\",\"Alexanne\",\"Alexie\",\"Alexis\",\"Alexys\",\"Alexzander\",\"Alf\",\"Alfonso\",\"Alfonzo\",\"Alford\",\"Alfred\",\"Alfreda\",\"Alfredo\",\"Ali\",\"Alia\",\"Alice\",\"Alicia\",\"Alisa\",\"Alisha\",\"Alison\",\"Alivia\",\"Aliya\",\"Aliyah\",\"Aliza\",\"Alize\",\"Allan\",\"Allen\",\"Allene\",\"Allie\",\"Allison\",\"Ally\",\"Alphonso\",\"Alta\",\"Althea\",\"Alva\",\"Alvah\",\"Alvena\",\"Alvera\",\"Alverta\",\"Alvina\",\"Alvis\",\"Alyce\",\"Alycia\",\"Alysa\",\"Alysha\",\"Alyson\",\"Alysson\",\"Amalia\",\"Amanda\",\"Amani\",\"Amara\",\"Amari\",\"Amaya\",\"Amber\",\"Ambrose\",\"Amelia\",\"Amelie\",\"Amely\",\"America\",\"Americo\",\"Amie\",\"Amina\",\"Amir\",\"Amira\",\"Amiya\",\"Amos\",\"Amparo\",\"Amy\",\"Amya\",\"Ana\",\"Anabel\",\"Anabelle\",\"Anahi\",\"Anais\",\"Anastacio\",\"Anastasia\",\"Anderson\",\"Andre\",\"Andreane\",\"Andreanne\",\"Andres\",\"Andrew\",\"Andy\",\"Angel\",\"Angela\",\"Angelica\",\"Angelina\",\"Angeline\",\"Angelita\",\"Angelo\",\"Angie\",\"Angus\",\"Anibal\",\"Anika\",\"Anissa\",\"Anita\",\"Aniya\",\"Aniyah\",\"Anjali\",\"Anna\",\"Annabel\",\"Annabell\",\"Annabelle\",\"Annalise\",\"Annamae\",\"Annamarie\",\"Anne\",\"Annetta\",\"Annette\",\"Annie\",\"Ansel\",\"Ansley\",\"Anthony\",\"Antoinette\",\"Antone\",\"Antonetta\",\"Antonette\",\"Antonia\",\"Antonietta\",\"Antonina\",\"Antonio\",\"Antwan\",\"Antwon\",\"Anya\",\"April\",\"Ara\",\"Araceli\",\"Aracely\",\"Arch\",\"Archibald\",\"Ardella\",\"Arden\",\"Ardith\",\"Arely\",\"Ari\",\"Ariane\",\"Arianna\",\"Aric\",\"Ariel\",\"Arielle\",\"Arjun\",\"Arlene\",\"Arlie\",\"Arlo\",\"Armand\",\"Armando\",\"Armani\",\"Arnaldo\",\"Arne\",\"Arno\",\"Arnold\",\"Arnoldo\",\"Arnulfo\",\"Aron\",\"Art\",\"Arthur\",\"Arturo\",\"Arvel\",\"Arvid\",\"Arvilla\",\"Aryanna\",\"Asa\",\"Asha\",\"Ashlee\",\"Ashleigh\",\"Ashley\",\"Ashly\",\"Ashlynn\",\"Ashton\",\"Ashtyn\",\"Asia\",\"Assunta\",\"Astrid\",\"Athena\",\"Aubree\",\"Aubrey\",\"Audie\",\"Audra\",\"Audreanne\",\"Audrey\",\"August\",\"Augusta\",\"Augustine\",\"Augustus\",\"Aurelia\",\"Aurelie\",\"Aurelio\",\"Aurore\",\"Austen\",\"Austin\",\"Austyn\",\"Autumn\",\"Ava\",\"Avery\",\"Avis\",\"Axel\",\"Ayana\",\"Ayden\",\"Ayla\",\"Aylin\",\"Baby\",\"Bailee\",\"Bailey\",\"Barbara\",\"Barney\",\"Baron\",\"Barrett\",\"Barry\",\"Bart\",\"Bartholome\",\"Barton\",\"Baylee\",\"Beatrice\",\"Beau\",\"Beaulah\",\"Bell\",\"Bella\",\"Belle\",\"Ben\",\"Benedict\",\"Benjamin\",\"Bennett\",\"Bennie\",\"Benny\",\"Benton\",\"Berenice\",\"Bernadette\",\"Bernadine\",\"Bernard\",\"Bernardo\",\"Berneice\",\"Bernhard\",\"Bernice\",\"Bernie\",\"Berniece\",\"Bernita\",\"Berry\",\"Bert\",\"Berta\",\"Bertha\",\"Bertram\",\"Bertrand\",\"Beryl\",\"Bessie\",\"Beth\",\"Bethany\",\"Bethel\",\"Betsy\",\"Bette\",\"Bettie\",\"Betty\",\"Bettye\",\"Beulah\",\"Beverly\",\"Bianka\",\"Bill\",\"Billie\",\"Billy\",\"Birdie\",\"Blair\",\"Blaise\",\"Blake\",\"Blanca\",\"Blanche\",\"Blaze\",\"Bo\",\"Bobbie\",\"Bobby\",\"Bonita\",\"Bonnie\",\"Boris\",\"Boyd\",\"Brad\",\"Braden\",\"Bradford\",\"Bradley\",\"Bradly\",\"Brady\",\"Braeden\",\"Brain\",\"Brandi\",\"Brando\",\"Brandon\",\"Brandt\",\"Brandy\",\"Brandyn\",\"Brannon\",\"Branson\",\"Brant\",\"Braulio\",\"Braxton\",\"Brayan\",\"Breana\",\"Breanna\",\"Breanne\",\"Brenda\",\"Brendan\",\"Brenden\",\"Brendon\",\"Brenna\",\"Brennan\",\"Brennon\",\"Brent\",\"Bret\",\"Brett\",\"Bria\",\"Brian\",\"Briana\",\"Brianne\",\"Brice\",\"Bridget\",\"Bridgette\",\"Bridie\",\"Brielle\",\"Brigitte\",\"Brionna\",\"Brisa\",\"Britney\",\"Brittany\",\"Brock\",\"Broderick\",\"Brody\",\"Brook\",\"Brooke\",\"Brooklyn\",\"Brooks\",\"Brown\",\"Bruce\",\"Bryana\",\"Bryce\",\"Brycen\",\"Bryon\",\"Buck\",\"Bud\",\"Buddy\",\"Buford\",\"Bulah\",\"Burdette\",\"Burley\",\"Burnice\",\"Buster\",\"Cade\",\"Caden\",\"Caesar\",\"Caitlyn\",\"Cale\",\"Caleb\",\"Caleigh\",\"Cali\",\"Calista\",\"Callie\",\"Camden\",\"Cameron\",\"Camila\",\"Camilla\",\"Camille\",\"Camren\",\"Camron\",\"Camryn\",\"Camylle\",\"Candace\",\"Candelario\",\"Candice\",\"Candida\",\"Candido\",\"Cara\",\"Carey\",\"Carissa\",\"Carlee\",\"Carleton\",\"Carley\",\"Carli\",\"Carlie\",\"Carlo\",\"Carlos\",\"Carlotta\",\"Carmel\",\"Carmela\",\"Carmella\",\"Carmelo\",\"Carmen\",\"Carmine\",\"Carol\",\"Carolanne\",\"Carole\",\"Carolina\",\"Caroline\",\"Carolyn\",\"Carolyne\",\"Carrie\",\"Carroll\",\"Carson\",\"Carter\",\"Cary\",\"Casandra\",\"Casey\",\"Casimer\",\"Casimir\",\"Casper\",\"Cassandra\",\"Cassandre\",\"Cassidy\",\"Cassie\",\"Catalina\",\"Caterina\",\"Catharine\",\"Catherine\",\"Cathrine\",\"Cathryn\",\"Cathy\",\"Cayla\",\"Ceasar\",\"Cecelia\",\"Cecil\",\"Cecile\",\"Cecilia\",\"Cedrick\",\"Celestine\",\"Celestino\",\"Celia\",\"Celine\",\"Cesar\",\"Chad\",\"Chadd\",\"Chadrick\",\"Chaim\",\"Chance\",\"Chandler\",\"Chanel\",\"Chanelle\",\"Charity\",\"Charlene\",\"Charles\",\"Charley\",\"Charlie\",\"Charlotte\",\"Chase\",\"Chasity\",\"Chauncey\",\"Chaya\",\"Chaz\",\"Chelsea\",\"Chelsey\",\"Chelsie\",\"Chesley\",\"Chester\",\"Chet\",\"Cheyanne\",\"Cheyenne\",\"Chloe\",\"Chris\",\"Christ\",\"Christa\",\"Christelle\",\"Christian\",\"Christiana\",\"Christina\",\"Christine\",\"Christop\",\"Christophe\",\"Christopher\",\"Christy\",\"Chyna\",\"Ciara\",\"Cicero\",\"Cielo\",\"Cierra\",\"Cindy\",\"Citlalli\",\"Clair\",\"Claire\",\"Clara\",\"Clarabelle\",\"Clare\",\"Clarissa\",\"Clark\",\"Claud\",\"Claude\",\"Claudia\",\"Claudie\",\"Claudine\",\"Clay\",\"Clemens\",\"Clement\",\"Clementina\",\"Clementine\",\"Clemmie\",\"Cleo\",\"Cleora\",\"Cleta\",\"Cletus\",\"Cleve\",\"Cleveland\",\"Clifford\",\"Clifton\",\"Clint\",\"Clinton\",\"Clotilde\",\"Clovis\",\"Cloyd\",\"Clyde\",\"Coby\",\"Cody\",\"Colby\",\"Cole\",\"Coleman\",\"Colin\",\"Colleen\",\"Collin\",\"Colt\",\"Colten\",\"Colton\",\"Columbus\",\"Concepcion\",\"Conner\",\"Connie\",\"Connor\",\"Conor\",\"Conrad\",\"Constance\",\"Constantin\",\"Consuelo\",\"Cooper\",\"Cora\",\"Coralie\",\"Corbin\",\"Cordelia\",\"Cordell\",\"Cordia\",\"Cordie\",\"Corene\",\"Corine\",\"Cornelius\",\"Cornell\",\"Corrine\",\"Cortez\",\"Cortney\",\"Cory\",\"Coty\",\"Courtney\",\"Coy\",\"Craig\",\"Crawford\",\"Creola\",\"Cristal\",\"Cristian\",\"Cristina\",\"Cristobal\",\"Cristopher\",\"Cruz\",\"Crystal\",\"Crystel\",\"Cullen\",\"Curt\",\"Curtis\",\"Cydney\",\"Cynthia\",\"Cyril\",\"Cyrus\",\"Dagmar\",\"Dahlia\",\"Daija\",\"Daisha\",\"Daisy\",\"Dakota\",\"Dale\",\"Dallas\",\"Dallin\",\"Dalton\",\"Damaris\",\"Dameon\",\"Damian\",\"Damien\",\"Damion\",\"Damon\",\"Dan\",\"Dana\",\"Dandre\",\"Dane\",\"D'angelo\",\"Dangelo\",\"Danial\",\"Daniela\",\"Daniella\",\"Danielle\",\"Danika\",\"Dannie\",\"Danny\",\"Dante\",\"Danyka\",\"Daphne\",\"Daphnee\",\"Daphney\",\"Darby\",\"Daren\",\"Darian\",\"Dariana\",\"Darien\",\"Dario\",\"Darion\",\"Darius\",\"Darlene\",\"Daron\",\"Darrel\",\"Darrell\",\"Darren\",\"Darrick\",\"Darrin\",\"Darrion\",\"Darron\",\"Darryl\",\"Darwin\",\"Daryl\",\"Dashawn\",\"Dasia\",\"Dave\",\"David\",\"Davin\",\"Davion\",\"Davon\",\"Davonte\",\"Dawn\",\"Dawson\",\"Dax\",\"Dayana\",\"Dayna\",\"Dayne\",\"Dayton\",\"Dean\",\"Deangelo\",\"Deanna\",\"Deborah\",\"Declan\",\"Dedric\",\"Dedrick\",\"Dee\",\"Deion\",\"Deja\",\"Dejah\",\"Dejon\",\"Dejuan\",\"Delaney\",\"Delbert\",\"Delfina\",\"Delia\",\"Delilah\",\"Dell\",\"Della\",\"Delmer\",\"Delores\",\"Delpha\",\"Delphia\",\"Delphine\",\"Delta\",\"Demarco\",\"Demarcus\",\"Demario\",\"Demetris\",\"Demetrius\",\"Demond\",\"Dena\",\"Denis\",\"Dennis\",\"Deon\",\"Deondre\",\"Deontae\",\"Deonte\",\"Dereck\",\"Derek\",\"Derick\",\"Deron\",\"Derrick\",\"Deshaun\",\"Deshawn\",\"Desiree\",\"Desmond\",\"Dessie\",\"Destany\",\"Destin\",\"Destinee\",\"Destiney\",\"Destini\",\"Destiny\",\"Devan\",\"Devante\",\"Deven\",\"Devin\",\"Devon\",\"Devonte\",\"Devyn\",\"Dewayne\",\"Dewitt\",\"Dexter\",\"Diamond\",\"Diana\",\"Dianna\",\"Diego\",\"Dillan\",\"Dillon\",\"Dimitri\",\"Dina\",\"Dino\",\"Dion\",\"Dixie\",\"Dock\",\"Dolly\",\"Dolores\",\"Domenic\",\"Domenica\",\"Domenick\",\"Domenico\",\"Domingo\",\"Dominic\",\"Dominique\",\"Don\",\"Donald\",\"Donato\",\"Donavon\",\"Donna\",\"Donnell\",\"Donnie\",\"Donny\",\"Dora\",\"Dorcas\",\"Dorian\",\"Doris\",\"Dorothea\",\"Dorothy\",\"Dorris\",\"Dortha\",\"Dorthy\",\"Doug\",\"Douglas\",\"Dovie\",\"Doyle\",\"Drake\",\"Drew\",\"Duane\",\"Dudley\",\"Dulce\",\"Duncan\",\"Durward\",\"Dustin\",\"Dusty\",\"Dwight\",\"Dylan\",\"Earl\",\"Earlene\",\"Earline\",\"Earnest\",\"Earnestine\",\"Easter\",\"Easton\",\"Ebba\",\"Ebony\",\"Ed\",\"Eda\",\"Edd\",\"Eddie\",\"Eden\",\"Edgar\",\"Edgardo\",\"Edison\",\"Edmond\",\"Edmund\",\"Edna\",\"Eduardo\",\"Edward\",\"Edwardo\",\"Edwin\",\"Edwina\",\"Edyth\",\"Edythe\",\"Effie\",\"Efrain\",\"Efren\",\"Eileen\",\"Einar\",\"Eino\",\"Eladio\",\"Elaina\",\"Elbert\",\"Elda\",\"Eldon\",\"Eldora\",\"Eldred\",\"Eldridge\",\"Eleanora\",\"Eleanore\",\"Eleazar\",\"Electa\",\"Elena\",\"Elenor\",\"Elenora\",\"Eleonore\",\"Elfrieda\",\"Eli\",\"Elian\",\"Eliane\",\"Elias\",\"Eliezer\",\"Elijah\",\"Elinor\",\"Elinore\",\"Elisa\",\"Elisabeth\",\"Elise\",\"Eliseo\",\"Elisha\",\"Elissa\",\"Eliza\",\"Elizabeth\",\"Ella\",\"Ellen\",\"Ellie\",\"Elliot\",\"Elliott\",\"Ellis\",\"Ellsworth\",\"Elmer\",\"Elmira\",\"Elmo\",\"Elmore\",\"Elna\",\"Elnora\",\"Elody\",\"Eloisa\",\"Eloise\",\"Elouise\",\"Eloy\",\"Elroy\",\"Elsa\",\"Else\",\"Elsie\",\"Elta\",\"Elton\",\"Elva\",\"Elvera\",\"Elvie\",\"Elvis\",\"Elwin\",\"Elwyn\",\"Elyse\",\"Elyssa\",\"Elza\",\"Emanuel\",\"Emelia\",\"Emelie\",\"Emely\",\"Emerald\",\"Emerson\",\"Emery\",\"Emie\",\"Emil\",\"Emile\",\"Emilia\",\"Emiliano\",\"Emilie\",\"Emilio\",\"Emily\",\"Emma\",\"Emmalee\",\"Emmanuel\",\"Emmanuelle\",\"Emmet\",\"Emmett\",\"Emmie\",\"Emmitt\",\"Emmy\",\"Emory\",\"Ena\",\"Enid\",\"Enoch\",\"Enola\",\"Enos\",\"Enrico\",\"Enrique\",\"Ephraim\",\"Era\",\"Eriberto\",\"Eric\",\"Erica\",\"Erich\",\"Erick\",\"Ericka\",\"Erik\",\"Erika\",\"Erin\",\"Erling\",\"Erna\",\"Ernest\",\"Ernestina\",\"Ernestine\",\"Ernesto\",\"Ernie\",\"Ervin\",\"Erwin\",\"Eryn\",\"Esmeralda\",\"Esperanza\",\"Esta\",\"Esteban\",\"Estefania\",\"Estel\",\"Estell\",\"Estella\",\"Estelle\",\"Estevan\",\"Esther\",\"Estrella\",\"Etha\",\"Ethan\",\"Ethel\",\"Ethelyn\",\"Ethyl\",\"Ettie\",\"Eudora\",\"Eugene\",\"Eugenia\",\"Eula\",\"Eulah\",\"Eulalia\",\"Euna\",\"Eunice\",\"Eusebio\",\"Eva\",\"Evalyn\",\"Evan\",\"Evangeline\",\"Evans\",\"Eve\",\"Eveline\",\"Evelyn\",\"Everardo\",\"Everett\",\"Everette\",\"Evert\",\"Evie\",\"Ewald\",\"Ewell\",\"Ezekiel\",\"Ezequiel\",\"Ezra\",\"Fabian\",\"Fabiola\",\"Fae\",\"Fannie\",\"Fanny\",\"Fatima\",\"Faustino\",\"Fausto\",\"Favian\",\"Fay\",\"Faye\",\"Federico\",\"Felicia\",\"Felicita\",\"Felicity\",\"Felipa\",\"Felipe\",\"Felix\",\"Felton\",\"Fermin\",\"Fern\",\"Fernando\",\"Ferne\",\"Fidel\",\"Filiberto\",\"Filomena\",\"Finn\",\"Fiona\",\"Flavie\",\"Flavio\",\"Fleta\",\"Fletcher\",\"Flo\",\"Florence\",\"Florencio\",\"Florian\",\"Florida\",\"Florine\",\"Flossie\",\"Floy\",\"Floyd\",\"Ford\",\"Forest\",\"Forrest\",\"Foster\",\"Frances\",\"Francesca\",\"Francesco\",\"Francis\",\"Francisca\",\"Francisco\",\"Franco\",\"Frank\",\"Frankie\",\"Franz\",\"Fred\",\"Freda\",\"Freddie\",\"Freddy\",\"Frederic\",\"Frederick\",\"Frederik\",\"Frederique\",\"Fredrick\",\"Fredy\",\"Freeda\",\"Freeman\",\"Freida\",\"Frida\",\"Frieda\",\"Friedrich\",\"Fritz\",\"Furman\",\"Gabe\",\"Gabriel\",\"Gabriella\",\"Gabrielle\",\"Gaetano\",\"Gage\",\"Gail\",\"Gardner\",\"Garett\",\"Garfield\",\"Garland\",\"Garnet\",\"Garnett\",\"Garret\",\"Garrett\",\"Garrick\",\"Garrison\",\"Garry\",\"Garth\",\"Gaston\",\"Gavin\",\"Gay\",\"Gayle\",\"Gaylord\",\"Gene\",\"General\",\"Genesis\",\"Genevieve\",\"Gennaro\",\"Genoveva\",\"Geo\",\"Geoffrey\",\"George\",\"Georgette\",\"Georgiana\",\"Georgianna\",\"Geovanni\",\"Geovanny\",\"Geovany\",\"Gerald\",\"Geraldine\",\"Gerard\",\"Gerardo\",\"Gerda\",\"Gerhard\",\"Germaine\",\"German\",\"Gerry\",\"Gerson\",\"Gertrude\",\"Gia\",\"Gianni\",\"Gideon\",\"Gilbert\",\"Gilberto\",\"Gilda\",\"Giles\",\"Gillian\",\"Gina\",\"Gino\",\"Giovani\",\"Giovanna\",\"Giovanni\",\"Giovanny\",\"Gisselle\",\"Giuseppe\",\"Gladyce\",\"Gladys\",\"Glen\",\"Glenda\",\"Glenna\",\"Glennie\",\"Gloria\",\"Godfrey\",\"Golda\",\"Golden\",\"Gonzalo\",\"Gordon\",\"Grace\",\"Gracie\",\"Graciela\",\"Grady\",\"Graham\",\"Grant\",\"Granville\",\"Grayce\",\"Grayson\",\"Green\",\"Greg\",\"Gregg\",\"Gregoria\",\"Gregorio\",\"Gregory\",\"Greta\",\"Gretchen\",\"Greyson\",\"Griffin\",\"Grover\",\"Guadalupe\",\"Gudrun\",\"Guido\",\"Guillermo\",\"Guiseppe\",\"Gunnar\",\"Gunner\",\"Gus\",\"Gussie\",\"Gust\",\"Gustave\",\"Guy\",\"Gwen\",\"Gwendolyn\",\"Hadley\",\"Hailee\",\"Hailey\",\"Hailie\",\"Hal\",\"Haleigh\",\"Haley\",\"Halie\",\"Halle\",\"Hallie\",\"Hank\",\"Hanna\",\"Hannah\",\"Hans\",\"Hardy\",\"Harley\",\"Harmon\",\"Harmony\",\"Harold\",\"Harrison\",\"Harry\",\"Harvey\",\"Haskell\",\"Hassan\",\"Hassie\",\"Hattie\",\"Haven\",\"Hayden\",\"Haylee\",\"Hayley\",\"Haylie\",\"Hazel\",\"Hazle\",\"Heath\",\"Heather\",\"Heaven\",\"Heber\",\"Hector\",\"Heidi\",\"Helen\",\"Helena\",\"Helene\",\"Helga\",\"Hellen\",\"Helmer\",\"Heloise\",\"Henderson\",\"Henri\",\"Henriette\",\"Henry\",\"Herbert\",\"Herman\",\"Hermann\",\"Hermina\",\"Herminia\",\"Herminio\",\"Hershel\",\"Herta\",\"Hertha\",\"Hester\",\"Hettie\",\"Hilario\",\"Hilbert\",\"Hilda\",\"Hildegard\",\"Hillard\",\"Hillary\",\"Hilma\",\"Hilton\",\"Hipolito\",\"Hiram\",\"Hobart\",\"Holden\",\"Hollie\",\"Hollis\",\"Holly\",\"Hope\",\"Horace\",\"Horacio\",\"Hortense\",\"Hosea\",\"Houston\",\"Howard\",\"Howell\",\"Hoyt\",\"Hubert\",\"Hudson\",\"Hugh\",\"Hulda\",\"Humberto\",\"Hunter\",\"Hyman\",\"Ian\",\"Ibrahim\",\"Icie\",\"Ida\",\"Idell\",\"Idella\",\"Ignacio\",\"Ignatius\",\"Ike\",\"Ila\",\"Ilene\",\"Iliana\",\"Ima\",\"Imani\",\"Imelda\",\"Immanuel\",\"Imogene\",\"Ines\",\"Irma\",\"Irving\",\"Irwin\",\"Isaac\",\"Isabel\",\"Isabell\",\"Isabella\",\"Isabelle\",\"Isac\",\"Isadore\",\"Isai\",\"Isaiah\",\"Isaias\",\"Isidro\",\"Ismael\",\"Isobel\",\"Isom\",\"Israel\",\"Issac\",\"Itzel\",\"Iva\",\"Ivah\",\"Ivory\",\"Ivy\",\"Izabella\",\"Izaiah\",\"Jabari\",\"Jace\",\"Jacey\",\"Jacinthe\",\"Jacinto\",\"Jack\",\"Jackeline\",\"Jackie\",\"Jacklyn\",\"Jackson\",\"Jacky\",\"Jaclyn\",\"Jacquelyn\",\"Jacques\",\"Jacynthe\",\"Jada\",\"Jade\",\"Jaden\",\"Jadon\",\"Jadyn\",\"Jaeden\",\"Jaida\",\"Jaiden\",\"Jailyn\",\"Jaime\",\"Jairo\",\"Jakayla\",\"Jake\",\"Jakob\",\"Jaleel\",\"Jalen\",\"Jalon\",\"Jalyn\",\"Jamaal\",\"Jamal\",\"Jamar\",\"Jamarcus\",\"Jamel\",\"Jameson\",\"Jamey\",\"Jamie\",\"Jamil\",\"Jamir\",\"Jamison\",\"Jammie\",\"Jan\",\"Jana\",\"Janae\",\"Jane\",\"Janelle\",\"Janessa\",\"Janet\",\"Janice\",\"Janick\",\"Janie\",\"Janis\",\"Janiya\",\"Jannie\",\"Jany\",\"Jaquan\",\"Jaquelin\",\"Jaqueline\",\"Jared\",\"Jaren\",\"Jarod\",\"Jaron\",\"Jarred\",\"Jarrell\",\"Jarret\",\"Jarrett\",\"Jarrod\",\"Jarvis\",\"Jasen\",\"Jasmin\",\"Jason\",\"Jasper\",\"Jaunita\",\"Javier\",\"Javon\",\"Javonte\",\"Jay\",\"Jayce\",\"Jaycee\",\"Jayda\",\"Jayde\",\"Jayden\",\"Jaydon\",\"Jaylan\",\"Jaylen\",\"Jaylin\",\"Jaylon\",\"Jayme\",\"Jayne\",\"Jayson\",\"Jazlyn\",\"Jazmin\",\"Jazmyn\",\"Jazmyne\",\"Jean\",\"Jeanette\",\"Jeanie\",\"Jeanne\",\"Jed\",\"Jedediah\",\"Jedidiah\",\"Jeff\",\"Jefferey\",\"Jeffery\",\"Jeffrey\",\"Jeffry\",\"Jena\",\"Jenifer\",\"Jennie\",\"Jennifer\",\"Jennings\",\"Jennyfer\",\"Jensen\",\"Jerad\",\"Jerald\",\"Jeramie\",\"Jeramy\",\"Jerel\",\"Jeremie\",\"Jeremy\",\"Jermain\",\"Jermaine\",\"Jermey\",\"Jerod\",\"Jerome\",\"Jeromy\",\"Jerrell\",\"Jerrod\",\"Jerrold\",\"Jerry\",\"Jess\",\"Jesse\",\"Jessica\",\"Jessie\",\"Jessika\",\"Jessy\",\"Jessyca\",\"Jesus\",\"Jett\",\"Jettie\",\"Jevon\",\"Jewel\",\"Jewell\",\"Jillian\",\"Jimmie\",\"Jimmy\",\"Jo\",\"Joan\",\"Joana\",\"Joanie\",\"Joanne\",\"Joannie\",\"Joanny\",\"Joany\",\"Joaquin\",\"Jocelyn\",\"Jodie\",\"Jody\",\"Joe\",\"Joel\",\"Joelle\",\"Joesph\",\"Joey\",\"Johan\",\"Johann\",\"Johanna\",\"Johathan\",\"John\",\"Johnathan\",\"Johnathon\",\"Johnnie\",\"Johnny\",\"Johnpaul\",\"Johnson\",\"Jolie\",\"Jon\",\"Jonas\",\"Jonatan\",\"Jonathan\",\"Jonathon\",\"Jordan\",\"Jordane\",\"Jordi\",\"Jordon\",\"Jordy\",\"Jordyn\",\"Jorge\",\"Jose\",\"Josefa\",\"Josefina\",\"Joseph\",\"Josephine\",\"Josh\",\"Joshua\",\"Joshuah\",\"Josiah\",\"Josiane\",\"Josianne\",\"Josie\",\"Josue\",\"Jovan\",\"Jovani\",\"Jovanny\",\"Jovany\",\"Joy\",\"Joyce\",\"Juana\",\"Juanita\",\"Judah\",\"Judd\",\"Jude\",\"Judge\",\"Judson\",\"Judy\",\"Jules\",\"Julia\",\"Julian\",\"Juliana\",\"Julianne\",\"Julie\",\"Julien\",\"Juliet\",\"Julio\",\"Julius\",\"June\",\"Junior\",\"Junius\",\"Justen\",\"Justice\",\"Justina\",\"Justine\",\"Juston\",\"Justus\",\"Justyn\",\"Juvenal\",\"Juwan\",\"Kacey\",\"Kaci\",\"Kacie\",\"Kade\",\"Kaden\",\"Kadin\",\"Kaela\",\"Kaelyn\",\"Kaia\",\"Kailee\",\"Kailey\",\"Kailyn\",\"Kaitlin\",\"Kaitlyn\",\"Kale\",\"Kaleb\",\"Kaleigh\",\"Kaley\",\"Kali\",\"Kallie\",\"Kameron\",\"Kamille\",\"Kamren\",\"Kamron\",\"Kamryn\",\"Kane\",\"Kara\",\"Kareem\",\"Karelle\",\"Karen\",\"Kari\",\"Kariane\",\"Karianne\",\"Karina\",\"Karine\",\"Karl\",\"Karlee\",\"Karley\",\"Karli\",\"Karlie\",\"Karolann\",\"Karson\",\"Kasandra\",\"Kasey\",\"Kassandra\",\"Katarina\",\"Katelin\",\"Katelyn\",\"Katelynn\",\"Katharina\",\"Katherine\",\"Katheryn\",\"Kathleen\",\"Kathlyn\",\"Kathryn\",\"Kathryne\",\"Katlyn\",\"Katlynn\",\"Katrina\",\"Katrine\",\"Kattie\",\"Kavon\",\"Kay\",\"Kaya\",\"Kaycee\",\"Kayden\",\"Kayla\",\"Kaylah\",\"Kaylee\",\"Kayleigh\",\"Kayley\",\"Kayli\",\"Kaylie\",\"Kaylin\",\"Keagan\",\"Keanu\",\"Keara\",\"Keaton\",\"Keegan\",\"Keeley\",\"Keely\",\"Keenan\",\"Keira\",\"Keith\",\"Kellen\",\"Kelley\",\"Kelli\",\"Kellie\",\"Kelly\",\"Kelsi\",\"Kelsie\",\"Kelton\",\"Kelvin\",\"Ken\",\"Kendall\",\"Kendra\",\"Kendrick\",\"Kenna\",\"Kennedi\",\"Kennedy\",\"Kenneth\",\"Kennith\",\"Kenny\",\"Kenton\",\"Kenya\",\"Kenyatta\",\"Kenyon\",\"Keon\",\"Keshaun\",\"Keshawn\",\"Keven\",\"Kevin\",\"Kevon\",\"Keyon\",\"Keyshawn\",\"Khalid\",\"Khalil\",\"Kian\",\"Kiana\",\"Kianna\",\"Kiara\",\"Kiarra\",\"Kiel\",\"Kiera\",\"Kieran\",\"Kiley\",\"Kim\",\"Kimberly\",\"King\",\"Kip\",\"Kira\",\"Kirk\",\"Kirsten\",\"Kirstin\",\"Kitty\",\"Kobe\",\"Koby\",\"Kody\",\"Kolby\",\"Kole\",\"Korbin\",\"Korey\",\"Kory\",\"Kraig\",\"Kris\",\"Krista\",\"Kristian\",\"Kristin\",\"Kristina\",\"Kristofer\",\"Kristoffer\",\"Kristopher\",\"Kristy\",\"Krystal\",\"Krystel\",\"Krystina\",\"Kurt\",\"Kurtis\",\"Kyla\",\"Kyle\",\"Kylee\",\"Kyleigh\",\"Kyler\",\"Kylie\",\"Kyra\",\"Lacey\",\"Lacy\",\"Ladarius\",\"Lafayette\",\"Laila\",\"Laisha\",\"Lamar\",\"Lambert\",\"Lamont\",\"Lance\",\"Landen\",\"Lane\",\"Laney\",\"Larissa\",\"Laron\",\"Larry\",\"Larue\",\"Laura\",\"Laurel\",\"Lauren\",\"Laurence\",\"Lauretta\",\"Lauriane\",\"Laurianne\",\"Laurie\",\"Laurine\",\"Laury\",\"Lauryn\",\"Lavada\",\"Lavern\",\"Laverna\",\"Laverne\",\"Lavina\",\"Lavinia\",\"Lavon\",\"Lavonne\",\"Lawrence\",\"Lawson\",\"Layla\",\"Layne\",\"Lazaro\",\"Lea\",\"Leann\",\"Leanna\",\"Leanne\",\"Leatha\",\"Leda\",\"Lee\",\"Leif\",\"Leila\",\"Leilani\",\"Lela\",\"Lelah\",\"Leland\",\"Lelia\",\"Lempi\",\"Lemuel\",\"Lenna\",\"Lennie\",\"Lenny\",\"Lenora\",\"Lenore\",\"Leo\",\"Leola\",\"Leon\",\"Leonard\",\"Leonardo\",\"Leone\",\"Leonel\",\"Leonie\",\"Leonor\",\"Leonora\",\"Leopold\",\"Leopoldo\",\"Leora\",\"Lera\",\"Lesley\",\"Leslie\",\"Lesly\",\"Lessie\",\"Lester\",\"Leta\",\"Letha\",\"Letitia\",\"Levi\",\"Lew\",\"Lewis\",\"Lexi\",\"Lexie\",\"Lexus\",\"Lia\",\"Liam\",\"Liana\",\"Libbie\",\"Libby\",\"Lila\",\"Lilian\",\"Liliana\",\"Liliane\",\"Lilla\",\"Lillian\",\"Lilliana\",\"Lillie\",\"Lilly\",\"Lily\",\"Lilyan\",\"Lina\",\"Lincoln\",\"Linda\",\"Lindsay\",\"Lindsey\",\"Linnea\",\"Linnie\",\"Linwood\",\"Lionel\",\"Lisa\",\"Lisandro\",\"Lisette\",\"Litzy\",\"Liza\",\"Lizeth\",\"Lizzie\",\"Llewellyn\",\"Lloyd\",\"Logan\",\"Lois\",\"Lola\",\"Lolita\",\"Loma\",\"Lon\",\"London\",\"Lonie\",\"Lonnie\",\"Lonny\",\"Lonzo\",\"Lora\",\"Loraine\",\"Loren\",\"Lorena\",\"Lorenz\",\"Lorenza\",\"Lorenzo\",\"Lori\",\"Lorine\",\"Lorna\",\"Lottie\",\"Lou\",\"Louie\",\"Louisa\",\"Lourdes\",\"Louvenia\",\"Lowell\",\"Loy\",\"Loyal\",\"Loyce\",\"Lucas\",\"Luciano\",\"Lucie\",\"Lucienne\",\"Lucile\",\"Lucinda\",\"Lucio\",\"Lucious\",\"Lucius\",\"Lucy\",\"Ludie\",\"Ludwig\",\"Lue\",\"Luella\",\"Luigi\",\"Luis\",\"Luisa\",\"Lukas\",\"Lula\",\"Lulu\",\"Luna\",\"Lupe\",\"Lura\",\"Lurline\",\"Luther\",\"Luz\",\"Lyda\",\"Lydia\",\"Lyla\",\"Lynn\",\"Lyric\",\"Lysanne\",\"Mabel\",\"Mabelle\",\"Mable\",\"Mac\",\"Macey\",\"Maci\",\"Macie\",\"Mack\",\"Mackenzie\",\"Macy\",\"Madaline\",\"Madalyn\",\"Maddison\",\"Madeline\",\"Madelyn\",\"Madelynn\",\"Madge\",\"Madie\",\"Madilyn\",\"Madisen\",\"Madison\",\"Madisyn\",\"Madonna\",\"Madyson\",\"Mae\",\"Maegan\",\"Maeve\",\"Mafalda\",\"Magali\",\"Magdalen\",\"Magdalena\",\"Maggie\",\"Magnolia\",\"Magnus\",\"Maia\",\"Maida\",\"Maiya\",\"Major\",\"Makayla\",\"Makenna\",\"Makenzie\",\"Malachi\",\"Malcolm\",\"Malika\",\"Malinda\",\"Mallie\",\"Mallory\",\"Malvina\",\"Mandy\",\"Manley\",\"Manuel\",\"Manuela\",\"Mara\",\"Marc\",\"Marcel\",\"Marcelina\",\"Marcelino\",\"Marcella\",\"Marcelle\",\"Marcellus\",\"Marcelo\",\"Marcia\",\"Marco\",\"Marcos\",\"Marcus\",\"Margaret\",\"Margarete\",\"Margarett\",\"Margaretta\",\"Margarette\",\"Margarita\",\"Marge\",\"Margie\",\"Margot\",\"Margret\",\"Marguerite\",\"Maria\",\"Mariah\",\"Mariam\",\"Marian\",\"Mariana\",\"Mariane\",\"Marianna\",\"Marianne\",\"Mariano\",\"Maribel\",\"Marie\",\"Mariela\",\"Marielle\",\"Marietta\",\"Marilie\",\"Marilou\",\"Marilyne\",\"Marina\",\"Mario\",\"Marion\",\"Marisa\",\"Marisol\",\"Maritza\",\"Marjolaine\",\"Marjorie\",\"Marjory\",\"Mark\",\"Markus\",\"Marlee\",\"Marlen\",\"Marlene\",\"Marley\",\"Marlin\",\"Marlon\",\"Marques\",\"Marquis\",\"Marquise\",\"Marshall\",\"Marta\",\"Martin\",\"Martina\",\"Martine\",\"Marty\",\"Marvin\",\"Mary\",\"Maryam\",\"Maryjane\",\"Maryse\",\"Mason\",\"Mateo\",\"Mathew\",\"Mathias\",\"Mathilde\",\"Matilda\",\"Matilde\",\"Matt\",\"Matteo\",\"Mattie\",\"Maud\",\"Maude\",\"Maudie\",\"Maureen\",\"Maurice\",\"Mauricio\",\"Maurine\",\"Maverick\",\"Mavis\",\"Max\",\"Maxie\",\"Maxime\",\"Maximilian\",\"Maximillia\",\"Maximillian\",\"Maximo\",\"Maximus\",\"Maxine\",\"Maxwell\",\"May\",\"Maya\",\"Maybell\",\"Maybelle\",\"Maye\",\"Maymie\",\"Maynard\",\"Mayra\",\"Mazie\",\"Mckayla\",\"Mckenna\",\"Mckenzie\",\"Meagan\",\"Meaghan\",\"Meda\",\"Megane\",\"Meggie\",\"Meghan\",\"Mekhi\",\"Melany\",\"Melba\",\"Melisa\",\"Melissa\",\"Mellie\",\"Melody\",\"Melvin\",\"Melvina\",\"Melyna\",\"Melyssa\",\"Mercedes\",\"Meredith\",\"Merl\",\"Merle\",\"Merlin\",\"Merritt\",\"Mertie\",\"Mervin\",\"Meta\",\"Mia\",\"Micaela\",\"Micah\",\"Michael\",\"Michaela\",\"Michale\",\"Micheal\",\"Michel\",\"Michele\",\"Michelle\",\"Miguel\",\"Mikayla\",\"Mike\",\"Mikel\",\"Milan\",\"Miles\",\"Milford\",\"Miller\",\"Millie\",\"Milo\",\"Milton\",\"Mina\",\"Minerva\",\"Minnie\",\"Miracle\",\"Mireille\",\"Mireya\",\"Misael\",\"Missouri\",\"Misty\",\"Mitchel\",\"Mitchell\",\"Mittie\",\"Modesta\",\"Modesto\",\"Mohamed\",\"Mohammad\",\"Mohammed\",\"Moises\",\"Mollie\",\"Molly\",\"Mona\",\"Monica\",\"Monique\",\"Monroe\",\"Monserrat\",\"Monserrate\",\"Montana\",\"Monte\",\"Monty\",\"Morgan\",\"Moriah\",\"Morris\",\"Mortimer\",\"Morton\",\"Mose\",\"Moses\",\"Moshe\",\"Mossie\",\"Mozell\",\"Mozelle\",\"Muhammad\",\"Muriel\",\"Murl\",\"Murphy\",\"Murray\",\"Mustafa\",\"Mya\",\"Myah\",\"Mylene\",\"Myles\",\"Myra\",\"Myriam\",\"Myrl\",\"Myrna\",\"Myron\",\"Myrtice\",\"Myrtie\",\"Myrtis\",\"Myrtle\",\"Nadia\",\"Nakia\",\"Name\",\"Nannie\",\"Naomi\",\"Naomie\",\"Napoleon\",\"Narciso\",\"Nash\",\"Nasir\",\"Nat\",\"Natalia\",\"Natalie\",\"Natasha\",\"Nathan\",\"Nathanael\",\"Nathanial\",\"Nathaniel\",\"Nathen\",\"Nayeli\",\"Neal\",\"Ned\",\"Nedra\",\"Neha\",\"Neil\",\"Nelda\",\"Nella\",\"Nelle\",\"Nellie\",\"Nels\",\"Nelson\",\"Neoma\",\"Nestor\",\"Nettie\",\"Neva\",\"Newell\",\"Newton\",\"Nia\",\"Nicholas\",\"Nicholaus\",\"Nichole\",\"Nick\",\"Nicklaus\",\"Nickolas\",\"Nico\",\"Nicola\",\"Nicolas\",\"Nicole\",\"Nicolette\",\"Nigel\",\"Nikita\",\"Nikki\",\"Nikko\",\"Niko\",\"Nikolas\",\"Nils\",\"Nina\",\"Noah\",\"Noble\",\"Noe\",\"Noel\",\"Noelia\",\"Noemi\",\"Noemie\",\"Noemy\",\"Nola\",\"Nolan\",\"Nona\",\"Nora\",\"Norbert\",\"Norberto\",\"Norene\",\"Norma\",\"Norris\",\"Norval\",\"Norwood\",\"Nova\",\"Novella\",\"Nya\",\"Nyah\",\"Nyasia\",\"Obie\",\"Oceane\",\"Ocie\",\"Octavia\",\"Oda\",\"Odell\",\"Odessa\",\"Odie\",\"Ofelia\",\"Okey\",\"Ola\",\"Olaf\",\"Ole\",\"Olen\",\"Oleta\",\"Olga\",\"Olin\",\"Oliver\",\"Ollie\",\"Oma\",\"Omari\",\"Omer\",\"Ona\",\"Onie\",\"Opal\",\"Ophelia\",\"Ora\",\"Oral\",\"Oran\",\"Oren\",\"Orie\",\"Orin\",\"Orion\",\"Orland\",\"Orlando\",\"Orlo\",\"Orpha\",\"Orrin\",\"Orval\",\"Orville\",\"Osbaldo\",\"Osborne\",\"Oscar\",\"Osvaldo\",\"Oswald\",\"Oswaldo\",\"Otha\",\"Otho\",\"Otilia\",\"Otis\",\"Ottilie\",\"Ottis\",\"Otto\",\"Ova\",\"Owen\",\"Ozella\",\"Pablo\",\"Paige\",\"Palma\",\"Pamela\",\"Pansy\",\"Paolo\",\"Paris\",\"Parker\",\"Pascale\",\"Pasquale\",\"Pat\",\"Patience\",\"Patricia\",\"Patrick\",\"Patsy\",\"Pattie\",\"Paul\",\"Paula\",\"Pauline\",\"Paxton\",\"Payton\",\"Pearl\",\"Pearlie\",\"Pearline\",\"Pedro\",\"Peggie\",\"Penelope\",\"Percival\",\"Percy\",\"Perry\",\"Pete\",\"Peter\",\"Petra\",\"Peyton\",\"Philip\",\"Phoebe\",\"Phyllis\",\"Pierce\",\"Pierre\",\"Pietro\",\"Pink\",\"Pinkie\",\"Piper\",\"Polly\",\"Porter\",\"Precious\",\"Presley\",\"Preston\",\"Price\",\"Prince\",\"Princess\",\"Priscilla\",\"Providenci\",\"Prudence\",\"Queen\",\"Queenie\",\"Quentin\",\"Quincy\",\"Quinn\",\"Quinten\",\"Quinton\",\"Rachael\",\"Rachel\",\"Rachelle\",\"Rae\",\"Raegan\",\"Rafael\",\"Rafaela\",\"Raheem\",\"Rahsaan\",\"Rahul\",\"Raina\",\"Raleigh\",\"Ralph\",\"Ramiro\",\"Ramon\",\"Ramona\",\"Randal\",\"Randall\",\"Randi\",\"Randy\",\"Ransom\",\"Raoul\",\"Raphael\",\"Raphaelle\",\"Raquel\",\"Rashad\",\"Rashawn\",\"Rasheed\",\"Raul\",\"Raven\",\"Ray\",\"Raymond\",\"Raymundo\",\"Reagan\",\"Reanna\",\"Reba\",\"Rebeca\",\"Rebecca\",\"Rebeka\",\"Rebekah\",\"Reece\",\"Reed\",\"Reese\",\"Regan\",\"Reggie\",\"Reginald\",\"Reid\",\"Reilly\",\"Reina\",\"Reinhold\",\"Remington\",\"Rene\",\"Renee\",\"Ressie\",\"Reta\",\"Retha\",\"Retta\",\"Reuben\",\"Reva\",\"Rex\",\"Rey\",\"Reyes\",\"Reymundo\",\"Reyna\",\"Reynold\",\"Rhea\",\"Rhett\",\"Rhianna\",\"Rhiannon\",\"Rhoda\",\"Ricardo\",\"Richard\",\"Richie\",\"Richmond\",\"Rick\",\"Rickey\",\"Rickie\",\"Ricky\",\"Rico\",\"Rigoberto\",\"Riley\",\"Rita\",\"River\",\"Robb\",\"Robbie\",\"Robert\",\"Roberta\",\"Roberto\",\"Robin\",\"Robyn\",\"Rocio\",\"Rocky\",\"Rod\",\"Roderick\",\"Rodger\",\"Rodolfo\",\"Rodrick\",\"Rodrigo\",\"Roel\",\"Rogelio\",\"Roger\",\"Rogers\",\"Rolando\",\"Rollin\",\"Roma\",\"Romaine\",\"Roman\",\"Ron\",\"Ronaldo\",\"Ronny\",\"Roosevelt\",\"Rory\",\"Rosa\",\"Rosalee\",\"Rosalia\",\"Rosalind\",\"Rosalinda\",\"Rosalyn\",\"Rosamond\",\"Rosanna\",\"Rosario\",\"Roscoe\",\"Rose\",\"Rosella\",\"Roselyn\",\"Rosemarie\",\"Rosemary\",\"Rosendo\",\"Rosetta\",\"Rosie\",\"Rosina\",\"Roslyn\",\"Ross\",\"Rossie\",\"Rowan\",\"Rowena\",\"Rowland\",\"Roxane\",\"Roxanne\",\"Roy\",\"Royal\",\"Royce\",\"Rozella\",\"Ruben\",\"Rubie\",\"Ruby\",\"Rubye\",\"Rudolph\",\"Rudy\",\"Rupert\",\"Russ\",\"Russel\",\"Russell\",\"Rusty\",\"Ruth\",\"Ruthe\",\"Ruthie\",\"Ryan\",\"Ryann\",\"Ryder\",\"Rylan\",\"Rylee\",\"Ryleigh\",\"Ryley\",\"Sabina\",\"Sabrina\",\"Sabryna\",\"Sadie\",\"Sadye\",\"Sage\",\"Saige\",\"Sallie\",\"Sally\",\"Salma\",\"Salvador\",\"Salvatore\",\"Sam\",\"Samanta\",\"Samantha\",\"Samara\",\"Samir\",\"Sammie\",\"Sammy\",\"Samson\",\"Sandra\",\"Sandrine\",\"Sandy\",\"Sanford\",\"Santa\",\"Santiago\",\"Santina\",\"Santino\",\"Santos\",\"Sarah\",\"Sarai\",\"Sarina\",\"Sasha\",\"Saul\",\"Savanah\",\"Savanna\",\"Savannah\",\"Savion\",\"Scarlett\",\"Schuyler\",\"Scot\",\"Scottie\",\"Scotty\",\"Seamus\",\"Sean\",\"Sebastian\",\"Sedrick\",\"Selena\",\"Selina\",\"Selmer\",\"Serena\",\"Serenity\",\"Seth\",\"Shad\",\"Shaina\",\"Shakira\",\"Shana\",\"Shane\",\"Shanel\",\"Shanelle\",\"Shania\",\"Shanie\",\"Shaniya\",\"Shanna\",\"Shannon\",\"Shanny\",\"Shanon\",\"Shany\",\"Sharon\",\"Shaun\",\"Shawn\",\"Shawna\",\"Shaylee\",\"Shayna\",\"Shayne\",\"Shea\",\"Sheila\",\"Sheldon\",\"Shemar\",\"Sheridan\",\"Sherman\",\"Sherwood\",\"Shirley\",\"Shyann\",\"Shyanne\",\"Sibyl\",\"Sid\",\"Sidney\",\"Sienna\",\"Sierra\",\"Sigmund\",\"Sigrid\",\"Sigurd\",\"Silas\",\"Sim\",\"Simeon\",\"Simone\",\"Sincere\",\"Sister\",\"Skye\",\"Skyla\",\"Skylar\",\"Sofia\",\"Soledad\",\"Solon\",\"Sonia\",\"Sonny\",\"Sonya\",\"Sophia\",\"Sophie\",\"Spencer\",\"Stacey\",\"Stacy\",\"Stan\",\"Stanford\",\"Stanley\",\"Stanton\",\"Stefan\",\"Stefanie\",\"Stella\",\"Stephan\",\"Stephania\",\"Stephanie\",\"Stephany\",\"Stephen\",\"Stephon\",\"Sterling\",\"Steve\",\"Stevie\",\"Stewart\",\"Stone\",\"Stuart\",\"Summer\",\"Sunny\",\"Susan\",\"Susana\",\"Susanna\",\"Susie\",\"Suzanne\",\"Sven\",\"Syble\",\"Sydnee\",\"Sydney\",\"Sydni\",\"Sydnie\",\"Sylvan\",\"Sylvester\",\"Sylvia\",\"Tabitha\",\"Tad\",\"Talia\",\"Talon\",\"Tamara\",\"Tamia\",\"Tania\",\"Tanner\",\"Tanya\",\"Tara\",\"Taryn\",\"Tate\",\"Tatum\",\"Tatyana\",\"Taurean\",\"Tavares\",\"Taya\",\"Taylor\",\"Teagan\",\"Ted\",\"Telly\",\"Terence\",\"Teresa\",\"Terrance\",\"Terrell\",\"Terrence\",\"Terrill\",\"Terry\",\"Tess\",\"Tessie\",\"Tevin\",\"Thad\",\"Thaddeus\",\"Thalia\",\"Thea\",\"Thelma\",\"Theo\",\"Theodora\",\"Theodore\",\"Theresa\",\"Therese\",\"Theresia\",\"Theron\",\"Thomas\",\"Thora\",\"Thurman\",\"Tia\",\"Tiana\",\"Tianna\",\"Tiara\",\"Tierra\",\"Tiffany\",\"Tillman\",\"Timmothy\",\"Timmy\",\"Timothy\",\"Tina\",\"Tito\",\"Titus\",\"Tobin\",\"Toby\",\"Tod\",\"Tom\",\"Tomas\",\"Tomasa\",\"Tommie\",\"Toney\",\"Toni\",\"Tony\",\"Torey\",\"Torrance\",\"Torrey\",\"Toy\",\"Trace\",\"Tracey\",\"Tracy\",\"Travis\",\"Travon\",\"Tre\",\"Tremaine\",\"Tremayne\",\"Trent\",\"Trenton\",\"Tressa\",\"Tressie\",\"Treva\",\"Trever\",\"Trevion\",\"Trevor\",\"Trey\",\"Trinity\",\"Trisha\",\"Tristian\",\"Tristin\",\"Triston\",\"Troy\",\"Trudie\",\"Trycia\",\"Trystan\",\"Turner\",\"Twila\",\"Tyler\",\"Tyra\",\"Tyree\",\"Tyreek\",\"Tyrel\",\"Tyrell\",\"Tyrese\",\"Tyrique\",\"Tyshawn\",\"Tyson\",\"Ubaldo\",\"Ulices\",\"Ulises\",\"Una\",\"Unique\",\"Urban\",\"Uriah\",\"Uriel\",\"Ursula\",\"Vada\",\"Valentin\",\"Valentina\",\"Valentine\",\"Valerie\",\"Vallie\",\"Van\",\"Vance\",\"Vanessa\",\"Vaughn\",\"Veda\",\"Velda\",\"Vella\",\"Velma\",\"Velva\",\"Vena\",\"Verda\",\"Verdie\",\"Vergie\",\"Verla\",\"Verlie\",\"Vern\",\"Verna\",\"Verner\",\"Vernice\",\"Vernie\",\"Vernon\",\"Verona\",\"Veronica\",\"Vesta\",\"Vicenta\",\"Vicente\",\"Vickie\",\"Vicky\",\"Victor\",\"Victoria\",\"Vida\",\"Vidal\",\"Vilma\",\"Vince\",\"Vincent\",\"Vincenza\",\"Vincenzo\",\"Vinnie\",\"Viola\",\"Violet\",\"Violette\",\"Virgie\",\"Virgil\",\"Virginia\",\"Virginie\",\"Vita\",\"Vito\",\"Viva\",\"Vivian\",\"Viviane\",\"Vivianne\",\"Vivien\",\"Vivienne\",\"Vladimir\",\"Wade\",\"Waino\",\"Waldo\",\"Walker\",\"Wallace\",\"Walter\",\"Walton\",\"Wanda\",\"Ward\",\"Warren\",\"Watson\",\"Wava\",\"Waylon\",\"Wayne\",\"Webster\",\"Weldon\",\"Wellington\",\"Wendell\",\"Wendy\",\"Werner\",\"Westley\",\"Weston\",\"Whitney\",\"Wilber\",\"Wilbert\",\"Wilburn\",\"Wiley\",\"Wilford\",\"Wilfred\",\"Wilfredo\",\"Wilfrid\",\"Wilhelm\",\"Wilhelmine\",\"Will\",\"Willa\",\"Willard\",\"William\",\"Willie\",\"Willis\",\"Willow\",\"Willy\",\"Wilma\",\"Wilmer\",\"Wilson\",\"Wilton\",\"Winfield\",\"Winifred\",\"Winnifred\",\"Winona\",\"Winston\",\"Woodrow\",\"Wyatt\",\"Wyman\",\"Xander\",\"Xavier\",\"Xzavier\",\"Yadira\",\"Yasmeen\",\"Yasmin\",\"Yasmine\",\"Yazmin\",\"Yesenia\",\"Yessenia\",\"Yolanda\",\"Yoshiko\",\"Yvette\",\"Yvonne\",\"Zachariah\",\"Zachary\",\"Zachery\",\"Zack\",\"Zackary\",\"Zackery\",\"Zakary\",\"Zander\",\"Zane\",\"Zaria\",\"Zechariah\",\"Zelda\",\"Zella\",\"Zelma\",\"Zena\",\"Zetta\",\"Zion\",\"Zita\",\"Zoe\",\"Zoey\",\"Zoie\",\"Zoila\",\"Zola\",\"Zora\",\"Zula\"]},{}],146:[function(e,t,n){t.exports=[\"Asexual\",\"Female to male trans man\",\"Female to male transgender man\",\"Female to male transsexual man\",\"F2M\",\"Gender neutral\",\"Hermaphrodite\",\"Intersex man\",\"Intersex person\",\"Intersex woman\",\"Male to female trans woman\",\"Male to female transgender woman\",\"Male to female transsexual woman\",\"Man\",\"M2F\",\"Polygender\",\"T* man\",\"T* woman\",\"Two* person\",\"Two-spirit person\",\"Woman\",\"Agender\",\"Androgyne\",\"Androgynes\",\"Androgynous\",\"Bigender\",\"Cis\",\"Cis Female\",\"Cis Male\",\"Cis Man\",\"Cis Woman\",\"Cisgender\",\"Cisgender Female\",\"Cisgender Male\",\"Cisgender Man\",\"Cisgender Woman\",\"Female to Male\",\"FTM\",\"Gender Fluid\",\"Gender Nonconforming\",\"Gender Questioning\",\"Gender Variant\",\"Genderqueer\",\"Intersex\",\"Male to Female\",\"MTF\",\"Neither\",\"Neutrois\",\"Non-binary\",\"Other\",\"Pangender\",\"Trans\",\"Trans Female\",\"Trans Male\",\"Trans Man\",\"Trans Person\",\"Trans*Female\",\"Trans*Male\",\"Trans*Man\",\"Trans*Person\",\"Trans*Woman\",\"Transexual\",\"Transexual Female\",\"Transexual Male\",\"Transexual Man\",\"Transexual Person\",\"Transexual Woman\",\"Transgender Female\",\"Transgender Person\",\"Transmasculine\",\"Two-spirit\"]},{}],147:[function(e,t,n){var a={};t.exports=a,a.male_first_name=e(\"./male_first_name\"),a.female_first_name=e(\"./female_first_name\"),a.first_name=e(\"./first_name\"),a.last_name=e(\"./last_name\"),a.binary_gender=e(\"./binary_gender\"),a.gender=e(\"./gender\"),a.prefix=e(\"./prefix\"),a.suffix=e(\"./suffix\"),a.title=e(\"./title\"),a.name=e(\"./name\")},{\"./binary_gender\":143,\"./female_first_name\":144,\"./first_name\":145,\"./gender\":146,\"./last_name\":148,\"./male_first_name\":149,\"./name\":150,\"./prefix\":151,\"./suffix\":152,\"./title\":153}],148:[function(e,t,n){t.exports=[\"Abbott\",\"Abernathy\",\"Abshire\",\"Adams\",\"Altenwerth\",\"Anderson\",\"Ankunding\",\"Armstrong\",\"Auer\",\"Aufderhar\",\"Bahringer\",\"Bailey\",\"Balistreri\",\"Barrows\",\"Bartell\",\"Bartoletti\",\"Barton\",\"Bashirian\",\"Batz\",\"Bauch\",\"Baumbach\",\"Bayer\",\"Beahan\",\"Beatty\",\"Bechtelar\",\"Becker\",\"Bednar\",\"Beer\",\"Beier\",\"Berge\",\"Bergnaum\",\"Bergstrom\",\"Bernhard\",\"Bernier\",\"Bins\",\"Blanda\",\"Blick\",\"Block\",\"Bode\",\"Boehm\",\"Bogan\",\"Bogisich\",\"Borer\",\"Bosco\",\"Botsford\",\"Boyer\",\"Boyle\",\"Bradtke\",\"Brakus\",\"Braun\",\"Breitenberg\",\"Brekke\",\"Brown\",\"Bruen\",\"Buckridge\",\"Carroll\",\"Carter\",\"Cartwright\",\"Casper\",\"Cassin\",\"Champlin\",\"Christiansen\",\"Cole\",\"Collier\",\"Collins\",\"Conn\",\"Connelly\",\"Conroy\",\"Considine\",\"Corkery\",\"Cormier\",\"Corwin\",\"Cremin\",\"Crist\",\"Crona\",\"Cronin\",\"Crooks\",\"Cruickshank\",\"Cummerata\",\"Cummings\",\"Dach\",\"D'Amore\",\"Daniel\",\"Dare\",\"Daugherty\",\"Davis\",\"Deckow\",\"Denesik\",\"Dibbert\",\"Dickens\",\"Dicki\",\"Dickinson\",\"Dietrich\",\"Donnelly\",\"Dooley\",\"Douglas\",\"Doyle\",\"DuBuque\",\"Durgan\",\"Ebert\",\"Effertz\",\"Emard\",\"Emmerich\",\"Erdman\",\"Ernser\",\"Fadel\",\"Fahey\",\"Farrell\",\"Fay\",\"Feeney\",\"Feest\",\"Feil\",\"Ferry\",\"Fisher\",\"Flatley\",\"Frami\",\"Franecki\",\"Friesen\",\"Fritsch\",\"Funk\",\"Gaylord\",\"Gerhold\",\"Gerlach\",\"Gibson\",\"Gislason\",\"Gleason\",\"Gleichner\",\"Glover\",\"Goldner\",\"Goodwin\",\"Gorczany\",\"Gottlieb\",\"Goyette\",\"Grady\",\"Graham\",\"Grant\",\"Green\",\"Greenfelder\",\"Greenholt\",\"Grimes\",\"Gulgowski\",\"Gusikowski\",\"Gutkowski\",\"Gutmann\",\"Haag\",\"Hackett\",\"Hagenes\",\"Hahn\",\"Haley\",\"Halvorson\",\"Hamill\",\"Hammes\",\"Hand\",\"Hane\",\"Hansen\",\"Harber\",\"Harris\",\"Hartmann\",\"Harvey\",\"Hauck\",\"Hayes\",\"Heaney\",\"Heathcote\",\"Hegmann\",\"Heidenreich\",\"Heller\",\"Herman\",\"Hermann\",\"Hermiston\",\"Herzog\",\"Hessel\",\"Hettinger\",\"Hickle\",\"Hilll\",\"Hills\",\"Hilpert\",\"Hintz\",\"Hirthe\",\"Hodkiewicz\",\"Hoeger\",\"Homenick\",\"Hoppe\",\"Howe\",\"Howell\",\"Hudson\",\"Huel\",\"Huels\",\"Hyatt\",\"Jacobi\",\"Jacobs\",\"Jacobson\",\"Jakubowski\",\"Jaskolski\",\"Jast\",\"Jenkins\",\"Jerde\",\"Johns\",\"Johnson\",\"Johnston\",\"Jones\",\"Kassulke\",\"Kautzer\",\"Keebler\",\"Keeling\",\"Kemmer\",\"Kerluke\",\"Kertzmann\",\"Kessler\",\"Kiehn\",\"Kihn\",\"Kilback\",\"King\",\"Kirlin\",\"Klein\",\"Kling\",\"Klocko\",\"Koch\",\"Koelpin\",\"Koepp\",\"Kohler\",\"Konopelski\",\"Koss\",\"Kovacek\",\"Kozey\",\"Krajcik\",\"Kreiger\",\"Kris\",\"Kshlerin\",\"Kub\",\"Kuhic\",\"Kuhlman\",\"Kuhn\",\"Kulas\",\"Kunde\",\"Kunze\",\"Kuphal\",\"Kutch\",\"Kuvalis\",\"Labadie\",\"Lakin\",\"Lang\",\"Langosh\",\"Langworth\",\"Larkin\",\"Larson\",\"Leannon\",\"Lebsack\",\"Ledner\",\"Leffler\",\"Legros\",\"Lehner\",\"Lemke\",\"Lesch\",\"Leuschke\",\"Lind\",\"Lindgren\",\"Littel\",\"Little\",\"Lockman\",\"Lowe\",\"Lubowitz\",\"Lueilwitz\",\"Luettgen\",\"Lynch\",\"Macejkovic\",\"MacGyver\",\"Maggio\",\"Mann\",\"Mante\",\"Marks\",\"Marquardt\",\"Marvin\",\"Mayer\",\"Mayert\",\"McClure\",\"McCullough\",\"McDermott\",\"McGlynn\",\"McKenzie\",\"McLaughlin\",\"Medhurst\",\"Mertz\",\"Metz\",\"Miller\",\"Mills\",\"Mitchell\",\"Moen\",\"Mohr\",\"Monahan\",\"Moore\",\"Morar\",\"Morissette\",\"Mosciski\",\"Mraz\",\"Mueller\",\"Muller\",\"Murazik\",\"Murphy\",\"Murray\",\"Nader\",\"Nicolas\",\"Nienow\",\"Nikolaus\",\"Nitzsche\",\"Nolan\",\"Oberbrunner\",\"O'Connell\",\"O'Conner\",\"O'Hara\",\"O'Keefe\",\"O'Kon\",\"Okuneva\",\"Olson\",\"Ondricka\",\"O'Reilly\",\"Orn\",\"Ortiz\",\"Osinski\",\"Pacocha\",\"Padberg\",\"Pagac\",\"Parisian\",\"Parker\",\"Paucek\",\"Pfannerstill\",\"Pfeffer\",\"Pollich\",\"Pouros\",\"Powlowski\",\"Predovic\",\"Price\",\"Prohaska\",\"Prosacco\",\"Purdy\",\"Quigley\",\"Quitzon\",\"Rath\",\"Ratke\",\"Rau\",\"Raynor\",\"Reichel\",\"Reichert\",\"Reilly\",\"Reinger\",\"Rempel\",\"Renner\",\"Reynolds\",\"Rice\",\"Rippin\",\"Ritchie\",\"Robel\",\"Roberts\",\"Rodriguez\",\"Rogahn\",\"Rohan\",\"Rolfson\",\"Romaguera\",\"Roob\",\"Rosenbaum\",\"Rowe\",\"Ruecker\",\"Runolfsdottir\",\"Runolfsson\",\"Runte\",\"Russel\",\"Rutherford\",\"Ryan\",\"Sanford\",\"Satterfield\",\"Sauer\",\"Sawayn\",\"Schaden\",\"Schaefer\",\"Schamberger\",\"Schiller\",\"Schimmel\",\"Schinner\",\"Schmeler\",\"Schmidt\",\"Schmitt\",\"Schneider\",\"Schoen\",\"Schowalter\",\"Schroeder\",\"Schulist\",\"Schultz\",\"Schumm\",\"Schuppe\",\"Schuster\",\"Senger\",\"Shanahan\",\"Shields\",\"Simonis\",\"Sipes\",\"Skiles\",\"Smith\",\"Smitham\",\"Spencer\",\"Spinka\",\"Sporer\",\"Stamm\",\"Stanton\",\"Stark\",\"Stehr\",\"Steuber\",\"Stiedemann\",\"Stokes\",\"Stoltenberg\",\"Stracke\",\"Streich\",\"Stroman\",\"Strosin\",\"Swaniawski\",\"Swift\",\"Terry\",\"Thiel\",\"Thompson\",\"Tillman\",\"Torp\",\"Torphy\",\"Towne\",\"Toy\",\"Trantow\",\"Tremblay\",\"Treutel\",\"Tromp\",\"Turcotte\",\"Turner\",\"Ullrich\",\"Upton\",\"Vandervort\",\"Veum\",\"Volkman\",\"Von\",\"VonRueden\",\"Waelchi\",\"Walker\",\"Walsh\",\"Walter\",\"Ward\",\"Waters\",\"Watsica\",\"Weber\",\"Wehner\",\"Weimann\",\"Weissnat\",\"Welch\",\"West\",\"White\",\"Wiegand\",\"Wilderman\",\"Wilkinson\",\"Will\",\"Williamson\",\"Willms\",\"Windler\",\"Wintheiser\",\"Wisoky\",\"Wisozk\",\"Witting\",\"Wiza\",\"Wolf\",\"Wolff\",\"Wuckert\",\"Wunsch\",\"Wyman\",\"Yost\",\"Yundt\",\"Zboncak\",\"Zemlak\",\"Ziemann\",\"Zieme\",\"Zulauf\"]},{}],149:[function(e,t,n){t.exports=[\"James\",\"John\",\"Robert\",\"Michael\",\"William\",\"David\",\"Richard\",\"Charles\",\"Joseph\",\"Thomas\",\"Christopher\",\"Daniel\",\"Paul\",\"Mark\",\"Donald\",\"George\",\"Kenneth\",\"Steven\",\"Edward\",\"Brian\",\"Ronald\",\"Anthony\",\"Kevin\",\"Jason\",\"Matthew\",\"Gary\",\"Timothy\",\"Jose\",\"Larry\",\"Jeffrey\",\"Frank\",\"Scott\",\"Eric\",\"Stephen\",\"Andrew\",\"Raymond\",\"Gregory\",\"Joshua\",\"Jerry\",\"Dennis\",\"Walter\",\"Patrick\",\"Peter\",\"Harold\",\"Douglas\",\"Henry\",\"Carl\",\"Arthur\",\"Ryan\",\"Roger\",\"Joe\",\"Juan\",\"Jack\",\"Albert\",\"Jonathan\",\"Justin\",\"Terry\",\"Gerald\",\"Keith\",\"Samuel\",\"Willie\",\"Ralph\",\"Lawrence\",\"Nicholas\",\"Roy\",\"Benjamin\",\"Bruce\",\"Brandon\",\"Adam\",\"Harry\",\"Fred\",\"Wayne\",\"Billy\",\"Steve\",\"Louis\",\"Jeremy\",\"Aaron\",\"Randy\",\"Howard\",\"Eugene\",\"Carlos\",\"Russell\",\"Bobby\",\"Victor\",\"Martin\",\"Ernest\",\"Phillip\",\"Todd\",\"Jesse\",\"Craig\",\"Alan\",\"Shawn\",\"Clarence\",\"Sean\",\"Philip\",\"Chris\",\"Johnny\",\"Earl\",\"Jimmy\",\"Antonio\",\"Danny\",\"Bryan\",\"Tony\",\"Luis\",\"Mike\",\"Stanley\",\"Leonard\",\"Nathan\",\"Dale\",\"Manuel\",\"Rodney\",\"Curtis\",\"Norman\",\"Allen\",\"Marvin\",\"Vincent\",\"Glenn\",\"Jeffery\",\"Travis\",\"Jeff\",\"Chad\",\"Jacob\",\"Lee\",\"Melvin\",\"Alfred\",\"Kyle\",\"Francis\",\"Bradley\",\"Jesus\",\"Herbert\",\"Frederick\",\"Ray\",\"Joel\",\"Edwin\",\"Don\",\"Eddie\",\"Ricky\",\"Troy\",\"Randall\",\"Barry\",\"Alexander\",\"Bernard\",\"Mario\",\"Leroy\",\"Francisco\",\"Marcus\",\"Micheal\",\"Theodore\",\"Clifford\",\"Miguel\",\"Oscar\",\"Jay\",\"Jim\",\"Tom\",\"Calvin\",\"Alex\",\"Jon\",\"Ronnie\",\"Bill\",\"Lloyd\",\"Tommy\",\"Leon\",\"Derek\",\"Warren\",\"Darrell\",\"Jerome\",\"Floyd\",\"Leo\",\"Alvin\",\"Tim\",\"Wesley\",\"Gordon\",\"Dean\",\"Greg\",\"Jorge\",\"Dustin\",\"Pedro\",\"Derrick\",\"Dan\",\"Lewis\",\"Zachary\",\"Corey\",\"Herman\",\"Maurice\",\"Vernon\",\"Roberto\",\"Clyde\",\"Glen\",\"Hector\",\"Shane\",\"Ricardo\",\"Sam\",\"Rick\",\"Lester\",\"Brent\",\"Ramon\",\"Charlie\",\"Tyler\",\"Gilbert\",\"Gene\",\"Marc\",\"Reginald\",\"Ruben\",\"Brett\",\"Angel\",\"Nathaniel\",\"Rafael\",\"Leslie\",\"Edgar\",\"Milton\",\"Raul\",\"Ben\",\"Chester\",\"Cecil\",\"Duane\",\"Franklin\",\"Andre\",\"Elmer\",\"Brad\",\"Gabriel\",\"Ron\",\"Mitchell\",\"Roland\",\"Arnold\",\"Harvey\",\"Jared\",\"Adrian\",\"Karl\",\"Cory\",\"Claude\",\"Erik\",\"Darryl\",\"Jamie\",\"Neil\",\"Jessie\",\"Christian\",\"Javier\",\"Fernando\",\"Clinton\",\"Ted\",\"Mathew\",\"Tyrone\",\"Darren\",\"Lonnie\",\"Lance\",\"Cody\",\"Julio\",\"Kelly\",\"Kurt\",\"Allan\",\"Nelson\",\"Guy\",\"Clayton\",\"Hugh\",\"Max\",\"Dwayne\",\"Dwight\",\"Armando\",\"Felix\",\"Jimmie\",\"Everett\",\"Jordan\",\"Ian\",\"Wallace\",\"Ken\",\"Bob\",\"Jaime\",\"Casey\",\"Alfredo\",\"Alberto\",\"Dave\",\"Ivan\",\"Johnnie\",\"Sidney\",\"Byron\",\"Julian\",\"Isaac\",\"Morris\",\"Clifton\",\"Willard\",\"Daryl\",\"Ross\",\"Virgil\",\"Andy\",\"Marshall\",\"Salvador\",\"Perry\",\"Kirk\",\"Sergio\",\"Marion\",\"Tracy\",\"Seth\",\"Kent\",\"Terrance\",\"Rene\",\"Eduardo\",\"Terrence\",\"Enrique\",\"Freddie\",\"Wade\",\"Austin\",\"Stuart\",\"Fredrick\",\"Arturo\",\"Alejandro\",\"Jackie\",\"Joey\",\"Nick\",\"Luther\",\"Wendell\",\"Jeremiah\",\"Evan\",\"Julius\",\"Dana\",\"Donnie\",\"Otis\",\"Shannon\",\"Trevor\",\"Oliver\",\"Luke\",\"Homer\",\"Gerard\",\"Doug\",\"Kenny\",\"Hubert\",\"Angelo\",\"Shaun\",\"Lyle\",\"Matt\",\"Lynn\",\"Alfonso\",\"Orlando\",\"Rex\",\"Carlton\",\"Ernesto\",\"Cameron\",\"Neal\",\"Pablo\",\"Lorenzo\",\"Omar\",\"Wilbur\",\"Blake\",\"Grant\",\"Horace\",\"Roderick\",\"Kerry\",\"Abraham\",\"Willis\",\"Rickey\",\"Jean\",\"Ira\",\"Andres\",\"Cesar\",\"Johnathan\",\"Malcolm\",\"Rudolph\",\"Damon\",\"Kelvin\",\"Rudy\",\"Preston\",\"Alton\",\"Archie\",\"Marco\",\"Wm\",\"Pete\",\"Randolph\",\"Garry\",\"Geoffrey\",\"Jonathon\",\"Felipe\",\"Bennie\",\"Gerardo\",\"Ed\",\"Dominic\",\"Robin\",\"Loren\",\"Delbert\",\"Colin\",\"Guillermo\",\"Earnest\",\"Lucas\",\"Benny\",\"Noel\",\"Spencer\",\"Rodolfo\",\"Myron\",\"Edmund\",\"Garrett\",\"Salvatore\",\"Cedric\",\"Lowell\",\"Gregg\",\"Sherman\",\"Wilson\",\"Devin\",\"Sylvester\",\"Kim\",\"Roosevelt\",\"Israel\",\"Jermaine\",\"Forrest\",\"Wilbert\",\"Leland\",\"Simon\",\"Guadalupe\",\"Clark\",\"Irving\",\"Carroll\",\"Bryant\",\"Owen\",\"Rufus\",\"Woodrow\",\"Sammy\",\"Kristopher\",\"Mack\",\"Levi\",\"Marcos\",\"Gustavo\",\"Jake\",\"Lionel\",\"Marty\",\"Taylor\",\"Ellis\",\"Dallas\",\"Gilberto\",\"Clint\",\"Nicolas\",\"Laurence\",\"Ismael\",\"Orville\",\"Drew\",\"Jody\",\"Ervin\",\"Dewey\",\"Al\",\"Wilfred\",\"Josh\",\"Hugo\",\"Ignacio\",\"Caleb\",\"Tomas\",\"Sheldon\",\"Erick\",\"Frankie\",\"Stewart\",\"Doyle\",\"Darrel\",\"Rogelio\",\"Terence\",\"Santiago\",\"Alonzo\",\"Elias\",\"Bert\",\"Elbert\",\"Ramiro\",\"Conrad\",\"Pat\",\"Noah\",\"Grady\",\"Phil\",\"Cornelius\",\"Lamar\",\"Rolando\",\"Clay\",\"Percy\",\"Dexter\",\"Bradford\",\"Merle\",\"Darin\",\"Amos\",\"Terrell\",\"Moses\",\"Irvin\",\"Saul\",\"Roman\",\"Darnell\",\"Randal\",\"Tommie\",\"Timmy\",\"Darrin\",\"Winston\",\"Brendan\",\"Toby\",\"Van\",\"Abel\",\"Dominick\",\"Boyd\",\"Courtney\",\"Jan\",\"Emilio\",\"Elijah\",\"Cary\",\"Domingo\",\"Santos\",\"Aubrey\",\"Emmett\",\"Marlon\",\"Emanuel\",\"Jerald\",\"Edmond\"]},{}],150:[function(e,t,n){t.exports=[\"#{prefix} #{first_name} #{last_name}\",\"#{first_name} #{last_name} #{suffix}\",\"#{first_name} #{last_name}\",\"#{first_name} #{last_name}\",\"#{male_first_name} #{last_name}\",\"#{female_first_name} #{last_name}\"]},{}],151:[function(e,t,n){t.exports=[\"Mr.\",\"Mrs.\",\"Ms.\",\"Miss\",\"Dr.\"]},{}],152:[function(e,t,n){t.exports=[\"Jr.\",\"Sr.\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"MD\",\"DDS\",\"PhD\",\"DVM\"]},{}],153:[function(e,t,n){t.exports={descriptor:[\"Lead\",\"Senior\",\"Direct\",\"Corporate\",\"Dynamic\",\"Future\",\"Product\",\"National\",\"Regional\",\"District\",\"Central\",\"Global\",\"Customer\",\"Investor\",\"Dynamic\",\"International\",\"Legacy\",\"Forward\",\"Internal\",\"Human\",\"Chief\",\"Principal\"],level:[\"Solutions\",\"Program\",\"Brand\",\"Security\",\"Research\",\"Marketing\",\"Directives\",\"Implementation\",\"Integration\",\"Functionality\",\"Response\",\"Paradigm\",\"Tactics\",\"Identity\",\"Markets\",\"Group\",\"Division\",\"Applications\",\"Optimization\",\"Operations\",\"Infrastructure\",\"Intranet\",\"Communications\",\"Web\",\"Branding\",\"Quality\",\"Assurance\",\"Mobility\",\"Accounts\",\"Data\",\"Creative\",\"Configuration\",\"Accountability\",\"Interactions\",\"Factors\",\"Usability\",\"Metrics\"],job:[\"Supervisor\",\"Associate\",\"Executive\",\"Liaison\",\"Officer\",\"Manager\",\"Engineer\",\"Specialist\",\"Director\",\"Coordinator\",\"Administrator\",\"Architect\",\"Analyst\",\"Designer\",\"Planner\",\"Orchestrator\",\"Technician\",\"Developer\",\"Producer\",\"Consultant\",\"Assistant\",\"Facilitator\",\"Agent\",\"Representative\",\"Strategist\"]}},{}],154:[function(e,t,n){t.exports=[\"!##-!##-####\",\"(!##) !##-####\",\"1-!##-!##-####\",\"!##.!##.####\",\"!##-!##-####\",\"(!##) !##-####\",\"1-!##-!##-####\",\"!##.!##.####\",\"!##-!##-#### x###\",\"(!##) !##-#### x###\",\"1-!##-!##-#### x###\",\"!##.!##.#### x###\",\"!##-!##-#### x####\",\"(!##) !##-#### x####\",\"1-!##-!##-#### x####\",\"!##.!##.#### x####\",\"!##-!##-#### x#####\",\"(!##) !##-#### x#####\",\"1-!##-!##-#### x#####\",\"!##.!##.#### x#####\"]},{}],155:[function(e,t,n){var a={};t.exports=a,a.formats=e(\"./formats\")},{\"./formats\":154}],156:[function(e,t,n){t.exports=[\"/Applications\",\"/bin\",\"/boot\",\"/boot/defaults\",\"/dev\",\"/etc\",\"/etc/defaults\",\"/etc/mail\",\"/etc/namedb\",\"/etc/periodic\",\"/etc/ppp\",\"/home\",\"/home/user\",\"/home/user/dir\",\"/lib\",\"/Library\",\"/lost+found\",\"/media\",\"/mnt\",\"/net\",\"/Network\",\"/opt\",\"/opt/bin\",\"/opt/include\",\"/opt/lib\",\"/opt/sbin\",\"/opt/share\",\"/private\",\"/private/tmp\",\"/private/var\",\"/proc\",\"/rescue\",\"/root\",\"/sbin\",\"/selinux\",\"/srv\",\"/sys\",\"/System\",\"/tmp\",\"/Users\",\"/usr\",\"/usr/X11R6\",\"/usr/bin\",\"/usr/include\",\"/usr/lib\",\"/usr/libdata\",\"/usr/libexec\",\"/usr/local/bin\",\"/usr/local/src\",\"/usr/obj\",\"/usr/ports\",\"/usr/sbin\",\"/usr/share\",\"/usr/src\",\"/var\",\"/var/log\",\"/var/mail\",\"/var/spool\",\"/var/tmp\",\"/var/yp\"]},{}],157:[function(e,t,n){var a={};t.exports=a,a.directoryPaths=e(\"./directoryPaths\"),a.mimeTypes=e(\"./mimeTypes\")},{\"./directoryPaths\":156,\"./mimeTypes\":158}],158:[function(e,t,n){t.exports={\"application/1d-interleaved-parityfec\":{source:\"iana\"},\"application/3gpdash-qoe-report+xml\":{source:\"iana\"},\"application/3gpp-ims+xml\":{source:\"iana\"},\"application/a2l\":{source:\"iana\"},\"application/activemessage\":{source:\"iana\"},\"application/alto-costmap+json\":{source:\"iana\",compressible:!0},\"application/alto-costmapfilter+json\":{source:\"iana\",compressible:!0},\"application/alto-directory+json\":{source:\"iana\",compressible:!0},\"application/alto-endpointcost+json\":{source:\"iana\",compressible:!0},\"application/alto-endpointcostparams+json\":{source:\"iana\",compressible:!0},\"application/alto-endpointprop+json\":{source:\"iana\",compressible:!0},\"application/alto-endpointpropparams+json\":{source:\"iana\",compressible:!0},\"application/alto-error+json\":{source:\"iana\",compressible:!0},\"application/alto-networkmap+json\":{source:\"iana\",compressible:!0},\"application/alto-networkmapfilter+json\":{source:\"iana\",compressible:!0},\"application/aml\":{source:\"iana\"},\"application/andrew-inset\":{source:\"iana\",extensions:[\"ez\"]},\"application/applefile\":{source:\"iana\"},\"application/applixware\":{source:\"apache\",extensions:[\"aw\"]},\"application/atf\":{source:\"iana\"},\"application/atfx\":{source:\"iana\"},\"application/atom+xml\":{source:\"iana\",compressible:!0,extensions:[\"atom\"]},\"application/atomcat+xml\":{source:\"iana\",extensions:[\"atomcat\"]},\"application/atomdeleted+xml\":{source:\"iana\"},\"application/atomicmail\":{source:\"iana\"},\"application/atomsvc+xml\":{source:\"iana\",extensions:[\"atomsvc\"]},\"application/atxml\":{source:\"iana\"},\"application/auth-policy+xml\":{source:\"iana\"},\"application/bacnet-xdd+zip\":{source:\"iana\"},\"application/batch-smtp\":{source:\"iana\"},\"application/bdoc\":{compressible:!1,extensions:[\"bdoc\"]},\"application/beep+xml\":{source:\"iana\"},\"application/calendar+json\":{source:\"iana\",compressible:!0},\"application/calendar+xml\":{source:\"iana\"},\"application/call-completion\":{source:\"iana\"},\"application/cals-1840\":{source:\"iana\"},\"application/cbor\":{source:\"iana\"},\"application/ccmp+xml\":{source:\"iana\"},\"application/ccxml+xml\":{source:\"iana\",extensions:[\"ccxml\"]},\"application/cdfx+xml\":{source:\"iana\"},\"application/cdmi-capability\":{source:\"iana\",extensions:[\"cdmia\"]},\"application/cdmi-container\":{source:\"iana\",extensions:[\"cdmic\"]},\"application/cdmi-domain\":{source:\"iana\",extensions:[\"cdmid\"]},\"application/cdmi-object\":{source:\"iana\",extensions:[\"cdmio\"]},\"application/cdmi-queue\":{source:\"iana\",extensions:[\"cdmiq\"]},\"application/cdni\":{source:\"iana\"},\"application/cea\":{source:\"iana\"},\"application/cea-2018+xml\":{source:\"iana\"},\"application/cellml+xml\":{source:\"iana\"},\"application/cfw\":{source:\"iana\"},\"application/cms\":{source:\"iana\"},\"application/cnrp+xml\":{source:\"iana\"},\"application/coap-group+json\":{source:\"iana\",compressible:!0},\"application/commonground\":{source:\"iana\"},\"application/conference-info+xml\":{source:\"iana\"},\"application/cpl+xml\":{source:\"iana\"},\"application/csrattrs\":{source:\"iana\"},\"application/csta+xml\":{source:\"iana\"},\"application/cstadata+xml\":{source:\"iana\"},\"application/csvm+json\":{source:\"iana\",compressible:!0},\"application/cu-seeme\":{source:\"apache\",extensions:[\"cu\"]},\"application/cybercash\":{source:\"iana\"},\"application/dart\":{compressible:!0},\"application/dash+xml\":{source:\"iana\",extensions:[\"mdp\"]},\"application/dashdelta\":{source:\"iana\"},\"application/davmount+xml\":{source:\"iana\",extensions:[\"davmount\"]},\"application/dca-rft\":{source:\"iana\"},\"application/dcd\":{source:\"iana\"},\"application/dec-dx\":{source:\"iana\"},\"application/dialog-info+xml\":{source:\"iana\"},\"application/dicom\":{source:\"iana\"},\"application/dii\":{source:\"iana\"},\"application/dit\":{source:\"iana\"},\"application/dns\":{source:\"iana\"},\"application/docbook+xml\":{source:\"apache\",extensions:[\"dbk\"]},\"application/dskpp+xml\":{source:\"iana\"},\"application/dssc+der\":{source:\"iana\",extensions:[\"dssc\"]},\"application/dssc+xml\":{source:\"iana\",extensions:[\"xdssc\"]},\"application/dvcs\":{source:\"iana\"},\"application/ecmascript\":{source:\"iana\",compressible:!0,extensions:[\"ecma\"]},\"application/edi-consent\":{source:\"iana\"},\"application/edi-x12\":{source:\"iana\",compressible:!1},\"application/edifact\":{source:\"iana\",compressible:!1},\"application/emergencycalldata.comment+xml\":{source:\"iana\"},\"application/emergencycalldata.deviceinfo+xml\":{source:\"iana\"},\"application/emergencycalldata.providerinfo+xml\":{source:\"iana\"},\"application/emergencycalldata.serviceinfo+xml\":{source:\"iana\"},\"application/emergencycalldata.subscriberinfo+xml\":{source:\"iana\"},\"application/emma+xml\":{source:\"iana\",extensions:[\"emma\"]},\"application/emotionml+xml\":{source:\"iana\"},\"application/encaprtp\":{source:\"iana\"},\"application/epp+xml\":{source:\"iana\"},\"application/epub+zip\":{source:\"iana\",extensions:[\"epub\"]},\"application/eshop\":{source:\"iana\"},\"application/exi\":{source:\"iana\",extensions:[\"exi\"]},\"application/fastinfoset\":{source:\"iana\"},\"application/fastsoap\":{source:\"iana\"},\"application/fdt+xml\":{source:\"iana\"},\"application/fits\":{source:\"iana\"},\"application/font-sfnt\":{source:\"iana\"},\"application/font-tdpfr\":{source:\"iana\",extensions:[\"pfr\"]},\"application/font-woff\":{source:\"iana\",compressible:!1,extensions:[\"woff\"]},\"application/font-woff2\":{compressible:!1,extensions:[\"woff2\"]},\"application/framework-attributes+xml\":{source:\"iana\"},\"application/gml+xml\":{source:\"apache\",extensions:[\"gml\"]},\"application/gpx+xml\":{source:\"apache\",extensions:[\"gpx\"]},\"application/gxf\":{source:\"apache\",extensions:[\"gxf\"]},\"application/gzip\":{source:\"iana\",compressible:!1},\"application/h224\":{source:\"iana\"},\"application/held+xml\":{source:\"iana\"},\"application/http\":{source:\"iana\"},\"application/hyperstudio\":{source:\"iana\",extensions:[\"stk\"]},\"application/ibe-key-request+xml\":{source:\"iana\"},\"application/ibe-pkg-reply+xml\":{source:\"iana\"},\"application/ibe-pp-data\":{source:\"iana\"},\"application/iges\":{source:\"iana\"},\"application/im-iscomposing+xml\":{source:\"iana\"},\"application/index\":{source:\"iana\"},\"application/index.cmd\":{source:\"iana\"},\"application/index.obj\":{source:\"iana\"},\"application/index.response\":{source:\"iana\"},\"application/index.vnd\":{source:\"iana\"},\"application/inkml+xml\":{source:\"iana\",extensions:[\"ink\",\"inkml\"]},\"application/iotp\":{source:\"iana\"},\"application/ipfix\":{source:\"iana\",extensions:[\"ipfix\"]},\"application/ipp\":{source:\"iana\"},\"application/isup\":{source:\"iana\"},\"application/its+xml\":{source:\"iana\"},\"application/java-archive\":{source:\"apache\",compressible:!1,extensions:[\"jar\",\"war\",\"ear\"]},\"application/java-serialized-object\":{source:\"apache\",compressible:!1,extensions:[\"ser\"]},\"application/java-vm\":{source:\"apache\",compressible:!1,extensions:[\"class\"]},\"application/javascript\":{source:\"iana\",charset:\"UTF-8\",compressible:!0,extensions:[\"js\"]},\"application/jose\":{source:\"iana\"},\"application/jose+json\":{source:\"iana\",compressible:!0},\"application/jrd+json\":{source:\"iana\",compressible:!0},\"application/json\":{source:\"iana\",charset:\"UTF-8\",compressible:!0,extensions:[\"json\",\"map\"]},\"application/json-patch+json\":{source:\"iana\",compressible:!0},\"application/json-seq\":{source:\"iana\"},\"application/json5\":{extensions:[\"json5\"]},\"application/jsonml+json\":{source:\"apache\",compressible:!0,extensions:[\"jsonml\"]},\"application/jwk+json\":{source:\"iana\",compressible:!0},\"application/jwk-set+json\":{source:\"iana\",compressible:!0},\"application/jwt\":{source:\"iana\"},\"application/kpml-request+xml\":{source:\"iana\"},\"application/kpml-response+xml\":{source:\"iana\"},\"application/ld+json\":{source:\"iana\",compressible:!0,extensions:[\"jsonld\"]},\"application/link-format\":{source:\"iana\"},\"application/load-control+xml\":{source:\"iana\"},\"application/lost+xml\":{source:\"iana\",extensions:[\"lostxml\"]},\"application/lostsync+xml\":{source:\"iana\"},\"application/lxf\":{source:\"iana\"},\"application/mac-binhex40\":{source:\"iana\",extensions:[\"hqx\"]},\"application/mac-compactpro\":{source:\"apache\",extensions:[\"cpt\"]},\"application/macwriteii\":{source:\"iana\"},\"application/mads+xml\":{source:\"iana\",extensions:[\"mads\"]},\"application/manifest+json\":{charset:\"UTF-8\",compressible:!0,extensions:[\"webmanifest\"]},\"application/marc\":{source:\"iana\",extensions:[\"mrc\"]},\"application/marcxml+xml\":{source:\"iana\",extensions:[\"mrcx\"]},\"application/mathematica\":{source:\"iana\",extensions:[\"ma\",\"nb\",\"mb\"]},\"application/mathml+xml\":{source:\"iana\",extensions:[\"mathml\"]},\"application/mathml-content+xml\":{source:\"iana\"},\"application/mathml-presentation+xml\":{source:\"iana\"},\"application/mbms-associated-procedure-description+xml\":{source:\"iana\"},\"application/mbms-deregister+xml\":{source:\"iana\"},\"application/mbms-envelope+xml\":{source:\"iana\"},\"application/mbms-msk+xml\":{source:\"iana\"},\"application/mbms-msk-response+xml\":{source:\"iana\"},\"application/mbms-protection-description+xml\":{source:\"iana\"},\"application/mbms-reception-report+xml\":{source:\"iana\"},\"application/mbms-register+xml\":{source:\"iana\"},\"application/mbms-register-response+xml\":{source:\"iana\"},\"application/mbms-schedule+xml\":{source:\"iana\"},\"application/mbms-user-service-description+xml\":{source:\"iana\"},\"application/mbox\":{source:\"iana\",extensions:[\"mbox\"]},\"application/media-policy-dataset+xml\":{source:\"iana\"},\"application/media_control+xml\":{source:\"iana\"},\"application/mediaservercontrol+xml\":{source:\"iana\",extensions:[\"mscml\"]},\"application/merge-patch+json\":{source:\"iana\",compressible:!0},\"application/metalink+xml\":{source:\"apache\",extensions:[\"metalink\"]},\"application/metalink4+xml\":{source:\"iana\",extensions:[\"meta4\"]},\"application/mets+xml\":{source:\"iana\",extensions:[\"mets\"]},\"application/mf4\":{source:\"iana\"},\"application/mikey\":{source:\"iana\"},\"application/mods+xml\":{source:\"iana\",extensions:[\"mods\"]},\"application/moss-keys\":{source:\"iana\"},\"application/moss-signature\":{source:\"iana\"},\"application/mosskey-data\":{source:\"iana\"},\"application/mosskey-request\":{source:\"iana\"},\"application/mp21\":{source:\"iana\",extensions:[\"m21\",\"mp21\"]},\"application/mp4\":{source:\"iana\",extensions:[\"mp4s\",\"m4p\"]},\"application/mpeg4-generic\":{source:\"iana\"},\"application/mpeg4-iod\":{source:\"iana\"},\"application/mpeg4-iod-xmt\":{source:\"iana\"},\"application/mrb-consumer+xml\":{source:\"iana\"},\"application/mrb-publish+xml\":{source:\"iana\"},\"application/msc-ivr+xml\":{source:\"iana\"},\"application/msc-mixer+xml\":{source:\"iana\"},\"application/msword\":{source:\"iana\",compressible:!1,extensions:[\"doc\",\"dot\"]},\"application/mxf\":{source:\"iana\",extensions:[\"mxf\"]},\"application/nasdata\":{source:\"iana\"},\"application/news-checkgroups\":{source:\"iana\"},\"application/news-groupinfo\":{source:\"iana\"},\"application/news-transmission\":{source:\"iana\"},\"application/nlsml+xml\":{source:\"iana\"},\"application/nss\":{source:\"iana\"},\"application/ocsp-request\":{source:\"iana\"},\"application/ocsp-response\":{source:\"iana\"},\"application/octet-stream\":{source:\"iana\",compressible:!1,extensions:[\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"]},\"application/oda\":{source:\"iana\",extensions:[\"oda\"]},\"application/odx\":{source:\"iana\"},\"application/oebps-package+xml\":{source:\"iana\",extensions:[\"opf\"]},\"application/ogg\":{source:\"iana\",compressible:!1,extensions:[\"ogx\"]},\"application/omdoc+xml\":{source:\"apache\",extensions:[\"omdoc\"]},\"application/onenote\":{source:\"apache\",extensions:[\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"]},\"application/oxps\":{source:\"iana\",extensions:[\"oxps\"]},\"application/p2p-overlay+xml\":{source:\"iana\"},\"application/parityfec\":{source:\"iana\"},\"application/patch-ops-error+xml\":{source:\"iana\",extensions:[\"xer\"]},\"application/pdf\":{source:\"iana\",compressible:!1,extensions:[\"pdf\"]},\"application/pdx\":{source:\"iana\"},\"application/pgp-encrypted\":{source:\"iana\",compressible:!1,extensions:[\"pgp\"]},\"application/pgp-keys\":{source:\"iana\"},\"application/pgp-signature\":{source:\"iana\",extensions:[\"asc\",\"sig\"]},\"application/pics-rules\":{source:\"apache\",extensions:[\"prf\"]},\"application/pidf+xml\":{source:\"iana\"},\"application/pidf-diff+xml\":{source:\"iana\"},\"application/pkcs10\":{source:\"iana\",extensions:[\"p10\"]},\"application/pkcs12\":{source:\"iana\"},\"application/pkcs7-mime\":{source:\"iana\",extensions:[\"p7m\",\"p7c\"]},\"application/pkcs7-signature\":{source:\"iana\",extensions:[\"p7s\"]},\"application/pkcs8\":{source:\"iana\",extensions:[\"p8\"]},\"application/pkix-attr-cert\":{source:\"iana\",extensions:[\"ac\"]},\"application/pkix-cert\":{source:\"iana\",extensions:[\"cer\"]},\"application/pkix-crl\":{source:\"iana\",extensions:[\"crl\"]},\"application/pkix-pkipath\":{source:\"iana\",extensions:[\"pkipath\"]},\"application/pkixcmp\":{source:\"iana\",extensions:[\"pki\"]},\"application/pls+xml\":{source:\"iana\",extensions:[\"pls\"]},\"application/poc-settings+xml\":{source:\"iana\"},\"application/postscript\":{source:\"iana\",compressible:!0,extensions:[\"ai\",\"eps\",\"ps\"]},\"application/provenance+xml\":{source:\"iana\"},\"application/prs.alvestrand.titrax-sheet\":{source:\"iana\"},\"application/prs.cww\":{source:\"iana\",extensions:[\"cww\"]},\"application/prs.hpub+zip\":{source:\"iana\"},\"application/prs.nprend\":{source:\"iana\"},\"application/prs.plucker\":{source:\"iana\"},\"application/prs.rdf-xml-crypt\":{source:\"iana\"},\"application/prs.xsf+xml\":{source:\"iana\"},\"application/pskc+xml\":{source:\"iana\",extensions:[\"pskcxml\"]},\"application/qsig\":{source:\"iana\"},\"application/raptorfec\":{source:\"iana\"},\"application/rdap+json\":{source:\"iana\",compressible:!0},\"application/rdf+xml\":{source:\"iana\",compressible:!0,extensions:[\"rdf\"]},\"application/reginfo+xml\":{source:\"iana\",extensions:[\"rif\"]},\"application/relax-ng-compact-syntax\":{source:\"iana\",extensions:[\"rnc\"]},\"application/remote-printing\":{source:\"iana\"},\"application/reputon+json\":{source:\"iana\",compressible:!0},\"application/resource-lists+xml\":{source:\"iana\",extensions:[\"rl\"]},\"application/resource-lists-diff+xml\":{source:\"iana\",extensions:[\"rld\"]},\"application/rfc+xml\":{source:\"iana\"},\"application/riscos\":{source:\"iana\"},\"application/rlmi+xml\":{source:\"iana\"},\"application/rls-services+xml\":{source:\"iana\",extensions:[\"rs\"]},\"application/rpki-ghostbusters\":{source:\"iana\",extensions:[\"gbr\"]},\"application/rpki-manifest\":{source:\"iana\",extensions:[\"mft\"]},\"application/rpki-roa\":{source:\"iana\",extensions:[\"roa\"]},\"application/rpki-updown\":{source:\"iana\"},\"application/rsd+xml\":{source:\"apache\",extensions:[\"rsd\"]},\"application/rss+xml\":{source:\"apache\",compressible:!0,extensions:[\"rss\"]},\"application/rtf\":{source:\"iana\",compressible:!0,extensions:[\"rtf\"]},\"application/rtploopback\":{source:\"iana\"},\"application/rtx\":{source:\"iana\"},\"application/samlassertion+xml\":{source:\"iana\"},\"application/samlmetadata+xml\":{source:\"iana\"},\"application/sbml+xml\":{source:\"iana\",extensions:[\"sbml\"]},\"application/scaip+xml\":{source:\"iana\"},\"application/scim+json\":{source:\"iana\",compressible:!0},\"application/scvp-cv-request\":{source:\"iana\",extensions:[\"scq\"]},\"application/scvp-cv-response\":{source:\"iana\",extensions:[\"scs\"]},\"application/scvp-vp-request\":{source:\"iana\",extensions:[\"spq\"]},\"application/scvp-vp-response\":{source:\"iana\",extensions:[\"spp\"]},\"application/sdp\":{source:\"iana\",extensions:[\"sdp\"]},\"application/sep+xml\":{source:\"iana\"},\"application/sep-exi\":{source:\"iana\"},\"application/session-info\":{source:\"iana\"},\"application/set-payment\":{source:\"iana\"},\"application/set-payment-initiation\":{source:\"iana\",extensions:[\"setpay\"]},\"application/set-registration\":{source:\"iana\"},\"application/set-registration-initiation\":{source:\"iana\",extensions:[\"setreg\"]},\"application/sgml\":{source:\"iana\"},\"application/sgml-open-catalog\":{source:\"iana\"},\"application/shf+xml\":{source:\"iana\",extensions:[\"shf\"]},\"application/sieve\":{source:\"iana\"},\"application/simple-filter+xml\":{source:\"iana\"},\"application/simple-message-summary\":{source:\"iana\"},\"application/simplesymbolcontainer\":{source:\"iana\"},\"application/slate\":{source:\"iana\"},\"application/smil\":{source:\"iana\"},\"application/smil+xml\":{source:\"iana\",extensions:[\"smi\",\"smil\"]},\"application/smpte336m\":{source:\"iana\"},\"application/soap+fastinfoset\":{source:\"iana\"},\"application/soap+xml\":{source:\"iana\",compressible:!0},\"application/sparql-query\":{source:\"iana\",extensions:[\"rq\"]},\"application/sparql-results+xml\":{source:\"iana\",extensions:[\"srx\"]},\"application/spirits-event+xml\":{source:\"iana\"},\"application/sql\":{source:\"iana\"},\"application/srgs\":{source:\"iana\",extensions:[\"gram\"]},\"application/srgs+xml\":{source:\"iana\",extensions:[\"grxml\"]},\"application/sru+xml\":{source:\"iana\",extensions:[\"sru\"]},\"application/ssdl+xml\":{source:\"apache\",extensions:[\"ssdl\"]},\"application/ssml+xml\":{source:\"iana\",extensions:[\"ssml\"]},\"application/tamp-apex-update\":{source:\"iana\"},\"application/tamp-apex-update-confirm\":{source:\"iana\"},\"application/tamp-community-update\":{source:\"iana\"},\"application/tamp-community-update-confirm\":{source:\"iana\"},\"application/tamp-error\":{source:\"iana\"},\"application/tamp-sequence-adjust\":{source:\"iana\"},\"application/tamp-sequence-adjust-confirm\":{source:\"iana\"},\"application/tamp-status-query\":{source:\"iana\"},\"application/tamp-status-response\":{source:\"iana\"},\"application/tamp-update\":{source:\"iana\"},\"application/tamp-update-confirm\":{source:\"iana\"},\"application/tar\":{compressible:!0},\"application/tei+xml\":{source:\"iana\",extensions:[\"tei\",\"teicorpus\"]},\"application/thraud+xml\":{source:\"iana\",extensions:[\"tfi\"]},\"application/timestamp-query\":{source:\"iana\"},\"application/timestamp-reply\":{source:\"iana\"},\"application/timestamped-data\":{source:\"iana\",extensions:[\"tsd\"]},\"application/ttml+xml\":{source:\"iana\"},\"application/tve-trigger\":{source:\"iana\"},\"application/ulpfec\":{source:\"iana\"},\"application/urc-grpsheet+xml\":{source:\"iana\"},\"application/urc-ressheet+xml\":{source:\"iana\"},\"application/urc-targetdesc+xml\":{source:\"iana\"},\"application/urc-uisocketdesc+xml\":{source:\"iana\"},\"application/vcard+json\":{source:\"iana\",compressible:!0},\"application/vcard+xml\":{source:\"iana\"},\"application/vemmi\":{source:\"iana\"},\"application/vividence.scriptfile\":{source:\"apache\"},\"application/vnd.3gpp-prose+xml\":{source:\"iana\"},\"application/vnd.3gpp-prose-pc3ch+xml\":{source:\"iana\"},\"application/vnd.3gpp.access-transfer-events+xml\":{source:\"iana\"},\"application/vnd.3gpp.bsf+xml\":{source:\"iana\"},\"application/vnd.3gpp.mid-call+xml\":{source:\"iana\"},\"application/vnd.3gpp.pic-bw-large\":{source:\"iana\",extensions:[\"plb\"]},\"application/vnd.3gpp.pic-bw-small\":{source:\"iana\",extensions:[\"psb\"]},\"application/vnd.3gpp.pic-bw-var\":{source:\"iana\",extensions:[\"pvb\"]},\"application/vnd.3gpp.sms\":{source:\"iana\"},\"application/vnd.3gpp.srvcc-ext+xml\":{source:\"iana\"},\"application/vnd.3gpp.srvcc-info+xml\":{source:\"iana\"},\"application/vnd.3gpp.state-and-event-info+xml\":{source:\"iana\"},\"application/vnd.3gpp.ussd+xml\":{source:\"iana\"},\"application/vnd.3gpp2.bcmcsinfo+xml\":{source:\"iana\"},\"application/vnd.3gpp2.sms\":{source:\"iana\"},\"application/vnd.3gpp2.tcap\":{source:\"iana\",extensions:[\"tcap\"]},\"application/vnd.3m.post-it-notes\":{source:\"iana\",extensions:[\"pwn\"]},\"application/vnd.accpac.simply.aso\":{source:\"iana\",extensions:[\"aso\"]},\"application/vnd.accpac.simply.imp\":{source:\"iana\",extensions:[\"imp\"]},\"application/vnd.acucobol\":{source:\"iana\",extensions:[\"acu\"]},\"application/vnd.acucorp\":{source:\"iana\",extensions:[\"atc\",\"acutc\"]},\"application/vnd.adobe.air-application-installer-package+zip\":{source:\"apache\",extensions:[\"air\"]},\"application/vnd.adobe.flash.movie\":{source:\"iana\"},\"application/vnd.adobe.formscentral.fcdt\":{source:\"iana\",extensions:[\"fcdt\"]},\"application/vnd.adobe.fxp\":{source:\"iana\",extensions:[\"fxp\",\"fxpl\"]},\"application/vnd.adobe.partial-upload\":{source:\"iana\"},\"application/vnd.adobe.xdp+xml\":{source:\"iana\",extensions:[\"xdp\"]},\"application/vnd.adobe.xfdf\":{source:\"iana\",extensions:[\"xfdf\"]},\"application/vnd.aether.imp\":{source:\"iana\"},\"application/vnd.ah-barcode\":{source:\"iana\"},\"application/vnd.ahead.space\":{source:\"iana\",extensions:[\"ahead\"]},\"application/vnd.airzip.filesecure.azf\":{source:\"iana\",extensions:[\"azf\"]},\"application/vnd.airzip.filesecure.azs\":{source:\"iana\",extensions:[\"azs\"]},\"application/vnd.amazon.ebook\":{source:\"apache\",extensions:[\"azw\"]},\"application/vnd.americandynamics.acc\":{source:\"iana\",extensions:[\"acc\"]},\"application/vnd.amiga.ami\":{source:\"iana\",extensions:[\"ami\"]},\"application/vnd.amundsen.maze+xml\":{source:\"iana\"},\"application/vnd.android.package-archive\":{source:\"apache\",compressible:!1,extensions:[\"apk\"]},\"application/vnd.anki\":{source:\"iana\"},\"application/vnd.anser-web-certificate-issue-initiation\":{source:\"iana\",extensions:[\"cii\"]},\"application/vnd.anser-web-funds-transfer-initiation\":{source:\"apache\",extensions:[\"fti\"]},\"application/vnd.antix.game-component\":{source:\"iana\",extensions:[\"atx\"]},\"application/vnd.apache.thrift.binary\":{source:\"iana\"},\"application/vnd.apache.thrift.compact\":{source:\"iana\"},\"application/vnd.apache.thrift.json\":{source:\"iana\"},\"application/vnd.api+json\":{source:\"iana\",compressible:!0},\"application/vnd.apple.installer+xml\":{source:\"iana\",extensions:[\"mpkg\"]},\"application/vnd.apple.mpegurl\":{source:\"iana\",extensions:[\"m3u8\"]},\"application/vnd.apple.pkpass\":{compressible:!1,extensions:[\"pkpass\"]},\"application/vnd.arastra.swi\":{source:\"iana\"},\"application/vnd.aristanetworks.swi\":{source:\"iana\",extensions:[\"swi\"]},\"application/vnd.artsquare\":{source:\"iana\"},\"application/vnd.astraea-software.iota\":{source:\"iana\",extensions:[\"iota\"]},\"application/vnd.audiograph\":{source:\"iana\",extensions:[\"aep\"]},\"application/vnd.autopackage\":{source:\"iana\"},\"application/vnd.avistar+xml\":{source:\"iana\"},\"application/vnd.balsamiq.bmml+xml\":{source:\"iana\"},\"application/vnd.balsamiq.bmpr\":{source:\"iana\"},\"application/vnd.bekitzur-stech+json\":{source:\"iana\",compressible:!0},\"application/vnd.biopax.rdf+xml\":{source:\"iana\"},\"application/vnd.blueice.multipass\":{source:\"iana\",extensions:[\"mpm\"]},\"application/vnd.bluetooth.ep.oob\":{source:\"iana\"},\"application/vnd.bluetooth.le.oob\":{source:\"iana\"},\"application/vnd.bmi\":{source:\"iana\",extensions:[\"bmi\"]},\"application/vnd.businessobjects\":{source:\"iana\",extensions:[\"rep\"]},\"application/vnd.cab-jscript\":{source:\"iana\"},\"application/vnd.canon-cpdl\":{source:\"iana\"},\"application/vnd.canon-lips\":{source:\"iana\"},\"application/vnd.cendio.thinlinc.clientconf\":{source:\"iana\"},\"application/vnd.century-systems.tcp_stream\":{source:\"iana\"},\"application/vnd.chemdraw+xml\":{source:\"iana\",extensions:[\"cdxml\"]},\"application/vnd.chipnuts.karaoke-mmd\":{source:\"iana\",extensions:[\"mmd\"]},\"application/vnd.cinderella\":{source:\"iana\",extensions:[\"cdy\"]},\"application/vnd.cirpack.isdn-ext\":{source:\"iana\"},\"application/vnd.citationstyles.style+xml\":{source:\"iana\"},\"application/vnd.claymore\":{source:\"iana\",extensions:[\"cla\"]},\"application/vnd.cloanto.rp9\":{source:\"iana\",extensions:[\"rp9\"]},\"application/vnd.clonk.c4group\":{source:\"iana\",extensions:[\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"]},\"application/vnd.cluetrust.cartomobile-config\":{source:\"iana\",extensions:[\"c11amc\"]},\"application/vnd.cluetrust.cartomobile-config-pkg\":{source:\"iana\",extensions:[\"c11amz\"]},\"application/vnd.coffeescript\":{source:\"iana\"},\"application/vnd.collection+json\":{source:\"iana\",compressible:!0},\"application/vnd.collection.doc+json\":{source:\"iana\",compressible:!0},\"application/vnd.collection.next+json\":{source:\"iana\",compressible:!0},\"application/vnd.commerce-battelle\":{source:\"iana\"},\"application/vnd.commonspace\":{source:\"iana\",extensions:[\"csp\"]},\"application/vnd.contact.cmsg\":{source:\"iana\",extensions:[\"cdbcmsg\"]},\"application/vnd.cosmocaller\":{source:\"iana\",extensions:[\"cmc\"]},\"application/vnd.crick.clicker\":{source:\"iana\",extensions:[\"clkx\"]},\"application/vnd.crick.clicker.keyboard\":{source:\"iana\",extensions:[\"clkk\"]},\"application/vnd.crick.clicker.palette\":{source:\"iana\",extensions:[\"clkp\"]},\"application/vnd.crick.clicker.template\":{source:\"iana\",extensions:[\"clkt\"]},\"application/vnd.crick.clicker.wordbank\":{source:\"iana\",extensions:[\"clkw\"]},\"application/vnd.criticaltools.wbs+xml\":{source:\"iana\",extensions:[\"wbs\"]},\"application/vnd.ctc-posml\":{source:\"iana\",extensions:[\"pml\"]},\"application/vnd.ctct.ws+xml\":{source:\"iana\"},\"application/vnd.cups-pdf\":{source:\"iana\"},\"application/vnd.cups-postscript\":{source:\"iana\"},\"application/vnd.cups-ppd\":{source:\"iana\",extensions:[\"ppd\"]},\"application/vnd.cups-raster\":{source:\"iana\"},\"application/vnd.cups-raw\":{source:\"iana\"},\"application/vnd.curl\":{source:\"iana\"},\"application/vnd.curl.car\":{source:\"apache\",extensions:[\"car\"]},\"application/vnd.curl.pcurl\":{source:\"apache\",extensions:[\"pcurl\"]},\"application/vnd.cyan.dean.root+xml\":{source:\"iana\"},\"application/vnd.cybank\":{source:\"iana\"},\"application/vnd.dart\":{source:\"iana\",compressible:!0,extensions:[\"dart\"]},\"application/vnd.data-vision.rdz\":{source:\"iana\",extensions:[\"rdz\"]},\"application/vnd.debian.binary-package\":{source:\"iana\"},\"application/vnd.dece.data\":{source:\"iana\",extensions:[\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"]},\"application/vnd.dece.ttml+xml\":{source:\"iana\",extensions:[\"uvt\",\"uvvt\"]},\"application/vnd.dece.unspecified\":{source:\"iana\",extensions:[\"uvx\",\"uvvx\"]},\"application/vnd.dece.zip\":{source:\"iana\",extensions:[\"uvz\",\"uvvz\"]},\"application/vnd.denovo.fcselayout-link\":{source:\"iana\",extensions:[\"fe_launch\"]},\"application/vnd.desmume-movie\":{source:\"iana\"},\"application/vnd.dir-bi.plate-dl-nosuffix\":{source:\"iana\"},\"application/vnd.dm.delegation+xml\":{source:\"iana\"},\"application/vnd.dna\":{source:\"iana\",extensions:[\"dna\"]},\"application/vnd.document+json\":{source:\"iana\",compressible:!0},\"application/vnd.dolby.mlp\":{source:\"apache\",extensions:[\"mlp\"]},\"application/vnd.dolby.mobile.1\":{source:\"iana\"},\"application/vnd.dolby.mobile.2\":{source:\"iana\"},\"application/vnd.doremir.scorecloud-binary-document\":{source:\"iana\"},\"application/vnd.dpgraph\":{source:\"iana\",extensions:[\"dpg\"]},\"application/vnd.dreamfactory\":{source:\"iana\",extensions:[\"dfac\"]},\"application/vnd.drive+json\":{source:\"iana\",compressible:!0},\"application/vnd.ds-keypoint\":{source:\"apache\",extensions:[\"kpxx\"]},\"application/vnd.dtg.local\":{source:\"iana\"},\"application/vnd.dtg.local.flash\":{source:\"iana\"},\"application/vnd.dtg.local.html\":{source:\"iana\"},\"application/vnd.dvb.ait\":{source:\"iana\",extensions:[\"ait\"]},\"application/vnd.dvb.dvbj\":{source:\"iana\"},\"application/vnd.dvb.esgcontainer\":{source:\"iana\"},\"application/vnd.dvb.ipdcdftnotifaccess\":{source:\"iana\"},\"application/vnd.dvb.ipdcesgaccess\":{source:\"iana\"},\"application/vnd.dvb.ipdcesgaccess2\":{source:\"iana\"},\"application/vnd.dvb.ipdcesgpdd\":{source:\"iana\"},\"application/vnd.dvb.ipdcroaming\":{source:\"iana\"},\"application/vnd.dvb.iptv.alfec-base\":{source:\"iana\"},\"application/vnd.dvb.iptv.alfec-enhancement\":{source:\"iana\"},\"application/vnd.dvb.notif-aggregate-root+xml\":{source:\"iana\"},\"application/vnd.dvb.notif-container+xml\":{source:\"iana\"},\"application/vnd.dvb.notif-generic+xml\":{source:\"iana\"},\"application/vnd.dvb.notif-ia-msglist+xml\":{source:\"iana\"},\"application/vnd.dvb.notif-ia-registration-request+xml\":{source:\"iana\"},\"application/vnd.dvb.notif-ia-registration-response+xml\":{source:\"iana\"},\"application/vnd.dvb.notif-init+xml\":{source:\"iana\"},\"application/vnd.dvb.pfr\":{source:\"iana\"},\"application/vnd.dvb.service\":{source:\"iana\",extensions:[\"svc\"]},\"application/vnd.dxr\":{source:\"iana\"},\"application/vnd.dynageo\":{source:\"iana\",extensions:[\"geo\"]},\"application/vnd.dzr\":{source:\"iana\"},\"application/vnd.easykaraoke.cdgdownload\":{source:\"iana\"},\"application/vnd.ecdis-update\":{source:\"iana\"},\"application/vnd.ecowin.chart\":{source:\"iana\",extensions:[\"mag\"]},\"application/vnd.ecowin.filerequest\":{source:\"iana\"},\"application/vnd.ecowin.fileupdate\":{source:\"iana\"},\"application/vnd.ecowin.series\":{source:\"iana\"},\"application/vnd.ecowin.seriesrequest\":{source:\"iana\"},\"application/vnd.ecowin.seriesupdate\":{source:\"iana\"},\"application/vnd.emclient.accessrequest+xml\":{source:\"iana\"},\"application/vnd.enliven\":{source:\"iana\",extensions:[\"nml\"]},\"application/vnd.enphase.envoy\":{source:\"iana\"},\"application/vnd.eprints.data+xml\":{source:\"iana\"},\"application/vnd.epson.esf\":{source:\"iana\",extensions:[\"esf\"]},\"application/vnd.epson.msf\":{source:\"iana\",extensions:[\"msf\"]},\"application/vnd.epson.quickanime\":{source:\"iana\",extensions:[\"qam\"]},\"application/vnd.epson.salt\":{source:\"iana\",extensions:[\"slt\"]},\"application/vnd.epson.ssf\":{source:\"iana\",extensions:[\"ssf\"]},\"application/vnd.ericsson.quickcall\":{source:\"iana\"},\"application/vnd.eszigno3+xml\":{source:\"iana\",extensions:[\"es3\",\"et3\"]},\"application/vnd.etsi.aoc+xml\":{source:\"iana\"},\"application/vnd.etsi.asic-e+zip\":{source:\"iana\"},\"application/vnd.etsi.asic-s+zip\":{source:\"iana\"},\"application/vnd.etsi.cug+xml\":{source:\"iana\"},\"application/vnd.etsi.iptvcommand+xml\":{source:\"iana\"},\"application/vnd.etsi.iptvdiscovery+xml\":{source:\"iana\"},\"application/vnd.etsi.iptvprofile+xml\":{source:\"iana\"},\"application/vnd.etsi.iptvsad-bc+xml\":{source:\"iana\"},\"application/vnd.etsi.iptvsad-cod+xml\":{source:\"iana\"},\"application/vnd.etsi.iptvsad-npvr+xml\":{source:\"iana\"},\"application/vnd.etsi.iptvservice+xml\":{source:\"iana\"},\"application/vnd.etsi.iptvsync+xml\":{source:\"iana\"},\"application/vnd.etsi.iptvueprofile+xml\":{source:\"iana\"},\"application/vnd.etsi.mcid+xml\":{source:\"iana\"},\"application/vnd.etsi.mheg5\":{source:\"iana\"},\"application/vnd.etsi.overload-control-policy-dataset+xml\":{source:\"iana\"},\"application/vnd.etsi.pstn+xml\":{source:\"iana\"},\"application/vnd.etsi.sci+xml\":{source:\"iana\"},\"application/vnd.etsi.simservs+xml\":{source:\"iana\"},\"application/vnd.etsi.timestamp-token\":{source:\"iana\"},\"application/vnd.etsi.tsl+xml\":{source:\"iana\"},\"application/vnd.etsi.tsl.der\":{source:\"iana\"},\"application/vnd.eudora.data\":{source:\"iana\"},\"application/vnd.ezpix-album\":{source:\"iana\",extensions:[\"ez2\"]},\"application/vnd.ezpix-package\":{source:\"iana\",extensions:[\"ez3\"]},\"application/vnd.f-secure.mobile\":{source:\"iana\"},\"application/vnd.fastcopy-disk-image\":{source:\"iana\"},\"application/vnd.fdf\":{source:\"iana\",extensions:[\"fdf\"]},\"application/vnd.fdsn.mseed\":{source:\"iana\",extensions:[\"mseed\"]},\"application/vnd.fdsn.seed\":{source:\"iana\",extensions:[\"seed\",\"dataless\"]},\"application/vnd.ffsns\":{source:\"iana\"},\"application/vnd.filmit.zfc\":{source:\"iana\"},\"application/vnd.fints\":{source:\"iana\"},\"application/vnd.firemonkeys.cloudcell\":{source:\"iana\"},\"application/vnd.flographit\":{source:\"iana\",extensions:[\"gph\"]},\"application/vnd.fluxtime.clip\":{source:\"iana\",extensions:[\"ftc\"]},\"application/vnd.font-fontforge-sfd\":{source:\"iana\"},\"application/vnd.framemaker\":{source:\"iana\",extensions:[\"fm\",\"frame\",\"maker\",\"book\"]},\"application/vnd.frogans.fnc\":{source:\"iana\",extensions:[\"fnc\"]},\"application/vnd.frogans.ltf\":{source:\"iana\",extensions:[\"ltf\"]},\"application/vnd.fsc.weblaunch\":{source:\"iana\",extensions:[\"fsc\"]},\"application/vnd.fujitsu.oasys\":{source:\"iana\",extensions:[\"oas\"]},\"application/vnd.fujitsu.oasys2\":{source:\"iana\",extensions:[\"oa2\"]},\"application/vnd.fujitsu.oasys3\":{source:\"iana\",extensions:[\"oa3\"]},\"application/vnd.fujitsu.oasysgp\":{source:\"iana\",extensions:[\"fg5\"]},\"application/vnd.fujitsu.oasysprs\":{source:\"iana\",extensions:[\"bh2\"]},\"application/vnd.fujixerox.art-ex\":{source:\"iana\"},\"application/vnd.fujixerox.art4\":{source:\"iana\"},\"application/vnd.fujixerox.ddd\":{source:\"iana\",extensions:[\"ddd\"]},\"application/vnd.fujixerox.docuworks\":{source:\"iana\",extensions:[\"xdw\"]},\"application/vnd.fujixerox.docuworks.binder\":{source:\"iana\",extensions:[\"xbd\"]},\"application/vnd.fujixerox.docuworks.container\":{source:\"iana\"},\"application/vnd.fujixerox.hbpl\":{source:\"iana\"},\"application/vnd.fut-misnet\":{source:\"iana\"},\"application/vnd.fuzzysheet\":{source:\"iana\",extensions:[\"fzs\"]},\"application/vnd.genomatix.tuxedo\":{source:\"iana\",extensions:[\"txd\"]},\"application/vnd.geo+json\":{source:\"iana\",compressible:!0},\"application/vnd.geocube+xml\":{source:\"iana\"},\"application/vnd.geogebra.file\":{source:\"iana\",extensions:[\"ggb\"]},\"application/vnd.geogebra.tool\":{source:\"iana\",extensions:[\"ggt\"]},\"application/vnd.geometry-explorer\":{source:\"iana\",extensions:[\"gex\",\"gre\"]},\"application/vnd.geonext\":{source:\"iana\",extensions:[\"gxt\"]},\"application/vnd.geoplan\":{source:\"iana\",extensions:[\"g2w\"]},\"application/vnd.geospace\":{source:\"iana\",extensions:[\"g3w\"]},\"application/vnd.gerber\":{source:\"iana\"},\"application/vnd.globalplatform.card-content-mgt\":{source:\"iana\"},\"application/vnd.globalplatform.card-content-mgt-response\":{source:\"iana\"},\"application/vnd.gmx\":{source:\"iana\",extensions:[\"gmx\"]},\"application/vnd.google-apps.document\":{compressible:!1,extensions:[\"gdoc\"]},\"application/vnd.google-apps.presentation\":{compressible:!1,extensions:[\"gslides\"]},\"application/vnd.google-apps.spreadsheet\":{compressible:!1,extensions:[\"gsheet\"]},\"application/vnd.google-earth.kml+xml\":{source:\"iana\",compressible:!0,extensions:[\"kml\"]},\"application/vnd.google-earth.kmz\":{source:\"iana\",compressible:!1,extensions:[\"kmz\"]},\"application/vnd.gov.sk.e-form+xml\":{source:\"iana\"},\"application/vnd.gov.sk.e-form+zip\":{source:\"iana\"},\"application/vnd.gov.sk.xmldatacontainer+xml\":{source:\"iana\"},\"application/vnd.grafeq\":{source:\"iana\",extensions:[\"gqf\",\"gqs\"]},\"application/vnd.gridmp\":{source:\"iana\"},\"application/vnd.groove-account\":{source:\"iana\",extensions:[\"gac\"]},\"application/vnd.groove-help\":{source:\"iana\",extensions:[\"ghf\"]},\"application/vnd.groove-identity-message\":{source:\"iana\",extensions:[\"gim\"]},\"application/vnd.groove-injector\":{source:\"iana\",extensions:[\"grv\"]},\"application/vnd.groove-tool-message\":{source:\"iana\",extensions:[\"gtm\"]},\"application/vnd.groove-tool-template\":{source:\"iana\",extensions:[\"tpl\"]},\"application/vnd.groove-vcard\":{source:\"iana\",extensions:[\"vcg\"]},\"application/vnd.hal+json\":{source:\"iana\",compressible:!0},\"application/vnd.hal+xml\":{source:\"iana\",extensions:[\"hal\"]},\"application/vnd.handheld-entertainment+xml\":{source:\"iana\",extensions:[\"zmm\"]},\"application/vnd.hbci\":{source:\"iana\",extensions:[\"hbci\"]},\"application/vnd.hcl-bireports\":{source:\"iana\"},\"application/vnd.heroku+json\":{source:\"iana\",compressible:!0},\"application/vnd.hhe.lesson-player\":{source:\"iana\",extensions:[\"les\"]},\"application/vnd.hp-hpgl\":{source:\"iana\",extensions:[\"hpgl\"]},\"application/vnd.hp-hpid\":{source:\"iana\",extensions:[\"hpid\"]},\"application/vnd.hp-hps\":{source:\"iana\",extensions:[\"hps\"]},\"application/vnd.hp-jlyt\":{source:\"iana\",extensions:[\"jlt\"]},\"application/vnd.hp-pcl\":{source:\"iana\",extensions:[\"pcl\"]},\"application/vnd.hp-pclxl\":{source:\"iana\",extensions:[\"pclxl\"]},\"application/vnd.httphone\":{source:\"iana\"},\"application/vnd.hydrostatix.sof-data\":{source:\"iana\",extensions:[\"sfd-hdstx\"]},\"application/vnd.hyperdrive+json\":{source:\"iana\",compressible:!0},\"application/vnd.hzn-3d-crossword\":{source:\"iana\"},\"application/vnd.ibm.afplinedata\":{source:\"iana\"},\"application/vnd.ibm.electronic-media\":{source:\"iana\"},\"application/vnd.ibm.minipay\":{source:\"iana\",extensions:[\"mpy\"]},\"application/vnd.ibm.modcap\":{source:\"iana\",extensions:[\"afp\",\"listafp\",\"list3820\"]},\"application/vnd.ibm.rights-management\":{source:\"iana\",extensions:[\"irm\"]},\"application/vnd.ibm.secure-container\":{source:\"iana\",extensions:[\"sc\"]},\"application/vnd.iccprofile\":{source:\"iana\",extensions:[\"icc\",\"icm\"]},\"application/vnd.ieee.1905\":{source:\"iana\"},\"application/vnd.igloader\":{source:\"iana\",extensions:[\"igl\"]},\"application/vnd.immervision-ivp\":{source:\"iana\",extensions:[\"ivp\"]},\"application/vnd.immervision-ivu\":{source:\"iana\",extensions:[\"ivu\"]},\"application/vnd.ims.imsccv1p1\":{source:\"iana\"},\"application/vnd.ims.imsccv1p2\":{source:\"iana\"},\"application/vnd.ims.imsccv1p3\":{source:\"iana\"},\"application/vnd.ims.lis.v2.result+json\":{source:\"iana\",compressible:!0},\"application/vnd.ims.lti.v2.toolconsumerprofile+json\":{source:\"iana\",compressible:!0},\"application/vnd.ims.lti.v2.toolproxy+json\":{source:\"iana\",compressible:!0},\"application/vnd.ims.lti.v2.toolproxy.id+json\":{source:\"iana\",compressible:!0},\"application/vnd.ims.lti.v2.toolsettings+json\":{source:\"iana\",compressible:!0},\"application/vnd.ims.lti.v2.toolsettings.simple+json\":{source:\"iana\",compressible:!0},\"application/vnd.informedcontrol.rms+xml\":{source:\"iana\"},\"application/vnd.informix-visionary\":{source:\"iana\"},\"application/vnd.infotech.project\":{source:\"iana\"},\"application/vnd.infotech.project+xml\":{source:\"iana\"},\"application/vnd.innopath.wamp.notification\":{source:\"iana\"},\"application/vnd.insors.igm\":{source:\"iana\",extensions:[\"igm\"]},\"application/vnd.intercon.formnet\":{source:\"iana\",extensions:[\"xpw\",\"xpx\"]},\"application/vnd.intergeo\":{source:\"iana\",extensions:[\"i2g\"]},\"application/vnd.intertrust.digibox\":{source:\"iana\"},\"application/vnd.intertrust.nncp\":{source:\"iana\"},\"application/vnd.intu.qbo\":{source:\"iana\",extensions:[\"qbo\"]},\"application/vnd.intu.qfx\":{source:\"iana\",extensions:[\"qfx\"]},\"application/vnd.iptc.g2.catalogitem+xml\":{source:\"iana\"},\"application/vnd.iptc.g2.conceptitem+xml\":{source:\"iana\"},\"application/vnd.iptc.g2.knowledgeitem+xml\":{source:\"iana\"},\"application/vnd.iptc.g2.newsitem+xml\":{source:\"iana\"},\"application/vnd.iptc.g2.newsmessage+xml\":{source:\"iana\"},\"application/vnd.iptc.g2.packageitem+xml\":{source:\"iana\"},\"application/vnd.iptc.g2.planningitem+xml\":{source:\"iana\"},\"application/vnd.ipunplugged.rcprofile\":{source:\"iana\",extensions:[\"rcprofile\"]},\"application/vnd.irepository.package+xml\":{source:\"iana\",extensions:[\"irp\"]},\"application/vnd.is-xpr\":{source:\"iana\",extensions:[\"xpr\"]},\"application/vnd.isac.fcs\":{source:\"iana\",extensions:[\"fcs\"]},\"application/vnd.jam\":{source:\"iana\",extensions:[\"jam\"]},\"application/vnd.japannet-directory-service\":{source:\"iana\"},\"application/vnd.japannet-jpnstore-wakeup\":{source:\"iana\"},\"application/vnd.japannet-payment-wakeup\":{source:\"iana\"},\"application/vnd.japannet-registration\":{source:\"iana\"},\"application/vnd.japannet-registration-wakeup\":{source:\"iana\"},\"application/vnd.japannet-setstore-wakeup\":{source:\"iana\"},\"application/vnd.japannet-verification\":{source:\"iana\"},\"application/vnd.japannet-verification-wakeup\":{source:\"iana\"},\"application/vnd.jcp.javame.midlet-rms\":{source:\"iana\",extensions:[\"rms\"]},\"application/vnd.jisp\":{source:\"iana\",extensions:[\"jisp\"]},\"application/vnd.joost.joda-archive\":{source:\"iana\",extensions:[\"joda\"]},\"application/vnd.jsk.isdn-ngn\":{source:\"iana\"},\"application/vnd.kahootz\":{source:\"iana\",extensions:[\"ktz\",\"ktr\"]},\"application/vnd.kde.karbon\":{source:\"iana\",extensions:[\"karbon\"]},\"application/vnd.kde.kchart\":{source:\"iana\",extensions:[\"chrt\"]},\"application/vnd.kde.kformula\":{source:\"iana\",extensions:[\"kfo\"]},\"application/vnd.kde.kivio\":{source:\"iana\",extensions:[\"flw\"]},\"application/vnd.kde.kontour\":{source:\"iana\",extensions:[\"kon\"]},\"application/vnd.kde.kpresenter\":{source:\"iana\",extensions:[\"kpr\",\"kpt\"]},\"application/vnd.kde.kspread\":{source:\"iana\",extensions:[\"ksp\"]},\"application/vnd.kde.kword\":{source:\"iana\",extensions:[\"kwd\",\"kwt\"]},\"application/vnd.kenameaapp\":{source:\"iana\",extensions:[\"htke\"]},\"application/vnd.kidspiration\":{source:\"iana\",extensions:[\"kia\"]},\"application/vnd.kinar\":{source:\"iana\",extensions:[\"kne\",\"knp\"]},\"application/vnd.koan\":{source:\"iana\",extensions:[\"skp\",\"skd\",\"skt\",\"skm\"]},\"application/vnd.kodak-descriptor\":{source:\"iana\",extensions:[\"sse\"]},\"application/vnd.las.las+xml\":{source:\"iana\",extensions:[\"lasxml\"]},\"application/vnd.liberty-request+xml\":{source:\"iana\"},\"application/vnd.llamagraphics.life-balance.desktop\":{source:\"iana\",extensions:[\"lbd\"]},\"application/vnd.llamagraphics.life-balance.exchange+xml\":{source:\"iana\",extensions:[\"lbe\"]},\"application/vnd.lotus-1-2-3\":{source:\"iana\",extensions:[\"123\"]},\"application/vnd.lotus-approach\":{source:\"iana\",extensions:[\"apr\"]},\"application/vnd.lotus-freelance\":{source:\"iana\",extensions:[\"pre\"]},\"application/vnd.lotus-notes\":{source:\"iana\",extensions:[\"nsf\"]},\"application/vnd.lotus-organizer\":{source:\"iana\",extensions:[\"org\"]},\"application/vnd.lotus-screencam\":{source:\"iana\",extensions:[\"scm\"]},\"application/vnd.lotus-wordpro\":{source:\"iana\",extensions:[\"lwp\"]},\"application/vnd.macports.portpkg\":{source:\"iana\",extensions:[\"portpkg\"]},\"application/vnd.mapbox-vector-tile\":{source:\"iana\"},\"application/vnd.marlin.drm.actiontoken+xml\":{source:\"iana\"},\"application/vnd.marlin.drm.conftoken+xml\":{source:\"iana\"},\"application/vnd.marlin.drm.license+xml\":{source:\"iana\"},\"application/vnd.marlin.drm.mdcf\":{source:\"iana\"},\"application/vnd.mason+json\":{source:\"iana\",compressible:!0},\"application/vnd.maxmind.maxmind-db\":{source:\"iana\"},\"application/vnd.mcd\":{source:\"iana\",extensions:[\"mcd\"]},\"application/vnd.medcalcdata\":{source:\"iana\",extensions:[\"mc1\"]},\"application/vnd.mediastation.cdkey\":{source:\"iana\",extensions:[\"cdkey\"]},\"application/vnd.meridian-slingshot\":{source:\"iana\"},\"application/vnd.mfer\":{source:\"iana\",extensions:[\"mwf\"]},\"application/vnd.mfmp\":{source:\"iana\",extensions:[\"mfm\"]},\"application/vnd.micro+json\":{source:\"iana\",compressible:!0},\"application/vnd.micrografx.flo\":{source:\"iana\",extensions:[\"flo\"]},\"application/vnd.micrografx.igx\":{source:\"iana\",extensions:[\"igx\"]},\"application/vnd.microsoft.portable-executable\":{source:\"iana\"},\"application/vnd.miele+json\":{source:\"iana\",compressible:!0},\"application/vnd.mif\":{source:\"iana\",extensions:[\"mif\"]},\"application/vnd.minisoft-hp3000-save\":{source:\"iana\"},\"application/vnd.mitsubishi.misty-guard.trustweb\":{source:\"iana\"},\"application/vnd.mobius.daf\":{source:\"iana\",extensions:[\"daf\"]},\"application/vnd.mobius.dis\":{source:\"iana\",extensions:[\"dis\"]},\"application/vnd.mobius.mbk\":{source:\"iana\",extensions:[\"mbk\"]},\"application/vnd.mobius.mqy\":{source:\"iana\",extensions:[\"mqy\"]},\"application/vnd.mobius.msl\":{source:\"iana\",extensions:[\"msl\"]},\"application/vnd.mobius.plc\":{source:\"iana\",extensions:[\"plc\"]},\"application/vnd.mobius.txf\":{source:\"iana\",extensions:[\"txf\"]},\"application/vnd.mophun.application\":{source:\"iana\",extensions:[\"mpn\"]},\"application/vnd.mophun.certificate\":{source:\"iana\",extensions:[\"mpc\"]},\"application/vnd.motorola.flexsuite\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.adsi\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.fis\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.gotap\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.kmr\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.ttc\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.wem\":{source:\"iana\"},\"application/vnd.motorola.iprm\":{source:\"iana\"},\"application/vnd.mozilla.xul+xml\":{source:\"iana\",compressible:!0,extensions:[\"xul\"]},\"application/vnd.ms-3mfdocument\":{source:\"iana\"},\"application/vnd.ms-artgalry\":{source:\"iana\",extensions:[\"cil\"]},\"application/vnd.ms-asf\":{source:\"iana\"},\"application/vnd.ms-cab-compressed\":{source:\"iana\",extensions:[\"cab\"]},\"application/vnd.ms-color.iccprofile\":{source:\"apache\"},\"application/vnd.ms-excel\":{source:\"iana\",compressible:!1,extensions:[\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"]},\"application/vnd.ms-excel.addin.macroenabled.12\":{source:\"iana\",extensions:[\"xlam\"]},\"application/vnd.ms-excel.sheet.binary.macroenabled.12\":{source:\"iana\",extensions:[\"xlsb\"]},\"application/vnd.ms-excel.sheet.macroenabled.12\":{source:\"iana\",extensions:[\"xlsm\"]},\"application/vnd.ms-excel.template.macroenabled.12\":{source:\"iana\",extensions:[\"xltm\"]},\"application/vnd.ms-fontobject\":{source:\"iana\",compressible:!0,extensions:[\"eot\"]},\"application/vnd.ms-htmlhelp\":{source:\"iana\",extensions:[\"chm\"]},\"application/vnd.ms-ims\":{source:\"iana\",extensions:[\"ims\"]},\"application/vnd.ms-lrm\":{source:\"iana\",extensions:[\"lrm\"]},\"application/vnd.ms-office.activex+xml\":{source:\"iana\"},\"application/vnd.ms-officetheme\":{source:\"iana\",extensions:[\"thmx\"]},\"application/vnd.ms-opentype\":{source:\"apache\",compressible:!0},\"application/vnd.ms-package.obfuscated-opentype\":{source:\"apache\"},\"application/vnd.ms-pki.seccat\":{source:\"apache\",extensions:[\"cat\"]},\"application/vnd.ms-pki.stl\":{source:\"apache\",extensions:[\"stl\"]},\"application/vnd.ms-playready.initiator+xml\":{source:\"iana\"},\"application/vnd.ms-powerpoint\":{source:\"iana\",compressible:!1,extensions:[\"ppt\",\"pps\",\"pot\"]},\"application/vnd.ms-powerpoint.addin.macroenabled.12\":{source:\"iana\",extensions:[\"ppam\"]},\"application/vnd.ms-powerpoint.presentation.macroenabled.12\":{source:\"iana\",extensions:[\"pptm\"]},\"application/vnd.ms-powerpoint.slide.macroenabled.12\":{source:\"iana\",extensions:[\"sldm\"]},\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\":{source:\"iana\",extensions:[\"ppsm\"]},\"application/vnd.ms-powerpoint.template.macroenabled.12\":{source:\"iana\",extensions:[\"potm\"]},\"application/vnd.ms-printdevicecapabilities+xml\":{source:\"iana\"},\"application/vnd.ms-printing.printticket+xml\":{source:\"apache\"},\"application/vnd.ms-project\":{source:\"iana\",extensions:[\"mpp\",\"mpt\"]},\"application/vnd.ms-tnef\":{source:\"iana\"},\"application/vnd.ms-windows.devicepairing\":{source:\"iana\"},\"application/vnd.ms-windows.nwprinting.oob\":{source:\"iana\"},\"application/vnd.ms-windows.printerpairing\":{source:\"iana\"},\"application/vnd.ms-windows.wsd.oob\":{source:\"iana\"},\"application/vnd.ms-wmdrm.lic-chlg-req\":{source:\"iana\"},\"application/vnd.ms-wmdrm.lic-resp\":{source:\"iana\"},\"application/vnd.ms-wmdrm.meter-chlg-req\":{source:\"iana\"},\"application/vnd.ms-wmdrm.meter-resp\":{source:\"iana\"},\"application/vnd.ms-word.document.macroenabled.12\":{source:\"iana\",extensions:[\"docm\"]},\"application/vnd.ms-word.template.macroenabled.12\":{source:\"iana\",extensions:[\"dotm\"]},\"application/vnd.ms-works\":{source:\"iana\",extensions:[\"wps\",\"wks\",\"wcm\",\"wdb\"]},\"application/vnd.ms-wpl\":{source:\"iana\",extensions:[\"wpl\"]},\"application/vnd.ms-xpsdocument\":{source:\"iana\",compressible:!1,extensions:[\"xps\"]},\"application/vnd.msa-disk-image\":{source:\"iana\"},\"application/vnd.mseq\":{source:\"iana\",extensions:[\"mseq\"]},\"application/vnd.msign\":{source:\"iana\"},\"application/vnd.multiad.creator\":{source:\"iana\"},\"application/vnd.multiad.creator.cif\":{source:\"iana\"},\"application/vnd.music-niff\":{source:\"iana\"},\"application/vnd.musician\":{source:\"iana\",extensions:[\"mus\"]},\"application/vnd.muvee.style\":{source:\"iana\",extensions:[\"msty\"]},\"application/vnd.mynfc\":{source:\"iana\",extensions:[\"taglet\"]},\"application/vnd.ncd.control\":{source:\"iana\"},\"application/vnd.ncd.reference\":{source:\"iana\"},\"application/vnd.nervana\":{source:\"iana\"},\"application/vnd.netfpx\":{source:\"iana\"},\"application/vnd.neurolanguage.nlu\":{source:\"iana\",extensions:[\"nlu\"]},\"application/vnd.nintendo.nitro.rom\":{source:\"iana\"},\"application/vnd.nintendo.snes.rom\":{source:\"iana\"},\"application/vnd.nitf\":{source:\"iana\",extensions:[\"ntf\",\"nitf\"]},\"application/vnd.noblenet-directory\":{source:\"iana\",extensions:[\"nnd\"]},\"application/vnd.noblenet-sealer\":{source:\"iana\",extensions:[\"nns\"]},\"application/vnd.noblenet-web\":{source:\"iana\",extensions:[\"nnw\"]},\"application/vnd.nokia.catalogs\":{source:\"iana\"},\"application/vnd.nokia.conml+wbxml\":{source:\"iana\"},\"application/vnd.nokia.conml+xml\":{source:\"iana\"},\"application/vnd.nokia.iptv.config+xml\":{source:\"iana\"},\"application/vnd.nokia.isds-radio-presets\":{source:\"iana\"},\"application/vnd.nokia.landmark+wbxml\":{source:\"iana\"},\"application/vnd.nokia.landmark+xml\":{source:\"iana\"},\"application/vnd.nokia.landmarkcollection+xml\":{source:\"iana\"},\"application/vnd.nokia.n-gage.ac+xml\":{source:\"iana\"},\"application/vnd.nokia.n-gage.data\":{source:\"iana\",extensions:[\"ngdat\"]},\"application/vnd.nokia.n-gage.symbian.install\":{source:\"iana\",extensions:[\"n-gage\"]},\"application/vnd.nokia.ncd\":{source:\"iana\"},\"application/vnd.nokia.pcd+wbxml\":{source:\"iana\"},\"application/vnd.nokia.pcd+xml\":{source:\"iana\"},\"application/vnd.nokia.radio-preset\":{source:\"iana\",extensions:[\"rpst\"]},\"application/vnd.nokia.radio-presets\":{source:\"iana\",extensions:[\"rpss\"]},\"application/vnd.novadigm.edm\":{source:\"iana\",extensions:[\"edm\"]},\"application/vnd.novadigm.edx\":{source:\"iana\",extensions:[\"edx\"]},\"application/vnd.novadigm.ext\":{source:\"iana\",extensions:[\"ext\"]},\"application/vnd.ntt-local.content-share\":{source:\"iana\"},\"application/vnd.ntt-local.file-transfer\":{source:\"iana\"},\"application/vnd.ntt-local.ogw_remote-access\":{source:\"iana\"},\"application/vnd.ntt-local.sip-ta_remote\":{source:\"iana\"},\"application/vnd.ntt-local.sip-ta_tcp_stream\":{source:\"iana\"},\"application/vnd.oasis.opendocument.chart\":{source:\"iana\",extensions:[\"odc\"]},\"application/vnd.oasis.opendocument.chart-template\":{source:\"iana\",extensions:[\"otc\"]},\"application/vnd.oasis.opendocument.database\":{source:\"iana\",extensions:[\"odb\"]},\"application/vnd.oasis.opendocument.formula\":{source:\"iana\",extensions:[\"odf\"]},\"application/vnd.oasis.opendocument.formula-template\":{source:\"iana\",extensions:[\"odft\"]},\"application/vnd.oasis.opendocument.graphics\":{source:\"iana\",compressible:!1,extensions:[\"odg\"]},\"application/vnd.oasis.opendocument.graphics-template\":{source:\"iana\",extensions:[\"otg\"]},\"application/vnd.oasis.opendocument.image\":{source:\"iana\",extensions:[\"odi\"]},\"application/vnd.oasis.opendocument.image-template\":{source:\"iana\",extensions:[\"oti\"]},\"application/vnd.oasis.opendocument.presentation\":{source:\"iana\",compressible:!1,extensions:[\"odp\"]},\"application/vnd.oasis.opendocument.presentation-template\":{source:\"iana\",extensions:[\"otp\"]},\"application/vnd.oasis.opendocument.spreadsheet\":{source:\"iana\",compressible:!1,extensions:[\"ods\"]},\"application/vnd.oasis.opendocument.spreadsheet-template\":{source:\"iana\",extensions:[\"ots\"]},\"application/vnd.oasis.opendocument.text\":{source:\"iana\",compressible:!1,extensions:[\"odt\"]},\"application/vnd.oasis.opendocument.text-master\":{source:\"iana\",extensions:[\"odm\"]},\"application/vnd.oasis.opendocument.text-template\":{source:\"iana\",extensions:[\"ott\"]},\"application/vnd.oasis.opendocument.text-web\":{source:\"iana\",extensions:[\"oth\"]},\"application/vnd.obn\":{source:\"iana\"},\"application/vnd.oftn.l10n+json\":{source:\"iana\",compressible:!0},\"application/vnd.oipf.contentaccessdownload+xml\":{source:\"iana\"},\"application/vnd.oipf.contentaccessstreaming+xml\":{source:\"iana\"},\"application/vnd.oipf.cspg-hexbinary\":{source:\"iana\"},\"application/vnd.oipf.dae.svg+xml\":{source:\"iana\"},\"application/vnd.oipf.dae.xhtml+xml\":{source:\"iana\"},\"application/vnd.oipf.mippvcontrolmessage+xml\":{source:\"iana\"},\"application/vnd.oipf.pae.gem\":{source:\"iana\"},\"application/vnd.oipf.spdiscovery+xml\":{source:\"iana\"},\"application/vnd.oipf.spdlist+xml\":{source:\"iana\"},\"application/vnd.oipf.ueprofile+xml\":{source:\"iana\"},\"application/vnd.oipf.userprofile+xml\":{source:\"iana\"},\"application/vnd.olpc-sugar\":{source:\"iana\",extensions:[\"xo\"]},\"application/vnd.oma-scws-config\":{source:\"iana\"},\"application/vnd.oma-scws-http-request\":{source:\"iana\"},\"application/vnd.oma-scws-http-response\":{source:\"iana\"},\"application/vnd.oma.bcast.associated-procedure-parameter+xml\":{source:\"iana\"},\"application/vnd.oma.bcast.drm-trigger+xml\":{source:\"iana\"},\"application/vnd.oma.bcast.imd+xml\":{source:\"iana\"},\"application/vnd.oma.bcast.ltkm\":{source:\"iana\"},\"application/vnd.oma.bcast.notification+xml\":{source:\"iana\"},\"application/vnd.oma.bcast.provisioningtrigger\":{source:\"iana\"},\"application/vnd.oma.bcast.sgboot\":{source:\"iana\"},\"application/vnd.oma.bcast.sgdd+xml\":{source:\"iana\"},\"application/vnd.oma.bcast.sgdu\":{source:\"iana\"},\"application/vnd.oma.bcast.simple-symbol-container\":{source:\"iana\"},\"application/vnd.oma.bcast.smartcard-trigger+xml\":{source:\"iana\"},\"application/vnd.oma.bcast.sprov+xml\":{source:\"iana\"},\"application/vnd.oma.bcast.stkm\":{source:\"iana\"},\"application/vnd.oma.cab-address-book+xml\":{source:\"iana\"},\"application/vnd.oma.cab-feature-handler+xml\":{source:\"iana\"},\"application/vnd.oma.cab-pcc+xml\":{source:\"iana\"},\"application/vnd.oma.cab-subs-invite+xml\":{source:\"iana\"},\"application/vnd.oma.cab-user-prefs+xml\":{source:\"iana\"},\"application/vnd.oma.dcd\":{source:\"iana\"},\"application/vnd.oma.dcdc\":{source:\"iana\"},\"application/vnd.oma.dd2+xml\":{source:\"iana\",extensions:[\"dd2\"]},\"application/vnd.oma.drm.risd+xml\":{source:\"iana\"},\"application/vnd.oma.group-usage-list+xml\":{source:\"iana\"},\"application/vnd.oma.pal+xml\":{source:\"iana\"},\"application/vnd.oma.poc.detailed-progress-report+xml\":{source:\"iana\"},\"application/vnd.oma.poc.final-report+xml\":{source:\"iana\"},\"application/vnd.oma.poc.groups+xml\":{source:\"iana\"},\"application/vnd.oma.poc.invocation-descriptor+xml\":{source:\"iana\"},\"application/vnd.oma.poc.optimized-progress-report+xml\":{source:\"iana\"},\"application/vnd.oma.push\":{source:\"iana\"},\"application/vnd.oma.scidm.messages+xml\":{source:\"iana\"},\"application/vnd.oma.xcap-directory+xml\":{source:\"iana\"},\"application/vnd.omads-email+xml\":{source:\"iana\"},\"application/vnd.omads-file+xml\":{source:\"iana\"},\"application/vnd.omads-folder+xml\":{source:\"iana\"},\"application/vnd.omaloc-supl-init\":{source:\"iana\"},\"application/vnd.openblox.game+xml\":{source:\"iana\"},\"application/vnd.openblox.game-binary\":{source:\"iana\"},\"application/vnd.openeye.oeb\":{source:\"iana\"},\"application/vnd.openofficeorg.extension\":{source:\"apache\",extensions:[\"oxt\"]},\"application/vnd.openxmlformats-officedocument.custom-properties+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.customxmlproperties+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.drawing+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.extended-properties+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml-template\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.presentation\":{source:\"iana\",compressible:!1,extensions:[\"pptx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.slide\":{source:\"iana\",extensions:[\"sldx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\":{source:\"iana\",extensions:[\"ppsx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.tags+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.template\":{source:\"apache\",extensions:[\"potx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml-template\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":{source:\"iana\",compressible:!1,extensions:[\"xlsx\"]},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\":{source:\"apache\",extensions:[\"xltx\"]},\"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.theme+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.themeoverride+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.vmldrawing\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml-template\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":{source:\"iana\",compressible:!1,extensions:[\"docx\"]},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\":{source:\"apache\",extensions:[\"dotx\"]},\"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-package.core-properties+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml\":{source:\"iana\"},\"application/vnd.openxmlformats-package.relationships+xml\":{source:\"iana\"},\"application/vnd.oracle.resource+json\":{source:\"iana\",compressible:!0},\"application/vnd.orange.indata\":{source:\"iana\"},\"application/vnd.osa.netdeploy\":{source:\"iana\"},\"application/vnd.osgeo.mapguide.package\":{source:\"iana\",extensions:[\"mgp\"]},\"application/vnd.osgi.bundle\":{source:\"iana\"},\"application/vnd.osgi.dp\":{source:\"iana\",extensions:[\"dp\"]},\"application/vnd.osgi.subsystem\":{source:\"iana\",extensions:[\"esa\"]},\"application/vnd.otps.ct-kip+xml\":{source:\"iana\"},\"application/vnd.oxli.countgraph\":{source:\"iana\"},\"application/vnd.pagerduty+json\":{source:\"iana\",compressible:!0},\"application/vnd.palm\":{source:\"iana\",extensions:[\"pdb\",\"pqa\",\"oprc\"]},\"application/vnd.panoply\":{source:\"iana\"},\"application/vnd.paos+xml\":{source:\"iana\"},\"application/vnd.paos.xml\":{source:\"apache\"},\"application/vnd.pawaafile\":{source:\"iana\",extensions:[\"paw\"]},\"application/vnd.pcos\":{source:\"iana\"},\"application/vnd.pg.format\":{source:\"iana\",extensions:[\"str\"]},\"application/vnd.pg.osasli\":{source:\"iana\",extensions:[\"ei6\"]},\"application/vnd.piaccess.application-licence\":{source:\"iana\"},\"application/vnd.picsel\":{source:\"iana\",extensions:[\"efif\"]},\"application/vnd.pmi.widget\":{source:\"iana\",extensions:[\"wg\"]},\"application/vnd.poc.group-advertisement+xml\":{source:\"iana\"},\"application/vnd.pocketlearn\":{source:\"iana\",extensions:[\"plf\"]},\"application/vnd.powerbuilder6\":{source:\"iana\",extensions:[\"pbd\"]},\"application/vnd.powerbuilder6-s\":{source:\"iana\"},\"application/vnd.powerbuilder7\":{source:\"iana\"},\"application/vnd.powerbuilder7-s\":{source:\"iana\"},\"application/vnd.powerbuilder75\":{source:\"iana\"},\"application/vnd.powerbuilder75-s\":{source:\"iana\"},\"application/vnd.preminet\":{source:\"iana\"},\"application/vnd.previewsystems.box\":{source:\"iana\",extensions:[\"box\"]},\"application/vnd.proteus.magazine\":{source:\"iana\",extensions:[\"mgz\"]},\"application/vnd.publishare-delta-tree\":{source:\"iana\",extensions:[\"qps\"]},\"application/vnd.pvi.ptid1\":{source:\"iana\",extensions:[\"ptid\"]},\"application/vnd.pwg-multiplexed\":{source:\"iana\"},\"application/vnd.pwg-xhtml-print+xml\":{source:\"iana\"},\"application/vnd.qualcomm.brew-app-res\":{source:\"iana\"},\"application/vnd.quark.quarkxpress\":{source:\"iana\",extensions:[\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"]},\"application/vnd.quobject-quoxdocument\":{source:\"iana\"},\"application/vnd.radisys.moml+xml\":{source:\"iana\"},\"application/vnd.radisys.msml+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-audit+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-audit-conf+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-audit-conn+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-audit-dialog+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-audit-stream+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-conf+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-dialog+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-dialog-base+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-dialog-fax-detect+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-dialog-fax-sendrecv+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-dialog-group+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-dialog-speech+xml\":{source:\"iana\"},\"application/vnd.radisys.msml-dialog-transform+xml\":{source:\"iana\"},\"application/vnd.rainstor.data\":{source:\"iana\"},\"application/vnd.rapid\":{source:\"iana\"},\"application/vnd.realvnc.bed\":{source:\"iana\",extensions:[\"bed\"]},\"application/vnd.recordare.musicxml\":{source:\"iana\",extensions:[\"mxl\"]},\"application/vnd.recordare.musicxml+xml\":{source:\"iana\",extensions:[\"musicxml\"]},\"application/vnd.renlearn.rlprint\":{source:\"iana\"},\"application/vnd.rig.cryptonote\":{source:\"iana\",extensions:[\"cryptonote\"]},\"application/vnd.rim.cod\":{source:\"apache\",extensions:[\"cod\"]},\"application/vnd.rn-realmedia\":{source:\"apache\",extensions:[\"rm\"]},\"application/vnd.rn-realmedia-vbr\":{source:\"apache\",extensions:[\"rmvb\"]},\"application/vnd.route66.link66+xml\":{source:\"iana\",extensions:[\"link66\"]},\"application/vnd.rs-274x\":{source:\"iana\"},\"application/vnd.ruckus.download\":{source:\"iana\"},\"application/vnd.s3sms\":{source:\"iana\"},\"application/vnd.sailingtracker.track\":{source:\"iana\",extensions:[\"st\"]},\"application/vnd.sbm.cid\":{source:\"iana\"},\"application/vnd.sbm.mid2\":{source:\"iana\"},\"application/vnd.scribus\":{source:\"iana\"},\"application/vnd.sealed.3df\":{source:\"iana\"},\"application/vnd.sealed.csf\":{source:\"iana\"},\"application/vnd.sealed.doc\":{source:\"iana\"},\"application/vnd.sealed.eml\":{source:\"iana\"},\"application/vnd.sealed.mht\":{source:\"iana\"},\"application/vnd.sealed.net\":{source:\"iana\"},\"application/vnd.sealed.ppt\":{source:\"iana\"},\"application/vnd.sealed.tiff\":{source:\"iana\"},\"application/vnd.sealed.xls\":{source:\"iana\"},\"application/vnd.sealedmedia.softseal.html\":{source:\"iana\"},\"application/vnd.sealedmedia.softseal.pdf\":{source:\"iana\"},\"application/vnd.seemail\":{source:\"iana\",extensions:[\"see\"]},\"application/vnd.sema\":{source:\"iana\",extensions:[\"sema\"]},\"application/vnd.semd\":{source:\"iana\",extensions:[\"semd\"]},\"application/vnd.semf\":{source:\"iana\",extensions:[\"semf\"]},\"application/vnd.shana.informed.formdata\":{source:\"iana\",extensions:[\"ifm\"]},\"application/vnd.shana.informed.formtemplate\":{source:\"iana\",extensions:[\"itp\"]},\"application/vnd.shana.informed.interchange\":{source:\"iana\",extensions:[\"iif\"]},\"application/vnd.shana.informed.package\":{source:\"iana\",extensions:[\"ipk\"]},\"application/vnd.simtech-mindmapper\":{source:\"iana\",extensions:[\"twd\",\"twds\"]},\"application/vnd.siren+json\":{source:\"iana\",compressible:!0},\"application/vnd.smaf\":{source:\"iana\",extensions:[\"mmf\"]},\"application/vnd.smart.notebook\":{source:\"iana\"},\"application/vnd.smart.teacher\":{source:\"iana\",extensions:[\"teacher\"]},\"application/vnd.software602.filler.form+xml\":{source:\"iana\"},\"application/vnd.software602.filler.form-xml-zip\":{source:\"iana\"},\"application/vnd.solent.sdkm+xml\":{source:\"iana\",extensions:[\"sdkm\",\"sdkd\"]},\"application/vnd.spotfire.dxp\":{source:\"iana\",extensions:[\"dxp\"]},\"application/vnd.spotfire.sfs\":{source:\"iana\",extensions:[\"sfs\"]},\"application/vnd.sss-cod\":{source:\"iana\"},\"application/vnd.sss-dtf\":{source:\"iana\"},\"application/vnd.sss-ntf\":{source:\"iana\"},\"application/vnd.stardivision.calc\":{source:\"apache\",extensions:[\"sdc\"]},\"application/vnd.stardivision.draw\":{source:\"apache\",extensions:[\"sda\"]},\"application/vnd.stardivision.impress\":{source:\"apache\",extensions:[\"sdd\"]},\"application/vnd.stardivision.math\":{source:\"apache\",extensions:[\"smf\"]},\"application/vnd.stardivision.writer\":{source:\"apache\",extensions:[\"sdw\",\"vor\"]},\"application/vnd.stardivision.writer-global\":{source:\"apache\",extensions:[\"sgl\"]},\"application/vnd.stepmania.package\":{source:\"iana\",extensions:[\"smzip\"]},\"application/vnd.stepmania.stepchart\":{source:\"iana\",extensions:[\"sm\"]},\"application/vnd.street-stream\":{source:\"iana\"},\"application/vnd.sun.wadl+xml\":{source:\"iana\"},\"application/vnd.sun.xml.calc\":{source:\"apache\",extensions:[\"sxc\"]},\"application/vnd.sun.xml.calc.template\":{source:\"apache\",extensions:[\"stc\"]},\"application/vnd.sun.xml.draw\":{source:\"apache\",extensions:[\"sxd\"]},\"application/vnd.sun.xml.draw.template\":{source:\"apache\",extensions:[\"std\"]},\"application/vnd.sun.xml.impress\":{source:\"apache\",extensions:[\"sxi\"]},\"application/vnd.sun.xml.impress.template\":{source:\"apache\",extensions:[\"sti\"]},\"application/vnd.sun.xml.math\":{source:\"apache\",extensions:[\"sxm\"]},\"application/vnd.sun.xml.writer\":{source:\"apache\",extensions:[\"sxw\"]},\"application/vnd.sun.xml.writer.global\":{source:\"apache\",extensions:[\"sxg\"]},\"application/vnd.sun.xml.writer.template\":{source:\"apache\",extensions:[\"stw\"]},\"application/vnd.sus-calendar\":{source:\"iana\",extensions:[\"sus\",\"susp\"]},\"application/vnd.svd\":{source:\"iana\",extensions:[\"svd\"]},\"application/vnd.swiftview-ics\":{source:\"iana\"},\"application/vnd.symbian.install\":{source:\"apache\",extensions:[\"sis\",\"sisx\"]},\"application/vnd.syncml+xml\":{source:\"iana\",extensions:[\"xsm\"]},\"application/vnd.syncml.dm+wbxml\":{source:\"iana\",extensions:[\"bdm\"]},\"application/vnd.syncml.dm+xml\":{source:\"iana\",extensions:[\"xdm\"]},\"application/vnd.syncml.dm.notification\":{source:\"iana\"},\"application/vnd.syncml.dmddf+wbxml\":{source:\"iana\"},\"application/vnd.syncml.dmddf+xml\":{source:\"iana\"},\"application/vnd.syncml.dmtnds+wbxml\":{source:\"iana\"},\"application/vnd.syncml.dmtnds+xml\":{source:\"iana\"},\"application/vnd.syncml.ds.notification\":{source:\"iana\"},\"application/vnd.tao.intent-module-archive\":{source:\"iana\",extensions:[\"tao\"]},\"application/vnd.tcpdump.pcap\":{source:\"iana\",extensions:[\"pcap\",\"cap\",\"dmp\"]},\"application/vnd.tmd.mediaflex.api+xml\":{source:\"iana\"},\"application/vnd.tml\":{source:\"iana\"},\"application/vnd.tmobile-livetv\":{source:\"iana\",extensions:[\"tmo\"]},\"application/vnd.trid.tpt\":{source:\"iana\",extensions:[\"tpt\"]},\"application/vnd.triscape.mxs\":{source:\"iana\",extensions:[\"mxs\"]},\"application/vnd.trueapp\":{source:\"iana\",extensions:[\"tra\"]},\"application/vnd.truedoc\":{source:\"iana\"},\"application/vnd.ubisoft.webplayer\":{source:\"iana\"},\"application/vnd.ufdl\":{source:\"iana\",extensions:[\"ufd\",\"ufdl\"]},\"application/vnd.uiq.theme\":{source:\"iana\",extensions:[\"utz\"]},\"application/vnd.umajin\":{source:\"iana\",extensions:[\"umj\"]},\"application/vnd.unity\":{source:\"iana\",extensions:[\"unityweb\"]},\"application/vnd.uoml+xml\":{source:\"iana\",extensions:[\"uoml\"]},\"application/vnd.uplanet.alert\":{source:\"iana\"},\"application/vnd.uplanet.alert-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.bearer-choice\":{source:\"iana\"},\"application/vnd.uplanet.bearer-choice-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.cacheop\":{source:\"iana\"},\"application/vnd.uplanet.cacheop-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.channel\":{source:\"iana\"},\"application/vnd.uplanet.channel-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.list\":{source:\"iana\"},\"application/vnd.uplanet.list-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.listcmd\":{source:\"iana\"},\"application/vnd.uplanet.listcmd-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.signal\":{source:\"iana\"},\"application/vnd.uri-map\":{source:\"iana\"},\"application/vnd.valve.source.material\":{source:\"iana\"},\"application/vnd.vcx\":{source:\"iana\",extensions:[\"vcx\"]},\"application/vnd.vd-study\":{source:\"iana\"},\"application/vnd.vectorworks\":{source:\"iana\"},\"application/vnd.verimatrix.vcas\":{source:\"iana\"},\"application/vnd.vidsoft.vidconference\":{source:\"iana\"},\"application/vnd.visio\":{source:\"iana\",extensions:[\"vsd\",\"vst\",\"vss\",\"vsw\"]},\"application/vnd.visionary\":{source:\"iana\",extensions:[\"vis\"]},\"application/vnd.vividence.scriptfile\":{source:\"iana\"},\"application/vnd.vsf\":{source:\"iana\",extensions:[\"vsf\"]},\"application/vnd.wap.sic\":{source:\"iana\"},\"application/vnd.wap.slc\":{source:\"iana\"},\"application/vnd.wap.wbxml\":{source:\"iana\",extensions:[\"wbxml\"]},\"application/vnd.wap.wmlc\":{source:\"iana\",extensions:[\"wmlc\"]},\"application/vnd.wap.wmlscriptc\":{source:\"iana\",extensions:[\"wmlsc\"]},\"application/vnd.webturbo\":{source:\"iana\",extensions:[\"wtb\"]},\"application/vnd.wfa.p2p\":{source:\"iana\"},\"application/vnd.wfa.wsc\":{source:\"iana\"},\"application/vnd.windows.devicepairing\":{source:\"iana\"},\"application/vnd.wmc\":{source:\"iana\"},\"application/vnd.wmf.bootstrap\":{source:\"iana\"},\"application/vnd.wolfram.mathematica\":{source:\"iana\"},\"application/vnd.wolfram.mathematica.package\":{source:\"iana\"},\"application/vnd.wolfram.player\":{source:\"iana\",extensions:[\"nbp\"]},\"application/vnd.wordperfect\":{source:\"iana\",extensions:[\"wpd\"]},\"application/vnd.wqd\":{source:\"iana\",extensions:[\"wqd\"]},\"application/vnd.wrq-hp3000-labelled\":{source:\"iana\"},\"application/vnd.wt.stf\":{source:\"iana\",extensions:[\"stf\"]},\"application/vnd.wv.csp+wbxml\":{source:\"iana\"},\"application/vnd.wv.csp+xml\":{source:\"iana\"},\"application/vnd.wv.ssp+xml\":{source:\"iana\"},\"application/vnd.xacml+json\":{source:\"iana\",compressible:!0},\"application/vnd.xara\":{source:\"iana\",extensions:[\"xar\"]},\"application/vnd.xfdl\":{source:\"iana\",extensions:[\"xfdl\"]},\"application/vnd.xfdl.webform\":{source:\"iana\"},\"application/vnd.xmi+xml\":{source:\"iana\"},\"application/vnd.xmpie.cpkg\":{source:\"iana\"},\"application/vnd.xmpie.dpkg\":{source:\"iana\"},\"application/vnd.xmpie.plan\":{source:\"iana\"},\"application/vnd.xmpie.ppkg\":{source:\"iana\"},\"application/vnd.xmpie.xlim\":{source:\"iana\"},\"application/vnd.yamaha.hv-dic\":{source:\"iana\",extensions:[\"hvd\"]},\"application/vnd.yamaha.hv-script\":{source:\"iana\",extensions:[\"hvs\"]},\"application/vnd.yamaha.hv-voice\":{source:\"iana\",extensions:[\"hvp\"]},\"application/vnd.yamaha.openscoreformat\":{source:\"iana\",extensions:[\"osf\"]},\"application/vnd.yamaha.openscoreformat.osfpvg+xml\":{source:\"iana\",extensions:[\"osfpvg\"]},\"application/vnd.yamaha.remote-setup\":{source:\"iana\"},\"application/vnd.yamaha.smaf-audio\":{source:\"iana\",extensions:[\"saf\"]},\"application/vnd.yamaha.smaf-phrase\":{source:\"iana\",extensions:[\"spf\"]},\"application/vnd.yamaha.through-ngn\":{source:\"iana\"},\"application/vnd.yamaha.tunnel-udpencap\":{source:\"iana\"},\"application/vnd.yaoweme\":{source:\"iana\"},\"application/vnd.yellowriver-custom-menu\":{source:\"iana\",extensions:[\"cmp\"]},\"application/vnd.zul\":{source:\"iana\",extensions:[\"zir\",\"zirz\"]},\"application/vnd.zzazz.deck+xml\":{source:\"iana\",extensions:[\"zaz\"]},\"application/voicexml+xml\":{source:\"iana\",extensions:[\"vxml\"]},\"application/vq-rtcpxr\":{source:\"iana\"},\"application/watcherinfo+xml\":{source:\"iana\"},\"application/whoispp-query\":{source:\"iana\"},\"application/whoispp-response\":{source:\"iana\"},\"application/widget\":{source:\"iana\",extensions:[\"wgt\"]},\"application/winhlp\":{source:\"apache\",extensions:[\"hlp\"]},\"application/wita\":{source:\"iana\"},\"application/wordperfect5.1\":{source:\"iana\"},\"application/wsdl+xml\":{source:\"iana\",extensions:[\"wsdl\"]},\"application/wspolicy+xml\":{source:\"iana\",extensions:[\"wspolicy\"]},\"application/x-7z-compressed\":{source:\"apache\",compressible:!1,extensions:[\"7z\"]},\"application/x-abiword\":{source:\"apache\",extensions:[\"abw\"]},\"application/x-ace-compressed\":{source:\"apache\",extensions:[\"ace\"]},\"application/x-amf\":{source:\"apache\"},\"application/x-apple-diskimage\":{source:\"apache\",extensions:[\"dmg\"]},\"application/x-authorware-bin\":{source:\"apache\",extensions:[\"aab\",\"x32\",\"u32\",\"vox\"]},\"application/x-authorware-map\":{source:\"apache\",extensions:[\"aam\"]},\"application/x-authorware-seg\":{source:\"apache\",extensions:[\"aas\"]},\"application/x-bcpio\":{source:\"apache\",extensions:[\"bcpio\"]},\"application/x-bdoc\":{compressible:!1,extensions:[\"bdoc\"]},\"application/x-bittorrent\":{source:\"apache\",extensions:[\"torrent\"]},\"application/x-blorb\":{source:\"apache\",extensions:[\"blb\",\"blorb\"]},\"application/x-bzip\":{source:\"apache\",compressible:!1,extensions:[\"bz\"]},\"application/x-bzip2\":{source:\"apache\",compressible:!1,extensions:[\"bz2\",\"boz\"]},\"application/x-cbr\":{source:\"apache\",extensions:[\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"]},\"application/x-cdlink\":{source:\"apache\",extensions:[\"vcd\"]},\"application/x-cfs-compressed\":{source:\"apache\",extensions:[\"cfs\"]},\"application/x-chat\":{source:\"apache\",extensions:[\"chat\"]},\"application/x-chess-pgn\":{source:\"apache\",extensions:[\"pgn\"]},\"application/x-chrome-extension\":{extensions:[\"crx\"]},\"application/x-cocoa\":{source:\"nginx\",extensions:[\"cco\"]},\"application/x-compress\":{source:\"apache\"},\"application/x-conference\":{source:\"apache\",extensions:[\"nsc\"]},\"application/x-cpio\":{source:\"apache\",extensions:[\"cpio\"]},\"application/x-csh\":{source:\"apache\",extensions:[\"csh\"]},\"application/x-deb\":{compressible:!1},\"application/x-debian-package\":{source:\"apache\",extensions:[\"deb\",\"udeb\"]},\"application/x-dgc-compressed\":{source:\"apache\",extensions:[\"dgc\"]},\"application/x-director\":{source:\"apache\",extensions:[\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"]},\"application/x-doom\":{source:\"apache\",extensions:[\"wad\"]},\"application/x-dtbncx+xml\":{source:\"apache\",extensions:[\"ncx\"]},\"application/x-dtbook+xml\":{source:\"apache\",extensions:[\"dtb\"]},\"application/x-dtbresource+xml\":{source:\"apache\",extensions:[\"res\"]},\"application/x-dvi\":{source:\"apache\",compressible:!1,extensions:[\"dvi\"]},\"application/x-envoy\":{source:\"apache\",extensions:[\"evy\"]},\"application/x-eva\":{source:\"apache\",extensions:[\"eva\"]},\"application/x-font-bdf\":{source:\"apache\",extensions:[\"bdf\"]},\"application/x-font-dos\":{source:\"apache\"},\"application/x-font-framemaker\":{source:\"apache\"},\"application/x-font-ghostscript\":{source:\"apache\",extensions:[\"gsf\"]},\"application/x-font-libgrx\":{source:\"apache\"},\"application/x-font-linux-psf\":{source:\"apache\",extensions:[\"psf\"]},\"application/x-font-otf\":{source:\"apache\",compressible:!0,extensions:[\"otf\"]},\"application/x-font-pcf\":{source:\"apache\",extensions:[\"pcf\"]},\"application/x-font-snf\":{source:\"apache\",extensions:[\"snf\"]},\"application/x-font-speedo\":{source:\"apache\"},\"application/x-font-sunos-news\":{source:\"apache\"},\"application/x-font-ttf\":{source:\"apache\",compressible:!0,extensions:[\"ttf\",\"ttc\"]},\"application/x-font-type1\":{source:\"apache\",extensions:[\"pfa\",\"pfb\",\"pfm\",\"afm\"]},\"application/x-font-vfont\":{source:\"apache\"},\"application/x-freearc\":{source:\"apache\",extensions:[\"arc\"]},\"application/x-futuresplash\":{source:\"apache\",extensions:[\"spl\"]},\"application/x-gca-compressed\":{source:\"apache\",extensions:[\"gca\"]},\"application/x-glulx\":{source:\"apache\",extensions:[\"ulx\"]},\"application/x-gnumeric\":{source:\"apache\",extensions:[\"gnumeric\"]},\"application/x-gramps-xml\":{source:\"apache\",extensions:[\"gramps\"]},\"application/x-gtar\":{source:\"apache\",extensions:[\"gtar\"]},\"application/x-gzip\":{source:\"apache\"},\"application/x-hdf\":{source:\"apache\",extensions:[\"hdf\"]},\"application/x-httpd-php\":{compressible:!0,extensions:[\"php\"]},\"application/x-install-instructions\":{source:\"apache\",extensions:[\"install\"]},\"application/x-iso9660-image\":{source:\"apache\",extensions:[\"iso\"]},\"application/x-java-archive-diff\":{source:\"nginx\",extensions:[\"jardiff\"]},\"application/x-java-jnlp-file\":{source:\"apache\",compressible:!1,extensions:[\"jnlp\"]},\"application/x-javascript\":{compressible:!0},\"application/x-latex\":{source:\"apache\",compressible:!1,extensions:[\"latex\"]},\"application/x-lua-bytecode\":{extensions:[\"luac\"]},\"application/x-lzh-compressed\":{source:\"apache\",extensions:[\"lzh\",\"lha\"]},\"application/x-makeself\":{source:\"nginx\",extensions:[\"run\"]},\"application/x-mie\":{source:\"apache\",extensions:[\"mie\"]},\"application/x-mobipocket-ebook\":{source:\"apache\",extensions:[\"prc\",\"mobi\"]},\"application/x-mpegurl\":{compressible:!1},\"application/x-ms-application\":{source:\"apache\",extensions:[\"application\"]},\"application/x-ms-shortcut\":{source:\"apache\",extensions:[\"lnk\"]},\"application/x-ms-wmd\":{source:\"apache\",extensions:[\"wmd\"]},\"application/x-ms-wmz\":{source:\"apache\",extensions:[\"wmz\"]},\"application/x-ms-xbap\":{source:\"apache\",extensions:[\"xbap\"]},\"application/x-msaccess\":{source:\"apache\",extensions:[\"mdb\"]},\"application/x-msbinder\":{source:\"apache\",extensions:[\"obd\"]},\"application/x-mscardfile\":{source:\"apache\",extensions:[\"crd\"]},\"application/x-msclip\":{source:\"apache\",extensions:[\"clp\"]},\"application/x-msdos-program\":{extensions:[\"exe\"]},\"application/x-msdownload\":{source:\"apache\",extensions:[\"exe\",\"dll\",\"com\",\"bat\",\"msi\"]},\"application/x-msmediaview\":{source:\"apache\",extensions:[\"mvb\",\"m13\",\"m14\"]},\"application/x-msmetafile\":{source:\"apache\",extensions:[\"wmf\",\"wmz\",\"emf\",\"emz\"]},\"application/x-msmoney\":{source:\"apache\",extensions:[\"mny\"]},\"application/x-mspublisher\":{source:\"apache\",extensions:[\"pub\"]},\"application/x-msschedule\":{source:\"apache\",extensions:[\"scd\"]},\"application/x-msterminal\":{source:\"apache\",extensions:[\"trm\"]},\"application/x-mswrite\":{source:\"apache\",extensions:[\"wri\"]},\"application/x-netcdf\":{source:\"apache\",extensions:[\"nc\",\"cdf\"]},\"application/x-ns-proxy-autoconfig\":{compressible:!0,extensions:[\"pac\"]},\"application/x-nzb\":{source:\"apache\",extensions:[\"nzb\"]},\"application/x-perl\":{source:\"nginx\",extensions:[\"pl\",\"pm\"]},\"application/x-pilot\":{source:\"nginx\",extensions:[\"prc\",\"pdb\"]},\"application/x-pkcs12\":{source:\"apache\",compressible:!1,extensions:[\"p12\",\"pfx\"]},\"application/x-pkcs7-certificates\":{source:\"apache\",extensions:[\"p7b\",\"spc\"]},\"application/x-pkcs7-certreqresp\":{source:\"apache\",extensions:[\"p7r\"]},\"application/x-rar-compressed\":{source:\"apache\",compressible:!1,extensions:[\"rar\"]},\"application/x-redhat-package-manager\":{source:\"nginx\",extensions:[\"rpm\"]},\"application/x-research-info-systems\":{source:\"apache\",extensions:[\"ris\"]},\"application/x-sea\":{source:\"nginx\",extensions:[\"sea\"]},\"application/x-sh\":{source:\"apache\",compressible:!0,extensions:[\"sh\"]},\"application/x-shar\":{source:\"apache\",extensions:[\"shar\"]},\"application/x-shockwave-flash\":{source:\"apache\",compressible:!1,extensions:[\"swf\"]},\"application/x-silverlight-app\":{source:\"apache\",extensions:[\"xap\"]},\"application/x-sql\":{source:\"apache\",extensions:[\"sql\"]},\"application/x-stuffit\":{source:\"apache\",compressible:!1,extensions:[\"sit\"]},\"application/x-stuffitx\":{source:\"apache\",extensions:[\"sitx\"]},\"application/x-subrip\":{source:\"apache\",extensions:[\"srt\"]},\"application/x-sv4cpio\":{source:\"apache\",extensions:[\"sv4cpio\"]},\"application/x-sv4crc\":{source:\"apache\",extensions:[\"sv4crc\"]},\"application/x-t3vm-image\":{source:\"apache\",extensions:[\"t3\"]},\"application/x-tads\":{source:\"apache\",extensions:[\"gam\"]},\"application/x-tar\":{source:\"apache\",compressible:!0,extensions:[\"tar\"]},\"application/x-tcl\":{source:\"apache\",extensions:[\"tcl\",\"tk\"]},\"application/x-tex\":{source:\"apache\",extensions:[\"tex\"]},\"application/x-tex-tfm\":{source:\"apache\",extensions:[\"tfm\"]},\"application/x-texinfo\":{source:\"apache\",extensions:[\"texinfo\",\"texi\"]},\"application/x-tgif\":{source:\"apache\",extensions:[\"obj\"]},\"application/x-ustar\":{source:\"apache\",extensions:[\"ustar\"]},\"application/x-wais-source\":{source:\"apache\",extensions:[\"src\"]},\"application/x-web-app-manifest+json\":{compressible:!0,extensions:[\"webapp\"]},\"application/x-www-form-urlencoded\":{source:\"iana\",compressible:!0},\"application/x-x509-ca-cert\":{source:\"apache\",extensions:[\"der\",\"crt\",\"pem\"]},\"application/x-xfig\":{source:\"apache\",extensions:[\"fig\"]},\"application/x-xliff+xml\":{source:\"apache\",extensions:[\"xlf\"]},\"application/x-xpinstall\":{source:\"apache\",compressible:!1,extensions:[\"xpi\"]},\"application/x-xz\":{source:\"apache\",extensions:[\"xz\"]},\"application/x-zmachine\":{source:\"apache\",extensions:[\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"]},\"application/x400-bp\":{source:\"iana\"},\"application/xacml+xml\":{source:\"iana\"},\"application/xaml+xml\":{source:\"apache\",extensions:[\"xaml\"]},\"application/xcap-att+xml\":{source:\"iana\"},\"application/xcap-caps+xml\":{source:\"iana\"},\"application/xcap-diff+xml\":{source:\"iana\",extensions:[\"xdf\"]},\"application/xcap-el+xml\":{source:\"iana\"},\"application/xcap-error+xml\":{source:\"iana\"},\"application/xcap-ns+xml\":{source:\"iana\"},\"application/xcon-conference-info+xml\":{source:\"iana\"},\"application/xcon-conference-info-diff+xml\":{source:\"iana\"},\"application/xenc+xml\":{source:\"iana\",extensions:[\"xenc\"]},\"application/xhtml+xml\":{source:\"iana\",compressible:!0,extensions:[\"xhtml\",\"xht\"]},\"application/xhtml-voice+xml\":{source:\"apache\"},\"application/xml\":{source:\"iana\",compressible:!0,extensions:[\"xml\",\"xsl\",\"xsd\"]},\"application/xml-dtd\":{source:\"iana\",compressible:!0,extensions:[\"dtd\"]},\"application/xml-external-parsed-entity\":{source:\"iana\"},\"application/xml-patch+xml\":{source:\"iana\"},\"application/xmpp+xml\":{source:\"iana\"},\"application/xop+xml\":{source:\"iana\",compressible:!0,extensions:[\"xop\"]},\"application/xproc+xml\":{source:\"apache\",extensions:[\"xpl\"]},\"application/xslt+xml\":{source:\"iana\",extensions:[\"xslt\"]},\"application/xspf+xml\":{source:\"apache\",extensions:[\"xspf\"]},\"application/xv+xml\":{source:\"iana\",extensions:[\"mxml\",\"xhvml\",\"xvml\",\"xvm\"]},\"application/yang\":{source:\"iana\",extensions:[\"yang\"]},\"application/yin+xml\":{source:\"iana\",extensions:[\"yin\"]},\"application/zip\":{source:\"iana\",compressible:!1,extensions:[\"zip\"]},\"application/zlib\":{source:\"iana\"},\"audio/1d-interleaved-parityfec\":{source:\"iana\"},\"audio/32kadpcm\":{source:\"iana\"},\"audio/3gpp\":{source:\"iana\"},\"audio/3gpp2\":{source:\"iana\"},\"audio/ac3\":{source:\"iana\"},\"audio/adpcm\":{source:\"apache\",extensions:[\"adp\"]},\"audio/amr\":{source:\"iana\"},\"audio/amr-wb\":{source:\"iana\"},\"audio/amr-wb+\":{source:\"iana\"},\"audio/aptx\":{source:\"iana\"},\"audio/asc\":{source:\"iana\"},\"audio/atrac-advanced-lossless\":{source:\"iana\"},\"audio/atrac-x\":{source:\"iana\"},\"audio/atrac3\":{source:\"iana\"},\"audio/basic\":{source:\"iana\",compressible:!1,extensions:[\"au\",\"snd\"]},\"audio/bv16\":{source:\"iana\"},\"audio/bv32\":{source:\"iana\"},\"audio/clearmode\":{source:\"iana\"},\"audio/cn\":{source:\"iana\"},\"audio/dat12\":{source:\"iana\"},\"audio/dls\":{source:\"iana\"},\"audio/dsr-es201108\":{source:\"iana\"},\"audio/dsr-es202050\":{source:\"iana\"},\"audio/dsr-es202211\":{source:\"iana\"},\"audio/dsr-es202212\":{source:\"iana\"},\"audio/dv\":{source:\"iana\"},\"audio/dvi4\":{source:\"iana\"},\"audio/eac3\":{source:\"iana\"},\"audio/encaprtp\":{source:\"iana\"},\"audio/evrc\":{source:\"iana\"},\"audio/evrc-qcp\":{source:\"iana\"},\"audio/evrc0\":{source:\"iana\"},\"audio/evrc1\":{source:\"iana\"},\"audio/evrcb\":{source:\"iana\"},\"audio/evrcb0\":{source:\"iana\"},\"audio/evrcb1\":{source:\"iana\"},\"audio/evrcnw\":{source:\"iana\"},\"audio/evrcnw0\":{source:\"iana\"},\"audio/evrcnw1\":{source:\"iana\"},\"audio/evrcwb\":{source:\"iana\"},\"audio/evrcwb0\":{source:\"iana\"},\"audio/evrcwb1\":{source:\"iana\"},\"audio/evs\":{source:\"iana\"},\"audio/fwdred\":{source:\"iana\"},\"audio/g711-0\":{source:\"iana\"},\"audio/g719\":{source:\"iana\"},\"audio/g722\":{source:\"iana\"},\"audio/g7221\":{source:\"iana\"},\"audio/g723\":{source:\"iana\"},\"audio/g726-16\":{source:\"iana\"},\"audio/g726-24\":{source:\"iana\"},\"audio/g726-32\":{source:\"iana\"},\"audio/g726-40\":{source:\"iana\"},\"audio/g728\":{source:\"iana\"},\"audio/g729\":{source:\"iana\"},\"audio/g7291\":{source:\"iana\"},\"audio/g729d\":{source:\"iana\"},\"audio/g729e\":{source:\"iana\"},\"audio/gsm\":{source:\"iana\"},\"audio/gsm-efr\":{source:\"iana\"},\"audio/gsm-hr-08\":{source:\"iana\"},\"audio/ilbc\":{source:\"iana\"},\"audio/ip-mr_v2.5\":{source:\"iana\"},\"audio/isac\":{source:\"apache\"},\"audio/l16\":{source:\"iana\"},\"audio/l20\":{source:\"iana\"},\"audio/l24\":{source:\"iana\",compressible:!1},\"audio/l8\":{source:\"iana\"},\"audio/lpc\":{source:\"iana\"},\"audio/midi\":{source:\"apache\",extensions:[\"mid\",\"midi\",\"kar\",\"rmi\"]},\"audio/mobile-xmf\":{source:\"iana\"},\"audio/mp4\":{source:\"iana\",compressible:!1,extensions:[\"mp4a\",\"m4a\"]},\"audio/mp4a-latm\":{source:\"iana\"},\"audio/mpa\":{source:\"iana\"},\"audio/mpa-robust\":{source:\"iana\"},\"audio/mpeg\":{source:\"iana\",compressible:!1,extensions:[\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"]},\"audio/mpeg4-generic\":{source:\"iana\"},\"audio/musepack\":{source:\"apache\"},\"audio/ogg\":{source:\"iana\",compressible:!1,extensions:[\"oga\",\"ogg\",\"spx\"]},\"audio/opus\":{source:\"iana\"},\"audio/parityfec\":{source:\"iana\"},\"audio/pcma\":{source:\"iana\"},\"audio/pcma-wb\":{source:\"iana\"},\"audio/pcmu\":{source:\"iana\"},\"audio/pcmu-wb\":{source:\"iana\"},\"audio/prs.sid\":{source:\"iana\"},\"audio/qcelp\":{source:\"iana\"},\"audio/raptorfec\":{source:\"iana\"},\"audio/red\":{source:\"iana\"},\"audio/rtp-enc-aescm128\":{source:\"iana\"},\"audio/rtp-midi\":{source:\"iana\"},\"audio/rtploopback\":{source:\"iana\"},\"audio/rtx\":{source:\"iana\"},\"audio/s3m\":{source:\"apache\",extensions:[\"s3m\"]},\"audio/silk\":{source:\"apache\",extensions:[\"sil\"]},\"audio/smv\":{source:\"iana\"},\"audio/smv-qcp\":{source:\"iana\"},\"audio/smv0\":{source:\"iana\"},\"audio/sp-midi\":{source:\"iana\"},\"audio/speex\":{source:\"iana\"},\"audio/t140c\":{source:\"iana\"},\"audio/t38\":{source:\"iana\"},\"audio/telephone-event\":{source:\"iana\"},\"audio/tone\":{source:\"iana\"},\"audio/uemclip\":{source:\"iana\"},\"audio/ulpfec\":{source:\"iana\"},\"audio/vdvi\":{source:\"iana\"},\"audio/vmr-wb\":{source:\"iana\"},\"audio/vnd.3gpp.iufp\":{source:\"iana\"},\"audio/vnd.4sb\":{source:\"iana\"},\"audio/vnd.audiokoz\":{source:\"iana\"},\"audio/vnd.celp\":{source:\"iana\"},\"audio/vnd.cisco.nse\":{source:\"iana\"},\"audio/vnd.cmles.radio-events\":{source:\"iana\"},\"audio/vnd.cns.anp1\":{source:\"iana\"},\"audio/vnd.cns.inf1\":{source:\"iana\"},\"audio/vnd.dece.audio\":{source:\"iana\",extensions:[\"uva\",\"uvva\"]},\"audio/vnd.digital-winds\":{source:\"iana\",extensions:[\"eol\"]},\"audio/vnd.dlna.adts\":{source:\"iana\"},\"audio/vnd.dolby.heaac.1\":{source:\"iana\"},\"audio/vnd.dolby.heaac.2\":{source:\"iana\"},\"audio/vnd.dolby.mlp\":{source:\"iana\"},\"audio/vnd.dolby.mps\":{source:\"iana\"},\"audio/vnd.dolby.pl2\":{source:\"iana\"},\"audio/vnd.dolby.pl2x\":{source:\"iana\"},\"audio/vnd.dolby.pl2z\":{source:\"iana\"},\"audio/vnd.dolby.pulse.1\":{source:\"iana\"},\"audio/vnd.dra\":{source:\"iana\",extensions:[\"dra\"]},\"audio/vnd.dts\":{source:\"iana\",extensions:[\"dts\"]},\"audio/vnd.dts.hd\":{source:\"iana\",extensions:[\"dtshd\"]},\"audio/vnd.dvb.file\":{source:\"iana\"},\"audio/vnd.everad.plj\":{source:\"iana\"},\"audio/vnd.hns.audio\":{source:\"iana\"},\"audio/vnd.lucent.voice\":{source:\"iana\",extensions:[\"lvp\"]},\"audio/vnd.ms-playready.media.pya\":{source:\"iana\",extensions:[\"pya\"]},\"audio/vnd.nokia.mobile-xmf\":{source:\"iana\"},\"audio/vnd.nortel.vbk\":{source:\"iana\"},\"audio/vnd.nuera.ecelp4800\":{source:\"iana\",extensions:[\"ecelp4800\"]},\"audio/vnd.nuera.ecelp7470\":{source:\"iana\",extensions:[\"ecelp7470\"]},\"audio/vnd.nuera.ecelp9600\":{source:\"iana\",extensions:[\"ecelp9600\"]},\"audio/vnd.octel.sbc\":{source:\"iana\"},\"audio/vnd.qcelp\":{source:\"iana\"},\"audio/vnd.rhetorex.32kadpcm\":{source:\"iana\"},\"audio/vnd.rip\":{source:\"iana\",extensions:[\"rip\"]},\"audio/vnd.rn-realaudio\":{compressible:!1},\"audio/vnd.sealedmedia.softseal.mpeg\":{source:\"iana\"},\"audio/vnd.vmx.cvsd\":{source:\"iana\"},\"audio/vnd.wave\":{compressible:!1},\"audio/vorbis\":{source:\"iana\",compressible:!1},\"audio/vorbis-config\":{source:\"iana\"},\"audio/wav\":{compressible:!1,extensions:[\"wav\"]},\"audio/wave\":{compressible:!1,extensions:[\"wav\"]},\"audio/webm\":{source:\"apache\",compressible:!1,extensions:[\"weba\"]},\"audio/x-aac\":{source:\"apache\",compressible:!1,extensions:[\"aac\"]},\"audio/x-aiff\":{source:\"apache\",extensions:[\"aif\",\"aiff\",\"aifc\"]},\"audio/x-caf\":{source:\"apache\",compressible:!1,extensions:[\"caf\"]},\"audio/x-flac\":{source:\"apache\",extensions:[\"flac\"]},\"audio/x-m4a\":{source:\"nginx\",extensions:[\"m4a\"]},\"audio/x-matroska\":{source:\"apache\",extensions:[\"mka\"]},\"audio/x-mpegurl\":{source:\"apache\",extensions:[\"m3u\"]},\"audio/x-ms-wax\":{source:\"apache\",extensions:[\"wax\"]},\"audio/x-ms-wma\":{source:\"apache\",extensions:[\"wma\"]},\"audio/x-pn-realaudio\":{source:\"apache\",extensions:[\"ram\",\"ra\"]},\"audio/x-pn-realaudio-plugin\":{source:\"apache\",extensions:[\"rmp\"]},\"audio/x-realaudio\":{source:\"nginx\",extensions:[\"ra\"]},\"audio/x-tta\":{source:\"apache\"},\"audio/x-wav\":{source:\"apache\",extensions:[\"wav\"]},\"audio/xm\":{source:\"apache\",extensions:[\"xm\"]},\"chemical/x-cdx\":{source:\"apache\",extensions:[\"cdx\"]},\"chemical/x-cif\":{source:\"apache\",extensions:[\"cif\"]},\"chemical/x-cmdf\":{source:\"apache\",extensions:[\"cmdf\"]},\"chemical/x-cml\":{source:\"apache\",extensions:[\"cml\"]},\"chemical/x-csml\":{source:\"apache\",extensions:[\"csml\"]},\"chemical/x-pdb\":{source:\"apache\"},\"chemical/x-xyz\":{source:\"apache\",extensions:[\"xyz\"]},\"font/opentype\":{compressible:!0,extensions:[\"otf\"]},\"image/bmp\":{source:\"apache\",compressible:!0,extensions:[\"bmp\"]},\"image/cgm\":{source:\"iana\",extensions:[\"cgm\"]},\"image/fits\":{source:\"iana\"},\"image/g3fax\":{source:\"iana\",extensions:[\"g3\"]},\"image/gif\":{source:\"iana\",compressible:!1,extensions:[\"gif\"]},\"image/ief\":{source:\"iana\",extensions:[\"ief\"]},\"image/jp2\":{source:\"iana\"},\"image/jpeg\":{source:\"iana\",compressible:!1,extensions:[\"jpeg\",\"jpg\",\"jpe\"]},\"image/jpm\":{source:\"iana\"},\"image/jpx\":{source:\"iana\"},\"image/ktx\":{source:\"iana\",extensions:[\"ktx\"]},\"image/naplps\":{source:\"iana\"},\"image/pjpeg\":{compressible:!1},\"image/png\":{source:\"iana\",compressible:!1,extensions:[\"png\"]},\"image/prs.btif\":{source:\"iana\",extensions:[\"btif\"]},\"image/prs.pti\":{source:\"iana\"},\"image/pwg-raster\":{source:\"iana\"},\"image/sgi\":{source:\"apache\",extensions:[\"sgi\"]},\"image/svg+xml\":{source:\"iana\",compressible:!0,extensions:[\"svg\",\"svgz\"]},\"image/t38\":{source:\"iana\"},\"image/tiff\":{source:\"iana\",compressible:!1,extensions:[\"tiff\",\"tif\"]},\"image/tiff-fx\":{source:\"iana\"},\"image/vnd.adobe.photoshop\":{source:\"iana\",compressible:!0,extensions:[\"psd\"]},\"image/vnd.airzip.accelerator.azv\":{source:\"iana\"},\"image/vnd.cns.inf2\":{source:\"iana\"},\"image/vnd.dece.graphic\":{source:\"iana\",extensions:[\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"]},\"image/vnd.djvu\":{source:\"iana\",extensions:[\"djvu\",\"djv\"]},\"image/vnd.dvb.subtitle\":{source:\"iana\",extensions:[\"sub\"]},\"image/vnd.dwg\":{source:\"iana\",extensions:[\"dwg\"]},\"image/vnd.dxf\":{source:\"iana\",extensions:[\"dxf\"]},\"image/vnd.fastbidsheet\":{source:\"iana\",extensions:[\"fbs\"]},\"image/vnd.fpx\":{source:\"iana\",extensions:[\"fpx\"]},\"image/vnd.fst\":{source:\"iana\",extensions:[\"fst\"]},\"image/vnd.fujixerox.edmics-mmr\":{source:\"iana\",extensions:[\"mmr\"]},\"image/vnd.fujixerox.edmics-rlc\":{source:\"iana\",extensions:[\"rlc\"]},\"image/vnd.globalgraphics.pgb\":{source:\"iana\"},\"image/vnd.microsoft.icon\":{source:\"iana\"},\"image/vnd.mix\":{source:\"iana\"},\"image/vnd.mozilla.apng\":{source:\"iana\"},\"image/vnd.ms-modi\":{source:\"iana\",extensions:[\"mdi\"]},\"image/vnd.ms-photo\":{source:\"apache\",extensions:[\"wdp\"]},\"image/vnd.net-fpx\":{source:\"iana\",extensions:[\"npx\"]},\"image/vnd.radiance\":{source:\"iana\"},\"image/vnd.sealed.png\":{source:\"iana\"},\"image/vnd.sealedmedia.softseal.gif\":{source:\"iana\"},\"image/vnd.sealedmedia.softseal.jpg\":{source:\"iana\"},\"image/vnd.svf\":{source:\"iana\"},\"image/vnd.tencent.tap\":{source:\"iana\"},\"image/vnd.valve.source.texture\":{source:\"iana\"},\"image/vnd.wap.wbmp\":{source:\"iana\",extensions:[\"wbmp\"]},\"image/vnd.xiff\":{source:\"iana\",extensions:[\"xif\"]},\"image/vnd.zbrush.pcx\":{source:\"iana\"},\"image/webp\":{source:\"apache\",extensions:[\"webp\"]},\"image/x-3ds\":{source:\"apache\",extensions:[\"3ds\"]},\"image/x-cmu-raster\":{source:\"apache\",extensions:[\"ras\"]},\"image/x-cmx\":{source:\"apache\",extensions:[\"cmx\"]},\"image/x-freehand\":{source:\"apache\",extensions:[\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"]},\"image/x-icon\":{source:\"apache\",compressible:!0,extensions:[\"ico\"]},\"image/x-jng\":{source:\"nginx\",extensions:[\"jng\"]},\"image/x-mrsid-image\":{source:\"apache\",extensions:[\"sid\"]},\"image/x-ms-bmp\":{source:\"nginx\",compressible:!0,extensions:[\"bmp\"]},\"image/x-pcx\":{source:\"apache\",extensions:[\"pcx\"]},\"image/x-pict\":{source:\"apache\",extensions:[\"pic\",\"pct\"]},\"image/x-portable-anymap\":{source:\"apache\",extensions:[\"pnm\"]},\"image/x-portable-bitmap\":{source:\"apache\",extensions:[\"pbm\"]},\"image/x-portable-graymap\":{source:\"apache\",extensions:[\"pgm\"]},\"image/x-portable-pixmap\":{source:\"apache\",extensions:[\"ppm\"]},\"image/x-rgb\":{source:\"apache\",extensions:[\"rgb\"]},\"image/x-tga\":{source:\"apache\",extensions:[\"tga\"]},\"image/x-xbitmap\":{source:\"apache\",extensions:[\"xbm\"]},\"image/x-xcf\":{compressible:!1},\"image/x-xpixmap\":{source:\"apache\",extensions:[\"xpm\"]},\"image/x-xwindowdump\":{source:\"apache\",extensions:[\"xwd\"]},\"message/cpim\":{source:\"iana\"},\"message/delivery-status\":{source:\"iana\"},\"message/disposition-notification\":{source:\"iana\"},\"message/external-body\":{source:\"iana\"},\"message/feedback-report\":{source:\"iana\"},\"message/global\":{source:\"iana\"},\"message/global-delivery-status\":{source:\"iana\"},\"message/global-disposition-notification\":{source:\"iana\"},\"message/global-headers\":{source:\"iana\"},\"message/http\":{source:\"iana\",compressible:!1},\"message/imdn+xml\":{source:\"iana\",compressible:!0},\"message/news\":{source:\"iana\"},\"message/partial\":{source:\"iana\",compressible:!1},\"message/rfc822\":{source:\"iana\",compressible:!0,extensions:[\"eml\",\"mime\"]},\"message/s-http\":{source:\"iana\"},\"message/sip\":{source:\"iana\"},\"message/sipfrag\":{source:\"iana\"},\"message/tracking-status\":{source:\"iana\"},\"message/vnd.si.simp\":{source:\"iana\"},\"message/vnd.wfa.wsc\":{source:\"iana\"},\"model/iges\":{source:\"iana\",compressible:!1,extensions:[\"igs\",\"iges\"]},\"model/mesh\":{source:\"iana\",compressible:!1,extensions:[\"msh\",\"mesh\",\"silo\"]},\"model/vnd.collada+xml\":{source:\"iana\",extensions:[\"dae\"]},\"model/vnd.dwf\":{source:\"iana\",extensions:[\"dwf\"]},\"model/vnd.flatland.3dml\":{source:\"iana\"},\"model/vnd.gdl\":{source:\"iana\",extensions:[\"gdl\"]},\"model/vnd.gs-gdl\":{source:\"apache\"},\"model/vnd.gs.gdl\":{source:\"iana\"},\"model/vnd.gtw\":{source:\"iana\",extensions:[\"gtw\"]},\"model/vnd.moml+xml\":{source:\"iana\"},\"model/vnd.mts\":{source:\"iana\",extensions:[\"mts\"]},\"model/vnd.opengex\":{source:\"iana\"},\"model/vnd.parasolid.transmit.binary\":{source:\"iana\"},\"model/vnd.parasolid.transmit.text\":{source:\"iana\"},\"model/vnd.valve.source.compiled-map\":{source:\"iana\"},\"model/vnd.vtu\":{source:\"iana\",extensions:[\"vtu\"]},\"model/vrml\":{source:\"iana\",compressible:!1,extensions:[\"wrl\",\"vrml\"]},\"model/x3d+binary\":{source:\"apache\",compressible:!1,extensions:[\"x3db\",\"x3dbz\"]},\"model/x3d+fastinfoset\":{source:\"iana\"},\"model/x3d+vrml\":{source:\"apache\",compressible:!1,extensions:[\"x3dv\",\"x3dvz\"]},\"model/x3d+xml\":{source:\"iana\",compressible:!0,extensions:[\"x3d\",\"x3dz\"]},\"model/x3d-vrml\":{source:\"iana\"},\"multipart/alternative\":{source:\"iana\",compressible:!1},\"multipart/appledouble\":{source:\"iana\"},\"multipart/byteranges\":{source:\"iana\"},\"multipart/digest\":{source:\"iana\"},\"multipart/encrypted\":{source:\"iana\",compressible:!1},\"multipart/form-data\":{source:\"iana\",compressible:!1},\"multipart/header-set\":{source:\"iana\"},\"multipart/mixed\":{source:\"iana\",compressible:!1},\"multipart/parallel\":{source:\"iana\"},\"multipart/related\":{source:\"iana\",compressible:!1},\"multipart/report\":{source:\"iana\"},\"multipart/signed\":{source:\"iana\",compressible:!1},\"multipart/voice-message\":{source:\"iana\"},\"multipart/x-mixed-replace\":{source:\"iana\"},\"text/1d-interleaved-parityfec\":{source:\"iana\"},\"text/cache-manifest\":{source:\"iana\",compressible:!0,extensions:[\"appcache\",\"manifest\"]},\"text/calendar\":{source:\"iana\",extensions:[\"ics\",\"ifb\"]},\"text/calender\":{compressible:!0},\"text/cmd\":{compressible:!0},\"text/coffeescript\":{extensions:[\"coffee\",\"litcoffee\"]},\"text/css\":{source:\"iana\",compressible:!0,extensions:[\"css\"]},\"text/csv\":{source:\"iana\",compressible:!0,extensions:[\"csv\"]},\"text/csv-schema\":{source:\"iana\"},\"text/directory\":{source:\"iana\"},\"text/dns\":{source:\"iana\"},\"text/ecmascript\":{source:\"iana\"},\"text/encaprtp\":{source:\"iana\"},\"text/enriched\":{source:\"iana\"},\"text/fwdred\":{source:\"iana\"},\"text/grammar-ref-list\":{source:\"iana\"},\"text/hjson\":{extensions:[\"hjson\"]},\"text/html\":{source:\"iana\",compressible:!0,extensions:[\"html\",\"htm\",\"shtml\"]},\"text/jade\":{extensions:[\"jade\"]},\"text/javascript\":{source:\"iana\",compressible:!0},\"text/jcr-cnd\":{source:\"iana\"},\"text/jsx\":{compressible:!0,extensions:[\"jsx\"]},\"text/less\":{extensions:[\"less\"]},\"text/markdown\":{source:\"iana\"},\"text/mathml\":{source:\"nginx\",extensions:[\"mml\"]},\"text/mizar\":{source:\"iana\"},\"text/n3\":{source:\"iana\",compressible:!0,extensions:[\"n3\"]},\"text/parameters\":{source:\"iana\"},\"text/parityfec\":{source:\"iana\"},\"text/plain\":{source:\"iana\",compressible:!0,extensions:[\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"]},\"text/provenance-notation\":{source:\"iana\"},\"text/prs.fallenstein.rst\":{source:\"iana\"},\"text/prs.lines.tag\":{source:\"iana\",extensions:[\"dsc\"]},\"text/raptorfec\":{source:\"iana\"},\"text/red\":{source:\"iana\"},\"text/rfc822-headers\":{source:\"iana\"},\"text/richtext\":{source:\"iana\",compressible:!0,extensions:[\"rtx\"]},\"text/rtf\":{source:\"iana\",compressible:!0,extensions:[\"rtf\"]},\"text/rtp-enc-aescm128\":{source:\"iana\"},\"text/rtploopback\":{source:\"iana\"},\"text/rtx\":{source:\"iana\"},\"text/sgml\":{source:\"iana\",extensions:[\"sgml\",\"sgm\"]},\"text/stylus\":{extensions:[\"stylus\",\"styl\"]},\"text/t140\":{source:\"iana\"},\"text/tab-separated-values\":{source:\"iana\",compressible:!0,extensions:[\"tsv\"]},\"text/troff\":{source:\"iana\",extensions:[\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"]},\"text/turtle\":{source:\"iana\",extensions:[\"ttl\"]},\"text/ulpfec\":{source:\"iana\"},\"text/uri-list\":{source:\"iana\",compressible:!0,extensions:[\"uri\",\"uris\",\"urls\"]},\"text/vcard\":{source:\"iana\",compressible:!0,extensions:[\"vcard\"]},\"text/vnd.a\":{source:\"iana\"},\"text/vnd.abc\":{source:\"iana\"},\"text/vnd.curl\":{source:\"iana\",extensions:[\"curl\"]},\"text/vnd.curl.dcurl\":{source:\"apache\",extensions:[\"dcurl\"]},\"text/vnd.curl.mcurl\":{source:\"apache\",extensions:[\"mcurl\"]},\"text/vnd.curl.scurl\":{source:\"apache\",extensions:[\"scurl\"]},\"text/vnd.debian.copyright\":{source:\"iana\"},\"text/vnd.dmclientscript\":{source:\"iana\"},\"text/vnd.dvb.subtitle\":{source:\"iana\",extensions:[\"sub\"]},\"text/vnd.esmertec.theme-descriptor\":{source:\"iana\"},\"text/vnd.fly\":{source:\"iana\",extensions:[\"fly\"]},\"text/vnd.fmi.flexstor\":{source:\"iana\",extensions:[\"flx\"]},\"text/vnd.graphviz\":{source:\"iana\",extensions:[\"gv\"]},\"text/vnd.in3d.3dml\":{source:\"iana\",extensions:[\"3dml\"]},\"text/vnd.in3d.spot\":{source:\"iana\",extensions:[\"spot\"]},\"text/vnd.iptc.newsml\":{source:\"iana\"},\"text/vnd.iptc.nitf\":{source:\"iana\"},\"text/vnd.latex-z\":{source:\"iana\"},\"text/vnd.motorola.reflex\":{source:\"iana\"},\"text/vnd.ms-mediapackage\":{source:\"iana\"},\"text/vnd.net2phone.commcenter.command\":{source:\"iana\"},\"text/vnd.radisys.msml-basic-layout\":{source:\"iana\"},\"text/vnd.si.uricatalogue\":{source:\"iana\"},\"text/vnd.sun.j2me.app-descriptor\":{source:\"iana\",extensions:[\"jad\"]},\"text/vnd.trolltech.linguist\":{source:\"iana\"},\"text/vnd.wap.si\":{source:\"iana\"},\"text/vnd.wap.sl\":{source:\"iana\"},\"text/vnd.wap.wml\":{source:\"iana\",extensions:[\"wml\"]},\"text/vnd.wap.wmlscript\":{source:\"iana\",extensions:[\"wmls\"]},\"text/vtt\":{charset:\"UTF-8\",compressible:!0,extensions:[\"vtt\"]},\"text/x-asm\":{source:\"apache\",extensions:[\"s\",\"asm\"]},\"text/x-c\":{source:\"apache\",extensions:[\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"]},\"text/x-component\":{source:\"nginx\",extensions:[\"htc\"]},\"text/x-fortran\":{source:\"apache\",extensions:[\"f\",\"for\",\"f77\",\"f90\"]},\"text/x-gwt-rpc\":{compressible:!0},\"text/x-handlebars-template\":{extensions:[\"hbs\"]},\"text/x-java-source\":{source:\"apache\",extensions:[\"java\"]},\"text/x-jquery-tmpl\":{compressible:!0},\"text/x-lua\":{extensions:[\"lua\"]},\"text/x-markdown\":{compressible:!0,extensions:[\"markdown\",\"md\",\"mkd\"]},\"text/x-nfo\":{source:\"apache\",extensions:[\"nfo\"]},\"text/x-opml\":{source:\"apache\",extensions:[\"opml\"]},\"text/x-pascal\":{source:\"apache\",extensions:[\"p\",\"pas\"]},\"text/x-processing\":{compressible:!0,extensions:[\"pde\"]},\"text/x-sass\":{extensions:[\"sass\"]},\"text/x-scss\":{extensions:[\"scss\"]},\"text/x-setext\":{source:\"apache\",extensions:[\"etx\"]},\"text/x-sfv\":{source:\"apache\",extensions:[\"sfv\"]},\"text/x-suse-ymp\":{compressible:!0,extensions:[\"ymp\"]},\"text/x-uuencode\":{source:\"apache\",extensions:[\"uu\"]},\"text/x-vcalendar\":{source:\"apache\",extensions:[\"vcs\"]},\"text/x-vcard\":{source:\"apache\",extensions:[\"vcf\"]},\"text/xml\":{source:\"iana\",compressible:!0,extensions:[\"xml\"]},\"text/xml-external-parsed-entity\":{source:\"iana\"},\"text/yaml\":{extensions:[\"yaml\",\"yml\"]},\"video/1d-interleaved-parityfec\":{source:\"apache\"},\"video/3gpp\":{source:\"apache\",extensions:[\"3gp\",\"3gpp\"]},\"video/3gpp-tt\":{source:\"apache\"},\"video/3gpp2\":{source:\"apache\",extensions:[\"3g2\"]},\"video/bmpeg\":{source:\"apache\"},\"video/bt656\":{source:\"apache\"},\"video/celb\":{source:\"apache\"},\"video/dv\":{source:\"apache\"},\"video/h261\":{source:\"apache\",extensions:[\"h261\"]},\"video/h263\":{source:\"apache\",extensions:[\"h263\"]},\"video/h263-1998\":{source:\"apache\"},\"video/h263-2000\":{source:\"apache\"},\"video/h264\":{source:\"apache\",extensions:[\"h264\"]},\"video/h264-rcdo\":{source:\"apache\"},\"video/h264-svc\":{source:\"apache\"},\"video/jpeg\":{source:\"apache\",extensions:[\"jpgv\"]},\"video/jpeg2000\":{source:\"apache\"},\"video/jpm\":{source:\"apache\",extensions:[\"jpm\",\"jpgm\"]},\"video/mj2\":{source:\"apache\",extensions:[\"mj2\",\"mjp2\"]},\"video/mp1s\":{source:\"apache\"},\"video/mp2p\":{source:\"apache\"},\"video/mp2t\":{source:\"apache\",extensions:[\"ts\"]},\"video/mp4\":{source:\"apache\",compressible:!1,extensions:[\"mp4\",\"mp4v\",\"mpg4\"]},\"video/mp4v-es\":{source:\"apache\"},\"video/mpeg\":{source:\"apache\",compressible:!1,extensions:[\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"]},\"video/mpeg4-generic\":{source:\"apache\"},\"video/mpv\":{source:\"apache\"},\"video/nv\":{source:\"apache\"},\"video/ogg\":{source:\"apache\",compressible:!1,extensions:[\"ogv\"]},\"video/parityfec\":{source:\"apache\"},\"video/pointer\":{source:\"apache\"},\"video/quicktime\":{source:\"apache\",compressible:!1,extensions:[\"qt\",\"mov\"]},\"video/raw\":{source:\"apache\"},\"video/rtp-enc-aescm128\":{source:\"apache\"},\"video/rtx\":{source:\"apache\"},\"video/smpte292m\":{source:\"apache\"},\"video/ulpfec\":{source:\"apache\"},\"video/vc1\":{source:\"apache\"},\"video/vnd.cctv\":{source:\"apache\"},\"video/vnd.dece.hd\":{source:\"apache\",extensions:[\"uvh\",\"uvvh\"]},\"video/vnd.dece.mobile\":{source:\"apache\",extensions:[\"uvm\",\"uvvm\"]},\"video/vnd.dece.mp4\":{source:\"apache\"},\"video/vnd.dece.pd\":{source:\"apache\",extensions:[\"uvp\",\"uvvp\"]},\"video/vnd.dece.sd\":{source:\"apache\",extensions:[\"uvs\",\"uvvs\"]},\"video/vnd.dece.video\":{source:\"apache\",extensions:[\"uvv\",\"uvvv\"]},\"video/vnd.directv.mpeg\":{source:\"apache\"},\"video/vnd.directv.mpeg-tts\":{source:\"apache\"},\"video/vnd.dlna.mpeg-tts\":{source:\"apache\"},\"video/vnd.dvb.file\":{source:\"apache\",extensions:[\"dvb\"]},\"video/vnd.fvt\":{source:\"apache\",extensions:[\"fvt\"]},\"video/vnd.hns.video\":{source:\"apache\"},\"video/vnd.iptvforum.1dparityfec-1010\":{source:\"apache\"},\"video/vnd.iptvforum.1dparityfec-2005\":{source:\"apache\"},\"video/vnd.iptvforum.2dparityfec-1010\":{source:\"apache\"},\"video/vnd.iptvforum.2dparityfec-2005\":{source:\"apache\"},\"video/vnd.iptvforum.ttsavc\":{source:\"apache\"},\"video/vnd.iptvforum.ttsmpeg2\":{source:\"apache\"},\"video/vnd.motorola.video\":{source:\"apache\"},\"video/vnd.motorola.videop\":{source:\"apache\"},\"video/vnd.mpegurl\":{source:\"apache\",extensions:[\"mxu\",\"m4u\"]},\"video/vnd.ms-playready.media.pyv\":{source:\"apache\",extensions:[\"pyv\"]},\"video/vnd.nokia.interleaved-multimedia\":{source:\"apache\"},\"video/vnd.nokia.videovoip\":{source:\"apache\"},\"video/vnd.objectvideo\":{source:\"apache\"},\"video/vnd.sealed.mpeg1\":{source:\"apache\"},\"video/vnd.sealed.mpeg4\":{source:\"apache\"},\"video/vnd.sealed.swf\":{source:\"apache\"},\"video/vnd.sealedmedia.softseal.mov\":{source:\"apache\"},\"video/vnd.uvvu.mp4\":{source:\"apache\",extensions:[\"uvu\",\"uvvu\"]},\"video/vnd.vivo\":{source:\"apache\",extensions:[\"viv\"]},\"video/webm\":{source:\"apache\",compressible:!1,extensions:[\"webm\"]},\"video/x-f4v\":{source:\"apache\",extensions:[\"f4v\"]},\"video/x-fli\":{source:\"apache\",extensions:[\"fli\"]},\"video/x-flv\":{source:\"apache\",compressible:!1,extensions:[\"flv\"]},\"video/x-m4v\":{source:\"apache\",extensions:[\"m4v\"]},\"video/x-matroska\":{source:\"apache\",compressible:!1,extensions:[\"mkv\",\"mk3d\",\"mks\"]},\"video/x-mng\":{source:\"apache\",extensions:[\"mng\"]},\"video/x-ms-asf\":{source:\"apache\",extensions:[\"asf\",\"asx\"]},\"video/x-ms-vob\":{source:\"apache\",extensions:[\"vob\"]},\"video/x-ms-wm\":{source:\"apache\",extensions:[\"wm\"]},\"video/x-ms-wmv\":{source:\"apache\",compressible:!1,extensions:[\"wmv\"]},\"video/x-ms-wmx\":{source:\"apache\",extensions:[\"wmx\"]},\"video/x-ms-wvx\":{source:\"apache\",extensions:[\"wvx\"]},\"video/x-msvideo\":{source:\"apache\",extensions:[\"avi\"]},\"video/x-sgi-movie\":{source:\"apache\",extensions:[\"movie\"]},\"video/x-smv\":{source:\"apache\",extensions:[\"smv\"]},\"x-conference/x-cooltalk\":{source:\"apache\",extensions:[\"ice\"]},\"x-shader/x-fragment\":{compressible:!0},\"x-shader/x-vertex\":{compressible:!0}}},{}],159:[function(e,t,n){t.exports=[\"ants\",\"bats\",\"bears\",\"bees\",\"birds\",\"buffalo\",\"cats\",\"chickens\",\"cattle\",\"dogs\",\"dolphins\",\"ducks\",\"elephants\",\"fishes\",\"foxes\",\"frogs\",\"geese\",\"goats\",\"horses\",\"kangaroos\",\"lions\",\"monkeys\",\"owls\",\"oxen\",\"penguins\",\"people\",\"pigs\",\"rabbits\",\"sheep\",\"tigers\",\"whales\",\"wolves\",\"zebras\",\"banshees\",\"crows\",\"black cats\",\"chimeras\",\"ghosts\",\"conspirators\",\"dragons\",\"dwarves\",\"elves\",\"enchanters\",\"exorcists\",\"sons\",\"foes\",\"giants\",\"gnomes\",\"goblins\",\"gooses\",\"griffins\",\"lycanthropes\",\"nemesis\",\"ogres\",\"oracles\",\"prophets\",\"sorcerors\",\"spiders\",\"spirits\",\"vampires\",\"warlocks\",\"vixens\",\"werewolves\",\"witches\",\"worshipers\",\"zombies\",\"druids\"]},{}],160:[function(e,t,n){var a={};t.exports=a,a.creature=e(\"./creature\"),a.name=e(\"./name\")},{\"./creature\":159,\"./name\":161}],161:[function(e,t,n){t.exports=[\"#{Address.state} #{creature}\"]},{}],162:[function(e,t,n){t.exports=[\"Adventure Road Bicycle\",\"BMX Bicycle\",\"City Bicycle\",\"Cruiser Bicycle\",\"Cyclocross Bicycle\",\"Dual-Sport Bicycle\",\"Fitness Bicycle\",\"Flat-Foot Comfort Bicycle\",\"Folding Bicycle\",\"Hybrid Bicycle\",\"Mountain Bicycle\",\"Recumbent Bicycle\",\"Road Bicycle\",\"Tandem Bicycle\",\"Touring Bicycle\",\"Track/Fixed-Gear Bicycle\",\"Triathlon/Time Trial Bicycle\",\"Tricycle\"]},{}],163:[function(e,t,n){t.exports=[\"Diesel\",\"Electric\",\"Gasoline\",\"Hybrid\"]},{}],164:[function(e,t,n){var a={};t.exports=a,a.manufacturer=e(\"./manufacturer\"),a.model=e(\"./model\"),a.type=e(\"./vehicle_type\"),a.fuel=e(\"./fuel\"),a.bicycle=e(\"./bicycle\")},{\"./bicycle\":162,\"./fuel\":163,\"./manufacturer\":165,\"./model\":166,\"./vehicle_type\":167}],165:[function(e,t,n){t.exports=[\"Aston Martin\",\"Audi\",\"Bentley\",\"BMW\",\"Bugatti\",\"Cadillac\",\"Chevrolet\",\"Chrysler\",\"Dodge\",\"Ferrari\",\"Fiat\",\"Ford\",\"Honda\",\"Hyundai\",\"Jaguar\",\"Jeep\",\"Kia\",\"Lamborghini\",\"Land Rover\",\"Maserati\",\"Mazda\",\"Mercedes Benz\",\"Mini\",\"Nissan\",\"Polestar\",\"Porsche\",\"Rolls Royce\",\"Smart\",\"Tesla\",\"Toyota\",\"Volkswagen\",\"Volvo\"]},{}],166:[function(e,t,n){t.exports=[\"Fiesta\",\"Focus\",\"Taurus\",\"Mustang\",\"Explorer\",\"Expedition\",\"F-150\",\"Model T\",\"Ranchero\",\"Volt\",\"Cruze\",\"Malibu\",\"Impala\",\"Camaro\",\"Corvette\",\"Colorado\",\"Silverado\",\"El Camino\",\"CTS\",\"XTS\",\"ATS\",\"Escalade\",\"Alpine\",\"Charger\",\"LeBaron\",\"PT Cruiser\",\"Challenger\",\"Durango\",\"Grand Caravan\",\"Wrangler\",\"Grand Cherokee\",\"Roadster\",\"Model S\",\"Model 3\",\"Camry\",\"Prius\",\"Land Cruiser\",\"Accord\",\"Civic\",\"Element\",\"Sentra\",\"Altima\",\"A8\",\"A4\",\"Beetle\",\"Jetta\",\"Golf\",\"911\",\"Spyder\",\"Countach\",\"Mercielago\",\"Aventador\",\"1\",\"2\",\"Fortwo\",\"V90\",\"XC90\",\"CX-9\"]},{}],167:[function(e,t,n){t.exports=[\"Cargo Van\",\"Convertible\",\"Coupe\",\"Crew Cab Pickup\",\"Extended Cab Pickup\",\"Hatchback\",\"Minivan\",\"Passenger Van\",\"SUV\",\"Sedan\",\"Wagon\"]},{}],168:[function(e,t,n){t.exports=function(e){var t=this,n=e.helpers;return t.word=function(t){var n;return n=void 0===t?e.definitions.lorem.words:e.definitions.lorem.words.filter((function(e){return e.length===t})),e.random.arrayElement(n)},t.words=function(t){void 0===t&&(t=3);for(var n=[],a=0;a<t;a++)n.push(e.lorem.word());return n.join(\" \")},t.sentence=function(t,n){void 0===t&&(t=e.datatype.number({min:3,max:10}));var a=e.lorem.words(t);return a.charAt(0).toUpperCase()+a.slice(1)+\".\"},t.slug=function(t){var a=e.lorem.words(t);return n.slugify(a)},t.sentences=function(t,n){void 0===t&&(t=e.datatype.number({min:2,max:6})),void 0===n&&(n=\" \");for(var a=[];t>0;t--)a.push(e.lorem.sentence());return a.join(n)},t.paragraph=function(t){return void 0===t&&(t=3),e.lorem.sentences(t+e.datatype.number(3))},t.paragraphs=function(t,n){void 0===n&&(n=\"\\n \\r\"),void 0===t&&(t=3);for(var a=[];t>0;t--)a.push(e.lorem.paragraph());return a.join(n)},t.text=function(t){var n=e.random.arrayElement([\"lorem.word\",\"lorem.words\",\"lorem.sentence\",\"lorem.sentences\",\"lorem.paragraph\",\"lorem.paragraphs\",\"lorem.lines\"]);return e.fake(\"{{\"+n+\"}}\")},t.lines=function(t){return void 0===t&&(t=e.datatype.number({min:1,max:5})),e.lorem.sentences(t,\"\\n\")},t}},{}],169:[function(e,t,n){var a=e(\"../vendor/mersenne\").MersenneTwister19937;t.exports=function(){var e=new a;e.init_genrand((new Date).getTime()%1e9),this.rand=function(t,n){return void 0===t&&(n=0,t=32768),Math.floor(e.genrand_real2()*(t-n)+n)},this.seed=function(t){if(\"number\"!=typeof t)throw new Error(\"seed(S) must take numeric argument; is \"+typeof t);e.init_genrand(t)},this.seed_array=function(t){if(\"object\"!=typeof t)throw new Error(\"seed_array(A) must take array of numbers; is \"+typeof t);e.init_by_array(t,t.length)}}},{\"../vendor/mersenne\":179}],170:[function(e,t,n){t.exports=function(e){this.genre=function(){return e.random.arrayElement(e.definitions.music.genre)},this.genre.schema={description:\"Generates a genre.\",sampleResults:[\"Rock\",\"Metal\",\"Pop\"]}}},{}],171:[function(e,t,n){t.exports=function(e){this.firstName=function(t){if(void 0!==e.definitions.name.male_first_name&&void 0!==e.definitions.name.female_first_name){if(\"string\"==typeof t&&(\"male\"===t.toLowerCase()?t=0:\"female\"===t.toLowerCase()&&(t=1)),\"number\"!=typeof t){if(void 0!==e.definitions.name.first_name)return e.random.arrayElement(e.definitions.name.first_name);t=e.datatype.number(1)}return 0===t?e.random.arrayElement(e.definitions.name.male_first_name):e.random.arrayElement(e.definitions.name.female_first_name)}return e.random.arrayElement(e.definitions.name.first_name)},this.lastName=function(t){return void 0!==e.definitions.name.male_last_name&&void 0!==e.definitions.name.female_last_name?(\"number\"!=typeof t&&(t=e.datatype.number(1)),0===t?e.random.arrayElement(e.locales[e.locale].name.male_last_name):e.random.arrayElement(e.locales[e.locale].name.female_last_name)):e.random.arrayElement(e.definitions.name.last_name)},this.middleName=function(t){return void 0!==e.definitions.name.male_middle_name&&void 0!==e.definitions.name.female_middle_name?(\"number\"!=typeof t&&(t=e.datatype.number(1)),0===t?e.random.arrayElement(e.locales[e.locale].name.male_middle_name):e.random.arrayElement(e.locales[e.locale].name.female_middle_name)):e.random.arrayElement(e.definitions.name.middle_name)},this.findName=function(t,n,a){var r,i,o=e.datatype.number(8);switch(\"number\"!=typeof a&&(a=e.datatype.number(1)),t=t||e.name.firstName(a),n=n||e.name.lastName(a),o){case 0:if(r=e.name.prefix(a))return r+\" \"+t+\" \"+n;case 1:if(i=e.name.suffix(a))return t+\" \"+n+\" \"+i}return t+\" \"+n},this.jobTitle=function(){return e.name.jobDescriptor()+\" \"+e.name.jobArea()+\" \"+e.name.jobType()},this.gender=function(t){return t?e.random.arrayElement(e.definitions.name.binary_gender):e.random.arrayElement(e.definitions.name.gender)},this.prefix=function(t){return void 0!==e.definitions.name.male_prefix&&void 0!==e.definitions.name.female_prefix?(\"number\"!=typeof t&&(t=e.datatype.number(1)),0===t?e.random.arrayElement(e.locales[e.locale].name.male_prefix):e.random.arrayElement(e.locales[e.locale].name.female_prefix)):e.random.arrayElement(e.definitions.name.prefix)},this.suffix=function(){return e.random.arrayElement(e.definitions.name.suffix)},this.title=function(){return e.random.arrayElement(e.definitions.name.title.descriptor)+\" \"+e.random.arrayElement(e.definitions.name.title.level)+\" \"+e.random.arrayElement(e.definitions.name.title.job)},this.jobDescriptor=function(){return e.random.arrayElement(e.definitions.name.title.descriptor)},this.jobArea=function(){return e.random.arrayElement(e.definitions.name.title.level)},this.jobType=function(){return e.random.arrayElement(e.definitions.name.title.job)}}},{}],172:[function(e,t,n){t.exports=function(e){var t=this;return t.phoneNumber=function(t){return t=t||e.phone.phoneFormats(),e.helpers.replaceSymbolWithNumber(t)},t.phoneNumberFormat=function(t){return t=t||0,e.helpers.replaceSymbolWithNumber(e.definitions.phone_number.formats[t])},t.phoneFormats=function(){return e.random.arrayElement(e.definitions.phone_number.formats)},t}},{}],173:[function(e,t,n){var a=function(e,t){return t.forEach((function(t){e=e.filter((function(e){return e!==t}))})),e};t.exports=function(e,t){return Array.isArray(t)&&t.length?e.mersenne.seed_array(t):isNaN(t)||e.mersenne.seed(t),this.number=function(t){return e.datatype.number(t)},this.float=function(t){return e.datatype.float(t)},this.arrayElement=function(t){return(t=t||[\"a\",\"b\",\"c\"])[e.datatype.number({max:t.length-1})]},this.arrayElements=function(t,n){t=t||[\"a\",\"b\",\"c\"],\"number\"!=typeof n?n=e.datatype.number({min:1,max:t.length}):n>t.length?n=t.length:n<0&&(n=0);for(var a,r,i=t.slice(0),o=t.length,s=o-n;o-- >s;)a=i[r=Math.floor((o+1)*e.datatype.float({min:0,max:.99}))],i[r]=i[o],i[o]=a;return i.slice(s)},this.objectElement=function(t,n){t=t||{foo:\"bar\",too:\"car\"};var a=Object.keys(t),r=e.random.arrayElement(a);return\"key\"===n?r:t[r]},this.uuid=function(){return e.datatype.uuid()},this.boolean=function(){return e.datatype.boolean()},this.word=function(t){var n=e.random.arrayElement([\"commerce.department\",\"commerce.productName\",\"commerce.productAdjective\",\"commerce.productMaterial\",\"commerce.product\",\"commerce.color\",\"company.catchPhraseAdjective\",\"company.catchPhraseDescriptor\",\"company.catchPhraseNoun\",\"company.bsAdjective\",\"company.bsBuzz\",\"company.bsNoun\",\"address.streetSuffix\",\"address.county\",\"address.country\",\"address.state\",\"finance.accountName\",\"finance.transactionType\",\"finance.currencyName\",\"hacker.noun\",\"hacker.verb\",\"hacker.adjective\",\"hacker.ingverb\",\"hacker.abbreviation\",\"name.jobDescriptor\",\"name.jobArea\",\"name.jobType\"]),a=e.fake(\"{{\"+n+\"}}\");return e.random.arrayElement(a.split(\" \"))},this.words=function(t){var n=[];void 0===t&&(t=e.datatype.number({min:1,max:3}));for(var a=0;a<t;a++)n.push(e.random.word());return n.join(\" \")},this.image=function(){return e.image.image()},this.locale=function(){return e.random.arrayElement(Object.keys(e.locales))},this.alpha=function(t){void 0===t?t={count:1}:\"number\"==typeof t?t={count:t}:void 0===t.count&&(t.count=1),void 0===t.upcase&&(t.upcase=!1),void 0===t.bannedChars&&(t.bannedChars=[]);var n=\"\",r=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];t.bannedChars&&(r=a(r,t.bannedChars));for(var i=0;i<t.count;i++)n+=e.random.arrayElement(r);return t.upcase?n.toUpperCase():n},this.alphaNumeric=function(t,n){void 0===t&&(t=1),void 0===n&&(n={}),void 0===n.bannedChars&&(n.bannedChars=[]);var r=\"\",i=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];n&&n.bannedChars&&(i=a(i,n.bannedChars));for(var o=0;o<t;o++)r+=e.random.arrayElement(i);return r},this.hexaDecimal=function(t){return e.datatype.hexaDecimal(t)},this}},{}],174:[function(e,t,n){var a=[\"video\",\"audio\",\"image\",\"text\",\"application\"],r=[\"application/pdf\",\"audio/mpeg\",\"audio/wav\",\"image/png\",\"image/jpeg\",\"image/gif\",\"video/mp4\",\"video/mpeg\",\"text/html\"];function i(e){if(Array.from)return Array.from(e);var t=[];return e.forEach((function(e){t.push(e)})),t}t.exports=function(e){this.fileName=function(){var t=e.random.words();return t=t.toLowerCase().replace(/\\W/g,\"_\")+\".\"+e.system.fileExt()},this.commonFileName=function(t){var n=e.random.words();return n=n.toLowerCase().replace(/\\W/g,\"_\"),n+=\".\"+(t||e.system.commonFileExt())},this.mimeType=function(){var t=new Set,n=new Set,a=e.definitions.system.mimeTypes;Object.keys(a).forEach((function(e){var r=e.split(\"/\")[0];t.add(r),a[e].extensions instanceof Array&&a[e].extensions.forEach((function(e){n.add(e)}))}));i(t),i(n);var r=Object.keys(e.definitions.system.mimeTypes);return e.random.arrayElement(r)},this.commonFileType=function(){return e.random.arrayElement(a)},this.commonFileExt=function(){return e.system.fileExt(e.random.arrayElement(r))},this.fileType=function(){var t=new Set,n=new Set,a=e.definitions.system.mimeTypes;Object.keys(a).forEach((function(e){var r=e.split(\"/\")[0];t.add(r),a[e].extensions instanceof Array&&a[e].extensions.forEach((function(e){n.add(e)}))}));var r=i(t);i(n),Object.keys(e.definitions.system.mimeTypes);return e.random.arrayElement(r)},this.fileExt=function(t){var n=new Set,a=new Set,r=e.definitions.system.mimeTypes;Object.keys(r).forEach((function(e){var t=e.split(\"/\")[0];n.add(t),r[e].extensions instanceof Array&&r[e].extensions.forEach((function(e){a.add(e)}))}));i(n);var o=i(a);Object.keys(e.definitions.system.mimeTypes);if(t){var s=e.definitions.system.mimeTypes;return e.random.arrayElement(s[t].extensions)}return e.random.arrayElement(o)},this.directoryPath=function(){var t=e.definitions.system.directoryPaths;return e.random.arrayElement(t)},this.filePath=function(){return e.fake(\"{{system.directoryPath}}/{{system.fileName}}.{{system.fileExt}}\")},this.semver=function(){return[e.datatype.number(9),e.datatype.number(9),e.datatype.number(9)].join(\".\")}}},{}],175:[function(e,t,n){t.exports=function(e){return this.recent=function(e){void 0===e&&(e=\"unix\");var t=new Date;switch(e){case\"abbr\":t=t.toLocaleTimeString();break;case\"wide\":t=t.toTimeString();break;case\"unix\":t=t.getTime()}return t},this}},{}],176:[function(e,t,n){var a=e(\"../vendor/unique\");t.exports=function(e){this.unique=function(e,t,n){return(n=n||{}).startTime=(new Date).getTime(),\"number\"!=typeof n.maxTime&&(n.maxTime=10),\"number\"!=typeof n.maxRetries&&(n.maxRetries=10),n.currentIterations=0,a.exec(e,t,n)}}},{\"../vendor/unique\":180}],177:[function(e,t,n){t.exports=function(e){var t=this,n=e.fake;t.vehicle=function(){return n(\"{{vehicle.manufacturer}} {{vehicle.model}}\")},t.vehicle.schema={description:\"Generates a random vehicle.\",sampleResults:[\"BMW Explorer\",\"Ford Camry\",\"Lamborghini Ranchero\"]},t.manufacturer=function(){return e.random.arrayElement(e.definitions.vehicle.manufacturer)},t.manufacturer.schema={description:\"Generates a manufacturer name.\",sampleResults:[\"Ford\",\"Jeep\",\"Tesla\"]},t.model=function(){return e.random.arrayElement(e.definitions.vehicle.model)},t.model.schema={description:\"Generates a vehicle model.\",sampleResults:[\"Explorer\",\"Camry\",\"Ranchero\"]},t.type=function(){return e.random.arrayElement(e.definitions.vehicle.type)},t.type.schema={description:\"Generates a vehicle type.\",sampleResults:[\"Coupe\",\"Convertable\",\"Sedan\",\"SUV\"]},t.fuel=function(){return e.random.arrayElement(e.definitions.vehicle.fuel)},t.fuel.schema={description:\"Generates a fuel type.\",sampleResults:[\"Electric\",\"Gasoline\",\"Diesel\"]},t.vin=function(){var t=[\"o\",\"i\",\"q\"];return(e.random.alphaNumeric(10,{bannedChars:t})+e.random.alpha({count:1,upcase:!0,bannedChars:t})+e.random.alphaNumeric(1,{bannedChars:t})+e.datatype.number({min:1e4,max:1e5})).toUpperCase()},t.vin.schema={description:\"Generates a valid VIN number.\",sampleResults:[\"YV1MH682762184654\",\"3C7WRMBJ2EG208836\"]},t.color=function(){return n(\"{{commerce.color}}\")},t.color.schema={description:\"Generates a color\",sampleResults:[\"red\",\"white\",\"black\"]},t.vrm=function(){return(e.random.alpha({count:2,upcase:!0})+e.datatype.number({min:0,max:9})+e.datatype.number({min:0,max:9})+e.random.alpha({count:3,upcase:!0})).toUpperCase()},t.vrm.schema={description:\"Generates a vehicle vrm\",sampleResults:[\"MF56UPA\",\"GL19AAQ\",\"SF20TTA\"]},t.bicycle=function(){return e.random.arrayElement(e.definitions.vehicle.bicycle_type)},t.bicycle.schema={description:\"Generates a type of bicycle\",sampleResults:[\"Adventure Road Bicycle\",\"City Bicycle\",\"Recumbent Bicycle\"]}}},{}],178:[function(e,t,n){var a=new(e(\"../lib\"))({locale:\"en\",localeFallback:\"en\"});a.locales.en=e(\"../lib/locales/en\"),t.exports=a},{\"../lib\":38,\"../lib/locales/en\":132}],179:[function(e,t,n){n.MersenneTwister19937=function(){var e,t,n,a;e=624,t=397,n=2147483648,a=2147483647;var r=new Array(e),i=625;function o(e){return e<0?(e^n)+n:e}function s(e,t){return o(e+t&4294967295)}function c(e,t){for(var n=0,a=0;a<32;++a)e>>>a&1&&(n=s(n,o(t<<a)));return n}this.init_genrand=function(t){for(r[0]=o(4294967295&t),i=1;i<e;i++)r[i]=s(c(1812433253,o(r[i-1]^r[i-1]>>>30)),i),r[i]=o(4294967295&r[i])},this.init_by_array=function(t,n){var a,i,u,l,p;for(this.init_genrand(19650218),a=1,i=0,u=e>n?e:n;u;u--)r[a]=s(s(o(r[a]^c(o(r[a-1]^r[a-1]>>>30),1664525)),t[i]),i),r[a]=o(4294967295&r[a]),i++,++a>=e&&(r[0]=r[623],a=1),i>=n&&(i=0);for(u=623;u;u--)r[a]=(l=o((dbg=r[a])^c(o(r[a-1]^r[a-1]>>>30),1566083941)))<(p=a)?o(4294967296-(p-l)&4294967295):l-p,r[a]=o(4294967295&r[a]),++a>=e&&(r[0]=r[623],a=1);r[0]=2147483648};var u=[0,2567483615];this.genrand_int32=function(){var s;if(i>=e){var c;for(625==i&&this.init_genrand(5489),c=0;c<227;c++)s=o(r[c]&n|r[c+1]&a),r[c]=o(r[c+t]^s>>>1^u[1&s]);for(;c<623;c++)s=o(r[c]&n|r[c+1]&a),r[c]=o(r[c+(t-e)]^s>>>1^u[1&s]);s=o(r[623]&n|r[0]&a),r[623]=o(r[396]^s>>>1^u[1&s]),i=0}return s=o((s=r[i++])^s>>>11),s=o(s^s<<7&2636928640),s=o(s^s<<15&4022730752),s=o(s^s>>>18)},this.genrand_int31=function(){return this.genrand_int32()>>>1},this.genrand_real1=function(){return this.genrand_int32()*(1/4294967295)},this.genrand_real2=function(){return this.genrand_int32()*(1/4294967296)},this.genrand_real3=function(){return(this.genrand_int32()+.5)*(1/4294967296)},this.genrand_res53=function(){return(67108864*(this.genrand_int32()>>>5)+(this.genrand_int32()>>>6))*(1/9007199254740992)}}},{}],180:[function(e,t,n){var a={},r={},i=[],o=function(e,t){return void 0===e[t]?-1:0};a.errorMessage=function(e,t,n){throw new Error(t+\" for uniqueness check \\n\\nMay not be able to generate any more unique values with current settings. \\nTry adjusting maxTime or maxRetries parameters for faker.unique()\")},a.exec=function(e,t,n){var s=(new Date).getTime();(n=n||{}).maxTime=n.maxTime||3,n.maxRetries=n.maxRetries||50,n.exclude=n.exclude||i,n.compare=n.compare||o,\"number\"!=typeof n.currentIterations&&(n.currentIterations=0),void 0===n.startTime&&(n.startTime=(new Date).getTime());var c=n.startTime;if(\"string\"==typeof n.exclude&&(n.exclude=[n.exclude]),n.currentIterations,s-c>=n.maxTime)return a.errorMessage(s,\"Exceeded maxTime:\"+n.maxTime,n);if(n.currentIterations>=n.maxRetries)return a.errorMessage(s,\"Exceeded maxRetries:\"+n.maxRetries,n);var u=e.apply(this,t);return-1===n.compare(r,u)&&-1===n.exclude.indexOf(u)?(r[u]=u,n.currentIterations=0,u):(n.currentIterations++,a.exec(e,t,n))},t.exports=a},{}],181:[function(e,t,n){n.generate=function(e){function t(n,a){if(n=n||0,\"number\"==typeof(a=a||100)&&\"number\"==typeof n)return e.datatype.number({min:n,max:a});if(\"[object Array]\"===Object.prototype.toString.call(n))return e.random.arrayElement(n);if(n&&\"object\"==typeof n)return function(e){var n,a,r=t(0,100)/100,i=0,o=0;for(n in e)if(e.hasOwnProperty(n)){if(o=e[n]+i,a=n,r>=i&&r<=o)break;i+=e[n]}return a}(n);throw new TypeError(\"Invalid arguments passed to rnd. (\"+(a?n+\", \"+a:n)+\")\")}function n(){return t([\"AB\",\"AF\",\"AN\",\"AR\",\"AS\",\"AZ\",\"BE\",\"BG\",\"BN\",\"BO\",\"BR\",\"BS\",\"CA\",\"CE\",\"CO\",\"CS\",\"CU\",\"CY\",\"DA\",\"DE\",\"EL\",\"EN\",\"EO\",\"ES\",\"ET\",\"EU\",\"FA\",\"FI\",\"FJ\",\"FO\",\"FR\",\"FY\",\"GA\",\"GD\",\"GL\",\"GV\",\"HE\",\"HI\",\"HR\",\"HT\",\"HU\",\"HY\",\"ID\",\"IS\",\"IT\",\"JA\",\"JV\",\"KA\",\"KG\",\"KO\",\"KU\",\"KW\",\"KY\",\"LA\",\"LB\",\"LI\",\"LN\",\"LT\",\"LV\",\"MG\",\"MK\",\"MN\",\"MO\",\"MS\",\"MT\",\"MY\",\"NB\",\"NE\",\"NL\",\"NN\",\"NO\",\"OC\",\"PL\",\"PT\",\"RM\",\"RO\",\"RU\",\"SC\",\"SE\",\"SK\",\"SL\",\"SO\",\"SQ\",\"SR\",\"SV\",\"SW\",\"TK\",\"TR\",\"TY\",\"UK\",\"UR\",\"UZ\",\"VI\",\"VO\",\"YI\",\"ZH\"])}function a(e){return t({lin:[\"i686\",\"x86_64\"],mac:{Intel:.48,PPC:.01,\"U; Intel\":.48,\"U; PPC\":.01},win:[\"\",\"WOW64\",\"Win64; x64\"]}[e])}var r=function(){return[t(1,4),t(0,9),t(1e4,99999),t(0,9)].join(\".\")},i=function(){return t(5,6)+\".\"+t(0,3)},o=function(){return t(7,11)},s=function(){return t(3,7)+\".\"+t(0,1)},c=function(e){return[10,t(5,10),t(0,9)].join(e||\".\")},u=function(){return[t(13,39),0,t(800,899),0].join(\".\")},l=function(){return\"2.9.\"+t(160,190)},p=function(){return t(10,12)+\".00\"},d=function(){return t(531,538)+\".\"+t(0,2)+\".\"+t(0,2)},f={firefox:function(e){var n=t(5,15)+function(e){for(var n=\"\",a=0;a<e;a++)n+=\".\"+t(0,9);return n}(2),r=\"Gecko/20100101 Firefox/\"+n,o=a(e);return\"Mozilla/5.0 \"+(\"win\"===e?\"(Windows NT \"+i()+(o?\"; \"+o:\"\"):\"mac\"===e?\"(Macintosh; \"+o+\" Mac OS X \"+c():\"(X11; Linux \"+o)+\"; rv:\"+n.slice(0,-2)+\") \"+r},iexplorer:function(){var e=o();return e>=11?\"Mozilla/5.0 (Windows NT 6.\"+t(1,3)+\"; Trident/7.0; \"+t([\"Touch; \",\"\"])+\"rv:11.0) like Gecko\":\"Mozilla/5.0 (compatible; MSIE \"+e+\".0; Windows NT \"+i()+\"; Trident/\"+s()+(1===t(0,1)?\"; .NET CLR \"+r():\"\")+\")\"},opera:function(e){var r=\" Presto/\"+l()+\" Version/\"+p()+\")\",o=\"win\"===e?\"(Windows NT \"+i()+\"; U; \"+n()+r:\"lin\"===e?\"(X11; Linux \"+a(e)+\"; U; \"+n()+r:\"(Macintosh; Intel Mac OS X \"+c()+\" U; \"+n()+\" Presto/\"+l()+\" Version/\"+p()+\")\";return\"Opera/\"+t(9,14)+\".\"+t(0,99)+\" \"+o},safari:function(e){var r=d(),o=t(4,7)+\".\"+t(0,1)+\".\"+t(0,10);return\"Mozilla/5.0 \"+(\"mac\"===e?\"(Macintosh; \"+a(\"mac\")+\" Mac OS X \"+c(\"_\")+\" rv:\"+t(2,6)+\".0; \"+n()+\") \":\"(Windows; U; Windows NT \"+i()+\")\")+\"AppleWebKit/\"+r+\" (KHTML, like Gecko) Version/\"+o+\" Safari/\"+r},chrome:function(e){var t=d();return\"Mozilla/5.0 \"+(\"mac\"===e?\"(Macintosh; \"+a(\"mac\")+\" Mac OS X \"+c(\"_\")+\") \":\"win\"===e?\"(Windows; U; Windows NT \"+i()+\")\":\"(X11; Linux \"+a(e))+\" AppleWebKit/\"+t+\" (KHTML, like Gecko) Chrome/\"+u()+\" Safari/\"+t}},h=function(){var e=t({chrome:.45132810566,iexplorer:.27477061836,firefox:.19384170608,safari:.06186781118,opera:.01574236955});return[e,t({chrome:{win:.89,mac:.09,lin:.02},firefox:{win:.83,mac:.16,lin:.01},opera:{win:.91,mac:.03,lin:.06},safari:{win:.04,mac:.96},iexplorer:[\"win\"]}[e])]}();return f[h[0]](h[1])}},{}],182:[function(e,t,n){\"use strict\";const a=e(\"punycode/\"),r=e(\"url-parse\"),i=e(\"./pubsuffix-psl\"),o=e(\"./store\").Store,s=e(\"./memstore\").MemoryCookieStore,c=e(\"./pathMatch\").pathMatch,u=e(\"./validators.js\"),l=e(\"./version\"),{fromCallback:p}=e(\"universalify\"),{getCustomInspectSymbol:d}=e(\"./utilHelper\"),f=/^[\\x21\\x23-\\x2B\\x2D-\\x3A\\x3C-\\x5B\\x5D-\\x7E]+$/,h=/[\\x00-\\x1F]/,m=[\"\\n\",\"\\r\",\"\\0\"],g=/[\\x20-\\x3A\\x3C-\\x7E]+/,y=/[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]/,v={jan:0,feb:1,mar:2,apr:3,may:4,jun:5,jul:6,aug:7,sep:8,oct:9,nov:10,dec:11},b=2147483647e3,x='Invalid sameSiteContext option for getCookies(); expected one of \"strict\", \"lax\", or \"none\"';function w(e){u.validate(u.isNonEmptyString(e),e);const t=String(e).toLowerCase();return\"none\"===t||\"lax\"===t||\"strict\"===t?t:null}const k=Object.freeze({SILENT:\"silent\",STRICT:\"strict\",DISABLED:\"unsafe-disabled\"}),_=/(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-f\\d]{1,4}:){7}(?:[a-f\\d]{1,4}|:)|(?:[a-f\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-f\\d]{1,4}|:)|(?:[a-f\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,2}|:)|(?:[a-f\\d]{1,4}:){4}(?:(?::[a-f\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,3}|:)|(?:[a-f\\d]{1,4}:){3}(?:(?::[a-f\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,4}|:)|(?:[a-f\\d]{1,4}:){2}(?:(?::[a-f\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,5}|:)|(?:[a-f\\d]{1,4}:){1}(?:(?::[a-f\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-f\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,7}|:)))$)/,j=\"\\n\\\\[?(?:\\n(?:[a-fA-F\\\\d]{1,4}:){7}(?:[a-fA-F\\\\d]{1,4}|:)|\\n(?:[a-fA-F\\\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|:[a-fA-F\\\\d]{1,4}|:)|\\n(?:[a-fA-F\\\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,2}|:)|\\n(?:[a-fA-F\\\\d]{1,4}:){4}(?:(?::[a-fA-F\\\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,3}|:)|\\n(?:[a-fA-F\\\\d]{1,4}:){3}(?:(?::[a-fA-F\\\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,4}|:)|\\n(?:[a-fA-F\\\\d]{1,4}:){2}(?:(?::[a-fA-F\\\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,5}|:)|\\n(?:[a-fA-F\\\\d]{1,4}:){1}(?:(?::[a-fA-F\\\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,6}|:)|\\n(?::(?:(?::[a-fA-F\\\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,7}|:))\\n)(?:%[0-9a-zA-Z]{1,})?\\\\]?\\n\".replace(/\\s*\\/\\/.*$/gm,\"\").replace(/\\n/g,\"\").trim(),S=new RegExp(`^${j}$`);function A(e,t,n,a){let r=0;for(;r<e.length;){const t=e.charCodeAt(r);if(t<=47||t>=58)break;r++}return r<t||r>n?null:a||r==e.length?parseInt(e.substr(0,r),10):null}function E(e){const t=e.split(\":\"),n=[0,0,0];if(3!==t.length)return null;for(let a=0;a<3;a++){const e=2==a,r=A(t[a],1,2,e);if(null===r)return null;n[a]=r}return n}function C(e){e=String(e).substr(0,3).toLowerCase();const t=v[e];return t>=0?t:null}function T(e){if(!e)return;const t=e.split(y);if(!t)return;let n=null,a=null,r=null,i=null,o=null,s=null;for(let c=0;c<t.length;c++){const e=t[c].trim();if(!e.length)continue;let u;null===r&&(u=E(e),u)?(n=u[0],a=u[1],r=u[2]):null!==i||(u=A(e,1,2,!0),null===u)?null!==o||(u=C(e),null===u)?null===s&&(u=A(e,2,4,!0),null!==u&&(s=u,s>=70&&s<=99?s+=1900:s>=0&&s<=69&&(s+=2e3))):o=u:i=u}return null===i||null===o||null===s||null===r||i<1||i>31||s<1601||n>23||a>59||r>59?void 0:new Date(Date.UTC(s,o,i,n,a,r))}function P(e){return u.validate(u.isDate(e),e),e.toUTCString()}function D(e){return null==e?null:(e=e.trim().replace(/^\\./,\"\"),S.test(e)&&(e=e.replace(\"[\",\"\").replace(\"]\",\"\")),a&&/[^\\u0001-\\u007f]/.test(e)&&(e=a.toASCII(e)),e.toLowerCase())}function O(e,t,n){if(null==e||null==t)return null;if(!1!==n&&(e=D(e),t=D(t)),e==t)return!0;const a=e.lastIndexOf(t);return!(a<=0)&&(e.length===t.length+a&&(\".\"===e.substr(a-1,1)&&!_.test(e)))}function M(e){if(!e||\"/\"!==e.substr(0,1))return\"/\";if(\"/\"===e)return e;const t=e.lastIndexOf(\"/\");return 0===t?\"/\":e.slice(0,t)}function N(e,t){e=function(e){if(u.isEmptyString(e))return e;for(let t=0;t<m.length;t++){const n=e.indexOf(m[t]);-1!==n&&(e=e.substr(0,n))}return e}(e),u.validate(u.isString(e),e);let n,a,r=e.indexOf(\"=\");if(t)0===r&&(r=(e=e.substr(1)).indexOf(\"=\"));else if(r<=0)return;if(r<=0?(n=\"\",a=e.trim()):(n=e.substr(0,r).trim(),a=e.substr(r+1).trim()),h.test(n)||h.test(a))return;const i=new q;return i.key=n,i.value=a,i}function B(e,t){if(t&&\"object\"==typeof t||(t={}),u.isEmptyString(e)||!u.isString(e))return null;const n=(e=e.trim()).indexOf(\";\"),a=N(-1===n?e:e.substr(0,n),!!t.loose);if(!a)return;if(-1===n)return a;const r=e.slice(n+1).trim();if(0===r.length)return a;const i=r.split(\";\");for(;i.length;){const e=i.shift().trim();if(0===e.length)continue;const t=e.indexOf(\"=\");let n,r;switch(-1===t?(n=e,r=null):(n=e.substr(0,t),r=e.substr(t+1)),n=n.trim().toLowerCase(),r&&(r=r.trim()),n){case\"expires\":if(r){const e=T(r);e&&(a.expires=e)}break;case\"max-age\":if(r&&/^-?[0-9]+$/.test(r)){const e=parseInt(r,10);a.setMaxAge(e)}break;case\"domain\":if(r){const e=r.trim().replace(/^\\./,\"\");e&&(a.domain=e.toLowerCase())}break;case\"path\":a.path=r&&\"/\"===r[0]?r:null;break;case\"secure\":a.secure=!0;break;case\"httponly\":a.httpOnly=!0;break;case\"samesite\":switch(r?r.toLowerCase():\"\"){case\"strict\":a.sameSite=\"strict\";break;case\"lax\":a.sameSite=\"lax\";break;case\"none\":a.sameSite=\"none\";break;default:a.sameSite=void 0}break;default:a.extensions=a.extensions||[],a.extensions.push(e)}}return a}function R(e){let t;try{t=JSON.parse(e)}catch(n){return n}return t}function L(e){if(!e||u.isEmptyString(e))return null;let t;if(\"string\"==typeof e){if(t=R(e),t instanceof Error)return null}else t=e;const n=new q;for(let a=0;a<q.serializableProperties.length;a++){const e=q.serializableProperties[a];void 0!==t[e]&&t[e]!==z[e]&&(\"expires\"===e||\"creation\"===e||\"lastAccessed\"===e?null===t[e]?n[e]=null:n[e]=\"Infinity\"==t[e]?\"Infinity\":new Date(t[e]):n[e]=t[e])}return n}function I(e,t){u.validate(u.isObject(e),e),u.validate(u.isObject(t),t);let n=0;const a=e.path?e.path.length:0;if(n=(t.path?t.path.length:0)-a,0!==n)return n;return n=(e.creation?e.creation.getTime():b)-(t.creation?t.creation.getTime():b),0!==n||(n=e.creationIndex-t.creationIndex),n}function F(e){if(e instanceof Object)return e;try{e=decodeURI(e)}catch(t){}return r(e)}const z={key:\"\",value:\"\",expires:\"Infinity\",maxAge:null,domain:null,path:null,secure:!1,httpOnly:!1,extensions:null,hostOnly:null,pathIsDefault:null,creation:null,lastAccessed:null,sameSite:void 0};class q{constructor(e={}){const t=d();t&&(this[t]=this.inspect),Object.assign(this,z,e),this.creation=this.creation||new Date,Object.defineProperty(this,\"creationIndex\",{configurable:!1,enumerable:!1,writable:!0,value:++q.cookiesCreated})}inspect(){const e=Date.now(),t=null!=this.hostOnly?this.hostOnly:\"?\",n=this.creation?e-this.creation.getTime()+\"ms\":\"?\",a=this.lastAccessed?e-this.lastAccessed.getTime()+\"ms\":\"?\";return`Cookie=\"${this.toString()}; hostOnly=${t}; aAge=${a}; cAge=${n}\"`}toJSON(){const e={};for(const t of q.serializableProperties)this[t]!==z[t]&&(\"expires\"===t||\"creation\"===t||\"lastAccessed\"===t?null===this[t]?e[t]=null:e[t]=\"Infinity\"==this[t]?\"Infinity\":this[t].toISOString():\"maxAge\"===t?null!==this[t]&&(e[t]=this[t]==1/0||this[t]==-1/0?this[t].toString():this[t]):this[t]!==z[t]&&(e[t]=this[t]));return e}clone(){return L(this.toJSON())}validate(){if(!f.test(this.value))return!1;if(!(this.expires==1/0||this.expires instanceof Date||T(this.expires)))return!1;if(null!=this.maxAge&&this.maxAge<=0)return!1;if(null!=this.path&&!g.test(this.path))return!1;const e=this.cdomain();if(e){if(e.match(/\\.$/))return!1;if(null==i.getPublicSuffix(e))return!1}return!0}setExpires(e){e instanceof Date?this.expires=e:this.expires=T(e)||\"Infinity\"}setMaxAge(e){this.maxAge=e===1/0||e===-1/0?e.toString():e}cookieString(){let e=this.value;return null==e&&(e=\"\"),\"\"===this.key?e:`${this.key}=${e}`}toString(){let e=this.cookieString();if(this.expires!=1/0&&(this.expires instanceof Date?e+=`; Expires=${P(this.expires)}`:e+=`; Expires=${this.expires}`),null!=this.maxAge&&this.maxAge!=1/0&&(e+=`; Max-Age=${this.maxAge}`),this.domain&&!this.hostOnly&&(e+=`; Domain=${this.domain}`),this.path&&(e+=`; Path=${this.path}`),this.secure&&(e+=\"; Secure\"),this.httpOnly&&(e+=\"; HttpOnly\"),this.sameSite&&\"none\"!==this.sameSite){const t=q.sameSiteCanonical[this.sameSite.toLowerCase()];e+=`; SameSite=${t||this.sameSite}`}return this.extensions&&this.extensions.forEach((t=>{e+=`; ${t}`})),e}TTL(e){if(null!=this.maxAge)return this.maxAge<=0?0:1e3*this.maxAge;let t=this.expires;return t!=1/0?(t instanceof Date||(t=T(t)||1/0),t==1/0?1/0:t.getTime()-(e||Date.now())):1/0}expiryTime(e){if(null!=this.maxAge){const t=e||this.creation||new Date,n=this.maxAge<=0?-1/0:1e3*this.maxAge;return t.getTime()+n}return this.expires==1/0?1/0:this.expires.getTime()}expiryDate(e){const t=this.expiryTime(e);return t==1/0?new Date(b):t==-1/0?new Date(0):new Date(t)}isPersistent(){return null!=this.maxAge||this.expires!=1/0}canonicalizedDomain(){return null==this.domain?null:D(this.domain)}cdomain(){return this.canonicalizedDomain()}}function H(e){if(null!=e){const t=e.toLowerCase();switch(t){case k.STRICT:case k.SILENT:case k.DISABLED:return t}}return k.SILENT}q.cookiesCreated=0,q.parse=B,q.fromJSON=L,q.serializableProperties=Object.keys(z),q.sameSiteLevel={strict:3,lax:2,none:1},q.sameSiteCanonical={strict:\"Strict\",lax:\"Lax\"};class U{constructor(e,t={rejectPublicSuffixes:!0}){\"boolean\"==typeof t&&(t={rejectPublicSuffixes:t}),u.validate(u.isObject(t),t),this.rejectPublicSuffixes=t.rejectPublicSuffixes,this.enableLooseMode=!!t.looseMode,this.allowSpecialUseDomain=\"boolean\"!=typeof t.allowSpecialUseDomain||t.allowSpecialUseDomain,this.store=e||new s,this.prefixSecurity=H(t.prefixSecurity),this._cloneSync=G(\"clone\"),this._importCookiesSync=G(\"_importCookies\"),this.getCookiesSync=G(\"getCookies\"),this.getCookieStringSync=G(\"getCookieString\"),this.getSetCookieStringsSync=G(\"getSetCookieStrings\"),this.removeAllCookiesSync=G(\"removeAllCookies\"),this.setCookieSync=G(\"setCookie\"),this.serializeSync=G(\"serialize\")}setCookie(e,t,n,a){let r;if(u.validate(u.isUrlStringOrObject(t),a,n),u.isFunction(t))return(a=t)(new Error(\"No URL was specified\"));const o=F(t);if(u.isFunction(n)&&(a=n,n={}),u.validate(u.isFunction(a),a),!u.isNonEmptyString(e)&&!u.isObject(e)&&e instanceof String&&0==e.length)return a(null);const s=D(o.hostname),c=n.loose||this.enableLooseMode;let l=null;if(n.sameSiteContext&&(l=w(n.sameSiteContext),!l))return a(new Error(x));if(\"string\"==typeof e||e instanceof String){if(!(e=q.parse(e,{loose:c})))return r=new Error(\"Cookie failed to parse\"),a(n.ignoreError?null:r)}else if(!(e instanceof q))return r=new Error(\"First argument to setCookie must be a Cookie object or string\"),a(n.ignoreError?null:r);const p=n.now||new Date;if(this.rejectPublicSuffixes&&e.domain){if(null==i.getPublicSuffix(e.cdomain(),{allowSpecialUseDomain:this.allowSpecialUseDomain,ignoreError:n.ignoreError})&&!S.test(e.domain))return r=new Error(\"Cookie has domain set to a public suffix\"),a(n.ignoreError?null:r)}if(e.domain){if(!O(s,e.cdomain(),!1))return r=new Error(`Cookie not in this host's domain. Cookie:${e.cdomain()} Request:${s}`),a(n.ignoreError?null:r);null==e.hostOnly&&(e.hostOnly=!1)}else e.hostOnly=!0,e.domain=s;if(e.path&&\"/\"===e.path[0]||(e.path=M(o.pathname),e.pathIsDefault=!0),!1===n.http&&e.httpOnly)return r=new Error(\"Cookie is HttpOnly and this isn't an HTTP API\"),a(n.ignoreError?null:r);if(\"none\"!==e.sameSite&&void 0!==e.sameSite&&l&&\"none\"===l)return r=new Error(\"Cookie is SameSite but this is a cross-origin request\"),a(n.ignoreError?null:r);const d=this.prefixSecurity===k.SILENT;if(!(this.prefixSecurity===k.DISABLED)){let t,r=!1;if(!function(e){return u.validate(u.isObject(e),e),!e.key.startsWith(\"__Secure-\")||e.secure}(e)?(r=!0,t=\"Cookie has __Secure prefix but Secure attribute is not set\"):function(e){return u.validate(u.isObject(e)),!e.key.startsWith(\"__Host-\")||e.secure&&e.hostOnly&&null!=e.path&&\"/\"===e.path}(e)||(r=!0,t=\"Cookie has __Host prefix but either Secure or HostOnly attribute is not set or Path is not '/'\"),r)return a(n.ignoreError||d?null:new Error(t))}const f=this.store;f.updateCookie||(f.updateCookie=function(e,t,n){this.putCookie(t,n)}),f.findCookie(e.domain,e.path,e.key,(function(t,r){if(t)return a(t);const i=function(t){if(t)return a(t);a(null,e)};if(r){if(!1===n.http&&r.httpOnly)return t=new Error(\"old Cookie is HttpOnly and this isn't an HTTP API\"),a(n.ignoreError?null:t);e.creation=r.creation,e.creationIndex=r.creationIndex,e.lastAccessed=p,f.updateCookie(r,e,i)}else e.creation=e.lastAccessed=p,f.putCookie(e,i)}))}getCookies(e,t,n){u.validate(u.isUrlStringOrObject(e),n,e);const a=F(e);u.isFunction(t)&&(n=t,t={}),u.validate(u.isObject(t),n,t),u.validate(u.isFunction(n),n);const r=D(a.hostname),i=a.pathname||\"/\";let o=t.secure;null!=o||!a.protocol||\"https:\"!=a.protocol&&\"wss:\"!=a.protocol||(o=!0),null==o&&function(e){return!(!e||\"string\"!=typeof e)&&(!(\"localhost\"!==e&&!e.endsWith(\".localhost\"))||\"::1\"===e||!!_.test(e)&&e.startsWith(\"127.\"))}(r)&&(o=!0);let s=0;if(t.sameSiteContext){const e=w(t.sameSiteContext);if(s=q.sameSiteLevel[e],!s)return n(new Error(x))}let l=t.http;null==l&&(l=!0);const p=t.now||Date.now(),d=!1!==t.expire,f=!!t.allPaths,h=this.store;function m(e){if(e.hostOnly){if(e.domain!=r)return!1}else if(!O(r,e.domain,!1))return!1;if(!f&&!c(i,e.path))return!1;if(e.secure&&!o)return!1;if(e.httpOnly&&!l)return!1;if(s){if(q.sameSiteLevel[e.sameSite||\"none\"]>s)return!1}return!(d&&e.expiryTime()<=p)||(h.removeCookie(e.domain,e.path,e.key,(()=>{})),!1)}h.findCookies(r,f?null:i,this.allowSpecialUseDomain,((e,a)=>{if(e)return n(e);a=a.filter(m),!1!==t.sort&&(a=a.sort(I));const r=new Date;for(const t of a)t.lastAccessed=r;n(null,a)}))}getCookieString(...e){const t=e.pop();u.validate(u.isFunction(t),t);e.push((function(e,n){e?t(e):t(null,n.sort(I).map((e=>e.cookieString())).join(\"; \"))})),this.getCookies.apply(this,e)}getSetCookieStrings(...e){const t=e.pop();u.validate(u.isFunction(t),t);e.push((function(e,n){e?t(e):t(null,n.map((e=>e.toString())))})),this.getCookies.apply(this,e)}serialize(e){u.validate(u.isFunction(e),e);let t=this.store.constructor.name;u.isObject(t)&&(t=null);const n={version:`tough-cookie@${l}`,storeType:t,rejectPublicSuffixes:!!this.rejectPublicSuffixes,enableLooseMode:!!this.enableLooseMode,allowSpecialUseDomain:!!this.allowSpecialUseDomain,prefixSecurity:H(this.prefixSecurity),cookies:[]};if(!this.store.getAllCookies||\"function\"!=typeof this.store.getAllCookies)return e(new Error(\"store does not support getAllCookies and cannot be serialized\"));this.store.getAllCookies(((t,a)=>t?e(t):(n.cookies=a.map((e=>(delete(e=e instanceof q?e.toJSON():e).creationIndex,e))),e(null,n))))}toJSON(){return this.serializeSync()}_importCookies(e,t){let n=e.cookies;if(!n||!Array.isArray(n))return t(new Error(\"serialized jar has no cookies array\"));n=n.slice();const a=e=>{if(e)return t(e);if(!n.length)return t(e,this);let r;try{r=L(n.shift())}catch(i){return t(i)}if(null===r)return a(null);this.store.putCookie(r,a)};a()}clone(e,t){1===arguments.length&&(t=e,e=null),this.serialize(((n,a)=>{if(n)return t(n);U.deserialize(a,e,t)}))}cloneSync(e){if(0===arguments.length)return this._cloneSync();if(!e.synchronous)throw new Error(\"CookieJar clone destination store is not synchronous; use async API instead.\");return this._cloneSync(e)}removeAllCookies(e){u.validate(u.isFunction(e),e);const t=this.store;if(\"function\"==typeof t.removeAllCookies&&t.removeAllCookies!==o.prototype.removeAllCookies)return t.removeAllCookies(e);t.getAllCookies(((n,a)=>{if(n)return e(n);if(0===a.length)return e(null);let r=0;const i=[];function o(t){if(t&&i.push(t),r++,r===a.length)return e(i.length?i[0]:null)}a.forEach((e=>{t.removeCookie(e.domain,e.path,e.key,o)}))}))}static deserialize(e,t,n){let a;if(3!==arguments.length&&(n=t,t=null),u.validate(u.isFunction(n),n),\"string\"==typeof e){if(a=R(e),a instanceof Error)return n(a)}else a=e;const r=new U(t,{rejectPublicSuffixes:a.rejectPublicSuffixes,looseMode:a.enableLooseMode,allowSpecialUseDomain:a.allowSpecialUseDomain,prefixSecurity:a.prefixSecurity});r._importCookies(a,(e=>{if(e)return n(e);n(null,r)}))}static deserializeSync(e,t){const n=\"string\"==typeof e?JSON.parse(e):e,a=new U(t,{rejectPublicSuffixes:n.rejectPublicSuffixes,looseMode:n.enableLooseMode});if(!a.store.synchronous)throw new Error(\"CookieJar store is not synchronous; use async API instead.\");return a._importCookiesSync(n),a}}function G(e){return function(...t){if(!this.store.synchronous)throw new Error(\"CookieJar store is not synchronous; use async API instead.\");let n,a;if(this[e](...t,((e,t)=>{n=e,a=t})),n)throw n;return a}}U.fromJSON=U.deserializeSync,[\"_importCookies\",\"clone\",\"getCookies\",\"getCookieString\",\"getSetCookieStrings\",\"removeAllCookies\",\"serialize\",\"setCookie\"].forEach((e=>{U.prototype[e]=p(U.prototype[e])})),U.deserialize=p(U.deserialize),n.version=l,n.CookieJar=U,n.Cookie=q,n.Store=o,n.MemoryCookieStore=s,n.parseDate=T,n.formatDate=P,n.parse=B,n.fromJSON=L,n.domainMatch=O,n.defaultPath=M,n.pathMatch=c,n.getPublicSuffix=i.getPublicSuffix,n.cookieCompare=I,n.permuteDomain=e(\"./permuteDomain\").permuteDomain,n.permutePath=function(e){if(u.validate(u.isString(e)),\"/\"===e)return[\"/\"];const t=[e];for(;e.length>1;){const n=e.lastIndexOf(\"/\");if(0===n)break;e=e.substr(0,n),t.push(e)}return t.push(\"/\"),t},n.canonicalDomain=D,n.PrefixSecurityEnum=k,n.ParameterError=u.ParameterError},{\"./memstore\":183,\"./pathMatch\":184,\"./permuteDomain\":185,\"./pubsuffix-psl\":186,\"./store\":187,\"./utilHelper\":188,\"./validators.js\":189,\"./version\":190,\"punycode/\":491,universalify:191,\"url-parse\":567}],183:[function(e,t,n){\"use strict\";const{fromCallback:a}=e(\"universalify\"),r=e(\"./store\").Store,i=e(\"./permuteDomain\").permuteDomain,o=e(\"./pathMatch\").pathMatch,{getCustomInspectSymbol:s,getUtilInspect:c}=e(\"./utilHelper\");class u extends r{constructor(){super(),this.synchronous=!0,this.idx=Object.create(null);const e=s();e&&(this[e]=this.inspect)}inspect(){return`{ idx: ${{inspect:c(l)}.inspect(this.idx,!1,2)} }`}findCookie(e,t,n,a){return this.idx[e]&&this.idx[e][t]?a(null,this.idx[e][t][n]||null):a(null,void 0)}findCookies(e,t,n,a){const r=[];if(\"function\"==typeof n&&(a=n,n=!0),!e)return a(null,[]);let s;s=t?function(e){Object.keys(e).forEach((n=>{if(o(t,n)){const t=e[n];for(const e in t)r.push(t[e])}}))}:function(e){for(const t in e){const n=e[t];for(const e in n)r.push(n[e])}};const c=i(e,n)||[e],u=this.idx;c.forEach((e=>{const t=u[e];t&&s(t)})),a(null,r)}putCookie(e,t){this.idx[e.domain]||(this.idx[e.domain]=Object.create(null)),this.idx[e.domain][e.path]||(this.idx[e.domain][e.path]=Object.create(null)),this.idx[e.domain][e.path][e.key]=e,t(null)}updateCookie(e,t,n){this.putCookie(t,n)}removeCookie(e,t,n,a){this.idx[e]&&this.idx[e][t]&&this.idx[e][t][n]&&delete this.idx[e][t][n],a(null)}removeCookies(e,t,n){return this.idx[e]&&(t?delete this.idx[e][t]:delete this.idx[e]),n(null)}removeAllCookies(e){return this.idx=Object.create(null),e(null)}getAllCookies(e){const t=[],n=this.idx;Object.keys(n).forEach((e=>{Object.keys(n[e]).forEach((a=>{Object.keys(n[e][a]).forEach((r=>{null!==r&&t.push(n[e][a][r])}))}))})),t.sort(((e,t)=>(e.creationIndex||0)-(t.creationIndex||0))),e(null,t)}}function l(e){const t=Object.keys(e);if(0===t.length)return\"[Object: null prototype] {}\";let n=\"[Object: null prototype] {\\n\";return Object.keys(e).forEach(((a,r)=>{n+=function(e,t){const n=\"  \";let a=`${n}'${e}': [Object: null prototype] {\\n`;return Object.keys(t).forEach(((e,n,r)=>{a+=function(e,t){const n=\"    \";let a=`${n}'${e}': [Object: null prototype] {\\n`;return Object.keys(t).forEach(((e,n,r)=>{const i=t[e];a+=`      ${e}: ${i.inspect()}`,n<r.length-1&&(a+=\",\"),a+=\"\\n\"})),a+=`${n}}`,a}(e,t[e]),n<r.length-1&&(a+=\",\"),a+=\"\\n\"})),a+=`${n}}`,a}(a,e[a]),r<t.length-1&&(n+=\",\"),n+=\"\\n\"})),n+=\"}\",n}[\"findCookie\",\"findCookies\",\"putCookie\",\"updateCookie\",\"removeCookie\",\"removeCookies\",\"removeAllCookies\",\"getAllCookies\"].forEach((e=>{u.prototype[e]=a(u.prototype[e])})),n.MemoryCookieStore=u,n.inspectFallback=l},{\"./pathMatch\":184,\"./permuteDomain\":185,\"./store\":187,\"./utilHelper\":188,universalify:191}],184:[function(e,t,n){\"use strict\";n.pathMatch=function(e,t){if(t===e)return!0;if(0===e.indexOf(t)){if(\"/\"===t.substr(-1))return!0;if(\"/\"===e.substr(t.length,1))return!0}return!1}},{}],185:[function(e,t,n){\"use strict\";const a=e(\"./pubsuffix-psl\");n.permuteDomain=function(e,t){const n=a.getPublicSuffix(e,{allowSpecialUseDomain:t});if(!n)return null;if(n==e)return[e];\".\"==e.slice(-1)&&(e=e.slice(0,-1));const r=e.slice(0,-(n.length+1)).split(\".\").reverse();let i=n;const o=[i];for(;r.length;)i=`${r.shift()}.${i}`,o.push(i);return o}},{\"./pubsuffix-psl\":186}],186:[function(e,t,n){\"use strict\";const a=e(\"psl\"),r=[\"local\",\"example\",\"invalid\",\"localhost\",\"test\"],i=[\"localhost\",\"invalid\"];n.getPublicSuffix=function(e,t={}){const n=e.split(\".\"),o=n[n.length-1],s=!!t.allowSpecialUseDomain,c=!!t.ignoreError;if(s&&r.includes(o)){if(n.length>1){return`${n[n.length-2]}.${o}`}if(i.includes(o))return`${o}`}if(!c&&!s&&r.includes(o))throw new Error(`Cookie has domain set to the public suffix \"${o}\" which is a special use domain. To allow this, configure your CookieJar with {allowSpecialUseDomain:true, rejectPublicSuffixes: false}.`);return a.get(e)}},{psl:490}],187:[function(e,t,n){\"use strict\";n.Store=class{constructor(){this.synchronous=!1}findCookie(e,t,n,a){throw new Error(\"findCookie is not implemented\")}findCookies(e,t,n,a){throw new Error(\"findCookies is not implemented\")}putCookie(e,t){throw new Error(\"putCookie is not implemented\")}updateCookie(e,t,n){throw new Error(\"updateCookie is not implemented\")}removeCookie(e,t,n,a){throw new Error(\"removeCookie is not implemented\")}removeCookies(e,t,n){throw new Error(\"removeCookies is not implemented\")}removeAllCookies(e){throw new Error(\"removeAllCookies is not implemented\")}getAllCookies(e){throw new Error(\"getAllCookies is not implemented (therefore jar cannot be serialized)\")}}},{}],188:[function(e,t,n){function a(){try{return e(\"util\")}catch(t){return null}}function r(){return Symbol.for(\"nodejs.util.inspect.custom\")}n.getUtilInspect=function(e,t={}){const n=(t.requireUtil||a)();return function(t,a,r){return n?n.inspect(t,a,r):e(t)}},n.getCustomInspectSymbol=function(e={}){return(e.lookupCustomInspectSymbol||r)()||function(e){const t=(e.requireUtil||a)();return t?t.inspect.custom:null}(e)}},{util:\"util\"}],189:[function(e,t,n){\"use strict\";function a(e){return\"function\"==typeof e}function r(e){return i(e)&&\"\"!==e}function i(e){return\"string\"==typeof e||e instanceof String}function o(e){return\"[object Object]\"===toString.call(e)}function s(e,t){try{return e instanceof t}catch(n){return!1}}class c extends Error{constructor(...e){super(...e)}}n.ParameterError=c,n.isFunction=a,n.isNonEmptyString=r,n.isDate=function(e){return s(e,Date)&&function(e){return\"number\"==typeof e&&e%1==0}(e.getTime())},n.isEmptyString=function(e){return\"\"===e||e instanceof String&&\"\"===e.toString()},n.isString=i,n.isObject=o,n.isUrlStringOrObject=function(e){return r(e)||o(e)||s(e,URL)},n.validate=function(e,t,n){if(a(t)||(n=t,t=null),o(n)||(n={Error:\"Failed Check\"}),!e){if(!t)throw new c(n);t(new c(n))}}},{}],190:[function(e,t,n){t.exports=\"4.1.3-postman.1\"},{}],191:[function(e,t,n){\"use strict\";n.fromCallback=function(e){return Object.defineProperty((function(){if(\"function\"!=typeof arguments[arguments.length-1])return new Promise(((t,n)=>{arguments[arguments.length]=(e,a)=>{if(e)return n(e);t(a)},arguments.length++,e.apply(this,arguments)}));e.apply(this,arguments)}),\"name\",{value:e.name})},n.fromPromise=function(e){return Object.defineProperty((function(){const t=arguments[arguments.length-1];if(\"function\"!=typeof t)return e.apply(this,arguments);delete arguments[arguments.length-1],arguments.length--,e.apply(this,arguments).then((e=>t(null,e)),t)}),\"name\",{value:e.name})}},{}],192:[function(e,t,n){\"use strict\";var a=t.exports=function(){this._cache={}};a.prototype.put=function(e,t){this._cache[e]=t},a.prototype.get=function(e){return this._cache[e]},a.prototype.del=function(e){delete this._cache[e]},a.prototype.clear=function(){this._cache={}}},{}],193:[function(e,t,n){\"use strict\";var a=e(\"./error_classes\").MissingRef;t.exports=function e(t,n,r){var i=this;if(\"function\"!=typeof this._opts.loadSchema)throw new Error(\"options.loadSchema should be a function\");\"function\"==typeof n&&(r=n,n=void 0);var o=s(t).then((function(){var e=i._addSchema(t,void 0,n);return e.validate||c(e)}));r&&o.then((function(e){r(null,e)}),r);return o;function s(t){var n=t.$schema;return n&&!i.getSchema(n)?e.call(i,{$ref:n},!0):Promise.resolve()}function c(e){try{return i._compile(e)}catch(t){if(t instanceof a)return function(t){var a=t.missingSchema;if(u(a))throw new Error(\"Schema \"+a+\" is loaded but \"+t.missingRef+\" cannot be resolved\");var r=i._loadingSchemas[a];r||(r=i._loadingSchemas[a]=i._opts.loadSchema(a)).then(o,o);return r.then((function(e){if(!u(a))return s(e).then((function(){u(a)||i.addSchema(e,a,void 0,n)}))})).then((function(){return c(e)}));function o(){delete i._loadingSchemas[a]}function u(e){return i._refs[e]||i._schemas[e]}}(t);throw t}}}},{\"./error_classes\":194}],194:[function(e,t,n){\"use strict\";var a=e(\"./resolve\");function r(e,t,n){this.message=n||r.message(e,t),this.missingRef=a.url(e,t),this.missingSchema=a.normalizeId(a.fullPath(this.missingRef))}function i(e){return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}t.exports={Validation:i((function(e){this.message=\"validation failed\",this.errors=e,this.ajv=this.validation=!0})),MissingRef:i(r)},r.message=function(e,t){return\"can't resolve reference \"+t+\" from id \"+e}},{\"./resolve\":197}],195:[function(e,t,n){\"use strict\";var a=e(\"./util\"),r=/^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/,i=[0,31,28,31,30,31,30,31,31,30,31,30,31],o=/^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d(?::?\\d\\d)?)?$/i,s=/^(?=.{1,253}\\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\\.?$/i,c=/^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,u=/^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i,l=/^(?:(?:http[s\\u017F]?|ftp):\\/\\/)(?:(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+(?::(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?@)?(?:(?!10(?:\\.[0-9]{1,3}){3})(?!127(?:\\.[0-9]{1,3}){3})(?!169\\.254(?:\\.[0-9]{1,3}){2})(?!192\\.168(?:\\.[0-9]{1,3}){2})(?!172\\.(?:1[6-9]|2[0-9]|3[01])(?:\\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)(?:\\.(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)*(?:\\.(?:(?:[KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\\/(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?$/i,p=/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,d=/^(?:\\/(?:[^~/]|~0|~1)*)*$/,f=/^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,h=/^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/;function m(e){return e=\"full\"==e?\"full\":\"fast\",a.copy(m[e])}function g(e){var t=e.match(r);if(!t)return!1;var n=+t[1],a=+t[2],o=+t[3];return a>=1&&a<=12&&o>=1&&o<=(2==a&&function(e){return e%4==0&&(e%100!=0||e%400==0)}(n)?29:i[a])}function y(e,t){var n=e.match(o);if(!n)return!1;var a=n[1],r=n[2],i=n[3],s=n[5];return(a<=23&&r<=59&&i<=59||23==a&&59==r&&60==i)&&(!t||s)}t.exports=m,m.fast={date:/^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/,time:/^(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)?$/i,\"date-time\":/^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s](?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)$/i,uri:/^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/)?[^\\s]*$/i,\"uri-reference\":/^(?:(?:[a-z][a-z0-9+\\-.]*:)?\\/?\\/)?(?:[^\\\\\\s#][^\\s#]*)?(?:#[^\\\\\\s]*)?$/i,\"uri-template\":u,url:l,email:/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,hostname:s,ipv4:/^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,ipv6:/^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,regex:w,uuid:p,\"json-pointer\":d,\"json-pointer-uri-fragment\":f,\"relative-json-pointer\":h},m.full={date:g,time:y,\"date-time\":function(e){var t=e.split(v);return 2==t.length&&g(t[0])&&y(t[1],!0)},uri:function(e){return b.test(e)&&c.test(e)},\"uri-reference\":/^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'\"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,\"uri-template\":u,url:l,email:/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,hostname:s,ipv4:/^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,ipv6:/^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,regex:w,uuid:p,\"json-pointer\":d,\"json-pointer-uri-fragment\":f,\"relative-json-pointer\":h};var v=/t|\\s/i;var b=/\\/|:/;var x=/[^\\\\]\\\\Z/;function w(e){if(x.test(e))return!1;try{return new RegExp(e),!0}catch(t){return!1}}},{\"./util\":201}],196:[function(e,t,n){\"use strict\";var a=e(\"./resolve\"),r=e(\"./util\"),i=e(\"./error_classes\"),o=e(\"fast-json-stable-stringify\"),s=e(\"../dotjs/validate\"),c=r.ucs2length,u=e(\"fast-deep-equal\"),l=i.Validation;function p(e,t,n){var a=f.call(this,e,t,n);return a>=0?{index:a,compiling:!0}:(a=this._compilations.length,this._compilations[a]={schema:e,root:t,baseId:n},{index:a,compiling:!1})}function d(e,t,n){var a=f.call(this,e,t,n);a>=0&&this._compilations.splice(a,1)}function f(e,t,n){for(var a=0;a<this._compilations.length;a++){var r=this._compilations[a];if(r.schema==e&&r.root==t&&r.baseId==n)return a}return-1}function h(e,t){return\"var pattern\"+e+\" = new RegExp(\"+r.toQuotedString(t[e])+\");\"}function m(e){return\"var default\"+e+\" = defaults[\"+e+\"];\"}function g(e,t){return void 0===t[e]?\"\":\"var refVal\"+e+\" = refVal[\"+e+\"];\"}function y(e){return\"var customRule\"+e+\" = customRules[\"+e+\"];\"}function v(e,t){if(!e.length)return\"\";for(var n=\"\",a=0;a<e.length;a++)n+=t(a,e);return n}t.exports=function e(t,n,f,b){var x=this,w=this._opts,k=[void 0],_={},j=[],S={},A=[],E={},C=[];n=n||{schema:t,refVal:k,refs:_};var T=p.call(this,t,n,b),P=this._compilations[T.index];if(T.compiling)return P.callValidate=function e(){var t=P.validate,n=t.apply(this,arguments);return e.errors=t.errors,n};var D=this._formats,O=this.RULES;try{var M=B(t,n,f,b);P.validate=M;var N=P.callValidate;return N&&(N.schema=M.schema,N.errors=null,N.refs=M.refs,N.refVal=M.refVal,N.root=M.root,N.$async=M.$async,w.sourceCode&&(N.source=M.source)),M}finally{d.call(this,t,n,b)}function B(t,o,p,d){var f=!o||o&&o.schema==t;if(o.schema!=n.schema)return e.call(x,t,o,p,d);var b,S=!0===t.$async,E=s({isTop:!0,schema:t,isRoot:f,baseId:d,root:o,schemaPath:\"\",errSchemaPath:\"#\",errorPath:'\"\"',MissingRefError:i.MissingRef,RULES:O,validate:s,util:r,resolve:a,resolveRef:R,usePattern:F,useDefault:z,useCustomRule:q,opts:w,formats:D,logger:x.logger,self:x});E=v(k,g)+v(j,h)+v(A,m)+v(C,y)+E,w.processCode&&(E=w.processCode(E,t));try{b=new Function(\"self\",\"RULES\",\"formats\",\"root\",\"refVal\",\"defaults\",\"customRules\",\"equal\",\"ucs2length\",\"ValidationError\",E)(x,O,D,n,k,A,C,u,c,l),k[0]=b}catch(T){throw x.logger.error(\"Error compiling schema, function code:\",E),T}return b.schema=t,b.errors=null,b.refs=_,b.refVal=k,b.root=f?b:o,S&&(b.$async=!0),!0===w.sourceCode&&(b.source={code:E,patterns:j,defaults:A}),b}function R(t,r,i){r=a.url(t,r);var o,s,c=_[r];if(void 0!==c)return I(o=k[c],s=\"refVal[\"+c+\"]\");if(!i&&n.refs){var u=n.refs[r];if(void 0!==u)return I(o=n.refVal[u],s=L(r,o))}s=L(r);var l=a.call(x,B,n,r);if(void 0===l){var p=f&&f[r];p&&(l=a.inlineRef(p,w.inlineRefs)?p:e.call(x,p,n,f,t))}if(void 0!==l)return function(e,t){var n=_[e];k[n]=t}(r,l),I(l,s);!function(e){delete _[e]}(r)}function L(e,t){var n=k.length;return k[n]=t,_[e]=n,\"refVal\"+n}function I(e,t){return\"object\"==typeof e||\"boolean\"==typeof e?{code:t,schema:e,inline:!0}:{code:t,$async:e&&!!e.$async}}function F(e){var t=S[e];return void 0===t&&(t=S[e]=j.length,j[t]=e),\"pattern\"+t}function z(e){switch(typeof e){case\"boolean\":case\"number\":return\"\"+e;case\"string\":return r.toQuotedString(e);case\"object\":if(null===e)return\"null\";var t=o(e),n=E[t];return void 0===n&&(n=E[t]=A.length,A[n]=e),\"default\"+n}}function q(e,t,n,a){if(!1!==x._opts.validateSchema){var r=e.definition.dependencies;if(r&&!r.every((function(e){return Object.prototype.hasOwnProperty.call(n,e)})))throw new Error(\"parent schema must have all required keywords: \"+r.join(\",\"));var i=e.definition.validateSchema;if(i)if(!i(t)){var o=\"keyword schema is invalid: \"+x.errorsText(i.errors);if(\"log\"!=x._opts.validateSchema)throw new Error(o);x.logger.error(o)}}var s,c=e.definition.compile,u=e.definition.inline,l=e.definition.macro;if(c)s=c.call(x,t,n,a);else if(l)s=l.call(x,t,n,a),!1!==w.validateSchema&&x.validateSchema(s,!0);else if(u)s=u.call(x,a,e.keyword,t,n);else if(!(s=e.definition.validate))return;if(void 0===s)throw new Error('custom keyword \"'+e.keyword+'\"failed to compile');var p=C.length;return C[p]=s,{code:\"customRule\"+p,validate:s}}}},{\"../dotjs/validate\":229,\"./error_classes\":194,\"./resolve\":197,\"./util\":201,\"fast-deep-equal\":360,\"fast-json-stable-stringify\":361}],197:[function(e,t,n){\"use strict\";var a=e(\"uri-js\"),r=e(\"fast-deep-equal\"),i=e(\"./util\"),o=e(\"./schema_obj\"),s=e(\"json-schema-traverse\");function c(e,t,n){var a=this._refs[n];if(\"string\"==typeof a){if(!this._refs[a])return c.call(this,e,t,a);a=this._refs[a]}if((a=a||this._schemas[n])instanceof o)return h(a.schema,this._opts.inlineRefs)?a.schema:a.validate||this._compile(a);var r,i,s,l=u.call(this,t,n);return l&&(r=l.schema,t=l.root,s=l.baseId),r instanceof o?i=r.validate||e.call(this,r.schema,t,void 0,s):void 0!==r&&(i=h(r,this._opts.inlineRefs)?r:e.call(this,r,t,void 0,s)),i}function u(e,t){var n=a.parse(t),r=v(n),i=y(this._getId(e.schema));if(0===Object.keys(e.schema).length||r!==i){var s=x(r),c=this._refs[s];if(\"string\"==typeof c)return l.call(this,e,c,n);if(c instanceof o)c.validate||this._compile(c),e=c;else{if(!((c=this._schemas[s])instanceof o))return;if(c.validate||this._compile(c),s==x(t))return{schema:c,root:e,baseId:i};e=c}if(!e.schema)return;i=y(this._getId(e.schema))}return d.call(this,n,i,e.schema,e)}function l(e,t,n){var a=u.call(this,e,t);if(a){var r=a.schema,i=a.baseId;e=a.root;var o=this._getId(r);return o&&(i=w(i,o)),d.call(this,n,i,r,e)}}t.exports=c,c.normalizeId=x,c.fullPath=y,c.url=w,c.ids=function(e){var t=x(this._getId(e)),n={\"\":t},o={\"\":y(t,!1)},c={},u=this;return s(e,{allKeys:!0},(function(e,t,s,l,p,d,f){if(\"\"!==t){var h=u._getId(e),m=n[l],g=o[l]+\"/\"+p;if(void 0!==f&&(g+=\"/\"+(\"number\"==typeof f?f:i.escapeFragment(f))),\"string\"==typeof h){h=m=x(m?a.resolve(m,h):h);var y=u._refs[h];if(\"string\"==typeof y&&(y=u._refs[y]),y&&y.schema){if(!r(e,y.schema))throw new Error('id \"'+h+'\" resolves to more than one schema')}else if(h!=x(g))if(\"#\"==h[0]){if(c[h]&&!r(e,c[h]))throw new Error('id \"'+h+'\" resolves to more than one schema');c[h]=e}else u._refs[h]=g}n[t]=m,o[t]=g}})),c},c.inlineRef=h,c.schema=u;var p=i.toHash([\"properties\",\"patternProperties\",\"enum\",\"dependencies\",\"definitions\"]);function d(e,t,n,a){if(e.fragment=e.fragment||\"\",\"/\"==e.fragment.slice(0,1)){for(var r=e.fragment.split(\"/\"),o=1;o<r.length;o++){var s=r[o];if(s){if(void 0===(n=n[s=i.unescapeFragment(s)]))break;var c;if(!p[s]&&((c=this._getId(n))&&(t=w(t,c)),n.$ref)){var l=w(t,n.$ref),d=u.call(this,a,l);d&&(n=d.schema,a=d.root,t=d.baseId)}}}return void 0!==n&&n!==a.schema?{schema:n,root:a,baseId:t}:void 0}}var f=i.toHash([\"type\",\"format\",\"pattern\",\"maxLength\",\"minLength\",\"maxProperties\",\"minProperties\",\"maxItems\",\"minItems\",\"maximum\",\"minimum\",\"uniqueItems\",\"multipleOf\",\"required\",\"enum\"]);function h(e,t){return!1!==t&&(void 0===t||!0===t?m(e):t?g(e)<=t:void 0)}function m(e){var t;if(Array.isArray(e)){for(var n=0;n<e.length;n++)if(\"object\"==typeof(t=e[n])&&!m(t))return!1}else for(var a in e){if(\"$ref\"==a)return!1;if(\"object\"==typeof(t=e[a])&&!m(t))return!1}return!0}function g(e){var t,n=0;if(Array.isArray(e)){for(var a=0;a<e.length;a++)if(\"object\"==typeof(t=e[a])&&(n+=g(t)),n==1/0)return 1/0}else for(var r in e){if(\"$ref\"==r)return 1/0;if(f[r])n++;else if(\"object\"==typeof(t=e[r])&&(n+=g(t)+1),n==1/0)return 1/0}return n}function y(e,t){return!1!==t&&(e=x(e)),v(a.parse(e))}function v(e){return a.serialize(e).split(\"#\")[0]+\"#\"}var b=/#\\/?$/;function x(e){return e?e.replace(b,\"\"):\"\"}function w(e,t){return t=x(t),a.resolve(e,t)}},{\"./schema_obj\":199,\"./util\":201,\"fast-deep-equal\":360,\"json-schema-traverse\":393,\"uri-js\":566}],198:[function(e,t,n){\"use strict\";var a=e(\"../dotjs\"),r=e(\"./util\").toHash;t.exports=function(){var e=[{type:\"number\",rules:[{maximum:[\"exclusiveMaximum\"]},{minimum:[\"exclusiveMinimum\"]},\"multipleOf\",\"format\"]},{type:\"string\",rules:[\"maxLength\",\"minLength\",\"pattern\",\"format\"]},{type:\"array\",rules:[\"maxItems\",\"minItems\",\"items\",\"contains\",\"uniqueItems\"]},{type:\"object\",rules:[\"maxProperties\",\"minProperties\",\"required\",\"dependencies\",\"propertyNames\",{properties:[\"additionalProperties\",\"patternProperties\"]}]},{rules:[\"$ref\",\"const\",\"enum\",\"not\",\"anyOf\",\"oneOf\",\"allOf\",\"if\"]}],t=[\"type\",\"$comment\"];return e.all=r(t),e.types=r([\"number\",\"integer\",\"string\",\"array\",\"object\",\"boolean\",\"null\"]),e.forEach((function(n){n.rules=n.rules.map((function(n){var r;if(\"object\"==typeof n){var i=Object.keys(n)[0];r=n[i],n=i,r.forEach((function(n){t.push(n),e.all[n]=!0}))}return t.push(n),e.all[n]={keyword:n,code:a[n],implements:r}})),e.all.$comment={keyword:\"$comment\",code:a.$comment},n.type&&(e.types[n.type]=n)})),e.keywords=r(t.concat([\"$schema\",\"$id\",\"id\",\"$data\",\"$async\",\"title\",\"description\",\"default\",\"definitions\",\"examples\",\"readOnly\",\"writeOnly\",\"contentMediaType\",\"contentEncoding\",\"additionalItems\",\"then\",\"else\"])),e.custom={},e}},{\"../dotjs\":218,\"./util\":201}],199:[function(e,t,n){\"use strict\";var a=e(\"./util\");t.exports=function(e){a.copy(e,this)}},{\"./util\":201}],200:[function(e,t,n){\"use strict\";t.exports=function(e){for(var t,n=0,a=e.length,r=0;r<a;)n++,(t=e.charCodeAt(r++))>=55296&&t<=56319&&r<a&&56320==(64512&(t=e.charCodeAt(r)))&&r++;return n}},{}],201:[function(e,t,n){\"use strict\";function a(e,t,n,a){var r=a?\" !== \":\" === \",i=a?\" || \":\" && \",o=a?\"!\":\"\",s=a?\"\":\"!\";switch(e){case\"null\":return t+r+\"null\";case\"array\":return o+\"Array.isArray(\"+t+\")\";case\"object\":return\"(\"+o+t+i+\"typeof \"+t+r+'\"object\"'+i+s+\"Array.isArray(\"+t+\"))\";case\"integer\":return\"(typeof \"+t+r+'\"number\"'+i+s+\"(\"+t+\" % 1)\"+i+t+r+t+(n?i+o+\"isFinite(\"+t+\")\":\"\")+\")\";case\"number\":return\"(typeof \"+t+r+'\"'+e+'\"'+(n?i+o+\"isFinite(\"+t+\")\":\"\")+\")\";default:return\"typeof \"+t+r+'\"'+e+'\"'}}t.exports={copy:function(e,t){for(var n in t=t||{},e)t[n]=e[n];return t},checkDataType:a,checkDataTypes:function(e,t,n){if(1===e.length)return a(e[0],t,n,!0);var r=\"\",o=i(e);for(var s in o.array&&o.object&&(r=o.null?\"(\":\"(!\"+t+\" || \",r+=\"typeof \"+t+' !== \"object\")',delete o.null,delete o.array,delete o.object),o.number&&delete o.integer,o)r+=(r?\" && \":\"\")+a(s,t,n,!0);return r},coerceToTypes:function(e,t){if(Array.isArray(t)){for(var n=[],a=0;a<t.length;a++){var i=t[a];(r[i]||\"array\"===e&&\"array\"===i)&&(n[n.length]=i)}if(n.length)return n}else{if(r[t])return[t];if(\"array\"===e&&\"array\"===t)return[\"array\"]}},toHash:i,getProperty:c,escapeQuotes:u,equal:e(\"fast-deep-equal\"),ucs2length:e(\"./ucs2length\"),varOccurences:function(e,t){t+=\"[^0-9]\";var n=e.match(new RegExp(t,\"g\"));return n?n.length:0},varReplace:function(e,t,n){return t+=\"([^0-9])\",n=n.replace(/\\$/g,\"$$$$\"),e.replace(new RegExp(t,\"g\"),n+\"$1\")},schemaHasRules:function(e,t){if(\"boolean\"==typeof e)return!e;for(var n in e)if(t[n])return!0},schemaHasRulesExcept:function(e,t,n){if(\"boolean\"==typeof e)return!e&&\"not\"!=n;for(var a in e)if(a!=n&&t[a])return!0},schemaUnknownRules:function(e,t){if(\"boolean\"==typeof e)return;for(var n in e)if(!t[n])return n},toQuotedString:l,getPathExpr:function(e,t,n,a){return f(e,n?\"'/' + \"+t+(a?\"\":\".replace(/~/g, '~0').replace(/\\\\//g, '~1')\"):a?\"'[' + \"+t+\" + ']'\":\"'[\\\\'' + \"+t+\" + '\\\\']'\")},getPath:function(e,t,n){var a=l(n?\"/\"+h(t):c(t));return f(e,a)},getData:function(e,t,n){var a,r,i,o;if(\"\"===e)return\"rootData\";if(\"/\"==e[0]){if(!p.test(e))throw new Error(\"Invalid JSON-pointer: \"+e);r=e,i=\"rootData\"}else{if(!(o=e.match(d)))throw new Error(\"Invalid JSON-pointer: \"+e);if(a=+o[1],\"#\"==(r=o[2])){if(a>=t)throw new Error(\"Cannot access property/index \"+a+\" levels up, current level is \"+t);return n[t-a]}if(a>t)throw new Error(\"Cannot access data \"+a+\" levels up, current level is \"+t);if(i=\"data\"+(t-a||\"\"),!r)return i}for(var s=i,u=r.split(\"/\"),l=0;l<u.length;l++){var f=u[l];f&&(s+=\" && \"+(i+=c(m(f))))}return s},unescapeFragment:function(e){return m(decodeURIComponent(e))},unescapeJsonPointer:m,escapeFragment:function(e){return encodeURIComponent(h(e))},escapeJsonPointer:h};var r=i([\"string\",\"number\",\"integer\",\"boolean\",\"null\"]);function i(e){for(var t={},n=0;n<e.length;n++)t[e[n]]=!0;return t}var o=/^[a-z$_][a-z$_0-9]*$/i,s=/'|\\\\/g;function c(e){return\"number\"==typeof e?\"[\"+e+\"]\":o.test(e)?\".\"+e:\"['\"+u(e)+\"']\"}function u(e){return e.replace(s,\"\\\\$&\").replace(/\\n/g,\"\\\\n\").replace(/\\r/g,\"\\\\r\").replace(/\\f/g,\"\\\\f\").replace(/\\t/g,\"\\\\t\")}function l(e){return\"'\"+u(e)+\"'\"}var p=/^\\/(?:[^~]|~0|~1)*$/,d=/^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/;function f(e,t){return'\"\"'==e?t:(e+\" + \"+t).replace(/([^\\\\])' \\+ '/g,\"$1\")}function h(e){return e.replace(/~/g,\"~0\").replace(/\\//g,\"~1\")}function m(e){return e.replace(/~1/g,\"/\").replace(/~0/g,\"~\")}},{\"./ucs2length\":200,\"fast-deep-equal\":360}],202:[function(e,t,n){\"use strict\";var a=[\"multipleOf\",\"maximum\",\"exclusiveMaximum\",\"minimum\",\"exclusiveMinimum\",\"maxLength\",\"minLength\",\"pattern\",\"additionalItems\",\"maxItems\",\"minItems\",\"uniqueItems\",\"maxProperties\",\"minProperties\",\"required\",\"additionalProperties\",\"enum\",\"format\",\"const\"];t.exports=function(e,t){for(var n=0;n<t.length;n++){e=JSON.parse(JSON.stringify(e));var r,i=t[n].split(\"/\"),o=e;for(r=1;r<i.length;r++)o=o[i[r]];for(r=0;r<a.length;r++){var s=a[r],c=o[s];c&&(o[s]={anyOf:[c,{$ref:\"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\"}]})}}return e}},{}],203:[function(e,t,n){\"use strict\";var a=e(\"./refs/json-schema-draft-07.json\");t.exports={$id:\"https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js\",definitions:{simpleTypes:a.definitions.simpleTypes},type:\"object\",dependencies:{schema:[\"validate\"],$data:[\"validate\"],statements:[\"inline\"],valid:{not:{required:[\"macro\"]}}},properties:{type:a.properties.type,schema:{type:\"boolean\"},statements:{type:\"boolean\"},dependencies:{type:\"array\",items:{type:\"string\"}},metaSchema:{type:\"object\"},modifying:{type:\"boolean\"},valid:{type:\"boolean\"},$data:{type:\"boolean\"},async:{type:\"boolean\"},errors:{anyOf:[{type:\"boolean\"},{const:\"full\"}]}}}},{\"./refs/json-schema-draft-07.json\":232}],204:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a,r=\" \",i=e.level,o=e.dataLevel,s=e.schema[t],c=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+\"/\"+t,l=!e.opts.allErrors,p=\"data\"+(o||\"\"),d=e.opts.$data&&s&&s.$data;d?(r+=\" var schema\"+i+\" = \"+e.util.getData(s.$data,o,e.dataPathArr)+\"; \",a=\"schema\"+i):a=s;var f=\"maximum\"==t,h=f?\"exclusiveMaximum\":\"exclusiveMinimum\",m=e.schema[h],g=e.opts.$data&&m&&m.$data,y=f?\"<\":\">\",v=f?\">\":\"<\",b=void 0;if(!d&&\"number\"!=typeof s&&void 0!==s)throw new Error(t+\" must be number\");if(!g&&void 0!==m&&\"number\"!=typeof m&&\"boolean\"!=typeof m)throw new Error(h+\" must be number or boolean\");if(g){var x=e.util.getData(m.$data,o,e.dataPathArr),w=\"exclusive\"+i,k=\"exclType\"+i,_=\"exclIsNumber\"+i,j=\"' + \"+(E=\"op\"+i)+\" + '\";r+=\" var schemaExcl\"+i+\" = \"+x+\"; \",r+=\" var \"+w+\"; var \"+k+\" = typeof \"+(x=\"schemaExcl\"+i)+\"; if (\"+k+\" != 'boolean' && \"+k+\" != 'undefined' && \"+k+\" != 'number') { \";var S;b=h;(S=S||[]).push(r),r=\"\",!1!==e.createErrors?(r+=\" { keyword: '\"+(b||\"_exclusiveLimit\")+\"' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(u)+\" , params: {} \",!1!==e.opts.messages&&(r+=\" , message: '\"+h+\" should be boolean' \"),e.opts.verbose&&(r+=\" , schema: validate.schema\"+c+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+p+\" \"),r+=\" } \"):r+=\" {} \";var A=r;r=S.pop(),!e.compositeRule&&l?e.async?r+=\" throw new ValidationError([\"+A+\"]); \":r+=\" validate.errors = [\"+A+\"]; return false; \":r+=\" var err = \"+A+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",r+=\" } else if ( \",d&&(r+=\" (\"+a+\" !== undefined && typeof \"+a+\" != 'number') || \"),r+=\" \"+k+\" == 'number' ? ( (\"+w+\" = \"+a+\" === undefined || \"+x+\" \"+y+\"= \"+a+\") ? \"+p+\" \"+v+\"= \"+x+\" : \"+p+\" \"+v+\" \"+a+\" ) : ( (\"+w+\" = \"+x+\" === true) ? \"+p+\" \"+v+\"= \"+a+\" : \"+p+\" \"+v+\" \"+a+\" ) || \"+p+\" !== \"+p+\") { var op\"+i+\" = \"+w+\" ? '\"+y+\"' : '\"+y+\"='; \",void 0===s&&(b=h,u=e.errSchemaPath+\"/\"+h,a=x,d=g)}else{j=y;if((_=\"number\"==typeof m)&&d){var E=\"'\"+j+\"'\";r+=\" if ( \",d&&(r+=\" (\"+a+\" !== undefined && typeof \"+a+\" != 'number') || \"),r+=\" ( \"+a+\" === undefined || \"+m+\" \"+y+\"= \"+a+\" ? \"+p+\" \"+v+\"= \"+m+\" : \"+p+\" \"+v+\" \"+a+\" ) || \"+p+\" !== \"+p+\") { \"}else{_&&void 0===s?(w=!0,b=h,u=e.errSchemaPath+\"/\"+h,a=m,v+=\"=\"):(_&&(a=Math[f?\"min\":\"max\"](m,s)),m===(!_||a)?(w=!0,b=h,u=e.errSchemaPath+\"/\"+h,v+=\"=\"):(w=!1,j+=\"=\"));E=\"'\"+j+\"'\";r+=\" if ( \",d&&(r+=\" (\"+a+\" !== undefined && typeof \"+a+\" != 'number') || \"),r+=\" \"+p+\" \"+v+\" \"+a+\" || \"+p+\" !== \"+p+\") { \"}}b=b||t,(S=S||[]).push(r),r=\"\",!1!==e.createErrors?(r+=\" { keyword: '\"+(b||\"_limit\")+\"' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(u)+\" , params: { comparison: \"+E+\", limit: \"+a+\", exclusive: \"+w+\" } \",!1!==e.opts.messages&&(r+=\" , message: 'should be \"+j+\" \",r+=d?\"' + \"+a:a+\"'\"),e.opts.verbose&&(r+=\" , schema:  \",r+=d?\"validate.schema\"+c:\"\"+s,r+=\"         , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+p+\" \"),r+=\" } \"):r+=\" {} \";A=r;return r=S.pop(),!e.compositeRule&&l?e.async?r+=\" throw new ValidationError([\"+A+\"]); \":r+=\" validate.errors = [\"+A+\"]; return false; \":r+=\" var err = \"+A+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",r+=\" } \",l&&(r+=\" else { \"),r}},{}],205:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a,r=\" \",i=e.level,o=e.dataLevel,s=e.schema[t],c=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+\"/\"+t,l=!e.opts.allErrors,p=\"data\"+(o||\"\"),d=e.opts.$data&&s&&s.$data;if(d?(r+=\" var schema\"+i+\" = \"+e.util.getData(s.$data,o,e.dataPathArr)+\"; \",a=\"schema\"+i):a=s,!d&&\"number\"!=typeof s)throw new Error(t+\" must be number\");r+=\"if ( \",d&&(r+=\" (\"+a+\" !== undefined && typeof \"+a+\" != 'number') || \"),r+=\" \"+p+\".length \"+(\"maxItems\"==t?\">\":\"<\")+\" \"+a+\") { \";var f=t,h=h||[];h.push(r),r=\"\",!1!==e.createErrors?(r+=\" { keyword: '\"+(f||\"_limitItems\")+\"' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(u)+\" , params: { limit: \"+a+\" } \",!1!==e.opts.messages&&(r+=\" , message: 'should NOT have \",r+=\"maxItems\"==t?\"more\":\"fewer\",r+=\" than \",r+=d?\"' + \"+a+\" + '\":\"\"+s,r+=\" items' \"),e.opts.verbose&&(r+=\" , schema:  \",r+=d?\"validate.schema\"+c:\"\"+s,r+=\"         , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+p+\" \"),r+=\" } \"):r+=\" {} \";var m=r;return r=h.pop(),!e.compositeRule&&l?e.async?r+=\" throw new ValidationError([\"+m+\"]); \":r+=\" validate.errors = [\"+m+\"]; return false; \":r+=\" var err = \"+m+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",r+=\"} \",l&&(r+=\" else { \"),r}},{}],206:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a,r=\" \",i=e.level,o=e.dataLevel,s=e.schema[t],c=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+\"/\"+t,l=!e.opts.allErrors,p=\"data\"+(o||\"\"),d=e.opts.$data&&s&&s.$data;if(d?(r+=\" var schema\"+i+\" = \"+e.util.getData(s.$data,o,e.dataPathArr)+\"; \",a=\"schema\"+i):a=s,!d&&\"number\"!=typeof s)throw new Error(t+\" must be number\");var f=\"maxLength\"==t?\">\":\"<\";r+=\"if ( \",d&&(r+=\" (\"+a+\" !== undefined && typeof \"+a+\" != 'number') || \"),!1===e.opts.unicode?r+=\" \"+p+\".length \":r+=\" ucs2length(\"+p+\") \",r+=\" \"+f+\" \"+a+\") { \";var h=t,m=m||[];m.push(r),r=\"\",!1!==e.createErrors?(r+=\" { keyword: '\"+(h||\"_limitLength\")+\"' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(u)+\" , params: { limit: \"+a+\" } \",!1!==e.opts.messages&&(r+=\" , message: 'should NOT be \",r+=\"maxLength\"==t?\"longer\":\"shorter\",r+=\" than \",r+=d?\"' + \"+a+\" + '\":\"\"+s,r+=\" characters' \"),e.opts.verbose&&(r+=\" , schema:  \",r+=d?\"validate.schema\"+c:\"\"+s,r+=\"         , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+p+\" \"),r+=\" } \"):r+=\" {} \";var g=r;return r=m.pop(),!e.compositeRule&&l?e.async?r+=\" throw new ValidationError([\"+g+\"]); \":r+=\" validate.errors = [\"+g+\"]; return false; \":r+=\" var err = \"+g+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",r+=\"} \",l&&(r+=\" else { \"),r}},{}],207:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a,r=\" \",i=e.level,o=e.dataLevel,s=e.schema[t],c=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+\"/\"+t,l=!e.opts.allErrors,p=\"data\"+(o||\"\"),d=e.opts.$data&&s&&s.$data;if(d?(r+=\" var schema\"+i+\" = \"+e.util.getData(s.$data,o,e.dataPathArr)+\"; \",a=\"schema\"+i):a=s,!d&&\"number\"!=typeof s)throw new Error(t+\" must be number\");r+=\"if ( \",d&&(r+=\" (\"+a+\" !== undefined && typeof \"+a+\" != 'number') || \"),r+=\" Object.keys(\"+p+\").length \"+(\"maxProperties\"==t?\">\":\"<\")+\" \"+a+\") { \";var f=t,h=h||[];h.push(r),r=\"\",!1!==e.createErrors?(r+=\" { keyword: '\"+(f||\"_limitProperties\")+\"' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(u)+\" , params: { limit: \"+a+\" } \",!1!==e.opts.messages&&(r+=\" , message: 'should NOT have \",r+=\"maxProperties\"==t?\"more\":\"fewer\",r+=\" than \",r+=d?\"' + \"+a+\" + '\":\"\"+s,r+=\" properties' \"),e.opts.verbose&&(r+=\" , schema:  \",r+=d?\"validate.schema\"+c:\"\"+s,r+=\"         , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+p+\" \"),r+=\" } \"):r+=\" {} \";var m=r;return r=h.pop(),!e.compositeRule&&l?e.async?r+=\" throw new ValidationError([\"+m+\"]); \":r+=\" validate.errors = [\"+m+\"]; return false; \":r+=\" var err = \"+m+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",r+=\"} \",l&&(r+=\" else { \"),r}},{}],208:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.schema[t],i=e.schemaPath+e.util.getProperty(t),o=e.errSchemaPath+\"/\"+t,s=!e.opts.allErrors,c=e.util.copy(e),u=\"\";c.level++;var l=\"valid\"+c.level,p=c.baseId,d=!0,f=r;if(f)for(var h,m=-1,g=f.length-1;m<g;)h=f[m+=1],(e.opts.strictKeywords?\"object\"==typeof h&&Object.keys(h).length>0||!1===h:e.util.schemaHasRules(h,e.RULES.all))&&(d=!1,c.schema=h,c.schemaPath=i+\"[\"+m+\"]\",c.errSchemaPath=o+\"/\"+m,a+=\"  \"+e.validate(c)+\" \",c.baseId=p,s&&(a+=\" if (\"+l+\") { \",u+=\"}\"));return s&&(a+=d?\" if (true) { \":\" \"+u.slice(0,-1)+\" \"),a}},{}],209:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"valid\"+r,d=\"errs__\"+r,f=e.util.copy(e),h=\"\";f.level++;var m=\"valid\"+f.level,g=o.every((function(t){return e.opts.strictKeywords?\"object\"==typeof t&&Object.keys(t).length>0||!1===t:e.util.schemaHasRules(t,e.RULES.all)}));if(g){var y=f.baseId;a+=\" var \"+d+\" = errors; var \"+p+\" = false;  \";var v=e.compositeRule;e.compositeRule=f.compositeRule=!0;var b=o;if(b)for(var x,w=-1,k=b.length-1;w<k;)x=b[w+=1],f.schema=x,f.schemaPath=s+\"[\"+w+\"]\",f.errSchemaPath=c+\"/\"+w,a+=\"  \"+e.validate(f)+\" \",f.baseId=y,a+=\" \"+p+\" = \"+p+\" || \"+m+\"; if (!\"+p+\") { \",h+=\"}\";e.compositeRule=f.compositeRule=v,a+=\" \"+h+\" if (!\"+p+\") {   var err =   \",!1!==e.createErrors?(a+=\" { keyword: 'anyOf' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: {} \",!1!==e.opts.messages&&(a+=\" , message: 'should match some schema in anyOf' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \",a+=\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",!e.compositeRule&&u&&(e.async?a+=\" throw new ValidationError(vErrors); \":a+=\" validate.errors = vErrors; return false; \"),a+=\" } else {  errors = \"+d+\"; if (vErrors !== null) { if (\"+d+\") vErrors.length = \"+d+\"; else vErrors = null; } \",e.opts.allErrors&&(a+=\" } \")}else u&&(a+=\" if (true) { \");return a}},{}],210:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.schema[t],i=e.errSchemaPath+\"/\"+t,o=(e.opts.allErrors,e.util.toQuotedString(r));return!0===e.opts.$comment?a+=\" console.log(\"+o+\");\":\"function\"==typeof e.opts.$comment&&(a+=\" self._opts.$comment(\"+o+\", \"+e.util.toQuotedString(i)+\", validate.root.schema);\"),a}},{}],211:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"valid\"+r,d=e.opts.$data&&o&&o.$data;d&&(a+=\" var schema\"+r+\" = \"+e.util.getData(o.$data,i,e.dataPathArr)+\"; \"),d||(a+=\" var schema\"+r+\" = validate.schema\"+s+\";\"),a+=\"var \"+p+\" = equal(\"+l+\", schema\"+r+\"); if (!\"+p+\") {   \";var f=f||[];f.push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'const' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { allowedValue: schema\"+r+\" } \",!1!==e.opts.messages&&(a+=\" , message: 'should be equal to constant' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \";var h=a;return a=f.pop(),!e.compositeRule&&u?e.async?a+=\" throw new ValidationError([\"+h+\"]); \":a+=\" validate.errors = [\"+h+\"]; return false; \":a+=\" var err = \"+h+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",a+=\" }\",u&&(a+=\" else { \"),a}},{}],212:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"valid\"+r,d=\"errs__\"+r,f=e.util.copy(e);f.level++;var h=\"valid\"+f.level,m=\"i\"+r,g=f.dataLevel=e.dataLevel+1,y=\"data\"+g,v=e.baseId,b=e.opts.strictKeywords?\"object\"==typeof o&&Object.keys(o).length>0||!1===o:e.util.schemaHasRules(o,e.RULES.all);if(a+=\"var \"+d+\" = errors;var \"+p+\";\",b){var x=e.compositeRule;e.compositeRule=f.compositeRule=!0,f.schema=o,f.schemaPath=s,f.errSchemaPath=c,a+=\" var \"+h+\" = false; for (var \"+m+\" = 0; \"+m+\" < \"+l+\".length; \"+m+\"++) { \",f.errorPath=e.util.getPathExpr(e.errorPath,m,e.opts.jsonPointers,!0);var w=l+\"[\"+m+\"]\";f.dataPathArr[g]=m;var k=e.validate(f);f.baseId=v,e.util.varOccurences(k,y)<2?a+=\" \"+e.util.varReplace(k,y,w)+\" \":a+=\" var \"+y+\" = \"+w+\"; \"+k+\" \",a+=\" if (\"+h+\") break; }  \",e.compositeRule=f.compositeRule=x,a+=\"  if (!\"+h+\") {\"}else a+=\" if (\"+l+\".length == 0) {\";var _=_||[];_.push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'contains' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: {} \",!1!==e.opts.messages&&(a+=\" , message: 'should contain a valid item' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \";var j=a;return a=_.pop(),!e.compositeRule&&u?e.async?a+=\" throw new ValidationError([\"+j+\"]); \":a+=\" validate.errors = [\"+j+\"]; return false; \":a+=\" var err = \"+j+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",a+=\" } else { \",b&&(a+=\"  errors = \"+d+\"; if (vErrors !== null) { if (\"+d+\") vErrors.length = \"+d+\"; else vErrors = null; } \"),e.opts.allErrors&&(a+=\" } \"),a}},{}],213:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a,r,i=\" \",o=e.level,s=e.dataLevel,c=e.schema[t],u=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+\"/\"+t,p=!e.opts.allErrors,d=\"data\"+(s||\"\"),f=\"valid\"+o,h=\"errs__\"+o,m=e.opts.$data&&c&&c.$data;m?(i+=\" var schema\"+o+\" = \"+e.util.getData(c.$data,s,e.dataPathArr)+\"; \",r=\"schema\"+o):r=c;var g,y,v,b,x,w=this,k=\"definition\"+o,_=w.definition,j=\"\";if(m&&_.$data){x=\"keywordValidate\"+o;var S=_.validateSchema;i+=\" var \"+k+\" = RULES.custom['\"+t+\"'].definition; var \"+x+\" = \"+k+\".validate;\"}else{if(!(b=e.useCustomRule(w,c,e.schema,e)))return;r=\"validate.schema\"+u,x=b.code,g=_.compile,y=_.inline,v=_.macro}var A=x+\".errors\",E=\"i\"+o,C=\"ruleErr\"+o,T=_.async;if(T&&!e.async)throw new Error(\"async keyword in sync schema\");if(y||v||(i+=A+\" = null;\"),i+=\"var \"+h+\" = errors;var \"+f+\";\",m&&_.$data&&(j+=\"}\",i+=\" if (\"+r+\" === undefined) { \"+f+\" = true; } else { \",S&&(j+=\"}\",i+=\" \"+f+\" = \"+k+\".validateSchema(\"+r+\"); if (\"+f+\") { \")),y)_.statements?i+=\" \"+b.validate+\" \":i+=\" \"+f+\" = \"+b.validate+\"; \";else if(v){var P=e.util.copy(e);j=\"\";P.level++;var D=\"valid\"+P.level;P.schema=b.validate,P.schemaPath=\"\";var O=e.compositeRule;e.compositeRule=P.compositeRule=!0;var M=e.validate(P).replace(/validate\\.schema/g,x);e.compositeRule=P.compositeRule=O,i+=\" \"+M}else{(L=L||[]).push(i),i=\"\",i+=\"  \"+x+\".call( \",e.opts.passContext?i+=\"this\":i+=\"self\",g||!1===_.schema?i+=\" , \"+d+\" \":i+=\" , \"+r+\" , \"+d+\" , validate.schema\"+e.schemaPath+\" \",i+=\" , (dataPath || '')\",'\"\"'!=e.errorPath&&(i+=\" + \"+e.errorPath);var N=s?\"data\"+(s-1||\"\"):\"parentData\",B=s?e.dataPathArr[s]:\"parentDataProperty\",R=i+=\" , \"+N+\" , \"+B+\" , rootData )  \";i=L.pop(),!1===_.errors?(i+=\" \"+f+\" = \",T&&(i+=\"await \"),i+=R+\"; \"):i+=T?\" var \"+(A=\"customErrors\"+o)+\" = null; try { \"+f+\" = await \"+R+\"; } catch (e) { \"+f+\" = false; if (e instanceof ValidationError) \"+A+\" = e.errors; else throw e; } \":\" \"+A+\" = null; \"+f+\" = \"+R+\"; \"}if(_.modifying&&(i+=\" if (\"+N+\") \"+d+\" = \"+N+\"[\"+B+\"];\"),i+=\"\"+j,_.valid)p&&(i+=\" if (true) { \");else{var L;i+=\" if ( \",void 0===_.valid?(i+=\" !\",i+=v?\"\"+D:\"\"+f):i+=\" \"+!_.valid+\" \",i+=\") { \",a=w.keyword,(L=L||[]).push(i),i=\"\",(L=L||[]).push(i),i=\"\",!1!==e.createErrors?(i+=\" { keyword: '\"+(a||\"custom\")+\"' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(l)+\" , params: { keyword: '\"+w.keyword+\"' } \",!1!==e.opts.messages&&(i+=\" , message: 'should pass \\\"\"+w.keyword+\"\\\" keyword validation' \"),e.opts.verbose&&(i+=\" , schema: validate.schema\"+u+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+d+\" \"),i+=\" } \"):i+=\" {} \";var I=i;i=L.pop(),!e.compositeRule&&p?e.async?i+=\" throw new ValidationError([\"+I+\"]); \":i+=\" validate.errors = [\"+I+\"]; return false; \":i+=\" var err = \"+I+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";var F=i;i=L.pop(),y?_.errors?\"full\"!=_.errors&&(i+=\"  for (var \"+E+\"=\"+h+\"; \"+E+\"<errors; \"+E+\"++) { var \"+C+\" = vErrors[\"+E+\"]; if (\"+C+\".dataPath === undefined) \"+C+\".dataPath = (dataPath || '') + \"+e.errorPath+\"; if (\"+C+\".schemaPath === undefined) { \"+C+'.schemaPath = \"'+l+'\"; } ',e.opts.verbose&&(i+=\" \"+C+\".schema = \"+r+\"; \"+C+\".data = \"+d+\"; \"),i+=\" } \"):!1===_.errors?i+=\" \"+F+\" \":(i+=\" if (\"+h+\" == errors) { \"+F+\" } else {  for (var \"+E+\"=\"+h+\"; \"+E+\"<errors; \"+E+\"++) { var \"+C+\" = vErrors[\"+E+\"]; if (\"+C+\".dataPath === undefined) \"+C+\".dataPath = (dataPath || '') + \"+e.errorPath+\"; if (\"+C+\".schemaPath === undefined) { \"+C+'.schemaPath = \"'+l+'\"; } ',e.opts.verbose&&(i+=\" \"+C+\".schema = \"+r+\"; \"+C+\".data = \"+d+\"; \"),i+=\" } } \"):v?(i+=\"   var err =   \",!1!==e.createErrors?(i+=\" { keyword: '\"+(a||\"custom\")+\"' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(l)+\" , params: { keyword: '\"+w.keyword+\"' } \",!1!==e.opts.messages&&(i+=\" , message: 'should pass \\\"\"+w.keyword+\"\\\" keyword validation' \"),e.opts.verbose&&(i+=\" , schema: validate.schema\"+u+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+d+\" \"),i+=\" } \"):i+=\" {} \",i+=\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",!e.compositeRule&&p&&(e.async?i+=\" throw new ValidationError(vErrors); \":i+=\" validate.errors = vErrors; return false; \")):!1===_.errors?i+=\" \"+F+\" \":(i+=\" if (Array.isArray(\"+A+\")) { if (vErrors === null) vErrors = \"+A+\"; else vErrors = vErrors.concat(\"+A+\"); errors = vErrors.length;  for (var \"+E+\"=\"+h+\"; \"+E+\"<errors; \"+E+\"++) { var \"+C+\" = vErrors[\"+E+\"]; if (\"+C+\".dataPath === undefined) \"+C+\".dataPath = (dataPath || '') + \"+e.errorPath+\";  \"+C+'.schemaPath = \"'+l+'\";  ',e.opts.verbose&&(i+=\" \"+C+\".schema = \"+r+\"; \"+C+\".data = \"+d+\"; \"),i+=\" } } else { \"+F+\" } \"),i+=\" } \",p&&(i+=\" else { \")}return i}},{}],214:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"errs__\"+r,d=e.util.copy(e),f=\"\";d.level++;var h=\"valid\"+d.level,m={},g={},y=e.opts.ownProperties;for(w in o)if(\"__proto__\"!=w){var v=o[w],b=Array.isArray(v)?g:m;b[w]=v}a+=\"var \"+p+\" = errors;\";var x=e.errorPath;for(var w in a+=\"var missing\"+r+\";\",g)if((b=g[w]).length){if(a+=\" if ( \"+l+e.util.getProperty(w)+\" !== undefined \",y&&(a+=\" && Object.prototype.hasOwnProperty.call(\"+l+\", '\"+e.util.escapeQuotes(w)+\"') \"),u){a+=\" && ( \";var k=b;if(k)for(var _=-1,j=k.length-1;_<j;){P=k[_+=1],_&&(a+=\" || \"),a+=\" ( ( \"+(N=l+(M=e.util.getProperty(P)))+\" === undefined \",y&&(a+=\" || ! Object.prototype.hasOwnProperty.call(\"+l+\", '\"+e.util.escapeQuotes(P)+\"') \"),a+=\") && (missing\"+r+\" = \"+e.util.toQuotedString(e.opts.jsonPointers?P:M)+\") ) \"}a+=\")) {  \";var S=\"missing\"+r,A=\"' + \"+S+\" + '\";e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(x,S,!0):x+\" + \"+S);var E=E||[];E.push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'dependencies' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { property: '\"+e.util.escapeQuotes(w)+\"', missingProperty: '\"+A+\"', depsCount: \"+b.length+\", deps: '\"+e.util.escapeQuotes(1==b.length?b[0]:b.join(\", \"))+\"' } \",!1!==e.opts.messages&&(a+=\" , message: 'should have \",1==b.length?a+=\"property \"+e.util.escapeQuotes(b[0]):a+=\"properties \"+e.util.escapeQuotes(b.join(\", \")),a+=\" when property \"+e.util.escapeQuotes(w)+\" is present' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \";var C=a;a=E.pop(),!e.compositeRule&&u?e.async?a+=\" throw new ValidationError([\"+C+\"]); \":a+=\" validate.errors = [\"+C+\"]; return false; \":a+=\" var err = \"+C+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \"}else{a+=\" ) { \";var T=b;if(T)for(var P,D=-1,O=T.length-1;D<O;){P=T[D+=1];var M=e.util.getProperty(P),N=(A=e.util.escapeQuotes(P),l+M);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(x,P,e.opts.jsonPointers)),a+=\" if ( \"+N+\" === undefined \",y&&(a+=\" || ! Object.prototype.hasOwnProperty.call(\"+l+\", '\"+e.util.escapeQuotes(P)+\"') \"),a+=\") {  var err =   \",!1!==e.createErrors?(a+=\" { keyword: 'dependencies' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { property: '\"+e.util.escapeQuotes(w)+\"', missingProperty: '\"+A+\"', depsCount: \"+b.length+\", deps: '\"+e.util.escapeQuotes(1==b.length?b[0]:b.join(\", \"))+\"' } \",!1!==e.opts.messages&&(a+=\" , message: 'should have \",1==b.length?a+=\"property \"+e.util.escapeQuotes(b[0]):a+=\"properties \"+e.util.escapeQuotes(b.join(\", \")),a+=\" when property \"+e.util.escapeQuotes(w)+\" is present' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \",a+=\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } \"}}a+=\" }   \",u&&(f+=\"}\",a+=\" else { \")}e.errorPath=x;var B=d.baseId;for(var w in m){v=m[w];(e.opts.strictKeywords?\"object\"==typeof v&&Object.keys(v).length>0||!1===v:e.util.schemaHasRules(v,e.RULES.all))&&(a+=\" \"+h+\" = true; if ( \"+l+e.util.getProperty(w)+\" !== undefined \",y&&(a+=\" && Object.prototype.hasOwnProperty.call(\"+l+\", '\"+e.util.escapeQuotes(w)+\"') \"),a+=\") { \",d.schema=v,d.schemaPath=s+e.util.getProperty(w),d.errSchemaPath=c+\"/\"+e.util.escapeFragment(w),a+=\"  \"+e.validate(d)+\" \",d.baseId=B,a+=\" }  \",u&&(a+=\" if (\"+h+\") { \",f+=\"}\"))}return u&&(a+=\"   \"+f+\" if (\"+p+\" == errors) {\"),a}},{}],215:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"valid\"+r,d=e.opts.$data&&o&&o.$data;d&&(a+=\" var schema\"+r+\" = \"+e.util.getData(o.$data,i,e.dataPathArr)+\"; \");var f=\"i\"+r,h=\"schema\"+r;d||(a+=\" var \"+h+\" = validate.schema\"+s+\";\"),a+=\"var \"+p+\";\",d&&(a+=\" if (schema\"+r+\" === undefined) \"+p+\" = true; else if (!Array.isArray(schema\"+r+\")) \"+p+\" = false; else {\"),a+=p+\" = false;for (var \"+f+\"=0; \"+f+\"<\"+h+\".length; \"+f+\"++) if (equal(\"+l+\", \"+h+\"[\"+f+\"])) { \"+p+\" = true; break; }\",d&&(a+=\"  }  \"),a+=\" if (!\"+p+\") {   \";var m=m||[];m.push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'enum' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { allowedValues: schema\"+r+\" } \",!1!==e.opts.messages&&(a+=\" , message: 'should be equal to one of the allowed values' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \";var g=a;return a=m.pop(),!e.compositeRule&&u?e.async?a+=\" throw new ValidationError([\"+g+\"]); \":a+=\" validate.errors = [\"+g+\"]; return false; \":a+=\" var err = \"+g+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",a+=\" }\",u&&(a+=\" else { \"),a}},{}],216:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\");if(!1===e.opts.format)return u&&(a+=\" if (true) { \"),a;var p,d=e.opts.$data&&o&&o.$data;d?(a+=\" var schema\"+r+\" = \"+e.util.getData(o.$data,i,e.dataPathArr)+\"; \",p=\"schema\"+r):p=o;var f=e.opts.unknownFormats,h=Array.isArray(f);if(d){a+=\" var \"+(m=\"format\"+r)+\" = formats[\"+p+\"]; var \"+(g=\"isObject\"+r)+\" = typeof \"+m+\" == 'object' && !(\"+m+\" instanceof RegExp) && \"+m+\".validate; var \"+(y=\"formatType\"+r)+\" = \"+g+\" && \"+m+\".type || 'string'; if (\"+g+\") { \",e.async&&(a+=\" var async\"+r+\" = \"+m+\".async; \"),a+=\" \"+m+\" = \"+m+\".validate; } if (  \",d&&(a+=\" (\"+p+\" !== undefined && typeof \"+p+\" != 'string') || \"),a+=\" (\",\"ignore\"!=f&&(a+=\" (\"+p+\" && !\"+m+\" \",h&&(a+=\" && self._opts.unknownFormats.indexOf(\"+p+\") == -1 \"),a+=\") || \"),a+=\" (\"+m+\" && \"+y+\" == '\"+n+\"' && !(typeof \"+m+\" == 'function' ? \",e.async?a+=\" (async\"+r+\" ? await \"+m+\"(\"+l+\") : \"+m+\"(\"+l+\")) \":a+=\" \"+m+\"(\"+l+\") \",a+=\" : \"+m+\".test(\"+l+\"))))) {\"}else{var m;if(!(m=e.formats[o])){if(\"ignore\"==f)return e.logger.warn('unknown format \"'+o+'\" ignored in schema at path \"'+e.errSchemaPath+'\"'),u&&(a+=\" if (true) { \"),a;if(h&&f.indexOf(o)>=0)return u&&(a+=\" if (true) { \"),a;throw new Error('unknown format \"'+o+'\" is used in schema at path \"'+e.errSchemaPath+'\"')}var g,y=(g=\"object\"==typeof m&&!(m instanceof RegExp)&&m.validate)&&m.type||\"string\";if(g){var v=!0===m.async;m=m.validate}if(y!=n)return u&&(a+=\" if (true) { \"),a;if(v){if(!e.async)throw new Error(\"async format in sync schema\");a+=\" if (!(await \"+(b=\"formats\"+e.util.getProperty(o)+\".validate\")+\"(\"+l+\"))) { \"}else{a+=\" if (! \";var b=\"formats\"+e.util.getProperty(o);g&&(b+=\".validate\"),a+=\"function\"==typeof m?\" \"+b+\"(\"+l+\") \":\" \"+b+\".test(\"+l+\") \",a+=\") { \"}}var x=x||[];x.push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'format' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { format:  \",a+=d?\"\"+p:\"\"+e.util.toQuotedString(o),a+=\"  } \",!1!==e.opts.messages&&(a+=\" , message: 'should match format \\\"\",a+=d?\"' + \"+p+\" + '\":\"\"+e.util.escapeQuotes(o),a+=\"\\\"' \"),e.opts.verbose&&(a+=\" , schema:  \",a+=d?\"validate.schema\"+s:\"\"+e.util.toQuotedString(o),a+=\"         , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \";var w=a;return a=x.pop(),!e.compositeRule&&u?e.async?a+=\" throw new ValidationError([\"+w+\"]); \":a+=\" validate.errors = [\"+w+\"]; return false; \":a+=\" var err = \"+w+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",a+=\" } \",u&&(a+=\" else { \"),a}},{}],217:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"valid\"+r,d=\"errs__\"+r,f=e.util.copy(e);f.level++;var h=\"valid\"+f.level,m=e.schema.then,g=e.schema.else,y=void 0!==m&&(e.opts.strictKeywords?\"object\"==typeof m&&Object.keys(m).length>0||!1===m:e.util.schemaHasRules(m,e.RULES.all)),v=void 0!==g&&(e.opts.strictKeywords?\"object\"==typeof g&&Object.keys(g).length>0||!1===g:e.util.schemaHasRules(g,e.RULES.all)),b=f.baseId;if(y||v){var x;f.createErrors=!1,f.schema=o,f.schemaPath=s,f.errSchemaPath=c,a+=\" var \"+d+\" = errors; var \"+p+\" = true;  \";var w=e.compositeRule;e.compositeRule=f.compositeRule=!0,a+=\"  \"+e.validate(f)+\" \",f.baseId=b,f.createErrors=!0,a+=\"  errors = \"+d+\"; if (vErrors !== null) { if (\"+d+\") vErrors.length = \"+d+\"; else vErrors = null; }  \",e.compositeRule=f.compositeRule=w,y?(a+=\" if (\"+h+\") {  \",f.schema=e.schema.then,f.schemaPath=e.schemaPath+\".then\",f.errSchemaPath=e.errSchemaPath+\"/then\",a+=\"  \"+e.validate(f)+\" \",f.baseId=b,a+=\" \"+p+\" = \"+h+\"; \",y&&v?a+=\" var \"+(x=\"ifClause\"+r)+\" = 'then'; \":x=\"'then'\",a+=\" } \",v&&(a+=\" else { \")):a+=\" if (!\"+h+\") { \",v&&(f.schema=e.schema.else,f.schemaPath=e.schemaPath+\".else\",f.errSchemaPath=e.errSchemaPath+\"/else\",a+=\"  \"+e.validate(f)+\" \",f.baseId=b,a+=\" \"+p+\" = \"+h+\"; \",y&&v?a+=\" var \"+(x=\"ifClause\"+r)+\" = 'else'; \":x=\"'else'\",a+=\" } \"),a+=\" if (!\"+p+\") {   var err =   \",!1!==e.createErrors?(a+=\" { keyword: 'if' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { failingKeyword: \"+x+\" } \",!1!==e.opts.messages&&(a+=\" , message: 'should match \\\"' + \"+x+\" + '\\\" schema' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \",a+=\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",!e.compositeRule&&u&&(e.async?a+=\" throw new ValidationError(vErrors); \":a+=\" validate.errors = vErrors; return false; \"),a+=\" }   \",u&&(a+=\" else { \")}else u&&(a+=\" if (true) { \");return a}},{}],218:[function(e,t,n){\"use strict\";t.exports={$ref:e(\"./ref\"),allOf:e(\"./allOf\"),anyOf:e(\"./anyOf\"),$comment:e(\"./comment\"),const:e(\"./const\"),contains:e(\"./contains\"),dependencies:e(\"./dependencies\"),enum:e(\"./enum\"),format:e(\"./format\"),if:e(\"./if\"),items:e(\"./items\"),maximum:e(\"./_limit\"),minimum:e(\"./_limit\"),maxItems:e(\"./_limitItems\"),minItems:e(\"./_limitItems\"),maxLength:e(\"./_limitLength\"),minLength:e(\"./_limitLength\"),maxProperties:e(\"./_limitProperties\"),minProperties:e(\"./_limitProperties\"),multipleOf:e(\"./multipleOf\"),not:e(\"./not\"),oneOf:e(\"./oneOf\"),pattern:e(\"./pattern\"),properties:e(\"./properties\"),propertyNames:e(\"./propertyNames\"),required:e(\"./required\"),uniqueItems:e(\"./uniqueItems\"),validate:e(\"./validate\")}},{\"./_limit\":204,\"./_limitItems\":205,\"./_limitLength\":206,\"./_limitProperties\":207,\"./allOf\":208,\"./anyOf\":209,\"./comment\":210,\"./const\":211,\"./contains\":212,\"./dependencies\":214,\"./enum\":215,\"./format\":216,\"./if\":217,\"./items\":219,\"./multipleOf\":220,\"./not\":221,\"./oneOf\":222,\"./pattern\":223,\"./properties\":224,\"./propertyNames\":225,\"./ref\":226,\"./required\":227,\"./uniqueItems\":228,\"./validate\":229}],219:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"valid\"+r,d=\"errs__\"+r,f=e.util.copy(e),h=\"\";f.level++;var m=\"valid\"+f.level,g=\"i\"+r,y=f.dataLevel=e.dataLevel+1,v=\"data\"+y,b=e.baseId;if(a+=\"var \"+d+\" = errors;var \"+p+\";\",Array.isArray(o)){var x=e.schema.additionalItems;if(!1===x){a+=\" \"+p+\" = \"+l+\".length <= \"+o.length+\"; \";var w=c;c=e.errSchemaPath+\"/additionalItems\",a+=\"  if (!\"+p+\") {   \";var k=k||[];k.push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'additionalItems' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { limit: \"+o.length+\" } \",!1!==e.opts.messages&&(a+=\" , message: 'should NOT have more than \"+o.length+\" items' \"),e.opts.verbose&&(a+=\" , schema: false , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \";var _=a;a=k.pop(),!e.compositeRule&&u?e.async?a+=\" throw new ValidationError([\"+_+\"]); \":a+=\" validate.errors = [\"+_+\"]; return false; \":a+=\" var err = \"+_+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",a+=\" } \",c=w,u&&(h+=\"}\",a+=\" else { \")}var j=o;if(j)for(var S,A=-1,E=j.length-1;A<E;)if(S=j[A+=1],e.opts.strictKeywords?\"object\"==typeof S&&Object.keys(S).length>0||!1===S:e.util.schemaHasRules(S,e.RULES.all)){a+=\" \"+m+\" = true; if (\"+l+\".length > \"+A+\") { \";var C=l+\"[\"+A+\"]\";f.schema=S,f.schemaPath=s+\"[\"+A+\"]\",f.errSchemaPath=c+\"/\"+A,f.errorPath=e.util.getPathExpr(e.errorPath,A,e.opts.jsonPointers,!0),f.dataPathArr[y]=A;var T=e.validate(f);f.baseId=b,e.util.varOccurences(T,v)<2?a+=\" \"+e.util.varReplace(T,v,C)+\" \":a+=\" var \"+v+\" = \"+C+\"; \"+T+\" \",a+=\" }  \",u&&(a+=\" if (\"+m+\") { \",h+=\"}\")}if(\"object\"==typeof x&&(e.opts.strictKeywords?\"object\"==typeof x&&Object.keys(x).length>0||!1===x:e.util.schemaHasRules(x,e.RULES.all))){f.schema=x,f.schemaPath=e.schemaPath+\".additionalItems\",f.errSchemaPath=e.errSchemaPath+\"/additionalItems\",a+=\" \"+m+\" = true; if (\"+l+\".length > \"+o.length+\") {  for (var \"+g+\" = \"+o.length+\"; \"+g+\" < \"+l+\".length; \"+g+\"++) { \",f.errorPath=e.util.getPathExpr(e.errorPath,g,e.opts.jsonPointers,!0);C=l+\"[\"+g+\"]\";f.dataPathArr[y]=g;T=e.validate(f);f.baseId=b,e.util.varOccurences(T,v)<2?a+=\" \"+e.util.varReplace(T,v,C)+\" \":a+=\" var \"+v+\" = \"+C+\"; \"+T+\" \",u&&(a+=\" if (!\"+m+\") break; \"),a+=\" } }  \",u&&(a+=\" if (\"+m+\") { \",h+=\"}\")}}else if(e.opts.strictKeywords?\"object\"==typeof o&&Object.keys(o).length>0||!1===o:e.util.schemaHasRules(o,e.RULES.all)){f.schema=o,f.schemaPath=s,f.errSchemaPath=c,a+=\"  for (var \"+g+\" = 0; \"+g+\" < \"+l+\".length; \"+g+\"++) { \",f.errorPath=e.util.getPathExpr(e.errorPath,g,e.opts.jsonPointers,!0);C=l+\"[\"+g+\"]\";f.dataPathArr[y]=g;T=e.validate(f);f.baseId=b,e.util.varOccurences(T,v)<2?a+=\" \"+e.util.varReplace(T,v,C)+\" \":a+=\" var \"+v+\" = \"+C+\"; \"+T+\" \",u&&(a+=\" if (!\"+m+\") break; \"),a+=\" }\"}return u&&(a+=\" \"+h+\" if (\"+d+\" == errors) {\"),a}},{}],220:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a,r=\" \",i=e.level,o=e.dataLevel,s=e.schema[t],c=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+\"/\"+t,l=!e.opts.allErrors,p=\"data\"+(o||\"\"),d=e.opts.$data&&s&&s.$data;if(d?(r+=\" var schema\"+i+\" = \"+e.util.getData(s.$data,o,e.dataPathArr)+\"; \",a=\"schema\"+i):a=s,!d&&\"number\"!=typeof s)throw new Error(t+\" must be number\");r+=\"var division\"+i+\";if (\",d&&(r+=\" \"+a+\" !== undefined && ( typeof \"+a+\" != 'number' || \"),r+=\" (division\"+i+\" = \"+p+\" / \"+a+\", \",e.opts.multipleOfPrecision?r+=\" Math.abs(Math.round(division\"+i+\") - division\"+i+\") > 1e-\"+e.opts.multipleOfPrecision+\" \":r+=\" division\"+i+\" !== parseInt(division\"+i+\") \",r+=\" ) \",d&&(r+=\"  )  \"),r+=\" ) {   \";var f=f||[];f.push(r),r=\"\",!1!==e.createErrors?(r+=\" { keyword: 'multipleOf' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(u)+\" , params: { multipleOf: \"+a+\" } \",!1!==e.opts.messages&&(r+=\" , message: 'should be multiple of \",r+=d?\"' + \"+a:a+\"'\"),e.opts.verbose&&(r+=\" , schema:  \",r+=d?\"validate.schema\"+c:\"\"+s,r+=\"         , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+p+\" \"),r+=\" } \"):r+=\" {} \";var h=r;return r=f.pop(),!e.compositeRule&&l?e.async?r+=\" throw new ValidationError([\"+h+\"]); \":r+=\" validate.errors = [\"+h+\"]; return false; \":r+=\" var err = \"+h+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",r+=\"} \",l&&(r+=\" else { \"),r}},{}],221:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"errs__\"+r,d=e.util.copy(e);d.level++;var f=\"valid\"+d.level;if(e.opts.strictKeywords?\"object\"==typeof o&&Object.keys(o).length>0||!1===o:e.util.schemaHasRules(o,e.RULES.all)){d.schema=o,d.schemaPath=s,d.errSchemaPath=c,a+=\" var \"+p+\" = errors;  \";var h,m=e.compositeRule;e.compositeRule=d.compositeRule=!0,d.createErrors=!1,d.opts.allErrors&&(h=d.opts.allErrors,d.opts.allErrors=!1),a+=\" \"+e.validate(d)+\" \",d.createErrors=!0,h&&(d.opts.allErrors=h),e.compositeRule=d.compositeRule=m,a+=\" if (\"+f+\") {   \";var g=g||[];g.push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'not' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: {} \",!1!==e.opts.messages&&(a+=\" , message: 'should NOT be valid' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \";var y=a;a=g.pop(),!e.compositeRule&&u?e.async?a+=\" throw new ValidationError([\"+y+\"]); \":a+=\" validate.errors = [\"+y+\"]; return false; \":a+=\" var err = \"+y+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",a+=\" } else {  errors = \"+p+\"; if (vErrors !== null) { if (\"+p+\") vErrors.length = \"+p+\"; else vErrors = null; } \",e.opts.allErrors&&(a+=\" } \")}else a+=\"  var err =   \",!1!==e.createErrors?(a+=\" { keyword: 'not' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: {} \",!1!==e.opts.messages&&(a+=\" , message: 'should NOT be valid' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \",a+=\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",u&&(a+=\" if (false) { \");return a}},{}],222:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"valid\"+r,d=\"errs__\"+r,f=e.util.copy(e),h=\"\";f.level++;var m=\"valid\"+f.level,g=f.baseId,y=\"prevValid\"+r,v=\"passingSchemas\"+r;a+=\"var \"+d+\" = errors , \"+y+\" = false , \"+p+\" = false , \"+v+\" = null; \";var b=e.compositeRule;e.compositeRule=f.compositeRule=!0;var x=o;if(x)for(var w,k=-1,_=x.length-1;k<_;)w=x[k+=1],(e.opts.strictKeywords?\"object\"==typeof w&&Object.keys(w).length>0||!1===w:e.util.schemaHasRules(w,e.RULES.all))?(f.schema=w,f.schemaPath=s+\"[\"+k+\"]\",f.errSchemaPath=c+\"/\"+k,a+=\"  \"+e.validate(f)+\" \",f.baseId=g):a+=\" var \"+m+\" = true; \",k&&(a+=\" if (\"+m+\" && \"+y+\") { \"+p+\" = false; \"+v+\" = [\"+v+\", \"+k+\"]; } else { \",h+=\"}\"),a+=\" if (\"+m+\") { \"+p+\" = \"+y+\" = true; \"+v+\" = \"+k+\"; }\";return e.compositeRule=f.compositeRule=b,a+=h+\"if (!\"+p+\") {   var err =   \",!1!==e.createErrors?(a+=\" { keyword: 'oneOf' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { passingSchemas: \"+v+\" } \",!1!==e.opts.messages&&(a+=\" , message: 'should match exactly one schema in oneOf' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \",a+=\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",!e.compositeRule&&u&&(e.async?a+=\" throw new ValidationError(vErrors); \":a+=\" validate.errors = vErrors; return false; \"),a+=\"} else {  errors = \"+d+\"; if (vErrors !== null) { if (\"+d+\") vErrors.length = \"+d+\"; else vErrors = null; }\",e.opts.allErrors&&(a+=\" } \"),a}},{}],223:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a,r=\" \",i=e.level,o=e.dataLevel,s=e.schema[t],c=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+\"/\"+t,l=!e.opts.allErrors,p=\"data\"+(o||\"\"),d=e.opts.$data&&s&&s.$data;d?(r+=\" var schema\"+i+\" = \"+e.util.getData(s.$data,o,e.dataPathArr)+\"; \",a=\"schema\"+i):a=s,r+=\"if ( \",d&&(r+=\" (\"+a+\" !== undefined && typeof \"+a+\" != 'string') || \"),r+=\" !\"+(d?\"(new RegExp(\"+a+\"))\":e.usePattern(s))+\".test(\"+p+\") ) {   \";var f=f||[];f.push(r),r=\"\",!1!==e.createErrors?(r+=\" { keyword: 'pattern' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(u)+\" , params: { pattern:  \",r+=d?\"\"+a:\"\"+e.util.toQuotedString(s),r+=\"  } \",!1!==e.opts.messages&&(r+=\" , message: 'should match pattern \\\"\",r+=d?\"' + \"+a+\" + '\":\"\"+e.util.escapeQuotes(s),r+=\"\\\"' \"),e.opts.verbose&&(r+=\" , schema:  \",r+=d?\"validate.schema\"+c:\"\"+e.util.toQuotedString(s),r+=\"         , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+p+\" \"),r+=\" } \"):r+=\" {} \";var h=r;return r=f.pop(),!e.compositeRule&&l?e.async?r+=\" throw new ValidationError([\"+h+\"]); \":r+=\" validate.errors = [\"+h+\"]; return false; \":r+=\" var err = \"+h+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",r+=\"} \",l&&(r+=\" else { \"),r}},{}],224:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"errs__\"+r,d=e.util.copy(e),f=\"\";d.level++;var h=\"valid\"+d.level,m=\"key\"+r,g=\"idx\"+r,y=d.dataLevel=e.dataLevel+1,v=\"data\"+y,b=\"dataProperties\"+r,x=Object.keys(o||{}).filter(M),w=e.schema.patternProperties||{},k=Object.keys(w).filter(M),_=e.schema.additionalProperties,j=x.length||k.length,S=!1===_,A=\"object\"==typeof _&&Object.keys(_).length,E=e.opts.removeAdditional,C=S||A||E,T=e.opts.ownProperties,P=e.baseId,D=e.schema.required;if(D&&(!e.opts.$data||!D.$data)&&D.length<e.opts.loopRequired)var O=e.util.toHash(D);function M(e){return\"__proto__\"!==e}if(a+=\"var \"+p+\" = errors;var \"+h+\" = true;\",T&&(a+=\" var \"+b+\" = undefined;\"),C){if(a+=T?\" \"+b+\" = \"+b+\" || Object.keys(\"+l+\"); for (var \"+g+\"=0; \"+g+\"<\"+b+\".length; \"+g+\"++) { var \"+m+\" = \"+b+\"[\"+g+\"]; \":\" for (var \"+m+\" in \"+l+\") { \",j){if(a+=\" var isAdditional\"+r+\" = !(false \",x.length)if(x.length>8)a+=\" || validate.schema\"+s+\".hasOwnProperty(\"+m+\") \";else{var N=x;if(N)for(var B=-1,R=N.length-1;B<R;)J=N[B+=1],a+=\" || \"+m+\" == \"+e.util.toQuotedString(J)+\" \"}if(k.length){var L=k;if(L)for(var I=-1,F=L.length-1;I<F;)ie=L[I+=1],a+=\" || \"+e.usePattern(ie)+\".test(\"+m+\") \"}a+=\" ); if (isAdditional\"+r+\") { \"}if(\"all\"==E)a+=\" delete \"+l+\"[\"+m+\"]; \";else{var z=e.errorPath,q=\"' + \"+m+\" + '\";if(e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(e.errorPath,m,e.opts.jsonPointers)),S)if(E)a+=\" delete \"+l+\"[\"+m+\"]; \";else{a+=\" \"+h+\" = false; \";var H=c;c=e.errSchemaPath+\"/additionalProperties\",(ne=ne||[]).push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'additionalProperties' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { additionalProperty: '\"+q+\"' } \",!1!==e.opts.messages&&(a+=\" , message: '\",e.opts._errorDataPathProperty?a+=\"is an invalid additional property\":a+=\"should NOT have additional properties\",a+=\"' \"),e.opts.verbose&&(a+=\" , schema: false , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \";var U=a;a=ne.pop(),!e.compositeRule&&u?e.async?a+=\" throw new ValidationError([\"+U+\"]); \":a+=\" validate.errors = [\"+U+\"]; return false; \":a+=\" var err = \"+U+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",c=H,u&&(a+=\" break; \")}else if(A)if(\"failing\"==E){a+=\" var \"+p+\" = errors;  \";var G=e.compositeRule;e.compositeRule=d.compositeRule=!0,d.schema=_,d.schemaPath=e.schemaPath+\".additionalProperties\",d.errSchemaPath=e.errSchemaPath+\"/additionalProperties\",d.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,m,e.opts.jsonPointers);var $=l+\"[\"+m+\"]\";d.dataPathArr[y]=m;var W=e.validate(d);d.baseId=P,e.util.varOccurences(W,v)<2?a+=\" \"+e.util.varReplace(W,v,$)+\" \":a+=\" var \"+v+\" = \"+$+\"; \"+W+\" \",a+=\" if (!\"+h+\") { errors = \"+p+\"; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete \"+l+\"[\"+m+\"]; }  \",e.compositeRule=d.compositeRule=G}else{d.schema=_,d.schemaPath=e.schemaPath+\".additionalProperties\",d.errSchemaPath=e.errSchemaPath+\"/additionalProperties\",d.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,m,e.opts.jsonPointers);$=l+\"[\"+m+\"]\";d.dataPathArr[y]=m;W=e.validate(d);d.baseId=P,e.util.varOccurences(W,v)<2?a+=\" \"+e.util.varReplace(W,v,$)+\" \":a+=\" var \"+v+\" = \"+$+\"; \"+W+\" \",u&&(a+=\" if (!\"+h+\") break; \")}e.errorPath=z}j&&(a+=\" } \"),a+=\" }  \",u&&(a+=\" if (\"+h+\") { \",f+=\"}\")}var V=e.opts.useDefaults&&!e.compositeRule;if(x.length){var K=x;if(K)for(var J,Y=-1,X=K.length-1;Y<X;){var Z=o[J=K[Y+=1]];if(e.opts.strictKeywords?\"object\"==typeof Z&&Object.keys(Z).length>0||!1===Z:e.util.schemaHasRules(Z,e.RULES.all)){var Q=e.util.getProperty(J),ee=($=l+Q,V&&void 0!==Z.default);d.schema=Z,d.schemaPath=s+Q,d.errSchemaPath=c+\"/\"+e.util.escapeFragment(J),d.errorPath=e.util.getPath(e.errorPath,J,e.opts.jsonPointers),d.dataPathArr[y]=e.util.toQuotedString(J);W=e.validate(d);if(d.baseId=P,e.util.varOccurences(W,v)<2){W=e.util.varReplace(W,v,$);var te=$}else{te=v;a+=\" var \"+v+\" = \"+$+\"; \"}if(ee)a+=\" \"+W+\" \";else{if(O&&O[J]){a+=\" if ( \"+te+\" === undefined \",T&&(a+=\" || ! Object.prototype.hasOwnProperty.call(\"+l+\", '\"+e.util.escapeQuotes(J)+\"') \"),a+=\") { \"+h+\" = false; \";z=e.errorPath,H=c;var ne,ae=e.util.escapeQuotes(J);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(z,J,e.opts.jsonPointers)),c=e.errSchemaPath+\"/required\",(ne=ne||[]).push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'required' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { missingProperty: '\"+ae+\"' } \",!1!==e.opts.messages&&(a+=\" , message: '\",e.opts._errorDataPathProperty?a+=\"is a required property\":a+=\"should have required property \\\\'\"+ae+\"\\\\'\",a+=\"' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \";U=a;a=ne.pop(),!e.compositeRule&&u?e.async?a+=\" throw new ValidationError([\"+U+\"]); \":a+=\" validate.errors = [\"+U+\"]; return false; \":a+=\" var err = \"+U+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",c=H,e.errorPath=z,a+=\" } else { \"}else u?(a+=\" if ( \"+te+\" === undefined \",T&&(a+=\" || ! Object.prototype.hasOwnProperty.call(\"+l+\", '\"+e.util.escapeQuotes(J)+\"') \"),a+=\") { \"+h+\" = true; } else { \"):(a+=\" if (\"+te+\" !== undefined \",T&&(a+=\" &&   Object.prototype.hasOwnProperty.call(\"+l+\", '\"+e.util.escapeQuotes(J)+\"') \"),a+=\" ) { \");a+=\" \"+W+\" } \"}}u&&(a+=\" if (\"+h+\") { \",f+=\"}\")}}if(k.length){var re=k;if(re)for(var ie,oe=-1,se=re.length-1;oe<se;){Z=w[ie=re[oe+=1]];if(e.opts.strictKeywords?\"object\"==typeof Z&&Object.keys(Z).length>0||!1===Z:e.util.schemaHasRules(Z,e.RULES.all)){d.schema=Z,d.schemaPath=e.schemaPath+\".patternProperties\"+e.util.getProperty(ie),d.errSchemaPath=e.errSchemaPath+\"/patternProperties/\"+e.util.escapeFragment(ie),a+=T?\" \"+b+\" = \"+b+\" || Object.keys(\"+l+\"); for (var \"+g+\"=0; \"+g+\"<\"+b+\".length; \"+g+\"++) { var \"+m+\" = \"+b+\"[\"+g+\"]; \":\" for (var \"+m+\" in \"+l+\") { \",a+=\" if (\"+e.usePattern(ie)+\".test(\"+m+\")) { \",d.errorPath=e.util.getPathExpr(e.errorPath,m,e.opts.jsonPointers);$=l+\"[\"+m+\"]\";d.dataPathArr[y]=m;W=e.validate(d);d.baseId=P,e.util.varOccurences(W,v)<2?a+=\" \"+e.util.varReplace(W,v,$)+\" \":a+=\" var \"+v+\" = \"+$+\"; \"+W+\" \",u&&(a+=\" if (!\"+h+\") break; \"),a+=\" } \",u&&(a+=\" else \"+h+\" = true; \"),a+=\" }  \",u&&(a+=\" if (\"+h+\") { \",f+=\"}\")}}}return u&&(a+=\" \"+f+\" if (\"+p+\" == errors) {\"),a}},{}],225:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"errs__\"+r,d=e.util.copy(e);d.level++;var f=\"valid\"+d.level;if(a+=\"var \"+p+\" = errors;\",e.opts.strictKeywords?\"object\"==typeof o&&Object.keys(o).length>0||!1===o:e.util.schemaHasRules(o,e.RULES.all)){d.schema=o,d.schemaPath=s,d.errSchemaPath=c;var h=\"key\"+r,m=\"idx\"+r,g=\"i\"+r,y=\"' + \"+h+\" + '\",v=\"data\"+(d.dataLevel=e.dataLevel+1),b=\"dataProperties\"+r,x=e.opts.ownProperties,w=e.baseId;x&&(a+=\" var \"+b+\" = undefined; \"),a+=x?\" \"+b+\" = \"+b+\" || Object.keys(\"+l+\"); for (var \"+m+\"=0; \"+m+\"<\"+b+\".length; \"+m+\"++) { var \"+h+\" = \"+b+\"[\"+m+\"]; \":\" for (var \"+h+\" in \"+l+\") { \",a+=\" var startErrs\"+r+\" = errors; \";var k=h,_=e.compositeRule;e.compositeRule=d.compositeRule=!0;var j=e.validate(d);d.baseId=w,e.util.varOccurences(j,v)<2?a+=\" \"+e.util.varReplace(j,v,k)+\" \":a+=\" var \"+v+\" = \"+k+\"; \"+j+\" \",e.compositeRule=d.compositeRule=_,a+=\" if (!\"+f+\") { for (var \"+g+\"=startErrs\"+r+\"; \"+g+\"<errors; \"+g+\"++) { vErrors[\"+g+\"].propertyName = \"+h+\"; }   var err =   \",!1!==e.createErrors?(a+=\" { keyword: 'propertyNames' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { propertyName: '\"+y+\"' } \",!1!==e.opts.messages&&(a+=\" , message: 'property name \\\\'\"+y+\"\\\\' is invalid' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \",a+=\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",!e.compositeRule&&u&&(e.async?a+=\" throw new ValidationError(vErrors); \":a+=\" validate.errors = vErrors; return false; \"),u&&(a+=\" break; \"),a+=\" } }\"}return u&&(a+=\"  if (\"+p+\" == errors) {\"),a}},{}],226:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a,r,i=\" \",o=e.level,s=e.dataLevel,c=e.schema[t],u=e.errSchemaPath+\"/\"+t,l=!e.opts.allErrors,p=\"data\"+(s||\"\"),d=\"valid\"+o;if(\"#\"==c||\"#/\"==c)e.isRoot?(a=e.async,r=\"validate\"):(a=!0===e.root.schema.$async,r=\"root.refVal[0]\");else{var f=e.resolveRef(e.baseId,c,e.isRoot);if(void 0===f){var h=e.MissingRefError.message(e.baseId,c);if(\"fail\"==e.opts.missingRefs){e.logger.error(h),(v=v||[]).push(i),i=\"\",!1!==e.createErrors?(i+=\" { keyword: '$ref' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(u)+\" , params: { ref: '\"+e.util.escapeQuotes(c)+\"' } \",!1!==e.opts.messages&&(i+=\" , message: 'can\\\\'t resolve reference \"+e.util.escapeQuotes(c)+\"' \"),e.opts.verbose&&(i+=\" , schema: \"+e.util.toQuotedString(c)+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+p+\" \"),i+=\" } \"):i+=\" {} \";var m=i;i=v.pop(),!e.compositeRule&&l?e.async?i+=\" throw new ValidationError([\"+m+\"]); \":i+=\" validate.errors = [\"+m+\"]; return false; \":i+=\" var err = \"+m+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",l&&(i+=\" if (false) { \")}else{if(\"ignore\"!=e.opts.missingRefs)throw new e.MissingRefError(e.baseId,c,h);e.logger.warn(h),l&&(i+=\" if (true) { \")}}else if(f.inline){var g=e.util.copy(e);g.level++;var y=\"valid\"+g.level;g.schema=f.schema,g.schemaPath=\"\",g.errSchemaPath=c,i+=\" \"+e.validate(g).replace(/validate\\.schema/g,f.code)+\" \",l&&(i+=\" if (\"+y+\") { \")}else a=!0===f.$async||e.async&&!1!==f.$async,r=f.code}if(r){var v;(v=v||[]).push(i),i=\"\",e.opts.passContext?i+=\" \"+r+\".call(this, \":i+=\" \"+r+\"( \",i+=\" \"+p+\", (dataPath || '')\",'\"\"'!=e.errorPath&&(i+=\" + \"+e.errorPath);var b=i+=\" , \"+(s?\"data\"+(s-1||\"\"):\"parentData\")+\" , \"+(s?e.dataPathArr[s]:\"parentDataProperty\")+\", rootData)  \";if(i=v.pop(),a){if(!e.async)throw new Error(\"async schema referenced by sync schema\");l&&(i+=\" var \"+d+\"; \"),i+=\" try { await \"+b+\"; \",l&&(i+=\" \"+d+\" = true; \"),i+=\" } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; \",l&&(i+=\" \"+d+\" = false; \"),i+=\" } \",l&&(i+=\" if (\"+d+\") { \")}else i+=\" if (!\"+b+\") { if (vErrors === null) vErrors = \"+r+\".errors; else vErrors = vErrors.concat(\"+r+\".errors); errors = vErrors.length; } \",l&&(i+=\" else { \")}return i}},{}],227:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\" \",r=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+\"/\"+t,u=!e.opts.allErrors,l=\"data\"+(i||\"\"),p=\"valid\"+r,d=e.opts.$data&&o&&o.$data;d&&(a+=\" var schema\"+r+\" = \"+e.util.getData(o.$data,i,e.dataPathArr)+\"; \");var f=\"schema\"+r;if(!d)if(o.length<e.opts.loopRequired&&e.schema.properties&&Object.keys(e.schema.properties).length){var h=[],m=o;if(m)for(var g,y=-1,v=m.length-1;y<v;){g=m[y+=1];var b=e.schema.properties[g];b&&(e.opts.strictKeywords?\"object\"==typeof b&&Object.keys(b).length>0||!1===b:e.util.schemaHasRules(b,e.RULES.all))||(h[h.length]=g)}}else h=o;if(d||h.length){var x=e.errorPath,w=d||h.length>=e.opts.loopRequired,k=e.opts.ownProperties;if(u)if(a+=\" var missing\"+r+\"; \",w){d||(a+=\" var \"+f+\" = validate.schema\"+s+\"; \");var _=\"' + \"+(T=\"schema\"+r+\"[\"+(A=\"i\"+r)+\"]\")+\" + '\";e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(x,T,e.opts.jsonPointers)),a+=\" var \"+p+\" = true; \",d&&(a+=\" if (schema\"+r+\" === undefined) \"+p+\" = true; else if (!Array.isArray(schema\"+r+\")) \"+p+\" = false; else {\"),a+=\" for (var \"+A+\" = 0; \"+A+\" < \"+f+\".length; \"+A+\"++) { \"+p+\" = \"+l+\"[\"+f+\"[\"+A+\"]] !== undefined \",k&&(a+=\" &&   Object.prototype.hasOwnProperty.call(\"+l+\", \"+f+\"[\"+A+\"]) \"),a+=\"; if (!\"+p+\") break; } \",d&&(a+=\"  }  \"),a+=\"  if (!\"+p+\") {   \",(C=C||[]).push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'required' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { missingProperty: '\"+_+\"' } \",!1!==e.opts.messages&&(a+=\" , message: '\",e.opts._errorDataPathProperty?a+=\"is a required property\":a+=\"should have required property \\\\'\"+_+\"\\\\'\",a+=\"' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \";var j=a;a=C.pop(),!e.compositeRule&&u?e.async?a+=\" throw new ValidationError([\"+j+\"]); \":a+=\" validate.errors = [\"+j+\"]; return false; \":a+=\" var err = \"+j+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",a+=\" } else { \"}else{a+=\" if ( \";var S=h;if(S)for(var A=-1,E=S.length-1;A<E;){D=S[A+=1],A&&(a+=\" || \"),a+=\" ( ( \"+(B=l+(N=e.util.getProperty(D)))+\" === undefined \",k&&(a+=\" || ! Object.prototype.hasOwnProperty.call(\"+l+\", '\"+e.util.escapeQuotes(D)+\"') \"),a+=\") && (missing\"+r+\" = \"+e.util.toQuotedString(e.opts.jsonPointers?D:N)+\") ) \"}a+=\") {  \";var C;_=\"' + \"+(T=\"missing\"+r)+\" + '\";e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(x,T,!0):x+\" + \"+T),(C=C||[]).push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'required' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { missingProperty: '\"+_+\"' } \",!1!==e.opts.messages&&(a+=\" , message: '\",e.opts._errorDataPathProperty?a+=\"is a required property\":a+=\"should have required property \\\\'\"+_+\"\\\\'\",a+=\"' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \";j=a;a=C.pop(),!e.compositeRule&&u?e.async?a+=\" throw new ValidationError([\"+j+\"]); \":a+=\" validate.errors = [\"+j+\"]; return false; \":a+=\" var err = \"+j+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",a+=\" } else { \"}else if(w){d||(a+=\" var \"+f+\" = validate.schema\"+s+\"; \");var T;_=\"' + \"+(T=\"schema\"+r+\"[\"+(A=\"i\"+r)+\"]\")+\" + '\";e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(x,T,e.opts.jsonPointers)),d&&(a+=\" if (\"+f+\" && !Array.isArray(\"+f+\")) {  var err =   \",!1!==e.createErrors?(a+=\" { keyword: 'required' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { missingProperty: '\"+_+\"' } \",!1!==e.opts.messages&&(a+=\" , message: '\",e.opts._errorDataPathProperty?a+=\"is a required property\":a+=\"should have required property \\\\'\"+_+\"\\\\'\",a+=\"' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \",a+=\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (\"+f+\" !== undefined) { \"),a+=\" for (var \"+A+\" = 0; \"+A+\" < \"+f+\".length; \"+A+\"++) { if (\"+l+\"[\"+f+\"[\"+A+\"]] === undefined \",k&&(a+=\" || ! Object.prototype.hasOwnProperty.call(\"+l+\", \"+f+\"[\"+A+\"]) \"),a+=\") {  var err =   \",!1!==e.createErrors?(a+=\" { keyword: 'required' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { missingProperty: '\"+_+\"' } \",!1!==e.opts.messages&&(a+=\" , message: '\",e.opts._errorDataPathProperty?a+=\"is a required property\":a+=\"should have required property \\\\'\"+_+\"\\\\'\",a+=\"' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \",a+=\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } \",d&&(a+=\"  }  \")}else{var P=h;if(P)for(var D,O=-1,M=P.length-1;O<M;){D=P[O+=1];var N=e.util.getProperty(D),B=(_=e.util.escapeQuotes(D),l+N);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(x,D,e.opts.jsonPointers)),a+=\" if ( \"+B+\" === undefined \",k&&(a+=\" || ! Object.prototype.hasOwnProperty.call(\"+l+\", '\"+e.util.escapeQuotes(D)+\"') \"),a+=\") {  var err =   \",!1!==e.createErrors?(a+=\" { keyword: 'required' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(c)+\" , params: { missingProperty: '\"+_+\"' } \",!1!==e.opts.messages&&(a+=\" , message: '\",e.opts._errorDataPathProperty?a+=\"is a required property\":a+=\"should have required property \\\\'\"+_+\"\\\\'\",a+=\"' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+s+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+l+\" \"),a+=\" } \"):a+=\" {} \",a+=\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } \"}}e.errorPath=x}else u&&(a+=\" if (true) {\");return a}},{}],228:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a,r=\" \",i=e.level,o=e.dataLevel,s=e.schema[t],c=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+\"/\"+t,l=!e.opts.allErrors,p=\"data\"+(o||\"\"),d=\"valid\"+i,f=e.opts.$data&&s&&s.$data;if(f?(r+=\" var schema\"+i+\" = \"+e.util.getData(s.$data,o,e.dataPathArr)+\"; \",a=\"schema\"+i):a=s,(s||f)&&!1!==e.opts.uniqueItems){f&&(r+=\" var \"+d+\"; if (\"+a+\" === false || \"+a+\" === undefined) \"+d+\" = true; else if (typeof \"+a+\" != 'boolean') \"+d+\" = false; else { \"),r+=\" var i = \"+p+\".length , \"+d+\" = true , j; if (i > 1) { \";var h=e.schema.items&&e.schema.items.type,m=Array.isArray(h);if(!h||\"object\"==h||\"array\"==h||m&&(h.indexOf(\"object\")>=0||h.indexOf(\"array\")>=0))r+=\" outer: for (;i--;) { for (j = i; j--;) { if (equal(\"+p+\"[i], \"+p+\"[j])) { \"+d+\" = false; break outer; } } } \";else{r+=\" var itemIndices = {}, item; for (;i--;) { var item = \"+p+\"[i]; \";var g=\"checkDataType\"+(m?\"s\":\"\");r+=\" if (\"+e.util[g](h,\"item\",e.opts.strictNumbers,!0)+\") continue; \",m&&(r+=\" if (typeof item == 'string') item = '\\\"' + item; \"),r+=\" if (typeof itemIndices[item] == 'number') { \"+d+\" = false; j = itemIndices[item]; break; } itemIndices[item] = i; } \"}r+=\" } \",f&&(r+=\"  }  \"),r+=\" if (!\"+d+\") {   \";var y=y||[];y.push(r),r=\"\",!1!==e.createErrors?(r+=\" { keyword: 'uniqueItems' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(u)+\" , params: { i: i, j: j } \",!1!==e.opts.messages&&(r+=\" , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' \"),e.opts.verbose&&(r+=\" , schema:  \",r+=f?\"validate.schema\"+c:\"\"+s,r+=\"         , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+p+\" \"),r+=\" } \"):r+=\" {} \";var v=r;r=y.pop(),!e.compositeRule&&l?e.async?r+=\" throw new ValidationError([\"+v+\"]); \":r+=\" validate.errors = [\"+v+\"]; return false; \":r+=\" var err = \"+v+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",r+=\" } \",l&&(r+=\" else { \")}else l&&(r+=\" if (true) { \");return r}},{}],229:[function(e,t,n){\"use strict\";t.exports=function(e,t,n){var a=\"\",r=!0===e.schema.$async,i=e.util.schemaHasRulesExcept(e.schema,e.RULES.all,\"$ref\"),o=e.self._getId(e.schema);if(e.opts.strictKeywords){var s=e.util.schemaUnknownRules(e.schema,e.RULES.keywords);if(s){var c=\"unknown keyword: \"+s;if(\"log\"!==e.opts.strictKeywords)throw new Error(c);e.logger.warn(c)}}if(e.isTop&&(a+=\" var validate = \",r&&(e.async=!0,a+=\"async \"),a+=\"function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; \",o&&(e.opts.sourceCode||e.opts.processCode)&&(a+=\" /*# sourceURL=\"+o+\" */ \")),\"boolean\"==typeof e.schema||!i&&!e.schema.$ref){t=\"false schema\";var u=e.level,l=e.dataLevel,p=e.schema[t],d=e.schemaPath+e.util.getProperty(t),f=e.errSchemaPath+\"/\"+t,h=!e.opts.allErrors,m=\"data\"+(l||\"\"),g=\"valid\"+u;if(!1===e.schema){e.isTop?h=!0:a+=\" var \"+g+\" = false; \",(Y=Y||[]).push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'false schema' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(f)+\" , params: {} \",!1!==e.opts.messages&&(a+=\" , message: 'boolean schema is false' \"),e.opts.verbose&&(a+=\" , schema: false , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+m+\" \"),a+=\" } \"):a+=\" {} \";var y=a;a=Y.pop(),!e.compositeRule&&h?e.async?a+=\" throw new ValidationError([\"+y+\"]); \":a+=\" validate.errors = [\"+y+\"]; return false; \":a+=\" var err = \"+y+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \"}else e.isTop?a+=r?\" return data; \":\" validate.errors = null; return true; \":a+=\" var \"+g+\" = true; \";return e.isTop&&(a+=\" }; return validate; \"),a}if(e.isTop){var v=e.isTop;u=e.level=0,l=e.dataLevel=0,m=\"data\";if(e.rootId=e.resolve.fullPath(e.self._getId(e.root.schema)),e.baseId=e.baseId||e.rootId,delete e.isTop,e.dataPathArr=[\"\"],void 0!==e.schema.default&&e.opts.useDefaults&&e.opts.strictDefaults){var b=\"default is ignored in the schema root\";if(\"log\"!==e.opts.strictDefaults)throw new Error(b);e.logger.warn(b)}a+=\" var vErrors = null; \",a+=\" var errors = 0;     \",a+=\" if (rootData === undefined) rootData = data; \"}else{u=e.level,m=\"data\"+((l=e.dataLevel)||\"\");if(o&&(e.baseId=e.resolve.url(e.baseId,o)),r&&!e.async)throw new Error(\"async schema in sync schema\");a+=\" var errs_\"+u+\" = errors;\"}g=\"valid\"+u,h=!e.opts.allErrors;var x=\"\",w=\"\",k=e.schema.type,_=Array.isArray(k);if(k&&e.opts.nullable&&!0===e.schema.nullable&&(_?-1==k.indexOf(\"null\")&&(k=k.concat(\"null\")):\"null\"!=k&&(k=[k,\"null\"],_=!0)),_&&1==k.length&&(k=k[0],_=!1),e.schema.$ref&&i){if(\"fail\"==e.opts.extendRefs)throw new Error('$ref: validation keywords used in schema at path \"'+e.errSchemaPath+'\" (see option extendRefs)');!0!==e.opts.extendRefs&&(i=!1,e.logger.warn('$ref: keywords ignored in schema at path \"'+e.errSchemaPath+'\"'))}if(e.schema.$comment&&e.opts.$comment&&(a+=\" \"+e.RULES.all.$comment.code(e,\"$comment\")),k){if(e.opts.coerceTypes)var j=e.util.coerceToTypes(e.opts.coerceTypes,k);var S=e.RULES.types[k];if(j||_||!0===S||S&&!X(S)){d=e.schemaPath+\".type\",f=e.errSchemaPath+\"/type\",d=e.schemaPath+\".type\",f=e.errSchemaPath+\"/type\";var A=_?\"checkDataTypes\":\"checkDataType\";if(a+=\" if (\"+e.util[A](k,m,e.opts.strictNumbers,!0)+\") { \",j){var E=\"dataType\"+u,C=\"coerced\"+u;a+=\" var \"+E+\" = typeof \"+m+\"; var \"+C+\" = undefined; \",\"array\"==e.opts.coerceTypes&&(a+=\" if (\"+E+\" == 'object' && Array.isArray(\"+m+\") && \"+m+\".length == 1) { \"+m+\" = \"+m+\"[0]; \"+E+\" = typeof \"+m+\"; if (\"+e.util.checkDataType(e.schema.type,m,e.opts.strictNumbers)+\") \"+C+\" = \"+m+\"; } \"),a+=\" if (\"+C+\" !== undefined) ; \";var T=j;if(T)for(var P,D=-1,O=T.length-1;D<O;)\"string\"==(P=T[D+=1])?a+=\" else if (\"+E+\" == 'number' || \"+E+\" == 'boolean') \"+C+\" = '' + \"+m+\"; else if (\"+m+\" === null) \"+C+\" = ''; \":\"number\"==P||\"integer\"==P?(a+=\" else if (\"+E+\" == 'boolean' || \"+m+\" === null || (\"+E+\" == 'string' && \"+m+\" && \"+m+\" == +\"+m+\" \",\"integer\"==P&&(a+=\" && !(\"+m+\" % 1)\"),a+=\")) \"+C+\" = +\"+m+\"; \"):\"boolean\"==P?a+=\" else if (\"+m+\" === 'false' || \"+m+\" === 0 || \"+m+\" === null) \"+C+\" = false; else if (\"+m+\" === 'true' || \"+m+\" === 1) \"+C+\" = true; \":\"null\"==P?a+=\" else if (\"+m+\" === '' || \"+m+\" === 0 || \"+m+\" === false) \"+C+\" = null; \":\"array\"==e.opts.coerceTypes&&\"array\"==P&&(a+=\" else if (\"+E+\" == 'string' || \"+E+\" == 'number' || \"+E+\" == 'boolean' || \"+m+\" == null) \"+C+\" = [\"+m+\"]; \");a+=\" else {   \",(Y=Y||[]).push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'type' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(f)+\" , params: { type: '\",a+=_?\"\"+k.join(\",\"):\"\"+k,a+=\"' } \",!1!==e.opts.messages&&(a+=\" , message: 'should be \",a+=_?\"\"+k.join(\",\"):\"\"+k,a+=\"' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+d+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+m+\" \"),a+=\" } \"):a+=\" {} \";y=a;a=Y.pop(),!e.compositeRule&&h?e.async?a+=\" throw new ValidationError([\"+y+\"]); \":a+=\" validate.errors = [\"+y+\"]; return false; \":a+=\" var err = \"+y+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",a+=\" } if (\"+C+\" !== undefined) {  \";var M=l?\"data\"+(l-1||\"\"):\"parentData\";a+=\" \"+m+\" = \"+C+\"; \",l||(a+=\"if (\"+M+\" !== undefined)\"),a+=\" \"+M+\"[\"+(l?e.dataPathArr[l]:\"parentDataProperty\")+\"] = \"+C+\"; } \"}else{(Y=Y||[]).push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'type' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(f)+\" , params: { type: '\",a+=_?\"\"+k.join(\",\"):\"\"+k,a+=\"' } \",!1!==e.opts.messages&&(a+=\" , message: 'should be \",a+=_?\"\"+k.join(\",\"):\"\"+k,a+=\"' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+d+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+m+\" \"),a+=\" } \"):a+=\" {} \";y=a;a=Y.pop(),!e.compositeRule&&h?e.async?a+=\" throw new ValidationError([\"+y+\"]); \":a+=\" validate.errors = [\"+y+\"]; return false; \":a+=\" var err = \"+y+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \"}a+=\" } \"}}if(e.schema.$ref&&!i)a+=\" \"+e.RULES.all.$ref.code(e,\"$ref\")+\" \",h&&(a+=\" } if (errors === \",a+=v?\"0\":\"errs_\"+u,a+=\") { \",w+=\"}\");else{var N=e.RULES;if(N)for(var B=-1,R=N.length-1;B<R;)if(X(S=N[B+=1])){if(S.type&&(a+=\" if (\"+e.util.checkDataType(S.type,m,e.opts.strictNumbers)+\") { \"),e.opts.useDefaults)if(\"object\"==S.type&&e.schema.properties){p=e.schema.properties;var L=Object.keys(p);if(L)for(var I,F=-1,z=L.length-1;F<z;){if(void 0!==(U=p[I=L[F+=1]]).default){var q=m+e.util.getProperty(I);if(e.compositeRule){if(e.opts.strictDefaults){b=\"default is ignored for: \"+q;if(\"log\"!==e.opts.strictDefaults)throw new Error(b);e.logger.warn(b)}}else a+=\" if (\"+q+\" === undefined \",\"empty\"==e.opts.useDefaults&&(a+=\" || \"+q+\" === null || \"+q+\" === '' \"),a+=\" ) \"+q+\" = \",\"shared\"==e.opts.useDefaults?a+=\" \"+e.useDefault(U.default)+\" \":a+=\" \"+JSON.stringify(U.default)+\" \",a+=\"; \"}}}else if(\"array\"==S.type&&Array.isArray(e.schema.items)){var H=e.schema.items;if(H){D=-1;for(var U,G=H.length-1;D<G;)if(void 0!==(U=H[D+=1]).default){q=m+\"[\"+D+\"]\";if(e.compositeRule){if(e.opts.strictDefaults){b=\"default is ignored for: \"+q;if(\"log\"!==e.opts.strictDefaults)throw new Error(b);e.logger.warn(b)}}else a+=\" if (\"+q+\" === undefined \",\"empty\"==e.opts.useDefaults&&(a+=\" || \"+q+\" === null || \"+q+\" === '' \"),a+=\" ) \"+q+\" = \",\"shared\"==e.opts.useDefaults?a+=\" \"+e.useDefault(U.default)+\" \":a+=\" \"+JSON.stringify(U.default)+\" \",a+=\"; \"}}}var $=S.rules;if($)for(var W,V=-1,K=$.length-1;V<K;)if(Z(W=$[V+=1])){var J=W.code(e,W.keyword,S.type);J&&(a+=\" \"+J+\" \",h&&(x+=\"}\"))}if(h&&(a+=\" \"+x+\" \",x=\"\"),S.type&&(a+=\" } \",k&&k===S.type&&!j)){a+=\" else { \";var Y;d=e.schemaPath+\".type\",f=e.errSchemaPath+\"/type\";(Y=Y||[]).push(a),a=\"\",!1!==e.createErrors?(a+=\" { keyword: 'type' , dataPath: (dataPath || '') + \"+e.errorPath+\" , schemaPath: \"+e.util.toQuotedString(f)+\" , params: { type: '\",a+=_?\"\"+k.join(\",\"):\"\"+k,a+=\"' } \",!1!==e.opts.messages&&(a+=\" , message: 'should be \",a+=_?\"\"+k.join(\",\"):\"\"+k,a+=\"' \"),e.opts.verbose&&(a+=\" , schema: validate.schema\"+d+\" , parentSchema: validate.schema\"+e.schemaPath+\" , data: \"+m+\" \"),a+=\" } \"):a+=\" {} \";y=a;a=Y.pop(),!e.compositeRule&&h?e.async?a+=\" throw new ValidationError([\"+y+\"]); \":a+=\" validate.errors = [\"+y+\"]; return false; \":a+=\" var err = \"+y+\";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \",a+=\" } \"}h&&(a+=\" if (errors === \",a+=v?\"0\":\"errs_\"+u,a+=\") { \",w+=\"}\")}}function X(e){for(var t=e.rules,n=0;n<t.length;n++)if(Z(t[n]))return!0}function Z(t){return void 0!==e.schema[t.keyword]||t.implements&&function(t){for(var n=t.implements,a=0;a<n.length;a++)if(void 0!==e.schema[n[a]])return!0}(t)}return h&&(a+=\" \"+w+\" \"),v?(r?(a+=\" if (errors === 0) return data;           \",a+=\" else throw new ValidationError(vErrors); \"):(a+=\" validate.errors = vErrors; \",a+=\" return errors === 0;       \"),a+=\" }; return validate;\"):a+=\" var \"+g+\" = errors === errs_\"+u+\";\",a}},{}],230:[function(e,t,n){\"use strict\";var a=/^[a-z_$][a-z0-9_$-]*$/i,r=e(\"./dotjs/custom\"),i=e(\"./definition_schema\");t.exports={add:function(e,t){var n=this.RULES;if(n.keywords[e])throw new Error(\"Keyword \"+e+\" is already defined\");if(!a.test(e))throw new Error(\"Keyword \"+e+\" is not a valid identifier\");if(t){this.validateKeyword(t,!0);var i=t.type;if(Array.isArray(i))for(var o=0;o<i.length;o++)c(e,i[o],t);else c(e,i,t);var s=t.metaSchema;s&&(t.$data&&this._opts.$data&&(s={anyOf:[s,{$ref:\"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\"}]}),t.validateSchema=this.compile(s,!0))}function c(e,t,a){for(var i,o=0;o<n.length;o++){var s=n[o];if(s.type==t){i=s;break}}i||(i={type:t,rules:[]},n.push(i));var c={keyword:e,definition:a,custom:!0,code:r,implements:a.implements};i.rules.push(c),n.custom[e]=c}return n.keywords[e]=n.all[e]=!0,this},get:function(e){var t=this.RULES.custom[e];return t?t.definition:this.RULES.keywords[e]||!1},remove:function(e){var t=this.RULES;delete t.keywords[e],delete t.all[e],delete t.custom[e];for(var n=0;n<t.length;n++)for(var a=t[n].rules,r=0;r<a.length;r++)if(a[r].keyword==e){a.splice(r,1);break}return this},validate:function e(t,n){e.errors=null;var a=this._validateKeyword=this._validateKeyword||this.compile(i,!0);if(a(t))return!0;if(e.errors=a.errors,n)throw new Error(\"custom keyword definition is invalid: \"+this.errorsText(a.errors));return!1}}},{\"./definition_schema\":203,\"./dotjs/custom\":213}],231:[function(e,t,n){t.exports={$schema:\"http://json-schema.org/draft-07/schema#\",$id:\"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\",description:\"Meta-schema for $data reference (JSON Schema extension proposal)\",type:\"object\",required:[\"$data\"],properties:{$data:{type:\"string\",anyOf:[{format:\"relative-json-pointer\"},{format:\"json-pointer\"}]}},additionalProperties:!1}},{}],232:[function(e,t,n){t.exports={$schema:\"http://json-schema.org/draft-07/schema#\",$id:\"http://json-schema.org/draft-07/schema#\",title:\"Core schema meta-schema\",definitions:{schemaArray:{type:\"array\",minItems:1,items:{$ref:\"#\"}},nonNegativeInteger:{type:\"integer\",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:\"#/definitions/nonNegativeInteger\"},{default:0}]},simpleTypes:{enum:[\"array\",\"boolean\",\"integer\",\"null\",\"number\",\"object\",\"string\"]},stringArray:{type:\"array\",items:{type:\"string\"},uniqueItems:!0,default:[]}},type:[\"object\",\"boolean\"],properties:{$id:{type:\"string\",format:\"uri-reference\"},$schema:{type:\"string\",format:\"uri\"},$ref:{type:\"string\",format:\"uri-reference\"},$comment:{type:\"string\"},title:{type:\"string\"},description:{type:\"string\"},default:!0,readOnly:{type:\"boolean\",default:!1},examples:{type:\"array\",items:!0},multipleOf:{type:\"number\",exclusiveMinimum:0},maximum:{type:\"number\"},exclusiveMaximum:{type:\"number\"},minimum:{type:\"number\"},exclusiveMinimum:{type:\"number\"},maxLength:{$ref:\"#/definitions/nonNegativeInteger\"},minLength:{$ref:\"#/definitions/nonNegativeIntegerDefault0\"},pattern:{type:\"string\",format:\"regex\"},additionalItems:{$ref:\"#\"},items:{anyOf:[{$ref:\"#\"},{$ref:\"#/definitions/schemaArray\"}],default:!0},maxItems:{$ref:\"#/definitions/nonNegativeInteger\"},minItems:{$ref:\"#/definitions/nonNegativeIntegerDefault0\"},uniqueItems:{type:\"boolean\",default:!1},contains:{$ref:\"#\"},maxProperties:{$ref:\"#/definitions/nonNegativeInteger\"},minProperties:{$ref:\"#/definitions/nonNegativeIntegerDefault0\"},required:{$ref:\"#/definitions/stringArray\"},additionalProperties:{$ref:\"#\"},definitions:{type:\"object\",additionalProperties:{$ref:\"#\"},default:{}},properties:{type:\"object\",additionalProperties:{$ref:\"#\"},default:{}},patternProperties:{type:\"object\",additionalProperties:{$ref:\"#\"},propertyNames:{format:\"regex\"},default:{}},dependencies:{type:\"object\",additionalProperties:{anyOf:[{$ref:\"#\"},{$ref:\"#/definitions/stringArray\"}]}},propertyNames:{$ref:\"#\"},const:!0,enum:{type:\"array\",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:\"#/definitions/simpleTypes\"},{type:\"array\",items:{$ref:\"#/definitions/simpleTypes\"},minItems:1,uniqueItems:!0}]},format:{type:\"string\"},contentMediaType:{type:\"string\"},contentEncoding:{type:\"string\"},if:{$ref:\"#\"},then:{$ref:\"#\"},else:{$ref:\"#\"},allOf:{$ref:\"#/definitions/schemaArray\"},anyOf:{$ref:\"#/definitions/schemaArray\"},oneOf:{$ref:\"#/definitions/schemaArray\"},not:{$ref:\"#\"}},default:!0}},{}],233:[function(e,t,n){t.exports=function(e,t,n){if(e.filter)return e.filter(t,n);if(null==e)throw new TypeError;if(\"function\"!=typeof t)throw new TypeError;for(var r=[],i=0;i<e.length;i++)if(a.call(e,i)){var o=e[i];t.call(n,o,i,e)&&r.push(o)}return r};var a=Object.prototype.hasOwnProperty},{}],234:[function(e,t,n){(function(n){(function(){\"use strict\";function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,\"value\"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function i(e,t){return!t||\"object\"!==p(t)&&\"function\"!=typeof t?o(e):t}function o(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}function s(e){var t=\"function\"==typeof Map?new Map:void 0;return s=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf(\"[native code]\")))return e;var n;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return c(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),u(a,e)},s(e)}function c(e,t,n){return c=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var a=[null];a.push.apply(a,t);var r=new(Function.bind.apply(e,a));return n&&u(r,n.prototype),r},c.apply(null,arguments)}function u(e,t){return u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},u(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function p(e){return p=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},p(e)}var d=e(\"util/\").inspect,f=e(\"../errors\").codes.ERR_INVALID_ARG_TYPE;function h(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-t.length,n)===t}var m=\"\",g=\"\",y=\"\",v=\"\",b={deepStrictEqual:\"Expected values to be strictly deep-equal:\",strictEqual:\"Expected values to be strictly equal:\",strictEqualObject:'Expected \"actual\" to be reference-equal to \"expected\":',deepEqual:\"Expected values to be loosely deep-equal:\",equal:\"Expected values to be loosely equal:\",notDeepStrictEqual:'Expected \"actual\" not to be strictly deep-equal to:',notStrictEqual:'Expected \"actual\" to be strictly unequal to:',notStrictEqualObject:'Expected \"actual\" not to be reference-equal to \"expected\":',notDeepEqual:'Expected \"actual\" not to be loosely deep-equal to:',notEqual:'Expected \"actual\" to be loosely unequal to:',notIdentical:\"Values identical but not reference-equal:\"};function x(e){var t=Object.keys(e),n=Object.create(Object.getPrototypeOf(e));return t.forEach((function(t){n[t]=e[t]})),Object.defineProperty(n,\"message\",{value:e.message}),n}function w(e){return d(e,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}function k(e,t,a){var r=\"\",i=\"\",o=0,s=\"\",c=!1,u=w(e),l=u.split(\"\\n\"),d=w(t).split(\"\\n\"),f=0,x=\"\";if(\"strictEqual\"===a&&\"object\"===p(e)&&\"object\"===p(t)&&null!==e&&null!==t&&(a=\"strictEqualObject\"),1===l.length&&1===d.length&&l[0]!==d[0]){var k=l[0].length+d[0].length;if(k<=10){if(!(\"object\"===p(e)&&null!==e||\"object\"===p(t)&&null!==t||0===e&&0===t))return\"\".concat(b[a],\"\\n\\n\")+\"\".concat(l[0],\" !== \").concat(d[0],\"\\n\")}else if(\"strictEqualObject\"!==a){if(k<(n.stderr&&n.stderr.isTTY?n.stderr.columns:80)){for(;l[0][f]===d[0][f];)f++;f>2&&(x=\"\\n  \".concat(function(e,t){if(t=Math.floor(t),0==e.length||0==t)return\"\";var n=e.length*t;for(t=Math.floor(Math.log(t)/Math.log(2));t;)e+=e,t--;return e+e.substring(0,n-e.length)}(\" \",f),\"^\"),f=0)}}}for(var _=l[l.length-1],j=d[d.length-1];_===j&&(f++<2?s=\"\\n  \".concat(_).concat(s):r=_,l.pop(),d.pop(),0!==l.length&&0!==d.length);)_=l[l.length-1],j=d[d.length-1];var S=Math.max(l.length,d.length);if(0===S){var A=u.split(\"\\n\");if(A.length>30)for(A[26]=\"\".concat(m,\"...\").concat(v);A.length>27;)A.pop();return\"\".concat(b.notIdentical,\"\\n\\n\").concat(A.join(\"\\n\"),\"\\n\")}f>3&&(s=\"\\n\".concat(m,\"...\").concat(v).concat(s),c=!0),\"\"!==r&&(s=\"\\n  \".concat(r).concat(s),r=\"\");var E=0,C=b[a]+\"\\n\".concat(g,\"+ actual\").concat(v,\" \").concat(y,\"- expected\").concat(v),T=\" \".concat(m,\"...\").concat(v,\" Lines skipped\");for(f=0;f<S;f++){var P=f-o;if(l.length<f+1)P>1&&f>2&&(P>4?(i+=\"\\n\".concat(m,\"...\").concat(v),c=!0):P>3&&(i+=\"\\n  \".concat(d[f-2]),E++),i+=\"\\n  \".concat(d[f-1]),E++),o=f,r+=\"\\n\".concat(y,\"-\").concat(v,\" \").concat(d[f]),E++;else if(d.length<f+1)P>1&&f>2&&(P>4?(i+=\"\\n\".concat(m,\"...\").concat(v),c=!0):P>3&&(i+=\"\\n  \".concat(l[f-2]),E++),i+=\"\\n  \".concat(l[f-1]),E++),o=f,i+=\"\\n\".concat(g,\"+\").concat(v,\" \").concat(l[f]),E++;else{var D=d[f],O=l[f],M=O!==D&&(!h(O,\",\")||O.slice(0,-1)!==D);M&&h(D,\",\")&&D.slice(0,-1)===O&&(M=!1,O+=\",\"),M?(P>1&&f>2&&(P>4?(i+=\"\\n\".concat(m,\"...\").concat(v),c=!0):P>3&&(i+=\"\\n  \".concat(l[f-2]),E++),i+=\"\\n  \".concat(l[f-1]),E++),o=f,i+=\"\\n\".concat(g,\"+\").concat(v,\" \").concat(O),r+=\"\\n\".concat(y,\"-\").concat(v,\" \").concat(D),E+=2):(i+=r,r=\"\",1!==P&&0!==f||(i+=\"\\n  \".concat(O),E++))}if(E>20&&f<S-2)return\"\".concat(C).concat(T,\"\\n\").concat(i,\"\\n\").concat(m,\"...\").concat(v).concat(r,\"\\n\")+\"\".concat(m,\"...\").concat(v)}return\"\".concat(C).concat(c?T:\"\",\"\\n\").concat(i).concat(r).concat(s).concat(x)}var _=function(e){function t(e){var a;if(function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t),\"object\"!==p(e)||null===e)throw new f(\"options\",\"Object\",e);var r=e.message,s=e.operator,c=e.stackStartFn,u=e.actual,d=e.expected,h=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=r)a=i(this,l(t).call(this,String(r)));else if(n.stderr&&n.stderr.isTTY&&(n.stderr&&n.stderr.getColorDepth&&1!==n.stderr.getColorDepth()?(m=\"\u001b[34m\",g=\"\u001b[32m\",v=\"\u001b[39m\",y=\"\u001b[31m\"):(m=\"\",g=\"\",v=\"\",y=\"\")),\"object\"===p(u)&&null!==u&&\"object\"===p(d)&&null!==d&&\"stack\"in u&&u instanceof Error&&\"stack\"in d&&d instanceof Error&&(u=x(u),d=x(d)),\"deepStrictEqual\"===s||\"strictEqual\"===s)a=i(this,l(t).call(this,k(u,d,s)));else if(\"notDeepStrictEqual\"===s||\"notStrictEqual\"===s){var _=b[s],j=w(u).split(\"\\n\");if(\"notStrictEqual\"===s&&\"object\"===p(u)&&null!==u&&(_=b.notStrictEqualObject),j.length>30)for(j[26]=\"\".concat(m,\"...\").concat(v);j.length>27;)j.pop();a=1===j.length?i(this,l(t).call(this,\"\".concat(_,\" \").concat(j[0]))):i(this,l(t).call(this,\"\".concat(_,\"\\n\\n\").concat(j.join(\"\\n\"),\"\\n\")))}else{var S=w(u),A=\"\",E=b[s];\"notDeepEqual\"===s||\"notEqual\"===s?(S=\"\".concat(b[s],\"\\n\\n\").concat(S)).length>1024&&(S=\"\".concat(S.slice(0,1021),\"...\")):(A=\"\".concat(w(d)),S.length>512&&(S=\"\".concat(S.slice(0,509),\"...\")),A.length>512&&(A=\"\".concat(A.slice(0,509),\"...\")),\"deepEqual\"===s||\"equal\"===s?S=\"\".concat(E,\"\\n\\n\").concat(S,\"\\n\\nshould equal\\n\\n\"):A=\" \".concat(s,\" \").concat(A)),a=i(this,l(t).call(this,\"\".concat(S).concat(A)))}return Error.stackTraceLimit=h,a.generatedMessage=!r,Object.defineProperty(o(a),\"name\",{value:\"AssertionError [ERR_ASSERTION]\",enumerable:!1,writable:!0,configurable:!0}),a.code=\"ERR_ASSERTION\",a.actual=u,a.expected=d,a.operator=s,Error.captureStackTrace&&Error.captureStackTrace(o(a),c),a.stack,a.name=\"AssertionError\",i(a)}var s,c,h;return function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),s=t,c=[{key:\"toString\",value:function(){return\"\".concat(this.name,\" [\").concat(this.code,\"]: \").concat(this.message)}},{key:d.custom,value:function(e,t){return d(this,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);\"function\"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},t,{customInspect:!1,depth:0}))}}],c&&r(s.prototype,c),h&&r(s,h),t}(s(Error));t.exports=_}).call(this)}).call(this,e(\"_process\"))},{\"../errors\":235,_process:\"_process\",\"util/\":572}],235:[function(e,t,n){\"use strict\";function a(e){return a=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},a(e)}function r(e,t){return!t||\"object\"!==a(t)&&\"function\"!=typeof t?function(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}(e):t}function i(e){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},i(e)}function o(e,t){return o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},o(e,t)}var s,c,u={};function l(e,t,n){n||(n=Error);var a=function(n){function a(n,o,s){var c;return function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,a),c=r(this,i(a).call(this,function(e,n,a){return\"string\"==typeof t?t:t(e,n,a)}(n,o,s))),c.code=e,c}return function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(a,n),a}(n);u[e]=a}function p(e,t){if(Array.isArray(e)){var n=e.length;return e=e.map((function(e){return String(e)})),n>2?\"one of \".concat(t,\" \").concat(e.slice(0,n-1).join(\", \"),\", or \")+e[n-1]:2===n?\"one of \".concat(t,\" \").concat(e[0],\" or \").concat(e[1]):\"of \".concat(t,\" \").concat(e[0])}return\"of \".concat(t,\" \").concat(String(e))}l(\"ERR_AMBIGUOUS_ARGUMENT\",'The \"%s\" argument is ambiguous. %s',TypeError),l(\"ERR_INVALID_ARG_TYPE\",(function(t,n,r){var i,o,c,u;if(void 0===s&&(s=e(\"../assert\")),s(\"string\"==typeof t,\"'name' must be a string\"),\"string\"==typeof n&&(o=\"not \",n.substr(!c||c<0?0:+c,o.length)===o)?(i=\"must not be\",n=n.replace(/^not /,\"\")):i=\"must be\",function(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-t.length,n)===t}(t,\" argument\"))u=\"The \".concat(t,\" \").concat(i,\" \").concat(p(n,\"type\"));else{var l=function(e,t,n){return\"number\"!=typeof n&&(n=0),!(n+t.length>e.length)&&-1!==e.indexOf(t,n)}(t,\".\")?\"property\":\"argument\";u='The \"'.concat(t,'\" ').concat(l,\" \").concat(i,\" \").concat(p(n,\"type\"))}return u+=\". Received type \".concat(a(r))}),TypeError),l(\"ERR_INVALID_ARG_VALUE\",(function(t,n){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"is invalid\";void 0===c&&(c=e(\"util/\"));var r=c.inspect(n);return r.length>128&&(r=\"\".concat(r.slice(0,128),\"...\")),\"The argument '\".concat(t,\"' \").concat(a,\". Received \").concat(r)}),TypeError,RangeError),l(\"ERR_INVALID_RETURN_VALUE\",(function(e,t,n){var r;return r=n&&n.constructor&&n.constructor.name?\"instance of \".concat(n.constructor.name):\"type \".concat(a(n)),\"Expected \".concat(e,' to be returned from the \"').concat(t,'\"')+\" function but got \".concat(r,\".\")}),TypeError),l(\"ERR_MISSING_ARGS\",(function(){for(var t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];void 0===s&&(s=e(\"../assert\")),s(n.length>0,\"At least one arg needs to be specified\");var r=\"The \",i=n.length;switch(n=n.map((function(e){return'\"'.concat(e,'\"')})),i){case 1:r+=\"\".concat(n[0],\" argument\");break;case 2:r+=\"\".concat(n[0],\" and \").concat(n[1],\" arguments\");break;default:r+=n.slice(0,i-1).join(\", \"),r+=\", and \".concat(n[i-1],\" arguments\")}return\"\".concat(r,\" must be specified\")}),TypeError),t.exports.codes=u},{\"../assert\":\"assert\",\"util/\":572}],236:[function(e,t,n){\"use strict\";function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],a=!0,r=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(a=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);a=!0);}catch(c){r=!0,i=c}finally{try{a||null==s.return||s.return()}finally{if(r)throw i}}return n}(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}()}function r(e){return r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},r(e)}var i=void 0!==/a/g.flags,o=function(e){var t=[];return e.forEach((function(e){return t.push(e)})),t},s=function(e){var t=[];return e.forEach((function(e,n){return t.push([n,e])})),t},c=Object.is?Object.is:e(\"object-is\"),u=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},l=Number.isNaN?Number.isNaN:e(\"is-nan\");function p(e){return e.call.bind(e)}var d=p(Object.prototype.hasOwnProperty),f=p(Object.prototype.propertyIsEnumerable),h=p(Object.prototype.toString),m=e(\"util/\").types,g=m.isAnyArrayBuffer,y=m.isArrayBufferView,v=m.isDate,b=m.isMap,x=m.isRegExp,w=m.isSet,k=m.isNativeError,_=m.isBoxedPrimitive,j=m.isNumberObject,S=m.isStringObject,A=m.isBooleanObject,E=m.isBigIntObject,C=m.isSymbolObject,T=m.isFloat32Array,P=m.isFloat64Array;function D(e){if(0===e.length||e.length>10)return!0;for(var t=0;t<e.length;t++){var n=e.charCodeAt(t);if(n<48||n>57)return!0}return 10===e.length&&e>=Math.pow(2,32)}function O(e){return Object.keys(e).filter(D).concat(u(e).filter(Object.prototype.propertyIsEnumerable.bind(e)))}function M(e,t){if(e===t)return 0;for(var n=e.length,a=t.length,r=0,i=Math.min(n,a);r<i;++r)if(e[r]!==t[r]){n=e[r],a=t[r];break}return n<a?-1:a<n?1:0}function N(e,t,n,a){if(e===t)return 0!==e||(!n||c(e,t));if(n){if(\"object\"!==r(e))return\"number\"==typeof e&&l(e)&&l(t);if(\"object\"!==r(t)||null===e||null===t)return!1;if(Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1}else{if(null===e||\"object\"!==r(e))return(null===t||\"object\"!==r(t))&&e==t;if(null===t||\"object\"!==r(t))return!1}var o,s,u,p,d=h(e);if(d!==h(t))return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;var f=O(e),m=O(t);return f.length===m.length&&R(e,t,n,a,1,f)}if(\"[object Object]\"===d&&(!b(e)&&b(t)||!w(e)&&w(t)))return!1;if(v(e)){if(!v(t)||Date.prototype.getTime.call(e)!==Date.prototype.getTime.call(t))return!1}else if(x(e)){if(!x(t)||(u=e,p=t,!(i?u.source===p.source&&u.flags===p.flags:RegExp.prototype.toString.call(u)===RegExp.prototype.toString.call(p))))return!1}else if(k(e)||e instanceof Error){if(e.message!==t.message||e.name!==t.name)return!1}else{if(y(e)){if(n||!T(e)&&!P(e)){if(!function(e,t){return e.byteLength===t.byteLength&&0===M(new Uint8Array(e.buffer,e.byteOffset,e.byteLength),new Uint8Array(t.buffer,t.byteOffset,t.byteLength))}(e,t))return!1}else if(!function(e,t){if(e.byteLength!==t.byteLength)return!1;for(var n=0;n<e.byteLength;n++)if(e[n]!==t[n])return!1;return!0}(e,t))return!1;var D=O(e),N=O(t);return D.length===N.length&&R(e,t,n,a,0,D)}if(w(e))return!(!w(t)||e.size!==t.size)&&R(e,t,n,a,2);if(b(e))return!(!b(t)||e.size!==t.size)&&R(e,t,n,a,3);if(g(e)){if(s=t,(o=e).byteLength!==s.byteLength||0!==M(new Uint8Array(o),new Uint8Array(s)))return!1}else if(_(e)&&!function(e,t){return j(e)?j(t)&&c(Number.prototype.valueOf.call(e),Number.prototype.valueOf.call(t)):S(e)?S(t)&&String.prototype.valueOf.call(e)===String.prototype.valueOf.call(t):A(e)?A(t)&&Boolean.prototype.valueOf.call(e)===Boolean.prototype.valueOf.call(t):E(e)?E(t)&&BigInt.prototype.valueOf.call(e)===BigInt.prototype.valueOf.call(t):C(t)&&Symbol.prototype.valueOf.call(e)===Symbol.prototype.valueOf.call(t)}(e,t))return!1}return R(e,t,n,a,0)}function B(e,t){return t.filter((function(t){return f(e,t)}))}function R(e,t,n,i,c,l){if(5===arguments.length){l=Object.keys(e);var p=Object.keys(t);if(l.length!==p.length)return!1}for(var h=0;h<l.length;h++)if(!d(t,l[h]))return!1;if(n&&5===arguments.length){var m=u(e);if(0!==m.length){var g=0;for(h=0;h<m.length;h++){var y=m[h];if(f(e,y)){if(!f(t,y))return!1;l.push(y),g++}else if(f(t,y))return!1}var v=u(t);if(m.length!==v.length&&B(t,v).length!==g)return!1}else{var b=u(t);if(0!==b.length&&0!==B(t,b).length)return!1}}if(0===l.length&&(0===c||1===c&&0===e.length||0===e.size))return!0;if(void 0===i)i={val1:new Map,val2:new Map,position:0};else{var x=i.val1.get(e);if(void 0!==x){var w=i.val2.get(t);if(void 0!==w)return x===w}i.position++}i.val1.set(e,i.position),i.val2.set(t,i.position);var k=function(e,t,n,i,c,u){var l=0;if(2===u){if(!function(e,t,n,a){for(var i=null,s=o(e),c=0;c<s.length;c++){var u=s[c];if(\"object\"===r(u)&&null!==u)null===i&&(i=new Set),i.add(u);else if(!t.has(u)){if(n)return!1;if(!F(e,t,u))return!1;null===i&&(i=new Set),i.add(u)}}if(null!==i){for(var l=o(t),p=0;p<l.length;p++){var d=l[p];if(\"object\"===r(d)&&null!==d){if(!L(i,d,n,a))return!1}else if(!n&&!e.has(d)&&!L(i,d,n,a))return!1}return 0===i.size}return!0}(e,t,n,c))return!1}else if(3===u){if(!function(e,t,n,i){for(var o=null,c=s(e),u=0;u<c.length;u++){var l=a(c[u],2),p=l[0],d=l[1];if(\"object\"===r(p)&&null!==p)null===o&&(o=new Set),o.add(p);else{var f=t.get(p);if(void 0===f&&!t.has(p)||!N(d,f,n,i)){if(n)return!1;if(!z(e,t,p,d,i))return!1;null===o&&(o=new Set),o.add(p)}}}if(null!==o){for(var h=s(t),m=0;m<h.length;m++){var g=a(h[m],2),y=(p=g[0],g[1]);if(\"object\"===r(p)&&null!==p){if(!q(o,e,p,y,n,i))return!1}else if(!(n||e.has(p)&&N(e.get(p),y,!1,i)||q(o,e,p,y,!1,i)))return!1}return 0===o.size}return!0}(e,t,n,c))return!1}else if(1===u)for(;l<e.length;l++){if(!d(e,l)){if(d(t,l))return!1;for(var p=Object.keys(e);l<p.length;l++){var f=p[l];if(!d(t,f)||!N(e[f],t[f],n,c))return!1}return p.length===Object.keys(t).length}if(!d(t,l)||!N(e[l],t[l],n,c))return!1}for(l=0;l<i.length;l++){var h=i[l];if(!N(e[h],t[h],n,c))return!1}return!0}(e,t,n,l,i,c);return i.val1.delete(e),i.val2.delete(t),k}function L(e,t,n,a){for(var r=o(e),i=0;i<r.length;i++){var s=r[i];if(N(t,s,n,a))return e.delete(s),!0}return!1}function I(e){switch(r(e)){case\"undefined\":return null;case\"object\":return;case\"symbol\":return!1;case\"string\":e=+e;case\"number\":if(l(e))return!1}return!0}function F(e,t,n){var a=I(n);return null!=a?a:t.has(a)&&!e.has(a)}function z(e,t,n,a,r){var i=I(n);if(null!=i)return i;var o=t.get(i);return!(void 0===o&&!t.has(i)||!N(a,o,!1,r))&&(!e.has(i)&&N(a,o,!1,r))}function q(e,t,n,a,r,i){for(var s=o(e),c=0;c<s.length;c++){var u=s[c];if(N(n,u,r,i)&&N(a,t.get(u),r,i))return e.delete(u),!0}return!1}t.exports={isDeepEqual:function(e,t){return N(e,t,false)},isDeepStrictEqual:function(e,t){return N(e,t,true)}}},{\"is-nan\":387,\"object-is\":421,\"util/\":572}],237:[function(e,t,n){function a(){var e=[].slice.call(arguments);function t(t,n){Object.keys(n).forEach((function(a){~e.indexOf(a)||(t[a]=n[a])}))}return function(){for(var e=[].slice.call(arguments),n=0,a={};n<e.length;n++)t(a,e[n]);return a}}function r(e,t,n){var i=a(\"name\",\"message\",\"stack\",\"constructor\",\"toJSON\")(t||{});for(var o in this.message=e||\"Unspecified AssertionError\",this.showDiff=!1,i)this[o]=i[o];if(n=n||r,Error.captureStackTrace)Error.captureStackTrace(this,n);else try{throw new Error}catch(s){this.stack=s.stack}}t.exports=r,r.prototype=Object.create(Error.prototype),r.prototype.name=\"AssertionError\",r.prototype.constructor=r,r.prototype.toJSON=function(e){var t=a(\"constructor\",\"toJSON\",\"stack\")({name:this.name},this);return!1!==e&&this.stack&&(t.stack=this.stack),t}},{}],238:[function(e,t,n){(function(n){(function(){\"use strict\";var a=e(\"array-filter\");t.exports=function(){return a([\"BigInt64Array\",\"BigUint64Array\",\"Float32Array\",\"Float64Array\",\"Int16Array\",\"Int32Array\",\"Int8Array\",\"Uint16Array\",\"Uint32Array\",\"Uint8Array\",\"Uint8ClampedArray\"],(function(e){return\"function\"==typeof n[e]}))}}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{\"array-filter\":233}],239:[function(e,t,n){\"use strict\";n.byteLength=function(e){var t=c(e),n=t[0],a=t[1];return 3*(n+a)/4-a},n.toByteArray=function(e){var t,n,a=c(e),o=a[0],s=a[1],u=new i(function(e,t,n){return 3*(t+n)/4-n}(0,o,s)),l=0,p=s>0?o-4:o;for(n=0;n<p;n+=4)t=r[e.charCodeAt(n)]<<18|r[e.charCodeAt(n+1)]<<12|r[e.charCodeAt(n+2)]<<6|r[e.charCodeAt(n+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;2===s&&(t=r[e.charCodeAt(n)]<<2|r[e.charCodeAt(n+1)]>>4,u[l++]=255&t);1===s&&(t=r[e.charCodeAt(n)]<<10|r[e.charCodeAt(n+1)]<<4|r[e.charCodeAt(n+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t);return u},n.fromByteArray=function(e){for(var t,n=e.length,r=n%3,i=[],o=16383,s=0,c=n-r;s<c;s+=o)i.push(u(e,s,s+o>c?c:s+o));1===r?(t=e[n-1],i.push(a[t>>2]+a[t<<4&63]+\"==\")):2===r&&(t=(e[n-2]<<8)+e[n-1],i.push(a[t>>10]+a[t>>4&63]+a[t<<2&63]+\"=\"));return i.join(\"\")};for(var a=[],r=[],i=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,o=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",s=0;s<64;++s)a[s]=o[s],r[o.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error(\"Invalid string. Length must be a multiple of 4\");var n=e.indexOf(\"=\");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,n){for(var r,i,o=[],s=t;s<n;s+=3)r=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),o.push(a[(i=r)>>18&63]+a[i>>12&63]+a[i>>6&63]+a[63&i]);return o.join(\"\")}r[\"-\".charCodeAt(0)]=62,r[\"_\".charCodeAt(0)]=63},{}],240:[function(e,t,n){t.exports={trueFunc:function(){return!0},falseFunc:function(){return!1}}},{}],241:[function(e,t,n){},{}],242:[function(e,t,n){\"function\"==typeof Object.create?t.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},{}],243:[function(e,t,n){t.exports=function(e){return e&&\"object\"==typeof e&&\"function\"==typeof e.copy&&\"function\"==typeof e.fill&&\"function\"==typeof e.readUInt8}},{}],244:[function(e,t,n){(function(t){(function(){\"use strict\";const t=e(\"base64-js\"),a=e(\"ieee754\"),r=\"function\"==typeof Symbol&&\"function\"==typeof Symbol.for?Symbol.for(\"nodejs.util.inspect.custom\"):null;n.Buffer=s,n.SlowBuffer=function(e){+e!=e&&(e=0);return s.alloc(+e)},n.INSPECT_MAX_BYTES=50;const i=2147483647;function o(e){if(e>i)throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,s.prototype),t}function s(e,t,n){if(\"number\"==typeof e){if(\"string\"==typeof t)throw new TypeError('The \"string\" argument must be of type string. Received type number');return l(e)}return c(e,t,n)}function c(e,t,n){if(\"string\"==typeof e)return function(e,t){\"string\"==typeof t&&\"\"!==t||(t=\"utf8\");if(!s.isEncoding(t))throw new TypeError(\"Unknown encoding: \"+t);const n=0|h(e,t);let a=o(n);const r=a.write(e,t);r!==n&&(a=a.slice(0,r));return a}(e,t);if(ArrayBuffer.isView(e))return function(e){if(K(e,Uint8Array)){const t=new Uint8Array(e);return d(t.buffer,t.byteOffset,t.byteLength)}return p(e)}(e);if(null==e)throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \"+typeof e);if(K(e,ArrayBuffer)||e&&K(e.buffer,ArrayBuffer))return d(e,t,n);if(\"undefined\"!=typeof SharedArrayBuffer&&(K(e,SharedArrayBuffer)||e&&K(e.buffer,SharedArrayBuffer)))return d(e,t,n);if(\"number\"==typeof e)throw new TypeError('The \"value\" argument must not be of type number. Received type number');const a=e.valueOf&&e.valueOf();if(null!=a&&a!==e)return s.from(a,t,n);const r=function(e){if(s.isBuffer(e)){const t=0|f(e.length),n=o(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return\"number\"!=typeof e.length||J(e.length)?o(0):p(e);if(\"Buffer\"===e.type&&Array.isArray(e.data))return p(e.data)}(e);if(r)return r;if(\"undefined\"!=typeof Symbol&&null!=Symbol.toPrimitive&&\"function\"==typeof e[Symbol.toPrimitive])return s.from(e[Symbol.toPrimitive](\"string\"),t,n);throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \"+typeof e)}function u(e){if(\"number\"!=typeof e)throw new TypeError('\"size\" argument must be of type number');if(e<0)throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"')}function l(e){return u(e),o(e<0?0:0|f(e))}function p(e){const t=e.length<0?0:0|f(e.length),n=o(t);for(let a=0;a<t;a+=1)n[a]=255&e[a];return n}function d(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('\"offset\" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('\"length\" is outside of buffer bounds');let a;return a=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(a,s.prototype),a}function f(e){if(e>=i)throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\"+i.toString(16)+\" bytes\");return 0|e}function h(e,t){if(s.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||K(e,ArrayBuffer))return e.byteLength;if(\"string\"!=typeof e)throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,a=arguments.length>2&&!0===arguments[2];if(!a&&0===n)return 0;let r=!1;for(;;)switch(t){case\"ascii\":case\"latin1\":case\"binary\":return n;case\"utf8\":case\"utf-8\":return $(e).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return 2*n;case\"hex\":return n>>>1;case\"base64\":return W(e).length;default:if(r)return a?-1:$(e).length;t=(\"\"+t).toLowerCase(),r=!0}}function m(e,t,n){let a=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return\"\";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return\"\";if((n>>>=0)<=(t>>>=0))return\"\";for(e||(e=\"utf8\");;)switch(e){case\"hex\":return T(this,t,n);case\"utf8\":case\"utf-8\":return S(this,t,n);case\"ascii\":return E(this,t,n);case\"latin1\":case\"binary\":return C(this,t,n);case\"base64\":return j(this,t,n);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return P(this,t,n);default:if(a)throw new TypeError(\"Unknown encoding: \"+e);e=(e+\"\").toLowerCase(),a=!0}}function g(e,t,n){const a=e[t];e[t]=e[n],e[n]=a}function y(e,t,n,a,r){if(0===e.length)return-1;if(\"string\"==typeof n?(a=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),J(n=+n)&&(n=r?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(r)return-1;n=e.length-1}else if(n<0){if(!r)return-1;n=0}if(\"string\"==typeof t&&(t=s.from(t,a)),s.isBuffer(t))return 0===t.length?-1:v(e,t,n,a,r);if(\"number\"==typeof t)return t&=255,\"function\"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):v(e,[t],n,a,r);throw new TypeError(\"val must be string, number or Buffer\")}function v(e,t,n,a,r){let i,o=1,s=e.length,c=t.length;if(void 0!==a&&(\"ucs2\"===(a=String(a).toLowerCase())||\"ucs-2\"===a||\"utf16le\"===a||\"utf-16le\"===a)){if(e.length<2||t.length<2)return-1;o=2,s/=2,c/=2,n/=2}function u(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(r){let a=-1;for(i=n;i<s;i++)if(u(e,i)===u(t,-1===a?0:i-a)){if(-1===a&&(a=i),i-a+1===c)return a*o}else-1!==a&&(i-=i-a),a=-1}else for(n+c>s&&(n=s-c),i=n;i>=0;i--){let n=!0;for(let a=0;a<c;a++)if(u(e,i+a)!==u(t,a)){n=!1;break}if(n)return i}return-1}function b(e,t,n,a){n=Number(n)||0;const r=e.length-n;a?(a=Number(a))>r&&(a=r):a=r;const i=t.length;let o;for(a>i/2&&(a=i/2),o=0;o<a;++o){const a=parseInt(t.substr(2*o,2),16);if(J(a))return o;e[n+o]=a}return o}function x(e,t,n,a){return V($(t,e.length-n),e,n,a)}function w(e,t,n,a){return V(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,a)}function k(e,t,n,a){return V(W(t),e,n,a)}function _(e,t,n,a){return V(function(e,t){let n,a,r;const i=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)n=e.charCodeAt(o),a=n>>8,r=n%256,i.push(r),i.push(a);return i}(t,e.length-n),e,n,a)}function j(e,n,a){return 0===n&&a===e.length?t.fromByteArray(e):t.fromByteArray(e.slice(n,a))}function S(e,t,n){n=Math.min(e.length,n);const a=[];let r=t;for(;r<n;){const t=e[r];let i=null,o=t>239?4:t>223?3:t>191?2:1;if(r+o<=n){let n,a,s,c;switch(o){case 1:t<128&&(i=t);break;case 2:n=e[r+1],128==(192&n)&&(c=(31&t)<<6|63&n,c>127&&(i=c));break;case 3:n=e[r+1],a=e[r+2],128==(192&n)&&128==(192&a)&&(c=(15&t)<<12|(63&n)<<6|63&a,c>2047&&(c<55296||c>57343)&&(i=c));break;case 4:n=e[r+1],a=e[r+2],s=e[r+3],128==(192&n)&&128==(192&a)&&128==(192&s)&&(c=(15&t)<<18|(63&n)<<12|(63&a)<<6|63&s,c>65535&&c<1114112&&(i=c))}}null===i?(i=65533,o=1):i>65535&&(i-=65536,a.push(i>>>10&1023|55296),i=56320|1023&i),a.push(i),r+=o}return function(e){const t=e.length;if(t<=A)return String.fromCharCode.apply(String,e);let n=\"\",a=0;for(;a<t;)n+=String.fromCharCode.apply(String,e.slice(a,a+=A));return n}(a)}n.kMaxLength=i,s.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),!s.TYPED_ARRAY_SUPPORT&&\"undefined\"!=typeof console&&console.error,Object.defineProperty(s.prototype,\"parent\",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.buffer}}),Object.defineProperty(s.prototype,\"offset\",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.byteOffset}}),s.poolSize=8192,s.from=function(e,t,n){return c(e,t,n)},Object.setPrototypeOf(s.prototype,Uint8Array.prototype),Object.setPrototypeOf(s,Uint8Array),s.alloc=function(e,t,n){return function(e,t,n){return u(e),e<=0?o(e):void 0!==t?\"string\"==typeof n?o(e).fill(t,n):o(e).fill(t):o(e)}(e,t,n)},s.allocUnsafe=function(e){return l(e)},s.allocUnsafeSlow=function(e){return l(e)},s.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==s.prototype},s.compare=function(e,t){if(K(e,Uint8Array)&&(e=s.from(e,e.offset,e.byteLength)),K(t,Uint8Array)&&(t=s.from(t,t.offset,t.byteLength)),!s.isBuffer(e)||!s.isBuffer(t))throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,a=t.length;for(let r=0,i=Math.min(n,a);r<i;++r)if(e[r]!==t[r]){n=e[r],a=t[r];break}return n<a?-1:a<n?1:0},s.isEncoding=function(e){switch(String(e).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return!0;default:return!1}},s.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('\"list\" argument must be an Array of Buffers');if(0===e.length)return s.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const a=s.allocUnsafe(t);let r=0;for(n=0;n<e.length;++n){let t=e[n];if(K(t,Uint8Array))r+t.length>a.length?(s.isBuffer(t)||(t=s.from(t)),t.copy(a,r)):Uint8Array.prototype.set.call(a,t,r);else{if(!s.isBuffer(t))throw new TypeError('\"list\" argument must be an Array of Buffers');t.copy(a,r)}r+=t.length}return a},s.byteLength=h,s.prototype._isBuffer=!0,s.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError(\"Buffer size must be a multiple of 16-bits\");for(let t=0;t<e;t+=2)g(this,t,t+1);return this},s.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError(\"Buffer size must be a multiple of 32-bits\");for(let t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},s.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError(\"Buffer size must be a multiple of 64-bits\");for(let t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},s.prototype.toString=function(){const e=this.length;return 0===e?\"\":0===arguments.length?S(this,0,e):m.apply(this,arguments)},s.prototype.toLocaleString=s.prototype.toString,s.prototype.equals=function(e){if(!s.isBuffer(e))throw new TypeError(\"Argument must be a Buffer\");return this===e||0===s.compare(this,e)},s.prototype.inspect=function(){let e=\"\";const t=n.INSPECT_MAX_BYTES;return e=this.toString(\"hex\",0,t).replace(/(.{2})/g,\"$1 \").trim(),this.length>t&&(e+=\" ... \"),\"<Buffer \"+e+\">\"},r&&(s.prototype[r]=s.prototype.inspect),s.prototype.compare=function(e,t,n,a,r){if(K(e,Uint8Array)&&(e=s.from(e,e.offset,e.byteLength)),!s.isBuffer(e))throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===a&&(a=0),void 0===r&&(r=this.length),t<0||n>e.length||a<0||r>this.length)throw new RangeError(\"out of range index\");if(a>=r&&t>=n)return 0;if(a>=r)return-1;if(t>=n)return 1;if(this===e)return 0;let i=(r>>>=0)-(a>>>=0),o=(n>>>=0)-(t>>>=0);const c=Math.min(i,o),u=this.slice(a,r),l=e.slice(t,n);for(let s=0;s<c;++s)if(u[s]!==l[s]){i=u[s],o=l[s];break}return i<o?-1:o<i?1:0},s.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},s.prototype.indexOf=function(e,t,n){return y(this,e,t,n,!0)},s.prototype.lastIndexOf=function(e,t,n){return y(this,e,t,n,!1)},s.prototype.write=function(e,t,n,a){if(void 0===t)a=\"utf8\",n=this.length,t=0;else if(void 0===n&&\"string\"==typeof t)a=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");t>>>=0,isFinite(n)?(n>>>=0,void 0===a&&(a=\"utf8\")):(a=n,n=void 0)}const r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError(\"Attempt to write outside buffer bounds\");a||(a=\"utf8\");let i=!1;for(;;)switch(a){case\"hex\":return b(this,e,t,n);case\"utf8\":case\"utf-8\":return x(this,e,t,n);case\"ascii\":case\"latin1\":case\"binary\":return w(this,e,t,n);case\"base64\":return k(this,e,t,n);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return _(this,e,t,n);default:if(i)throw new TypeError(\"Unknown encoding: \"+a);a=(\"\"+a).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};const A=4096;function E(e,t,n){let a=\"\";n=Math.min(e.length,n);for(let r=t;r<n;++r)a+=String.fromCharCode(127&e[r]);return a}function C(e,t,n){let a=\"\";n=Math.min(e.length,n);for(let r=t;r<n;++r)a+=String.fromCharCode(e[r]);return a}function T(e,t,n){const a=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>a)&&(n=a);let r=\"\";for(let i=t;i<n;++i)r+=Y[e[i]];return r}function P(e,t,n){const a=e.slice(t,n);let r=\"\";for(let i=0;i<a.length-1;i+=2)r+=String.fromCharCode(a[i]+256*a[i+1]);return r}function D(e,t,n){if(e%1!=0||e<0)throw new RangeError(\"offset is not uint\");if(e+t>n)throw new RangeError(\"Trying to access beyond buffer length\")}function O(e,t,n,a,r,i){if(!s.isBuffer(e))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(t>r||t<i)throw new RangeError('\"value\" argument is out of bounds');if(n+a>e.length)throw new RangeError(\"Index out of range\")}function M(e,t,n,a,r){q(t,a,r,e,n,7);let i=Number(t&BigInt(4294967295));e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,n}function N(e,t,n,a,r){q(t,a,r,e,n,7);let i=Number(t&BigInt(4294967295));e[n+7]=i,i>>=8,e[n+6]=i,i>>=8,e[n+5]=i,i>>=8,e[n+4]=i;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=o,o>>=8,e[n+2]=o,o>>=8,e[n+1]=o,o>>=8,e[n]=o,n+8}function B(e,t,n,a,r,i){if(n+a>e.length)throw new RangeError(\"Index out of range\");if(n<0)throw new RangeError(\"Index out of range\")}function R(e,t,n,r,i){return t=+t,n>>>=0,i||B(e,0,n,4),a.write(e,t,n,r,23,4),n+4}function L(e,t,n,r,i){return t=+t,n>>>=0,i||B(e,0,n,8),a.write(e,t,n,r,52,8),n+8}s.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const a=this.subarray(e,t);return Object.setPrototypeOf(a,s.prototype),a},s.prototype.readUintLE=s.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let a=this[e],r=1,i=0;for(;++i<t&&(r*=256);)a+=this[e+i]*r;return a},s.prototype.readUintBE=s.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let a=this[e+--t],r=1;for(;t>0&&(r*=256);)a+=this[e+--t]*r;return a},s.prototype.readUint8=s.prototype.readUInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),this[e]},s.prototype.readUint16LE=s.prototype.readUInt16LE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]|this[e+1]<<8},s.prototype.readUint16BE=s.prototype.readUInt16BE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]<<8|this[e+1]},s.prototype.readUint32LE=s.prototype.readUInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},s.prototype.readUint32BE=s.prototype.readUInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},s.prototype.readBigUInt64LE=X((function(e){H(e>>>=0,\"offset\");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||U(e,this.length-8);const a=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,r=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(a)+(BigInt(r)<<BigInt(32))})),s.prototype.readBigUInt64BE=X((function(e){H(e>>>=0,\"offset\");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||U(e,this.length-8);const a=t*2**24+65536*this[++e]+256*this[++e]+this[++e],r=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(a)<<BigInt(32))+BigInt(r)})),s.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let a=this[e],r=1,i=0;for(;++i<t&&(r*=256);)a+=this[e+i]*r;return r*=128,a>=r&&(a-=Math.pow(2,8*t)),a},s.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let a=t,r=1,i=this[e+--a];for(;a>0&&(r*=256);)i+=this[e+--a]*r;return r*=128,i>=r&&(i-=Math.pow(2,8*t)),i},s.prototype.readInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},s.prototype.readInt16LE=function(e,t){e>>>=0,t||D(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt16BE=function(e,t){e>>>=0,t||D(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},s.prototype.readInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},s.prototype.readBigInt64LE=X((function(e){H(e>>>=0,\"offset\");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||U(e,this.length-8);const a=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(a)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),s.prototype.readBigInt64BE=X((function(e){H(e>>>=0,\"offset\");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||U(e,this.length-8);const a=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(a)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),s.prototype.readFloatLE=function(e,t){return e>>>=0,t||D(e,4,this.length),a.read(this,e,!0,23,4)},s.prototype.readFloatBE=function(e,t){return e>>>=0,t||D(e,4,this.length),a.read(this,e,!1,23,4)},s.prototype.readDoubleLE=function(e,t){return e>>>=0,t||D(e,8,this.length),a.read(this,e,!0,52,8)},s.prototype.readDoubleBE=function(e,t){return e>>>=0,t||D(e,8,this.length),a.read(this,e,!1,52,8)},s.prototype.writeUintLE=s.prototype.writeUIntLE=function(e,t,n,a){if(e=+e,t>>>=0,n>>>=0,!a){O(this,e,t,n,Math.pow(2,8*n)-1,0)}let r=1,i=0;for(this[t]=255&e;++i<n&&(r*=256);)this[t+i]=e/r&255;return t+n},s.prototype.writeUintBE=s.prototype.writeUIntBE=function(e,t,n,a){if(e=+e,t>>>=0,n>>>=0,!a){O(this,e,t,n,Math.pow(2,8*n)-1,0)}let r=n-1,i=1;for(this[t+r]=255&e;--r>=0&&(i*=256);)this[t+r]=e/i&255;return t+n},s.prototype.writeUint8=s.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,1,255,0),this[t]=255&e,t+1},s.prototype.writeUint16LE=s.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},s.prototype.writeUint16BE=s.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},s.prototype.writeUint32LE=s.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},s.prototype.writeUint32BE=s.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},s.prototype.writeBigUInt64LE=X((function(e,t=0){return M(this,e,t,BigInt(0),BigInt(\"0xffffffffffffffff\"))})),s.prototype.writeBigUInt64BE=X((function(e,t=0){return N(this,e,t,BigInt(0),BigInt(\"0xffffffffffffffff\"))})),s.prototype.writeIntLE=function(e,t,n,a){if(e=+e,t>>>=0,!a){const a=Math.pow(2,8*n-1);O(this,e,t,n,a-1,-a)}let r=0,i=1,o=0;for(this[t]=255&e;++r<n&&(i*=256);)e<0&&0===o&&0!==this[t+r-1]&&(o=1),this[t+r]=(e/i|0)-o&255;return t+n},s.prototype.writeIntBE=function(e,t,n,a){if(e=+e,t>>>=0,!a){const a=Math.pow(2,8*n-1);O(this,e,t,n,a-1,-a)}let r=n-1,i=1,o=0;for(this[t+r]=255&e;--r>=0&&(i*=256);)e<0&&0===o&&0!==this[t+r+1]&&(o=1),this[t+r]=(e/i|0)-o&255;return t+n},s.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},s.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},s.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},s.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},s.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},s.prototype.writeBigInt64LE=X((function(e,t=0){return M(this,e,t,-BigInt(\"0x8000000000000000\"),BigInt(\"0x7fffffffffffffff\"))})),s.prototype.writeBigInt64BE=X((function(e,t=0){return N(this,e,t,-BigInt(\"0x8000000000000000\"),BigInt(\"0x7fffffffffffffff\"))})),s.prototype.writeFloatLE=function(e,t,n){return R(this,e,t,!0,n)},s.prototype.writeFloatBE=function(e,t,n){return R(this,e,t,!1,n)},s.prototype.writeDoubleLE=function(e,t,n){return L(this,e,t,!0,n)},s.prototype.writeDoubleBE=function(e,t,n){return L(this,e,t,!1,n)},s.prototype.copy=function(e,t,n,a){if(!s.isBuffer(e))throw new TypeError(\"argument should be a Buffer\");if(n||(n=0),a||0===a||(a=this.length),t>=e.length&&(t=e.length),t||(t=0),a>0&&a<n&&(a=n),a===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError(\"targetStart out of bounds\");if(n<0||n>=this.length)throw new RangeError(\"Index out of range\");if(a<0)throw new RangeError(\"sourceEnd out of bounds\");a>this.length&&(a=this.length),e.length-t<a-n&&(a=e.length-t+n);const r=a-n;return this===e&&\"function\"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,a):Uint8Array.prototype.set.call(e,this.subarray(n,a),t),r},s.prototype.fill=function(e,t,n,a){if(\"string\"==typeof e){if(\"string\"==typeof t?(a=t,t=0,n=this.length):\"string\"==typeof n&&(a=n,n=this.length),void 0!==a&&\"string\"!=typeof a)throw new TypeError(\"encoding must be a string\");if(\"string\"==typeof a&&!s.isEncoding(a))throw new TypeError(\"Unknown encoding: \"+a);if(1===e.length){const t=e.charCodeAt(0);(\"utf8\"===a&&t<128||\"latin1\"===a)&&(e=t)}}else\"number\"==typeof e?e&=255:\"boolean\"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError(\"Out of range index\");if(n<=t)return this;let r;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),\"number\"==typeof e)for(r=t;r<n;++r)this[r]=e;else{const i=s.isBuffer(e)?e:s.from(e,a),o=i.length;if(0===o)throw new TypeError('The value \"'+e+'\" is invalid for argument \"value\"');for(r=0;r<n-t;++r)this[r+t]=i[r%o]}return this};const I={};function F(e,t,n){I[e]=class extends n{constructor(){super(),Object.defineProperty(this,\"message\",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,\"code\",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function z(e){let t=\"\",n=e.length;const a=\"-\"===e[0]?1:0;for(;n>=a+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function q(e,t,n,a,r,i){if(e>n||e<t){const a=\"bigint\"==typeof t?\"n\":\"\";let r;throw r=i>3?0===t||t===BigInt(0)?`>= 0${a} and < 2${a} ** ${8*(i+1)}${a}`:`>= -(2${a} ** ${8*(i+1)-1}${a}) and < 2 ** ${8*(i+1)-1}${a}`:`>= ${t}${a} and <= ${n}${a}`,new I.ERR_OUT_OF_RANGE(\"value\",r,e)}!function(e,t,n){H(t,\"offset\"),void 0!==e[t]&&void 0!==e[t+n]||U(t,e.length-(n+1))}(a,r,i)}function H(e,t){if(\"number\"!=typeof e)throw new I.ERR_INVALID_ARG_TYPE(t,\"number\",e)}function U(e,t,n){if(Math.floor(e)!==e)throw H(e,n),new I.ERR_OUT_OF_RANGE(n||\"offset\",\"an integer\",e);if(t<0)throw new I.ERR_BUFFER_OUT_OF_BOUNDS;throw new I.ERR_OUT_OF_RANGE(n||\"offset\",`>= ${n?1:0} and <= ${t}`,e)}F(\"ERR_BUFFER_OUT_OF_BOUNDS\",(function(e){return e?`${e} is outside of buffer bounds`:\"Attempt to access memory outside buffer bounds\"}),RangeError),F(\"ERR_INVALID_ARG_TYPE\",(function(e,t){return`The \"${e}\" argument must be of type number. Received type ${typeof t}`}),TypeError),F(\"ERR_OUT_OF_RANGE\",(function(e,t,n){let a=`The value of \"${e}\" is out of range.`,r=n;return Number.isInteger(n)&&Math.abs(n)>2**32?r=z(String(n)):\"bigint\"==typeof n&&(r=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(r=z(r)),r+=\"n\"),a+=` It must be ${t}. Received ${r}`,a}),RangeError);const G=/[^+/0-9A-Za-z-_]/g;function $(e,t){let n;t=t||1/0;const a=e.length;let r=null;const i=[];for(let o=0;o<a;++o){if(n=e.charCodeAt(o),n>55295&&n<57344){if(!r){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(o+1===a){(t-=3)>-1&&i.push(239,191,189);continue}r=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(t-=3)>-1&&i.push(239,191,189);if(r=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error(\"Invalid code point\");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function W(e){return t.toByteArray(function(e){if((e=(e=e.split(\"=\")[0]).trim().replace(G,\"\")).length<2)return\"\";for(;e.length%4!=0;)e+=\"=\";return e}(e))}function V(e,t,n,a){let r;for(r=0;r<a&&!(r+n>=t.length||r>=e.length);++r)t[r+n]=e[r];return r}function K(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function J(e){return e!=e}const Y=function(){const e=\"0123456789abcdef\",t=new Array(256);for(let n=0;n<16;++n){const a=16*n;for(let r=0;r<16;++r)t[a+r]=e[n]+e[r]}return t}();function X(e){return\"undefined\"==typeof BigInt?Z:e}function Z(){throw new Error(\"BigInt not supported\")}}).call(this)}).call(this,e(\"buffer\").Buffer)},{\"base64-js\":239,buffer:\"buffer\",ieee754:381}],245:[function(e,t,n){\"use strict\";var a=e(\"get-intrinsic\"),r=e(\"./\"),i=r(a(\"String.prototype.indexOf\"));t.exports=function(e,t){var n=a(e,!!t);return\"function\"==typeof n&&i(e,\".prototype.\")>-1?r(n):n}},{\"./\":246,\"get-intrinsic\":367}],246:[function(e,t,n){\"use strict\";var a=e(\"function-bind\"),r=e(\"get-intrinsic\"),i=r(\"%Function.prototype.apply%\"),o=r(\"%Function.prototype.call%\"),s=r(\"%Reflect.apply%\",!0)||a.call(o,i),c=r(\"%Object.getOwnPropertyDescriptor%\",!0),u=r(\"%Object.defineProperty%\",!0),l=r(\"%Math.max%\");if(u)try{u({},\"a\",{value:1})}catch(d){u=null}t.exports=function(e){var t=s(a,o,arguments);c&&u&&(c(t,\"length\").configurable&&u(t,\"length\",{value:1+l(0,e.length-(arguments.length-1))}));return t};var p=function(){return s(a,i,arguments)};u?u(t.exports,\"apply\",{value:p}):t.exports.apply=p},{\"function-bind\":365,\"get-intrinsic\":367}],247:[function(e,t,n){t.exports=e(\"./lib\")},{\"./lib\":248}],248:[function(e,t,n){const a=/(.*?)\\n.*/g,r={info:1,success:2,redirection:3,clientError:4,serverError:5},i={accepted:{statusCode:202,name:\"Accepted\"},withoutContent:{statusCode:204,name:\"No Content\"},badRequest:{statusCode:400,name:\"Bad Request\"},unauthorised:{statusCode:401,name:\"Unauthorised\"},unauthorized:{statusCode:401,name:\"Unauthorized\"},forbidden:{statusCode:403,name:\"Forbidden\"},notFound:{statusCode:404,name:\"Not Found\"},notAcceptable:{statusCode:406,name:\"Acceptable\"},rateLimited:{statusCode:429,name:\"Too Many Requests\"}};t.exports=function(e,t,n){return function(o){var s=o.Assertion;s.addProperty(\"postmanRequest\",(function(){this.assert(e.Request.isRequest(this._obj),\"expecting a postman request object but got #{this}\",\"not expecting a postman request object\")})),s.addProperty(\"postmanResponse\",(function(){this.assert(e.Response.isResponse(this._obj),\"expecting a postman response object but got #{this}\",\"not expecting a postman response object\")})),s.addProperty(\"postmanRequestOrResponse\",(function(){this.assert(e.Response.isResponse(this._obj)||e.Request.isRequest(this._obj),\"expecting a postman request or response object but got #{this}\",\"not expecting a postman request or response object\")})),s.addMethod(\"statusCodeClass\",(function(e){new s(this._obj).to.be.postmanResponse,new s(this._obj).to.have.property(\"code\"),new s(this._obj.code).to.be.a(\"number\");const t=Math.floor(this._obj.code/100);this.assert(t===e,\"expected response code to be #{exp}XX but found #{act}\",\"expected response code to not be #{exp}XX\",e,this._obj.code)})),t.forOwn(r,(function(e,t){s.addProperty(t,(function(){new s(this._obj).to.be.postmanResponse,new s(this._obj).to.have.property(\"code\"),new s(this._obj.code).to.be.a(\"number\");const t=Math.floor(this._obj.code/100);this.assert(t===e,\"expected response code to be #{exp}XX but found #{act}\",\"expected response code to not be #{exp}XX\",e,this._obj.code)}))})),s.addProperty(\"error\",(function(){new s(this._obj).to.be.postmanResponse,new s(this._obj).to.have.property(\"code\"),new s(this._obj.code).to.be.a(\"number\");const e=Math.floor(this._obj.code/100);this.assert(4===e||5===e,\"expected response code to be 4XX or 5XX but found #{act}\",\"expected response code to not be 4XX or 5XX\",null,this._obj.code)})),s.addMethod(\"statusCode\",(function(e){new s(this._obj).to.be.postmanResponse,new s(this._obj).to.have.property(\"code\"),new s(this._obj.code).to.be.a(\"number\"),this.assert(this._obj.code===Number(e),\"expected response to have status code #{exp} but got #{act}\",\"expected response to not have status code #{act}\",Number(e),this._obj.code)})),s.addMethod(\"statusReason\",(function(e){new s(this._obj).to.be.postmanResponse,new s(this._obj).to.have.property(\"reason\"),new s(this._obj.reason).to.be.a(\"function\"),e=String(e),this.assert(this._obj.reason()===e,\"expected response to have status reason #{exp} but got #{act}\",\"expected response to not have status reason #{act}\",e,this._obj.reason())})),t.forOwn(i,(function(e,t){s.addProperty(t,(function(){new s(this._obj).to.be.postmanResponse,new s(this._obj).to.have.property(\"reason\"),new s(this._obj.reason).to.be.a(\"function\"),new s(this._obj).to.have.property(\"details\"),new s(this._obj.details).to.be.a(\"function\");const t=e.name.toUpperCase(),n=String(this._obj.reason()).toUpperCase(),a=Number(this._obj.details().code);this.assert(n===t,\"expected response to have status reason #{exp} but got #{act}\",\"expected response to not have status reason #{act}\",t,n),this.assert(a===e.statusCode,\"expected response to have status code #{exp} but got #{act}\",\"expected response to not have status code #{act}\",e.statusCode,a)}))})),s.addProperty(\"ok\",(function(){if(!e.Response.isResponse(this._obj))return void this.assert(o.util.flag(this,\"object\"),\"expected #{this} to be truthy\",\"expected #{this} to be falsy\");new s(this._obj).to.have.property(\"reason\"),new s(this._obj.reason).to.be.a(\"function\"),new s(this._obj).to.have.property(\"details\"),new s(this._obj.details).to.be.a(\"function\");const t=String(this._obj.reason()).toUpperCase(),n=Number(this._obj.details().code);this.assert(\"OK\"===t,\"expected response to have status reason #{exp} but got #{act}\",\"expected response to not have status reason #{act}\",\"OK\",t),this.assert(200===n,\"expected response to have status code #{exp} but got #{act}\",\"expected response to not have status code #{act}\",200,n)})),s.addMethod(\"status\",(function(e){new s(this._obj).to.be.postmanResponse,t.isNumber(e)?(new s(this._obj).to.have.property(\"code\"),new s(this._obj.code).to.be.a(\"number\"),this.assert(this._obj.code===Number(e),\"expected response to have status code #{exp} but got #{act}\",\"expected response to not have status code #{act}\",Number(e),this._obj.code)):(new s(this._obj).to.have.property(\"reason\"),new s(this._obj.reason).to.be.a(\"function\"),this.assert(this._obj.reason()===e,\"expected response to have status reason #{exp} but got #{act}\",\"expected response to not have status reason #{act}\",e,this._obj.reason()))})),s.addMethod(\"header\",(function(t,n){new s(this._obj).to.be.postmanRequestOrResponse,new s(this._obj).to.have.property(\"headers\");const a=(r=this._obj,(e.Request.isRequest(r)?\"request\":e.Response.isResponse(r)&&\"response\")||void 0);var r;this.assert(this._obj.headers.has(t),\"expected \"+a+\" to have header with key '\"+String(t)+\"'\",\"expected \"+a+\" to not have header with key '\"+String(t)+\"'\",!0,this._obj.headers.has(t)),arguments.length<2||this.assert(this._obj.headers.one(t).value===n,\"expected '\"+String(t)+\"' \"+a+\" header to be #{exp} but got #{act}\",\"expected '\"+String(t)+\"' \"+a+\" header to not be #{act}\",n,this._obj.headers.one(t).value)})),s.addProperty(\"withBody\",(function(){new s(this._obj).to.be.postmanResponse,new s(this._obj).to.have.property(\"text\"),new s(this._obj.text).to.be.a(\"function\");const e=this._obj.text();this.assert(t.isString(e)&&e.length,\"expected response to have content in body\",\"expected response to not have content in body\")})),s.addProperty(\"json\",(function(){var e;new s(this._obj).to.be.postmanResponse,new s(this._obj).to.have.property(\"json\"),new s(this._obj.json).to.be.a(\"function\");try{this._obj.json()}catch(t){e=\"JSONError\"===t.name&&t.message?t.message.replace(a,\"$1\"):t.name+\": \"+t.message}this.assert(!e,\"expected response body to be a valid json but got error \"+e,\"expected response body not to be a valid json\")})),s.addMethod(\"body\",(function(e){var n;if(new s(this._obj).to.be.postmanResponse,t.isPlainObject(e)){new s(this._obj).to.have.property(\"json\"),new s(this._obj.json).to.be.a(\"function\");try{n=this._obj.json()}catch(a){}this.assert(t.isEqual(n,e),\"expected response body json to equal #{exp} but got #{act}\",\"expected response body json to not equal #{exp} but got #{act}\",e,n)}else new s(this._obj).to.have.property(\"text\"),new s(this._obj.text).to.be.a(\"function\"),n=this._obj.text(),0!==arguments.length?e instanceof RegExp?this.assert(null!==e.exec(n),\"expected response body text to match #{exp} but got #{act}\",\"expected response body text #{act} to not match #{exp}\",e,n):this.assert(t.isEqual(n,e),\"expected response body to equal #{exp} but got #{act}\",\"expected response body to not equal #{exp}\",e,n):this.assert(t.isString(n)&&n.length,\"expected response to have content in body\",\"expected response to not have content in body\")})),s.addMethod(\"jsonBody\",(function(e,n){var r,i;new s(this._obj).to.be.postmanResponse,new s(this._obj).to.have.property(\"json\"),new s(this._obj.json).to.be.a(\"function\");try{r=this._obj.json()}catch(o){i=\"JSONError\"===o.name&&o.message?o.message.replace(a,\"$1\"):o.name+\": \"+o.message}0!==arguments.length?t.isString(e)&&(this.assert(t.has(r,e),\"expected #{act} in response to contain property #{exp}\",\"expected #{act} in response to not contain property #{exp}\",e,r),arguments.length>1&&(r=t.get(r,e),this.assert(t.isEqual(r,n),'expected response body json at \"'+e+'\" to contain #{exp} but got #{act}','expected response body json at \"'+e+'\" to not contain #{exp} but got #{act}',n,r))):this.assert(!i,\"expected response body to be a valid json but got error \"+i,\"expected response body not to be a valid json\")})),s.addChainableMethod(\"responseTime\",(function(e){const n=o.util.flag(this,\"number\");this.assert(t.isNumber(n),\"expected response to have a valid response time but got #{act}\",\"expected response to not have a valid response time but got #{act}\",null,n),arguments.length&&this.assert(t.isEqual(n,e),\"expected response to have a valid response time but got #{act}\",\"expected response to not have a valid response time but got #{act}\",null,n)}),(function(){new s(this._obj).to.be.postmanResponse,new s(this._obj).to.have.property(\"responseTime\"),o.util.flag(this,\"number\",this._obj.responseTime),this._obj=t.get(this._obj,\"responseTime\")})),s.addChainableMethod(\"responseSize\",(function(e){const n=o.util.flag(this,\"number\");this.assert(t.isNumber(n),\"expected response to have a valid response size but got #{act}\",\"expected response to not have a valid response size but got #{act}\",null,n),arguments.length&&this.assert(t.isEqual(n,e),\"expected response size to equal #{act} but got #{exp}\",\"expected response size to not equal #{act} but got #{exp}\",e,n)}),(function(){new s(this._obj).to.be.postmanResponse,new s(this._obj).to.have.property(\"size\"),new s(this._obj.size).to.be.a(\"function\");const e=this._obj.size(),t=(e.header||0)+(e.body||0);o.util.flag(this,\"number\",t),this._obj=t})),s.addMethod(\"jsonSchema\",(function(t,a){var r,i,o;new s(t).to.be.an(\"object\"),a=Object.assign({allErrors:!0,logger:!1},a),o=e.Response.isResponse(this._obj)||e.Request.isRequest(this._obj)&&\"function\"==typeof this._obj.json?this._obj.json():this._obj,i=(r=new n(a)).validate(t,o),this.assert(i&&!r.errors,\"expected data to satisfy schema but found following errors: \\n\"+r.errorsText(),\"expected data to not satisfy schema\",!0,i)}))}}},{}],249:[function(e,t,n){var a=[];n.version=\"4.3.8\",n.AssertionError=e(\"assertion-error\");var r=e(\"./chai/utils\");n.use=function(e){return~a.indexOf(e)||(e(n,r),a.push(e)),n},n.util=r;var i=e(\"./chai/config\");n.config=i;var o=e(\"./chai/assertion\");n.use(o);var s=e(\"./chai/core/assertions\");n.use(s);var c=e(\"./chai/interface/expect\");n.use(c);var u=e(\"./chai/interface/should\");n.use(u);var l=e(\"./chai/interface/assert\");n.use(l)},{\"./chai/assertion\":250,\"./chai/config\":251,\"./chai/core/assertions\":252,\"./chai/interface/assert\":253,\"./chai/interface/expect\":254,\"./chai/interface/should\":255,\"./chai/utils\":269,\"assertion-error\":237}],250:[function(e,t,n){var a=e(\"./config\");t.exports=function(e,t){var n=e.AssertionError,r=t.flag;function i(e,n,o,s){return r(this,\"ssfi\",o||i),r(this,\"lockSsfi\",s),r(this,\"object\",e),r(this,\"message\",n),r(this,\"eql\",a.deepEqual||t.eql),t.proxify(this)}e.Assertion=i,Object.defineProperty(i,\"includeStack\",{get:function(){return a.includeStack},set:function(e){a.includeStack=e}}),Object.defineProperty(i,\"showDiff\",{get:function(){return a.showDiff},set:function(e){a.showDiff=e}}),i.addProperty=function(e,n){t.addProperty(this.prototype,e,n)},i.addMethod=function(e,n){t.addMethod(this.prototype,e,n)},i.addChainableMethod=function(e,n,a){t.addChainableMethod(this.prototype,e,n,a)},i.overwriteProperty=function(e,n){t.overwriteProperty(this.prototype,e,n)},i.overwriteMethod=function(e,n){t.overwriteMethod(this.prototype,e,n)},i.overwriteChainableMethod=function(e,n,a){t.overwriteChainableMethod(this.prototype,e,n,a)},i.prototype.assert=function(e,i,o,s,c,u){var l=t.test(this,arguments);if(!1!==u&&(u=!0),void 0===s&&void 0===c&&(u=!1),!0!==a.showDiff&&(u=!1),!l){i=t.getMessage(this,arguments);var p={actual:t.getActual(this,arguments),expected:s,showDiff:u},d=t.getOperator(this,arguments);throw d&&(p.operator=d),new n(i,p,a.includeStack?this.assert:r(this,\"ssfi\"))}},Object.defineProperty(i.prototype,\"_obj\",{get:function(){return r(this,\"object\")},set:function(e){r(this,\"object\",e)}})}},{\"./config\":251}],251:[function(e,t,n){t.exports={includeStack:!1,showDiff:!0,truncateThreshold:40,useProxy:!0,proxyExcludedKeys:[\"then\",\"catch\",\"inspect\",\"toJSON\"],deepEqual:null}},{}],252:[function(e,t,n){t.exports=function(e,t){var n=e.Assertion,a=e.AssertionError,r=t.flag;function i(e,n){n&&r(this,\"message\",n),e=e.toLowerCase();var a=r(this,\"object\"),i=~[\"a\",\"e\",\"i\",\"o\",\"u\"].indexOf(e.charAt(0))?\"an \":\"a \";this.assert(e===t.type(a).toLowerCase(),\"expected #{this} to be \"+i+e,\"expected #{this} not to be \"+i+e)}function o(e,n){return t.isNaN(e)&&t.isNaN(n)||e===n}function s(){r(this,\"contains\",!0)}function c(e,i){i&&r(this,\"message\",i);var s=r(this,\"object\"),c=t.type(s).toLowerCase(),u=r(this,\"message\"),l=r(this,\"negate\"),p=r(this,\"ssfi\"),d=r(this,\"deep\"),f=d?\"deep \":\"\",h=d?r(this,\"eql\"):o;u=u?u+\": \":\"\";var m=!1;switch(c){case\"string\":m=-1!==s.indexOf(e);break;case\"weakset\":if(d)throw new a(u+\"unable to use .deep.include with WeakSet\",void 0,p);m=s.has(e);break;case\"map\":s.forEach((function(t){m=m||h(t,e)}));break;case\"set\":d?s.forEach((function(t){m=m||h(t,e)})):m=s.has(e);break;case\"array\":m=d?s.some((function(t){return h(t,e)})):-1!==s.indexOf(e);break;default:if(e!==Object(e))throw new a(u+\"the given combination of arguments (\"+c+\" and \"+t.type(e).toLowerCase()+\") is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a \"+t.type(e).toLowerCase(),void 0,p);var g=Object.keys(e),y=null,v=0;if(g.forEach((function(i){var o=new n(s);if(t.transferFlags(this,o,!0),r(o,\"lockSsfi\",!0),l&&1!==g.length)try{o.property(i,e[i])}catch(c){if(!t.checkError.compatibleConstructor(c,a))throw c;null===y&&(y=c),v++}else o.property(i,e[i])}),this),l&&g.length>1&&v===g.length)throw y;return}this.assert(m,\"expected #{this} to \"+f+\"include \"+t.inspect(e),\"expected #{this} to not \"+f+\"include \"+t.inspect(e))}function u(){var e=r(this,\"object\");this.assert(null!=e,\"expected #{this} to exist\",\"expected #{this} to not exist\")}function l(){var e=r(this,\"object\"),n=t.type(e);this.assert(\"Arguments\"===n,\"expected #{this} to be arguments but got \"+n,\"expected #{this} to not be arguments\")}function p(e,t){t&&r(this,\"message\",t);var n=r(this,\"object\");if(r(this,\"deep\")){var a=r(this,\"lockSsfi\");r(this,\"lockSsfi\",!0),this.eql(e),r(this,\"lockSsfi\",a)}else this.assert(e===n,\"expected #{this} to equal #{exp}\",\"expected #{this} to not equal #{exp}\",e,this._obj,!0)}function d(e,t){t&&r(this,\"message\",t);var n=r(this,\"eql\");this.assert(n(e,r(this,\"object\")),\"expected #{this} to deeply equal #{exp}\",\"expected #{this} to not deeply equal #{exp}\",e,this._obj,!0)}function f(e,i){i&&r(this,\"message\",i);var o,s=r(this,\"object\"),c=r(this,\"doLength\"),u=r(this,\"message\"),l=u?u+\": \":\"\",p=r(this,\"ssfi\"),d=t.type(s).toLowerCase(),f=t.type(e).toLowerCase(),h=!0;if(c&&\"map\"!==d&&\"set\"!==d&&new n(s,u,p,!0).to.have.property(\"length\"),c||\"date\"!==d||\"date\"===f)if(\"number\"===f||!c&&\"number\"!==d)if(c||\"date\"===d||\"number\"===d)h=!1;else{o=l+\"expected \"+(\"string\"===d?\"'\"+s+\"'\":s)+\" to be a number or a date\"}else o=l+\"the argument to above must be a number\";else o=l+\"the argument to above must be a date\";if(h)throw new a(o,void 0,p);if(c){var m,g=\"length\";\"map\"===d||\"set\"===d?(g=\"size\",m=s.size):m=s.length,this.assert(m>e,\"expected #{this} to have a \"+g+\" above #{exp} but got #{act}\",\"expected #{this} to not have a \"+g+\" above #{exp}\",e,m)}else this.assert(s>e,\"expected #{this} to be above #{exp}\",\"expected #{this} to be at most #{exp}\",e)}function h(e,i){i&&r(this,\"message\",i);var o,s=r(this,\"object\"),c=r(this,\"doLength\"),u=r(this,\"message\"),l=u?u+\": \":\"\",p=r(this,\"ssfi\"),d=t.type(s).toLowerCase(),f=t.type(e).toLowerCase(),h=!0;if(c&&\"map\"!==d&&\"set\"!==d&&new n(s,u,p,!0).to.have.property(\"length\"),c||\"date\"!==d||\"date\"===f)if(\"number\"===f||!c&&\"number\"!==d)if(c||\"date\"===d||\"number\"===d)h=!1;else{o=l+\"expected \"+(\"string\"===d?\"'\"+s+\"'\":s)+\" to be a number or a date\"}else o=l+\"the argument to least must be a number\";else o=l+\"the argument to least must be a date\";if(h)throw new a(o,void 0,p);if(c){var m,g=\"length\";\"map\"===d||\"set\"===d?(g=\"size\",m=s.size):m=s.length,this.assert(m>=e,\"expected #{this} to have a \"+g+\" at least #{exp} but got #{act}\",\"expected #{this} to have a \"+g+\" below #{exp}\",e,m)}else this.assert(s>=e,\"expected #{this} to be at least #{exp}\",\"expected #{this} to be below #{exp}\",e)}function m(e,i){i&&r(this,\"message\",i);var o,s=r(this,\"object\"),c=r(this,\"doLength\"),u=r(this,\"message\"),l=u?u+\": \":\"\",p=r(this,\"ssfi\"),d=t.type(s).toLowerCase(),f=t.type(e).toLowerCase(),h=!0;if(c&&\"map\"!==d&&\"set\"!==d&&new n(s,u,p,!0).to.have.property(\"length\"),c||\"date\"!==d||\"date\"===f)if(\"number\"===f||!c&&\"number\"!==d)if(c||\"date\"===d||\"number\"===d)h=!1;else{o=l+\"expected \"+(\"string\"===d?\"'\"+s+\"'\":s)+\" to be a number or a date\"}else o=l+\"the argument to below must be a number\";else o=l+\"the argument to below must be a date\";if(h)throw new a(o,void 0,p);if(c){var m,g=\"length\";\"map\"===d||\"set\"===d?(g=\"size\",m=s.size):m=s.length,this.assert(m<e,\"expected #{this} to have a \"+g+\" below #{exp} but got #{act}\",\"expected #{this} to not have a \"+g+\" below #{exp}\",e,m)}else this.assert(s<e,\"expected #{this} to be below #{exp}\",\"expected #{this} to be at least #{exp}\",e)}function g(e,i){i&&r(this,\"message\",i);var o,s=r(this,\"object\"),c=r(this,\"doLength\"),u=r(this,\"message\"),l=u?u+\": \":\"\",p=r(this,\"ssfi\"),d=t.type(s).toLowerCase(),f=t.type(e).toLowerCase(),h=!0;if(c&&\"map\"!==d&&\"set\"!==d&&new n(s,u,p,!0).to.have.property(\"length\"),c||\"date\"!==d||\"date\"===f)if(\"number\"===f||!c&&\"number\"!==d)if(c||\"date\"===d||\"number\"===d)h=!1;else{o=l+\"expected \"+(\"string\"===d?\"'\"+s+\"'\":s)+\" to be a number or a date\"}else o=l+\"the argument to most must be a number\";else o=l+\"the argument to most must be a date\";if(h)throw new a(o,void 0,p);if(c){var m,g=\"length\";\"map\"===d||\"set\"===d?(g=\"size\",m=s.size):m=s.length,this.assert(m<=e,\"expected #{this} to have a \"+g+\" at most #{exp} but got #{act}\",\"expected #{this} to have a \"+g+\" above #{exp}\",e,m)}else this.assert(s<=e,\"expected #{this} to be at most #{exp}\",\"expected #{this} to be above #{exp}\",e)}function y(e,n){n&&r(this,\"message\",n);var i=r(this,\"object\"),o=r(this,\"ssfi\"),s=r(this,\"message\");try{var c=i instanceof e}catch(l){if(l instanceof TypeError)throw new a((s=s?s+\": \":\"\")+\"The instanceof assertion needs a constructor but \"+t.type(e)+\" was given.\",void 0,o);throw l}var u=t.getName(e);null===u&&(u=\"an unnamed constructor\"),this.assert(c,\"expected #{this} to be an instance of \"+u,\"expected #{this} to not be an instance of \"+u)}function v(e,n,i){i&&r(this,\"message\",i);var o=r(this,\"nested\"),s=r(this,\"own\"),c=r(this,\"message\"),u=r(this,\"object\"),l=r(this,\"ssfi\"),p=typeof e;if(c=c?c+\": \":\"\",o){if(\"string\"!==p)throw new a(c+\"the argument to property must be a string when using nested syntax\",void 0,l)}else if(\"string\"!==p&&\"number\"!==p&&\"symbol\"!==p)throw new a(c+\"the argument to property must be a string, number, or symbol\",void 0,l);if(o&&s)throw new a(c+'The \"nested\" and \"own\" flags cannot be combined.',void 0,l);if(null==u)throw new a(c+\"Target cannot be null or undefined.\",void 0,l);var d,f=r(this,\"deep\"),h=r(this,\"negate\"),m=o?t.getPathInfo(u,e):null,g=o?m.value:u[e],y=f?r(this,\"eql\"):(e,t)=>e===t,v=\"\";f&&(v+=\"deep \"),s&&(v+=\"own \"),o&&(v+=\"nested \"),v+=\"property \",d=s?Object.prototype.hasOwnProperty.call(u,e):o?m.exists:t.hasProperty(u,e),h&&1!==arguments.length||this.assert(d,\"expected #{this} to have \"+v+t.inspect(e),\"expected #{this} to not have \"+v+t.inspect(e)),arguments.length>1&&this.assert(d&&y(n,g),\"expected #{this} to have \"+v+t.inspect(e)+\" of #{exp}, but got #{act}\",\"expected #{this} to not have \"+v+t.inspect(e)+\" of #{act}\",n,g),r(this,\"object\",g)}function b(e,t,n){r(this,\"own\",!0),v.apply(this,arguments)}function x(e,n,a){\"string\"==typeof n&&(a=n,n=null),a&&r(this,\"message\",a);var i=r(this,\"object\"),o=Object.getOwnPropertyDescriptor(Object(i),e),s=r(this,\"eql\");o&&n?this.assert(s(n,o),\"expected the own property descriptor for \"+t.inspect(e)+\" on #{this} to match \"+t.inspect(n)+\", got \"+t.inspect(o),\"expected the own property descriptor for \"+t.inspect(e)+\" on #{this} to not match \"+t.inspect(n),n,o,!0):this.assert(o,\"expected #{this} to have an own property descriptor for \"+t.inspect(e),\"expected #{this} to not have an own property descriptor for \"+t.inspect(e)),r(this,\"object\",o)}function w(){r(this,\"doLength\",!0)}function k(e,a){a&&r(this,\"message\",a);var i,o=r(this,\"object\"),s=t.type(o).toLowerCase(),c=r(this,\"message\"),u=r(this,\"ssfi\"),l=\"length\";switch(s){case\"map\":case\"set\":l=\"size\",i=o.size;break;default:new n(o,c,u,!0).to.have.property(\"length\"),i=o.length}this.assert(i==e,\"expected #{this} to have a \"+l+\" of #{exp} but got #{act}\",\"expected #{this} to not have a \"+l+\" of #{act}\",e,i)}function _(e,t){t&&r(this,\"message\",t);var n=r(this,\"object\");this.assert(e.exec(n),\"expected #{this} to match \"+e,\"expected #{this} not to match \"+e)}function j(e){var n,i,o=r(this,\"object\"),s=t.type(o),c=t.type(e),u=r(this,\"ssfi\"),l=r(this,\"deep\"),p=\"\",d=!0,f=r(this,\"message\"),h=(f=f?f+\": \":\"\")+\"when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments\";if(\"Map\"===s||\"Set\"===s)p=l?\"deeply \":\"\",i=[],o.forEach((function(e,t){i.push(t)})),\"Array\"!==c&&(e=Array.prototype.slice.call(arguments));else{switch(i=t.getOwnEnumerableProperties(o),c){case\"Array\":if(arguments.length>1)throw new a(h,void 0,u);break;case\"Object\":if(arguments.length>1)throw new a(h,void 0,u);e=Object.keys(e);break;default:e=Array.prototype.slice.call(arguments)}e=e.map((function(e){return\"symbol\"==typeof e?e:String(e)}))}if(!e.length)throw new a(f+\"keys required\",void 0,u);var m=e.length,g=r(this,\"any\"),y=r(this,\"all\"),v=e,b=l?r(this,\"eql\"):(e,t)=>e===t;if(g||y||(y=!0),g&&(d=v.some((function(e){return i.some((function(t){return b(e,t)}))}))),y&&(d=v.every((function(e){return i.some((function(t){return b(e,t)}))})),r(this,\"contains\")||(d=d&&e.length==i.length)),m>1){var x=(e=e.map((function(e){return t.inspect(e)}))).pop();y&&(n=e.join(\", \")+\", and \"+x),g&&(n=e.join(\", \")+\", or \"+x)}else n=t.inspect(e[0]);n=(m>1?\"keys \":\"key \")+n,n=(r(this,\"contains\")?\"contain \":\"have \")+n,this.assert(d,\"expected #{this} to \"+p+n,\"expected #{this} to not \"+p+n,v.slice(0).sort(t.compareByInspect),i.sort(t.compareByInspect),!0)}function S(e,a,i){i&&r(this,\"message\",i);var o,s=r(this,\"object\"),c=r(this,\"ssfi\"),u=r(this,\"message\"),l=r(this,\"negate\")||!1;new n(s,u,c,!0).is.a(\"function\"),(e instanceof RegExp||\"string\"==typeof e)&&(a=e,e=null);try{s()}catch(y){o=y}var p=void 0===e&&void 0===a,d=Boolean(e&&a),f=!1,h=!1;if(p||!p&&!l){var m=\"an error\";e instanceof Error?m=\"#{exp}\":e&&(m=t.checkError.getConstructorName(e)),this.assert(o,\"expected #{this} to throw \"+m,\"expected #{this} to not throw an error but #{act} was thrown\",e&&e.toString(),o instanceof Error?o.toString():\"string\"==typeof o?o:o&&t.checkError.getConstructorName(o))}if(e&&o){if(e instanceof Error)t.checkError.compatibleInstance(o,e)===l&&(d&&l?f=!0:this.assert(l,\"expected #{this} to throw #{exp} but #{act} was thrown\",\"expected #{this} to not throw #{exp}\"+(o&&!l?\" but #{act} was thrown\":\"\"),e.toString(),o.toString()));t.checkError.compatibleConstructor(o,e)===l&&(d&&l?f=!0:this.assert(l,\"expected #{this} to throw #{exp} but #{act} was thrown\",\"expected #{this} to not throw #{exp}\"+(o?\" but #{act} was thrown\":\"\"),e instanceof Error?e.toString():e&&t.checkError.getConstructorName(e),o instanceof Error?o.toString():o&&t.checkError.getConstructorName(o)))}if(o&&null!=a){var g=\"including\";a instanceof RegExp&&(g=\"matching\"),t.checkError.compatibleMessage(o,a)===l&&(d&&l?h=!0:this.assert(l,\"expected #{this} to throw error \"+g+\" #{exp} but got #{act}\",\"expected #{this} to throw error not \"+g+\" #{exp}\",a,t.checkError.getMessage(o)))}f&&h&&this.assert(l,\"expected #{this} to throw #{exp} but #{act} was thrown\",\"expected #{this} to not throw #{exp}\"+(o?\" but #{act} was thrown\":\"\"),e instanceof Error?e.toString():e&&t.checkError.getConstructorName(e),o instanceof Error?o.toString():o&&t.checkError.getConstructorName(o)),r(this,\"object\",o)}function A(e,n){n&&r(this,\"message\",n);var a=r(this,\"object\"),i=r(this,\"itself\"),o=\"function\"!=typeof a||i?a[e]:a.prototype[e];this.assert(\"function\"==typeof o,\"expected #{this} to respond to \"+t.inspect(e),\"expected #{this} to not respond to \"+t.inspect(e))}function E(e,n){n&&r(this,\"message\",n);var a=e(r(this,\"object\"));this.assert(a,\"expected #{this} to satisfy \"+t.objDisplay(e),\"expected #{this} to not satisfy\"+t.objDisplay(e),!r(this,\"negate\"),a)}function C(e,t,i){i&&r(this,\"message\",i);var o=r(this,\"object\"),s=r(this,\"message\"),c=r(this,\"ssfi\");if(new n(o,s,c,!0).is.a(\"number\"),\"number\"!=typeof e||\"number\"!=typeof t)throw new a((s=s?s+\": \":\"\")+\"the arguments to closeTo or approximately must be numbers\"+(void 0===t?\", and a delta is required\":\"\"),void 0,c);this.assert(Math.abs(o-e)<=t,\"expected #{this} to be close to \"+e+\" +/- \"+t,\"expected #{this} not to be close to \"+e+\" +/- \"+t)}function T(e,t,a){a&&r(this,\"message\",a);var i,o=r(this,\"object\"),s=r(this,\"message\"),c=r(this,\"ssfi\");new n(o,s,c,!0).is.a(\"function\"),t?(new n(e,s,c,!0).to.have.property(t),i=e[t]):(new n(e,s,c,!0).is.a(\"function\"),i=e()),o();var u=null==t?e():e[t],l=null==t?i:\".\"+t;r(this,\"deltaMsgObj\",l),r(this,\"initialDeltaValue\",i),r(this,\"finalDeltaValue\",u),r(this,\"deltaBehavior\",\"change\"),r(this,\"realDelta\",u!==i),this.assert(i!==u,\"expected \"+l+\" to change\",\"expected \"+l+\" to not change\")}function P(e,t,a){a&&r(this,\"message\",a);var i,o=r(this,\"object\"),s=r(this,\"message\"),c=r(this,\"ssfi\");new n(o,s,c,!0).is.a(\"function\"),t?(new n(e,s,c,!0).to.have.property(t),i=e[t]):(new n(e,s,c,!0).is.a(\"function\"),i=e()),new n(i,s,c,!0).is.a(\"number\"),o();var u=null==t?e():e[t],l=null==t?i:\".\"+t;r(this,\"deltaMsgObj\",l),r(this,\"initialDeltaValue\",i),r(this,\"finalDeltaValue\",u),r(this,\"deltaBehavior\",\"increase\"),r(this,\"realDelta\",u-i),this.assert(u-i>0,\"expected \"+l+\" to increase\",\"expected \"+l+\" to not increase\")}function D(e,t,a){a&&r(this,\"message\",a);var i,o=r(this,\"object\"),s=r(this,\"message\"),c=r(this,\"ssfi\");new n(o,s,c,!0).is.a(\"function\"),t?(new n(e,s,c,!0).to.have.property(t),i=e[t]):(new n(e,s,c,!0).is.a(\"function\"),i=e()),new n(i,s,c,!0).is.a(\"number\"),o();var u=null==t?e():e[t],l=null==t?i:\".\"+t;r(this,\"deltaMsgObj\",l),r(this,\"initialDeltaValue\",i),r(this,\"finalDeltaValue\",u),r(this,\"deltaBehavior\",\"decrease\"),r(this,\"realDelta\",i-u),this.assert(u-i<0,\"expected \"+l+\" to decrease\",\"expected \"+l+\" to not decrease\")}[\"to\",\"be\",\"been\",\"is\",\"and\",\"has\",\"have\",\"with\",\"that\",\"which\",\"at\",\"of\",\"same\",\"but\",\"does\",\"still\",\"also\"].forEach((function(e){n.addProperty(e)})),n.addProperty(\"not\",(function(){r(this,\"negate\",!0)})),n.addProperty(\"deep\",(function(){r(this,\"deep\",!0)})),n.addProperty(\"nested\",(function(){r(this,\"nested\",!0)})),n.addProperty(\"own\",(function(){r(this,\"own\",!0)})),n.addProperty(\"ordered\",(function(){r(this,\"ordered\",!0)})),n.addProperty(\"any\",(function(){r(this,\"any\",!0),r(this,\"all\",!1)})),n.addProperty(\"all\",(function(){r(this,\"all\",!0),r(this,\"any\",!1)})),n.addChainableMethod(\"an\",i),n.addChainableMethod(\"a\",i),n.addChainableMethod(\"include\",c,s),n.addChainableMethod(\"contain\",c,s),n.addChainableMethod(\"contains\",c,s),n.addChainableMethod(\"includes\",c,s),n.addProperty(\"ok\",(function(){this.assert(r(this,\"object\"),\"expected #{this} to be truthy\",\"expected #{this} to be falsy\")})),n.addProperty(\"true\",(function(){this.assert(!0===r(this,\"object\"),\"expected #{this} to be true\",\"expected #{this} to be false\",!r(this,\"negate\"))})),n.addProperty(\"false\",(function(){this.assert(!1===r(this,\"object\"),\"expected #{this} to be false\",\"expected #{this} to be true\",!!r(this,\"negate\"))})),n.addProperty(\"null\",(function(){this.assert(null===r(this,\"object\"),\"expected #{this} to be null\",\"expected #{this} not to be null\")})),n.addProperty(\"undefined\",(function(){this.assert(void 0===r(this,\"object\"),\"expected #{this} to be undefined\",\"expected #{this} not to be undefined\")})),n.addProperty(\"NaN\",(function(){this.assert(t.isNaN(r(this,\"object\")),\"expected #{this} to be NaN\",\"expected #{this} not to be NaN\")})),n.addProperty(\"exist\",u),n.addProperty(\"exists\",u),n.addProperty(\"empty\",(function(){var e,n=r(this,\"object\"),i=r(this,\"ssfi\"),o=r(this,\"message\");switch(o=o?o+\": \":\"\",t.type(n).toLowerCase()){case\"array\":case\"string\":e=n.length;break;case\"map\":case\"set\":e=n.size;break;case\"weakmap\":case\"weakset\":throw new a(o+\".empty was passed a weak collection\",void 0,i);case\"function\":var s=o+\".empty was passed a function \"+t.getName(n);throw new a(s.trim(),void 0,i);default:if(n!==Object(n))throw new a(o+\".empty was passed non-string primitive \"+t.inspect(n),void 0,i);e=Object.keys(n).length}this.assert(0===e,\"expected #{this} to be empty\",\"expected #{this} not to be empty\")})),n.addProperty(\"arguments\",l),n.addProperty(\"Arguments\",l),n.addMethod(\"equal\",p),n.addMethod(\"equals\",p),n.addMethod(\"eq\",p),n.addMethod(\"eql\",d),n.addMethod(\"eqls\",d),n.addMethod(\"above\",f),n.addMethod(\"gt\",f),n.addMethod(\"greaterThan\",f),n.addMethod(\"least\",h),n.addMethod(\"gte\",h),n.addMethod(\"greaterThanOrEqual\",h),n.addMethod(\"below\",m),n.addMethod(\"lt\",m),n.addMethod(\"lessThan\",m),n.addMethod(\"most\",g),n.addMethod(\"lte\",g),n.addMethod(\"lessThanOrEqual\",g),n.addMethod(\"within\",(function(e,i,o){o&&r(this,\"message\",o);var s,c=r(this,\"object\"),u=r(this,\"doLength\"),l=r(this,\"message\"),p=l?l+\": \":\"\",d=r(this,\"ssfi\"),f=t.type(c).toLowerCase(),h=t.type(e).toLowerCase(),m=t.type(i).toLowerCase(),g=!0,y=\"date\"===h&&\"date\"===m?e.toISOString()+\"..\"+i.toISOString():e+\"..\"+i;if(u&&\"map\"!==f&&\"set\"!==f&&new n(c,l,d,!0).to.have.property(\"length\"),u||\"date\"!==f||\"date\"===h&&\"date\"===m)if(\"number\"===h&&\"number\"===m||!u&&\"number\"!==f)if(u||\"date\"===f||\"number\"===f)g=!1;else{s=p+\"expected \"+(\"string\"===f?\"'\"+c+\"'\":c)+\" to be a number or a date\"}else s=p+\"the arguments to within must be numbers\";else s=p+\"the arguments to within must be dates\";if(g)throw new a(s,void 0,d);if(u){var v,b=\"length\";\"map\"===f||\"set\"===f?(b=\"size\",v=c.size):v=c.length,this.assert(v>=e&&v<=i,\"expected #{this} to have a \"+b+\" within \"+y,\"expected #{this} to not have a \"+b+\" within \"+y)}else this.assert(c>=e&&c<=i,\"expected #{this} to be within \"+y,\"expected #{this} to not be within \"+y)})),n.addMethod(\"instanceof\",y),n.addMethod(\"instanceOf\",y),n.addMethod(\"property\",v),n.addMethod(\"ownProperty\",b),n.addMethod(\"haveOwnProperty\",b),n.addMethod(\"ownPropertyDescriptor\",x),n.addMethod(\"haveOwnPropertyDescriptor\",x),n.addChainableMethod(\"length\",k,w),n.addChainableMethod(\"lengthOf\",k,w),n.addMethod(\"match\",_),n.addMethod(\"matches\",_),n.addMethod(\"string\",(function(e,a){a&&r(this,\"message\",a);var i=r(this,\"object\"),o=r(this,\"message\"),s=r(this,\"ssfi\");new n(i,o,s,!0).is.a(\"string\"),this.assert(~i.indexOf(e),\"expected #{this} to contain \"+t.inspect(e),\"expected #{this} to not contain \"+t.inspect(e))})),n.addMethod(\"keys\",j),n.addMethod(\"key\",j),n.addMethod(\"throw\",S),n.addMethod(\"throws\",S),n.addMethod(\"Throw\",S),n.addMethod(\"respondTo\",A),n.addMethod(\"respondsTo\",A),n.addProperty(\"itself\",(function(){r(this,\"itself\",!0)})),n.addMethod(\"satisfy\",E),n.addMethod(\"satisfies\",E),n.addMethod(\"closeTo\",C),n.addMethod(\"approximately\",C),n.addMethod(\"members\",(function(e,t){t&&r(this,\"message\",t);var a=r(this,\"object\"),i=r(this,\"message\"),o=r(this,\"ssfi\");new n(a,i,o,!0).to.be.an(\"array\"),new n(e,i,o,!0).to.be.an(\"array\");var s,c,u,l=r(this,\"contains\"),p=r(this,\"ordered\");l?(c=\"expected #{this} to be \"+(s=p?\"an ordered superset\":\"a superset\")+\" of #{exp}\",u=\"expected #{this} to not be \"+s+\" of #{exp}\"):(c=\"expected #{this} to have the same \"+(s=p?\"ordered members\":\"members\")+\" as #{exp}\",u=\"expected #{this} to not have the same \"+s+\" as #{exp}\");var d=r(this,\"deep\")?r(this,\"eql\"):void 0;this.assert(function(e,t,n,a,r){if(!a){if(e.length!==t.length)return!1;t=t.slice()}return e.every((function(e,i){if(r)return n?n(e,t[i]):e===t[i];if(!n){var o=t.indexOf(e);return-1!==o&&(a||t.splice(o,1),!0)}return t.some((function(r,i){return!!n(e,r)&&(a||t.splice(i,1),!0)}))}))}(e,a,d,l,p),c,u,e,a,!0)})),n.addMethod(\"oneOf\",(function(e,t){t&&r(this,\"message\",t);var a=r(this,\"object\"),i=r(this,\"message\"),o=r(this,\"ssfi\"),s=r(this,\"contains\"),c=r(this,\"deep\"),u=r(this,\"eql\");new n(e,i,o,!0).to.be.an(\"array\"),s?this.assert(e.some((function(e){return a.indexOf(e)>-1})),\"expected #{this} to contain one of #{exp}\",\"expected #{this} to not contain one of #{exp}\",e,a):c?this.assert(e.some((function(e){return u(a,e)})),\"expected #{this} to deeply equal one of #{exp}\",\"expected #{this} to deeply equal one of #{exp}\",e,a):this.assert(e.indexOf(a)>-1,\"expected #{this} to be one of #{exp}\",\"expected #{this} to not be one of #{exp}\",e,a)})),n.addMethod(\"change\",T),n.addMethod(\"changes\",T),n.addMethod(\"increase\",P),n.addMethod(\"increases\",P),n.addMethod(\"decrease\",D),n.addMethod(\"decreases\",D),n.addMethod(\"by\",(function(e,t){t&&r(this,\"message\",t);var n,a=r(this,\"deltaMsgObj\"),i=r(this,\"initialDeltaValue\"),o=r(this,\"finalDeltaValue\"),s=r(this,\"deltaBehavior\"),c=r(this,\"realDelta\");n=\"change\"===s?Math.abs(o-i)===Math.abs(e):c===Math.abs(e),this.assert(n,\"expected \"+a+\" to \"+s+\" by \"+e,\"expected \"+a+\" to not \"+s+\" by \"+e)})),n.addProperty(\"extensible\",(function(){var e=r(this,\"object\"),t=e===Object(e)&&Object.isExtensible(e);this.assert(t,\"expected #{this} to be extensible\",\"expected #{this} to not be extensible\")})),n.addProperty(\"sealed\",(function(){var e=r(this,\"object\"),t=e!==Object(e)||Object.isSealed(e);this.assert(t,\"expected #{this} to be sealed\",\"expected #{this} to not be sealed\")})),n.addProperty(\"frozen\",(function(){var e=r(this,\"object\"),t=e!==Object(e)||Object.isFrozen(e);this.assert(t,\"expected #{this} to be frozen\",\"expected #{this} to not be frozen\")})),n.addProperty(\"finite\",(function(e){var t=r(this,\"object\");this.assert(\"number\"==typeof t&&isFinite(t),\"expected #{this} to be a finite number\",\"expected #{this} to not be a finite number\")}))}},{}],253:[function(e,t,n){t.exports=function(e,t){var n=e.Assertion,a=t.flag,r=e.assert=function(t,a){new n(null,null,e.assert,!0).assert(t,a,\"[ negation message unavailable ]\")};r.fail=function(t,n,a,i){throw arguments.length<2&&(a=t,t=void 0),a=a||\"assert.fail()\",new e.AssertionError(a,{actual:t,expected:n,operator:i},r.fail)},r.isOk=function(e,t){new n(e,t,r.isOk,!0).is.ok},r.isNotOk=function(e,t){new n(e,t,r.isNotOk,!0).is.not.ok},r.equal=function(e,t,i){var o=new n(e,i,r.equal,!0);o.assert(t==a(o,\"object\"),\"expected #{this} to equal #{exp}\",\"expected #{this} to not equal #{act}\",t,e,!0)},r.notEqual=function(e,t,i){var o=new n(e,i,r.notEqual,!0);o.assert(t!=a(o,\"object\"),\"expected #{this} to not equal #{exp}\",\"expected #{this} to equal #{act}\",t,e,!0)},r.strictEqual=function(e,t,a){new n(e,a,r.strictEqual,!0).to.equal(t)},r.notStrictEqual=function(e,t,a){new n(e,a,r.notStrictEqual,!0).to.not.equal(t)},r.deepEqual=r.deepStrictEqual=function(e,t,a){new n(e,a,r.deepEqual,!0).to.eql(t)},r.notDeepEqual=function(e,t,a){new n(e,a,r.notDeepEqual,!0).to.not.eql(t)},r.isAbove=function(e,t,a){new n(e,a,r.isAbove,!0).to.be.above(t)},r.isAtLeast=function(e,t,a){new n(e,a,r.isAtLeast,!0).to.be.least(t)},r.isBelow=function(e,t,a){new n(e,a,r.isBelow,!0).to.be.below(t)},r.isAtMost=function(e,t,a){new n(e,a,r.isAtMost,!0).to.be.most(t)},r.isTrue=function(e,t){new n(e,t,r.isTrue,!0).is.true},r.isNotTrue=function(e,t){new n(e,t,r.isNotTrue,!0).to.not.equal(!0)},r.isFalse=function(e,t){new n(e,t,r.isFalse,!0).is.false},r.isNotFalse=function(e,t){new n(e,t,r.isNotFalse,!0).to.not.equal(!1)},r.isNull=function(e,t){new n(e,t,r.isNull,!0).to.equal(null)},r.isNotNull=function(e,t){new n(e,t,r.isNotNull,!0).to.not.equal(null)},r.isNaN=function(e,t){new n(e,t,r.isNaN,!0).to.be.NaN},r.isNotNaN=function(e,t){new n(e,t,r.isNotNaN,!0).not.to.be.NaN},r.exists=function(e,t){new n(e,t,r.exists,!0).to.exist},r.notExists=function(e,t){new n(e,t,r.notExists,!0).to.not.exist},r.isUndefined=function(e,t){new n(e,t,r.isUndefined,!0).to.equal(void 0)},r.isDefined=function(e,t){new n(e,t,r.isDefined,!0).to.not.equal(void 0)},r.isFunction=function(e,t){new n(e,t,r.isFunction,!0).to.be.a(\"function\")},r.isNotFunction=function(e,t){new n(e,t,r.isNotFunction,!0).to.not.be.a(\"function\")},r.isObject=function(e,t){new n(e,t,r.isObject,!0).to.be.a(\"object\")},r.isNotObject=function(e,t){new n(e,t,r.isNotObject,!0).to.not.be.a(\"object\")},r.isArray=function(e,t){new n(e,t,r.isArray,!0).to.be.an(\"array\")},r.isNotArray=function(e,t){new n(e,t,r.isNotArray,!0).to.not.be.an(\"array\")},r.isString=function(e,t){new n(e,t,r.isString,!0).to.be.a(\"string\")},r.isNotString=function(e,t){new n(e,t,r.isNotString,!0).to.not.be.a(\"string\")},r.isNumber=function(e,t){new n(e,t,r.isNumber,!0).to.be.a(\"number\")},r.isNotNumber=function(e,t){new n(e,t,r.isNotNumber,!0).to.not.be.a(\"number\")},r.isFinite=function(e,t){new n(e,t,r.isFinite,!0).to.be.finite},r.isBoolean=function(e,t){new n(e,t,r.isBoolean,!0).to.be.a(\"boolean\")},r.isNotBoolean=function(e,t){new n(e,t,r.isNotBoolean,!0).to.not.be.a(\"boolean\")},r.typeOf=function(e,t,a){new n(e,a,r.typeOf,!0).to.be.a(t)},r.notTypeOf=function(e,t,a){new n(e,a,r.notTypeOf,!0).to.not.be.a(t)},r.instanceOf=function(e,t,a){new n(e,a,r.instanceOf,!0).to.be.instanceOf(t)},r.notInstanceOf=function(e,t,a){new n(e,a,r.notInstanceOf,!0).to.not.be.instanceOf(t)},r.include=function(e,t,a){new n(e,a,r.include,!0).include(t)},r.notInclude=function(e,t,a){new n(e,a,r.notInclude,!0).not.include(t)},r.deepInclude=function(e,t,a){new n(e,a,r.deepInclude,!0).deep.include(t)},r.notDeepInclude=function(e,t,a){new n(e,a,r.notDeepInclude,!0).not.deep.include(t)},r.nestedInclude=function(e,t,a){new n(e,a,r.nestedInclude,!0).nested.include(t)},r.notNestedInclude=function(e,t,a){new n(e,a,r.notNestedInclude,!0).not.nested.include(t)},r.deepNestedInclude=function(e,t,a){new n(e,a,r.deepNestedInclude,!0).deep.nested.include(t)},r.notDeepNestedInclude=function(e,t,a){new n(e,a,r.notDeepNestedInclude,!0).not.deep.nested.include(t)},r.ownInclude=function(e,t,a){new n(e,a,r.ownInclude,!0).own.include(t)},r.notOwnInclude=function(e,t,a){new n(e,a,r.notOwnInclude,!0).not.own.include(t)},r.deepOwnInclude=function(e,t,a){new n(e,a,r.deepOwnInclude,!0).deep.own.include(t)},r.notDeepOwnInclude=function(e,t,a){new n(e,a,r.notDeepOwnInclude,!0).not.deep.own.include(t)},r.match=function(e,t,a){new n(e,a,r.match,!0).to.match(t)},r.notMatch=function(e,t,a){new n(e,a,r.notMatch,!0).to.not.match(t)},r.property=function(e,t,a){new n(e,a,r.property,!0).to.have.property(t)},r.notProperty=function(e,t,a){new n(e,a,r.notProperty,!0).to.not.have.property(t)},r.propertyVal=function(e,t,a,i){new n(e,i,r.propertyVal,!0).to.have.property(t,a)},r.notPropertyVal=function(e,t,a,i){new n(e,i,r.notPropertyVal,!0).to.not.have.property(t,a)},r.deepPropertyVal=function(e,t,a,i){new n(e,i,r.deepPropertyVal,!0).to.have.deep.property(t,a)},r.notDeepPropertyVal=function(e,t,a,i){new n(e,i,r.notDeepPropertyVal,!0).to.not.have.deep.property(t,a)},r.ownProperty=function(e,t,a){new n(e,a,r.ownProperty,!0).to.have.own.property(t)},r.notOwnProperty=function(e,t,a){new n(e,a,r.notOwnProperty,!0).to.not.have.own.property(t)},r.ownPropertyVal=function(e,t,a,i){new n(e,i,r.ownPropertyVal,!0).to.have.own.property(t,a)},r.notOwnPropertyVal=function(e,t,a,i){new n(e,i,r.notOwnPropertyVal,!0).to.not.have.own.property(t,a)},r.deepOwnPropertyVal=function(e,t,a,i){new n(e,i,r.deepOwnPropertyVal,!0).to.have.deep.own.property(t,a)},r.notDeepOwnPropertyVal=function(e,t,a,i){new n(e,i,r.notDeepOwnPropertyVal,!0).to.not.have.deep.own.property(t,a)},r.nestedProperty=function(e,t,a){new n(e,a,r.nestedProperty,!0).to.have.nested.property(t)},r.notNestedProperty=function(e,t,a){new n(e,a,r.notNestedProperty,!0).to.not.have.nested.property(t)},r.nestedPropertyVal=function(e,t,a,i){new n(e,i,r.nestedPropertyVal,!0).to.have.nested.property(t,a)},r.notNestedPropertyVal=function(e,t,a,i){new n(e,i,r.notNestedPropertyVal,!0).to.not.have.nested.property(t,a)},r.deepNestedPropertyVal=function(e,t,a,i){new n(e,i,r.deepNestedPropertyVal,!0).to.have.deep.nested.property(t,a)},r.notDeepNestedPropertyVal=function(e,t,a,i){new n(e,i,r.notDeepNestedPropertyVal,!0).to.not.have.deep.nested.property(t,a)},r.lengthOf=function(e,t,a){new n(e,a,r.lengthOf,!0).to.have.lengthOf(t)},r.hasAnyKeys=function(e,t,a){new n(e,a,r.hasAnyKeys,!0).to.have.any.keys(t)},r.hasAllKeys=function(e,t,a){new n(e,a,r.hasAllKeys,!0).to.have.all.keys(t)},r.containsAllKeys=function(e,t,a){new n(e,a,r.containsAllKeys,!0).to.contain.all.keys(t)},r.doesNotHaveAnyKeys=function(e,t,a){new n(e,a,r.doesNotHaveAnyKeys,!0).to.not.have.any.keys(t)},r.doesNotHaveAllKeys=function(e,t,a){new n(e,a,r.doesNotHaveAllKeys,!0).to.not.have.all.keys(t)},r.hasAnyDeepKeys=function(e,t,a){new n(e,a,r.hasAnyDeepKeys,!0).to.have.any.deep.keys(t)},r.hasAllDeepKeys=function(e,t,a){new n(e,a,r.hasAllDeepKeys,!0).to.have.all.deep.keys(t)},r.containsAllDeepKeys=function(e,t,a){new n(e,a,r.containsAllDeepKeys,!0).to.contain.all.deep.keys(t)},r.doesNotHaveAnyDeepKeys=function(e,t,a){new n(e,a,r.doesNotHaveAnyDeepKeys,!0).to.not.have.any.deep.keys(t)},r.doesNotHaveAllDeepKeys=function(e,t,a){new n(e,a,r.doesNotHaveAllDeepKeys,!0).to.not.have.all.deep.keys(t)},r.throws=function(e,t,i,o){(\"string\"==typeof t||t instanceof RegExp)&&(i=t,t=null);var s=new n(e,o,r.throws,!0).to.throw(t,i);return a(s,\"object\")},r.doesNotThrow=function(e,t,a,i){(\"string\"==typeof t||t instanceof RegExp)&&(a=t,t=null),new n(e,i,r.doesNotThrow,!0).to.not.throw(t,a)},r.operator=function(i,o,s,c){var u;switch(o){case\"==\":u=i==s;break;case\"===\":u=i===s;break;case\">\":u=i>s;break;case\">=\":u=i>=s;break;case\"<\":u=i<s;break;case\"<=\":u=i<=s;break;case\"!=\":u=i!=s;break;case\"!==\":u=i!==s;break;default:throw c=c?c+\": \":c,new e.AssertionError(c+'Invalid operator \"'+o+'\"',void 0,r.operator)}var l=new n(u,c,r.operator,!0);l.assert(!0===a(l,\"object\"),\"expected \"+t.inspect(i)+\" to be \"+o+\" \"+t.inspect(s),\"expected \"+t.inspect(i)+\" to not be \"+o+\" \"+t.inspect(s))},r.closeTo=function(e,t,a,i){new n(e,i,r.closeTo,!0).to.be.closeTo(t,a)},r.approximately=function(e,t,a,i){new n(e,i,r.approximately,!0).to.be.approximately(t,a)},r.sameMembers=function(e,t,a){new n(e,a,r.sameMembers,!0).to.have.same.members(t)},r.notSameMembers=function(e,t,a){new n(e,a,r.notSameMembers,!0).to.not.have.same.members(t)},r.sameDeepMembers=function(e,t,a){new n(e,a,r.sameDeepMembers,!0).to.have.same.deep.members(t)},r.notSameDeepMembers=function(e,t,a){new n(e,a,r.notSameDeepMembers,!0).to.not.have.same.deep.members(t)},r.sameOrderedMembers=function(e,t,a){new n(e,a,r.sameOrderedMembers,!0).to.have.same.ordered.members(t)},r.notSameOrderedMembers=function(e,t,a){new n(e,a,r.notSameOrderedMembers,!0).to.not.have.same.ordered.members(t)},r.sameDeepOrderedMembers=function(e,t,a){new n(e,a,r.sameDeepOrderedMembers,!0).to.have.same.deep.ordered.members(t)},r.notSameDeepOrderedMembers=function(e,t,a){new n(e,a,r.notSameDeepOrderedMembers,!0).to.not.have.same.deep.ordered.members(t)},r.includeMembers=function(e,t,a){new n(e,a,r.includeMembers,!0).to.include.members(t)},r.notIncludeMembers=function(e,t,a){new n(e,a,r.notIncludeMembers,!0).to.not.include.members(t)},r.includeDeepMembers=function(e,t,a){new n(e,a,r.includeDeepMembers,!0).to.include.deep.members(t)},r.notIncludeDeepMembers=function(e,t,a){new n(e,a,r.notIncludeDeepMembers,!0).to.not.include.deep.members(t)},r.includeOrderedMembers=function(e,t,a){new n(e,a,r.includeOrderedMembers,!0).to.include.ordered.members(t)},r.notIncludeOrderedMembers=function(e,t,a){new n(e,a,r.notIncludeOrderedMembers,!0).to.not.include.ordered.members(t)},r.includeDeepOrderedMembers=function(e,t,a){new n(e,a,r.includeDeepOrderedMembers,!0).to.include.deep.ordered.members(t)},r.notIncludeDeepOrderedMembers=function(e,t,a){new n(e,a,r.notIncludeDeepOrderedMembers,!0).to.not.include.deep.ordered.members(t)},r.oneOf=function(e,t,a){new n(e,a,r.oneOf,!0).to.be.oneOf(t)},r.changes=function(e,t,a,i){3===arguments.length&&\"function\"==typeof t&&(i=a,a=null),new n(e,i,r.changes,!0).to.change(t,a)},r.changesBy=function(e,t,a,i,o){if(4===arguments.length&&\"function\"==typeof t){var s=i;i=a,o=s}else 3===arguments.length&&(i=a,a=null);new n(e,o,r.changesBy,!0).to.change(t,a).by(i)},r.doesNotChange=function(e,t,a,i){return 3===arguments.length&&\"function\"==typeof t&&(i=a,a=null),new n(e,i,r.doesNotChange,!0).to.not.change(t,a)},r.changesButNotBy=function(e,t,a,i,o){if(4===arguments.length&&\"function\"==typeof t){var s=i;i=a,o=s}else 3===arguments.length&&(i=a,a=null);new n(e,o,r.changesButNotBy,!0).to.change(t,a).but.not.by(i)},r.increases=function(e,t,a,i){return 3===arguments.length&&\"function\"==typeof t&&(i=a,a=null),new n(e,i,r.increases,!0).to.increase(t,a)},r.increasesBy=function(e,t,a,i,o){if(4===arguments.length&&\"function\"==typeof t){var s=i;i=a,o=s}else 3===arguments.length&&(i=a,a=null);new n(e,o,r.increasesBy,!0).to.increase(t,a).by(i)},r.doesNotIncrease=function(e,t,a,i){return 3===arguments.length&&\"function\"==typeof t&&(i=a,a=null),new n(e,i,r.doesNotIncrease,!0).to.not.increase(t,a)},r.increasesButNotBy=function(e,t,a,i,o){if(4===arguments.length&&\"function\"==typeof t){var s=i;i=a,o=s}else 3===arguments.length&&(i=a,a=null);new n(e,o,r.increasesButNotBy,!0).to.increase(t,a).but.not.by(i)},r.decreases=function(e,t,a,i){return 3===arguments.length&&\"function\"==typeof t&&(i=a,a=null),new n(e,i,r.decreases,!0).to.decrease(t,a)},r.decreasesBy=function(e,t,a,i,o){if(4===arguments.length&&\"function\"==typeof t){var s=i;i=a,o=s}else 3===arguments.length&&(i=a,a=null);new n(e,o,r.decreasesBy,!0).to.decrease(t,a).by(i)},r.doesNotDecrease=function(e,t,a,i){return 3===arguments.length&&\"function\"==typeof t&&(i=a,a=null),new n(e,i,r.doesNotDecrease,!0).to.not.decrease(t,a)},r.doesNotDecreaseBy=function(e,t,a,i,o){if(4===arguments.length&&\"function\"==typeof t){var s=i;i=a,o=s}else 3===arguments.length&&(i=a,a=null);return new n(e,o,r.doesNotDecreaseBy,!0).to.not.decrease(t,a).by(i)},r.decreasesButNotBy=function(e,t,a,i,o){if(4===arguments.length&&\"function\"==typeof t){var s=i;i=a,o=s}else 3===arguments.length&&(i=a,a=null);new n(e,o,r.decreasesButNotBy,!0).to.decrease(t,a).but.not.by(i)},r.ifError=function(e){if(e)throw e},r.isExtensible=function(e,t){new n(e,t,r.isExtensible,!0).to.be.extensible},r.isNotExtensible=function(e,t){new n(e,t,r.isNotExtensible,!0).to.not.be.extensible},r.isSealed=function(e,t){new n(e,t,r.isSealed,!0).to.be.sealed},r.isNotSealed=function(e,t){new n(e,t,r.isNotSealed,!0).to.not.be.sealed},r.isFrozen=function(e,t){new n(e,t,r.isFrozen,!0).to.be.frozen},r.isNotFrozen=function(e,t){new n(e,t,r.isNotFrozen,!0).to.not.be.frozen},r.isEmpty=function(e,t){new n(e,t,r.isEmpty,!0).to.be.empty},r.isNotEmpty=function(e,t){new n(e,t,r.isNotEmpty,!0).to.not.be.empty},function e(t,n){return r[n]=r[t],e}(\"isOk\",\"ok\")(\"isNotOk\",\"notOk\")(\"throws\",\"throw\")(\"throws\",\"Throw\")(\"isExtensible\",\"extensible\")(\"isNotExtensible\",\"notExtensible\")(\"isSealed\",\"sealed\")(\"isNotSealed\",\"notSealed\")(\"isFrozen\",\"frozen\")(\"isNotFrozen\",\"notFrozen\")(\"isEmpty\",\"empty\")(\"isNotEmpty\",\"notEmpty\")}},{}],254:[function(e,t,n){t.exports=function(e,t){e.expect=function(t,n){return new e.Assertion(t,n)},e.expect.fail=function(t,n,a,r){throw arguments.length<2&&(a=t,t=void 0),a=a||\"expect.fail()\",new e.AssertionError(a,{actual:t,expected:n,operator:r},e.expect.fail)}}},{}],255:[function(e,t,n){t.exports=function(e,t){var n=e.Assertion;function a(){Object.defineProperty(Object.prototype,\"should\",{set:function(e){Object.defineProperty(this,\"should\",{value:e,enumerable:!0,configurable:!0,writable:!0})},get:function e(){return this instanceof String||this instanceof Number||this instanceof Boolean||\"function\"==typeof Symbol&&this instanceof Symbol||\"function\"==typeof BigInt&&this instanceof BigInt?new n(this.valueOf(),null,e):new n(this,null,e)},configurable:!0});var t={fail:function(n,a,r,i){throw arguments.length<2&&(r=n,n=void 0),r=r||\"should.fail()\",new e.AssertionError(r,{actual:n,expected:a,operator:i},t.fail)},equal:function(e,t,a){new n(e,a).to.equal(t)},Throw:function(e,t,a,r){new n(e,r).to.Throw(t,a)},exist:function(e,t){new n(e,t).to.exist},not:{}};return t.not.equal=function(e,t,a){new n(e,a).to.not.equal(t)},t.not.Throw=function(e,t,a,r){new n(e,r).to.not.Throw(t,a)},t.not.exist=function(e,t){new n(e,t).to.not.exist},t.throw=t.Throw,t.not.throw=t.not.Throw,t}e.should=a,e.Should=a}},{}],256:[function(e,t,n){var a=e(\"./addLengthGuard\"),r=e(\"../../chai\"),i=e(\"./flag\"),o=e(\"./proxify\"),s=e(\"./transferFlags\"),c=\"function\"==typeof Object.setPrototypeOf,u=function(){},l=Object.getOwnPropertyNames(u).filter((function(e){var t=Object.getOwnPropertyDescriptor(u,e);return\"object\"!=typeof t||!t.configurable})),p=Function.prototype.call,d=Function.prototype.apply;t.exports=function(e,t,n,u){\"function\"!=typeof u&&(u=function(){});var f={method:n,chainingBehavior:u};e.__methods||(e.__methods={}),e.__methods[t]=f,Object.defineProperty(e,t,{get:function(){f.chainingBehavior.call(this);var n=function(){i(this,\"lockSsfi\")||i(this,\"ssfi\",n);var e=f.method.apply(this,arguments);if(void 0!==e)return e;var t=new r.Assertion;return s(this,t),t};if(a(n,t,!0),c){var u=Object.create(this);u.call=p,u.apply=d,Object.setPrototypeOf(n,u)}else{Object.getOwnPropertyNames(e).forEach((function(t){if(-1===l.indexOf(t)){var a=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(n,t,a)}}))}return s(this,n),o(n)},configurable:!0})}},{\"../../chai\":249,\"./addLengthGuard\":257,\"./flag\":262,\"./proxify\":277,\"./transferFlags\":279}],257:[function(e,t,n){var a=Object.getOwnPropertyDescriptor((function(){}),\"length\");t.exports=function(e,t,n){return a.configurable?(Object.defineProperty(e,\"length\",{get:function(){if(n)throw Error(\"Invalid Chai property: \"+t+'.length. Due to a compatibility issue, \"length\" cannot directly follow \"'+t+'\". Use \"'+t+'.lengthOf\" instead.');throw Error(\"Invalid Chai property: \"+t+'.length. See docs for proper usage of \"'+t+'\".')}}),e):e}},{}],258:[function(e,t,n){var a=e(\"./addLengthGuard\"),r=e(\"../../chai\"),i=e(\"./flag\"),o=e(\"./proxify\"),s=e(\"./transferFlags\");t.exports=function(e,t,n){var c=function(){i(this,\"lockSsfi\")||i(this,\"ssfi\",c);var e=n.apply(this,arguments);if(void 0!==e)return e;var t=new r.Assertion;return s(this,t),t};a(c,t,!1),e[t]=o(c,t)}},{\"../../chai\":249,\"./addLengthGuard\":257,\"./flag\":262,\"./proxify\":277,\"./transferFlags\":279}],259:[function(e,t,n){var a=e(\"../../chai\"),r=e(\"./flag\"),i=e(\"./isProxyEnabled\"),o=e(\"./transferFlags\");t.exports=function(e,t,n){n=void 0===n?function(){}:n,Object.defineProperty(e,t,{get:function e(){i()||r(this,\"lockSsfi\")||r(this,\"ssfi\",e);var t=n.call(this);if(void 0!==t)return t;var s=new a.Assertion;return o(this,s),s},configurable:!0})}},{\"../../chai\":249,\"./flag\":262,\"./isProxyEnabled\":272,\"./transferFlags\":279}],260:[function(e,t,n){var a=e(\"./inspect\");t.exports=function(e,t){return a(e)<a(t)?-1:1}},{\"./inspect\":270}],261:[function(e,t,n){var a=e(\"assertion-error\"),r=e(\"./flag\"),i=e(\"type-detect\");t.exports=function(e,t){var n=r(e,\"message\"),o=r(e,\"ssfi\");n=n?n+\": \":\"\",e=r(e,\"object\"),(t=t.map((function(e){return e.toLowerCase()}))).sort();var s=t.map((function(e,n){var a=~[\"a\",\"e\",\"i\",\"o\",\"u\"].indexOf(e.charAt(0))?\"an\":\"a\";return(t.length>1&&n===t.length-1?\"or \":\"\")+a+\" \"+e})).join(\", \"),c=i(e).toLowerCase();if(!t.some((function(e){return c===e})))throw new a(n+\"object tested must be \"+s+\", but \"+c+\" given\",void 0,o)}},{\"./flag\":262,\"assertion-error\":237,\"type-detect\":281}],262:[function(e,t,n){t.exports=function(e,t,n){var a=e.__flags||(e.__flags=Object.create(null));if(3!==arguments.length)return a[t];a[t]=n}},{}],263:[function(e,t,n){t.exports=function(e,t){return t.length>4?t[4]:e._obj}},{}],264:[function(e,t,n){var a=e(\"./flag\"),r=e(\"./getActual\"),i=e(\"./objDisplay\");t.exports=function(e,t){var n=a(e,\"negate\"),o=a(e,\"object\"),s=t[3],c=r(e,t),u=n?t[2]:t[1],l=a(e,\"message\");return\"function\"==typeof u&&(u=u()),u=(u=u||\"\").replace(/#\\{this\\}/g,(function(){return i(o)})).replace(/#\\{act\\}/g,(function(){return i(c)})).replace(/#\\{exp\\}/g,(function(){return i(s)})),l?l+\": \"+u:u}},{\"./flag\":262,\"./getActual\":263,\"./objDisplay\":273}],265:[function(e,t,n){var a=e(\"type-detect\"),r=e(\"./flag\");t.exports=function(e,t){var n=r(e,\"operator\"),i=r(e,\"negate\"),o=t[3],s=i?t[2]:t[1];if(n)return n;if(\"function\"==typeof s&&(s=s()),(s=s||\"\")&&!/\\shave\\s/.test(s)){var c=function(e){var t=a(e);return-1!==[\"Array\",\"Object\",\"function\"].indexOf(t)}(o);return/\\snot\\s/.test(s)?c?\"notDeepStrictEqual\":\"notStrictEqual\":c?\"deepStrictEqual\":\"strictEqual\"}}},{\"./flag\":262,\"type-detect\":281}],266:[function(e,t,n){var a=e(\"./getOwnEnumerablePropertySymbols\");t.exports=function(e){return Object.keys(e).concat(a(e))}},{\"./getOwnEnumerablePropertySymbols\":267}],267:[function(e,t,n){t.exports=function(e){return\"function\"!=typeof Object.getOwnPropertySymbols?[]:Object.getOwnPropertySymbols(e).filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))}},{}],268:[function(e,t,n){t.exports=function(e){var t=Object.getOwnPropertyNames(e);function n(e){-1===t.indexOf(e)&&t.push(e)}for(var a=Object.getPrototypeOf(e);null!==a;)Object.getOwnPropertyNames(a).forEach(n),a=Object.getPrototypeOf(a);return t}},{}],269:[function(e,t,n){var a=e(\"pathval\");n.test=e(\"./test\"),n.type=e(\"type-detect\"),n.expectTypes=e(\"./expectTypes\"),n.getMessage=e(\"./getMessage\"),n.getActual=e(\"./getActual\"),n.inspect=e(\"./inspect\"),n.objDisplay=e(\"./objDisplay\"),n.flag=e(\"./flag\"),n.transferFlags=e(\"./transferFlags\"),n.eql=e(\"deep-eql\"),n.getPathInfo=a.getPathInfo,n.hasProperty=a.hasProperty,n.getName=e(\"get-func-name\"),n.addProperty=e(\"./addProperty\"),n.addMethod=e(\"./addMethod\"),n.overwriteProperty=e(\"./overwriteProperty\"),n.overwriteMethod=e(\"./overwriteMethod\"),n.addChainableMethod=e(\"./addChainableMethod\"),n.overwriteChainableMethod=e(\"./overwriteChainableMethod\"),n.compareByInspect=e(\"./compareByInspect\"),n.getOwnEnumerablePropertySymbols=e(\"./getOwnEnumerablePropertySymbols\"),n.getOwnEnumerableProperties=e(\"./getOwnEnumerableProperties\"),n.checkError=e(\"check-error\"),n.proxify=e(\"./proxify\"),n.addLengthGuard=e(\"./addLengthGuard\"),n.isProxyEnabled=e(\"./isProxyEnabled\"),n.isNaN=e(\"./isNaN\"),n.getOperator=e(\"./getOperator\")},{\"./addChainableMethod\":256,\"./addLengthGuard\":257,\"./addMethod\":258,\"./addProperty\":259,\"./compareByInspect\":260,\"./expectTypes\":261,\"./flag\":262,\"./getActual\":263,\"./getMessage\":264,\"./getOperator\":265,\"./getOwnEnumerableProperties\":266,\"./getOwnEnumerablePropertySymbols\":267,\"./inspect\":270,\"./isNaN\":271,\"./isProxyEnabled\":272,\"./objDisplay\":273,\"./overwriteChainableMethod\":274,\"./overwriteMethod\":275,\"./overwriteProperty\":276,\"./proxify\":277,\"./test\":278,\"./transferFlags\":279,\"check-error\":283,\"deep-eql\":280,\"get-func-name\":366,pathval:427,\"type-detect\":281}],270:[function(e,t,n){e(\"get-func-name\");var a=e(\"loupe\"),r=e(\"../config\");t.exports=function(e,t,n,i){var o={colors:i,depth:void 0===n?2:n,showHidden:t,truncate:r.truncateThreshold?r.truncateThreshold:1/0};return a.inspect(e,o)}},{\"../config\":251,\"get-func-name\":366,loupe:411}],271:[function(e,t,n){t.exports=Number.isNaN||function(e){return e!=e}},{}],272:[function(e,t,n){var a=e(\"../config\");t.exports=function(){return a.useProxy&&\"undefined\"!=typeof Proxy&&\"undefined\"!=typeof Reflect}},{\"../config\":251}],273:[function(e,t,n){var a=e(\"./inspect\"),r=e(\"../config\");t.exports=function(e){var t=a(e),n=Object.prototype.toString.call(e);if(r.truncateThreshold&&t.length>=r.truncateThreshold){if(\"[object Function]\"===n)return e.name&&\"\"!==e.name?\"[Function: \"+e.name+\"]\":\"[Function]\";if(\"[object Array]\"===n)return\"[ Array(\"+e.length+\") ]\";if(\"[object Object]\"===n){var i=Object.keys(e);return\"{ Object (\"+(i.length>2?i.splice(0,2).join(\", \")+\", ...\":i.join(\", \"))+\") }\"}return t}return t}},{\"../config\":251,\"./inspect\":270}],274:[function(e,t,n){var a=e(\"../../chai\"),r=e(\"./transferFlags\");t.exports=function(e,t,n,i){var o=e.__methods[t],s=o.chainingBehavior;o.chainingBehavior=function(){var e=i(s).call(this);if(void 0!==e)return e;var t=new a.Assertion;return r(this,t),t};var c=o.method;o.method=function(){var e=n(c).apply(this,arguments);if(void 0!==e)return e;var t=new a.Assertion;return r(this,t),t}}},{\"../../chai\":249,\"./transferFlags\":279}],275:[function(e,t,n){var a=e(\"./addLengthGuard\"),r=e(\"../../chai\"),i=e(\"./flag\"),o=e(\"./proxify\"),s=e(\"./transferFlags\");t.exports=function(e,t,n){var c=e[t],u=function(){throw new Error(t+\" is not a function\")};c&&\"function\"==typeof c&&(u=c);var l=function(){i(this,\"lockSsfi\")||i(this,\"ssfi\",l);var e=i(this,\"lockSsfi\");i(this,\"lockSsfi\",!0);var t=n(u).apply(this,arguments);if(i(this,\"lockSsfi\",e),void 0!==t)return t;var a=new r.Assertion;return s(this,a),a};a(l,t,!1),e[t]=o(l,t)}},{\"../../chai\":249,\"./addLengthGuard\":257,\"./flag\":262,\"./proxify\":277,\"./transferFlags\":279}],276:[function(e,t,n){var a=e(\"../../chai\"),r=e(\"./flag\"),i=e(\"./isProxyEnabled\"),o=e(\"./transferFlags\");t.exports=function(e,t,n){var s=Object.getOwnPropertyDescriptor(e,t),c=function(){};s&&\"function\"==typeof s.get&&(c=s.get),Object.defineProperty(e,t,{get:function e(){i()||r(this,\"lockSsfi\")||r(this,\"ssfi\",e);var t=r(this,\"lockSsfi\");r(this,\"lockSsfi\",!0);var s=n(c).call(this);if(r(this,\"lockSsfi\",t),void 0!==s)return s;var u=new a.Assertion;return o(this,u),u},configurable:!0})}},{\"../../chai\":249,\"./flag\":262,\"./isProxyEnabled\":272,\"./transferFlags\":279}],277:[function(e,t,n){var a=e(\"../config\"),r=e(\"./flag\"),i=e(\"./getProperties\"),o=e(\"./isProxyEnabled\"),s=[\"__flags\",\"__methods\",\"_obj\",\"assert\"];t.exports=function(e,t){return o()?new Proxy(e,{get:function e(n,o){if(\"string\"==typeof o&&-1===a.proxyExcludedKeys.indexOf(o)&&!Reflect.has(n,o)){if(t)throw Error(\"Invalid Chai property: \"+t+\".\"+o+'. See docs for proper usage of \"'+t+'\".');var c=null,u=4;throw i(n).forEach((function(e){if(!Object.prototype.hasOwnProperty(e)&&-1===s.indexOf(e)){var t=function(e,t,n){if(Math.abs(e.length-t.length)>=n)return n;for(var a=[],r=0;r<=e.length;r++)a[r]=Array(t.length+1).fill(0),a[r][0]=r;for(var i=0;i<t.length;i++)a[0][i]=i;for(r=1;r<=e.length;r++){var o=e.charCodeAt(r-1);for(i=1;i<=t.length;i++)Math.abs(r-i)>=n?a[r][i]=n:a[r][i]=Math.min(a[r-1][i]+1,a[r][i-1]+1,a[r-1][i-1]+(o===t.charCodeAt(i-1)?0:1))}return a[e.length][t.length]}(o,e,u);t<u&&(c=e,u=t)}})),null!==c?Error(\"Invalid Chai property: \"+o+'. Did you mean \"'+c+'\"?'):Error(\"Invalid Chai property: \"+o)}return-1!==s.indexOf(o)||r(n,\"lockSsfi\")||r(n,\"ssfi\",e),Reflect.get(n,o)}}):e}},{\"../config\":251,\"./flag\":262,\"./getProperties\":268,\"./isProxyEnabled\":272}],278:[function(e,t,n){var a=e(\"./flag\");t.exports=function(e,t){var n=a(e,\"negate\"),r=t[0];return n?!r:r}},{\"./flag\":262}],279:[function(e,t,n){t.exports=function(e,t,n){var a=e.__flags||(e.__flags=Object.create(null));for(var r in t.__flags||(t.__flags=Object.create(null)),n=3!==arguments.length||n,a)(n||\"object\"!==r&&\"ssfi\"!==r&&\"lockSsfi\"!==r&&\"message\"!=r)&&(t.__flags[r]=a[r])}},{}],280:[function(e,t,n){\"use strict\";var a=e(\"type-detect\");function r(){this._key=\"chai/deep-eql__\"+Math.random()+Date.now()}r.prototype={get:function(e){return e[this._key]},set:function(e,t){Object.isExtensible(e)&&Object.defineProperty(e,this._key,{value:t,configurable:!0})}};var i=\"function\"==typeof WeakMap?WeakMap:r;function o(e,t,n){if(!n||v(e)||v(t))return null;var a=n.get(e);if(a){var r=a.get(t);if(\"boolean\"==typeof r)return r}return null}function s(e,t,n,a){if(n&&!v(e)&&!v(t)){var r=n.get(e);r?r.set(t,a):((r=new i).set(t,a),n.set(e,r))}}function c(e,t,n){if(n&&n.comparator)return l(e,t,n);var a=u(e,t);return null!==a?a:l(e,t,n)}function u(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t||!v(e)&&!v(t)&&null}function l(e,t,n){(n=n||{}).memoize=!1!==n.memoize&&(n.memoize||new i);var r=n&&n.comparator,l=o(e,t,n.memoize);if(null!==l)return l;var v=o(t,e,n.memoize);if(null!==v)return v;if(r){var x=r(e,t);if(!1===x||!0===x)return s(e,t,n.memoize,x),x;var w=u(e,t);if(null!==w)return w}var k=a(e);if(k!==a(t))return s(e,t,n.memoize,!1),!1;s(e,t,n.memoize,!0);var _=function(e,t,n,a){switch(n){case\"String\":case\"Number\":case\"Boolean\":case\"Date\":return c(e.valueOf(),t.valueOf());case\"Promise\":case\"Symbol\":case\"function\":case\"WeakMap\":case\"WeakSet\":return e===t;case\"Error\":return y(e,t,[\"name\",\"message\",\"code\"],a);case\"Arguments\":case\"Int8Array\":case\"Uint8Array\":case\"Uint8ClampedArray\":case\"Int16Array\":case\"Uint16Array\":case\"Int32Array\":case\"Uint32Array\":case\"Float32Array\":case\"Float64Array\":case\"Array\":return d(e,t,a);case\"RegExp\":return function(e,t){return e.toString()===t.toString()}(e,t);case\"Generator\":return function(e,t,n){return d(h(e),h(t),n)}(e,t,a);case\"DataView\":return d(new Uint8Array(e.buffer),new Uint8Array(t.buffer),a);case\"ArrayBuffer\":return d(new Uint8Array(e),new Uint8Array(t),a);case\"Set\":case\"Map\":return p(e,t,a);case\"Temporal.PlainDate\":case\"Temporal.PlainTime\":case\"Temporal.PlainDateTime\":case\"Temporal.Instant\":case\"Temporal.ZonedDateTime\":case\"Temporal.PlainYearMonth\":case\"Temporal.PlainMonthDay\":return e.equals(t);case\"Temporal.Duration\":return e.total(\"nanoseconds\")===t.total(\"nanoseconds\");case\"Temporal.TimeZone\":case\"Temporal.Calendar\":return e.toString()===t.toString();default:return function(e,t,n){var a=m(e),r=m(t),i=g(e),o=g(t);if(a=a.concat(i),r=r.concat(o),a.length&&a.length===r.length)return!1!==d(b(a).sort(),b(r).sort())&&y(e,t,a,n);var s=f(e),c=f(t);if(s.length&&s.length===c.length)return s.sort(),c.sort(),d(s,c,n);if(0===a.length&&0===s.length&&0===r.length&&0===c.length)return!0;return!1}(e,t,a)}}(e,t,k,n);return s(e,t,n.memoize,_),_}function p(e,t,n){if(e.size!==t.size)return!1;if(0===e.size)return!0;var a=[],r=[];return e.forEach((function(e,t){a.push([e,t])})),t.forEach((function(e,t){r.push([e,t])})),d(a.sort(),r.sort(),n)}function d(e,t,n){var a=e.length;if(a!==t.length)return!1;if(0===a)return!0;for(var r=-1;++r<a;)if(!1===c(e[r],t[r],n))return!1;return!0}function f(e){if(function(e){return\"undefined\"!=typeof Symbol&&\"object\"==typeof e&&void 0!==Symbol.iterator&&\"function\"==typeof e[Symbol.iterator]}(e))try{return h(e[Symbol.iterator]())}catch(t){return[]}return[]}function h(e){for(var t=e.next(),n=[t.value];!1===t.done;)t=e.next(),n.push(t.value);return n}function m(e){var t=[];for(var n in e)t.push(n);return t}function g(e){for(var t=[],n=Object.getOwnPropertySymbols(e),a=0;a<n.length;a+=1){var r=n[a];Object.getOwnPropertyDescriptor(e,r).enumerable&&t.push(r)}return t}function y(e,t,n,a){var r=n.length;if(0===r)return!0;for(var i=0;i<r;i+=1)if(!1===c(e[n[i]],t[n[i]],a))return!1;return!0}function v(e){return null===e||\"object\"!=typeof e}function b(e){return e.map((function(e){return\"symbol\"==typeof e?e.toString():e}))}t.exports=c,t.exports.MemoizeMap=i},{\"type-detect\":281}],281:[function(e,t,n){(function(e){(function(){!function(e,a){\"object\"==typeof n&&void 0!==t?t.exports=a():\"function\"==typeof define&&define.amd?define(a):e.typeDetect=a()}(this,(function(){\"use strict\";var t=\"function\"==typeof Promise,n=\"object\"==typeof self?self:e,a=\"undefined\"!=typeof Symbol,r=\"undefined\"!=typeof Map,i=\"undefined\"!=typeof Set,o=\"undefined\"!=typeof WeakMap,s=\"undefined\"!=typeof WeakSet,c=\"undefined\"!=typeof DataView,u=a&&void 0!==Symbol.iterator,l=a&&void 0!==Symbol.toStringTag,p=i&&\"function\"==typeof Set.prototype.entries,d=r&&\"function\"==typeof Map.prototype.entries,f=p&&Object.getPrototypeOf((new Set).entries()),h=d&&Object.getPrototypeOf((new Map).entries()),m=u&&\"function\"==typeof Array.prototype[Symbol.iterator],g=m&&Object.getPrototypeOf([][Symbol.iterator]()),y=u&&\"function\"==typeof String.prototype[Symbol.iterator],v=y&&Object.getPrototypeOf(\"\"[Symbol.iterator]());return function(e){var a=typeof e;if(\"object\"!==a)return a;if(null===e)return\"null\";if(e===n)return\"global\";if(Array.isArray(e)&&(!1===l||!(Symbol.toStringTag in e)))return\"Array\";if(\"object\"==typeof window&&null!==window){if(\"object\"==typeof window.location&&e===window.location)return\"Location\";if(\"object\"==typeof window.document&&e===window.document)return\"Document\";if(\"object\"==typeof window.navigator){if(\"object\"==typeof window.navigator.mimeTypes&&e===window.navigator.mimeTypes)return\"MimeTypeArray\";if(\"object\"==typeof window.navigator.plugins&&e===window.navigator.plugins)return\"PluginArray\"}if((\"function\"==typeof window.HTMLElement||\"object\"==typeof window.HTMLElement)&&e instanceof window.HTMLElement){if(\"BLOCKQUOTE\"===e.tagName)return\"HTMLQuoteElement\";if(\"TD\"===e.tagName)return\"HTMLTableDataCellElement\";if(\"TH\"===e.tagName)return\"HTMLTableHeaderCellElement\"}}var u=l&&e[Symbol.toStringTag];if(\"string\"==typeof u)return u;var p=Object.getPrototypeOf(e);return p===RegExp.prototype?\"RegExp\":p===Date.prototype?\"Date\":t&&p===Promise.prototype?\"Promise\":i&&p===Set.prototype?\"Set\":r&&p===Map.prototype?\"Map\":s&&p===WeakSet.prototype?\"WeakSet\":o&&p===WeakMap.prototype?\"WeakMap\":c&&p===DataView.prototype?\"DataView\":r&&p===h?\"Map Iterator\":i&&p===f?\"Set Iterator\":m&&p===g?\"Array Iterator\":y&&p===v?\"String Iterator\":null===p?\"Object\":Object.prototype.toString.call(e).slice(8,-1)}}))}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],282:[function(e,t,n){\"use strict\";const a=/(?:charset|encoding)\\s{0,10}=\\s{0,10}['\"]? {0,10}([\\w\\-]{1,100})/i;t.exports=function(e,t,n){let r=null,i=0;t&&(n=n||512,i=t.length>n?n:t.length);let o=e;if(o&&\"string\"!=typeof o){let t=e;e.headers&&(t=e.headers),o=t[\"content-type\"]||t[\"Content-Type\"]}o&&(r=a.exec(o));!r&&i>0&&(o=t.slice(0,i).toString(),r=a.exec(o));let s=null;r&&(s=r[1].toLowerCase(),\"utf-8\"===s&&(s=\"utf8\"));return s}},{}],283:[function(e,t,n){\"use strict\";var a=e(\"get-func-name\");t.exports={compatibleInstance:function(e,t){return t instanceof Error&&e===t},compatibleConstructor:function(e,t){return t instanceof Error?e.constructor===t.constructor||e instanceof t.constructor:(t.prototype instanceof Error||t===Error)&&(e.constructor===t||e instanceof t)},compatibleMessage:function(e,t){var n=\"string\"==typeof e?e:e.message;return t instanceof RegExp?t.test(n):\"string\"==typeof t&&-1!==n.indexOf(t)},getMessage:function(e){var t=\"\";return e&&e.message?t=e.message:\"string\"==typeof e&&(t=e),t},getConstructorName:function(e){var t=e;if(e instanceof Error)t=a(e.constructor);else if(\"function\"==typeof e){if(\"\"===(t=a(e)))t=a(new e)||t}return t}}},{\"get-func-name\":366}],284:[function(e,t,n){var a=e(\"../static\"),r=e(\"../utils\"),i=r.isTag,o=r.domEach,s=Object.prototype.hasOwnProperty,c=r.camelCase,u=r.cssCase,l=/\\s+/,p=\"data-\",d={forEach:e(\"lodash.foreach\"),extend:e(\"lodash.assignin\"),some:e(\"lodash.some\")},f={null:null,true:!0,false:!1},h=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,m=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,g=function(e,t){if(e&&i(e))return e.attribs||(e.attribs={}),t?s.call(e.attribs,t)?h.test(t)?t:e.attribs[t]:\"option\"===e.name&&\"value\"===t?a.text(e.children):\"input\"!==e.name||\"radio\"!==e.attribs.type&&\"checkbox\"!==e.attribs.type||\"value\"!==t?void 0:\"on\":e.attribs},y=function(e,t,n){null===n?w(e,t):e.attribs[t]=n+\"\"};n.attr=function(e,t){return\"object\"==typeof e||void 0!==t?o(this,\"function\"==typeof t?function(n,a){y(a,e,t.call(a,n,a.attribs[e]))}:function(n,a){i(a)&&(\"object\"==typeof e?d.forEach(e,(function(e,t){y(a,t,e)})):y(a,e,t))}):g(this[0],e)};var v=function(e,t){if(e&&i(e))return e.hasOwnProperty(t)?e[t]:h.test(t)?void 0!==g(e,t):g(e,t)},b=function(e,t,n){e[t]=h.test(t)?!!n:n};n.prop=function(e,t){var n,a=0;if(\"string\"==typeof e&&void 0===t){switch(e){case\"style\":n=this.css(),d.forEach(n,(function(e,t){n[a++]=t})),n.length=a;break;case\"tagName\":case\"nodeName\":n=this[0].name.toUpperCase();break;default:n=v(this[0],e)}return n}if(\"object\"==typeof e||void 0!==t)return o(this,\"function\"==typeof t?function(n,a){b(a,e,t.call(a,n,v(a,e)))}:function(n,a){i(a)&&(\"object\"==typeof e?d.forEach(e,(function(e,t){b(a,t,e)})):b(a,e,t))})};var x=function(e,t){var n,a,r,i,o,l,d,h=1===arguments.length;for(h?r=(n=Object.keys(e.attribs).filter((function(e){return e.slice(0,5)===p}))).map((function(e){return c(e.slice(5))})):(n=[p+u(t)],r=[t]),l=0,d=n.length;l<d;++l)if(a=n[l],i=r[l],s.call(e.attribs,a)){if(o=e.attribs[a],s.call(f,o))o=f[o];else if(o===String(Number(o)))o=Number(o);else if(m.test(o))try{o=JSON.parse(o)}catch(g){}e.data[i]=o}return h?e.data:o};n.data=function(e,t){var n=this[0];if(n&&i(n))return n.data||(n.data={}),e?\"object\"==typeof e||void 0!==t?(o(this,(function(n,a){!function(e,t,n){if(e.data||(e.data={}),\"object\"==typeof t)return d.extend(e.data,t);\"string\"==typeof t&&void 0!==n?e.data[t]=n:\"object\"==typeof t&&d.extend(e.data,t)}(a,e,t)})),this):s.call(n.data,e)?n.data[e]:x(n,e):x(n)},n.val=function(e){var t=0===arguments.length,n=this[0];if(n)switch(n.name){case\"textarea\":return this.text(e);case\"input\":return\"radio\"===this.attr(\"type\")?t?this.attr(\"value\"):(this.attr(\"value\",e),this):this.attr(\"value\",e);case\"select\":var a,r=this.find(\"option:selected\");if(void 0===r)return;if(!t){if(!this.attr().hasOwnProperty(\"multiple\")&&\"object\"==typeof e)return this;\"object\"!=typeof e&&(e=[e]),this.find(\"option\").removeAttr(\"selected\");for(var i=0;i<e.length;i++)this.find('option[value=\"'+e[i]+'\"]').attr(\"selected\",\"\");return this}return a=r.attr(\"value\"),this.attr().hasOwnProperty(\"multiple\")&&(a=[],o(r,(function(e,t){a.push(g(t,\"value\"))}))),a;case\"option\":return t?this.attr(\"value\"):(this.attr(\"value\",e),this)}};var w=function(e,t){e.attribs&&s.call(e.attribs,t)&&delete e.attribs[t]};n.removeAttr=function(e){return o(this,(function(t,n){w(n,e)})),this},n.hasClass=function(e){return d.some(this,(function(t){var n,a=t.attribs,r=a&&a.class,i=-1;if(r)for(;(i=r.indexOf(e,i+1))>-1;)if(n=i+e.length,(0===i||l.test(r[i-1]))&&(n===r.length||l.test(r[n])))return!0}))},n.addClass=function(e){if(\"function\"==typeof e)return o(this,(function(t,a){var r=a.attribs.class||\"\";n.addClass.call([a],e.call(a,t,r))}));if(!e||\"string\"!=typeof e)return this;for(var t=e.split(l),a=this.length,r=0;r<a;r++)if(i(this[r])){var s,c,u=g(this[r],\"class\");if(u){c=\" \"+u+\" \",s=t.length;for(var p=0;p<s;p++){var d=t[p]+\" \";c.indexOf(\" \"+d)<0&&(c+=d)}y(this[r],\"class\",c.trim())}else y(this[r],\"class\",t.join(\" \").trim())}return this};var k=function(e){return e?e.trim().split(l):[]};n.removeClass=function(e){var t,a,r;return\"function\"==typeof e?o(this,(function(t,a){n.removeClass.call([a],e.call(a,t,a.attribs.class||\"\"))})):(t=k(e),a=t.length,r=0===arguments.length,o(this,(function(e,n){if(i(n))if(r)n.attribs.class=\"\";else{for(var o,s,c=k(n.attribs.class),u=0;u<a;u++)(o=c.indexOf(t[u]))>=0&&(c.splice(o,1),s=!0,u--);s&&(n.attribs.class=c.join(\" \"))}})))},n.toggleClass=function(e,t){if(\"function\"==typeof e)return o(this,(function(a,r){n.toggleClass.call([r],e.call(r,a,r.attribs.class||\"\",t),t)}));if(!e||\"string\"!=typeof e)return this;for(var a,r,s=e.split(l),c=s.length,u=\"boolean\"==typeof t?t?1:-1:0,p=this.length,d=0;d<p;d++)if(i(this[d])){a=k(this[d].attribs.class);for(var f=0;f<c;f++)r=a.indexOf(s[f]),u>=0&&r<0?a.push(s[f]):u<=0&&r>=0&&a.splice(r,1);this[d].attribs.class=a.join(\" \")}return this},n.is=function(e){return!!e&&this.filter(e).length>0}},{\"../static\":291,\"../utils\":292,\"lodash.assignin\":398,\"lodash.foreach\":403,\"lodash.some\":409}],285:[function(e,t,n){var a=e(\"../utils\").domEach,r={pick:e(\"lodash.pick\")},i=Object.prototype.toString;function o(e,t,n,a){if(\"string\"==typeof t){var r=s(e);\"function\"==typeof n&&(n=n.call(e,a,r[t])),\"\"===n?delete r[t]:null!=n&&(r[t]=n),e.attribs.style=(i=r,Object.keys(i||{}).reduce((function(e,t){return e+(e?\" \":\"\")+t+\": \"+i[t]+\";\"}),\"\"))}else\"object\"==typeof t&&Object.keys(t).forEach((function(n){o(e,n,t[n])}));var i}function s(e,t){var n=function(e){return e=(e||\"\").trim(),e?e.split(\";\").reduce((function(e,t){var n=t.indexOf(\":\");return n<1||n===t.length-1||(e[t.slice(0,n).trim()]=t.slice(n+1).trim()),e}),{}):{}}(e.attribs.style);return\"string\"==typeof t?n[t]:Array.isArray(t)?r.pick(n,t):n}n.css=function(e,t){return 2===arguments.length||\"[object Object]\"===i.call(e)?a(this,(function(n,a){o(a,e,t,n)})):s(this[0],e)}},{\"../utils\":292,\"lodash.pick\":406}],286:[function(e,t,n){var a=\"input,select,textarea,keygen\",r=/%20/g,i=/\\r?\\n/g,o={map:e(\"lodash.map\")};n.serialize=function(){var e=this.serializeArray();return o.map(e,(function(e){return encodeURIComponent(e.name)+\"=\"+encodeURIComponent(e.value)})).join(\"&\").replace(r,\"+\")},n.serializeArray=function(){var e=this.constructor;return this.map((function(){var t=e(this);return\"form\"===this.name?t.find(a).toArray():t.filter(a).toArray()})).filter('[name!=\"\"]:not(:disabled):not(:submit, :button, :image, :reset, :file):matches([checked], :not(:checkbox, :radio))').map((function(t,n){var a=e(n),r=a.attr(\"name\"),s=a.val();return null==s?null:Array.isArray(s)?o.map(s,(function(e){return{name:r,value:e.replace(i,\"\\r\\n\")}})):{name:r,value:s.replace(i,\"\\r\\n\")}})).get()}},{\"lodash.map\":404}],287:[function(e,t,n){var a=e(\"../parse\"),r=e(\"../static\"),i=a.update,o=a.evaluate,s=e(\"../utils\"),c=s.domEach,u=s.cloneDom,l=s.isHtml,p=Array.prototype.slice,d={flatten:e(\"lodash.flatten\"),bind:e(\"lodash.bind\"),forEach:e(\"lodash.foreach\")};n._makeDomArray=function(e,t){return null==e?[]:e.cheerio?t?u(e.get(),e.options):e.get():Array.isArray(e)?d.flatten(e.map((function(e){return this._makeDomArray(e,t)}),this)):\"string\"==typeof e?o(e,this.options):t?u([e]):[e]};var f=function(e){return function(){var t=p.call(arguments),n=this.length-1;return c(this,(function(a,i){var o,s;s=\"function\"==typeof t[0]?t[0].call(i,a,r.html(i.children)):t,o=this._makeDomArray(s,a<n),e(o,i.children,i)}))}},h=function(e,t,n,a,r){var i,o,s,c,u,l=[t,n].concat(a),p=e[t-1]||null,d=e[t]||null;for(i=0,o=a.length;i<o;++i)s=(u=(c=a[i]).parent||c.root)&&u.children.indexOf(a[i]),u&&s>-1&&(u.children.splice(s,1),r===u&&t>s&&l[0]--),c.root=null,c.parent=r,c.prev&&(c.prev.next=c.next||null),c.next&&(c.next.prev=c.prev||null),c.prev=a[i-1]||p,c.next=a[i+1]||d;return p&&(p.next=a[0]),d&&(d.prev=a[a.length-1]),e.splice.apply(e,l)};n.appendTo=function(e){return e.cheerio||(e=this.constructor.call(this.constructor,e,null,this._originalRoot)),e.append(this),this},n.prependTo=function(e){return e.cheerio||(e=this.constructor.call(this.constructor,e,null,this._originalRoot)),e.prepend(this),this},n.append=f((function(e,t,n){h(t,t.length,0,e,n)})),n.prepend=f((function(e,t,n){h(t,0,0,e,n)})),n.wrap=function(e){var t=\"function\"==typeof e&&e,n=this.length-1;return d.forEach(this,d.bind((function(a,r){var o,s,c=a.parent||a.root,u=c.children;c&&(t&&(e=t.call(a,r)),\"string\"!=typeof e||l(e)||(e=this.parents().last().find(e).clone()),o=this._makeDomArray(e,r<n).slice(0,1),s=u.indexOf(a),i([a],o[0]),h(u,s,0,o,c))}),this)),this},n.after=function(){var e=p.call(arguments),t=this.length-1;return c(this,(function(n,a){var i=a.parent||a.root;if(i){var o,s,c=i.children,u=c.indexOf(a);u<0||(o=\"function\"==typeof e[0]?e[0].call(a,n,r.html(a.children)):e,s=this._makeDomArray(o,n<t),h(c,u+1,0,s,i))}})),this},n.insertAfter=function(e){var t=[],n=this;return\"string\"==typeof e&&(e=this.constructor.call(this.constructor,e,null,this._originalRoot)),e=this._makeDomArray(e),n.remove(),c(e,(function(e,a){var r=n._makeDomArray(n.clone()),i=a.parent||a.root;if(i){var o=i.children,s=o.indexOf(a);s<0||(h(o,s+1,0,r,i),t.push(r))}})),this.constructor.call(this.constructor,this._makeDomArray(t))},n.before=function(){var e=p.call(arguments),t=this.length-1;return c(this,(function(n,a){var i=a.parent||a.root;if(i){var o,s,c=i.children,u=c.indexOf(a);u<0||(o=\"function\"==typeof e[0]?e[0].call(a,n,r.html(a.children)):e,s=this._makeDomArray(o,n<t),h(c,u,0,s,i))}})),this},n.insertBefore=function(e){var t=[],n=this;return\"string\"==typeof e&&(e=this.constructor.call(this.constructor,e,null,this._originalRoot)),e=this._makeDomArray(e),n.remove(),c(e,(function(e,a){var r=n._makeDomArray(n.clone()),i=a.parent||a.root;if(i){var o=i.children,s=o.indexOf(a);s<0||(h(o,s,0,r,i),t.push(r))}})),this.constructor.call(this.constructor,this._makeDomArray(t))},n.remove=function(e){var t=this;return e&&(t=t.filter(e)),c(t,(function(e,t){var n=t.parent||t.root;if(n){var a=n.children,r=a.indexOf(t);r<0||(a.splice(r,1),t.prev&&(t.prev.next=t.next),t.next&&(t.next.prev=t.prev),t.prev=t.next=t.parent=t.root=null)}})),this},n.replaceWith=function(e){var t=this;return c(this,(function(n,a){var r=a.parent||a.root;if(r){var o,s=r.children,c=t._makeDomArray(\"function\"==typeof e?e.call(a,n,a):e);i(c,null),o=s.indexOf(a),h(s,o,1,c,r),a.parent=a.prev=a.next=a.root=null}})),this},n.empty=function(){return c(this,(function(e,t){d.forEach(t.children,(function(e){e.next=e.prev=e.parent=null})),t.children.length=0})),this},n.html=function(e){if(void 0===e)return this[0]&&this[0].children?r.html(this[0].children,this.options):null;var t=this.options;return c(this,(function(n,a){d.forEach(a.children,(function(e){e.next=e.prev=e.parent=null}));var r=e.cheerio?e.clone().get():o(\"\"+e,t);i(r,a)})),this},n.toString=function(){return r.html(this,this.options)},n.text=function(e){return void 0===e?r.text(this):\"function\"==typeof e?c(this,(function(t,a){var i=[a];return n.text.call(i,e.call(a,t,r.text(i)))})):(c(this,(function(t,n){d.forEach(n.children,(function(e){e.next=e.prev=e.parent=null})),i({data:\"\"+e,type:\"text\",parent:n,prev:null,next:null,children:[]},n)})),this)},n.clone=function(){return this._make(u(this.get(),this.options))}},{\"../parse\":290,\"../static\":291,\"../utils\":292,\"lodash.bind\":399,\"lodash.flatten\":402,\"lodash.foreach\":403}],288:[function(e,t,n){var a=e(\"css-select\"),r=e(\"../utils\"),i=r.domEach,o=e(\"htmlparser2\").DomUtils.uniqueSort,s=r.isTag,c={bind:e(\"lodash.bind\"),forEach:e(\"lodash.foreach\"),reject:e(\"lodash.reject\"),filter:e(\"lodash.filter\"),reduce:e(\"lodash.reduce\")};n.find=function(e){var t,n=c.reduce(this,(function(e,t){return e.concat(c.filter(t.children,s))}),[]),r=this.constructor.contains;if(e&&\"string\"!=typeof e)return t=e.cheerio?e.get():[e],this._make(t.filter((function(e){var t,n;for(t=0,n=this.length;t<n;++t)if(r(this[t],e))return!0}),this));var i={__proto__:this.options,context:this.toArray()};return this._make(a(e,n,i))},n.parent=function(e){var t=[];return i(this,(function(e,n){var a=n.parent;a&&t.indexOf(a)<0&&t.push(a)})),arguments.length&&(t=n.filter.call(t,e,this)),this._make(t)},n.parents=function(e){var t=[];return this.get().reverse().forEach((function(n){l(this,n.parent,e,1/0).forEach((function(e){-1===t.indexOf(e)&&t.push(e)}))}),this),this._make(t)},n.parentsUntil=function(e,t){var n,r,i=[];return\"string\"==typeof e?n=a(e,this.parents().toArray(),this.options)[0]:e&&e.cheerio?r=e.toArray():e&&(n=e),this.toArray().reverse().forEach((function(e){for(;(e=e.parent)&&(n&&e!==n||r&&-1===r.indexOf(e)||!n&&!r);)s(e)&&-1===i.indexOf(e)&&i.push(e)}),this),this._make(t?a(t,i,this.options):i)},n.closest=function(e){var t=[];return e?(i(this,function(n,a){var r=l(this,a,e,1)[0];r&&t.indexOf(r)<0&&t.push(r)}.bind(this)),this._make(t)):this._make(t)},n.next=function(e){if(!this[0])return this;var t=[];return c.forEach(this,(function(e){for(;e=e.next;)if(s(e))return void t.push(e)})),e?n.filter.call(t,e,this):this._make(t)},n.nextAll=function(e){if(!this[0])return this;var t=[];return c.forEach(this,(function(e){for(;e=e.next;)s(e)&&-1===t.indexOf(e)&&t.push(e)})),e?n.filter.call(t,e,this):this._make(t)},n.nextUntil=function(e,t){if(!this[0])return this;var r,i,o=[];return\"string\"==typeof e?r=a(e,this.nextAll().get(),this.options)[0]:e&&e.cheerio?i=e.get():e&&(r=e),c.forEach(this,(function(e){for(;(e=e.next)&&(r&&e!==r||i&&-1===i.indexOf(e)||!r&&!i);)s(e)&&-1===o.indexOf(e)&&o.push(e)})),t?n.filter.call(o,t,this):this._make(o)},n.prev=function(e){if(!this[0])return this;var t=[];return c.forEach(this,(function(e){for(;e=e.prev;)if(s(e))return void t.push(e)})),e?n.filter.call(t,e,this):this._make(t)},n.prevAll=function(e){if(!this[0])return this;var t=[];return c.forEach(this,(function(e){for(;e=e.prev;)s(e)&&-1===t.indexOf(e)&&t.push(e)})),e?n.filter.call(t,e,this):this._make(t)},n.prevUntil=function(e,t){if(!this[0])return this;var r,i,o=[];return\"string\"==typeof e?r=a(e,this.prevAll().get(),this.options)[0]:e&&e.cheerio?i=e.get():e&&(r=e),c.forEach(this,(function(e){for(;(e=e.prev)&&(r&&e!==r||i&&-1===i.indexOf(e)||!r&&!i);)s(e)&&-1===o.indexOf(e)&&o.push(e)})),t?n.filter.call(o,t,this):this._make(o)},n.siblings=function(e){var t=this.parent(),a=c.filter(t?t.children():this.siblingsAndMe(),c.bind((function(e){return s(e)&&!this.is(e)}),this));return void 0!==e?n.filter.call(a,e,this):this._make(a)},n.children=function(e){var t=c.reduce(this,(function(e,t){return e.concat(c.filter(t.children,s))}),[]);return void 0===e?this._make(t):n.filter.call(t,e,this)},n.contents=function(){return this._make(c.reduce(this,(function(e,t){return e.push.apply(e,t.children),e}),[]))},n.each=function(e){for(var t=0,n=this.length;t<n&&!1!==e.call(this[t],t,this[t]);)++t;return this},n.map=function(e){return this._make(c.reduce(this,(function(t,n,a){var r=e.call(n,a,n);return null==r?t:t.concat(r)}),[]))};var u=function(e){return function(t,n){var r;return n=n||this,r=\"string\"==typeof t?a.compile(t,n.options):\"function\"==typeof t?function(e,n){return t.call(e,n,e)}:t.cheerio?t.is.bind(t):function(e){return t===e},n._make(e(this,r))}};function l(e,t,a,r){for(var i=[];t&&i.length<r;)a&&!n.filter.call([t],a,e).length||i.push(t),t=t.parent;return i}n.filter=u(c.filter),n.not=u(c.reject),n.has=function(e){var t=this;return n.filter.call(this,(function(){return t._make(this).find(e).length>0}))},n.first=function(){return this.length>1?this._make(this[0]):this},n.last=function(){return this.length>1?this._make(this[this.length-1]):this},n.eq=function(e){return 0===(e=+e)&&this.length<=1?this:(e<0&&(e=this.length+e),this[e]?this._make(this[e]):this._make([]))},n.get=function(e){return null==e?Array.prototype.slice.call(this):this[e<0?this.length+e:e]},n.index=function(e){var t,n;return 0===arguments.length?(t=this.parent().children(),n=this[0]):\"string\"==typeof e?(t=this._make(e),n=this[0]):(t=this,n=e.cheerio?e[0]:e),t.get().indexOf(n)},n.slice=function(){return this._make([].slice.apply(this,arguments))},n.end=function(){return this.prevObject||this._make([])},n.add=function(e,t){for(var n=this._make(e,t),a=o(n.get().concat(this.get())),r=0;r<a.length;++r)n[r]=a[r];return n.length=a.length,n},n.addBack=function(e){return this.add(arguments.length?this.prevObject.filter(e):this.prevObject)}},{\"../utils\":292,\"css-select\":328,htmlparser2:378,\"lodash.bind\":399,\"lodash.filter\":401,\"lodash.foreach\":403,\"lodash.reduce\":407,\"lodash.reject\":408}],289:[function(e,t,n){var a=e(\"./parse\"),r=e(\"./utils\").isHtml,i={extend:e(\"lodash.assignin\"),bind:e(\"lodash.bind\"),forEach:e(\"lodash.foreach\"),defaults:e(\"lodash.defaults\")},o=[e(\"./api/attributes\"),e(\"./api/traversing\"),e(\"./api/manipulation\"),e(\"./api/css\"),e(\"./api/forms\")],s=t.exports=function(e,t,n,o){return this instanceof s?(this.options=i.defaults(o||{},this.options),e?(n&&(\"string\"==typeof n&&(n=a(n,this.options)),this._root=s.call(this,n)),e.cheerio?e:(c(e)&&(e=[e]),Array.isArray(e)?(i.forEach(e,i.bind((function(e,t){this[t]=e}),this)),this.length=e.length,this):\"string\"==typeof e&&r(e)?s.call(this,a(e,this.options).children):(t?\"string\"==typeof t?r(t)?(t=a(t,this.options),t=s.call(this,t)):(e=[t,e].join(\" \"),t=this._root):t.cheerio||(t=s.call(this,t)):t=this._root,t?t.find(e):this))):this):new s(e,t,n,o)};i.extend(s,e(\"./static\")),s.prototype.cheerio=\"[cheerio object]\",s.prototype.options={withDomLvl1:!0,normalizeWhitespace:!1,xmlMode:!1,decodeEntities:!0},s.prototype.length=0,s.prototype.splice=Array.prototype.splice,s.prototype._make=function(e,t){var n=new this.constructor(e,t,this._root,this.options);return n.prevObject=this,n},s.prototype.toArray=function(){return this.get()},o.forEach((function(e){i.extend(s.prototype,e)}));var c=function(e){return e.name||\"text\"===e.type||\"comment\"===e.type}},{\"./api/attributes\":284,\"./api/css\":285,\"./api/forms\":286,\"./api/manipulation\":287,\"./api/traversing\":288,\"./parse\":290,\"./static\":291,\"./utils\":292,\"lodash.assignin\":398,\"lodash.bind\":399,\"lodash.defaults\":400,\"lodash.foreach\":403}],290:[function(e,t,n){(function(a){(function(){var r=e(\"htmlparser2\");(n=t.exports=function(e,t){var a=n.evaluate(e,t),r=n.evaluate(\"<root></root>\",t)[0];return r.type=\"root\",n.update(a,r),r}).evaluate=function(e,t){return\"string\"==typeof e||a.isBuffer(e)?r.parseDOM(e,t):e},n.update=function(e,t){Array.isArray(e)||(e=[e]),t?t.children=e:t=null;for(var n=0;n<e.length;n++){var a=e[n],r=a.parent||a.root,i=r&&r.children;i&&i!==e&&(i.splice(i.indexOf(a),1),a.prev&&(a.prev.next=a.next),a.next&&(a.next.prev=a.prev)),t?(a.prev=e[n-1]||null,a.next=e[n+1]||null):a.prev=a.next=null,t&&\"root\"===t.type?(a.root=t,a.parent=null):(a.root=null,a.parent=t)}return t}}).call(this)}).call(this,{isBuffer:e(\"../../is-buffer/index.js\")})},{\"../../is-buffer/index.js\":384,htmlparser2:378}],291:[function(e,t,n){var a=e(\"dom-serializer\"),r=e(\"css-select\"),i=e(\"./parse\"),o={merge:e(\"lodash.merge\"),defaults:e(\"lodash.defaults\")};function s(e,t,n){if(t)\"string\"==typeof t&&(t=r(t,e._root,n));else{if(!e._root||!e._root.children)return\"\";t=e._root.children}return a(t,n)}n.load=function(t,a){var r=e(\"./cheerio\");a=o.defaults(a||{},r.prototype.options);var s=i(t,a),c=function(e,t,n,i){return this instanceof c?(i=o.defaults(i||{},a),r.call(this,e,t,n||s,i)):new c(e,t,n,i)};return c.prototype=Object.create(r.prototype),c.prototype.constructor=c,c.fn=c.prototype,c.prototype._originalRoot=s,o.merge(c,n),c._root=s,c._options=a,c},n.html=function(t,n){var a=e(\"./cheerio\");return\"[object Object]\"!==Object.prototype.toString.call(t)||n||\"length\"in t||\"type\"in t||(n=t,t=void 0),s(this,t,n=o.defaults(n||{},this._options,a.prototype.options))},n.xml=function(e){return s(this,e,o.defaults({xmlMode:!0},this._options))},n.text=function(e){e||(e=this.root());for(var t,a=\"\",r=e.length,i=0;i<r;i++)\"text\"===(t=e[i]).type?a+=t.data:t.children&&\"comment\"!==t.type&&(a+=n.text(t.children));return a},n.parseHTML=function(e,t,n){var a;return e&&\"string\"==typeof e?(\"boolean\"==typeof t&&(n=t),a=this.load(e),n||a(\"script\").remove(),a.root()[0].children.slice()):null},n.root=function(){return this(this._root)},n.contains=function(e,t){if(t===e)return!1;for(;t&&t!==t.parent;)if((t=t.parent)===e)return!0;return!1}},{\"./cheerio\":289,\"./parse\":290,\"css-select\":328,\"dom-serializer\":338,\"lodash.defaults\":400,\"lodash.merge\":405}],292:[function(e,t,n){var a=e(\"./parse\"),r=e(\"dom-serializer\"),i={tag:!0,script:!0,style:!0};n.isTag=function(e){return e.type&&(e=e.type),i[e]||!1},n.camelCase=function(e){return e.replace(/[_.-](\\w|$)/g,(function(e,t){return t.toUpperCase()}))},n.cssCase=function(e){return e.replace(/[A-Z]/g,\"-$&\").toLowerCase()},n.domEach=function(e,t){for(var n=0,a=e.length;n<a&&!1!==t.call(e,n,e[n]);)++n;return e},n.cloneDom=function(e,t){return a(r(e,t),t).children};var o=/^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;n.isHtml=function(e){if(\"<\"===e.charAt(0)&&\">\"===e.charAt(e.length-1)&&e.length>=3)return!0;var t=o.exec(e);return!(!t||!t[1])}},{\"./parse\":290,\"dom-serializer\":338}],293:[function(e,t,n){t.exports={name:\"cheerio\",version:\"0.22.0\",description:\"Tiny, fast, and elegant implementation of core jQuery designed specifically for the server\",author:\"Matt Mueller <mattmuelle@gmail.com> (mat.io)\",license:\"MIT\",keywords:[\"htmlparser\",\"jquery\",\"selector\",\"scraper\",\"parser\",\"html\"],repository:{type:\"git\",url:\"git://github.com/cheeriojs/cheerio.git\"},main:\"./index.js\",files:[\"index.js\",\"lib\"],engines:{node:\">= 0.6\"},dependencies:{\"css-select\":\"~1.2.0\",\"dom-serializer\":\"~0.1.0\",entities:\"~1.1.1\",htmlparser2:\"^3.9.1\",\"lodash.assignin\":\"^4.0.9\",\"lodash.bind\":\"^4.1.4\",\"lodash.defaults\":\"^4.0.1\",\"lodash.filter\":\"^4.4.0\",\"lodash.flatten\":\"^4.2.0\",\"lodash.foreach\":\"^4.3.0\",\"lodash.map\":\"^4.4.0\",\"lodash.merge\":\"^4.4.0\",\"lodash.pick\":\"^4.2.1\",\"lodash.reduce\":\"^4.4.0\",\"lodash.reject\":\"^4.4.0\",\"lodash.some\":\"^4.4.0\"},devDependencies:{benchmark:\"^2.1.0\",coveralls:\"^2.11.9\",\"expect.js\":\"~0.3.1\",istanbul:\"^0.4.3\",jsdom:\"^9.2.1\",jquery:\"^3.0.0\",jshint:\"^2.9.2\",mocha:\"^2.5.3\",xyz:\"~0.5.0\"},scripts:{test:\"make test\"}}},{}],294:[function(e,t,n){(function(e){(function(){function t(e){return Object.prototype.toString.call(e)}n.isArray=function(e){return Array.isArray?Array.isArray(e):\"[object Array]\"===t(e)},n.isBoolean=function(e){return\"boolean\"==typeof e},n.isNull=function(e){return null===e},n.isNullOrUndefined=function(e){return null==e},n.isNumber=function(e){return\"number\"==typeof e},n.isString=function(e){return\"string\"==typeof e},n.isSymbol=function(e){return\"symbol\"==typeof e},n.isUndefined=function(e){return void 0===e},n.isRegExp=function(e){return\"[object RegExp]\"===t(e)},n.isObject=function(e){return\"object\"==typeof e&&null!==e},n.isDate=function(e){return\"[object Date]\"===t(e)},n.isError=function(e){return\"[object Error]\"===t(e)||e instanceof Error},n.isFunction=function(e){return\"function\"==typeof e},n.isPrimitive=function(e){return null===e||\"boolean\"==typeof e||\"number\"==typeof e||\"string\"==typeof e||\"symbol\"==typeof e||void 0===e},n.isBuffer=e.isBuffer}).call(this)}).call(this,{isBuffer:e(\"../../is-buffer/index.js\")})},{\"../../is-buffer/index.js\":384}],295:[function(e,t,n){var a,r;a=this,r=function(e){return function(){var t=e,n=t.lib.BlockCipher,a=t.algo,r=[],i=[],o=[],s=[],c=[],u=[],l=[],p=[],d=[],f=[];!function(){for(var e=[],t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;var n=0,a=0;for(t=0;t<256;t++){var h=a^a<<1^a<<2^a<<3^a<<4;h=h>>>8^255&h^99,r[n]=h,i[h]=n;var m=e[n],g=e[m],y=e[g],v=257*e[h]^16843008*h;o[n]=v<<24|v>>>8,s[n]=v<<16|v>>>16,c[n]=v<<8|v>>>24,u[n]=v,v=16843009*y^65537*g^257*m^16843008*n,l[h]=v<<24|v>>>8,p[h]=v<<16|v>>>16,d[h]=v<<8|v>>>24,f[h]=v,n?(n=m^e[e[e[y^m]]],a^=e[e[a]]):n=a=1}}();var h=[0,1,2,4,8,16,32,64,128,27,54],m=a.AES=n.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var e=this._keyPriorReset=this._key,t=e.words,n=e.sigBytes/4,a=4*((this._nRounds=n+6)+1),i=this._keySchedule=[],o=0;o<a;o++)if(o<n)i[o]=t[o];else{var s=i[o-1];o%n?n>6&&o%n==4&&(s=r[s>>>24]<<24|r[s>>>16&255]<<16|r[s>>>8&255]<<8|r[255&s]):(s=r[(s=s<<8|s>>>24)>>>24]<<24|r[s>>>16&255]<<16|r[s>>>8&255]<<8|r[255&s],s^=h[o/n|0]<<24),i[o]=i[o-n]^s}for(var c=this._invKeySchedule=[],u=0;u<a;u++)o=a-u,s=u%4?i[o]:i[o-4],c[u]=u<4||o<=4?s:l[r[s>>>24]]^p[r[s>>>16&255]]^d[r[s>>>8&255]]^f[r[255&s]]}},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._keySchedule,o,s,c,u,r)},decryptBlock:function(e,t){var n=e[t+1];e[t+1]=e[t+3],e[t+3]=n,this._doCryptBlock(e,t,this._invKeySchedule,l,p,d,f,i),n=e[t+1],e[t+1]=e[t+3],e[t+3]=n},_doCryptBlock:function(e,t,n,a,r,i,o,s){for(var c=this._nRounds,u=e[t]^n[0],l=e[t+1]^n[1],p=e[t+2]^n[2],d=e[t+3]^n[3],f=4,h=1;h<c;h++){var m=a[u>>>24]^r[l>>>16&255]^i[p>>>8&255]^o[255&d]^n[f++],g=a[l>>>24]^r[p>>>16&255]^i[d>>>8&255]^o[255&u]^n[f++],y=a[p>>>24]^r[d>>>16&255]^i[u>>>8&255]^o[255&l]^n[f++],v=a[d>>>24]^r[u>>>16&255]^i[l>>>8&255]^o[255&p]^n[f++];u=m,l=g,p=y,d=v}m=(s[u>>>24]<<24|s[l>>>16&255]<<16|s[p>>>8&255]<<8|s[255&d])^n[f++],g=(s[l>>>24]<<24|s[p>>>16&255]<<16|s[d>>>8&255]<<8|s[255&u])^n[f++],y=(s[p>>>24]<<24|s[d>>>16&255]<<16|s[u>>>8&255]<<8|s[255&l])^n[f++],v=(s[d>>>24]<<24|s[u>>>16&255]<<16|s[l>>>8&255]<<8|s[255&p])^n[f++],e[t]=m,e[t+1]=g,e[t+2]=y,e[t+3]=v},keySize:8});t.AES=n._createHelper(m)}(),e.AES},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./enc-base64\"),e(\"./md5\"),e(\"./evpkdf\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./enc-base64\",\"./md5\",\"./evpkdf\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297,\"./enc-base64\":298,\"./evpkdf\":300,\"./md5\":304}],296:[function(e,t,n){var a,r;a=this,r=function(e){var t,n,a,r,i,o,s,c,u,l,p,d,f,h,m,g,y,v;e.lib.Cipher||(n=(t=e).lib,a=n.Base,r=n.WordArray,i=n.BufferedBlockAlgorithm,(o=t.enc).Utf8,s=o.Base64,c=t.algo.EvpKDF,u=n.Cipher=i.extend({cfg:a.extend(),createEncryptor:function(e,t){return this.create(this._ENC_XFORM_MODE,e,t)},createDecryptor:function(e,t){return this.create(this._DEC_XFORM_MODE,e,t)},init:function(e,t,n){this.cfg=this.cfg.extend(n),this._xformMode=e,this._key=t,this.reset()},reset:function(){i.reset.call(this),this._doReset()},process:function(e){return this._append(e),this._process()},finalize:function(e){return e&&this._append(e),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function e(e){return\"string\"==typeof e?v:g}return function(t){return{encrypt:function(n,a,r){return e(a).encrypt(t,n,a,r)},decrypt:function(n,a,r){return e(a).decrypt(t,n,a,r)}}}}()}),n.StreamCipher=u.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),l=t.mode={},p=n.BlockCipherMode=a.extend({createEncryptor:function(e,t){return this.Encryptor.create(e,t)},createDecryptor:function(e,t){return this.Decryptor.create(e,t)},init:function(e,t){this._cipher=e,this._iv=t}}),d=l.CBC=function(){var e=p.extend();function t(e,t,n){var a=this._iv;if(a){var r=a;this._iv=void 0}else r=this._prevBlock;for(var i=0;i<n;i++)e[t+i]^=r[i]}return e.Encryptor=e.extend({processBlock:function(e,n){var a=this._cipher,r=a.blockSize;t.call(this,e,n,r),a.encryptBlock(e,n),this._prevBlock=e.slice(n,n+r)}}),e.Decryptor=e.extend({processBlock:function(e,n){var a=this._cipher,r=a.blockSize,i=e.slice(n,n+r);a.decryptBlock(e,n),t.call(this,e,n,r),this._prevBlock=i}}),e}(),f=(t.pad={}).Pkcs7={pad:function(e,t){for(var n=4*t,a=n-e.sigBytes%n,i=a<<24|a<<16|a<<8|a,o=[],s=0;s<a;s+=4)o.push(i);var c=r.create(o,a);e.concat(c)},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},n.BlockCipher=u.extend({cfg:u.cfg.extend({mode:d,padding:f}),reset:function(){u.reset.call(this);var e=this.cfg,t=e.iv,n=e.mode;if(this._xformMode==this._ENC_XFORM_MODE)var a=n.createEncryptor;else a=n.createDecryptor,this._minBufferSize=1;this._mode&&this._mode.__creator==a?this._mode.init(this,t&&t.words):(this._mode=a.call(n,this,t&&t.words),this._mode.__creator=a)},_doProcessBlock:function(e,t){this._mode.processBlock(e,t)},_doFinalize:function(){var e=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){e.pad(this._data,this.blockSize);var t=this._process(!0)}else t=this._process(!0),e.unpad(t);return t},blockSize:4}),h=n.CipherParams=a.extend({init:function(e){this.mixIn(e)},toString:function(e){return(e||this.formatter).stringify(this)}}),m=(t.format={}).OpenSSL={stringify:function(e){var t=e.ciphertext,n=e.salt;if(n)var a=r.create([1398893684,1701076831]).concat(n).concat(t);else a=t;return a.toString(s)},parse:function(e){var t=s.parse(e),n=t.words;if(1398893684==n[0]&&1701076831==n[1]){var a=r.create(n.slice(2,4));n.splice(0,4),t.sigBytes-=16}return h.create({ciphertext:t,salt:a})}},g=n.SerializableCipher=a.extend({cfg:a.extend({format:m}),encrypt:function(e,t,n,a){a=this.cfg.extend(a);var r=e.createEncryptor(n,a),i=r.finalize(t),o=r.cfg;return h.create({ciphertext:i,key:n,iv:o.iv,algorithm:e,mode:o.mode,padding:o.padding,blockSize:e.blockSize,formatter:a.format})},decrypt:function(e,t,n,a){return a=this.cfg.extend(a),t=this._parse(t,a.format),e.createDecryptor(n,a).finalize(t.ciphertext)},_parse:function(e,t){return\"string\"==typeof e?t.parse(e,this):e}}),y=(t.kdf={}).OpenSSL={execute:function(e,t,n,a){a||(a=r.random(8));var i=c.create({keySize:t+n}).compute(e,a),o=r.create(i.words.slice(t),4*n);return i.sigBytes=4*t,h.create({key:i,iv:o,salt:a})}},v=n.PasswordBasedCipher=g.extend({cfg:g.cfg.extend({kdf:y}),encrypt:function(e,t,n,a){var r=(a=this.cfg.extend(a)).kdf.execute(n,e.keySize,e.ivSize);a.iv=r.iv;var i=g.encrypt.call(this,e,t,r.key,a);return i.mixIn(r),i},decrypt:function(e,t,n,a){a=this.cfg.extend(a),t=this._parse(t,a.format);var r=a.kdf.execute(n,e.keySize,e.ivSize,t.salt);return a.iv=r.iv,g.decrypt.call(this,e,t,r.key,a)}}))},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./evpkdf\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./evpkdf\"],r):r(a.CryptoJS)},{\"./core\":297,\"./evpkdf\":300}],297:[function(e,t,n){var a,r;a=this,r=function(){var e=e||function(e){var t=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),n={},a=n.lib={},r=a.Base={extend:function(e){var n=t(this);return e&&n.mixIn(e),n.hasOwnProperty(\"init\")&&this.init!==n.init||(n.init=function(){n.$super.init.apply(this,arguments)}),n.init.prototype=n,n.$super=this,n},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty(\"toString\")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},i=a.WordArray=r.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||s).stringify(this)},concat:function(e){var t=this.words,n=e.words,a=this.sigBytes,r=e.sigBytes;if(this.clamp(),a%4)for(var i=0;i<r;i++){var o=n[i>>>2]>>>24-i%4*8&255;t[a+i>>>2]|=o<<24-(a+i)%4*8}else for(i=0;i<r;i+=4)t[a+i>>>2]=n[i>>>2];return this.sigBytes+=r,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=r.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var n,a=[],r=function(t){var n=987654321,a=4294967295;return function(){var r=((n=36969*(65535&n)+(n>>16)&a)<<16)+(t=18e3*(65535&t)+(t>>16)&a)&a;return r/=4294967296,(r+=.5)*(e.random()>.5?1:-1)}},o=0;o<t;o+=4){var s=r(4294967296*(n||e.random()));n=987654071*s(),a.push(4294967296*s()|0)}return new i.init(a,t)}}),o=n.enc={},s=o.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,a=[],r=0;r<n;r++){var i=t[r>>>2]>>>24-r%4*8&255;a.push((i>>>4).toString(16)),a.push((15&i).toString(16))}return a.join(\"\")},parse:function(e){for(var t=e.length,n=[],a=0;a<t;a+=2)n[a>>>3]|=parseInt(e.substr(a,2),16)<<24-a%8*4;return new i.init(n,t/2)}},c=o.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,a=[],r=0;r<n;r++){var i=t[r>>>2]>>>24-r%4*8&255;a.push(String.fromCharCode(i))}return a.join(\"\")},parse:function(e){for(var t=e.length,n=[],a=0;a<t;a++)n[a>>>2]|=(255&e.charCodeAt(a))<<24-a%4*8;return new i.init(n,t)}},u=o.Utf8={stringify:function(e){try{return decodeURIComponent(escape(c.stringify(e)))}catch(t){throw new Error(\"Malformed UTF-8 data\")}},parse:function(e){return c.parse(unescape(encodeURIComponent(e)))}},l=a.BufferedBlockAlgorithm=r.extend({reset:function(){this._data=new i.init,this._nDataBytes=0},_append:function(e){\"string\"==typeof e&&(e=u.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n=this._data,a=n.words,r=n.sigBytes,o=this.blockSize,s=r/(4*o),c=(s=t?e.ceil(s):e.max((0|s)-this._minBufferSize,0))*o,u=e.min(4*c,r);if(c){for(var l=0;l<c;l+=o)this._doProcessBlock(a,l);var p=a.splice(0,c);n.sigBytes-=u}return new i.init(p,u)},clone:function(){var e=r.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),p=(a.Hasher=l.extend({cfg:r.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){l.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new p.HMAC.init(e,n).finalize(t)}}}),n.algo={});return n}(Math);return e},\"object\"==typeof n?t.exports=n=r():\"function\"==typeof define&&define.amd?define([],r):a.CryptoJS=r()},{}],298:[function(e,t,n){var a,r;a=this,r=function(e){var t,n;return n=(t=e).lib.WordArray,t.enc.Base64={stringify:function(e){var t=e.words,n=e.sigBytes,a=this._map;e.clamp();for(var r=[],i=0;i<n;i+=3)for(var o=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,s=0;s<4&&i+.75*s<n;s++)r.push(a.charAt(o>>>6*(3-s)&63));var c=a.charAt(64);if(c)for(;r.length%4;)r.push(c);return r.join(\"\")},parse:function(e){var t=e.length,a=this._map,r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var i=0;i<a.length;i++)r[a.charCodeAt(i)]=i}var o=a.charAt(64);if(o){var s=e.indexOf(o);-1!==s&&(t=s)}return function(e,t,a){for(var r=[],i=0,o=0;o<t;o++)if(o%4){var s=a[e.charCodeAt(o-1)]<<o%4*2,c=a[e.charCodeAt(o)]>>>6-o%4*2;r[i>>>2]|=(s|c)<<24-i%4*8,i++}return n.create(r,i)}(e,t,r)},_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"},e.enc.Base64},\"object\"==typeof n?t.exports=n=r(e(\"./core\")):\"function\"==typeof define&&define.amd?define([\"./core\"],r):r(a.CryptoJS)},{\"./core\":297}],299:[function(e,t,n){var a,r;a=this,r=function(e){return function(){var t=e,n=t.lib.WordArray,a=t.enc;function r(e){return e<<8&4278255360|e>>>8&16711935}a.Utf16=a.Utf16BE={stringify:function(e){for(var t=e.words,n=e.sigBytes,a=[],r=0;r<n;r+=2){var i=t[r>>>2]>>>16-r%4*8&65535;a.push(String.fromCharCode(i))}return a.join(\"\")},parse:function(e){for(var t=e.length,a=[],r=0;r<t;r++)a[r>>>1]|=e.charCodeAt(r)<<16-r%2*16;return n.create(a,2*t)}},a.Utf16LE={stringify:function(e){for(var t=e.words,n=e.sigBytes,a=[],i=0;i<n;i+=2){var o=r(t[i>>>2]>>>16-i%4*8&65535);a.push(String.fromCharCode(o))}return a.join(\"\")},parse:function(e){for(var t=e.length,a=[],i=0;i<t;i++)a[i>>>1]|=r(e.charCodeAt(i)<<16-i%2*16);return n.create(a,2*t)}}}(),e.enc.Utf16},\"object\"==typeof n?t.exports=n=r(e(\"./core\")):\"function\"==typeof define&&define.amd?define([\"./core\"],r):r(a.CryptoJS)},{\"./core\":297}],300:[function(e,t,n){var a,r;a=this,r=function(e){var t,n,a,r,i,o,s;return n=(t=e).lib,a=n.Base,r=n.WordArray,i=t.algo,o=i.MD5,s=i.EvpKDF=a.extend({cfg:a.extend({keySize:4,hasher:o,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var n=this.cfg,a=n.hasher.create(),i=r.create(),o=i.words,s=n.keySize,c=n.iterations;o.length<s;){u&&a.update(u);var u=a.update(e).finalize(t);a.reset();for(var l=1;l<c;l++)u=a.finalize(u),a.reset();i.concat(u)}return i.sigBytes=4*s,i}}),t.EvpKDF=function(e,t,n){return s.create(n).compute(e,t)},e.EvpKDF},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./sha1\"),e(\"./hmac\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./sha1\",\"./hmac\"],r):r(a.CryptoJS)},{\"./core\":297,\"./hmac\":302,\"./sha1\":320}],301:[function(e,t,n){var a,r;a=this,r=function(e){var t,n,a;return n=(t=e).lib.CipherParams,a=t.enc.Hex,t.format.Hex={stringify:function(e){return e.ciphertext.toString(a)},parse:function(e){var t=a.parse(e);return n.create({ciphertext:t})}},e.format.Hex},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297}],302:[function(e,t,n){var a,r;a=this,r=function(e){var t,n,a;n=(t=e).lib.Base,a=t.enc.Utf8,t.algo.HMAC=n.extend({init:function(e,t){e=this._hasher=new e.init,\"string\"==typeof t&&(t=a.parse(t));var n=e.blockSize,r=4*n;t.sigBytes>r&&(t=e.finalize(t)),t.clamp();for(var i=this._oKey=t.clone(),o=this._iKey=t.clone(),s=i.words,c=o.words,u=0;u<n;u++)s[u]^=1549556828,c[u]^=909522486;i.sigBytes=o.sigBytes=r,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,n=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(n))}})},\"object\"==typeof n?t.exports=n=r(e(\"./core\")):\"function\"==typeof define&&define.amd?define([\"./core\"],r):r(a.CryptoJS)},{\"./core\":297}],303:[function(e,t,n){var a,r;a=this,r=function(e){return function(){if(\"function\"==typeof ArrayBuffer){var t=e.lib.WordArray,n=t.init,a=t.init=function(e){if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),(e instanceof Int8Array||\"undefined\"!=typeof Uint8ClampedArray&&e instanceof Uint8ClampedArray||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array)&&(e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength)),e instanceof Uint8Array){for(var t=e.byteLength,a=[],r=0;r<t;r++)a[r>>>2]|=e[r]<<24-r%4*8;n.call(this,a,t)}else n.apply(this,arguments)};a.prototype=t}}(),e.lib.WordArray},\"object\"==typeof n?t.exports=n=r(e(\"./core\")):\"function\"==typeof define&&define.amd?define([\"./core\"],r):r(a.CryptoJS)},{\"./core\":297}],304:[function(e,t,n){var a,r;a=this,r=function(e){return function(t){var n=e,a=n.lib,r=a.WordArray,i=a.Hasher,o=n.algo,s=[];!function(){for(var e=0;e<64;e++)s[e]=4294967296*t.abs(t.sin(e+1))|0}();var c=o.MD5=i.extend({_doReset:function(){this._hash=new r.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var a=t+n,r=e[a];e[a]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8)}var i=this._hash.words,o=e[t+0],c=e[t+1],f=e[t+2],h=e[t+3],m=e[t+4],g=e[t+5],y=e[t+6],v=e[t+7],b=e[t+8],x=e[t+9],w=e[t+10],k=e[t+11],_=e[t+12],j=e[t+13],S=e[t+14],A=e[t+15],E=i[0],C=i[1],T=i[2],P=i[3];E=u(E,C,T,P,o,7,s[0]),P=u(P,E,C,T,c,12,s[1]),T=u(T,P,E,C,f,17,s[2]),C=u(C,T,P,E,h,22,s[3]),E=u(E,C,T,P,m,7,s[4]),P=u(P,E,C,T,g,12,s[5]),T=u(T,P,E,C,y,17,s[6]),C=u(C,T,P,E,v,22,s[7]),E=u(E,C,T,P,b,7,s[8]),P=u(P,E,C,T,x,12,s[9]),T=u(T,P,E,C,w,17,s[10]),C=u(C,T,P,E,k,22,s[11]),E=u(E,C,T,P,_,7,s[12]),P=u(P,E,C,T,j,12,s[13]),T=u(T,P,E,C,S,17,s[14]),E=l(E,C=u(C,T,P,E,A,22,s[15]),T,P,c,5,s[16]),P=l(P,E,C,T,y,9,s[17]),T=l(T,P,E,C,k,14,s[18]),C=l(C,T,P,E,o,20,s[19]),E=l(E,C,T,P,g,5,s[20]),P=l(P,E,C,T,w,9,s[21]),T=l(T,P,E,C,A,14,s[22]),C=l(C,T,P,E,m,20,s[23]),E=l(E,C,T,P,x,5,s[24]),P=l(P,E,C,T,S,9,s[25]),T=l(T,P,E,C,h,14,s[26]),C=l(C,T,P,E,b,20,s[27]),E=l(E,C,T,P,j,5,s[28]),P=l(P,E,C,T,f,9,s[29]),T=l(T,P,E,C,v,14,s[30]),E=p(E,C=l(C,T,P,E,_,20,s[31]),T,P,g,4,s[32]),P=p(P,E,C,T,b,11,s[33]),T=p(T,P,E,C,k,16,s[34]),C=p(C,T,P,E,S,23,s[35]),E=p(E,C,T,P,c,4,s[36]),P=p(P,E,C,T,m,11,s[37]),T=p(T,P,E,C,v,16,s[38]),C=p(C,T,P,E,w,23,s[39]),E=p(E,C,T,P,j,4,s[40]),P=p(P,E,C,T,o,11,s[41]),T=p(T,P,E,C,h,16,s[42]),C=p(C,T,P,E,y,23,s[43]),E=p(E,C,T,P,x,4,s[44]),P=p(P,E,C,T,_,11,s[45]),T=p(T,P,E,C,A,16,s[46]),E=d(E,C=p(C,T,P,E,f,23,s[47]),T,P,o,6,s[48]),P=d(P,E,C,T,v,10,s[49]),T=d(T,P,E,C,S,15,s[50]),C=d(C,T,P,E,g,21,s[51]),E=d(E,C,T,P,_,6,s[52]),P=d(P,E,C,T,h,10,s[53]),T=d(T,P,E,C,w,15,s[54]),C=d(C,T,P,E,c,21,s[55]),E=d(E,C,T,P,b,6,s[56]),P=d(P,E,C,T,A,10,s[57]),T=d(T,P,E,C,y,15,s[58]),C=d(C,T,P,E,j,21,s[59]),E=d(E,C,T,P,m,6,s[60]),P=d(P,E,C,T,k,10,s[61]),T=d(T,P,E,C,f,15,s[62]),C=d(C,T,P,E,x,21,s[63]),i[0]=i[0]+E|0,i[1]=i[1]+C|0,i[2]=i[2]+T|0,i[3]=i[3]+P|0},_doFinalize:function(){var e=this._data,n=e.words,a=8*this._nDataBytes,r=8*e.sigBytes;n[r>>>5]|=128<<24-r%32;var i=t.floor(a/4294967296),o=a;n[15+(r+64>>>9<<4)]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),n[14+(r+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),e.sigBytes=4*(n.length+1),this._process();for(var s=this._hash,c=s.words,u=0;u<4;u++){var l=c[u];c[u]=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8)}return s},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});function u(e,t,n,a,r,i,o){var s=e+(t&n|~t&a)+r+o;return(s<<i|s>>>32-i)+t}function l(e,t,n,a,r,i,o){var s=e+(t&a|n&~a)+r+o;return(s<<i|s>>>32-i)+t}function p(e,t,n,a,r,i,o){var s=e+(t^n^a)+r+o;return(s<<i|s>>>32-i)+t}function d(e,t,n,a,r,i,o){var s=e+(n^(t|~a))+r+o;return(s<<i|s>>>32-i)+t}n.MD5=i._createHelper(c),n.HmacMD5=i._createHmacHelper(c)}(Math),e.MD5},\"object\"==typeof n?t.exports=n=r(e(\"./core\")):\"function\"==typeof define&&define.amd?define([\"./core\"],r):r(a.CryptoJS)},{\"./core\":297}],305:[function(e,t,n){var a,r;a=this,r=function(e){return e.mode.CFB=function(){var t=e.lib.BlockCipherMode.extend();function n(e,t,n,a){var r=this._iv;if(r){var i=r.slice(0);this._iv=void 0}else i=this._prevBlock;a.encryptBlock(i,0);for(var o=0;o<n;o++)e[t+o]^=i[o]}return t.Encryptor=t.extend({processBlock:function(e,t){var a=this._cipher,r=a.blockSize;n.call(this,e,t,r,a),this._prevBlock=e.slice(t,t+r)}}),t.Decryptor=t.extend({processBlock:function(e,t){var a=this._cipher,r=a.blockSize,i=e.slice(t,t+r);n.call(this,e,t,r,a),this._prevBlock=i}}),t}(),e.mode.CFB},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297}],306:[function(e,t,n){var a,r;a=this,r=function(e){return e.mode.CTRGladman=function(){var t=e.lib.BlockCipherMode.extend();function n(e){if(255&~(e>>24))e+=1<<24;else{var t=e>>16&255,n=e>>8&255,a=255&e;255===t?(t=0,255===n?(n=0,255===a?a=0:++a):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=a}return e}var a=t.Encryptor=t.extend({processBlock:function(e,t){var a=this._cipher,r=a.blockSize,i=this._iv,o=this._counter;i&&(o=this._counter=i.slice(0),this._iv=void 0),function(e){0===(e[0]=n(e[0]))&&(e[1]=n(e[1]))}(o);var s=o.slice(0);a.encryptBlock(s,0);for(var c=0;c<r;c++)e[t+c]^=s[c]}});return t.Decryptor=a,t}(),e.mode.CTRGladman},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297}],307:[function(e,t,n){var a,r;a=this,r=function(e){var t,n;return e.mode.CTR=(t=e.lib.BlockCipherMode.extend(),n=t.Encryptor=t.extend({processBlock:function(e,t){var n=this._cipher,a=n.blockSize,r=this._iv,i=this._counter;r&&(i=this._counter=r.slice(0),this._iv=void 0);var o=i.slice(0);n.encryptBlock(o,0),i[a-1]=i[a-1]+1|0;for(var s=0;s<a;s++)e[t+s]^=o[s]}}),t.Decryptor=n,t),e.mode.CTR},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297}],308:[function(e,t,n){var a,r;a=this,r=function(e){var t;return e.mode.ECB=((t=e.lib.BlockCipherMode.extend()).Encryptor=t.extend({processBlock:function(e,t){this._cipher.encryptBlock(e,t)}}),t.Decryptor=t.extend({processBlock:function(e,t){this._cipher.decryptBlock(e,t)}}),t),e.mode.ECB},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297}],309:[function(e,t,n){var a,r;a=this,r=function(e){var t,n;return e.mode.OFB=(t=e.lib.BlockCipherMode.extend(),n=t.Encryptor=t.extend({processBlock:function(e,t){var n=this._cipher,a=n.blockSize,r=this._iv,i=this._keystream;r&&(i=this._keystream=r.slice(0),this._iv=void 0),n.encryptBlock(i,0);for(var o=0;o<a;o++)e[t+o]^=i[o]}}),t.Decryptor=n,t),e.mode.OFB},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297}],310:[function(e,t,n){var a,r;a=this,r=function(e){return e.pad.AnsiX923={pad:function(e,t){var n=e.sigBytes,a=4*t,r=a-n%a,i=n+r-1;e.clamp(),e.words[i>>>2]|=r<<24-i%4*8,e.sigBytes+=r},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},e.pad.Ansix923},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297}],311:[function(e,t,n){var a,r;a=this,r=function(e){return e.pad.Iso10126={pad:function(t,n){var a=4*n,r=a-t.sigBytes%a;t.concat(e.lib.WordArray.random(r-1)).concat(e.lib.WordArray.create([r<<24],1))},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},e.pad.Iso10126},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297}],312:[function(e,t,n){var a,r;a=this,r=function(e){return e.pad.Iso97971={pad:function(t,n){t.concat(e.lib.WordArray.create([2147483648],1)),e.pad.ZeroPadding.pad(t,n)},unpad:function(t){e.pad.ZeroPadding.unpad(t),t.sigBytes--}},e.pad.Iso97971},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297}],313:[function(e,t,n){var a,r;a=this,r=function(e){return e.pad.NoPadding={pad:function(){},unpad:function(){}},e.pad.NoPadding},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297}],314:[function(e,t,n){var a,r;a=this,r=function(e){return e.pad.ZeroPadding={pad:function(e,t){var n=4*t;e.clamp(),e.sigBytes+=n-(e.sigBytes%n||n)},unpad:function(e){for(var t=e.words,n=e.sigBytes-1;!(t[n>>>2]>>>24-n%4*8&255);)n--;e.sigBytes=n+1}},e.pad.ZeroPadding},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297}],315:[function(e,t,n){var a,r;a=this,r=function(e){var t,n,a,r,i,o,s,c;return n=(t=e).lib,a=n.Base,r=n.WordArray,i=t.algo,o=i.SHA1,s=i.HMAC,c=i.PBKDF2=a.extend({cfg:a.extend({keySize:4,hasher:o,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var n=this.cfg,a=s.create(n.hasher,e),i=r.create(),o=r.create([1]),c=i.words,u=o.words,l=n.keySize,p=n.iterations;c.length<l;){var d=a.update(t).finalize(o);a.reset();for(var f=d.words,h=f.length,m=d,g=1;g<p;g++){m=a.finalize(m),a.reset();for(var y=m.words,v=0;v<h;v++)f[v]^=y[v]}i.concat(d),u[0]++}return i.sigBytes=4*l,i}}),t.PBKDF2=function(e,t,n){return c.create(n).compute(e,t)},e.PBKDF2},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./sha1\"),e(\"./hmac\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./sha1\",\"./hmac\"],r):r(a.CryptoJS)},{\"./core\":297,\"./hmac\":302,\"./sha1\":320}],316:[function(e,t,n){var a,r;a=this,r=function(e){return function(){var t=e,n=t.lib.StreamCipher,a=t.algo,r=[],i=[],o=[],s=a.RabbitLegacy=n.extend({_doReset:function(){var e=this._key.words,t=this.cfg.iv,n=this._X=[e[0],e[3]<<16|e[2]>>>16,e[1],e[0]<<16|e[3]>>>16,e[2],e[1]<<16|e[0]>>>16,e[3],e[2]<<16|e[1]>>>16],a=this._C=[e[2]<<16|e[2]>>>16,4294901760&e[0]|65535&e[1],e[3]<<16|e[3]>>>16,4294901760&e[1]|65535&e[2],e[0]<<16|e[0]>>>16,4294901760&e[2]|65535&e[3],e[1]<<16|e[1]>>>16,4294901760&e[3]|65535&e[0]];this._b=0;for(var r=0;r<4;r++)c.call(this);for(r=0;r<8;r++)a[r]^=n[r+4&7];if(t){var i=t.words,o=i[0],s=i[1],u=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),l=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),p=u>>>16|4294901760&l,d=l<<16|65535&u;for(a[0]^=u,a[1]^=p,a[2]^=l,a[3]^=d,a[4]^=u,a[5]^=p,a[6]^=l,a[7]^=d,r=0;r<4;r++)c.call(this)}},_doProcessBlock:function(e,t){var n=this._X;c.call(this),r[0]=n[0]^n[5]>>>16^n[3]<<16,r[1]=n[2]^n[7]>>>16^n[5]<<16,r[2]=n[4]^n[1]>>>16^n[7]<<16,r[3]=n[6]^n[3]>>>16^n[1]<<16;for(var a=0;a<4;a++)r[a]=16711935&(r[a]<<8|r[a]>>>24)|4278255360&(r[a]<<24|r[a]>>>8),e[t+a]^=r[a]},blockSize:4,ivSize:2});function c(){for(var e=this._X,t=this._C,n=0;n<8;n++)i[n]=t[n];for(t[0]=t[0]+1295307597+this._b|0,t[1]=t[1]+3545052371+(t[0]>>>0<i[0]>>>0?1:0)|0,t[2]=t[2]+886263092+(t[1]>>>0<i[1]>>>0?1:0)|0,t[3]=t[3]+1295307597+(t[2]>>>0<i[2]>>>0?1:0)|0,t[4]=t[4]+3545052371+(t[3]>>>0<i[3]>>>0?1:0)|0,t[5]=t[5]+886263092+(t[4]>>>0<i[4]>>>0?1:0)|0,t[6]=t[6]+1295307597+(t[5]>>>0<i[5]>>>0?1:0)|0,t[7]=t[7]+3545052371+(t[6]>>>0<i[6]>>>0?1:0)|0,this._b=t[7]>>>0<i[7]>>>0?1:0,n=0;n<8;n++){var a=e[n]+t[n],r=65535&a,s=a>>>16,c=((r*r>>>17)+r*s>>>15)+s*s,u=((4294901760&a)*a|0)+((65535&a)*a|0);o[n]=c^u}e[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,e[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,e[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,e[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,e[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,e[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,e[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,e[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}t.RabbitLegacy=n._createHelper(s)}(),e.RabbitLegacy},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./enc-base64\"),e(\"./md5\"),e(\"./evpkdf\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./enc-base64\",\"./md5\",\"./evpkdf\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297,\"./enc-base64\":298,\"./evpkdf\":300,\"./md5\":304}],317:[function(e,t,n){var a,r;a=this,r=function(e){return function(){var t=e,n=t.lib.StreamCipher,a=t.algo,r=[],i=[],o=[],s=a.Rabbit=n.extend({_doReset:function(){for(var e=this._key.words,t=this.cfg.iv,n=0;n<4;n++)e[n]=16711935&(e[n]<<8|e[n]>>>24)|4278255360&(e[n]<<24|e[n]>>>8);var a=this._X=[e[0],e[3]<<16|e[2]>>>16,e[1],e[0]<<16|e[3]>>>16,e[2],e[1]<<16|e[0]>>>16,e[3],e[2]<<16|e[1]>>>16],r=this._C=[e[2]<<16|e[2]>>>16,4294901760&e[0]|65535&e[1],e[3]<<16|e[3]>>>16,4294901760&e[1]|65535&e[2],e[0]<<16|e[0]>>>16,4294901760&e[2]|65535&e[3],e[1]<<16|e[1]>>>16,4294901760&e[3]|65535&e[0]];for(this._b=0,n=0;n<4;n++)c.call(this);for(n=0;n<8;n++)r[n]^=a[n+4&7];if(t){var i=t.words,o=i[0],s=i[1],u=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),l=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),p=u>>>16|4294901760&l,d=l<<16|65535&u;for(r[0]^=u,r[1]^=p,r[2]^=l,r[3]^=d,r[4]^=u,r[5]^=p,r[6]^=l,r[7]^=d,n=0;n<4;n++)c.call(this)}},_doProcessBlock:function(e,t){var n=this._X;c.call(this),r[0]=n[0]^n[5]>>>16^n[3]<<16,r[1]=n[2]^n[7]>>>16^n[5]<<16,r[2]=n[4]^n[1]>>>16^n[7]<<16,r[3]=n[6]^n[3]>>>16^n[1]<<16;for(var a=0;a<4;a++)r[a]=16711935&(r[a]<<8|r[a]>>>24)|4278255360&(r[a]<<24|r[a]>>>8),e[t+a]^=r[a]},blockSize:4,ivSize:2});function c(){for(var e=this._X,t=this._C,n=0;n<8;n++)i[n]=t[n];for(t[0]=t[0]+1295307597+this._b|0,t[1]=t[1]+3545052371+(t[0]>>>0<i[0]>>>0?1:0)|0,t[2]=t[2]+886263092+(t[1]>>>0<i[1]>>>0?1:0)|0,t[3]=t[3]+1295307597+(t[2]>>>0<i[2]>>>0?1:0)|0,t[4]=t[4]+3545052371+(t[3]>>>0<i[3]>>>0?1:0)|0,t[5]=t[5]+886263092+(t[4]>>>0<i[4]>>>0?1:0)|0,t[6]=t[6]+1295307597+(t[5]>>>0<i[5]>>>0?1:0)|0,t[7]=t[7]+3545052371+(t[6]>>>0<i[6]>>>0?1:0)|0,this._b=t[7]>>>0<i[7]>>>0?1:0,n=0;n<8;n++){var a=e[n]+t[n],r=65535&a,s=a>>>16,c=((r*r>>>17)+r*s>>>15)+s*s,u=((4294901760&a)*a|0)+((65535&a)*a|0);o[n]=c^u}e[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,e[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,e[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,e[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,e[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,e[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,e[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,e[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}t.Rabbit=n._createHelper(s)}(),e.Rabbit},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./enc-base64\"),e(\"./md5\"),e(\"./evpkdf\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./enc-base64\",\"./md5\",\"./evpkdf\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297,\"./enc-base64\":298,\"./evpkdf\":300,\"./md5\":304}],318:[function(e,t,n){var a,r;a=this,r=function(e){return function(){var t=e,n=t.lib.StreamCipher,a=t.algo,r=a.RC4=n.extend({_doReset:function(){for(var e=this._key,t=e.words,n=e.sigBytes,a=this._S=[],r=0;r<256;r++)a[r]=r;r=0;for(var i=0;r<256;r++){var o=r%n,s=t[o>>>2]>>>24-o%4*8&255;i=(i+a[r]+s)%256;var c=a[r];a[r]=a[i],a[i]=c}this._i=this._j=0},_doProcessBlock:function(e,t){e[t]^=i.call(this)},keySize:8,ivSize:0});function i(){for(var e=this._S,t=this._i,n=this._j,a=0,r=0;r<4;r++){n=(n+e[t=(t+1)%256])%256;var i=e[t];e[t]=e[n],e[n]=i,a|=e[(e[t]+e[n])%256]<<24-8*r}return this._i=t,this._j=n,a}t.RC4=n._createHelper(r);var o=a.RC4Drop=r.extend({cfg:r.cfg.extend({drop:192}),_doReset:function(){r._doReset.call(this);for(var e=this.cfg.drop;e>0;e--)i.call(this)}});t.RC4Drop=n._createHelper(o)}(),e.RC4},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./enc-base64\"),e(\"./md5\"),e(\"./evpkdf\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./enc-base64\",\"./md5\",\"./evpkdf\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297,\"./enc-base64\":298,\"./evpkdf\":300,\"./md5\":304}],319:[function(e,t,n){var a,r;a=this,r=function(e){return function(){var t=e,n=t.lib,a=n.WordArray,r=n.Hasher,i=t.algo,o=a.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),s=a.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),c=a.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),u=a.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),l=a.create([0,1518500249,1859775393,2400959708,2840853838]),p=a.create([1352829926,1548603684,1836072691,2053994217,0]),d=i.RIPEMD160=r.extend({_doReset:function(){this._hash=a.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var a=t+n,r=e[a];e[a]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8)}var i,d,b,x,w,k,_,j,S,A,E,C=this._hash.words,T=l.words,P=p.words,D=o.words,O=s.words,M=c.words,N=u.words;for(k=i=C[0],_=d=C[1],j=b=C[2],S=x=C[3],A=w=C[4],n=0;n<80;n+=1)E=i+e[t+D[n]]|0,E+=n<16?f(d,b,x)+T[0]:n<32?h(d,b,x)+T[1]:n<48?m(d,b,x)+T[2]:n<64?g(d,b,x)+T[3]:y(d,b,x)+T[4],E=(E=v(E|=0,M[n]))+w|0,i=w,w=x,x=v(b,10),b=d,d=E,E=k+e[t+O[n]]|0,E+=n<16?y(_,j,S)+P[0]:n<32?g(_,j,S)+P[1]:n<48?m(_,j,S)+P[2]:n<64?h(_,j,S)+P[3]:f(_,j,S)+P[4],E=(E=v(E|=0,N[n]))+A|0,k=A,A=S,S=v(j,10),j=_,_=E;E=C[1]+b+S|0,C[1]=C[2]+x+A|0,C[2]=C[3]+w+k|0,C[3]=C[4]+i+_|0,C[4]=C[0]+d+j|0,C[0]=E},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,a=8*e.sigBytes;t[a>>>5]|=128<<24-a%32,t[14+(a+64>>>9<<4)]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8),e.sigBytes=4*(t.length+1),this._process();for(var r=this._hash,i=r.words,o=0;o<5;o++){var s=i[o];i[o]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8)}return r},clone:function(){var e=r.clone.call(this);return e._hash=this._hash.clone(),e}});function f(e,t,n){return e^t^n}function h(e,t,n){return e&t|~e&n}function m(e,t,n){return(e|~t)^n}function g(e,t,n){return e&n|t&~n}function y(e,t,n){return e^(t|~n)}function v(e,t){return e<<t|e>>>32-t}t.RIPEMD160=r._createHelper(d),t.HmacRIPEMD160=r._createHmacHelper(d)}(Math),e.RIPEMD160},\"object\"==typeof n?t.exports=n=r(e(\"./core\")):\"function\"==typeof define&&define.amd?define([\"./core\"],r):r(a.CryptoJS)},{\"./core\":297}],320:[function(e,t,n){var a,r;a=this,r=function(e){var t,n,a,r,i,o,s;return n=(t=e).lib,a=n.WordArray,r=n.Hasher,i=t.algo,o=[],s=i.SHA1=r.extend({_doReset:function(){this._hash=new a.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=this._hash.words,a=n[0],r=n[1],i=n[2],s=n[3],c=n[4],u=0;u<80;u++){if(u<16)o[u]=0|e[t+u];else{var l=o[u-3]^o[u-8]^o[u-14]^o[u-16];o[u]=l<<1|l>>>31}var p=(a<<5|a>>>27)+c+o[u];p+=u<20?1518500249+(r&i|~r&s):u<40?1859775393+(r^i^s):u<60?(r&i|r&s|i&s)-1894007588:(r^i^s)-899497514,c=s,s=i,i=r<<30|r>>>2,r=a,a=p}n[0]=n[0]+a|0,n[1]=n[1]+r|0,n[2]=n[2]+i|0,n[3]=n[3]+s|0,n[4]=n[4]+c|0},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,a=8*e.sigBytes;return t[a>>>5]|=128<<24-a%32,t[14+(a+64>>>9<<4)]=Math.floor(n/4294967296),t[15+(a+64>>>9<<4)]=n,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=r.clone.call(this);return e._hash=this._hash.clone(),e}}),t.SHA1=r._createHelper(s),t.HmacSHA1=r._createHmacHelper(s),e.SHA1},\"object\"==typeof n?t.exports=n=r(e(\"./core\")):\"function\"==typeof define&&define.amd?define([\"./core\"],r):r(a.CryptoJS)},{\"./core\":297}],321:[function(e,t,n){var a,r;a=this,r=function(e){var t,n,a,r,i;return n=(t=e).lib.WordArray,a=t.algo,r=a.SHA256,i=a.SHA224=r.extend({_doReset:function(){this._hash=new n.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var e=r._doFinalize.call(this);return e.sigBytes-=4,e}}),t.SHA224=r._createHelper(i),t.HmacSHA224=r._createHmacHelper(i),e.SHA224},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./sha256\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./sha256\"],r):r(a.CryptoJS)},{\"./core\":297,\"./sha256\":322}],322:[function(e,t,n){var a,r;a=this,r=function(e){return function(t){var n=e,a=n.lib,r=a.WordArray,i=a.Hasher,o=n.algo,s=[],c=[];!function(){function e(e){for(var n=t.sqrt(e),a=2;a<=n;a++)if(!(e%a))return!1;return!0}function n(e){return 4294967296*(e-(0|e))|0}for(var a=2,r=0;r<64;)e(a)&&(r<8&&(s[r]=n(t.pow(a,.5))),c[r]=n(t.pow(a,1/3)),r++),a++}();var u=[],l=o.SHA256=i.extend({_doReset:function(){this._hash=new r.init(s.slice(0))},_doProcessBlock:function(e,t){for(var n=this._hash.words,a=n[0],r=n[1],i=n[2],o=n[3],s=n[4],l=n[5],p=n[6],d=n[7],f=0;f<64;f++){if(f<16)u[f]=0|e[t+f];else{var h=u[f-15],m=(h<<25|h>>>7)^(h<<14|h>>>18)^h>>>3,g=u[f-2],y=(g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10;u[f]=m+u[f-7]+y+u[f-16]}var v=a&r^a&i^r&i,b=(a<<30|a>>>2)^(a<<19|a>>>13)^(a<<10|a>>>22),x=d+((s<<26|s>>>6)^(s<<21|s>>>11)^(s<<7|s>>>25))+(s&l^~s&p)+c[f]+u[f];d=p,p=l,l=s,s=o+x|0,o=i,i=r,r=a,a=x+(b+v)|0}n[0]=n[0]+a|0,n[1]=n[1]+r|0,n[2]=n[2]+i|0,n[3]=n[3]+o|0,n[4]=n[4]+s|0,n[5]=n[5]+l|0,n[6]=n[6]+p|0,n[7]=n[7]+d|0},_doFinalize:function(){var e=this._data,n=e.words,a=8*this._nDataBytes,r=8*e.sigBytes;return n[r>>>5]|=128<<24-r%32,n[14+(r+64>>>9<<4)]=t.floor(a/4294967296),n[15+(r+64>>>9<<4)]=a,e.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});n.SHA256=i._createHelper(l),n.HmacSHA256=i._createHmacHelper(l)}(Math),e.SHA256},\"object\"==typeof n?t.exports=n=r(e(\"./core\")):\"function\"==typeof define&&define.amd?define([\"./core\"],r):r(a.CryptoJS)},{\"./core\":297}],323:[function(e,t,n){var a,r;a=this,r=function(e){return function(t){var n=e,a=n.lib,r=a.WordArray,i=a.Hasher,o=n.x64.Word,s=n.algo,c=[],u=[],l=[];!function(){for(var e=1,t=0,n=0;n<24;n++){c[e+5*t]=(n+1)*(n+2)/2%64;var a=(2*e+3*t)%5;e=t%5,t=a}for(e=0;e<5;e++)for(t=0;t<5;t++)u[e+5*t]=t+(2*e+3*t)%5*5;for(var r=1,i=0;i<24;i++){for(var s=0,p=0,d=0;d<7;d++){if(1&r){var f=(1<<d)-1;f<32?p^=1<<f:s^=1<<f-32}128&r?r=r<<1^113:r<<=1}l[i]=o.create(s,p)}}();var p=[];!function(){for(var e=0;e<25;e++)p[e]=o.create()}();var d=s.SHA3=i.extend({cfg:i.cfg.extend({outputLength:512}),_doReset:function(){for(var e=this._state=[],t=0;t<25;t++)e[t]=new o.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(e,t){for(var n=this._state,a=this.blockSize/2,r=0;r<a;r++){var i=e[t+2*r],o=e[t+2*r+1];i=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),(C=n[r]).high^=o,C.low^=i}for(var s=0;s<24;s++){for(var d=0;d<5;d++){for(var f=0,h=0,m=0;m<5;m++)f^=(C=n[d+5*m]).high,h^=C.low;var g=p[d];g.high=f,g.low=h}for(d=0;d<5;d++){var y=p[(d+4)%5],v=p[(d+1)%5],b=v.high,x=v.low;for(f=y.high^(b<<1|x>>>31),h=y.low^(x<<1|b>>>31),m=0;m<5;m++)(C=n[d+5*m]).high^=f,C.low^=h}for(var w=1;w<25;w++){var k=(C=n[w]).high,_=C.low,j=c[w];j<32?(f=k<<j|_>>>32-j,h=_<<j|k>>>32-j):(f=_<<j-32|k>>>64-j,h=k<<j-32|_>>>64-j);var S=p[u[w]];S.high=f,S.low=h}var A=p[0],E=n[0];for(A.high=E.high,A.low=E.low,d=0;d<5;d++)for(m=0;m<5;m++){var C=n[w=d+5*m],T=p[w],P=p[(d+1)%5+5*m],D=p[(d+2)%5+5*m];C.high=T.high^~P.high&D.high,C.low=T.low^~P.low&D.low}C=n[0];var O=l[s];C.high^=O.high,C.low^=O.low}},_doFinalize:function(){var e=this._data,n=e.words,a=(this._nDataBytes,8*e.sigBytes),i=32*this.blockSize;n[a>>>5]|=1<<24-a%32,n[(t.ceil((a+1)/i)*i>>>5)-1]|=128,e.sigBytes=4*n.length,this._process();for(var o=this._state,s=this.cfg.outputLength/8,c=s/8,u=[],l=0;l<c;l++){var p=o[l],d=p.high,f=p.low;d=16711935&(d<<8|d>>>24)|4278255360&(d<<24|d>>>8),f=16711935&(f<<8|f>>>24)|4278255360&(f<<24|f>>>8),u.push(f),u.push(d)}return new r.init(u,s)},clone:function(){for(var e=i.clone.call(this),t=e._state=this._state.slice(0),n=0;n<25;n++)t[n]=t[n].clone();return e}});n.SHA3=i._createHelper(d),n.HmacSHA3=i._createHmacHelper(d)}(Math),e.SHA3},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./x64-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./x64-core\"],r):r(a.CryptoJS)},{\"./core\":297,\"./x64-core\":327}],324:[function(e,t,n){var a,r;a=this,r=function(e){var t,n,a,r,i,o,s;return n=(t=e).x64,a=n.Word,r=n.WordArray,i=t.algo,o=i.SHA512,s=i.SHA384=o.extend({_doReset:function(){this._hash=new r.init([new a.init(3418070365,3238371032),new a.init(1654270250,914150663),new a.init(2438529370,812702999),new a.init(355462360,4144912697),new a.init(1731405415,4290775857),new a.init(2394180231,1750603025),new a.init(3675008525,1694076839),new a.init(1203062813,3204075428)])},_doFinalize:function(){var e=o._doFinalize.call(this);return e.sigBytes-=16,e}}),t.SHA384=o._createHelper(s),t.HmacSHA384=o._createHmacHelper(s),e.SHA384},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./x64-core\"),e(\"./sha512\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./x64-core\",\"./sha512\"],r):r(a.CryptoJS)},{\"./core\":297,\"./sha512\":325,\"./x64-core\":327}],325:[function(e,t,n){var a,r;a=this,r=function(e){return function(){var t=e,n=t.lib.Hasher,a=t.x64,r=a.Word,i=a.WordArray,o=t.algo;function s(){return r.create.apply(r,arguments)}var c=[s(1116352408,3609767458),s(1899447441,602891725),s(3049323471,3964484399),s(3921009573,2173295548),s(961987163,4081628472),s(1508970993,3053834265),s(2453635748,2937671579),s(2870763221,3664609560),s(3624381080,2734883394),s(310598401,1164996542),s(607225278,1323610764),s(1426881987,3590304994),s(1925078388,4068182383),s(2162078206,991336113),s(2614888103,633803317),s(3248222580,3479774868),s(3835390401,2666613458),s(4022224774,944711139),s(264347078,2341262773),s(604807628,2007800933),s(770255983,1495990901),s(1249150122,1856431235),s(1555081692,3175218132),s(1996064986,2198950837),s(2554220882,3999719339),s(2821834349,766784016),s(2952996808,2566594879),s(3210313671,3203337956),s(3336571891,1034457026),s(3584528711,2466948901),s(113926993,3758326383),s(338241895,168717936),s(666307205,1188179964),s(773529912,1546045734),s(1294757372,1522805485),s(1396182291,2643833823),s(1695183700,2343527390),s(1986661051,1014477480),s(2177026350,1206759142),s(2456956037,344077627),s(2730485921,1290863460),s(2820302411,3158454273),s(3259730800,3505952657),s(3345764771,106217008),s(3516065817,3606008344),s(3600352804,1432725776),s(4094571909,1467031594),s(275423344,851169720),s(430227734,3100823752),s(506948616,1363258195),s(659060556,3750685593),s(883997877,3785050280),s(958139571,3318307427),s(1322822218,3812723403),s(1537002063,2003034995),s(1747873779,3602036899),s(1955562222,1575990012),s(2024104815,1125592928),s(2227730452,2716904306),s(2361852424,442776044),s(2428436474,593698344),s(2756734187,3733110249),s(3204031479,2999351573),s(3329325298,3815920427),s(3391569614,3928383900),s(3515267271,566280711),s(3940187606,3454069534),s(4118630271,4000239992),s(116418474,1914138554),s(174292421,2731055270),s(289380356,3203993006),s(460393269,320620315),s(685471733,587496836),s(852142971,1086792851),s(1017036298,365543100),s(1126000580,2618297676),s(1288033470,3409855158),s(1501505948,4234509866),s(1607167915,987167468),s(1816402316,1246189591)],u=[];!function(){for(var e=0;e<80;e++)u[e]=s()}();var l=o.SHA512=n.extend({_doReset:function(){this._hash=new i.init([new r.init(1779033703,4089235720),new r.init(3144134277,2227873595),new r.init(1013904242,4271175723),new r.init(2773480762,1595750129),new r.init(1359893119,2917565137),new r.init(2600822924,725511199),new r.init(528734635,4215389547),new r.init(1541459225,327033209)])},_doProcessBlock:function(e,t){for(var n=this._hash.words,a=n[0],r=n[1],i=n[2],o=n[3],s=n[4],l=n[5],p=n[6],d=n[7],f=a.high,h=a.low,m=r.high,g=r.low,y=i.high,v=i.low,b=o.high,x=o.low,w=s.high,k=s.low,_=l.high,j=l.low,S=p.high,A=p.low,E=d.high,C=d.low,T=f,P=h,D=m,O=g,M=y,N=v,B=b,R=x,L=w,I=k,F=_,z=j,q=S,H=A,U=E,G=C,$=0;$<80;$++){var W=u[$];if($<16)var V=W.high=0|e[t+2*$],K=W.low=0|e[t+2*$+1];else{var J=u[$-15],Y=J.high,X=J.low,Z=(Y>>>1|X<<31)^(Y>>>8|X<<24)^Y>>>7,Q=(X>>>1|Y<<31)^(X>>>8|Y<<24)^(X>>>7|Y<<25),ee=u[$-2],te=ee.high,ne=ee.low,ae=(te>>>19|ne<<13)^(te<<3|ne>>>29)^te>>>6,re=(ne>>>19|te<<13)^(ne<<3|te>>>29)^(ne>>>6|te<<26),ie=u[$-7],oe=ie.high,se=ie.low,ce=u[$-16],ue=ce.high,le=ce.low;V=(V=(V=Z+oe+((K=Q+se)>>>0<Q>>>0?1:0))+ae+((K+=re)>>>0<re>>>0?1:0))+ue+((K+=le)>>>0<le>>>0?1:0),W.high=V,W.low=K}var pe,de=L&F^~L&q,fe=I&z^~I&H,he=T&D^T&M^D&M,me=P&O^P&N^O&N,ge=(T>>>28|P<<4)^(T<<30|P>>>2)^(T<<25|P>>>7),ye=(P>>>28|T<<4)^(P<<30|T>>>2)^(P<<25|T>>>7),ve=(L>>>14|I<<18)^(L>>>18|I<<14)^(L<<23|I>>>9),be=(I>>>14|L<<18)^(I>>>18|L<<14)^(I<<23|L>>>9),xe=c[$],we=xe.high,ke=xe.low,_e=U+ve+((pe=G+be)>>>0<G>>>0?1:0),je=ye+me;U=q,G=H,q=F,H=z,F=L,z=I,L=B+(_e=(_e=(_e=_e+de+((pe+=fe)>>>0<fe>>>0?1:0))+we+((pe+=ke)>>>0<ke>>>0?1:0))+V+((pe+=K)>>>0<K>>>0?1:0))+((I=R+pe|0)>>>0<R>>>0?1:0)|0,B=M,R=N,M=D,N=O,D=T,O=P,T=_e+(ge+he+(je>>>0<ye>>>0?1:0))+((P=pe+je|0)>>>0<pe>>>0?1:0)|0}h=a.low=h+P,a.high=f+T+(h>>>0<P>>>0?1:0),g=r.low=g+O,r.high=m+D+(g>>>0<O>>>0?1:0),v=i.low=v+N,i.high=y+M+(v>>>0<N>>>0?1:0),x=o.low=x+R,o.high=b+B+(x>>>0<R>>>0?1:0),k=s.low=k+I,s.high=w+L+(k>>>0<I>>>0?1:0),j=l.low=j+z,l.high=_+F+(j>>>0<z>>>0?1:0),A=p.low=A+H,p.high=S+q+(A>>>0<H>>>0?1:0),C=d.low=C+G,d.high=E+U+(C>>>0<G>>>0?1:0)},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,a=8*e.sigBytes;return t[a>>>5]|=128<<24-a%32,t[30+(a+128>>>10<<5)]=Math.floor(n/4294967296),t[31+(a+128>>>10<<5)]=n,e.sigBytes=4*t.length,this._process(),this._hash.toX32()},clone:function(){var e=n.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32});t.SHA512=n._createHelper(l),t.HmacSHA512=n._createHmacHelper(l)}(),e.SHA512},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./x64-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./x64-core\"],r):r(a.CryptoJS)},{\"./core\":297,\"./x64-core\":327}],326:[function(e,t,n){var a,r;a=this,r=function(e){return function(){var t=e,n=t.lib,a=n.WordArray,r=n.BlockCipher,i=t.algo,o=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],s=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],c=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],u=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],l=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],p=i.DES=r.extend({_doReset:function(){for(var e=this._key.words,t=[],n=0;n<56;n++){var a=o[n]-1;t[n]=e[a>>>5]>>>31-a%32&1}for(var r=this._subKeys=[],i=0;i<16;i++){var u=r[i]=[],l=c[i];for(n=0;n<24;n++)u[n/6|0]|=t[(s[n]-1+l)%28]<<31-n%6,u[4+(n/6|0)]|=t[28+(s[n+24]-1+l)%28]<<31-n%6;for(u[0]=u[0]<<1|u[0]>>>31,n=1;n<7;n++)u[n]=u[n]>>>4*(n-1)+3;u[7]=u[7]<<5|u[7]>>>27}var p=this._invSubKeys=[];for(n=0;n<16;n++)p[n]=r[15-n]},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._subKeys)},decryptBlock:function(e,t){this._doCryptBlock(e,t,this._invSubKeys)},_doCryptBlock:function(e,t,n){this._lBlock=e[t],this._rBlock=e[t+1],d.call(this,4,252645135),d.call(this,16,65535),f.call(this,2,858993459),f.call(this,8,16711935),d.call(this,1,1431655765);for(var a=0;a<16;a++){for(var r=n[a],i=this._lBlock,o=this._rBlock,s=0,c=0;c<8;c++)s|=u[c][((o^r[c])&l[c])>>>0];this._lBlock=o,this._rBlock=i^s}var p=this._lBlock;this._lBlock=this._rBlock,this._rBlock=p,d.call(this,1,1431655765),f.call(this,8,16711935),f.call(this,2,858993459),d.call(this,16,65535),d.call(this,4,252645135),e[t]=this._lBlock,e[t+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function d(e,t){var n=(this._lBlock>>>e^this._rBlock)&t;this._rBlock^=n,this._lBlock^=n<<e}function f(e,t){var n=(this._rBlock>>>e^this._lBlock)&t;this._lBlock^=n,this._rBlock^=n<<e}t.DES=r._createHelper(p);var h=i.TripleDES=r.extend({_doReset:function(){var e=this._key.words;this._des1=p.createEncryptor(a.create(e.slice(0,2))),this._des2=p.createEncryptor(a.create(e.slice(2,4))),this._des3=p.createEncryptor(a.create(e.slice(4,6)))},encryptBlock:function(e,t){this._des1.encryptBlock(e,t),this._des2.decryptBlock(e,t),this._des3.encryptBlock(e,t)},decryptBlock:function(e,t){this._des3.decryptBlock(e,t),this._des2.encryptBlock(e,t),this._des1.decryptBlock(e,t)},keySize:6,ivSize:2,blockSize:2});t.TripleDES=r._createHelper(h)}(),e.TripleDES},\"object\"==typeof n?t.exports=n=r(e(\"./core\"),e(\"./enc-base64\"),e(\"./md5\"),e(\"./evpkdf\"),e(\"./cipher-core\")):\"function\"==typeof define&&define.amd?define([\"./core\",\"./enc-base64\",\"./md5\",\"./evpkdf\",\"./cipher-core\"],r):r(a.CryptoJS)},{\"./cipher-core\":296,\"./core\":297,\"./enc-base64\":298,\"./evpkdf\":300,\"./md5\":304}],327:[function(e,t,n){var a,r;a=this,r=function(e){var t,n,a,r,i;return n=(t=e).lib,a=n.Base,r=n.WordArray,(i=t.x64={}).Word=a.extend({init:function(e,t){this.high=e,this.low=t}}),i.WordArray=a.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:8*e.length},toX32:function(){for(var e=this.words,t=e.length,n=[],a=0;a<t;a++){var i=e[a];n.push(i.high),n.push(i.low)}return r.create(n,this.sigBytes)},clone:function(){for(var e=a.clone.call(this),t=e.words=this.words.slice(0),n=t.length,r=0;r<n;r++)t[r]=t[r].clone();return e}}),e},\"object\"==typeof n?t.exports=n=r(e(\"./core\")):\"function\"==typeof define&&define.amd?define([\"./core\"],r):r(a.CryptoJS)},{\"./core\":297}],328:[function(e,t,n){\"use strict\";t.exports=g;var a=e(\"./lib/pseudos.js\"),r=e(\"domutils\"),i=r.findOne,o=r.findAll,s=r.getChildren,c=r.removeSubsets,u=e(\"boolbase\").falseFunc,l=e(\"./lib/compile.js\"),p=l.compileUnsafe,d=l.compileToken;function f(e){return function(t,n,a){return\"function\"!=typeof t&&(t=p(t,a,n)),n=Array.isArray(n)?c(n):s(n),e(t,n)}}var h=f((function(e,t){return e!==u&&t&&0!==t.length?o(e,t):[]})),m=f((function(e,t){return e!==u&&t&&0!==t.length?i(e,t):null}));function g(e,t,n){return h(e,t,n)}g.compile=l,g.filters=a.filters,g.pseudos=a.pseudos,g.selectAll=h,g.selectOne=m,g.is=function(e,t,n){return(\"function\"==typeof t?t:l(t,n))(e)},g.parse=l,g.iterate=h,g._compileUnsafe=p,g._compileToken=d},{\"./lib/compile.js\":330,\"./lib/pseudos.js\":333,boolbase:240,domutils:343}],329:[function(e,t,n){var a=e(\"domutils\"),r=a.hasAttrib,i=a.getAttributeValue,o=e(\"boolbase\").falseFunc,s=/[-[\\]{}()*+?.,\\\\^$|#\\s]/g,c={__proto__:null,equals:function(e,t){var n=t.name,a=t.value;return t.ignoreCase?(a=a.toLowerCase(),function(t){var r=i(t,n);return null!=r&&r.toLowerCase()===a&&e(t)}):function(t){return i(t,n)===a&&e(t)}},hyphen:function(e,t){var n=t.name,a=t.value,r=a.length;return t.ignoreCase?(a=a.toLowerCase(),function(t){var o=i(t,n);return null!=o&&(o.length===r||\"-\"===o.charAt(r))&&o.substr(0,r).toLowerCase()===a&&e(t)}):function(t){var o=i(t,n);return null!=o&&o.substr(0,r)===a&&(o.length===r||\"-\"===o.charAt(r))&&e(t)}},element:function(e,t){var n=t.name,a=t.value;if(/\\s/.test(a))return o;var r=\"(?:^|\\\\s)\"+(a=a.replace(s,\"\\\\$&\"))+\"(?:$|\\\\s)\",c=t.ignoreCase?\"i\":\"\",u=new RegExp(r,c);return function(t){var a=i(t,n);return null!=a&&u.test(a)&&e(t)}},exists:function(e,t){var n=t.name;return function(t){return r(t,n)&&e(t)}},start:function(e,t){var n=t.name,a=t.value,r=a.length;return 0===r?o:t.ignoreCase?(a=a.toLowerCase(),function(t){var o=i(t,n);return null!=o&&o.substr(0,r).toLowerCase()===a&&e(t)}):function(t){var o=i(t,n);return null!=o&&o.substr(0,r)===a&&e(t)}},end:function(e,t){var n=t.name,a=t.value,r=-a.length;return 0===r?o:t.ignoreCase?(a=a.toLowerCase(),function(t){var o=i(t,n);return null!=o&&o.substr(r).toLowerCase()===a&&e(t)}):function(t){var o=i(t,n);return null!=o&&o.substr(r)===a&&e(t)}},any:function(e,t){var n=t.name,a=t.value;if(\"\"===a)return o;if(t.ignoreCase){var r=new RegExp(a.replace(s,\"\\\\$&\"),\"i\");return function(t){var a=i(t,n);return null!=a&&r.test(a)&&e(t)}}return function(t){var r=i(t,n);return null!=r&&r.indexOf(a)>=0&&e(t)}},not:function(e,t){var n=t.name,a=t.value;return\"\"===a?function(t){return!!i(t,n)&&e(t)}:t.ignoreCase?(a=a.toLowerCase(),function(t){var r=i(t,n);return null!=r&&r.toLowerCase()!==a&&e(t)}):function(t){return i(t,n)!==a&&e(t)}}};t.exports={compile:function(e,t,n){if(n&&n.strict&&(t.ignoreCase||\"not\"===t.action))throw SyntaxError(\"Unsupported attribute selector\");return c[t.action](e,t)},rules:c}},{boolbase:240,domutils:343}],330:[function(e,t,n){t.exports=function(e,t,n){return d(f(e,t,n))},t.exports.compileUnsafe=f,t.exports.compileToken=b;var a=e(\"css-what\"),r=e(\"domutils\"),i=r.isTag,o=e(\"./general.js\"),s=e(\"./sort.js\"),c=e(\"boolbase\"),u=c.trueFunc,l=c.falseFunc,p=e(\"./procedure.json\");function d(e){return function(t){return i(t)&&e(t)}}function f(e,t,n){return b(a(e,t),t,n)}function h(e){return\"pseudo\"===e.type&&(\"scope\"===e.name||Array.isArray(e.data)&&e.data.some((function(e){return e.some(h)})))}var m={type:\"descendant\"},g={type:\"pseudo\",name:\"scope\"},y={},v=r.getParent;function b(e,t,n){(e=e.filter((function(e){return e.length>0}))).forEach(s);var a=Array.isArray(n);return(n=t&&t.context||n)&&!a&&(n=[n]),function(e,t){var n=!!t&&!!t.length&&t.every((function(e){return e===y||!!v(e)}));e.forEach((function(e){if(e.length>0&&x(e[0])&&\"descendant\"!==e[0].type);else{if(!n||h(e))return;e.unshift(m)}e.unshift(g)}))}(e,n),e.map((function(e){return function(e,t,n,a){var r=a&&\"scope\"===e[0].name&&\"descendant\"===e[1].type;return e.reduce((function(e,a,i){return e===l?e:o[a.type](e,a,t,n,r&&1===i)}),t&&t.rootFunc||u)}(e,t,n,a)})).reduce(w,l)}function x(e){return p[e.type]<0}function w(e,t){return t===l||e===u?e:e===l||t===u?t:function(n){return e(n)||t(n)}}var k=e(\"./pseudos.js\").filters,_=r.existsOne,j=(i=r.isTag,r.getChildren);function S(e){return e.some(x)}k.not=function(e,t,n,a){var r={xmlMode:!(!n||!n.xmlMode),strict:!(!n||!n.strict)};if(r.strict&&(t.length>1||t.some(S)))throw new SyntaxError(\"complex selectors in :not aren't allowed in strict mode\");var i=b(t,r,a);return i===l?e:i===u?l:function(t){return!i(t)&&e(t)}},k.has=function(e,t,n){var a={xmlMode:!(!n||!n.xmlMode),strict:!(!n||!n.strict)},r=t.some(S)?[y]:null,o=b(t,a,r);return o===l?l:o===u?function(t){return j(t).some(i)&&e(t)}:(o=d(o),r?function(t){return e(t)&&(r[0]=t,_(o,j(t)))}:function(t){return e(t)&&_(o,j(t))})},k.matches=function(e,t,n,a){return b(t,{xmlMode:!(!n||!n.xmlMode),strict:!(!n||!n.strict),rootFunc:e},a)}},{\"./general.js\":331,\"./procedure.json\":332,\"./pseudos.js\":333,\"./sort.js\":334,boolbase:240,\"css-what\":335,domutils:343}],331:[function(e,t,n){var a=e(\"domutils\"),r=a.isTag,i=a.getParent,o=a.getChildren,s=a.getSiblings,c=a.getName;t.exports={__proto__:null,attribute:e(\"./attributes.js\").compile,pseudo:e(\"./pseudos.js\").compile,tag:function(e,t){var n=t.name;return function(t){return c(t)===n&&e(t)}},descendant:function(e,t,n,a,r){return function(t){if(r&&e(t))return!0;for(var n=!1;!n&&(t=i(t));)n=e(t);return n}},parent:function(e,t,n){if(n&&n.strict)throw SyntaxError(\"Parent selector isn't part of CSS3\");return function(e){return o(e).some(a)};function a(t){return r(t)&&e(t)}},child:function(e){return function(t){var n=i(t);return!!n&&e(n)}},sibling:function(e){return function(t){for(var n=s(t),a=0;a<n.length;a++)if(r(n[a])){if(n[a]===t)break;if(e(n[a]))return!0}return!1}},adjacent:function(e){return function(t){for(var n,a=s(t),i=0;i<a.length;i++)if(r(a[i])){if(a[i]===t)break;n=a[i]}return!!n&&e(n)}},universal:function(e){return e}}},{\"./attributes.js\":329,\"./pseudos.js\":333,domutils:343}],332:[function(e,t,n){t.exports={universal:50,tag:30,attribute:1,pseudo:0,descendant:-1,child:-1,parent:-1,sibling:-1,adjacent:-1}},{}],333:[function(e,t,n){var a=e(\"domutils\"),r=a.isTag,i=a.getText,o=a.getParent,s=a.getChildren,c=a.getSiblings,u=a.hasAttrib,l=a.getName,p=a.getAttributeValue,d=e(\"nth-check\"),f=e(\"./attributes.js\").rules.equals,h=e(\"boolbase\"),m=h.trueFunc,g=h.falseFunc;function y(e,t){var n={name:e,value:t};return function(e){return f(e,n)}}function v(e){return function(t){return!!o(t)&&e(t)}}var b={contains:function(e,t){return function(n){return e(n)&&i(n).indexOf(t)>=0}},icontains:function(e,t){var n=t.toLowerCase();return function(t){return e(t)&&i(t).toLowerCase().indexOf(n)>=0}},\"nth-child\":function(e,t){var n=d(t);return n===g?n:n===m?v(e):function(t){for(var a=c(t),i=0,o=0;i<a.length;i++)if(r(a[i])){if(a[i]===t)break;o++}return n(o)&&e(t)}},\"nth-last-child\":function(e,t){var n=d(t);return n===g?n:n===m?v(e):function(t){for(var a=c(t),i=0,o=a.length-1;o>=0;o--)if(r(a[o])){if(a[o]===t)break;i++}return n(i)&&e(t)}},\"nth-of-type\":function(e,t){var n=d(t);return n===g?n:n===m?v(e):function(t){for(var a=c(t),i=0,o=0;o<a.length;o++)if(r(a[o])){if(a[o]===t)break;l(a[o])===l(t)&&i++}return n(i)&&e(t)}},\"nth-last-of-type\":function(e,t){var n=d(t);return n===g?n:n===m?v(e):function(t){for(var a=c(t),i=0,o=a.length-1;o>=0;o--)if(r(a[o])){if(a[o]===t)break;l(a[o])===l(t)&&i++}return n(i)&&e(t)}},root:function(e){return function(t){return!o(t)&&e(t)}},scope:function(e,t,n,a){return a&&0!==a.length?1===a.length?function(t){return a[0]===t&&e(t)}:function(t){return a.indexOf(t)>=0&&e(t)}:b.root(e)},checkbox:y(\"type\",\"checkbox\"),file:y(\"type\",\"file\"),password:y(\"type\",\"password\"),radio:y(\"type\",\"radio\"),reset:y(\"type\",\"reset\"),image:y(\"type\",\"image\"),submit:y(\"type\",\"submit\")},x={empty:function(e){return!s(e).some((function(e){return r(e)||\"text\"===e.type}))},\"first-child\":function(e){return function(e){for(var t=0;e&&t<e.length;t++)if(r(e[t]))return e[t]}(c(e))===e},\"last-child\":function(e){for(var t=c(e),n=t.length-1;n>=0;n--){if(t[n]===e)return!0;if(r(t[n]))break}return!1},\"first-of-type\":function(e){for(var t=c(e),n=0;n<t.length;n++)if(r(t[n])){if(t[n]===e)return!0;if(l(t[n])===l(e))break}return!1},\"last-of-type\":function(e){for(var t=c(e),n=t.length-1;n>=0;n--)if(r(t[n])){if(t[n]===e)return!0;if(l(t[n])===l(e))break}return!1},\"only-of-type\":function(e){for(var t=c(e),n=0,a=t.length;n<a;n++)if(r(t[n])){if(t[n]===e)continue;if(l(t[n])===l(e))return!1}return!0},\"only-child\":function(e){for(var t=c(e),n=0;n<t.length;n++)if(r(t[n])&&t[n]!==e)return!1;return!0},link:function(e){return u(e,\"href\")},visited:g,selected:function(e){if(u(e,\"selected\"))return!0;if(\"option\"!==l(e))return!1;var t=o(e);if(!t||\"select\"!==l(t)||u(t,\"multiple\"))return!1;for(var n=s(t),a=!1,i=0;i<n.length;i++)if(r(n[i]))if(n[i]===e)a=!0;else{if(!a)return!1;if(u(n[i],\"selected\"))return!1}return a},disabled:function(e){return u(e,\"disabled\")},enabled:function(e){return!u(e,\"disabled\")},checked:function(e){return u(e,\"checked\")||x.selected(e)},required:function(e){return u(e,\"required\")},optional:function(e){return!u(e,\"required\")},parent:function(e){return!x.empty(e)},header:function(e){var t=l(e);return\"h1\"===t||\"h2\"===t||\"h3\"===t||\"h4\"===t||\"h5\"===t||\"h6\"===t},button:function(e){var t=l(e);return\"button\"===t||\"input\"===t&&\"button\"===p(e,\"type\")},input:function(e){var t=l(e);return\"input\"===t||\"textarea\"===t||\"select\"===t||\"button\"===t},text:function(e){var t;return\"input\"===l(e)&&(!(t=p(e,\"type\"))||\"text\"===t.toLowerCase())}};function w(e,t,n){if(null===n){if(e.length>1&&\"scope\"!==t)throw new SyntaxError(\"pseudo-selector :\"+t+\" requires an argument\")}else if(1===e.length)throw new SyntaxError(\"pseudo-selector :\"+t+\" doesn't have any arguments\")}var k=/^(?:(?:nth|last|first|only)-(?:child|of-type)|root|empty|(?:en|dis)abled|checked|not)$/;t.exports={compile:function(e,t,n,a){var r=t.name,i=t.data;if(n&&n.strict&&!k.test(r))throw SyntaxError(\":\"+r+\" isn't part of CSS3\");if(\"function\"==typeof b[r])return w(b[r],r,i),b[r](e,i,n,a);if(\"function\"==typeof x[r]){var o=x[r];return w(o,r,i),e===m?o:function(t){return o(t,i)&&e(t)}}throw new SyntaxError(\"unmatched pseudo-class :\"+r)},filters:b,pseudos:x}},{\"./attributes.js\":329,boolbase:240,domutils:343,\"nth-check\":418}],334:[function(e,t,n){t.exports=function(e){for(var t=e.map(i),n=1;n<e.length;n++){var a=t[n];if(!(a<0))for(var r=n-1;r>=0&&a<t[r];r--){var o=e[r+1];e[r+1]=e[r],e[r]=o,t[r+1]=t[r],t[r]=a}}};var a=e(\"./procedure.json\"),r={__proto__:null,exists:10,equals:8,not:7,start:6,end:6,any:5,hyphen:4,element:4};function i(e){var t=a[e.type];if(t===a.attribute)(t=r[e.action])===r.equals&&\"id\"===e.name&&(t=9),e.ignoreCase&&(t>>=1);else if(t===a.pseudo)if(e.data)if(\"has\"===e.name||\"contains\"===e.name)t=0;else if(\"matches\"===e.name||\"not\"===e.name){t=0;for(var n=0;n<e.data.length;n++)if(1===e.data[n].length){var o=i(e.data[n][0]);if(0===o){t=0;break}o>t&&(t=o)}e.data.length>1&&t>0&&(t-=1)}else t=1;else t=3;return t}},{\"./procedure.json\":332}],335:[function(e,t,n){\"use strict\";t.exports=function(e,t){var n=[];if(\"\"!==(e=m(n,e+\"\",t)))throw new SyntaxError(\"Unmatched selector: \"+e);return n};var a=/^(?:\\\\.|[\\w\\-\\u00b0-\\uFFFF])+/,r=/\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi,i=/^\\s*((?:\\\\.|[\\w\\u00b0-\\uFFFF\\-])+)\\s*(?:(\\S?)=\\s*(?:(['\"])([^]*?)\\3|(#?(?:\\\\.|[\\w\\u00b0-\\uFFFF\\-])*)|)|)\\s*(i)?\\]/,o={__proto__:null,undefined:\"exists\",\"\":\"equals\",\"~\":\"element\",\"^\":\"start\",$:\"end\",\"*\":\"any\",\"!\":\"not\",\"|\":\"hyphen\"},s={__proto__:null,\">\":\"child\",\"<\":\"parent\",\"~\":\"sibling\",\"+\":\"adjacent\"},c={__proto__:null,\"#\":[\"id\",\"equals\"],\".\":[\"class\",\"element\"]},u={__proto__:null,has:!0,not:!0,matches:!0},l={__proto__:null,contains:!0,icontains:!0},p={__proto__:null,'\"':!0,\"'\":!0};function d(e,t,n){var a=\"0x\"+t-65536;return a!=a||n?t:a<0?String.fromCharCode(a+65536):String.fromCharCode(a>>10|55296,1023&a|56320)}function f(e){return e.replace(r,d)}function h(e){return\" \"===e||\"\\n\"===e||\"\\t\"===e||\"\\f\"===e||\"\\r\"===e}function m(e,t,n){var r,d,y,v,b=[],x=!1;function w(){var e=t.match(a)[0];return t=t.substr(e.length),f(e)}function k(e){for(;h(t.charAt(e));)e++;t=t.substr(e)}function _(e){for(var n=0;\"\\\\\"===t.charAt(--e);)n++;return!(1&~n)}for(k(0);\"\"!==t;)if(h(d=t.charAt(0)))x=!0,k(1);else if(d in s)b.push({type:s[d]}),x=!1,k(1);else if(\",\"===d){if(0===b.length)throw new SyntaxError(\"empty sub-selector\");e.push(b),b=[],x=!1,k(1)}else if(x&&(b.length>0&&b.push({type:\"descendant\"}),x=!1),\"*\"===d)t=t.substr(1),b.push({type:\"universal\"});else if(d in c)t=t.substr(1),b.push({type:\"attribute\",name:c[d][0],action:c[d][1],value:w(),ignoreCase:!1});else if(\"[\"===d){if(!(r=(t=t.substr(1)).match(i)))throw new SyntaxError(\"Malformed attribute selector: \"+t);t=t.substr(r[0].length),y=f(r[1]),n&&(\"lowerCaseAttributeNames\"in n?!n.lowerCaseAttributeNames:n.xmlMode)||(y=y.toLowerCase()),b.push({type:\"attribute\",name:y,action:o[r[2]],value:f(r[4]||r[5]||\"\"),ignoreCase:!!r[6]})}else if(\":\"===d){if(\":\"===t.charAt(1)){t=t.substr(2),b.push({type:\"pseudo-element\",name:w().toLowerCase()});continue}if(t=t.substr(1),y=w().toLowerCase(),r=null,\"(\"===t.charAt(0))if(y in u){var j=(v=t.charAt(1))in p;if(t=m(r=[],t=t.substr(j+1),n),j){if(t.charAt(0)!==v)throw new SyntaxError(\"unmatched quotes in :\"+y);t=t.substr(1)}if(\")\"!==t.charAt(0))throw new SyntaxError(\"missing closing parenthesis in :\"+y+\" \"+t);t=t.substr(1)}else{for(var S=1,A=1;A>0&&S<t.length;S++)\"(\"!==t.charAt(S)||_(S)?\")\"!==t.charAt(S)||_(S)||A--:A++;if(A)throw new SyntaxError(\"parenthesis not matched\");r=t.substr(1,S-2),t=t.substr(S),y in l&&((v=r.charAt(0))===r.slice(-1)&&v in p&&(r=r.slice(1,-1)),r=f(r))}b.push({type:\"pseudo\",name:y,data:r})}else{if(!a.test(t))return b.length&&\"descendant\"===b[b.length-1].type&&b.pop(),g(e,b),t;y=w(),n&&(\"lowerCaseTags\"in n?!n.lowerCaseTags:n.xmlMode)||(y=y.toLowerCase()),b.push({type:\"tag\",name:y})}return g(e,b),t}function g(e,t){if(e.length>0&&0===t.length)throw new SyntaxError(\"empty sub-selector\");e.push(t)}},{}],336:[function(e,t,n){(function(n,a){(function(){var r,i,o,s,c;s=e(\"stream\"),c=e(\"util\"),i=e(\"string_decoder\").StringDecoder,t.exports=function(){var e,t,i,s,c,u,l;if(3===arguments.length){if(s=arguments[0],u=arguments[1],\"function\"!=typeof(e=arguments[2]))throw Error(\"Invalid callback argument: \"+JSON.stringify(e));if(\"string\"!=typeof s&&!a.isBuffer(arguments[0]))return e(Error(\"Invalid data argument: \"+JSON.stringify(s)))}else if(2===arguments.length){if(\"string\"==typeof arguments[0]||a.isBuffer(arguments[0])?s=arguments[0]:o(arguments[0])?u=arguments[0]:c=\"Invalid first argument: \"+JSON.stringify(arguments[0]),\"function\"==typeof arguments[1]?e=arguments[1]:o(arguments[1])?u?c=\"Invalid arguments: got options twice as first and second arguments\":u=arguments[1]:c=\"Invalid first argument: \"+JSON.stringify(arguments[1]),c){if(e)return e(Error(c));throw Error(c)}}else 1===arguments.length&&(\"function\"==typeof arguments[0]?e=arguments[0]:u=arguments[0]);return null==u&&(u={}),l=new r(u),null!=s&&n.nextTick((function(){return l.write(s),l.end()})),e&&(t=!1,i=u.objname?{}:[],l.on(\"readable\",(function(){var e,t;for(t=[];e=l.read();)u.objname?t.push(i[e[0]]=e[1]):t.push(i.push(e));return t})),l.on(\"error\",(function(n){return t=!0,e(n)})),l.on(\"end\",(function(){if(!t)return e(null,i)}))),l},r=function(e){var t,n,a,r,o,c,u,l,p,d,f,h,m,g,y,v,b,x,w;for(x in null==e&&(e={}),e.objectMode=!0,this.options={},e)w=e[x],this.options[x]=w;return s.Transform.call(this,this.options),null==(t=this.options).rowDelimiter&&(t.rowDelimiter=null),\"string\"==typeof this.options.rowDelimiter&&(this.options.rowDelimiter=[this.options.rowDelimiter]),null==(n=this.options).delimiter&&(n.delimiter=\",\"),void 0===this.options.quote||this.options.quote||(this.options.quote=\"\"),null==(d=this.options).quote&&(d.quote='\"'),null==(f=this.options).escape&&(f.escape='\"'),null==(h=this.options).columns&&(h.columns=null),null==(m=this.options).comment&&(m.comment=\"\"),null==(g=this.options).objname&&(g.objname=!1),null==(y=this.options).trim&&(y.trim=!1),null==(v=this.options).ltrim&&(v.ltrim=!1),null==(b=this.options).rtrim&&(b.rtrim=!1),null==(a=this.options).auto_parse&&(a.auto_parse=!1),null==(r=this.options).auto_parse_date&&(r.auto_parse_date=!1),null==(o=this.options).relax&&(o.relax=!1),null==(c=this.options).relax_column_count&&(c.relax_column_count=!1),null==(u=this.options).skip_empty_lines&&(u.skip_empty_lines=!1),null==(l=this.options).max_limit_on_data_read&&(l.max_limit_on_data_read=128e3),null==(p=this.options).skip_lines_with_empty_values&&(p.skip_lines_with_empty_values=!1),this.lines=0,this.count=0,this.skipped_line_count=0,this.empty_line_count=0,this.is_int=/^(\\-|\\+)?([1-9]+[0-9]*)$/,this.is_float=function(e){return e-parseFloat(e)+1>=0},this._={decoder:new i,quoting:!1,commenting:!1,field:null,nextChar:null,closingQuote:0,line:[],chunks:[],rawBuf:\"\",buf:\"\",rowDelimiterLength:this.options.rowDelimiter?Math.max.apply(Math,this.options.rowDelimiter.map((function(e){return e.length}))):void 0},this},c.inherits(r,s.Transform),t.exports.Parser=r,r.prototype._transform=function(e,t,n){var r;return e instanceof a&&(e=this._.decoder.write(e)),(r=this.__write(e,!1))?this.emit(\"error\",r):n()},r.prototype._flush=function(e){var t;return(t=this.__write(this._.decoder.end(),!0))?this.emit(\"error\",t):this._.quoting?void this.emit(\"error\",new Error(\"Quoted field not terminated at line \"+(this.lines+1))):this._.line.length>0&&(t=this.__push(this._.line))?e(t):e()},r.prototype.__push=function(e){var t,n,a,r,i,o,s,c,u,l;if(!this.options.skip_lines_with_empty_values||\"\"!==e.join(\"\").trim()){if(l=null,!0===this.options.columns)return this.options.columns=e,void 0;if(\"function\"==typeof this.options.columns)return t=function(e,t){try{return[null,e.call(null,t)]}catch(n){return[n]}},a=(u=t(this.options.columns,e))[0],n=u[1],a||(this.options.columns=n,void 0);if(!this._.line_length&&e.length>0&&(this._.line_length=this.options.columns?this.options.columns.length:e.length),1===e.length&&\"\"===e[0])this.empty_line_count++;else if(e.length!==this._.line_length){if(!this.options.relax_column_count)return null!=this.options.columns?Error(\"Number of columns on line \"+this.lines+\" does not match header\"):Error(\"Number of columns is inconsistent on line \"+this.lines);this.count++,this.skipped_line_count++}else this.count++;if(null!=this.options.columns){for(c={},i=o=0,s=e.length;o<s;i=++o)r=e[i],!1!==this.options.columns[i]&&(c[this.options.columns[i]]=r);l=this.options.objname?[c[this.options.objname],c]:c}else l=e;if(!(this.count<this.options.from||this.count>this.options.to))return this.options.raw?(this.push({raw:this._.rawBuf,row:l}),this._.rawBuf=\"\"):this.push(l),null}},r.prototype.__write=function(e,t){var n,a,r,i,o,s,c,u,l,p,d,f,h,m,g,y,v,b,x,w,k,_,j,S,A,E,C,T,P;for(P=this,g=function(e){return\"function\"==typeof P.is_int?P.is_int(e):P.is_int.test(e)},m=function(e){return function(t){return\"function\"==typeof e.is_float?e.is_float(t):e.is_float.test(t)}}(this),r=function(e){return function(t){var n;return e.options.auto_parse?(g(t)?t=parseInt(t):m(t)?t=parseFloat(t):e.options.auto_parse_date&&(n=Date.parse(t),isNaN(n)||(t=new Date(n))),t):t}}(this),v=this.options.trim||this.options.ltrim,C=this.options.trim||this.options.rtrim,e=this._.buf+e,y=e.length,c=0,0===this.lines&&65279===e.charCodeAt(0)&&c++;c<y&&(t||(A=e.substr(c,y-c),!(!this.options.rowDelimiter&&c+3>y||!this._.commenting&&y-c<this.options.comment.length&&this.options.comment.substr(0,y-c)===A||this.options.rowDelimiter&&y-c<this._.rowDelimiterLength&&this.options.rowDelimiter.some((function(e){return e.substr(0,y-c)===A}))||this.options.rowDelimiter&&this._.quoting&&y-c<this.options.quote.length+this._.rowDelimiterLength&&this.options.rowDelimiter.some(function(e){return function(t){return(e.options.quote+t).substr(0,y-c)===A}}(this))||y-c<=this.options.delimiter.length&&this.options.delimiter.substr(0,y-c)===A||y-c<=this.options.escape.length&&this.options.escape.substr(0,y-c)===A)));)if(i=this._.nextChar?this._.nextChar:e.charAt(c),this._.nextChar=y>c+1?e.charAt(c+1):\"\",this.options.raw&&(this._.rawBuf+=i),null==this.options.rowDelimiter&&(b=c,E=null,this._.quoting||\"\\n\"!==i&&\"\\r\"!==i?!this._.quoting||i!==this.options.quote||\"\\n\"!==(x=this._.nextChar)&&\"\\r\"!==x||(E=this._.nextChar,b+=2,this.raw&&(rawBuf+=this._.nextChar)):(E=i,b+=1),E&&(\"\\r\"===E&&\"\\n\"===e.charAt(b)&&(E+=\"\\n\"),this.options.rowDelimiter=[E],this._.rowDelimiterLength=E.length)),this._.commenting||i!==this.options.escape||(s=this.options.escape===this.options.quote,l=this._.nextChar===this.options.escape,d=this._.nextChar===this.options.quote,s&&null==this._.field&&!this._.quoting||!l&&!d)){if(!this._.commenting&&i===this.options.quote)if(this._.quoting){if(a=this.options.rowDelimiter&&this.options.rowDelimiter.some((function(t){return e.substr(c+1,t.length)===t})),n=e.substr(c+1,this.options.delimiter.length)===this.options.delimiter,p=this._.nextChar===this.options.comment,!this._.nextChar||a||n||p){this._.quoting=!1,this._.closingQuote=this.options.quote.length,c++,t&&c===y&&(this._.line.push(r(this._.field||\"\")),this._.field=null);continue}if(!this.options.relax)return Error(\"Invalid closing quote at line \"+(this.lines+1)+\"; found \"+JSON.stringify(this._.nextChar)+\" instead of delimiter \"+JSON.stringify(this.options.delimiter));this._.quoting=!1,this._.field&&(this._.field=\"\"+this.options.quote+this._.field)}else{if(!this._.field){this._.quoting=!0,c++;continue}if(null!=this._.field&&!this.options.relax)return Error(\"Invalid opening quote at line \"+(this.lines+1))}if(((f=this.options.rowDelimiter&&this.options.rowDelimiter.some((function(t){return e.substr(c,t.length)===t})))||t&&c===y-1)&&this.lines++,T=!1,this._.commenting||this._.quoting||!this.options.comment||e.substr(c,this.options.comment.length)!==this.options.comment?this._.commenting&&f&&(T=!0,this._.commenting=!1):this._.commenting=!0,u=e.substr(c,this.options.delimiter.length)===this.options.delimiter,this._.commenting||this._.quoting||!u&&!f)this._.commenting||this._.quoting||\" \"!==i&&\"\\t\"!==i?(this._.commenting||(null==this._.field&&(this._.field=\"\"),this._.field+=i),c++):(null==this._.field&&(this._.field=\"\"),v&&!this._.field||(this._.field+=i),c++);else{if(f&&(h=this.options.rowDelimiter.filter((function(t){return e.substr(c,t.length)===t}))[0].length),f&&0===this._.line.length&&null==this._.field&&(T||this.options.skip_empty_lines)){c+=h,this._.nextChar=e.charAt(c);continue}if(C&&(this._.closingQuote||(this._.field=null!=(w=this._.field)?w.trimRight():void 0)),this._.line.push(r(this._.field||\"\")),this._.closingQuote=0,this._.field=null,u&&(c+=this.options.delimiter.length,this._.nextChar=e.charAt(c),t&&!this._.nextChar&&(f=!0,this._.line.push(\"\"))),f){if(o=this.__push(this._.line))return o;this._.line=[],c+=h,this._.nextChar=e.charAt(c);continue}}if(!this._.commenting&&(null!=(k=this._.field)?k.length:void 0)>this.options.max_limit_on_data_read)return Error(\"Field exceeds max_limit_on_data_read setting (\"+this.options.max_limit_on_data_read+\") \"+JSON.stringify(this.options.delimiter));if(!this._.commenting&&(null!=(_=this._.line)?_.length:void 0)>this.options.max_limit_on_data_read)return Error(\"Row delimiter not found in the file \"+JSON.stringify(this.options.rowDelimiter))}else c++,i=this._.nextChar,this._.nextChar=e.charAt(c+1),null==this._.field&&(this._.field=\"\"),this._.field+=i,this.options.raw&&(this._.rawBuf+=i),c++;if(t){if(null!=this._.field&&(C&&(this._.closingQuote||(this._.field=null!=(j=this._.field)?j.trimRight():void 0)),this._.line.push(r(this._.field||\"\")),this._.field=null),(null!=(S=this._.field)?S.length:void 0)>this.options.max_limit_on_data_read)return Error(\"Delimiter not found in the file \"+JSON.stringify(this.options.delimiter));if(0===y&&this.lines++,this._.line.length>this.options.max_limit_on_data_read)return Error(\"Row delimiter not found in the file \"+JSON.stringify(this.options.rowDelimiter))}return this._.buf=e.substr(c),null},o=function(e){var t;return t=e,\"object\"==typeof e&&null!==e&&!Array.isArray(e)&&function(){for(;null!==Object.getPrototypeOf(t=Object.getPrototypeOf(t)););return Object.getPrototypeOf(e===t)}()}}).call(this)}).call(this,e(\"_process\"),e(\"buffer\").Buffer)},{_process:\"_process\",buffer:\"buffer\",stream:\"stream\",string_decoder:\"string_decoder\",util:\"util\"}],337:[function(e,t,n){\"use strict\";var a=e(\"object-keys\"),r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol(\"foo\"),i=Object.prototype.toString,o=Array.prototype.concat,s=Object.defineProperty,c=s&&function(){var e={};try{for(var t in s(e,\"x\",{enumerable:!1,value:e}),e)return!1;return e.x===e}catch(n){return!1}}(),u=function(e,t,n,a){var r;(!(t in e)||\"function\"==typeof(r=a)&&\"[object Function]\"===i.call(r)&&a())&&(c?s(e,t,{configurable:!0,enumerable:!1,value:n,writable:!0}):e[t]=n)},l=function(e,t){var n=arguments.length>2?arguments[2]:{},i=a(t);r&&(i=o.call(i,Object.getOwnPropertySymbols(t)));for(var s=0;s<i.length;s+=1)u(e,i[s],t[i[s]],n[i[s]])};l.supportsDescriptors=!!c,t.exports=l},{\"object-keys\":425}],338:[function(e,t,n){var a=e(\"domelementtype\"),r=e(\"entities\"),i={__proto__:null,style:!0,script:!0,xmp:!0,iframe:!0,noembed:!0,noframes:!0,plaintext:!0,noscript:!0};var o={__proto__:null,area:!0,base:!0,basefont:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,isindex:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},s=t.exports=function(e,t){Array.isArray(e)||e.cheerio||(e=[e]),t=t||{};for(var n=\"\",r=0;r<e.length;r++){var i=e[r];\"root\"===i.type?n+=s(i.children,t):a.isTag(i)?n+=c(i,t):i.type===a.Directive?n+=u(i):i.type===a.Comment?n+=d(i):i.type===a.CDATA?n+=p(i):n+=l(i,t)}return n};function c(e,t){\"svg\"===e.name&&(t={decodeEntities:t.decodeEntities,xmlMode:!0});var n=\"<\"+e.name,a=function(e,t){if(e){var n,a=\"\";for(var i in e)a&&(a+=\" \"),a+=i,(null!==(n=e[i])&&\"\"!==n||t.xmlMode)&&(a+='=\"'+(t.decodeEntities?r.encodeXML(n):n)+'\"');return a}}(e.attribs,t);return a&&(n+=\" \"+a),!t.xmlMode||e.children&&0!==e.children.length?(n+=\">\",e.children&&(n+=s(e.children,t)),o[e.name]&&!t.xmlMode||(n+=\"</\"+e.name+\">\")):n+=\"/>\",n}function u(e){return\"<\"+e.data+\">\"}function l(e,t){var n=e.data||\"\";return!t.decodeEntities||e.parent&&e.parent.name in i||(n=r.encodeXML(n)),n}function p(e){return\"<![CDATA[\"+e.children[0].data+\"]]>\"}function d(e){return\"\\x3c!--\"+e.data+\"--\\x3e\"}},{domelementtype:339,entities:350}],339:[function(e,t,n){t.exports={Text:\"text\",Directive:\"directive\",Comment:\"comment\",Script:\"script\",Style:\"style\",Tag:\"tag\",CDATA:\"cdata\",Doctype:\"doctype\",isTag:function(e){return\"tag\"===e.type||\"script\"===e.type||\"style\"===e.type}}},{}],340:[function(e,t,n){var a=e(\"domelementtype\"),r=/\\s+/g,i=e(\"./lib/node\"),o=e(\"./lib/element\");function s(e,t,n){\"object\"==typeof e?(n=t,t=e,e=null):\"function\"==typeof t&&(n=t,t=c),this._callback=e,this._options=t||c,this._elementCB=n,this.dom=[],this._done=!1,this._tagStack=[],this._parser=this._parser||null}var c={normalizeWhitespace:!1,withStartIndices:!1,withEndIndices:!1};s.prototype.onparserinit=function(e){this._parser=e},s.prototype.onreset=function(){s.call(this,this._callback,this._options,this._elementCB)},s.prototype.onend=function(){this._done||(this._done=!0,this._parser=null,this._handleCallback(null))},s.prototype._handleCallback=s.prototype.onerror=function(e){if(\"function\"==typeof this._callback)this._callback(e,this.dom);else if(e)throw e},s.prototype.onclosetag=function(){var e=this._tagStack.pop();this._options.withEndIndices&&e&&(e.endIndex=this._parser.endIndex),this._elementCB&&this._elementCB(e)},s.prototype._createDomElement=function(e){if(!this._options.withDomLvl1)return e;var t;for(var n in t=\"tag\"===e.type?Object.create(o):Object.create(i),e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},s.prototype._addDomElement=function(e){var t=this._tagStack[this._tagStack.length-1],n=t?t.children:this.dom,a=n[n.length-1];e.next=null,this._options.withStartIndices&&(e.startIndex=this._parser.startIndex),this._options.withEndIndices&&(e.endIndex=this._parser.endIndex),a?(e.prev=a,a.next=e):e.prev=null,n.push(e),e.parent=t||null},s.prototype.onopentag=function(e,t){var n={type:\"script\"===e?a.Script:\"style\"===e?a.Style:a.Tag,name:e,attribs:t,children:[]},r=this._createDomElement(n);this._addDomElement(r),this._tagStack.push(r)},s.prototype.ontext=function(e){var t,n=this._options.normalizeWhitespace||this._options.ignoreWhitespace;if(!this._tagStack.length&&this.dom.length&&(t=this.dom[this.dom.length-1]).type===a.Text)n?t.data=(t.data+e).replace(r,\" \"):t.data+=e;else if(this._tagStack.length&&(t=this._tagStack[this._tagStack.length-1])&&(t=t.children[t.children.length-1])&&t.type===a.Text)n?t.data=(t.data+e).replace(r,\" \"):t.data+=e;else{n&&(e=e.replace(r,\" \"));var i=this._createDomElement({data:e,type:a.Text});this._addDomElement(i)}},s.prototype.oncomment=function(e){var t=this._tagStack[this._tagStack.length-1];if(t&&t.type===a.Comment)t.data+=e;else{var n={data:e,type:a.Comment},r=this._createDomElement(n);this._addDomElement(r),this._tagStack.push(r)}},s.prototype.oncdatastart=function(){var e={children:[{data:\"\",type:a.Text}],type:a.CDATA},t=this._createDomElement(e);this._addDomElement(t),this._tagStack.push(t)},s.prototype.oncommentend=s.prototype.oncdataend=function(){this._tagStack.pop()},s.prototype.onprocessinginstruction=function(e,t){var n=this._createDomElement({name:e,data:t,type:a.Directive});this._addDomElement(n)},t.exports=s},{\"./lib/element\":341,\"./lib/node\":342,domelementtype:339}],341:[function(e,t,n){var a=e(\"./node\"),r=t.exports=Object.create(a),i={tagName:\"name\"};Object.keys(i).forEach((function(e){var t=i[e];Object.defineProperty(r,e,{get:function(){return this[t]||null},set:function(e){return this[t]=e,e}})}))},{\"./node\":342}],342:[function(e,t,n){var a=t.exports={get firstChild(){var e=this.children;return e&&e[0]||null},get lastChild(){var e=this.children;return e&&e[e.length-1]||null},get nodeType(){return i[this.type]||i.element}},r={tagName:\"name\",childNodes:\"children\",parentNode:\"parent\",previousSibling:\"prev\",nextSibling:\"next\",nodeValue:\"data\"},i={element:1,text:3,cdata:4,comment:8};Object.keys(r).forEach((function(e){var t=r[e];Object.defineProperty(a,e,{get:function(){return this[t]||null},set:function(e){return this[t]=e,e}})}))},{}],343:[function(e,t,n){var a=t.exports;[e(\"./lib/stringify\"),e(\"./lib/traversal\"),e(\"./lib/manipulation\"),e(\"./lib/querying\"),e(\"./lib/legacy\"),e(\"./lib/helpers\")].forEach((function(e){Object.keys(e).forEach((function(t){a[t]=e[t].bind(a)}))}))},{\"./lib/helpers\":344,\"./lib/legacy\":345,\"./lib/manipulation\":346,\"./lib/querying\":347,\"./lib/stringify\":348,\"./lib/traversal\":349}],344:[function(e,t,n){n.removeSubsets=function(e){for(var t,n,a,r=e.length;--r>-1;){for(t=n=e[r],e[r]=null,a=!0;n;){if(e.indexOf(n)>-1){a=!1,e.splice(r,1);break}n=n.parent}a&&(e[r]=t)}return e};var a=1,r=2,i=4,o=8,s=16,c=n.compareDocumentPosition=function(e,t){var n,c,u,l,p,d,f=[],h=[];if(e===t)return 0;for(n=e;n;)f.unshift(n),n=n.parent;for(n=t;n;)h.unshift(n),n=n.parent;for(d=0;f[d]===h[d];)d++;return 0===d?a:(u=(c=f[d-1]).children,l=f[d],p=h[d],u.indexOf(l)>u.indexOf(p)?c===t?i|s:i:c===e?r|o:r)};n.uniqueSort=function(e){var t,n,a=e.length;for(e=e.slice();--a>-1;)t=e[a],(n=e.indexOf(t))>-1&&n<a&&e.splice(a,1);return e.sort((function(e,t){var n=c(e,t);return n&r?-1:n&i?1:0})),e}},{}],345:[function(e,t,n){var a=e(\"domelementtype\"),r=n.isTag=a.isTag;n.testElement=function(e,t){for(var n in e)if(e.hasOwnProperty(n)){if(\"tag_name\"===n){if(!r(t)||!e.tag_name(t.name))return!1}else if(\"tag_type\"===n){if(!e.tag_type(t.type))return!1}else if(\"tag_contains\"===n){if(r(t)||!e.tag_contains(t.data))return!1}else if(!t.attribs||!e[n](t.attribs[n]))return!1}else;return!0};var i={tag_name:function(e){return\"function\"==typeof e?function(t){return r(t)&&e(t.name)}:\"*\"===e?r:function(t){return r(t)&&t.name===e}},tag_type:function(e){return\"function\"==typeof e?function(t){return e(t.type)}:function(t){return t.type===e}},tag_contains:function(e){return\"function\"==typeof e?function(t){return!r(t)&&e(t.data)}:function(t){return!r(t)&&t.data===e}}};function o(e,t){return\"function\"==typeof t?function(n){return n.attribs&&t(n.attribs[e])}:function(n){return n.attribs&&n.attribs[e]===t}}function s(e,t){return function(n){return e(n)||t(n)}}n.getElements=function(e,t,n,a){var r=Object.keys(e).map((function(t){var n=e[t];return t in i?i[t](n):o(t,n)}));return 0===r.length?[]:this.filter(r.reduce(s),t,n,a)},n.getElementById=function(e,t,n){return Array.isArray(t)||(t=[t]),this.findOne(o(\"id\",e),t,!1!==n)},n.getElementsByTagName=function(e,t,n,a){return this.filter(i.tag_name(e),t,n,a)},n.getElementsByTagType=function(e,t,n,a){return this.filter(i.tag_type(e),t,n,a)}},{domelementtype:339}],346:[function(e,t,n){n.removeElement=function(e){if(e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.parent){var t=e.parent.children;t.splice(t.lastIndexOf(e),1)}},n.replaceElement=function(e,t){var n=t.prev=e.prev;n&&(n.next=t);var a=t.next=e.next;a&&(a.prev=t);var r=t.parent=e.parent;if(r){var i=r.children;i[i.lastIndexOf(e)]=t}},n.appendChild=function(e,t){if(t.parent=e,1!==e.children.push(t)){var n=e.children[e.children.length-2];n.next=t,t.prev=n,t.next=null}},n.append=function(e,t){var n=e.parent,a=e.next;if(t.next=a,t.prev=e,e.next=t,t.parent=n,a){if(a.prev=t,n){var r=n.children;r.splice(r.lastIndexOf(a),0,t)}}else n&&n.children.push(t)},n.prepend=function(e,t){var n=e.parent;if(n){var a=n.children;a.splice(a.lastIndexOf(e),0,t)}e.prev&&(e.prev.next=t),t.parent=n,t.prev=e.prev,t.next=e,e.prev=t}},{}],347:[function(e,t,n){var a=e(\"domelementtype\").isTag;function r(e,t,n,a){for(var i,o=[],s=0,c=t.length;s<c&&!(e(t[s])&&(o.push(t[s]),--a<=0))&&(i=t[s].children,!(n&&i&&i.length>0&&(i=r(e,i,n,a),o=o.concat(i),(a-=i.length)<=0)));s++);return o}t.exports={filter:function(e,t,n,a){Array.isArray(t)||(t=[t]);\"number\"==typeof a&&isFinite(a)||(a=1/0);return r(e,t,!1!==n,a)},find:r,findOneChild:function(e,t){for(var n=0,a=t.length;n<a;n++)if(e(t[n]))return t[n];return null},findOne:function e(t,n){for(var r=null,i=0,o=n.length;i<o&&!r;i++)a(n[i])&&(t(n[i])?r=n[i]:n[i].children.length>0&&(r=e(t,n[i].children)));return r},existsOne:function e(t,n){for(var r=0,i=n.length;r<i;r++)if(a(n[r])&&(t(n[r])||n[r].children.length>0&&e(t,n[r].children)))return!0;return!1},findAll:function e(t,n){for(var r=[],i=0,o=n.length;i<o;i++)a(n[i])&&(t(n[i])&&r.push(n[i]),n[i].children.length>0&&(r=r.concat(e(t,n[i].children))));return r}}},{domelementtype:339}],348:[function(e,t,n){var a=e(\"domelementtype\"),r=e(\"dom-serializer\"),i=a.isTag;t.exports={getInnerHTML:function(e,t){return e.children?e.children.map((function(e){return r(e,t)})).join(\"\"):\"\"},getOuterHTML:r,getText:function e(t){return Array.isArray(t)?t.map(e).join(\"\"):i(t)||t.type===a.CDATA?e(t.children):t.type===a.Text?t.data:\"\"}}},{\"dom-serializer\":338,domelementtype:339}],349:[function(e,t,n){var a=n.getChildren=function(e){return e.children},r=n.getParent=function(e){return e.parent};n.getSiblings=function(e){var t=r(e);return t?a(t):[e]},n.getAttributeValue=function(e,t){return e.attribs&&e.attribs[t]},n.hasAttrib=function(e,t){return!!e.attribs&&hasOwnProperty.call(e.attribs,t)},n.getName=function(e){return e.name}},{}],350:[function(e,t,n){var a=e(\"./lib/encode.js\"),r=e(\"./lib/decode.js\");n.decode=function(e,t){return(!t||t<=0?r.XML:r.HTML)(e)},n.decodeStrict=function(e,t){return(!t||t<=0?r.XML:r.HTMLStrict)(e)},n.encode=function(e,t){return(!t||t<=0?a.XML:a.HTML)(e)},n.encodeXML=a.XML,n.encodeHTML4=n.encodeHTML5=n.encodeHTML=a.HTML,n.decodeXML=n.decodeXMLStrict=r.XML,n.decodeHTML4=n.decodeHTML5=n.decodeHTML=r.HTML,n.decodeHTML4Strict=n.decodeHTML5Strict=n.decodeHTMLStrict=r.HTMLStrict,n.escape=a.escape},{\"./lib/decode.js\":351,\"./lib/encode.js\":353}],351:[function(e,t,n){var a=e(\"../maps/entities.json\"),r=e(\"../maps/legacy.json\"),i=e(\"../maps/xml.json\"),o=e(\"./decode_codepoint.js\"),s=u(i),c=u(a);function u(e){var t=Object.keys(e).join(\"|\"),n=d(e),a=new RegExp(\"&(?:\"+(t+=\"|#[xX][\\\\da-fA-F]+|#\\\\d+\")+\");\",\"g\");return function(e){return String(e).replace(a,n)}}var l=function(){for(var e=Object.keys(r).sort(p),t=Object.keys(a).sort(p),n=0,i=0;n<t.length;n++)e[i]===t[n]?(t[n]+=\";?\",i++):t[n]+=\";\";var o=new RegExp(\"&(?:\"+t.join(\"|\")+\"|#[xX][\\\\da-fA-F]+;?|#\\\\d+;?)\",\"g\"),s=d(a);function c(e){return\";\"!==e.substr(-1)&&(e+=\";\"),s(e)}return function(e){return String(e).replace(o,c)}}();function p(e,t){return e<t?1:-1}function d(e){return function(t){return\"#\"===t.charAt(1)?\"X\"===t.charAt(2)||\"x\"===t.charAt(2)?o(parseInt(t.substr(3),16)):o(parseInt(t.substr(2),10)):e[t.slice(1,-1)]}}t.exports={XML:s,HTML:l,HTMLStrict:c}},{\"../maps/entities.json\":355,\"../maps/legacy.json\":356,\"../maps/xml.json\":357,\"./decode_codepoint.js\":352}],352:[function(e,t,n){var a=e(\"../maps/decode.json\");t.exports=function(e){if(e>=55296&&e<=57343||e>1114111)return\"�\";e in a&&(e=a[e]);var t=\"\";e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e);return t+=String.fromCharCode(e)}},{\"../maps/decode.json\":354}],353:[function(e,t,n){var a=s(e(\"../maps/xml.json\")),r=c(a);n.XML=f(a,r);var i=s(e(\"../maps/entities.json\")),o=c(i);function s(e){return Object.keys(e).sort().reduce((function(t,n){return t[e[n]]=\"&\"+n+\";\",t}),{})}function c(e){var t=[],n=[];return Object.keys(e).forEach((function(e){1===e.length?t.push(\"\\\\\"+e):n.push(e)})),n.unshift(\"[\"+t.join(\"\")+\"]\"),new RegExp(n.join(\"|\"),\"g\")}n.HTML=f(i,o);var u=/[^\\0-\\x7F]/g,l=/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;function p(e){return\"&#x\"+e.charCodeAt(0).toString(16).toUpperCase()+\";\"}function d(e){return\"&#x\"+(1024*(e.charCodeAt(0)-55296)+e.charCodeAt(1)-56320+65536).toString(16).toUpperCase()+\";\"}function f(e,t){function n(t){return e[t]}return function(e){return e.replace(t,n).replace(l,d).replace(u,p)}}var h=c(a);n.escape=function(e){return e.replace(h,p).replace(l,d).replace(u,p)}},{\"../maps/entities.json\":355,\"../maps/xml.json\":357}],354:[function(e,t,n){t.exports={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},{}],355:[function(e,t,n){t.exports={Aacute:\"Á\",aacute:\"á\",Abreve:\"Ă\",abreve:\"ă\",ac:\"∾\",acd:\"∿\",acE:\"∾̳\",Acirc:\"Â\",acirc:\"â\",acute:\"´\",Acy:\"А\",acy:\"а\",AElig:\"Æ\",aelig:\"æ\",af:\"⁡\",Afr:\"𝔄\",afr:\"𝔞\",Agrave:\"À\",agrave:\"à\",alefsym:\"ℵ\",aleph:\"ℵ\",Alpha:\"Α\",alpha:\"α\",Amacr:\"Ā\",amacr:\"ā\",amalg:\"⨿\",amp:\"&\",AMP:\"&\",andand:\"⩕\",And:\"⩓\",and:\"∧\",andd:\"⩜\",andslope:\"⩘\",andv:\"⩚\",ang:\"∠\",ange:\"⦤\",angle:\"∠\",angmsdaa:\"⦨\",angmsdab:\"⦩\",angmsdac:\"⦪\",angmsdad:\"⦫\",angmsdae:\"⦬\",angmsdaf:\"⦭\",angmsdag:\"⦮\",angmsdah:\"⦯\",angmsd:\"∡\",angrt:\"∟\",angrtvb:\"⊾\",angrtvbd:\"⦝\",angsph:\"∢\",angst:\"Å\",angzarr:\"⍼\",Aogon:\"Ą\",aogon:\"ą\",Aopf:\"𝔸\",aopf:\"𝕒\",apacir:\"⩯\",ap:\"≈\",apE:\"⩰\",ape:\"≊\",apid:\"≋\",apos:\"'\",ApplyFunction:\"⁡\",approx:\"≈\",approxeq:\"≊\",Aring:\"Å\",aring:\"å\",Ascr:\"𝒜\",ascr:\"𝒶\",Assign:\"≔\",ast:\"*\",asymp:\"≈\",asympeq:\"≍\",Atilde:\"Ã\",atilde:\"ã\",Auml:\"Ä\",auml:\"ä\",awconint:\"∳\",awint:\"⨑\",backcong:\"≌\",backepsilon:\"϶\",backprime:\"‵\",backsim:\"∽\",backsimeq:\"⋍\",Backslash:\"∖\",Barv:\"⫧\",barvee:\"⊽\",barwed:\"⌅\",Barwed:\"⌆\",barwedge:\"⌅\",bbrk:\"⎵\",bbrktbrk:\"⎶\",bcong:\"≌\",Bcy:\"Б\",bcy:\"б\",bdquo:\"„\",becaus:\"∵\",because:\"∵\",Because:\"∵\",bemptyv:\"⦰\",bepsi:\"϶\",bernou:\"ℬ\",Bernoullis:\"ℬ\",Beta:\"Β\",beta:\"β\",beth:\"ℶ\",between:\"≬\",Bfr:\"𝔅\",bfr:\"𝔟\",bigcap:\"⋂\",bigcirc:\"◯\",bigcup:\"⋃\",bigodot:\"⨀\",bigoplus:\"⨁\",bigotimes:\"⨂\",bigsqcup:\"⨆\",bigstar:\"★\",bigtriangledown:\"▽\",bigtriangleup:\"△\",biguplus:\"⨄\",bigvee:\"⋁\",bigwedge:\"⋀\",bkarow:\"⤍\",blacklozenge:\"⧫\",blacksquare:\"▪\",blacktriangle:\"▴\",blacktriangledown:\"▾\",blacktriangleleft:\"◂\",blacktriangleright:\"▸\",blank:\"␣\",blk12:\"▒\",blk14:\"░\",blk34:\"▓\",block:\"█\",bne:\"=⃥\",bnequiv:\"≡⃥\",bNot:\"⫭\",bnot:\"⌐\",Bopf:\"𝔹\",bopf:\"𝕓\",bot:\"⊥\",bottom:\"⊥\",bowtie:\"⋈\",boxbox:\"⧉\",boxdl:\"┐\",boxdL:\"╕\",boxDl:\"╖\",boxDL:\"╗\",boxdr:\"┌\",boxdR:\"╒\",boxDr:\"╓\",boxDR:\"╔\",boxh:\"─\",boxH:\"═\",boxhd:\"┬\",boxHd:\"╤\",boxhD:\"╥\",boxHD:\"╦\",boxhu:\"┴\",boxHu:\"╧\",boxhU:\"╨\",boxHU:\"╩\",boxminus:\"⊟\",boxplus:\"⊞\",boxtimes:\"⊠\",boxul:\"┘\",boxuL:\"╛\",boxUl:\"╜\",boxUL:\"╝\",boxur:\"└\",boxuR:\"╘\",boxUr:\"╙\",boxUR:\"╚\",boxv:\"│\",boxV:\"║\",boxvh:\"┼\",boxvH:\"╪\",boxVh:\"╫\",boxVH:\"╬\",boxvl:\"┤\",boxvL:\"╡\",boxVl:\"╢\",boxVL:\"╣\",boxvr:\"├\",boxvR:\"╞\",boxVr:\"╟\",boxVR:\"╠\",bprime:\"‵\",breve:\"˘\",Breve:\"˘\",brvbar:\"¦\",bscr:\"𝒷\",Bscr:\"ℬ\",bsemi:\"⁏\",bsim:\"∽\",bsime:\"⋍\",bsolb:\"⧅\",bsol:\"\\\\\",bsolhsub:\"⟈\",bull:\"•\",bullet:\"•\",bump:\"≎\",bumpE:\"⪮\",bumpe:\"≏\",Bumpeq:\"≎\",bumpeq:\"≏\",Cacute:\"Ć\",cacute:\"ć\",capand:\"⩄\",capbrcup:\"⩉\",capcap:\"⩋\",cap:\"∩\",Cap:\"⋒\",capcup:\"⩇\",capdot:\"⩀\",CapitalDifferentialD:\"ⅅ\",caps:\"∩︀\",caret:\"⁁\",caron:\"ˇ\",Cayleys:\"ℭ\",ccaps:\"⩍\",Ccaron:\"Č\",ccaron:\"č\",Ccedil:\"Ç\",ccedil:\"ç\",Ccirc:\"Ĉ\",ccirc:\"ĉ\",Cconint:\"∰\",ccups:\"⩌\",ccupssm:\"⩐\",Cdot:\"Ċ\",cdot:\"ċ\",cedil:\"¸\",Cedilla:\"¸\",cemptyv:\"⦲\",cent:\"¢\",centerdot:\"·\",CenterDot:\"·\",cfr:\"𝔠\",Cfr:\"ℭ\",CHcy:\"Ч\",chcy:\"ч\",check:\"✓\",checkmark:\"✓\",Chi:\"Χ\",chi:\"χ\",circ:\"ˆ\",circeq:\"≗\",circlearrowleft:\"↺\",circlearrowright:\"↻\",circledast:\"⊛\",circledcirc:\"⊚\",circleddash:\"⊝\",CircleDot:\"⊙\",circledR:\"®\",circledS:\"Ⓢ\",CircleMinus:\"⊖\",CirclePlus:\"⊕\",CircleTimes:\"⊗\",cir:\"○\",cirE:\"⧃\",cire:\"≗\",cirfnint:\"⨐\",cirmid:\"⫯\",cirscir:\"⧂\",ClockwiseContourIntegral:\"∲\",CloseCurlyDoubleQuote:\"”\",CloseCurlyQuote:\"’\",clubs:\"♣\",clubsuit:\"♣\",colon:\":\",Colon:\"∷\",Colone:\"⩴\",colone:\"≔\",coloneq:\"≔\",comma:\",\",commat:\"@\",comp:\"∁\",compfn:\"∘\",complement:\"∁\",complexes:\"ℂ\",cong:\"≅\",congdot:\"⩭\",Congruent:\"≡\",conint:\"∮\",Conint:\"∯\",ContourIntegral:\"∮\",copf:\"𝕔\",Copf:\"ℂ\",coprod:\"∐\",Coproduct:\"∐\",copy:\"©\",COPY:\"©\",copysr:\"℗\",CounterClockwiseContourIntegral:\"∳\",crarr:\"↵\",cross:\"✗\",Cross:\"⨯\",Cscr:\"𝒞\",cscr:\"𝒸\",csub:\"⫏\",csube:\"⫑\",csup:\"⫐\",csupe:\"⫒\",ctdot:\"⋯\",cudarrl:\"⤸\",cudarrr:\"⤵\",cuepr:\"⋞\",cuesc:\"⋟\",cularr:\"↶\",cularrp:\"⤽\",cupbrcap:\"⩈\",cupcap:\"⩆\",CupCap:\"≍\",cup:\"∪\",Cup:\"⋓\",cupcup:\"⩊\",cupdot:\"⊍\",cupor:\"⩅\",cups:\"∪︀\",curarr:\"↷\",curarrm:\"⤼\",curlyeqprec:\"⋞\",curlyeqsucc:\"⋟\",curlyvee:\"⋎\",curlywedge:\"⋏\",curren:\"¤\",curvearrowleft:\"↶\",curvearrowright:\"↷\",cuvee:\"⋎\",cuwed:\"⋏\",cwconint:\"∲\",cwint:\"∱\",cylcty:\"⌭\",dagger:\"†\",Dagger:\"‡\",daleth:\"ℸ\",darr:\"↓\",Darr:\"↡\",dArr:\"⇓\",dash:\"‐\",Dashv:\"⫤\",dashv:\"⊣\",dbkarow:\"⤏\",dblac:\"˝\",Dcaron:\"Ď\",dcaron:\"ď\",Dcy:\"Д\",dcy:\"д\",ddagger:\"‡\",ddarr:\"⇊\",DD:\"ⅅ\",dd:\"ⅆ\",DDotrahd:\"⤑\",ddotseq:\"⩷\",deg:\"°\",Del:\"∇\",Delta:\"Δ\",delta:\"δ\",demptyv:\"⦱\",dfisht:\"⥿\",Dfr:\"𝔇\",dfr:\"𝔡\",dHar:\"⥥\",dharl:\"⇃\",dharr:\"⇂\",DiacriticalAcute:\"´\",DiacriticalDot:\"˙\",DiacriticalDoubleAcute:\"˝\",DiacriticalGrave:\"`\",DiacriticalTilde:\"˜\",diam:\"⋄\",diamond:\"⋄\",Diamond:\"⋄\",diamondsuit:\"♦\",diams:\"♦\",die:\"¨\",DifferentialD:\"ⅆ\",digamma:\"ϝ\",disin:\"⋲\",div:\"÷\",divide:\"÷\",divideontimes:\"⋇\",divonx:\"⋇\",DJcy:\"Ђ\",djcy:\"ђ\",dlcorn:\"⌞\",dlcrop:\"⌍\",dollar:\"$\",Dopf:\"𝔻\",dopf:\"𝕕\",Dot:\"¨\",dot:\"˙\",DotDot:\"⃜\",doteq:\"≐\",doteqdot:\"≑\",DotEqual:\"≐\",dotminus:\"∸\",dotplus:\"∔\",dotsquare:\"⊡\",doublebarwedge:\"⌆\",DoubleContourIntegral:\"∯\",DoubleDot:\"¨\",DoubleDownArrow:\"⇓\",DoubleLeftArrow:\"⇐\",DoubleLeftRightArrow:\"⇔\",DoubleLeftTee:\"⫤\",DoubleLongLeftArrow:\"⟸\",DoubleLongLeftRightArrow:\"⟺\",DoubleLongRightArrow:\"⟹\",DoubleRightArrow:\"⇒\",DoubleRightTee:\"⊨\",DoubleUpArrow:\"⇑\",DoubleUpDownArrow:\"⇕\",DoubleVerticalBar:\"∥\",DownArrowBar:\"⤓\",downarrow:\"↓\",DownArrow:\"↓\",Downarrow:\"⇓\",DownArrowUpArrow:\"⇵\",DownBreve:\"̑\",downdownarrows:\"⇊\",downharpoonleft:\"⇃\",downharpoonright:\"⇂\",DownLeftRightVector:\"⥐\",DownLeftTeeVector:\"⥞\",DownLeftVectorBar:\"⥖\",DownLeftVector:\"↽\",DownRightTeeVector:\"⥟\",DownRightVectorBar:\"⥗\",DownRightVector:\"⇁\",DownTeeArrow:\"↧\",DownTee:\"⊤\",drbkarow:\"⤐\",drcorn:\"⌟\",drcrop:\"⌌\",Dscr:\"𝒟\",dscr:\"𝒹\",DScy:\"Ѕ\",dscy:\"ѕ\",dsol:\"⧶\",Dstrok:\"Đ\",dstrok:\"đ\",dtdot:\"⋱\",dtri:\"▿\",dtrif:\"▾\",duarr:\"⇵\",duhar:\"⥯\",dwangle:\"⦦\",DZcy:\"Џ\",dzcy:\"џ\",dzigrarr:\"⟿\",Eacute:\"É\",eacute:\"é\",easter:\"⩮\",Ecaron:\"Ě\",ecaron:\"ě\",Ecirc:\"Ê\",ecirc:\"ê\",ecir:\"≖\",ecolon:\"≕\",Ecy:\"Э\",ecy:\"э\",eDDot:\"⩷\",Edot:\"Ė\",edot:\"ė\",eDot:\"≑\",ee:\"ⅇ\",efDot:\"≒\",Efr:\"𝔈\",efr:\"𝔢\",eg:\"⪚\",Egrave:\"È\",egrave:\"è\",egs:\"⪖\",egsdot:\"⪘\",el:\"⪙\",Element:\"∈\",elinters:\"⏧\",ell:\"ℓ\",els:\"⪕\",elsdot:\"⪗\",Emacr:\"Ē\",emacr:\"ē\",empty:\"∅\",emptyset:\"∅\",EmptySmallSquare:\"◻\",emptyv:\"∅\",EmptyVerySmallSquare:\"▫\",emsp13:\" \",emsp14:\" \",emsp:\" \",ENG:\"Ŋ\",eng:\"ŋ\",ensp:\" \",Eogon:\"Ę\",eogon:\"ę\",Eopf:\"𝔼\",eopf:\"𝕖\",epar:\"⋕\",eparsl:\"⧣\",eplus:\"⩱\",epsi:\"ε\",Epsilon:\"Ε\",epsilon:\"ε\",epsiv:\"ϵ\",eqcirc:\"≖\",eqcolon:\"≕\",eqsim:\"≂\",eqslantgtr:\"⪖\",eqslantless:\"⪕\",Equal:\"⩵\",equals:\"=\",EqualTilde:\"≂\",equest:\"≟\",Equilibrium:\"⇌\",equiv:\"≡\",equivDD:\"⩸\",eqvparsl:\"⧥\",erarr:\"⥱\",erDot:\"≓\",escr:\"ℯ\",Escr:\"ℰ\",esdot:\"≐\",Esim:\"⩳\",esim:\"≂\",Eta:\"Η\",eta:\"η\",ETH:\"Ð\",eth:\"ð\",Euml:\"Ë\",euml:\"ë\",euro:\"€\",excl:\"!\",exist:\"∃\",Exists:\"∃\",expectation:\"ℰ\",exponentiale:\"ⅇ\",ExponentialE:\"ⅇ\",fallingdotseq:\"≒\",Fcy:\"Ф\",fcy:\"ф\",female:\"♀\",ffilig:\"ﬃ\",fflig:\"ﬀ\",ffllig:\"ﬄ\",Ffr:\"𝔉\",ffr:\"𝔣\",filig:\"ﬁ\",FilledSmallSquare:\"◼\",FilledVerySmallSquare:\"▪\",fjlig:\"fj\",flat:\"♭\",fllig:\"ﬂ\",fltns:\"▱\",fnof:\"ƒ\",Fopf:\"𝔽\",fopf:\"𝕗\",forall:\"∀\",ForAll:\"∀\",fork:\"⋔\",forkv:\"⫙\",Fouriertrf:\"ℱ\",fpartint:\"⨍\",frac12:\"½\",frac13:\"⅓\",frac14:\"¼\",frac15:\"⅕\",frac16:\"⅙\",frac18:\"⅛\",frac23:\"⅔\",frac25:\"⅖\",frac34:\"¾\",frac35:\"⅗\",frac38:\"⅜\",frac45:\"⅘\",frac56:\"⅚\",frac58:\"⅝\",frac78:\"⅞\",frasl:\"⁄\",frown:\"⌢\",fscr:\"𝒻\",Fscr:\"ℱ\",gacute:\"ǵ\",Gamma:\"Γ\",gamma:\"γ\",Gammad:\"Ϝ\",gammad:\"ϝ\",gap:\"⪆\",Gbreve:\"Ğ\",gbreve:\"ğ\",Gcedil:\"Ģ\",Gcirc:\"Ĝ\",gcirc:\"ĝ\",Gcy:\"Г\",gcy:\"г\",Gdot:\"Ġ\",gdot:\"ġ\",ge:\"≥\",gE:\"≧\",gEl:\"⪌\",gel:\"⋛\",geq:\"≥\",geqq:\"≧\",geqslant:\"⩾\",gescc:\"⪩\",ges:\"⩾\",gesdot:\"⪀\",gesdoto:\"⪂\",gesdotol:\"⪄\",gesl:\"⋛︀\",gesles:\"⪔\",Gfr:\"𝔊\",gfr:\"𝔤\",gg:\"≫\",Gg:\"⋙\",ggg:\"⋙\",gimel:\"ℷ\",GJcy:\"Ѓ\",gjcy:\"ѓ\",gla:\"⪥\",gl:\"≷\",glE:\"⪒\",glj:\"⪤\",gnap:\"⪊\",gnapprox:\"⪊\",gne:\"⪈\",gnE:\"≩\",gneq:\"⪈\",gneqq:\"≩\",gnsim:\"⋧\",Gopf:\"𝔾\",gopf:\"𝕘\",grave:\"`\",GreaterEqual:\"≥\",GreaterEqualLess:\"⋛\",GreaterFullEqual:\"≧\",GreaterGreater:\"⪢\",GreaterLess:\"≷\",GreaterSlantEqual:\"⩾\",GreaterTilde:\"≳\",Gscr:\"𝒢\",gscr:\"ℊ\",gsim:\"≳\",gsime:\"⪎\",gsiml:\"⪐\",gtcc:\"⪧\",gtcir:\"⩺\",gt:\">\",GT:\">\",Gt:\"≫\",gtdot:\"⋗\",gtlPar:\"⦕\",gtquest:\"⩼\",gtrapprox:\"⪆\",gtrarr:\"⥸\",gtrdot:\"⋗\",gtreqless:\"⋛\",gtreqqless:\"⪌\",gtrless:\"≷\",gtrsim:\"≳\",gvertneqq:\"≩︀\",gvnE:\"≩︀\",Hacek:\"ˇ\",hairsp:\" \",half:\"½\",hamilt:\"ℋ\",HARDcy:\"Ъ\",hardcy:\"ъ\",harrcir:\"⥈\",harr:\"↔\",hArr:\"⇔\",harrw:\"↭\",Hat:\"^\",hbar:\"ℏ\",Hcirc:\"Ĥ\",hcirc:\"ĥ\",hearts:\"♥\",heartsuit:\"♥\",hellip:\"…\",hercon:\"⊹\",hfr:\"𝔥\",Hfr:\"ℌ\",HilbertSpace:\"ℋ\",hksearow:\"⤥\",hkswarow:\"⤦\",hoarr:\"⇿\",homtht:\"∻\",hookleftarrow:\"↩\",hookrightarrow:\"↪\",hopf:\"𝕙\",Hopf:\"ℍ\",horbar:\"―\",HorizontalLine:\"─\",hscr:\"𝒽\",Hscr:\"ℋ\",hslash:\"ℏ\",Hstrok:\"Ħ\",hstrok:\"ħ\",HumpDownHump:\"≎\",HumpEqual:\"≏\",hybull:\"⁃\",hyphen:\"‐\",Iacute:\"Í\",iacute:\"í\",ic:\"⁣\",Icirc:\"Î\",icirc:\"î\",Icy:\"И\",icy:\"и\",Idot:\"İ\",IEcy:\"Е\",iecy:\"е\",iexcl:\"¡\",iff:\"⇔\",ifr:\"𝔦\",Ifr:\"ℑ\",Igrave:\"Ì\",igrave:\"ì\",ii:\"ⅈ\",iiiint:\"⨌\",iiint:\"∭\",iinfin:\"⧜\",iiota:\"℩\",IJlig:\"Ĳ\",ijlig:\"ĳ\",Imacr:\"Ī\",imacr:\"ī\",image:\"ℑ\",ImaginaryI:\"ⅈ\",imagline:\"ℐ\",imagpart:\"ℑ\",imath:\"ı\",Im:\"ℑ\",imof:\"⊷\",imped:\"Ƶ\",Implies:\"⇒\",incare:\"℅\",in:\"∈\",infin:\"∞\",infintie:\"⧝\",inodot:\"ı\",intcal:\"⊺\",int:\"∫\",Int:\"∬\",integers:\"ℤ\",Integral:\"∫\",intercal:\"⊺\",Intersection:\"⋂\",intlarhk:\"⨗\",intprod:\"⨼\",InvisibleComma:\"⁣\",InvisibleTimes:\"⁢\",IOcy:\"Ё\",iocy:\"ё\",Iogon:\"Į\",iogon:\"į\",Iopf:\"𝕀\",iopf:\"𝕚\",Iota:\"Ι\",iota:\"ι\",iprod:\"⨼\",iquest:\"¿\",iscr:\"𝒾\",Iscr:\"ℐ\",isin:\"∈\",isindot:\"⋵\",isinE:\"⋹\",isins:\"⋴\",isinsv:\"⋳\",isinv:\"∈\",it:\"⁢\",Itilde:\"Ĩ\",itilde:\"ĩ\",Iukcy:\"І\",iukcy:\"і\",Iuml:\"Ï\",iuml:\"ï\",Jcirc:\"Ĵ\",jcirc:\"ĵ\",Jcy:\"Й\",jcy:\"й\",Jfr:\"𝔍\",jfr:\"𝔧\",jmath:\"ȷ\",Jopf:\"𝕁\",jopf:\"𝕛\",Jscr:\"𝒥\",jscr:\"𝒿\",Jsercy:\"Ј\",jsercy:\"ј\",Jukcy:\"Є\",jukcy:\"є\",Kappa:\"Κ\",kappa:\"κ\",kappav:\"ϰ\",Kcedil:\"Ķ\",kcedil:\"ķ\",Kcy:\"К\",kcy:\"к\",Kfr:\"𝔎\",kfr:\"𝔨\",kgreen:\"ĸ\",KHcy:\"Х\",khcy:\"х\",KJcy:\"Ќ\",kjcy:\"ќ\",Kopf:\"𝕂\",kopf:\"𝕜\",Kscr:\"𝒦\",kscr:\"𝓀\",lAarr:\"⇚\",Lacute:\"Ĺ\",lacute:\"ĺ\",laemptyv:\"⦴\",lagran:\"ℒ\",Lambda:\"Λ\",lambda:\"λ\",lang:\"⟨\",Lang:\"⟪\",langd:\"⦑\",langle:\"⟨\",lap:\"⪅\",Laplacetrf:\"ℒ\",laquo:\"«\",larrb:\"⇤\",larrbfs:\"⤟\",larr:\"←\",Larr:\"↞\",lArr:\"⇐\",larrfs:\"⤝\",larrhk:\"↩\",larrlp:\"↫\",larrpl:\"⤹\",larrsim:\"⥳\",larrtl:\"↢\",latail:\"⤙\",lAtail:\"⤛\",lat:\"⪫\",late:\"⪭\",lates:\"⪭︀\",lbarr:\"⤌\",lBarr:\"⤎\",lbbrk:\"❲\",lbrace:\"{\",lbrack:\"[\",lbrke:\"⦋\",lbrksld:\"⦏\",lbrkslu:\"⦍\",Lcaron:\"Ľ\",lcaron:\"ľ\",Lcedil:\"Ļ\",lcedil:\"ļ\",lceil:\"⌈\",lcub:\"{\",Lcy:\"Л\",lcy:\"л\",ldca:\"⤶\",ldquo:\"“\",ldquor:\"„\",ldrdhar:\"⥧\",ldrushar:\"⥋\",ldsh:\"↲\",le:\"≤\",lE:\"≦\",LeftAngleBracket:\"⟨\",LeftArrowBar:\"⇤\",leftarrow:\"←\",LeftArrow:\"←\",Leftarrow:\"⇐\",LeftArrowRightArrow:\"⇆\",leftarrowtail:\"↢\",LeftCeiling:\"⌈\",LeftDoubleBracket:\"⟦\",LeftDownTeeVector:\"⥡\",LeftDownVectorBar:\"⥙\",LeftDownVector:\"⇃\",LeftFloor:\"⌊\",leftharpoondown:\"↽\",leftharpoonup:\"↼\",leftleftarrows:\"⇇\",leftrightarrow:\"↔\",LeftRightArrow:\"↔\",Leftrightarrow:\"⇔\",leftrightarrows:\"⇆\",leftrightharpoons:\"⇋\",leftrightsquigarrow:\"↭\",LeftRightVector:\"⥎\",LeftTeeArrow:\"↤\",LeftTee:\"⊣\",LeftTeeVector:\"⥚\",leftthreetimes:\"⋋\",LeftTriangleBar:\"⧏\",LeftTriangle:\"⊲\",LeftTriangleEqual:\"⊴\",LeftUpDownVector:\"⥑\",LeftUpTeeVector:\"⥠\",LeftUpVectorBar:\"⥘\",LeftUpVector:\"↿\",LeftVectorBar:\"⥒\",LeftVector:\"↼\",lEg:\"⪋\",leg:\"⋚\",leq:\"≤\",leqq:\"≦\",leqslant:\"⩽\",lescc:\"⪨\",les:\"⩽\",lesdot:\"⩿\",lesdoto:\"⪁\",lesdotor:\"⪃\",lesg:\"⋚︀\",lesges:\"⪓\",lessapprox:\"⪅\",lessdot:\"⋖\",lesseqgtr:\"⋚\",lesseqqgtr:\"⪋\",LessEqualGreater:\"⋚\",LessFullEqual:\"≦\",LessGreater:\"≶\",lessgtr:\"≶\",LessLess:\"⪡\",lesssim:\"≲\",LessSlantEqual:\"⩽\",LessTilde:\"≲\",lfisht:\"⥼\",lfloor:\"⌊\",Lfr:\"𝔏\",lfr:\"𝔩\",lg:\"≶\",lgE:\"⪑\",lHar:\"⥢\",lhard:\"↽\",lharu:\"↼\",lharul:\"⥪\",lhblk:\"▄\",LJcy:\"Љ\",ljcy:\"љ\",llarr:\"⇇\",ll:\"≪\",Ll:\"⋘\",llcorner:\"⌞\",Lleftarrow:\"⇚\",llhard:\"⥫\",lltri:\"◺\",Lmidot:\"Ŀ\",lmidot:\"ŀ\",lmoustache:\"⎰\",lmoust:\"⎰\",lnap:\"⪉\",lnapprox:\"⪉\",lne:\"⪇\",lnE:\"≨\",lneq:\"⪇\",lneqq:\"≨\",lnsim:\"⋦\",loang:\"⟬\",loarr:\"⇽\",lobrk:\"⟦\",longleftarrow:\"⟵\",LongLeftArrow:\"⟵\",Longleftarrow:\"⟸\",longleftrightarrow:\"⟷\",LongLeftRightArrow:\"⟷\",Longleftrightarrow:\"⟺\",longmapsto:\"⟼\",longrightarrow:\"⟶\",LongRightArrow:\"⟶\",Longrightarrow:\"⟹\",looparrowleft:\"↫\",looparrowright:\"↬\",lopar:\"⦅\",Lopf:\"𝕃\",lopf:\"𝕝\",loplus:\"⨭\",lotimes:\"⨴\",lowast:\"∗\",lowbar:\"_\",LowerLeftArrow:\"↙\",LowerRightArrow:\"↘\",loz:\"◊\",lozenge:\"◊\",lozf:\"⧫\",lpar:\"(\",lparlt:\"⦓\",lrarr:\"⇆\",lrcorner:\"⌟\",lrhar:\"⇋\",lrhard:\"⥭\",lrm:\"‎\",lrtri:\"⊿\",lsaquo:\"‹\",lscr:\"𝓁\",Lscr:\"ℒ\",lsh:\"↰\",Lsh:\"↰\",lsim:\"≲\",lsime:\"⪍\",lsimg:\"⪏\",lsqb:\"[\",lsquo:\"‘\",lsquor:\"‚\",Lstrok:\"Ł\",lstrok:\"ł\",ltcc:\"⪦\",ltcir:\"⩹\",lt:\"<\",LT:\"<\",Lt:\"≪\",ltdot:\"⋖\",lthree:\"⋋\",ltimes:\"⋉\",ltlarr:\"⥶\",ltquest:\"⩻\",ltri:\"◃\",ltrie:\"⊴\",ltrif:\"◂\",ltrPar:\"⦖\",lurdshar:\"⥊\",luruhar:\"⥦\",lvertneqq:\"≨︀\",lvnE:\"≨︀\",macr:\"¯\",male:\"♂\",malt:\"✠\",maltese:\"✠\",Map:\"⤅\",map:\"↦\",mapsto:\"↦\",mapstodown:\"↧\",mapstoleft:\"↤\",mapstoup:\"↥\",marker:\"▮\",mcomma:\"⨩\",Mcy:\"М\",mcy:\"м\",mdash:\"—\",mDDot:\"∺\",measuredangle:\"∡\",MediumSpace:\" \",Mellintrf:\"ℳ\",Mfr:\"𝔐\",mfr:\"𝔪\",mho:\"℧\",micro:\"µ\",midast:\"*\",midcir:\"⫰\",mid:\"∣\",middot:\"·\",minusb:\"⊟\",minus:\"−\",minusd:\"∸\",minusdu:\"⨪\",MinusPlus:\"∓\",mlcp:\"⫛\",mldr:\"…\",mnplus:\"∓\",models:\"⊧\",Mopf:\"𝕄\",mopf:\"𝕞\",mp:\"∓\",mscr:\"𝓂\",Mscr:\"ℳ\",mstpos:\"∾\",Mu:\"Μ\",mu:\"μ\",multimap:\"⊸\",mumap:\"⊸\",nabla:\"∇\",Nacute:\"Ń\",nacute:\"ń\",nang:\"∠⃒\",nap:\"≉\",napE:\"⩰̸\",napid:\"≋̸\",napos:\"ŉ\",napprox:\"≉\",natural:\"♮\",naturals:\"ℕ\",natur:\"♮\",nbsp:\" \",nbump:\"≎̸\",nbumpe:\"≏̸\",ncap:\"⩃\",Ncaron:\"Ň\",ncaron:\"ň\",Ncedil:\"Ņ\",ncedil:\"ņ\",ncong:\"≇\",ncongdot:\"⩭̸\",ncup:\"⩂\",Ncy:\"Н\",ncy:\"н\",ndash:\"–\",nearhk:\"⤤\",nearr:\"↗\",neArr:\"⇗\",nearrow:\"↗\",ne:\"≠\",nedot:\"≐̸\",NegativeMediumSpace:\"​\",NegativeThickSpace:\"​\",NegativeThinSpace:\"​\",NegativeVeryThinSpace:\"​\",nequiv:\"≢\",nesear:\"⤨\",nesim:\"≂̸\",NestedGreaterGreater:\"≫\",NestedLessLess:\"≪\",NewLine:\"\\n\",nexist:\"∄\",nexists:\"∄\",Nfr:\"𝔑\",nfr:\"𝔫\",ngE:\"≧̸\",nge:\"≱\",ngeq:\"≱\",ngeqq:\"≧̸\",ngeqslant:\"⩾̸\",nges:\"⩾̸\",nGg:\"⋙̸\",ngsim:\"≵\",nGt:\"≫⃒\",ngt:\"≯\",ngtr:\"≯\",nGtv:\"≫̸\",nharr:\"↮\",nhArr:\"⇎\",nhpar:\"⫲\",ni:\"∋\",nis:\"⋼\",nisd:\"⋺\",niv:\"∋\",NJcy:\"Њ\",njcy:\"њ\",nlarr:\"↚\",nlArr:\"⇍\",nldr:\"‥\",nlE:\"≦̸\",nle:\"≰\",nleftarrow:\"↚\",nLeftarrow:\"⇍\",nleftrightarrow:\"↮\",nLeftrightarrow:\"⇎\",nleq:\"≰\",nleqq:\"≦̸\",nleqslant:\"⩽̸\",nles:\"⩽̸\",nless:\"≮\",nLl:\"⋘̸\",nlsim:\"≴\",nLt:\"≪⃒\",nlt:\"≮\",nltri:\"⋪\",nltrie:\"⋬\",nLtv:\"≪̸\",nmid:\"∤\",NoBreak:\"⁠\",NonBreakingSpace:\" \",nopf:\"𝕟\",Nopf:\"ℕ\",Not:\"⫬\",not:\"¬\",NotCongruent:\"≢\",NotCupCap:\"≭\",NotDoubleVerticalBar:\"∦\",NotElement:\"∉\",NotEqual:\"≠\",NotEqualTilde:\"≂̸\",NotExists:\"∄\",NotGreater:\"≯\",NotGreaterEqual:\"≱\",NotGreaterFullEqual:\"≧̸\",NotGreaterGreater:\"≫̸\",NotGreaterLess:\"≹\",NotGreaterSlantEqual:\"⩾̸\",NotGreaterTilde:\"≵\",NotHumpDownHump:\"≎̸\",NotHumpEqual:\"≏̸\",notin:\"∉\",notindot:\"⋵̸\",notinE:\"⋹̸\",notinva:\"∉\",notinvb:\"⋷\",notinvc:\"⋶\",NotLeftTriangleBar:\"⧏̸\",NotLeftTriangle:\"⋪\",NotLeftTriangleEqual:\"⋬\",NotLess:\"≮\",NotLessEqual:\"≰\",NotLessGreater:\"≸\",NotLessLess:\"≪̸\",NotLessSlantEqual:\"⩽̸\",NotLessTilde:\"≴\",NotNestedGreaterGreater:\"⪢̸\",NotNestedLessLess:\"⪡̸\",notni:\"∌\",notniva:\"∌\",notnivb:\"⋾\",notnivc:\"⋽\",NotPrecedes:\"⊀\",NotPrecedesEqual:\"⪯̸\",NotPrecedesSlantEqual:\"⋠\",NotReverseElement:\"∌\",NotRightTriangleBar:\"⧐̸\",NotRightTriangle:\"⋫\",NotRightTriangleEqual:\"⋭\",NotSquareSubset:\"⊏̸\",NotSquareSubsetEqual:\"⋢\",NotSquareSuperset:\"⊐̸\",NotSquareSupersetEqual:\"⋣\",NotSubset:\"⊂⃒\",NotSubsetEqual:\"⊈\",NotSucceeds:\"⊁\",NotSucceedsEqual:\"⪰̸\",NotSucceedsSlantEqual:\"⋡\",NotSucceedsTilde:\"≿̸\",NotSuperset:\"⊃⃒\",NotSupersetEqual:\"⊉\",NotTilde:\"≁\",NotTildeEqual:\"≄\",NotTildeFullEqual:\"≇\",NotTildeTilde:\"≉\",NotVerticalBar:\"∤\",nparallel:\"∦\",npar:\"∦\",nparsl:\"⫽⃥\",npart:\"∂̸\",npolint:\"⨔\",npr:\"⊀\",nprcue:\"⋠\",nprec:\"⊀\",npreceq:\"⪯̸\",npre:\"⪯̸\",nrarrc:\"⤳̸\",nrarr:\"↛\",nrArr:\"⇏\",nrarrw:\"↝̸\",nrightarrow:\"↛\",nRightarrow:\"⇏\",nrtri:\"⋫\",nrtrie:\"⋭\",nsc:\"⊁\",nsccue:\"⋡\",nsce:\"⪰̸\",Nscr:\"𝒩\",nscr:\"𝓃\",nshortmid:\"∤\",nshortparallel:\"∦\",nsim:\"≁\",nsime:\"≄\",nsimeq:\"≄\",nsmid:\"∤\",nspar:\"∦\",nsqsube:\"⋢\",nsqsupe:\"⋣\",nsub:\"⊄\",nsubE:\"⫅̸\",nsube:\"⊈\",nsubset:\"⊂⃒\",nsubseteq:\"⊈\",nsubseteqq:\"⫅̸\",nsucc:\"⊁\",nsucceq:\"⪰̸\",nsup:\"⊅\",nsupE:\"⫆̸\",nsupe:\"⊉\",nsupset:\"⊃⃒\",nsupseteq:\"⊉\",nsupseteqq:\"⫆̸\",ntgl:\"≹\",Ntilde:\"Ñ\",ntilde:\"ñ\",ntlg:\"≸\",ntriangleleft:\"⋪\",ntrianglelefteq:\"⋬\",ntriangleright:\"⋫\",ntrianglerighteq:\"⋭\",Nu:\"Ν\",nu:\"ν\",num:\"#\",numero:\"№\",numsp:\" \",nvap:\"≍⃒\",nvdash:\"⊬\",nvDash:\"⊭\",nVdash:\"⊮\",nVDash:\"⊯\",nvge:\"≥⃒\",nvgt:\">⃒\",nvHarr:\"⤄\",nvinfin:\"⧞\",nvlArr:\"⤂\",nvle:\"≤⃒\",nvlt:\"<⃒\",nvltrie:\"⊴⃒\",nvrArr:\"⤃\",nvrtrie:\"⊵⃒\",nvsim:\"∼⃒\",nwarhk:\"⤣\",nwarr:\"↖\",nwArr:\"⇖\",nwarrow:\"↖\",nwnear:\"⤧\",Oacute:\"Ó\",oacute:\"ó\",oast:\"⊛\",Ocirc:\"Ô\",ocirc:\"ô\",ocir:\"⊚\",Ocy:\"О\",ocy:\"о\",odash:\"⊝\",Odblac:\"Ő\",odblac:\"ő\",odiv:\"⨸\",odot:\"⊙\",odsold:\"⦼\",OElig:\"Œ\",oelig:\"œ\",ofcir:\"⦿\",Ofr:\"𝔒\",ofr:\"𝔬\",ogon:\"˛\",Ograve:\"Ò\",ograve:\"ò\",ogt:\"⧁\",ohbar:\"⦵\",ohm:\"Ω\",oint:\"∮\",olarr:\"↺\",olcir:\"⦾\",olcross:\"⦻\",oline:\"‾\",olt:\"⧀\",Omacr:\"Ō\",omacr:\"ō\",Omega:\"Ω\",omega:\"ω\",Omicron:\"Ο\",omicron:\"ο\",omid:\"⦶\",ominus:\"⊖\",Oopf:\"𝕆\",oopf:\"𝕠\",opar:\"⦷\",OpenCurlyDoubleQuote:\"“\",OpenCurlyQuote:\"‘\",operp:\"⦹\",oplus:\"⊕\",orarr:\"↻\",Or:\"⩔\",or:\"∨\",ord:\"⩝\",order:\"ℴ\",orderof:\"ℴ\",ordf:\"ª\",ordm:\"º\",origof:\"⊶\",oror:\"⩖\",orslope:\"⩗\",orv:\"⩛\",oS:\"Ⓢ\",Oscr:\"𝒪\",oscr:\"ℴ\",Oslash:\"Ø\",oslash:\"ø\",osol:\"⊘\",Otilde:\"Õ\",otilde:\"õ\",otimesas:\"⨶\",Otimes:\"⨷\",otimes:\"⊗\",Ouml:\"Ö\",ouml:\"ö\",ovbar:\"⌽\",OverBar:\"‾\",OverBrace:\"⏞\",OverBracket:\"⎴\",OverParenthesis:\"⏜\",para:\"¶\",parallel:\"∥\",par:\"∥\",parsim:\"⫳\",parsl:\"⫽\",part:\"∂\",PartialD:\"∂\",Pcy:\"П\",pcy:\"п\",percnt:\"%\",period:\".\",permil:\"‰\",perp:\"⊥\",pertenk:\"‱\",Pfr:\"𝔓\",pfr:\"𝔭\",Phi:\"Φ\",phi:\"φ\",phiv:\"ϕ\",phmmat:\"ℳ\",phone:\"☎\",Pi:\"Π\",pi:\"π\",pitchfork:\"⋔\",piv:\"ϖ\",planck:\"ℏ\",planckh:\"ℎ\",plankv:\"ℏ\",plusacir:\"⨣\",plusb:\"⊞\",pluscir:\"⨢\",plus:\"+\",plusdo:\"∔\",plusdu:\"⨥\",pluse:\"⩲\",PlusMinus:\"±\",plusmn:\"±\",plussim:\"⨦\",plustwo:\"⨧\",pm:\"±\",Poincareplane:\"ℌ\",pointint:\"⨕\",popf:\"𝕡\",Popf:\"ℙ\",pound:\"£\",prap:\"⪷\",Pr:\"⪻\",pr:\"≺\",prcue:\"≼\",precapprox:\"⪷\",prec:\"≺\",preccurlyeq:\"≼\",Precedes:\"≺\",PrecedesEqual:\"⪯\",PrecedesSlantEqual:\"≼\",PrecedesTilde:\"≾\",preceq:\"⪯\",precnapprox:\"⪹\",precneqq:\"⪵\",precnsim:\"⋨\",pre:\"⪯\",prE:\"⪳\",precsim:\"≾\",prime:\"′\",Prime:\"″\",primes:\"ℙ\",prnap:\"⪹\",prnE:\"⪵\",prnsim:\"⋨\",prod:\"∏\",Product:\"∏\",profalar:\"⌮\",profline:\"⌒\",profsurf:\"⌓\",prop:\"∝\",Proportional:\"∝\",Proportion:\"∷\",propto:\"∝\",prsim:\"≾\",prurel:\"⊰\",Pscr:\"𝒫\",pscr:\"𝓅\",Psi:\"Ψ\",psi:\"ψ\",puncsp:\" \",Qfr:\"𝔔\",qfr:\"𝔮\",qint:\"⨌\",qopf:\"𝕢\",Qopf:\"ℚ\",qprime:\"⁗\",Qscr:\"𝒬\",qscr:\"𝓆\",quaternions:\"ℍ\",quatint:\"⨖\",quest:\"?\",questeq:\"≟\",quot:'\"',QUOT:'\"',rAarr:\"⇛\",race:\"∽̱\",Racute:\"Ŕ\",racute:\"ŕ\",radic:\"√\",raemptyv:\"⦳\",rang:\"⟩\",Rang:\"⟫\",rangd:\"⦒\",range:\"⦥\",rangle:\"⟩\",raquo:\"»\",rarrap:\"⥵\",rarrb:\"⇥\",rarrbfs:\"⤠\",rarrc:\"⤳\",rarr:\"→\",Rarr:\"↠\",rArr:\"⇒\",rarrfs:\"⤞\",rarrhk:\"↪\",rarrlp:\"↬\",rarrpl:\"⥅\",rarrsim:\"⥴\",Rarrtl:\"⤖\",rarrtl:\"↣\",rarrw:\"↝\",ratail:\"⤚\",rAtail:\"⤜\",ratio:\"∶\",rationals:\"ℚ\",rbarr:\"⤍\",rBarr:\"⤏\",RBarr:\"⤐\",rbbrk:\"❳\",rbrace:\"}\",rbrack:\"]\",rbrke:\"⦌\",rbrksld:\"⦎\",rbrkslu:\"⦐\",Rcaron:\"Ř\",rcaron:\"ř\",Rcedil:\"Ŗ\",rcedil:\"ŗ\",rceil:\"⌉\",rcub:\"}\",Rcy:\"Р\",rcy:\"р\",rdca:\"⤷\",rdldhar:\"⥩\",rdquo:\"”\",rdquor:\"”\",rdsh:\"↳\",real:\"ℜ\",realine:\"ℛ\",realpart:\"ℜ\",reals:\"ℝ\",Re:\"ℜ\",rect:\"▭\",reg:\"®\",REG:\"®\",ReverseElement:\"∋\",ReverseEquilibrium:\"⇋\",ReverseUpEquilibrium:\"⥯\",rfisht:\"⥽\",rfloor:\"⌋\",rfr:\"𝔯\",Rfr:\"ℜ\",rHar:\"⥤\",rhard:\"⇁\",rharu:\"⇀\",rharul:\"⥬\",Rho:\"Ρ\",rho:\"ρ\",rhov:\"ϱ\",RightAngleBracket:\"⟩\",RightArrowBar:\"⇥\",rightarrow:\"→\",RightArrow:\"→\",Rightarrow:\"⇒\",RightArrowLeftArrow:\"⇄\",rightarrowtail:\"↣\",RightCeiling:\"⌉\",RightDoubleBracket:\"⟧\",RightDownTeeVector:\"⥝\",RightDownVectorBar:\"⥕\",RightDownVector:\"⇂\",RightFloor:\"⌋\",rightharpoondown:\"⇁\",rightharpoonup:\"⇀\",rightleftarrows:\"⇄\",rightleftharpoons:\"⇌\",rightrightarrows:\"⇉\",rightsquigarrow:\"↝\",RightTeeArrow:\"↦\",RightTee:\"⊢\",RightTeeVector:\"⥛\",rightthreetimes:\"⋌\",RightTriangleBar:\"⧐\",RightTriangle:\"⊳\",RightTriangleEqual:\"⊵\",RightUpDownVector:\"⥏\",RightUpTeeVector:\"⥜\",RightUpVectorBar:\"⥔\",RightUpVector:\"↾\",RightVectorBar:\"⥓\",RightVector:\"⇀\",ring:\"˚\",risingdotseq:\"≓\",rlarr:\"⇄\",rlhar:\"⇌\",rlm:\"‏\",rmoustache:\"⎱\",rmoust:\"⎱\",rnmid:\"⫮\",roang:\"⟭\",roarr:\"⇾\",robrk:\"⟧\",ropar:\"⦆\",ropf:\"𝕣\",Ropf:\"ℝ\",roplus:\"⨮\",rotimes:\"⨵\",RoundImplies:\"⥰\",rpar:\")\",rpargt:\"⦔\",rppolint:\"⨒\",rrarr:\"⇉\",Rrightarrow:\"⇛\",rsaquo:\"›\",rscr:\"𝓇\",Rscr:\"ℛ\",rsh:\"↱\",Rsh:\"↱\",rsqb:\"]\",rsquo:\"’\",rsquor:\"’\",rthree:\"⋌\",rtimes:\"⋊\",rtri:\"▹\",rtrie:\"⊵\",rtrif:\"▸\",rtriltri:\"⧎\",RuleDelayed:\"⧴\",ruluhar:\"⥨\",rx:\"℞\",Sacute:\"Ś\",sacute:\"ś\",sbquo:\"‚\",scap:\"⪸\",Scaron:\"Š\",scaron:\"š\",Sc:\"⪼\",sc:\"≻\",sccue:\"≽\",sce:\"⪰\",scE:\"⪴\",Scedil:\"Ş\",scedil:\"ş\",Scirc:\"Ŝ\",scirc:\"ŝ\",scnap:\"⪺\",scnE:\"⪶\",scnsim:\"⋩\",scpolint:\"⨓\",scsim:\"≿\",Scy:\"С\",scy:\"с\",sdotb:\"⊡\",sdot:\"⋅\",sdote:\"⩦\",searhk:\"⤥\",searr:\"↘\",seArr:\"⇘\",searrow:\"↘\",sect:\"§\",semi:\";\",seswar:\"⤩\",setminus:\"∖\",setmn:\"∖\",sext:\"✶\",Sfr:\"𝔖\",sfr:\"𝔰\",sfrown:\"⌢\",sharp:\"♯\",SHCHcy:\"Щ\",shchcy:\"щ\",SHcy:\"Ш\",shcy:\"ш\",ShortDownArrow:\"↓\",ShortLeftArrow:\"←\",shortmid:\"∣\",shortparallel:\"∥\",ShortRightArrow:\"→\",ShortUpArrow:\"↑\",shy:\"­\",Sigma:\"Σ\",sigma:\"σ\",sigmaf:\"ς\",sigmav:\"ς\",sim:\"∼\",simdot:\"⩪\",sime:\"≃\",simeq:\"≃\",simg:\"⪞\",simgE:\"⪠\",siml:\"⪝\",simlE:\"⪟\",simne:\"≆\",simplus:\"⨤\",simrarr:\"⥲\",slarr:\"←\",SmallCircle:\"∘\",smallsetminus:\"∖\",smashp:\"⨳\",smeparsl:\"⧤\",smid:\"∣\",smile:\"⌣\",smt:\"⪪\",smte:\"⪬\",smtes:\"⪬︀\",SOFTcy:\"Ь\",softcy:\"ь\",solbar:\"⌿\",solb:\"⧄\",sol:\"/\",Sopf:\"𝕊\",sopf:\"𝕤\",spades:\"♠\",spadesuit:\"♠\",spar:\"∥\",sqcap:\"⊓\",sqcaps:\"⊓︀\",sqcup:\"⊔\",sqcups:\"⊔︀\",Sqrt:\"√\",sqsub:\"⊏\",sqsube:\"⊑\",sqsubset:\"⊏\",sqsubseteq:\"⊑\",sqsup:\"⊐\",sqsupe:\"⊒\",sqsupset:\"⊐\",sqsupseteq:\"⊒\",square:\"□\",Square:\"□\",SquareIntersection:\"⊓\",SquareSubset:\"⊏\",SquareSubsetEqual:\"⊑\",SquareSuperset:\"⊐\",SquareSupersetEqual:\"⊒\",SquareUnion:\"⊔\",squarf:\"▪\",squ:\"□\",squf:\"▪\",srarr:\"→\",Sscr:\"𝒮\",sscr:\"𝓈\",ssetmn:\"∖\",ssmile:\"⌣\",sstarf:\"⋆\",Star:\"⋆\",star:\"☆\",starf:\"★\",straightepsilon:\"ϵ\",straightphi:\"ϕ\",strns:\"¯\",sub:\"⊂\",Sub:\"⋐\",subdot:\"⪽\",subE:\"⫅\",sube:\"⊆\",subedot:\"⫃\",submult:\"⫁\",subnE:\"⫋\",subne:\"⊊\",subplus:\"⪿\",subrarr:\"⥹\",subset:\"⊂\",Subset:\"⋐\",subseteq:\"⊆\",subseteqq:\"⫅\",SubsetEqual:\"⊆\",subsetneq:\"⊊\",subsetneqq:\"⫋\",subsim:\"⫇\",subsub:\"⫕\",subsup:\"⫓\",succapprox:\"⪸\",succ:\"≻\",succcurlyeq:\"≽\",Succeeds:\"≻\",SucceedsEqual:\"⪰\",SucceedsSlantEqual:\"≽\",SucceedsTilde:\"≿\",succeq:\"⪰\",succnapprox:\"⪺\",succneqq:\"⪶\",succnsim:\"⋩\",succsim:\"≿\",SuchThat:\"∋\",sum:\"∑\",Sum:\"∑\",sung:\"♪\",sup1:\"¹\",sup2:\"²\",sup3:\"³\",sup:\"⊃\",Sup:\"⋑\",supdot:\"⪾\",supdsub:\"⫘\",supE:\"⫆\",supe:\"⊇\",supedot:\"⫄\",Superset:\"⊃\",SupersetEqual:\"⊇\",suphsol:\"⟉\",suphsub:\"⫗\",suplarr:\"⥻\",supmult:\"⫂\",supnE:\"⫌\",supne:\"⊋\",supplus:\"⫀\",supset:\"⊃\",Supset:\"⋑\",supseteq:\"⊇\",supseteqq:\"⫆\",supsetneq:\"⊋\",supsetneqq:\"⫌\",supsim:\"⫈\",supsub:\"⫔\",supsup:\"⫖\",swarhk:\"⤦\",swarr:\"↙\",swArr:\"⇙\",swarrow:\"↙\",swnwar:\"⤪\",szlig:\"ß\",Tab:\"\\t\",target:\"⌖\",Tau:\"Τ\",tau:\"τ\",tbrk:\"⎴\",Tcaron:\"Ť\",tcaron:\"ť\",Tcedil:\"Ţ\",tcedil:\"ţ\",Tcy:\"Т\",tcy:\"т\",tdot:\"⃛\",telrec:\"⌕\",Tfr:\"𝔗\",tfr:\"𝔱\",there4:\"∴\",therefore:\"∴\",Therefore:\"∴\",Theta:\"Θ\",theta:\"θ\",thetasym:\"ϑ\",thetav:\"ϑ\",thickapprox:\"≈\",thicksim:\"∼\",ThickSpace:\"  \",ThinSpace:\" \",thinsp:\" \",thkap:\"≈\",thksim:\"∼\",THORN:\"Þ\",thorn:\"þ\",tilde:\"˜\",Tilde:\"∼\",TildeEqual:\"≃\",TildeFullEqual:\"≅\",TildeTilde:\"≈\",timesbar:\"⨱\",timesb:\"⊠\",times:\"×\",timesd:\"⨰\",tint:\"∭\",toea:\"⤨\",topbot:\"⌶\",topcir:\"⫱\",top:\"⊤\",Topf:\"𝕋\",topf:\"𝕥\",topfork:\"⫚\",tosa:\"⤩\",tprime:\"‴\",trade:\"™\",TRADE:\"™\",triangle:\"▵\",triangledown:\"▿\",triangleleft:\"◃\",trianglelefteq:\"⊴\",triangleq:\"≜\",triangleright:\"▹\",trianglerighteq:\"⊵\",tridot:\"◬\",trie:\"≜\",triminus:\"⨺\",TripleDot:\"⃛\",triplus:\"⨹\",trisb:\"⧍\",tritime:\"⨻\",trpezium:\"⏢\",Tscr:\"𝒯\",tscr:\"𝓉\",TScy:\"Ц\",tscy:\"ц\",TSHcy:\"Ћ\",tshcy:\"ћ\",Tstrok:\"Ŧ\",tstrok:\"ŧ\",twixt:\"≬\",twoheadleftarrow:\"↞\",twoheadrightarrow:\"↠\",Uacute:\"Ú\",uacute:\"ú\",uarr:\"↑\",Uarr:\"↟\",uArr:\"⇑\",Uarrocir:\"⥉\",Ubrcy:\"Ў\",ubrcy:\"ў\",Ubreve:\"Ŭ\",ubreve:\"ŭ\",Ucirc:\"Û\",ucirc:\"û\",Ucy:\"У\",ucy:\"у\",udarr:\"⇅\",Udblac:\"Ű\",udblac:\"ű\",udhar:\"⥮\",ufisht:\"⥾\",Ufr:\"𝔘\",ufr:\"𝔲\",Ugrave:\"Ù\",ugrave:\"ù\",uHar:\"⥣\",uharl:\"↿\",uharr:\"↾\",uhblk:\"▀\",ulcorn:\"⌜\",ulcorner:\"⌜\",ulcrop:\"⌏\",ultri:\"◸\",Umacr:\"Ū\",umacr:\"ū\",uml:\"¨\",UnderBar:\"_\",UnderBrace:\"⏟\",UnderBracket:\"⎵\",UnderParenthesis:\"⏝\",Union:\"⋃\",UnionPlus:\"⊎\",Uogon:\"Ų\",uogon:\"ų\",Uopf:\"𝕌\",uopf:\"𝕦\",UpArrowBar:\"⤒\",uparrow:\"↑\",UpArrow:\"↑\",Uparrow:\"⇑\",UpArrowDownArrow:\"⇅\",updownarrow:\"↕\",UpDownArrow:\"↕\",Updownarrow:\"⇕\",UpEquilibrium:\"⥮\",upharpoonleft:\"↿\",upharpoonright:\"↾\",uplus:\"⊎\",UpperLeftArrow:\"↖\",UpperRightArrow:\"↗\",upsi:\"υ\",Upsi:\"ϒ\",upsih:\"ϒ\",Upsilon:\"Υ\",upsilon:\"υ\",UpTeeArrow:\"↥\",UpTee:\"⊥\",upuparrows:\"⇈\",urcorn:\"⌝\",urcorner:\"⌝\",urcrop:\"⌎\",Uring:\"Ů\",uring:\"ů\",urtri:\"◹\",Uscr:\"𝒰\",uscr:\"𝓊\",utdot:\"⋰\",Utilde:\"Ũ\",utilde:\"ũ\",utri:\"▵\",utrif:\"▴\",uuarr:\"⇈\",Uuml:\"Ü\",uuml:\"ü\",uwangle:\"⦧\",vangrt:\"⦜\",varepsilon:\"ϵ\",varkappa:\"ϰ\",varnothing:\"∅\",varphi:\"ϕ\",varpi:\"ϖ\",varpropto:\"∝\",varr:\"↕\",vArr:\"⇕\",varrho:\"ϱ\",varsigma:\"ς\",varsubsetneq:\"⊊︀\",varsubsetneqq:\"⫋︀\",varsupsetneq:\"⊋︀\",varsupsetneqq:\"⫌︀\",vartheta:\"ϑ\",vartriangleleft:\"⊲\",vartriangleright:\"⊳\",vBar:\"⫨\",Vbar:\"⫫\",vBarv:\"⫩\",Vcy:\"В\",vcy:\"в\",vdash:\"⊢\",vDash:\"⊨\",Vdash:\"⊩\",VDash:\"⊫\",Vdashl:\"⫦\",veebar:\"⊻\",vee:\"∨\",Vee:\"⋁\",veeeq:\"≚\",vellip:\"⋮\",verbar:\"|\",Verbar:\"‖\",vert:\"|\",Vert:\"‖\",VerticalBar:\"∣\",VerticalLine:\"|\",VerticalSeparator:\"❘\",VerticalTilde:\"≀\",VeryThinSpace:\" \",Vfr:\"𝔙\",vfr:\"𝔳\",vltri:\"⊲\",vnsub:\"⊂⃒\",vnsup:\"⊃⃒\",Vopf:\"𝕍\",vopf:\"𝕧\",vprop:\"∝\",vrtri:\"⊳\",Vscr:\"𝒱\",vscr:\"𝓋\",vsubnE:\"⫋︀\",vsubne:\"⊊︀\",vsupnE:\"⫌︀\",vsupne:\"⊋︀\",Vvdash:\"⊪\",vzigzag:\"⦚\",Wcirc:\"Ŵ\",wcirc:\"ŵ\",wedbar:\"⩟\",wedge:\"∧\",Wedge:\"⋀\",wedgeq:\"≙\",weierp:\"℘\",Wfr:\"𝔚\",wfr:\"𝔴\",Wopf:\"𝕎\",wopf:\"𝕨\",wp:\"℘\",wr:\"≀\",wreath:\"≀\",Wscr:\"𝒲\",wscr:\"𝓌\",xcap:\"⋂\",xcirc:\"◯\",xcup:\"⋃\",xdtri:\"▽\",Xfr:\"𝔛\",xfr:\"𝔵\",xharr:\"⟷\",xhArr:\"⟺\",Xi:\"Ξ\",xi:\"ξ\",xlarr:\"⟵\",xlArr:\"⟸\",xmap:\"⟼\",xnis:\"⋻\",xodot:\"⨀\",Xopf:\"𝕏\",xopf:\"𝕩\",xoplus:\"⨁\",xotime:\"⨂\",xrarr:\"⟶\",xrArr:\"⟹\",Xscr:\"𝒳\",xscr:\"𝓍\",xsqcup:\"⨆\",xuplus:\"⨄\",xutri:\"△\",xvee:\"⋁\",xwedge:\"⋀\",Yacute:\"Ý\",yacute:\"ý\",YAcy:\"Я\",yacy:\"я\",Ycirc:\"Ŷ\",ycirc:\"ŷ\",Ycy:\"Ы\",ycy:\"ы\",yen:\"¥\",Yfr:\"𝔜\",yfr:\"𝔶\",YIcy:\"Ї\",yicy:\"ї\",Yopf:\"𝕐\",yopf:\"𝕪\",Yscr:\"𝒴\",yscr:\"𝓎\",YUcy:\"Ю\",yucy:\"ю\",yuml:\"ÿ\",Yuml:\"Ÿ\",Zacute:\"Ź\",zacute:\"ź\",Zcaron:\"Ž\",zcaron:\"ž\",Zcy:\"З\",zcy:\"з\",Zdot:\"Ż\",zdot:\"ż\",zeetrf:\"ℨ\",ZeroWidthSpace:\"​\",Zeta:\"Ζ\",zeta:\"ζ\",zfr:\"𝔷\",Zfr:\"ℨ\",ZHcy:\"Ж\",zhcy:\"ж\",zigrarr:\"⇝\",zopf:\"𝕫\",Zopf:\"ℤ\",Zscr:\"𝒵\",zscr:\"𝓏\",zwj:\"‍\",zwnj:\"‌\"}},{}],356:[function(e,t,n){t.exports={Aacute:\"Á\",aacute:\"á\",Acirc:\"Â\",acirc:\"â\",acute:\"´\",AElig:\"Æ\",aelig:\"æ\",Agrave:\"À\",agrave:\"à\",amp:\"&\",AMP:\"&\",Aring:\"Å\",aring:\"å\",Atilde:\"Ã\",atilde:\"ã\",Auml:\"Ä\",auml:\"ä\",brvbar:\"¦\",Ccedil:\"Ç\",ccedil:\"ç\",cedil:\"¸\",cent:\"¢\",copy:\"©\",COPY:\"©\",curren:\"¤\",deg:\"°\",divide:\"÷\",Eacute:\"É\",eacute:\"é\",Ecirc:\"Ê\",ecirc:\"ê\",Egrave:\"È\",egrave:\"è\",ETH:\"Ð\",eth:\"ð\",Euml:\"Ë\",euml:\"ë\",frac12:\"½\",frac14:\"¼\",frac34:\"¾\",gt:\">\",GT:\">\",Iacute:\"Í\",iacute:\"í\",Icirc:\"Î\",icirc:\"î\",iexcl:\"¡\",Igrave:\"Ì\",igrave:\"ì\",iquest:\"¿\",Iuml:\"Ï\",iuml:\"ï\",laquo:\"«\",lt:\"<\",LT:\"<\",macr:\"¯\",micro:\"µ\",middot:\"·\",nbsp:\" \",not:\"¬\",Ntilde:\"Ñ\",ntilde:\"ñ\",Oacute:\"Ó\",oacute:\"ó\",Ocirc:\"Ô\",ocirc:\"ô\",Ograve:\"Ò\",ograve:\"ò\",ordf:\"ª\",ordm:\"º\",Oslash:\"Ø\",oslash:\"ø\",Otilde:\"Õ\",otilde:\"õ\",Ouml:\"Ö\",ouml:\"ö\",para:\"¶\",plusmn:\"±\",pound:\"£\",quot:'\"',QUOT:'\"',raquo:\"»\",reg:\"®\",REG:\"®\",sect:\"§\",shy:\"­\",sup1:\"¹\",sup2:\"²\",sup3:\"³\",szlig:\"ß\",THORN:\"Þ\",thorn:\"þ\",times:\"×\",Uacute:\"Ú\",uacute:\"ú\",Ucirc:\"Û\",ucirc:\"û\",Ugrave:\"Ù\",ugrave:\"ù\",uml:\"¨\",Uuml:\"Ü\",uuml:\"ü\",Yacute:\"Ý\",yacute:\"ý\",yen:\"¥\",yuml:\"ÿ\"}},{}],357:[function(e,t,n){t.exports={amp:\"&\",apos:\"'\",gt:\">\",lt:\"<\",quot:'\"'}},{}],358:[function(e,t,n){\"use strict\";var a=e(\"get-intrinsic\")(\"%Object.getOwnPropertyDescriptor%\");if(a)try{a([],\"length\")}catch(r){a=null}t.exports=a},{\"get-intrinsic\":367}],359:[function(e,t,n){\"use strict\";function a(e,t){if(null==e)throw new TypeError(\"Cannot convert first argument to object\");for(var n=Object(e),a=1;a<arguments.length;a++){var r=arguments[a];if(null!=r)for(var i=Object.keys(Object(r)),o=0,s=i.length;o<s;o++){var c=i[o],u=Object.getOwnPropertyDescriptor(r,c);void 0!==u&&u.enumerable&&(n[c]=r[c])}}return n}t.exports={assign:a,polyfill:function(){Object.assign||Object.defineProperty(Object,\"assign\",{enumerable:!1,configurable:!0,writable:!0,value:a})}}},{}],360:[function(e,t,n){\"use strict\";t.exports=function e(t,n){if(t===n)return!0;if(t&&n&&\"object\"==typeof t&&\"object\"==typeof n){if(t.constructor!==n.constructor)return!1;var a,r,i;if(Array.isArray(t)){if((a=t.length)!=n.length)return!1;for(r=a;0!=r--;)if(!e(t[r],n[r]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((a=(i=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(r=a;0!=r--;)if(!Object.prototype.hasOwnProperty.call(n,i[r]))return!1;for(r=a;0!=r--;){var o=i[r];if(!e(t[o],n[o]))return!1}return!0}return t!=t&&n!=n}},{}],361:[function(e,t,n){\"use strict\";t.exports=function(e,t){t||(t={}),\"function\"==typeof t&&(t={cmp:t});var n,a=\"boolean\"==typeof t.cycles&&t.cycles,r=t.cmp&&(n=t.cmp,function(e){return function(t,a){var r={key:t,value:e[t]},i={key:a,value:e[a]};return n(r,i)}}),i=[];return function e(t){if(t&&t.toJSON&&\"function\"==typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if(\"number\"==typeof t)return isFinite(t)?\"\"+t:\"null\";if(\"object\"!=typeof t)return JSON.stringify(t);var n,o;if(Array.isArray(t)){for(o=\"[\",n=0;n<t.length;n++)n&&(o+=\",\"),o+=e(t[n])||\"null\";return o+\"]\"}if(null===t)return\"null\";if(-1!==i.indexOf(t)){if(a)return JSON.stringify(\"__cycle__\");throw new TypeError(\"Converting circular structure to JSON\")}var s=i.push(t)-1,c=Object.keys(t).sort(r&&r(t));for(o=\"\",n=0;n<c.length;n++){var u=c[n],l=e(t[u]);l&&(o&&(o+=\",\"),o+=JSON.stringify(u)+\":\"+l)}return i.splice(s,1),\"{\"+o+\"}\"}}(e)}},{}],362:[function(e,t,n){\"use strict\";t.exports=function(e){return e&&e.length>1?255===e[0]&&216===e[1]&&255===e[2]?{ext:\"jpg\",mime:\"image/jpeg\"}:137===e[0]&&80===e[1]&&78===e[2]&&71===e[3]?{ext:\"png\",mime:\"image/png\"}:71===e[0]&&73===e[1]&&70===e[2]?{ext:\"gif\",mime:\"image/gif\"}:87===e[8]&&69===e[9]&&66===e[10]&&80===e[11]?{ext:\"webp\",mime:\"image/webp\"}:70===e[0]&&76===e[1]&&73===e[2]&&70===e[3]?{ext:\"flif\",mime:\"image/flif\"}:(73===e[0]&&73===e[1]&&42===e[2]&&0===e[3]||77===e[0]&&77===e[1]&&0===e[2]&&42===e[3])&&67===e[8]&&82===e[9]?{ext:\"cr2\",mime:\"image/x-canon-cr2\"}:73===e[0]&&73===e[1]&&42===e[2]&&0===e[3]||77===e[0]&&77===e[1]&&0===e[2]&&42===e[3]?{ext:\"tif\",mime:\"image/tiff\"}:66===e[0]&&77===e[1]?{ext:\"bmp\",mime:\"image/bmp\"}:73===e[0]&&73===e[1]&&188===e[2]?{ext:\"jxr\",mime:\"image/vnd.ms-photo\"}:56===e[0]&&66===e[1]&&80===e[2]&&83===e[3]?{ext:\"psd\",mime:\"image/vnd.adobe.photoshop\"}:80===e[0]&&75===e[1]&&3===e[2]&&4===e[3]&&109===e[30]&&105===e[31]&&109===e[32]&&101===e[33]&&116===e[34]&&121===e[35]&&112===e[36]&&101===e[37]&&97===e[38]&&112===e[39]&&112===e[40]&&108===e[41]&&105===e[42]&&99===e[43]&&97===e[44]&&116===e[45]&&105===e[46]&&111===e[47]&&110===e[48]&&47===e[49]&&101===e[50]&&112===e[51]&&117===e[52]&&98===e[53]&&43===e[54]&&122===e[55]&&105===e[56]&&112===e[57]?{ext:\"epub\",mime:\"application/epub+zip\"}:80===e[0]&&75===e[1]&&3===e[2]&&4===e[3]&&77===e[30]&&69===e[31]&&84===e[32]&&65===e[33]&&45===e[34]&&73===e[35]&&78===e[36]&&70===e[37]&&47===e[38]&&109===e[39]&&111===e[40]&&122===e[41]&&105===e[42]&&108===e[43]&&108===e[44]&&97===e[45]&&46===e[46]&&114===e[47]&&115===e[48]&&97===e[49]?{ext:\"xpi\",mime:\"application/x-xpinstall\"}:80!==e[0]||75!==e[1]||3!==e[2]&&5!==e[2]&&7!==e[2]||4!==e[3]&&6!==e[3]&&8!==e[3]?117===e[257]&&115===e[258]&&116===e[259]&&97===e[260]&&114===e[261]?{ext:\"tar\",mime:\"application/x-tar\"}:82!==e[0]||97!==e[1]||114!==e[2]||33!==e[3]||26!==e[4]||7!==e[5]||0!==e[6]&&1!==e[6]?31===e[0]&&139===e[1]&&8===e[2]?{ext:\"gz\",mime:\"application/gzip\"}:66===e[0]&&90===e[1]&&104===e[2]?{ext:\"bz2\",mime:\"application/x-bzip2\"}:55===e[0]&&122===e[1]&&188===e[2]&&175===e[3]&&39===e[4]&&28===e[5]?{ext:\"7z\",mime:\"application/x-7z-compressed\"}:120===e[0]&&1===e[1]?{ext:\"dmg\",mime:\"application/x-apple-diskimage\"}:0===e[0]&&0===e[1]&&0===e[2]&&(24===e[3]||32===e[3])&&102===e[4]&&116===e[5]&&121===e[6]&&112===e[7]||51===e[0]&&103===e[1]&&112===e[2]&&53===e[3]||0===e[0]&&0===e[1]&&0===e[2]&&28===e[3]&&102===e[4]&&116===e[5]&&121===e[6]&&112===e[7]&&109===e[8]&&112===e[9]&&52===e[10]&&50===e[11]&&109===e[16]&&112===e[17]&&52===e[18]&&49===e[19]&&109===e[20]&&112===e[21]&&52===e[22]&&50===e[23]&&105===e[24]&&115===e[25]&&111===e[26]&&109===e[27]||0===e[0]&&0===e[1]&&0===e[2]&&28===e[3]&&102===e[4]&&116===e[5]&&121===e[6]&&112===e[7]&&105===e[8]&&115===e[9]&&111===e[10]&&109===e[11]||0===e[0]&&0===e[1]&&0===e[2]&&28===e[3]&&102===e[4]&&116===e[5]&&121===e[6]&&112===e[7]&&109===e[8]&&112===e[9]&&52===e[10]&&50===e[11]&&0===e[12]&&0===e[13]&&0===e[14]&&0===e[15]?{ext:\"mp4\",mime:\"video/mp4\"}:0===e[0]&&0===e[1]&&0===e[2]&&28===e[3]&&102===e[4]&&116===e[5]&&121===e[6]&&112===e[7]&&77===e[8]&&52===e[9]&&86===e[10]?{ext:\"m4v\",mime:\"video/x-m4v\"}:77===e[0]&&84===e[1]&&104===e[2]&&100===e[3]?{ext:\"mid\",mime:\"audio/midi\"}:109===e[31]&&97===e[32]&&116===e[33]&&114===e[34]&&111===e[35]&&115===e[36]&&107===e[37]&&97===e[38]?{ext:\"mkv\",mime:\"video/x-matroska\"}:26===e[0]&&69===e[1]&&223===e[2]&&163===e[3]?{ext:\"webm\",mime:\"video/webm\"}:0===e[0]&&0===e[1]&&0===e[2]&&20===e[3]&&102===e[4]&&116===e[5]&&121===e[6]&&112===e[7]?{ext:\"mov\",mime:\"video/quicktime\"}:82===e[0]&&73===e[1]&&70===e[2]&&70===e[3]&&65===e[8]&&86===e[9]&&73===e[10]?{ext:\"avi\",mime:\"video/x-msvideo\"}:48===e[0]&&38===e[1]&&178===e[2]&&117===e[3]&&142===e[4]&&102===e[5]&&207===e[6]&&17===e[7]&&166===e[8]&&217===e[9]?{ext:\"wmv\",mime:\"video/x-ms-wmv\"}:0===e[0]&&0===e[1]&&1===e[2]&&\"b\"===e[3].toString(16)[0]?{ext:\"mpg\",mime:\"video/mpeg\"}:73===e[0]&&68===e[1]&&51===e[2]||255===e[0]&&251===e[1]?{ext:\"mp3\",mime:\"audio/mpeg\"}:102===e[4]&&116===e[5]&&121===e[6]&&112===e[7]&&77===e[8]&&52===e[9]&&65===e[10]||77===e[0]&&52===e[1]&&65===e[2]&&32===e[3]?{ext:\"m4a\",mime:\"audio/m4a\"}:79===e[28]&&112===e[29]&&117===e[30]&&115===e[31]&&72===e[32]&&101===e[33]&&97===e[34]&&100===e[35]?{ext:\"opus\",mime:\"audio/opus\"}:79===e[0]&&103===e[1]&&103===e[2]&&83===e[3]?{ext:\"ogg\",mime:\"audio/ogg\"}:102===e[0]&&76===e[1]&&97===e[2]&&67===e[3]?{ext:\"flac\",mime:\"audio/x-flac\"}:82===e[0]&&73===e[1]&&70===e[2]&&70===e[3]&&87===e[8]&&65===e[9]&&86===e[10]&&69===e[11]?{ext:\"wav\",mime:\"audio/x-wav\"}:35===e[0]&&33===e[1]&&65===e[2]&&77===e[3]&&82===e[4]&&10===e[5]?{ext:\"amr\",mime:\"audio/amr\"}:37===e[0]&&80===e[1]&&68===e[2]&&70===e[3]?{ext:\"pdf\",mime:\"application/pdf\"}:77===e[0]&&90===e[1]?{ext:\"exe\",mime:\"application/x-msdownload\"}:67!==e[0]&&70!==e[0]||87!==e[1]||83!==e[2]?123===e[0]&&92===e[1]&&114===e[2]&&116===e[3]&&102===e[4]?{ext:\"rtf\",mime:\"application/rtf\"}:119===e[0]&&79===e[1]&&70===e[2]&&70===e[3]&&(0===e[4]&&1===e[5]&&0===e[6]&&0===e[7]||79===e[4]&&84===e[5]&&84===e[6]&&79===e[7])?{ext:\"woff\",mime:\"application/font-woff\"}:119===e[0]&&79===e[1]&&70===e[2]&&50===e[3]&&(0===e[4]&&1===e[5]&&0===e[6]&&0===e[7]||79===e[4]&&84===e[5]&&84===e[6]&&79===e[7])?{ext:\"woff2\",mime:\"application/font-woff\"}:76===e[34]&&80===e[35]&&(0===e[8]&&0===e[9]&&1===e[10]||1===e[8]&&0===e[9]&&2===e[10]||2===e[8]&&0===e[9]&&2===e[10])?{ext:\"eot\",mime:\"application/octet-stream\"}:0===e[0]&&1===e[1]&&0===e[2]&&0===e[3]&&0===e[4]?{ext:\"ttf\",mime:\"application/font-sfnt\"}:79===e[0]&&84===e[1]&&84===e[2]&&79===e[3]&&0===e[4]?{ext:\"otf\",mime:\"application/font-sfnt\"}:0===e[0]&&0===e[1]&&1===e[2]&&0===e[3]?{ext:\"ico\",mime:\"image/x-icon\"}:70===e[0]&&76===e[1]&&86===e[2]&&1===e[3]?{ext:\"flv\",mime:\"video/x-flv\"}:37===e[0]&&33===e[1]?{ext:\"ps\",mime:\"application/postscript\"}:253===e[0]&&55===e[1]&&122===e[2]&&88===e[3]&&90===e[4]&&0===e[5]?{ext:\"xz\",mime:\"application/x-xz\"}:83===e[0]&&81===e[1]&&76===e[2]&&105===e[3]?{ext:\"sqlite\",mime:\"application/x-sqlite3\"}:78===e[0]&&69===e[1]&&83===e[2]&&26===e[3]?{ext:\"nes\",mime:\"application/x-nintendo-nes-rom\"}:67===e[0]&&114===e[1]&&50===e[2]&&52===e[3]?{ext:\"crx\",mime:\"application/x-google-chrome-extension\"}:77===e[0]&&83===e[1]&&67===e[2]&&70===e[3]||73===e[0]&&83===e[1]&&99===e[2]&&40===e[3]?{ext:\"cab\",mime:\"application/vnd.ms-cab-compressed\"}:33===e[0]&&60===e[1]&&97===e[2]&&114===e[3]&&99===e[4]&&104===e[5]&&62===e[6]&&10===e[7]&&100===e[8]&&101===e[9]&&98===e[10]&&105===e[11]&&97===e[12]&&110===e[13]&&45===e[14]&&98===e[15]&&105===e[16]&&110===e[17]&&97===e[18]&&114===e[19]&&121===e[20]?{ext:\"deb\",mime:\"application/x-deb\"}:33===e[0]&&60===e[1]&&97===e[2]&&114===e[3]&&99===e[4]&&104===e[5]&&62===e[6]?{ext:\"ar\",mime:\"application/x-unix-archive\"}:237===e[0]&&171===e[1]&&238===e[2]&&219===e[3]?{ext:\"rpm\",mime:\"application/x-rpm\"}:31===e[0]&&160===e[1]||31===e[0]&&157===e[1]?{ext:\"Z\",mime:\"application/x-compress\"}:76===e[0]&&90===e[1]&&73===e[2]&&80===e[3]?{ext:\"lz\",mime:\"application/x-lzip\"}:208===e[0]&&207===e[1]&&17===e[2]&&224===e[3]&&161===e[4]&&177===e[5]&&26===e[6]&&225===e[7]?{ext:\"msi\",mime:\"application/x-msi\"}:null:{ext:\"swf\",mime:\"application/x-shockwave-flash\"}:{ext:\"rar\",mime:\"application/x-rar-compressed\"}:{ext:\"zip\",mime:\"application/zip\"}:null}},{}],363:[function(e,t,n){var a=Object.prototype.hasOwnProperty,r=Object.prototype.toString;t.exports=function(e,t,n){if(\"[object Function]\"!==r.call(t))throw new TypeError(\"iterator must be a function\");var i=e.length;if(i===+i)for(var o=0;o<i;o++)t.call(n,e[o],o,e);else for(var s in e)a.call(e,s)&&t.call(n,e[s],s,e)}},{}],364:[function(e,t,n){\"use strict\";var a=Object.prototype.toString,r=Math.max,i=function(e,t){for(var n=[],a=0;a<e.length;a+=1)n[a]=e[a];for(var r=0;r<t.length;r+=1)n[r+e.length]=t[r];return n};t.exports=function(e){var t=this;if(\"function\"!=typeof t||\"[object Function]\"!==a.apply(t))throw new TypeError(\"Function.prototype.bind called on incompatible \"+t);for(var n,o=function(e,t){for(var n=[],a=t||0,r=0;a<e.length;a+=1,r+=1)n[r]=e[a];return n}(arguments,1),s=r(0,t.length-o.length),c=[],u=0;u<s;u++)c[u]=\"$\"+u;if(n=Function(\"binder\",\"return function (\"+function(e,t){for(var n=\"\",a=0;a<e.length;a+=1)n+=e[a],a+1<e.length&&(n+=t);return n}(c,\",\")+\"){ return binder.apply(this,arguments); }\")((function(){if(this instanceof n){var a=t.apply(this,i(o,arguments));return Object(a)===a?a:this}return t.apply(e,i(o,arguments))})),t.prototype){var l=function(){};l.prototype=t.prototype,n.prototype=new l,l.prototype=null}return n}},{}],365:[function(e,t,n){\"use strict\";var a=e(\"./implementation\");t.exports=Function.prototype.bind||a},{\"./implementation\":364}],366:[function(e,t,n){\"use strict\";var a=Function.prototype.toString,r=/\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;t.exports=function(e){if(\"function\"!=typeof e)return null;var t=\"\";if(void 0===Function.prototype.name&&void 0===e.name){var n=a.call(e);if(n.indexOf(\"(\")>512)return t;var i=n.match(r);i&&(t=i[1])}else t=e.name;return t}},{}],367:[function(e,t,n){\"use strict\";var a,r=SyntaxError,i=Function,o=TypeError,s=function(e){try{return i('\"use strict\"; return ('+e+\").constructor;\")()}catch(t){}},c=Object.getOwnPropertyDescriptor;if(c)try{c({},\"\")}catch(E){c=null}var u=function(){throw new o},l=c?function(){try{return u}catch(e){try{return c(arguments,\"callee\").get}catch(t){return u}}}():u,p=e(\"has-symbols\")(),d=Object.getPrototypeOf||function(e){return e.__proto__},f={},h=\"undefined\"==typeof Uint8Array?a:d(Uint8Array),m={\"%AggregateError%\":\"undefined\"==typeof AggregateError?a:AggregateError,\"%Array%\":Array,\"%ArrayBuffer%\":\"undefined\"==typeof ArrayBuffer?a:ArrayBuffer,\"%ArrayIteratorPrototype%\":p?d([][Symbol.iterator]()):a,\"%AsyncFromSyncIteratorPrototype%\":a,\"%AsyncFunction%\":f,\"%AsyncGenerator%\":f,\"%AsyncGeneratorFunction%\":f,\"%AsyncIteratorPrototype%\":f,\"%Atomics%\":\"undefined\"==typeof Atomics?a:Atomics,\"%BigInt%\":\"undefined\"==typeof BigInt?a:BigInt,\"%Boolean%\":Boolean,\"%DataView%\":\"undefined\"==typeof DataView?a:DataView,\"%Date%\":Date,\"%decodeURI%\":decodeURI,\"%decodeURIComponent%\":decodeURIComponent,\"%encodeURI%\":encodeURI,\"%encodeURIComponent%\":encodeURIComponent,\"%Error%\":Error,\"%eval%\":eval,\"%EvalError%\":EvalError,\"%Float32Array%\":\"undefined\"==typeof Float32Array?a:Float32Array,\"%Float64Array%\":\"undefined\"==typeof Float64Array?a:Float64Array,\"%FinalizationRegistry%\":\"undefined\"==typeof FinalizationRegistry?a:FinalizationRegistry,\"%Function%\":i,\"%GeneratorFunction%\":f,\"%Int8Array%\":\"undefined\"==typeof Int8Array?a:Int8Array,\"%Int16Array%\":\"undefined\"==typeof Int16Array?a:Int16Array,\"%Int32Array%\":\"undefined\"==typeof Int32Array?a:Int32Array,\"%isFinite%\":isFinite,\"%isNaN%\":isNaN,\"%IteratorPrototype%\":p?d(d([][Symbol.iterator]())):a,\"%JSON%\":\"object\"==typeof JSON?JSON:a,\"%Map%\":\"undefined\"==typeof Map?a:Map,\"%MapIteratorPrototype%\":\"undefined\"!=typeof Map&&p?d((new Map)[Symbol.iterator]()):a,\"%Math%\":Math,\"%Number%\":Number,\"%Object%\":Object,\"%parseFloat%\":parseFloat,\"%parseInt%\":parseInt,\"%Promise%\":\"undefined\"==typeof Promise?a:Promise,\"%Proxy%\":\"undefined\"==typeof Proxy?a:Proxy,\"%RangeError%\":RangeError,\"%ReferenceError%\":ReferenceError,\"%Reflect%\":\"undefined\"==typeof Reflect?a:Reflect,\"%RegExp%\":RegExp,\"%Set%\":\"undefined\"==typeof Set?a:Set,\"%SetIteratorPrototype%\":\"undefined\"!=typeof Set&&p?d((new Set)[Symbol.iterator]()):a,\"%SharedArrayBuffer%\":\"undefined\"==typeof SharedArrayBuffer?a:SharedArrayBuffer,\"%String%\":String,\"%StringIteratorPrototype%\":p?d(\"\"[Symbol.iterator]()):a,\"%Symbol%\":p?Symbol:a,\"%SyntaxError%\":r,\"%ThrowTypeError%\":l,\"%TypedArray%\":h,\"%TypeError%\":o,\"%Uint8Array%\":\"undefined\"==typeof Uint8Array?a:Uint8Array,\"%Uint8ClampedArray%\":\"undefined\"==typeof Uint8ClampedArray?a:Uint8ClampedArray,\"%Uint16Array%\":\"undefined\"==typeof Uint16Array?a:Uint16Array,\"%Uint32Array%\":\"undefined\"==typeof Uint32Array?a:Uint32Array,\"%URIError%\":URIError,\"%WeakMap%\":\"undefined\"==typeof WeakMap?a:WeakMap,\"%WeakRef%\":\"undefined\"==typeof WeakRef?a:WeakRef,\"%WeakSet%\":\"undefined\"==typeof WeakSet?a:WeakSet},g=function e(t){var n;if(\"%AsyncFunction%\"===t)n=s(\"async function () {}\");else if(\"%GeneratorFunction%\"===t)n=s(\"function* () {}\");else if(\"%AsyncGeneratorFunction%\"===t)n=s(\"async function* () {}\");else if(\"%AsyncGenerator%\"===t){var a=e(\"%AsyncGeneratorFunction%\");a&&(n=a.prototype)}else if(\"%AsyncIteratorPrototype%\"===t){var r=e(\"%AsyncGenerator%\");r&&(n=d(r.prototype))}return m[t]=n,n},y={\"%ArrayBufferPrototype%\":[\"ArrayBuffer\",\"prototype\"],\"%ArrayPrototype%\":[\"Array\",\"prototype\"],\"%ArrayProto_entries%\":[\"Array\",\"prototype\",\"entries\"],\"%ArrayProto_forEach%\":[\"Array\",\"prototype\",\"forEach\"],\"%ArrayProto_keys%\":[\"Array\",\"prototype\",\"keys\"],\"%ArrayProto_values%\":[\"Array\",\"prototype\",\"values\"],\"%AsyncFunctionPrototype%\":[\"AsyncFunction\",\"prototype\"],\"%AsyncGenerator%\":[\"AsyncGeneratorFunction\",\"prototype\"],\"%AsyncGeneratorPrototype%\":[\"AsyncGeneratorFunction\",\"prototype\",\"prototype\"],\"%BooleanPrototype%\":[\"Boolean\",\"prototype\"],\"%DataViewPrototype%\":[\"DataView\",\"prototype\"],\"%DatePrototype%\":[\"Date\",\"prototype\"],\"%ErrorPrototype%\":[\"Error\",\"prototype\"],\"%EvalErrorPrototype%\":[\"EvalError\",\"prototype\"],\"%Float32ArrayPrototype%\":[\"Float32Array\",\"prototype\"],\"%Float64ArrayPrototype%\":[\"Float64Array\",\"prototype\"],\"%FunctionPrototype%\":[\"Function\",\"prototype\"],\"%Generator%\":[\"GeneratorFunction\",\"prototype\"],\"%GeneratorPrototype%\":[\"GeneratorFunction\",\"prototype\",\"prototype\"],\"%Int8ArrayPrototype%\":[\"Int8Array\",\"prototype\"],\"%Int16ArrayPrototype%\":[\"Int16Array\",\"prototype\"],\"%Int32ArrayPrototype%\":[\"Int32Array\",\"prototype\"],\"%JSONParse%\":[\"JSON\",\"parse\"],\"%JSONStringify%\":[\"JSON\",\"stringify\"],\"%MapPrototype%\":[\"Map\",\"prototype\"],\"%NumberPrototype%\":[\"Number\",\"prototype\"],\"%ObjectPrototype%\":[\"Object\",\"prototype\"],\"%ObjProto_toString%\":[\"Object\",\"prototype\",\"toString\"],\"%ObjProto_valueOf%\":[\"Object\",\"prototype\",\"valueOf\"],\"%PromisePrototype%\":[\"Promise\",\"prototype\"],\"%PromiseProto_then%\":[\"Promise\",\"prototype\",\"then\"],\"%Promise_all%\":[\"Promise\",\"all\"],\"%Promise_reject%\":[\"Promise\",\"reject\"],\"%Promise_resolve%\":[\"Promise\",\"resolve\"],\"%RangeErrorPrototype%\":[\"RangeError\",\"prototype\"],\"%ReferenceErrorPrototype%\":[\"ReferenceError\",\"prototype\"],\"%RegExpPrototype%\":[\"RegExp\",\"prototype\"],\"%SetPrototype%\":[\"Set\",\"prototype\"],\"%SharedArrayBufferPrototype%\":[\"SharedArrayBuffer\",\"prototype\"],\"%StringPrototype%\":[\"String\",\"prototype\"],\"%SymbolPrototype%\":[\"Symbol\",\"prototype\"],\"%SyntaxErrorPrototype%\":[\"SyntaxError\",\"prototype\"],\"%TypedArrayPrototype%\":[\"TypedArray\",\"prototype\"],\"%TypeErrorPrototype%\":[\"TypeError\",\"prototype\"],\"%Uint8ArrayPrototype%\":[\"Uint8Array\",\"prototype\"],\"%Uint8ClampedArrayPrototype%\":[\"Uint8ClampedArray\",\"prototype\"],\"%Uint16ArrayPrototype%\":[\"Uint16Array\",\"prototype\"],\"%Uint32ArrayPrototype%\":[\"Uint32Array\",\"prototype\"],\"%URIErrorPrototype%\":[\"URIError\",\"prototype\"],\"%WeakMapPrototype%\":[\"WeakMap\",\"prototype\"],\"%WeakSetPrototype%\":[\"WeakSet\",\"prototype\"]},v=e(\"function-bind\"),b=e(\"has\"),x=v.call(Function.call,Array.prototype.concat),w=v.call(Function.apply,Array.prototype.splice),k=v.call(Function.call,String.prototype.replace),_=v.call(Function.call,String.prototype.slice),j=/[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g,S=/\\\\(\\\\)?/g,A=function(e,t){var n,a=e;if(b(y,a)&&(a=\"%\"+(n=y[a])[0]+\"%\"),b(m,a)){var i=m[a];if(i===f&&(i=g(a)),void 0===i&&!t)throw new o(\"intrinsic \"+e+\" exists, but is not available. Please file an issue!\");return{alias:n,name:a,value:i}}throw new r(\"intrinsic \"+e+\" does not exist!\")};t.exports=function(e,t){if(\"string\"!=typeof e||0===e.length)throw new o(\"intrinsic name must be a non-empty string\");if(arguments.length>1&&\"boolean\"!=typeof t)throw new o('\"allowMissing\" argument must be a boolean');var n=function(e){var t=_(e,0,1),n=_(e,-1);if(\"%\"===t&&\"%\"!==n)throw new r(\"invalid intrinsic syntax, expected closing `%`\");if(\"%\"===n&&\"%\"!==t)throw new r(\"invalid intrinsic syntax, expected opening `%`\");var a=[];return k(e,j,(function(e,t,n,r){a[a.length]=n?k(r,S,\"$1\"):t||e})),a}(e),a=n.length>0?n[0]:\"\",i=A(\"%\"+a+\"%\",t),s=i.name,u=i.value,l=!1,p=i.alias;p&&(a=p[0],w(n,x([0,1],p)));for(var d=1,f=!0;d<n.length;d+=1){var h=n[d],g=_(h,0,1),y=_(h,-1);if(('\"'===g||\"'\"===g||\"`\"===g||'\"'===y||\"'\"===y||\"`\"===y)&&g!==y)throw new r(\"property names with quotes must have matching quotes\");if(\"constructor\"!==h&&f||(l=!0),b(m,s=\"%\"+(a+=\".\"+h)+\"%\"))u=m[s];else if(null!=u){if(!(h in u)){if(!t)throw new o(\"base intrinsic for \"+e+\" exists, but the property is not available.\");return}if(c&&d+1>=n.length){var v=c(u,h);u=(f=!!v)&&\"get\"in v&&!(\"originalValue\"in v.get)?v.get:u[h]}else f=b(u,h),u=u[h];f&&!l&&(m[s]=u)}}return u}},{\"function-bind\":365,has:370,\"has-symbols\":368}],368:[function(e,t,n){\"use strict\";var a=\"undefined\"!=typeof Symbol&&Symbol,r=e(\"./shams\");t.exports=function(){return\"function\"==typeof a&&(\"function\"==typeof Symbol&&(\"symbol\"==typeof a(\"foo\")&&(\"symbol\"==typeof Symbol(\"bar\")&&r())))}},{\"./shams\":369}],369:[function(e,t,n){\"use strict\";t.exports=function(){if(\"function\"!=typeof Symbol||\"function\"!=typeof Object.getOwnPropertySymbols)return!1;if(\"symbol\"==typeof Symbol.iterator)return!0;var e={},t=Symbol(\"test\"),n=Object(t);if(\"string\"==typeof t)return!1;if(\"[object Symbol]\"!==Object.prototype.toString.call(t))return!1;if(\"[object Symbol]\"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if(\"function\"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if(\"function\"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var a=Object.getOwnPropertySymbols(e);if(1!==a.length||a[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if(\"function\"==typeof Object.getOwnPropertyDescriptor){var r=Object.getOwnPropertyDescriptor(e,t);if(42!==r.value||!0!==r.enumerable)return!1}return!0}},{}],370:[function(e,t,n){\"use strict\";var a=e(\"function-bind\");t.exports=a.call(Function.call,Object.prototype.hasOwnProperty)},{\"function-bind\":365}],371:[function(e,t,n){function a(e){this._cbs=e||{},this.events=[]}t.exports=a;var r=e(\"./\").EVENTS;Object.keys(r).forEach((function(e){if(0===r[e])e=\"on\"+e,a.prototype[e]=function(){this.events.push([e]),this._cbs[e]&&this._cbs[e]()};else if(1===r[e])e=\"on\"+e,a.prototype[e]=function(t){this.events.push([e,t]),this._cbs[e]&&this._cbs[e](t)};else{if(2!==r[e])throw Error(\"wrong number of arguments\");e=\"on\"+e,a.prototype[e]=function(t,n){this.events.push([e,t,n]),this._cbs[e]&&this._cbs[e](t,n)}}})),a.prototype.onreset=function(){this.events=[],this._cbs.onreset&&this._cbs.onreset()},a.prototype.restart=function(){this._cbs.onreset&&this._cbs.onreset();for(var e=0,t=this.events.length;e<t;e++)if(this._cbs[this.events[e][0]]){var n=this.events[e].length;1===n?this._cbs[this.events[e][0]]():2===n?this._cbs[this.events[e][0]](this.events[e][1]):this._cbs[this.events[e][0]](this.events[e][1],this.events[e][2])}}},{\"./\":378}],372:[function(e,t,n){var a=e(\"domhandler\"),r=e(\"domutils\");function i(e,t){this.init(e,t)}function o(e,t){return r.getElementsByTagName(e,t,!0)}function s(e,t){return r.getElementsByTagName(e,t,!0,1)[0]}function c(e,t,n){return r.getText(r.getElementsByTagName(e,t,n,1)).trim()}function u(e,t,n,a,r){var i=c(n,a,r);i&&(e[t]=i)}e(\"inherits\")(i,a),i.prototype.init=a;var l=function(e){return\"rss\"===e||\"feed\"===e||\"rdf:RDF\"===e};i.prototype.onend=function(){var e,t,n={},r=s(l,this.dom);r&&(\"feed\"===r.name?(t=r.children,n.type=\"atom\",u(n,\"id\",\"id\",t),u(n,\"title\",\"title\",t),(e=s(\"link\",t))&&(e=e.attribs)&&(e=e.href)&&(n.link=e),u(n,\"description\",\"subtitle\",t),(e=c(\"updated\",t))&&(n.updated=new Date(e)),u(n,\"author\",\"email\",t,!0),n.items=o(\"entry\",t).map((function(e){var t,n={};return u(n,\"id\",\"id\",e=e.children),u(n,\"title\",\"title\",e),(t=s(\"link\",e))&&(t=t.attribs)&&(t=t.href)&&(n.link=t),(t=c(\"summary\",e)||c(\"content\",e))&&(n.description=t),(t=c(\"updated\",e))&&(n.pubDate=new Date(t)),n}))):(t=s(\"channel\",r.children).children,n.type=r.name.substr(0,3),n.id=\"\",u(n,\"title\",\"title\",t),u(n,\"link\",\"link\",t),u(n,\"description\",\"description\",t),(e=c(\"lastBuildDate\",t))&&(n.updated=new Date(e)),u(n,\"author\",\"managingEditor\",t,!0),n.items=o(\"item\",r.children).map((function(e){var t,n={};return u(n,\"id\",\"guid\",e=e.children),u(n,\"title\",\"title\",e),u(n,\"link\",\"link\",e),u(n,\"description\",\"description\",e),(t=c(\"pubDate\",e))&&(n.pubDate=new Date(t)),n})))),this.dom=n,a.prototype._handleCallback.call(this,r?null:Error(\"couldn't find root of feed\"))},t.exports=i},{domhandler:340,domutils:343,inherits:382}],373:[function(e,t,n){var a=e(\"./Tokenizer.js\"),r={input:!0,option:!0,optgroup:!0,select:!0,button:!0,datalist:!0,textarea:!0},i={tr:{tr:!0,th:!0,td:!0},th:{th:!0},td:{thead:!0,th:!0,td:!0},body:{head:!0,link:!0,script:!0},li:{li:!0},p:{p:!0},h1:{p:!0},h2:{p:!0},h3:{p:!0},h4:{p:!0},h5:{p:!0},h6:{p:!0},select:r,input:r,output:r,button:r,datalist:r,textarea:r,option:{option:!0},optgroup:{optgroup:!0}},o={__proto__:null,area:!0,base:!0,basefont:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,isindex:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},s={__proto__:null,math:!0,svg:!0},c={__proto__:null,mi:!0,mo:!0,mn:!0,ms:!0,mtext:!0,\"annotation-xml\":!0,foreignObject:!0,desc:!0,title:!0},u=/\\s|\\//;function l(e,t){this._options=t||{},this._cbs=e||{},this._tagname=\"\",this._attribname=\"\",this._attribvalue=\"\",this._attribs=null,this._stack=[],this._foreignContext=[],this.startIndex=0,this.endIndex=null,this._lowerCaseTagNames=\"lowerCaseTags\"in this._options?!!this._options.lowerCaseTags:!this._options.xmlMode,this._lowerCaseAttributeNames=\"lowerCaseAttributeNames\"in this._options?!!this._options.lowerCaseAttributeNames:!this._options.xmlMode,this._options.Tokenizer&&(a=this._options.Tokenizer),this._tokenizer=new a(this._options,this),this._cbs.onparserinit&&this._cbs.onparserinit(this)}e(\"inherits\")(l,e(\"events\").EventEmitter),l.prototype._updatePosition=function(e){null===this.endIndex?this._tokenizer._sectionStart<=e?this.startIndex=0:this.startIndex=this._tokenizer._sectionStart-e:this.startIndex=this.endIndex+1,this.endIndex=this._tokenizer.getAbsoluteIndex()},l.prototype.ontext=function(e){this._updatePosition(1),this.endIndex--,this._cbs.ontext&&this._cbs.ontext(e)},l.prototype.onopentagname=function(e){if(this._lowerCaseTagNames&&(e=e.toLowerCase()),this._tagname=e,!this._options.xmlMode&&e in i)for(var t;(t=this._stack[this._stack.length-1])in i[e];this.onclosetag(t));!this._options.xmlMode&&e in o||(this._stack.push(e),e in s?this._foreignContext.push(!0):e in c&&this._foreignContext.push(!1)),this._cbs.onopentagname&&this._cbs.onopentagname(e),this._cbs.onopentag&&(this._attribs={})},l.prototype.onopentagend=function(){this._updatePosition(1),this._attribs&&(this._cbs.onopentag&&this._cbs.onopentag(this._tagname,this._attribs),this._attribs=null),!this._options.xmlMode&&this._cbs.onclosetag&&this._tagname in o&&this._cbs.onclosetag(this._tagname),this._tagname=\"\"},l.prototype.onclosetag=function(e){if(this._updatePosition(1),this._lowerCaseTagNames&&(e=e.toLowerCase()),(e in s||e in c)&&this._foreignContext.pop(),!this._stack.length||e in o&&!this._options.xmlMode)this._options.xmlMode||\"br\"!==e&&\"p\"!==e||(this.onopentagname(e),this._closeCurrentTag());else{var t=this._stack.lastIndexOf(e);if(-1!==t)if(this._cbs.onclosetag)for(t=this._stack.length-t;t--;)this._cbs.onclosetag(this._stack.pop());else this._stack.length=t;else\"p\"!==e||this._options.xmlMode||(this.onopentagname(e),this._closeCurrentTag())}},l.prototype.onselfclosingtag=function(){this._options.xmlMode||this._options.recognizeSelfClosing||this._foreignContext[this._foreignContext.length-1]?this._closeCurrentTag():this.onopentagend()},l.prototype._closeCurrentTag=function(){var e=this._tagname;this.onopentagend(),this._stack[this._stack.length-1]===e&&(this._cbs.onclosetag&&this._cbs.onclosetag(e),this._stack.pop())},l.prototype.onattribname=function(e){this._lowerCaseAttributeNames&&(e=e.toLowerCase()),this._attribname=e},l.prototype.onattribdata=function(e){this._attribvalue+=e},l.prototype.onattribend=function(){this._cbs.onattribute&&this._cbs.onattribute(this._attribname,this._attribvalue),this._attribs&&!Object.prototype.hasOwnProperty.call(this._attribs,this._attribname)&&(this._attribs[this._attribname]=this._attribvalue),this._attribname=\"\",this._attribvalue=\"\"},l.prototype._getInstructionName=function(e){var t=e.search(u),n=t<0?e:e.substr(0,t);return this._lowerCaseTagNames&&(n=n.toLowerCase()),n},l.prototype.ondeclaration=function(e){if(this._cbs.onprocessinginstruction){var t=this._getInstructionName(e);this._cbs.onprocessinginstruction(\"!\"+t,\"!\"+e)}},l.prototype.onprocessinginstruction=function(e){if(this._cbs.onprocessinginstruction){var t=this._getInstructionName(e);this._cbs.onprocessinginstruction(\"?\"+t,\"?\"+e)}},l.prototype.oncomment=function(e){this._updatePosition(4),this._cbs.oncomment&&this._cbs.oncomment(e),this._cbs.oncommentend&&this._cbs.oncommentend()},l.prototype.oncdata=function(e){this._updatePosition(1),this._options.xmlMode||this._options.recognizeCDATA?(this._cbs.oncdatastart&&this._cbs.oncdatastart(),this._cbs.ontext&&this._cbs.ontext(e),this._cbs.oncdataend&&this._cbs.oncdataend()):this.oncomment(\"[CDATA[\"+e+\"]]\")},l.prototype.onerror=function(e){this._cbs.onerror&&this._cbs.onerror(e)},l.prototype.onend=function(){if(this._cbs.onclosetag)for(var e=this._stack.length;e>0;this._cbs.onclosetag(this._stack[--e]));this._cbs.onend&&this._cbs.onend()},l.prototype.reset=function(){this._cbs.onreset&&this._cbs.onreset(),this._tokenizer.reset(),this._tagname=\"\",this._attribname=\"\",this._attribs=null,this._stack=[],this._cbs.onparserinit&&this._cbs.onparserinit(this)},l.prototype.parseComplete=function(e){this.reset(),this.end(e)},l.prototype.write=function(e){this._tokenizer.write(e)},l.prototype.end=function(e){this._tokenizer.end(e)},l.prototype.pause=function(){this._tokenizer.pause()},l.prototype.resume=function(){this._tokenizer.resume()},l.prototype.parseChunk=l.prototype.write,l.prototype.done=l.prototype.end,t.exports=l},{\"./Tokenizer.js\":376,events:\"events\",inherits:382}],374:[function(e,t,n){function a(e){this._cbs=e||{}}t.exports=a;var r=e(\"./\").EVENTS;Object.keys(r).forEach((function(e){if(0===r[e])e=\"on\"+e,a.prototype[e]=function(){this._cbs[e]&&this._cbs[e]()};else if(1===r[e])e=\"on\"+e,a.prototype[e]=function(t){this._cbs[e]&&this._cbs[e](t)};else{if(2!==r[e])throw Error(\"wrong number of arguments\");e=\"on\"+e,a.prototype[e]=function(t,n){this._cbs[e]&&this._cbs[e](t,n)}}}))},{\"./\":378}],375:[function(e,t,n){t.exports=r;var a=e(\"./WritableStream.js\");function r(e){a.call(this,new i(this),e)}function i(e){this.scope=e}e(\"inherits\")(r,a),r.prototype.readable=!0;var o=e(\"../\").EVENTS;Object.keys(o).forEach((function(e){if(0===o[e])i.prototype[\"on\"+e]=function(){this.scope.emit(e)};else if(1===o[e])i.prototype[\"on\"+e]=function(t){this.scope.emit(e,t)};else{if(2!==o[e])throw Error(\"wrong number of arguments!\");i.prototype[\"on\"+e]=function(t,n){this.scope.emit(e,t,n)}}}))},{\"../\":378,\"./WritableStream.js\":377,inherits:382}],376:[function(e,t,n){t.exports=ge;var a=e(\"entities/lib/decode_codepoint.js\"),r=e(\"entities/maps/entities.json\"),i=e(\"entities/maps/legacy.json\"),o=e(\"entities/maps/xml.json\"),s=0,c=s++,u=s++,l=s++,p=s++,d=s++,f=s++,h=s++,m=s++,g=s++,y=s++,v=s++,b=s++,x=s++,w=s++,k=s++,_=s++,j=s++,S=s++,A=s++,E=s++,C=s++,T=s++,P=s++,D=s++,O=s++,M=s++,N=s++,B=s++,R=s++,L=s++,I=s++,F=s++,z=s++,q=s++,H=s++,U=s++,G=s++,$=s++,W=s++,V=s++,K=s++,J=s++,Y=s++,X=s++,Z=s++,Q=s++,ee=s++,te=s++,ne=s++,ae=s++,re=s++,ie=s++,oe=s++,se=s++,ce=s++,ue=0,le=ue++,pe=ue++,de=ue++;function fe(e){return\" \"===e||\"\\n\"===e||\"\\t\"===e||\"\\f\"===e||\"\\r\"===e}function he(e,t,n){var a=e.toLowerCase();return e===a?function(e){e===a?this._state=t:(this._state=n,this._index--)}:function(r){r===a||r===e?this._state=t:(this._state=n,this._index--)}}function me(e,t){var n=e.toLowerCase();return function(a){a===n||a===e?this._state=t:(this._state=l,this._index--)}}function ge(e,t){this._state=c,this._buffer=\"\",this._sectionStart=0,this._index=0,this._bufferOffset=0,this._baseState=c,this._special=le,this._cbs=t,this._running=!0,this._ended=!1,this._xmlMode=!(!e||!e.xmlMode),this._decodeEntities=!(!e||!e.decodeEntities)}ge.prototype._stateText=function(e){\"<\"===e?(this._index>this._sectionStart&&this._cbs.ontext(this._getSection()),this._state=u,this._sectionStart=this._index):this._decodeEntities&&this._special===le&&\"&\"===e&&(this._index>this._sectionStart&&this._cbs.ontext(this._getSection()),this._baseState=c,this._state=re,this._sectionStart=this._index)},ge.prototype._stateBeforeTagName=function(e){\"/\"===e?this._state=d:\"<\"===e?(this._cbs.ontext(this._getSection()),this._sectionStart=this._index):\">\"===e||this._special!==le||fe(e)?this._state=c:\"!\"===e?(this._state=k,this._sectionStart=this._index+1):\"?\"===e?(this._state=j,this._sectionStart=this._index+1):(this._state=this._xmlMode||\"s\"!==e&&\"S\"!==e?l:I,this._sectionStart=this._index)},ge.prototype._stateInTagName=function(e){(\"/\"===e||\">\"===e||fe(e))&&(this._emitToken(\"onopentagname\"),this._state=m,this._index--)},ge.prototype._stateBeforeCloseingTagName=function(e){fe(e)||(\">\"===e?this._state=c:this._special!==le?\"s\"===e||\"S\"===e?this._state=F:(this._state=c,this._index--):(this._state=f,this._sectionStart=this._index))},ge.prototype._stateInCloseingTagName=function(e){(\">\"===e||fe(e))&&(this._emitToken(\"onclosetag\"),this._state=h,this._index--)},ge.prototype._stateAfterCloseingTagName=function(e){\">\"===e&&(this._state=c,this._sectionStart=this._index+1)},ge.prototype._stateBeforeAttributeName=function(e){\">\"===e?(this._cbs.onopentagend(),this._state=c,this._sectionStart=this._index+1):\"/\"===e?this._state=p:fe(e)||(this._state=g,this._sectionStart=this._index)},ge.prototype._stateInSelfClosingTag=function(e){\">\"===e?(this._cbs.onselfclosingtag(),this._state=c,this._sectionStart=this._index+1):fe(e)||(this._state=m,this._index--)},ge.prototype._stateInAttributeName=function(e){(\"=\"===e||\"/\"===e||\">\"===e||fe(e))&&(this._cbs.onattribname(this._getSection()),this._sectionStart=-1,this._state=y,this._index--)},ge.prototype._stateAfterAttributeName=function(e){\"=\"===e?this._state=v:\"/\"===e||\">\"===e?(this._cbs.onattribend(),this._state=m,this._index--):fe(e)||(this._cbs.onattribend(),this._state=g,this._sectionStart=this._index)},ge.prototype._stateBeforeAttributeValue=function(e){'\"'===e?(this._state=b,this._sectionStart=this._index+1):\"'\"===e?(this._state=x,this._sectionStart=this._index+1):fe(e)||(this._state=w,this._sectionStart=this._index,this._index--)},ge.prototype._stateInAttributeValueDoubleQuotes=function(e){'\"'===e?(this._emitToken(\"onattribdata\"),this._cbs.onattribend(),this._state=m):this._decodeEntities&&\"&\"===e&&(this._emitToken(\"onattribdata\"),this._baseState=this._state,this._state=re,this._sectionStart=this._index)},ge.prototype._stateInAttributeValueSingleQuotes=function(e){\"'\"===e?(this._emitToken(\"onattribdata\"),this._cbs.onattribend(),this._state=m):this._decodeEntities&&\"&\"===e&&(this._emitToken(\"onattribdata\"),this._baseState=this._state,this._state=re,this._sectionStart=this._index)},ge.prototype._stateInAttributeValueNoQuotes=function(e){fe(e)||\">\"===e?(this._emitToken(\"onattribdata\"),this._cbs.onattribend(),this._state=m,this._index--):this._decodeEntities&&\"&\"===e&&(this._emitToken(\"onattribdata\"),this._baseState=this._state,this._state=re,this._sectionStart=this._index)},ge.prototype._stateBeforeDeclaration=function(e){this._state=\"[\"===e?T:\"-\"===e?S:_},ge.prototype._stateInDeclaration=function(e){\">\"===e&&(this._cbs.ondeclaration(this._getSection()),this._state=c,this._sectionStart=this._index+1)},ge.prototype._stateInProcessingInstruction=function(e){\">\"===e&&(this._cbs.onprocessinginstruction(this._getSection()),this._state=c,this._sectionStart=this._index+1)},ge.prototype._stateBeforeComment=function(e){\"-\"===e?(this._state=A,this._sectionStart=this._index+1):this._state=_},ge.prototype._stateInComment=function(e){\"-\"===e&&(this._state=E)},ge.prototype._stateAfterComment1=function(e){this._state=\"-\"===e?C:A},ge.prototype._stateAfterComment2=function(e){\">\"===e?(this._cbs.oncomment(this._buffer.substring(this._sectionStart,this._index-2)),this._state=c,this._sectionStart=this._index+1):\"-\"!==e&&(this._state=A)},ge.prototype._stateBeforeCdata1=he(\"C\",P,_),ge.prototype._stateBeforeCdata2=he(\"D\",D,_),ge.prototype._stateBeforeCdata3=he(\"A\",O,_),ge.prototype._stateBeforeCdata4=he(\"T\",M,_),ge.prototype._stateBeforeCdata5=he(\"A\",N,_),ge.prototype._stateBeforeCdata6=function(e){\"[\"===e?(this._state=B,this._sectionStart=this._index+1):(this._state=_,this._index--)},ge.prototype._stateInCdata=function(e){\"]\"===e&&(this._state=R)},ge.prototype._stateAfterCdata1=function(e){this._state=\"]\"===e?L:B},ge.prototype._stateAfterCdata2=function(e){\">\"===e?(this._cbs.oncdata(this._buffer.substring(this._sectionStart,this._index-2)),this._state=c,this._sectionStart=this._index+1):\"]\"!==e&&(this._state=B)},ge.prototype._stateBeforeSpecial=function(e){\"c\"===e||\"C\"===e?this._state=z:\"t\"===e||\"T\"===e?this._state=Y:(this._state=l,this._index--)},ge.prototype._stateBeforeSpecialEnd=function(e){this._special!==pe||\"c\"!==e&&\"C\"!==e?this._special!==de||\"t\"!==e&&\"T\"!==e?this._state=c:this._state=ee:this._state=$},ge.prototype._stateBeforeScript1=me(\"R\",q),ge.prototype._stateBeforeScript2=me(\"I\",H),ge.prototype._stateBeforeScript3=me(\"P\",U),ge.prototype._stateBeforeScript4=me(\"T\",G),ge.prototype._stateBeforeScript5=function(e){(\"/\"===e||\">\"===e||fe(e))&&(this._special=pe),this._state=l,this._index--},ge.prototype._stateAfterScript1=he(\"R\",W,c),ge.prototype._stateAfterScript2=he(\"I\",V,c),ge.prototype._stateAfterScript3=he(\"P\",K,c),ge.prototype._stateAfterScript4=he(\"T\",J,c),ge.prototype._stateAfterScript5=function(e){\">\"===e||fe(e)?(this._special=le,this._state=f,this._sectionStart=this._index-6,this._index--):this._state=c},ge.prototype._stateBeforeStyle1=me(\"Y\",X),ge.prototype._stateBeforeStyle2=me(\"L\",Z),ge.prototype._stateBeforeStyle3=me(\"E\",Q),ge.prototype._stateBeforeStyle4=function(e){(\"/\"===e||\">\"===e||fe(e))&&(this._special=de),this._state=l,this._index--},ge.prototype._stateAfterStyle1=he(\"Y\",te,c),ge.prototype._stateAfterStyle2=he(\"L\",ne,c),ge.prototype._stateAfterStyle3=he(\"E\",ae,c),ge.prototype._stateAfterStyle4=function(e){\">\"===e||fe(e)?(this._special=le,this._state=f,this._sectionStart=this._index-5,this._index--):this._state=c},ge.prototype._stateBeforeEntity=he(\"#\",ie,oe),ge.prototype._stateBeforeNumericEntity=he(\"X\",ce,se),ge.prototype._parseNamedEntityStrict=function(){if(this._sectionStart+1<this._index){var e=this._buffer.substring(this._sectionStart+1,this._index),t=this._xmlMode?o:r;t.hasOwnProperty(e)&&(this._emitPartial(t[e]),this._sectionStart=this._index+1)}},ge.prototype._parseLegacyEntity=function(){var e=this._sectionStart+1,t=this._index-e;for(t>6&&(t=6);t>=2;){var n=this._buffer.substr(e,t);if(i.hasOwnProperty(n))return this._emitPartial(i[n]),void(this._sectionStart+=t+1);t--}},ge.prototype._stateInNamedEntity=function(e){\";\"===e?(this._parseNamedEntityStrict(),this._sectionStart+1<this._index&&!this._xmlMode&&this._parseLegacyEntity(),this._state=this._baseState):(e<\"a\"||e>\"z\")&&(e<\"A\"||e>\"Z\")&&(e<\"0\"||e>\"9\")&&(this._xmlMode||this._sectionStart+1===this._index||(this._baseState!==c?\"=\"!==e&&this._parseNamedEntityStrict():this._parseLegacyEntity()),this._state=this._baseState,this._index--)},ge.prototype._decodeNumericEntity=function(e,t){var n=this._sectionStart+e;if(n!==this._index){var r=this._buffer.substring(n,this._index),i=parseInt(r,t);this._emitPartial(a(i)),this._sectionStart=this._index}else this._sectionStart--;this._state=this._baseState},ge.prototype._stateInNumericEntity=function(e){\";\"===e?(this._decodeNumericEntity(2,10),this._sectionStart++):(e<\"0\"||e>\"9\")&&(this._xmlMode?this._state=this._baseState:this._decodeNumericEntity(2,10),this._index--)},ge.prototype._stateInHexEntity=function(e){\";\"===e?(this._decodeNumericEntity(3,16),this._sectionStart++):(e<\"a\"||e>\"f\")&&(e<\"A\"||e>\"F\")&&(e<\"0\"||e>\"9\")&&(this._xmlMode?this._state=this._baseState:this._decodeNumericEntity(3,16),this._index--)},ge.prototype._cleanup=function(){this._sectionStart<0?(this._buffer=\"\",this._bufferOffset+=this._index,this._index=0):this._running&&(this._state===c?(this._sectionStart!==this._index&&this._cbs.ontext(this._buffer.substr(this._sectionStart)),this._buffer=\"\",this._bufferOffset+=this._index,this._index=0):this._sectionStart===this._index?(this._buffer=\"\",this._bufferOffset+=this._index,this._index=0):(this._buffer=this._buffer.substr(this._sectionStart),this._index-=this._sectionStart,this._bufferOffset+=this._sectionStart),this._sectionStart=0)},ge.prototype.write=function(e){this._ended&&this._cbs.onerror(Error(\".write() after done!\")),this._buffer+=e,this._parse()},ge.prototype._parse=function(){for(;this._index<this._buffer.length&&this._running;){var e=this._buffer.charAt(this._index);this._state===c?this._stateText(e):this._state===u?this._stateBeforeTagName(e):this._state===l?this._stateInTagName(e):this._state===d?this._stateBeforeCloseingTagName(e):this._state===f?this._stateInCloseingTagName(e):this._state===h?this._stateAfterCloseingTagName(e):this._state===p?this._stateInSelfClosingTag(e):this._state===m?this._stateBeforeAttributeName(e):this._state===g?this._stateInAttributeName(e):this._state===y?this._stateAfterAttributeName(e):this._state===v?this._stateBeforeAttributeValue(e):this._state===b?this._stateInAttributeValueDoubleQuotes(e):this._state===x?this._stateInAttributeValueSingleQuotes(e):this._state===w?this._stateInAttributeValueNoQuotes(e):this._state===k?this._stateBeforeDeclaration(e):this._state===_?this._stateInDeclaration(e):this._state===j?this._stateInProcessingInstruction(e):this._state===S?this._stateBeforeComment(e):this._state===A?this._stateInComment(e):this._state===E?this._stateAfterComment1(e):this._state===C?this._stateAfterComment2(e):this._state===T?this._stateBeforeCdata1(e):this._state===P?this._stateBeforeCdata2(e):this._state===D?this._stateBeforeCdata3(e):this._state===O?this._stateBeforeCdata4(e):this._state===M?this._stateBeforeCdata5(e):this._state===N?this._stateBeforeCdata6(e):this._state===B?this._stateInCdata(e):this._state===R?this._stateAfterCdata1(e):this._state===L?this._stateAfterCdata2(e):this._state===I?this._stateBeforeSpecial(e):this._state===F?this._stateBeforeSpecialEnd(e):this._state===z?this._stateBeforeScript1(e):this._state===q?this._stateBeforeScript2(e):this._state===H?this._stateBeforeScript3(e):this._state===U?this._stateBeforeScript4(e):this._state===G?this._stateBeforeScript5(e):this._state===$?this._stateAfterScript1(e):this._state===W?this._stateAfterScript2(e):this._state===V?this._stateAfterScript3(e):this._state===K?this._stateAfterScript4(e):this._state===J?this._stateAfterScript5(e):this._state===Y?this._stateBeforeStyle1(e):this._state===X?this._stateBeforeStyle2(e):this._state===Z?this._stateBeforeStyle3(e):this._state===Q?this._stateBeforeStyle4(e):this._state===ee?this._stateAfterStyle1(e):this._state===te?this._stateAfterStyle2(e):this._state===ne?this._stateAfterStyle3(e):this._state===ae?this._stateAfterStyle4(e):this._state===re?this._stateBeforeEntity(e):this._state===ie?this._stateBeforeNumericEntity(e):this._state===oe?this._stateInNamedEntity(e):this._state===se?this._stateInNumericEntity(e):this._state===ce?this._stateInHexEntity(e):this._cbs.onerror(Error(\"unknown _state\"),this._state),this._index++}this._cleanup()},ge.prototype.pause=function(){this._running=!1},ge.prototype.resume=function(){this._running=!0,this._index<this._buffer.length&&this._parse(),this._ended&&this._finish()},ge.prototype.end=function(e){this._ended&&this._cbs.onerror(Error(\".end() after done!\")),e&&this.write(e),this._ended=!0,this._running&&this._finish()},ge.prototype._finish=function(){this._sectionStart<this._index&&this._handleTrailingData(),this._cbs.onend()},ge.prototype._handleTrailingData=function(){var e=this._buffer.substr(this._sectionStart);this._state===B||this._state===R||this._state===L?this._cbs.oncdata(e):this._state===A||this._state===E||this._state===C?this._cbs.oncomment(e):this._state!==oe||this._xmlMode?this._state!==se||this._xmlMode?this._state!==ce||this._xmlMode?this._state!==l&&this._state!==m&&this._state!==v&&this._state!==y&&this._state!==g&&this._state!==x&&this._state!==b&&this._state!==w&&this._state!==f&&this._cbs.ontext(e):(this._decodeNumericEntity(3,16),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData())):(this._decodeNumericEntity(2,10),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData())):(this._parseLegacyEntity(),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData()))},ge.prototype.reset=function(){ge.call(this,{xmlMode:this._xmlMode,decodeEntities:this._decodeEntities},this._cbs)},ge.prototype.getAbsoluteIndex=function(){return this._bufferOffset+this._index},ge.prototype._getSection=function(){return this._buffer.substring(this._sectionStart,this._index)},ge.prototype._emitToken=function(e){this._cbs[e](this._getSection()),this._sectionStart=-1},ge.prototype._emitPartial=function(e){this._baseState!==c?this._cbs.onattribdata(e):this._cbs.ontext(e)}},{\"entities/lib/decode_codepoint.js\":352,\"entities/maps/entities.json\":355,\"entities/maps/legacy.json\":356,\"entities/maps/xml.json\":357}],377:[function(e,t,n){t.exports=s;var a=e(\"./Parser.js\"),r=e(\"readable-stream\").Writable,i=e(\"string_decoder\").StringDecoder,o=e(\"buffer\").Buffer;function s(e,t){var n=this._parser=new a(e,t),o=this._decoder=new i;r.call(this,{decodeStrings:!1}),this.once(\"finish\",(function(){n.end(o.end())}))}e(\"inherits\")(s,r),s.prototype._write=function(e,t,n){e instanceof o&&(e=this._decoder.write(e)),this._parser.write(e),n()}},{\"./Parser.js\":373,buffer:\"buffer\",inherits:382,\"readable-stream\":241,string_decoder:\"string_decoder\"}],378:[function(e,t,n){var a=e(\"./Parser.js\"),r=e(\"domhandler\");function i(e,n){return delete t.exports[e],t.exports[e]=n,n}t.exports={Parser:a,Tokenizer:e(\"./Tokenizer.js\"),ElementType:e(\"domelementtype\"),DomHandler:r,get FeedHandler(){return i(\"FeedHandler\",e(\"./FeedHandler.js\"))},get Stream(){return i(\"Stream\",e(\"./Stream.js\"))},get WritableStream(){return i(\"WritableStream\",e(\"./WritableStream.js\"))},get ProxyHandler(){return i(\"ProxyHandler\",e(\"./ProxyHandler.js\"))},get DomUtils(){return i(\"DomUtils\",e(\"domutils\"))},get CollectingHandler(){return i(\"CollectingHandler\",e(\"./CollectingHandler.js\"))},DefaultHandler:r,get RssHandler(){return i(\"RssHandler\",this.FeedHandler)},parseDOM:function(e,t){var n=new r(t);return new a(n,t).end(e),n.dom},parseFeed:function(e,n){var r=new t.exports.FeedHandler(n);return new a(r,n).end(e),r.dom},createDomStream:function(e,t,n){var i=new r(e,t,n);return new a(i,t)},EVENTS:{attribute:2,cdatastart:0,cdataend:0,text:1,processinginstruction:2,comment:1,commentend:0,closetag:1,opentag:2,opentagname:1,error:1,end:0}}},{\"./CollectingHandler.js\":371,\"./FeedHandler.js\":372,\"./Parser.js\":373,\"./ProxyHandler.js\":374,\"./Stream.js\":375,\"./Tokenizer.js\":376,\"./WritableStream.js\":377,domelementtype:339,domhandler:340,domutils:343}],379:[function(e,t,n){t.exports={100:{name:\"Continue\",detail:\"This means that the server has received the request headers, and that the client should proceed to send the request body (in the case of a request for which a body needs to be sent; for example, a POST request). If the request body is large, sending it to a server when a request has already been rejected based upon inappropriate headers is inefficient. To have a server check if the request could be accepted based on the request's headers alone, a client must send Expect: 100-continue as a header in its initial request and check if a 100 Continue status code is received in response before continuing (or receive 417 Expectation Failed and not continue).\"},101:{name:\"Switching Protocols\",detail:\"This means the requester has asked the server to switch protocols and the server is acknowledging that it will do so.\"},102:{name:\"Processing (WebDAV) (RFC 2518)\",detail:\"As a WebDAV request may contain many sub-requests involving file operations, it may take a long time to complete the request. This code indicates that the server has received and is processing the request, but no response is available yet. This prevents the client from timing out and assuming the request was lost.\"},103:{name:\"Checkpoint\",detail:\"This code is used in the Resumable HTTP Requests Proposal to resume aborted PUT or POST requests.\"},122:{name:\"Request-URI too long\",detail:\"This is a non-standard IE7-only code which means the URI is longer than a maximum of 2083 characters.\"},200:{name:\"OK\",detail:\"Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action.\"},201:{name:\"Created\",detail:\"The request has been fulfilled and resulted in a new resource being created.\"},202:{name:\"Accepted\",detail:\"The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place.\"},203:{name:\"Non-Authoritative Information (since HTTP/1.1)\",detail:\"The server successfully processed the request, but is returning information that may be from another source.\"},204:{name:\"No Content\",detail:\"The server successfully processed the request, but is not returning any content.\"},205:{name:\"Reset Content\",detail:\"The server successfully processed the request, but is not returning any content. Unlike a 204 response, this response requires that the requester reset the document view.\"},206:{name:\"Partial Content\",detail:\"The server is delivering only part of the resource due to a range header sent by the client. The range header is used by tools like wget to enable resuming of interrupted downloads, or split a download into multiple simultaneous streams\"},207:{name:\"Multi-Status (WebDAV) (RFC 4918)\",detail:\"The message body that follows is an XML message and can contain a number of separate response codes, depending on how many sub-requests were made.\"},208:{name:\"Already Reported (WebDAV) (RFC 5842)\",detail:\"The members of a DAV binding have already been enumerated in a previous reply to this request, and are not being included again.\"},226:{name:\"IM Used (RFC 3229)\",detail:\"The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance. \"},300:{name:\"Multiple Choices\",detail:\"Indicates multiple options for the resource that the client may follow. It, for instance, could be used to present different format options for video, list files with different extensions, or word sense disambiguation.\"},301:{name:\"Moved Permanently\",detail:\"This and all future requests should be directed to the given URI.\"},302:{name:\"Found\",detail:'This is an example of industrial practice contradicting the standard. HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302 with the functionality of a 303. Therefore, HTTP/1.1 added status codes 303 and 307 to distinguish between the two behaviours. However, some Web applications and frameworks use the 302 status code as if it were the 303.'},303:{name:\"See Other\",detail:\"The response to the request can be found under another URI using a GET method. When received in response to a POST (or PUT/DELETE), it should be assumed that the server has received the data and the redirect should be issued with a separate GET message.\"},304:{name:\"Not Modified\",detail:\"Indicates the resource has not been modified since last requested. Typically, the HTTP client provides a header like the If-Modified-Since header to provide a time against which to compare. Using this saves bandwidth and reprocessing on both the server and client, as only the header data must be sent and received in comparison to the entirety of the page being re-processed by the server, then sent again using more bandwidth of the server and client.\"},305:{name:\"Use Proxy (since HTTP/1.1)\",detail:\"Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\"},306:{name:\"Switch Proxy\",detail:'No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"'},307:{name:\"Temporary Redirect (since HTTP/1.1)\",detail:\"In this occasion, the request should be repeated with another URI, but future requests can still use the original URI. In contrast to 303, the request method should not be changed when reissuing the original request. For instance, a POST request must be repeated using another POST request.\"},308:{name:\"Resume Incomplete\",detail:\"This code is used in the Resumable HTTP Requests Proposal to resume aborted PUT or POST requests.\"},400:{name:\"Bad Request\",detail:\"The request cannot be fulfilled due to bad syntax.\"},401:{name:\"Unauthorized\",detail:\"Similar to 403 Forbidden, but specifically for use when authentication is possible but has failed or not yet been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource.\"},402:{name:\"Payment Required\",detail:'Reserved for future use. The original intention was that this code might be used as part of some form of digital cash or micropayment scheme, but that has not happened, and this code is not usually used. As an example of its use, however, Apple\\'s MobileMe service generates a 402 error (\"httpStatusCode:402\" in the Mac OS X Console log) if the MobileMe account is delinquent.'},403:{name:\"Forbidden\",detail:\"The request was a legal request, but the server is refusing to respond to it. Unlike a 401 Unauthorized response, authenticating will make no difference.\"},404:{name:\"Not Found\",detail:\"The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible.\"},405:{name:\"Method Not Allowed\",detail:\"A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.\"},406:{name:\"Not Acceptable\",detail:\"The requested resource is only capable of generating content not acceptable according to the Accept headers sent in the request.\"},407:{name:\"Proxy Authentication Required\",detail:\"The client must first authenticate itself with the proxy.\"},408:{name:\"Request Timeout\",detail:'The server timed out waiting for the request. According to W3 HTTP specifications: \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"'},409:{name:\"Conflict\",detail:\"Indicates that the request could not be processed because of conflict in the request, such as an edit conflict.\"},410:{name:\"Gone\",detail:'Indicates that the resource requested is no longer available and will not be available again. This should be used when a resource has been intentionally removed and the resource should be purged. Upon receiving a 410 status code, the client should not request the resource again in the future. Clients such as search engines should remove the resource from their indices. Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.'},411:{name:\"Length Required\",detail:\"The request did not specify the length of its content, which is required by the requested resource.\"},412:{name:\"Precondition Failed\",detail:\"The server does not meet one of the preconditions that the requester put on the request.\"},413:{name:\"Request Entity Too Large\",detail:\"The request is larger than the server is willing or able to process.\"},414:{name:\"Request-URI Too Long\",detail:\"The URI provided was too long for the server to process.\"},415:{name:\"Unsupported Media Type\",detail:\"The request entity has a media type which the server or resource does not support. For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\"},416:{name:\"Requested Range Not Satisfiable\",detail:\"The client has asked for a portion of the file, but the server cannot supply that portion. For example, if the client asked for a part of the file that lies beyond the end of the file.\"},417:{name:\"Expectation Failed\",detail:\"The server cannot meet the requirements of the Expect request-header field.\"},418:{name:\"I'm a teapot (RFC 2324)\",detail:\"This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol, and is not expected to be implemented by actual HTTP servers. However, known implementations do exist.\"},422:{name:\"Unprocessable Entity (WebDAV) (RFC 4918)\",detail:\"The request was well-formed but was unable to be followed due to semantic errors.\"},423:{name:\"Locked (WebDAV) (RFC 4918)\",detail:\"The resource that is being accessed is locked.\"},424:{name:\"Failed Dependency (WebDAV) (RFC 4918)\",detail:\"The request failed due to failure of a previous request (e.g. a PROPPATCH).\"},425:{name:\"Unordered Collection (RFC 3648)\",detail:'Defined in drafts of \"WebDAV Advanced Collections Protocol\",[14] but not present in \"Web Distributed Authoring and Versioning (WebDAV) Ordered Collections Protocol\".[15]'},426:{name:\"Upgrade Required (RFC 2817)\",detail:\"The client should switch to a different protocol such as TLS/1.0.\"},428:{name:\"Precondition Required\",detail:\"The origin server requires the request to be conditional. Intended to prevent \\\"the 'lost update' problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict.\\\"[17] Proposed in an Internet-Draft.\"},429:{name:\"Too Many Requests\",detail:\"The user has sent too many requests in a given amount of time. Intended for use with rate limiting schemes. Proposed in an Internet-Draft.\"},431:{name:\"Request Header Fields Too Large\",detail:\"The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large. Proposed in an Internet-Draft.\"},444:{name:\"No Response\",detail:\"An nginx HTTP server extension. The server returns no information to the client and closes the connection (useful as a deterrent for malware).\"},449:{name:\"Retry With\",detail:\"A Microsoft extension. The request should be retried after performing the appropriate action.\"},450:{name:\"Blocked by Windows Parental Controls\",detail:\"A Microsoft extension. This error is given when Windows Parental Controls are turned on and are blocking access to the given webpage.\"},499:{name:\"Client Closed Request\",detail:\"An Nginx HTTP server extension. This code is introduced to log the case when the connection is closed by client while HTTP server is processing its request, making server unable to send the HTTP header back.\"},500:{name:\"Internal Server Error\",detail:\"A generic error message, given when no more specific message is suitable.\"},501:{name:\"Not Implemented\",detail:\"The server either does not recognise the request method, or it lacks the ability to fulfill the request.\"},502:{name:\"Bad Gateway\",detail:\"The server was acting as a gateway or proxy and received an invalid response from the upstream server.\"},503:{name:\"Service Unavailable\",detail:\"The server is currently unavailable (because it is overloaded or down for maintenance). Generally, this is a temporary state.\"},504:{name:\"Gateway Timeout\",detail:\"The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\"},505:{name:\"HTTP Version Not Supported\",detail:\"The server does not support the HTTP protocol version used in the request.\"},506:{name:\"Variant Also Negotiates (RFC 2295)\",detail:\"Transparent content negotiation for the request results in a circular reference.[21]\"},507:{name:\"Insufficient Storage (WebDAV) (RFC 4918)\",detail:\"The server is unable to store the representation needed to complete the request.\"},508:{name:\"Loop Detected (WebDAV) (RFC 5842)\",detail:\"The server detected an infinite loop while processing the request (sent in lieu of 208).\"},509:{name:\"Bandwidth Limit Exceeded (Apache bw/limited extension)\",detail:\"This status code, while used by many servers, is not specified in any RFCs.\"},510:{name:\"Not Extended (RFC 2774)\",detail:\"Further extensions to the request are required for the server to fulfill it.[22]\"},511:{name:\"Network Authentication Required\",detail:'The client needs to authenticate to gain network access. Intended for use by intercepting proxies used to control access to the network (e.g. \"captive portals\" used to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot). Proposed in an Internet-Draft.'},598:{name:\"Network read timeout error\",detail:\"This status code is not specified in any RFCs, but is used by some HTTP proxies to signal a network read timeout behind the proxy to a client in front of the proxy.\"},599:{name:\"Network connect timeout error[23]\",detail:\"This status code is not specified in any RFCs, but is used by some HTTP proxies to signal a network connect timeout behind the proxy to a client in front of the proxy.\"}}},{}],380:[function(e,t,n){var a=e(\"./db.json\");t.exports={lookup:function(e){return a[e]||{}}}},{\"./db.json\":379}],381:[function(e,t,n){n.read=function(e,t,n,a,r){var i,o,s=8*r-a-1,c=(1<<s)-1,u=c>>1,l=-7,p=n?r-1:0,d=n?-1:1,f=e[t+p];for(p+=d,i=f&(1<<-l)-1,f>>=-l,l+=s;l>0;i=256*i+e[t+p],p+=d,l-=8);for(o=i&(1<<-l)-1,i>>=-l,l+=a;l>0;o=256*o+e[t+p],p+=d,l-=8);if(0===i)i=1-u;else{if(i===c)return o?NaN:1/0*(f?-1:1);o+=Math.pow(2,a),i-=u}return(f?-1:1)*o*Math.pow(2,i-a)},n.write=function(e,t,n,a,r,i){var o,s,c,u=8*i-r-1,l=(1<<u)-1,p=l>>1,d=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,f=a?0:i-1,h=a?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,o=l):(o=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-o))<1&&(o--,c*=2),(t+=o+p>=1?d/c:d*Math.pow(2,1-p))*c>=2&&(o++,c/=2),o+p>=l?(s=0,o=l):o+p>=1?(s=(t*c-1)*Math.pow(2,r),o+=p):(s=t*Math.pow(2,p-1)*Math.pow(2,r),o=0));r>=8;e[n+f]=255&s,f+=h,s/=256,r-=8);for(o=o<<r|s,u+=r;u>0;e[n+f]=255&o,f+=h,o/=256,u-=8);e[n+f-h]|=128*m}},{}],382:[function(e,t,n){\"function\"==typeof Object.create?t.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},{}],383:[function(e,t,n){\"use strict\";var a=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.toStringTag,r=e(\"call-bind/callBound\")(\"Object.prototype.toString\"),i=function(e){return!(a&&e&&\"object\"==typeof e&&Symbol.toStringTag in e)&&\"[object Arguments]\"===r(e)},o=function(e){return!!i(e)||null!==e&&\"object\"==typeof e&&\"number\"==typeof e.length&&e.length>=0&&\"[object Array]\"!==r(e)&&\"[object Function]\"===r(e.callee)},s=function(){return i(arguments)}();i.isLegacyArguments=o,t.exports=s?i:o},{\"call-bind/callBound\":245}],384:[function(e,t,n){function a(e){return!!e.constructor&&\"function\"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}t.exports=function(e){return null!=e&&(a(e)||function(e){return\"function\"==typeof e.readFloatLE&&\"function\"==typeof e.slice&&a(e.slice(0,0))}(e)||!!e._isBuffer)}},{}],385:[function(e,t,n){\"use strict\";var a=Object.prototype.toString,r=Function.prototype.toString,i=/^\\s*(?:function)?\\*/,o=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.toStringTag,s=Object.getPrototypeOf,c=function(){if(!o)return!1;try{return Function(\"return function*() {}\")()}catch(e){}}(),u=!(!s||!c)&&s(c);t.exports=function(e){return\"function\"==typeof e&&(!!i.test(r.call(e))||(o?s&&s(e)===u:\"[object GeneratorFunction]\"===a.call(e)))}},{}],386:[function(e,t,n){\"use strict\";t.exports=function(e){return e!=e}},{}],387:[function(e,t,n){\"use strict\";var a=e(\"call-bind\"),r=e(\"define-properties\"),i=e(\"./implementation\"),o=e(\"./polyfill\"),s=e(\"./shim\"),c=a(o(),Number);r(c,{getPolyfill:o,implementation:i,shim:s}),t.exports=c},{\"./implementation\":386,\"./polyfill\":388,\"./shim\":389,\"call-bind\":246,\"define-properties\":337}],388:[function(e,t,n){\"use strict\";var a=e(\"./implementation\");t.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN(\"a\")?Number.isNaN:a}},{\"./implementation\":386}],389:[function(e,t,n){\"use strict\";var a=e(\"define-properties\"),r=e(\"./polyfill\");t.exports=function(){var e=r();return a(Number,{isNaN:e},{isNaN:function(){return Number.isNaN!==e}}),e}},{\"./polyfill\":388,\"define-properties\":337}],390:[function(e,t,n){(function(n){(function(){\"use strict\";var a=e(\"foreach\"),r=e(\"available-typed-arrays\"),i=e(\"call-bind/callBound\"),o=i(\"Object.prototype.toString\"),s=e(\"has-symbols\")()&&\"symbol\"==typeof Symbol.toStringTag,c=r(),u=i(\"Array.prototype.indexOf\",!0)||function(e,t){for(var n=0;n<e.length;n+=1)if(e[n]===t)return n;return-1},l=i(\"String.prototype.slice\"),p={},d=e(\"es-abstract/helpers/getOwnPropertyDescriptor\"),f=Object.getPrototypeOf;s&&d&&f&&a(c,(function(e){var t=new n[e];if(!(Symbol.toStringTag in t))throw new EvalError(\"this engine has support for Symbol.toStringTag, but \"+e+\" does not have the property! Please report this.\");var a=f(t),r=d(a,Symbol.toStringTag);if(!r){var i=f(a);r=d(i,Symbol.toStringTag)}p[e]=r.get}));t.exports=function(e){if(!e||\"object\"!=typeof e)return!1;if(!s){var t=l(o(e),8,-1);return u(c,t)>-1}return!!d&&function(e){var t=!1;return a(p,(function(n,a){if(!t)try{t=n.call(e)===a}catch(r){}})),t}(e)}}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{\"available-typed-arrays\":238,\"call-bind/callBound\":245,\"es-abstract/helpers/getOwnPropertyDescriptor\":358,foreach:363,\"has-symbols\":368}],391:[function(e,t,n){var a={}.toString;t.exports=Array.isArray||function(e){return\"[object Array]\"==a.call(e)}},{}],392:[function(e,t,n){!function(e,n){\"use strict\";\"object\"==typeof t&&\"object\"==typeof t.exports?t.exports=e.document?n(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return n(e)}:n(e)}(\"undefined\"!=typeof window?window:this,(function(e,t){\"use strict\";var n=[],a=Object.getPrototypeOf,r=n.slice,i=n.flat?function(e){return n.flat.call(e)}:function(e){return n.concat.apply([],e)},o=n.push,s=n.indexOf,c={},u=c.toString,l=c.hasOwnProperty,p=l.toString,d=p.call(Object),f={},h=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},m=function(e){return null!=e&&e===e.window},g=e.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function v(e,t,n){var a,r,i=(n=n||g).createElement(\"script\");if(i.text=e,t)for(a in y)(r=t[a]||t.getAttribute&&t.getAttribute(a))&&i.setAttribute(a,r);n.head.appendChild(i).parentNode.removeChild(i)}function b(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?c[u.call(e)]||\"object\":typeof e}var x=\"3.7.1\",w=/HTML$/i,k=function(e,t){return new k.fn.init(e,t)};function _(e){var t=!!e&&\"length\"in e&&e.length,n=b(e);return!h(e)&&!m(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&t>0&&t-1 in e)}function j(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}k.fn=k.prototype={jquery:x,constructor:k,length:0,toArray:function(){return r.call(this)},get:function(e){return null==e?r.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(e){return this.pushStack(k.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(r.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(k.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(k.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:o,sort:n.sort,splice:n.splice},k.extend=k.fn.extend=function(){var e,t,n,a,r,i,o=arguments[0]||{},s=1,c=arguments.length,u=!1;for(\"boolean\"==typeof o&&(u=o,o=arguments[s]||{},s++),\"object\"==typeof o||h(o)||(o={}),s===c&&(o=this,s--);s<c;s++)if(null!=(e=arguments[s]))for(t in e)a=e[t],\"__proto__\"!==t&&o!==a&&(u&&a&&(k.isPlainObject(a)||(r=Array.isArray(a)))?(n=o[t],i=r&&!Array.isArray(n)?[]:r||k.isPlainObject(n)?n:{},r=!1,o[t]=k.extend(u,i,a)):void 0!==a&&(o[t]=a));return o},k.extend({expando:\"jQuery\"+(x+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\"[object Object]\"!==u.call(e))&&(!(t=a(e))||\"function\"==typeof(n=l.call(t,\"constructor\")&&t.constructor)&&p.call(n)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){v(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,a=0;if(_(e))for(n=e.length;a<n&&!1!==t.call(e[a],a,e[a]);a++);else for(a in e)if(!1===t.call(e[a],a,e[a]))break;return e},text:function(e){var t,n=\"\",a=0,r=e.nodeType;if(!r)for(;t=e[a++];)n+=k.text(t);return 1===r||11===r?e.textContent:9===r?e.documentElement.textContent:3===r||4===r?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&(_(Object(e))?k.merge(n,\"string\"==typeof e?[e]:e):o.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:s.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!w.test(t||n&&n.nodeName||\"HTML\")},merge:function(e,t){for(var n=+t.length,a=0,r=e.length;a<n;a++)e[r++]=t[a];return e.length=r,e},grep:function(e,t,n){for(var a=[],r=0,i=e.length,o=!n;r<i;r++)!t(e[r],r)!==o&&a.push(e[r]);return a},map:function(e,t,n){var a,r,o=0,s=[];if(_(e))for(a=e.length;o<a;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return i(s)},guid:1,support:f}),\"function\"==typeof Symbol&&(k.fn[Symbol.iterator]=n[Symbol.iterator]),k.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),(function(e,t){c[\"[object \"+t+\"]\"]=t.toLowerCase()}));var S=n.pop,A=n.sort,E=n.splice,C=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",T=new RegExp(\"^\"+C+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+C+\"+$\",\"g\");k.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var P=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;function D(e,t){return t?\"\\0\"===e?\"�\":e.slice(0,-1)+\"\\\\\"+e.charCodeAt(e.length-1).toString(16)+\" \":\"\\\\\"+e}k.escapeSelector=function(e){return(e+\"\").replace(P,D)};var O=g,M=o;!function(){var t,a,i,o,c,u,p,d,h,m,g=M,y=k.expando,v=0,b=0,x=ee(),w=ee(),_=ee(),P=ee(),D=function(e,t){return e===t&&(c=!0),0},N=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",B=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+C+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",R=\"\\\\[\"+C+\"*(\"+B+\")(?:\"+C+\"*([*^$|!~]?=)\"+C+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+B+\"))|)\"+C+\"*\\\\]\",L=\":(\"+B+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+R+\")*)|.*)\\\\)|)\",I=new RegExp(C+\"+\",\"g\"),F=new RegExp(\"^\"+C+\"*,\"+C+\"*\"),z=new RegExp(\"^\"+C+\"*([>+~]|\"+C+\")\"+C+\"*\"),q=new RegExp(C+\"|>\"),H=new RegExp(L),U=new RegExp(\"^\"+B+\"$\"),G={ID:new RegExp(\"^#(\"+B+\")\"),CLASS:new RegExp(\"^\\\\.(\"+B+\")\"),TAG:new RegExp(\"^(\"+B+\"|[*])\"),ATTR:new RegExp(\"^\"+R),PSEUDO:new RegExp(\"^\"+L),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+C+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+C+\"*(?:([+-]|)\"+C+\"*(\\\\d+)|))\"+C+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+N+\")$\",\"i\"),needsContext:new RegExp(\"^\"+C+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+C+\"*((?:-\\\\d)?\\\\d*)\"+C+\"*\\\\)|)(?=[^-]|$)\",\"i\")},$=/^(?:input|select|textarea|button)$/i,W=/^h\\d$/i,V=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,K=/[+~]/,J=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+C+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),Y=function(e,t){var n=\"0x\"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},X=function(){ce()},Z=de((function(e){return!0===e.disabled&&j(e,\"fieldset\")}),{dir:\"parentNode\",next:\"legend\"});try{g.apply(n=r.call(O.childNodes),O.childNodes),n[O.childNodes.length].nodeType}catch(be){g={apply:function(e,t){M.apply(e,r.call(t))},call:function(e){M.apply(e,r.call(arguments,1))}}}function Q(e,t,n,a){var r,i,o,s,c,l,p,m=t&&t.ownerDocument,v=t?t.nodeType:9;if(n=n||[],\"string\"!=typeof e||!e||1!==v&&9!==v&&11!==v)return n;if(!a&&(ce(t),t=t||u,d)){if(11!==v&&(c=V.exec(e)))if(r=c[1]){if(9===v){if(!(o=t.getElementById(r)))return n;if(o.id===r)return g.call(n,o),n}else if(m&&(o=m.getElementById(r))&&Q.contains(t,o)&&o.id===r)return g.call(n,o),n}else{if(c[2])return g.apply(n,t.getElementsByTagName(e)),n;if((r=c[3])&&t.getElementsByClassName)return g.apply(n,t.getElementsByClassName(r)),n}if(!(P[e+\" \"]||h&&h.test(e))){if(p=e,m=t,1===v&&(q.test(e)||z.test(e))){for((m=K.test(e)&&se(t.parentNode)||t)==t&&f.scope||((s=t.getAttribute(\"id\"))?s=k.escapeSelector(s):t.setAttribute(\"id\",s=y)),i=(l=le(e)).length;i--;)l[i]=(s?\"#\"+s:\":scope\")+\" \"+pe(l[i]);p=l.join(\",\")}try{return g.apply(n,m.querySelectorAll(p)),n}catch(b){P(e,!0)}finally{s===y&&t.removeAttribute(\"id\")}}}return ve(e.replace(T,\"$1\"),t,n,a)}function ee(){var e=[];return function t(n,r){return e.push(n+\" \")>a.cacheLength&&delete t[e.shift()],t[n+\" \"]=r}}function te(e){return e[y]=!0,e}function ne(e){var t=u.createElement(\"fieldset\");try{return!!e(t)}catch(be){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ae(e){return function(t){return j(t,\"input\")&&t.type===e}}function re(e){return function(t){return(j(t,\"input\")||j(t,\"button\"))&&t.type===e}}function ie(e){return function(t){return\"form\"in t?t.parentNode&&!1===t.disabled?\"label\"in t?\"label\"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Z(t)===e:t.disabled===e:\"label\"in t&&t.disabled===e}}function oe(e){return te((function(t){return t=+t,te((function(n,a){for(var r,i=e([],n.length,t),o=i.length;o--;)n[r=i[o]]&&(n[r]=!(a[r]=n[r]))}))}))}function se(e){return e&&void 0!==e.getElementsByTagName&&e}function ce(e){var t,n=e?e.ownerDocument||e:O;return n!=u&&9===n.nodeType&&n.documentElement?(p=(u=n).documentElement,d=!k.isXMLDoc(u),m=p.matches||p.webkitMatchesSelector||p.msMatchesSelector,p.msMatchesSelector&&O!=u&&(t=u.defaultView)&&t.top!==t&&t.addEventListener(\"unload\",X),f.getById=ne((function(e){return p.appendChild(e).id=k.expando,!u.getElementsByName||!u.getElementsByName(k.expando).length})),f.disconnectedMatch=ne((function(e){return m.call(e,\"*\")})),f.scope=ne((function(){return u.querySelectorAll(\":scope\")})),f.cssHas=ne((function(){try{return u.querySelector(\":has(*,:jqfake)\"),!1}catch(be){return!0}})),f.getById?(a.filter.ID=function(e){var t=e.replace(J,Y);return function(e){return e.getAttribute(\"id\")===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&d){var n=t.getElementById(e);return n?[n]:[]}}):(a.filter.ID=function(e){var t=e.replace(J,Y);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode(\"id\");return n&&n.value===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&d){var n,a,r,i=t.getElementById(e);if(i){if((n=i.getAttributeNode(\"id\"))&&n.value===e)return[i];for(r=t.getElementsByName(e),a=0;i=r[a++];)if((n=i.getAttributeNode(\"id\"))&&n.value===e)return[i]}return[]}}),a.find.TAG=function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},a.find.CLASS=function(e,t){if(void 0!==t.getElementsByClassName&&d)return t.getElementsByClassName(e)},h=[],ne((function(e){var t;p.appendChild(e).innerHTML=\"<a id='\"+y+\"' href='' disabled='disabled'></a><select id='\"+y+\"-\\r\\\\' disabled='disabled'><option selected=''></option></select>\",e.querySelectorAll(\"[selected]\").length||h.push(\"\\\\[\"+C+\"*(?:value|\"+N+\")\"),e.querySelectorAll(\"[id~=\"+y+\"-]\").length||h.push(\"~=\"),e.querySelectorAll(\"a#\"+y+\"+*\").length||h.push(\".#.+[+~]\"),e.querySelectorAll(\":checked\").length||h.push(\":checked\"),(t=u.createElement(\"input\")).setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"name\",\"D\"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(\":disabled\").length&&h.push(\":enabled\",\":disabled\"),(t=u.createElement(\"input\")).setAttribute(\"name\",\"\"),e.appendChild(t),e.querySelectorAll(\"[name='']\").length||h.push(\"\\\\[\"+C+\"*name\"+C+\"*=\"+C+\"*(?:''|\\\"\\\")\")})),f.cssHas||h.push(\":has\"),h=h.length&&new RegExp(h.join(\"|\")),D=function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===n?e===u||e.ownerDocument==O&&Q.contains(O,e)?-1:t===u||t.ownerDocument==O&&Q.contains(O,t)?1:o?s.call(o,e)-s.call(o,t):0:4&n?-1:1)},u):u}for(t in Q.matches=function(e,t){return Q(e,null,null,t)},Q.matchesSelector=function(e,t){if(ce(e),d&&!P[t+\" \"]&&(!h||!h.test(t)))try{var n=m.call(e,t);if(n||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(be){P(t,!0)}return Q(t,u,null,[e]).length>0},Q.contains=function(e,t){return(e.ownerDocument||e)!=u&&ce(e),k.contains(e,t)},Q.attr=function(e,t){(e.ownerDocument||e)!=u&&ce(e);var n=a.attrHandle[t.toLowerCase()],r=n&&l.call(a.attrHandle,t.toLowerCase())?n(e,t,!d):void 0;return void 0!==r?r:e.getAttribute(t)},Q.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},k.uniqueSort=function(e){var t,n=[],a=0,i=0;if(c=!f.sortStable,o=!f.sortStable&&r.call(e,0),A.call(e,D),c){for(;t=e[i++];)t===e[i]&&(a=n.push(i));for(;a--;)E.call(e,n[a],1)}return o=null,e},k.fn.uniqueSort=function(){return this.pushStack(k.uniqueSort(r.apply(this)))},a=k.expr={cacheLength:50,createPseudo:te,match:G,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(J,Y),e[3]=(e[3]||e[4]||e[5]||\"\").replace(J,Y),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||Q.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&Q.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||\"\":n&&H.test(n)&&(t=le(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(J,Y).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return j(e,t)}},CLASS:function(e){var t=x[e+\" \"];return t||(t=new RegExp(\"(^|\"+C+\")\"+e+\"(\"+C+\"|$)\"))&&x(e,(function(e){return t.test(\"string\"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute(\"class\")||\"\")}))},ATTR:function(e,t,n){return function(a){var r=Q.attr(a,e);return null==r?\"!=\"===t:!t||(r+=\"\",\"=\"===t?r===n:\"!=\"===t?r!==n:\"^=\"===t?n&&0===r.indexOf(n):\"*=\"===t?n&&r.indexOf(n)>-1:\"$=\"===t?n&&r.slice(-n.length)===n:\"~=\"===t?(\" \"+r.replace(I,\" \")+\" \").indexOf(n)>-1:\"|=\"===t&&(r===n||r.slice(0,n.length+1)===n+\"-\"))}},CHILD:function(e,t,n,a,r){var i=\"nth\"!==e.slice(0,3),o=\"last\"!==e.slice(-4),s=\"of-type\"===t;return 1===a&&0===r?function(e){return!!e.parentNode}:function(t,n,c){var u,l,p,d,f,h=i!==o?\"nextSibling\":\"previousSibling\",m=t.parentNode,g=s&&t.nodeName.toLowerCase(),b=!c&&!s,x=!1;if(m){if(i){for(;h;){for(p=t;p=p[h];)if(s?j(p,g):1===p.nodeType)return!1;f=h=\"only\"===e&&!f&&\"nextSibling\"}return!0}if(f=[o?m.firstChild:m.lastChild],o&&b){for(x=(d=(u=(l=m[y]||(m[y]={}))[e]||[])[0]===v&&u[1])&&u[2],p=d&&m.childNodes[d];p=++d&&p&&p[h]||(x=d=0)||f.pop();)if(1===p.nodeType&&++x&&p===t){l[e]=[v,d,x];break}}else if(b&&(x=d=(u=(l=t[y]||(t[y]={}))[e]||[])[0]===v&&u[1]),!1===x)for(;(p=++d&&p&&p[h]||(x=d=0)||f.pop())&&(!(s?j(p,g):1===p.nodeType)||!++x||(b&&((l=p[y]||(p[y]={}))[e]=[v,x]),p!==t)););return(x-=r)===a||x%a==0&&x/a>=0}}},PSEUDO:function(e,t){var n,r=a.pseudos[e]||a.setFilters[e.toLowerCase()]||Q.error(\"unsupported pseudo: \"+e);return r[y]?r(t):r.length>1?(n=[e,e,\"\",t],a.setFilters.hasOwnProperty(e.toLowerCase())?te((function(e,n){for(var a,i=r(e,t),o=i.length;o--;)e[a=s.call(e,i[o])]=!(n[a]=i[o])})):function(e){return r(e,0,n)}):r}},pseudos:{not:te((function(e){var t=[],n=[],a=ye(e.replace(T,\"$1\"));return a[y]?te((function(e,t,n,r){for(var i,o=a(e,null,r,[]),s=e.length;s--;)(i=o[s])&&(e[s]=!(t[s]=i))})):function(e,r,i){return t[0]=e,a(t,null,i,n),t[0]=null,!n.pop()}})),has:te((function(e){return function(t){return Q(e,t).length>0}})),contains:te((function(e){return e=e.replace(J,Y),function(t){return(t.textContent||k.text(t)).indexOf(e)>-1}})),lang:te((function(e){return U.test(e||\"\")||Q.error(\"unsupported lang: \"+e),e=e.replace(J,Y).toLowerCase(),function(t){var n;do{if(n=d?t.lang:t.getAttribute(\"xml:lang\")||t.getAttribute(\"lang\"))return(n=n.toLowerCase())===e||0===n.indexOf(e+\"-\")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===function(){try{return u.activeElement}catch(e){}}()&&u.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:ie(!1),disabled:ie(!0),checked:function(e){return j(e,\"input\")&&!!e.checked||j(e,\"option\")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!a.pseudos.empty(e)},header:function(e){return W.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){return j(e,\"input\")&&\"button\"===e.type||j(e,\"button\")},text:function(e){var t;return j(e,\"input\")&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||\"text\"===t.toLowerCase())},first:oe((function(){return[0]})),last:oe((function(e,t){return[t-1]})),eq:oe((function(e,t,n){return[n<0?n+t:n]})),even:oe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:oe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:oe((function(e,t,n){var a;for(a=n<0?n+t:n>t?t:n;--a>=0;)e.push(a);return e})),gt:oe((function(e,t,n){for(var a=n<0?n+t:n;++a<t;)e.push(a);return e}))}},a.pseudos.nth=a.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})a.pseudos[t]=ae(t);for(t in{submit:!0,reset:!0})a.pseudos[t]=re(t);function ue(){}function le(e,t){var n,r,i,o,s,c,u,l=w[e+\" \"];if(l)return t?0:l.slice(0);for(s=e,c=[],u=a.preFilter;s;){for(o in n&&!(r=F.exec(s))||(r&&(s=s.slice(r[0].length)||s),c.push(i=[])),n=!1,(r=z.exec(s))&&(n=r.shift(),i.push({value:n,type:r[0].replace(T,\" \")}),s=s.slice(n.length)),a.filter)!(r=G[o].exec(s))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?Q.error(e):w(e,c).slice(0)}function pe(e){for(var t=0,n=e.length,a=\"\";t<n;t++)a+=e[t].value;return a}function de(e,t,n){var a=t.dir,r=t.next,i=r||a,o=n&&\"parentNode\"===i,s=b++;return t.first?function(t,n,r){for(;t=t[a];)if(1===t.nodeType||o)return e(t,n,r);return!1}:function(t,n,c){var u,l,p=[v,s];if(c){for(;t=t[a];)if((1===t.nodeType||o)&&e(t,n,c))return!0}else for(;t=t[a];)if(1===t.nodeType||o)if(l=t[y]||(t[y]={}),r&&j(t,r))t=t[a]||t;else{if((u=l[i])&&u[0]===v&&u[1]===s)return p[2]=u[2];if(l[i]=p,p[2]=e(t,n,c))return!0}return!1}}function fe(e){return e.length>1?function(t,n,a){for(var r=e.length;r--;)if(!e[r](t,n,a))return!1;return!0}:e[0]}function he(e,t,n,a,r){for(var i,o=[],s=0,c=e.length,u=null!=t;s<c;s++)(i=e[s])&&(n&&!n(i,a,r)||(o.push(i),u&&t.push(s)));return o}function me(e,t,n,a,r,i){return a&&!a[y]&&(a=me(a)),r&&!r[y]&&(r=me(r,i)),te((function(i,o,c,u){var l,p,d,f,h=[],m=[],y=o.length,v=i||function(e,t,n){for(var a=0,r=t.length;a<r;a++)Q(e,t[a],n);return n}(t||\"*\",c.nodeType?[c]:c,[]),b=!e||!i&&t?v:he(v,h,e,c,u);if(n?n(b,f=r||(i?e:y||a)?[]:o,c,u):f=b,a)for(l=he(f,m),a(l,[],c,u),p=l.length;p--;)(d=l[p])&&(f[m[p]]=!(b[m[p]]=d));if(i){if(r||e){if(r){for(l=[],p=f.length;p--;)(d=f[p])&&l.push(b[p]=d);r(null,f=[],l,u)}for(p=f.length;p--;)(d=f[p])&&(l=r?s.call(i,d):h[p])>-1&&(i[l]=!(o[l]=d))}}else f=he(f===o?f.splice(y,f.length):f),r?r(null,o,f,u):g.apply(o,f)}))}function ge(e){for(var t,n,r,o=e.length,c=a.relative[e[0].type],u=c||a.relative[\" \"],l=c?1:0,p=de((function(e){return e===t}),u,!0),d=de((function(e){return s.call(t,e)>-1}),u,!0),f=[function(e,n,a){var r=!c&&(a||n!=i)||((t=n).nodeType?p(e,n,a):d(e,n,a));return t=null,r}];l<o;l++)if(n=a.relative[e[l].type])f=[de(fe(f),n)];else{if((n=a.filter[e[l].type].apply(null,e[l].matches))[y]){for(r=++l;r<o&&!a.relative[e[r].type];r++);return me(l>1&&fe(f),l>1&&pe(e.slice(0,l-1).concat({value:\" \"===e[l-2].type?\"*\":\"\"})).replace(T,\"$1\"),n,l<r&&ge(e.slice(l,r)),r<o&&ge(e=e.slice(r)),r<o&&pe(e))}f.push(n)}return fe(f)}function ye(e,t){var n,r=[],o=[],s=_[e+\" \"];if(!s){for(t||(t=le(e)),n=t.length;n--;)(s=ge(t[n]))[y]?r.push(s):o.push(s);s=_(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,s,c,l,p){var f,h,m,y=0,b=\"0\",x=o&&[],w=[],_=i,j=o||r&&a.find.TAG(\"*\",p),A=v+=null==_?1:Math.random()||.1,E=j.length;for(p&&(i=s==u||s||p);b!==E&&null!=(f=j[b]);b++){if(r&&f){for(h=0,s||f.ownerDocument==u||(ce(f),c=!d);m=e[h++];)if(m(f,s||u,c)){g.call(l,f);break}p&&(v=A)}n&&((f=!m&&f)&&y--,o&&x.push(f))}if(y+=b,n&&b!==y){for(h=0;m=t[h++];)m(x,w,s,c);if(o){if(y>0)for(;b--;)x[b]||w[b]||(w[b]=S.call(l));w=he(w)}g.apply(l,w),p&&!o&&w.length>0&&y+t.length>1&&k.uniqueSort(l)}return p&&(v=A,i=_),x};return n?te(o):o}(o,r)),s.selector=e}return s}function ve(e,t,n,r){var i,o,s,c,u,l=\"function\"==typeof e&&e,p=!r&&le(e=l.selector||e);if(n=n||[],1===p.length){if((o=p[0]=p[0].slice(0)).length>2&&\"ID\"===(s=o[0]).type&&9===t.nodeType&&d&&a.relative[o[1].type]){if(!(t=(a.find.ID(s.matches[0].replace(J,Y),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=G.needsContext.test(e)?0:o.length;i--&&(s=o[i],!a.relative[c=s.type]);)if((u=a.find[c])&&(r=u(s.matches[0].replace(J,Y),K.test(o[0].type)&&se(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&pe(o)))return g.apply(n,r),n;break}}return(l||ye(e,p))(r,t,!d,n,!t||K.test(e)&&se(t.parentNode)||t),n}ue.prototype=a.filters=a.pseudos,a.setFilters=new ue,f.sortStable=y.split(\"\").sort(D).join(\"\")===y,ce(),f.sortDetached=ne((function(e){return 1&e.compareDocumentPosition(u.createElement(\"fieldset\"))})),k.find=Q,k.expr[\":\"]=k.expr.pseudos,k.unique=k.uniqueSort,Q.compile=ye,Q.select=ve,Q.setDocument=ce,Q.tokenize=le,Q.escape=k.escapeSelector,Q.getText=k.text,Q.isXML=k.isXMLDoc,Q.selectors=k.expr,Q.support=k.support,Q.uniqueSort=k.uniqueSort}();var N=function(e,t,n){for(var a=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&k(e).is(n))break;a.push(e)}return a},B=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},R=k.expr.match.needsContext,L=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;function I(e,t,n){return h(t)?k.grep(e,(function(e,a){return!!t.call(e,a,e)!==n})):t.nodeType?k.grep(e,(function(e){return e===t!==n})):\"string\"!=typeof t?k.grep(e,(function(e){return s.call(t,e)>-1!==n})):k.filter(t,e,n)}k.filter=function(e,t,n){var a=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===a.nodeType?k.find.matchesSelector(a,e)?[a]:[]:k.find.matches(e,k.grep(t,(function(e){return 1===e.nodeType})))},k.fn.extend({find:function(e){var t,n,a=this.length,r=this;if(\"string\"!=typeof e)return this.pushStack(k(e).filter((function(){for(t=0;t<a;t++)if(k.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<a;t++)k.find(e,r[t],n);return a>1?k.uniqueSort(n):n},filter:function(e){return this.pushStack(I(this,e||[],!1))},not:function(e){return this.pushStack(I(this,e||[],!0))},is:function(e){return!!I(this,\"string\"==typeof e&&R.test(e)?k(e):e||[],!1).length}});var F,z=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(k.fn.init=function(e,t,n){var a,r;if(!e)return this;if(n=n||F,\"string\"==typeof e){if(!(a=\"<\"===e[0]&&\">\"===e[e.length-1]&&e.length>=3?[null,e,null]:z.exec(e))||!a[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(a[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(a[1],t&&t.nodeType?t.ownerDocument||t:g,!0)),L.test(a[1])&&k.isPlainObject(t))for(a in t)h(this[a])?this[a](t[a]):this.attr(a,t[a]);return this}return(r=g.getElementById(a[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):h(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,F=k(g);var q=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function U(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0}))},closest:function(e,t){var n,a=0,r=this.length,i=[],o=\"string\"!=typeof e&&k(e);if(!R.test(e))for(;a<r;a++)for(n=this[a];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&k.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?k.uniqueSort(i):i)},index:function(e){return e?\"string\"==typeof e?s.call(k(e),this[0]):s.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return N(e,\"parentNode\")},parentsUntil:function(e,t,n){return N(e,\"parentNode\",n)},next:function(e){return U(e,\"nextSibling\")},prev:function(e){return U(e,\"previousSibling\")},nextAll:function(e){return N(e,\"nextSibling\")},prevAll:function(e){return N(e,\"previousSibling\")},nextUntil:function(e,t,n){return N(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return N(e,\"previousSibling\",n)},siblings:function(e){return B((e.parentNode||{}).firstChild,e)},children:function(e){return B(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(j(e,\"template\")&&(e=e.content||e),k.merge([],e.childNodes))}},(function(e,t){k.fn[e]=function(n,a){var r=k.map(this,t,n);return\"Until\"!==e.slice(-5)&&(a=n),a&&\"string\"==typeof a&&(r=k.filter(a,r)),this.length>1&&(H[e]||k.uniqueSort(r),q.test(e)&&r.reverse()),this.pushStack(r)}}));var G=/[^\\x20\\t\\r\\n\\f]+/g;function $(e){return e}function W(e){throw e}function V(e,t,n,a){var r;try{e&&h(r=e.promise)?r.call(e).done(t).fail(n):e&&h(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(a))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(e){e=\"string\"==typeof e?function(e){var t={};return k.each(e.match(G)||[],(function(e,n){t[n]=!0})),t}(e):k.extend({},e);var t,n,a,r,i=[],o=[],s=-1,c=function(){for(r=r||e.once,a=t=!0;o.length;s=-1)for(n=o.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,r&&(i=n?[]:\"\")},u={add:function(){return i&&(n&&!t&&(s=i.length-1,o.push(n)),function t(n){k.each(n,(function(n,a){h(a)?e.unique&&u.has(a)||i.push(a):a&&a.length&&\"string\"!==b(a)&&t(a)}))}(arguments),n&&!t&&c()),this},remove:function(){return k.each(arguments,(function(e,t){for(var n;(n=k.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--})),this},has:function(e){return e?k.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return r=o=[],i=n=\"\",this},disabled:function(){return!i},lock:function(){return r=o=[],n||t||(i=n=\"\"),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!a}};return u},k.extend({Deferred:function(t){var n=[[\"notify\",\"progress\",k.Callbacks(\"memory\"),k.Callbacks(\"memory\"),2],[\"resolve\",\"done\",k.Callbacks(\"once memory\"),k.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",k.Callbacks(\"once memory\"),k.Callbacks(\"once memory\"),1,\"rejected\"]],a=\"pending\",r={state:function(){return a},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return k.Deferred((function(t){k.each(n,(function(n,a){var r=h(e[a[4]])&&e[a[4]];i[a[1]]((function(){var e=r&&r.apply(this,arguments);e&&h(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[a[0]+\"With\"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(t,a,r){var i=0;function o(t,n,a,r){return function(){var s=this,c=arguments,u=function(){var e,u;if(!(t<i)){if((e=a.apply(s,c))===n.promise())throw new TypeError(\"Thenable self-resolution\");u=e&&(\"object\"==typeof e||\"function\"==typeof e)&&e.then,h(u)?r?u.call(e,o(i,n,$,r),o(i,n,W,r)):(i++,u.call(e,o(i,n,$,r),o(i,n,W,r),o(i,n,$,n.notifyWith))):(a!==$&&(s=void 0,c=[e]),(r||n.resolveWith)(s,c))}},l=r?u:function(){try{u()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,l.error),t+1>=i&&(a!==W&&(s=void 0,c=[e]),n.rejectWith(s,c))}};t?l():(k.Deferred.getErrorHook?l.error=k.Deferred.getErrorHook():k.Deferred.getStackHook&&(l.error=k.Deferred.getStackHook()),e.setTimeout(l))}}return k.Deferred((function(e){n[0][3].add(o(0,e,h(r)?r:$,e.notifyWith)),n[1][3].add(o(0,e,h(t)?t:$)),n[2][3].add(o(0,e,h(a)?a:W))})).promise()},promise:function(e){return null!=e?k.extend(e,r):r}},i={};return k.each(n,(function(e,t){var o=t[2],s=t[5];r[t[1]]=o.add,s&&o.add((function(){a=s}),n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),o.add(t[3].fire),i[t[0]]=function(){return i[t[0]+\"With\"](this===i?void 0:this,arguments),this},i[t[0]+\"With\"]=o.fireWith})),r.promise(i),t&&t.call(i,i),i},when:function(e){var t=arguments.length,n=t,a=Array(n),i=r.call(arguments),o=k.Deferred(),s=function(e){return function(n){a[e]=this,i[e]=arguments.length>1?r.call(arguments):n,--t||o.resolveWith(a,i)}};if(t<=1&&(V(e,o.done(s(n)).resolve,o.reject,!t),\"pending\"===o.state()||h(i[n]&&i[n].then)))return o.then();for(;n--;)V(i[n],s(n),o.reject);return o.promise()}});var K=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&K.test(t.name)&&e.console.warn(\"jQuery.Deferred exception: \"+t.message,t.stack,n)},k.readyException=function(t){e.setTimeout((function(){throw t}))};var J=k.Deferred();function Y(){g.removeEventListener(\"DOMContentLoaded\",Y),e.removeEventListener(\"load\",Y),k.ready()}k.fn.ready=function(e){return J.then(e).catch((function(e){k.readyException(e)})),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0,!0!==e&&--k.readyWait>0||J.resolveWith(g,[k]))}}),k.ready.then=J.then,\"complete\"===g.readyState||\"loading\"!==g.readyState&&!g.documentElement.doScroll?e.setTimeout(k.ready):(g.addEventListener(\"DOMContentLoaded\",Y),e.addEventListener(\"load\",Y));var X=function(e,t,n,a,r,i,o){var s=0,c=e.length,u=null==n;if(\"object\"===b(n))for(s in r=!0,n)X(e,t,s,n[s],!0,i,o);else if(void 0!==a&&(r=!0,h(a)||(o=!0),u&&(o?(t.call(e,a),t=null):(u=t,t=function(e,t,n){return u.call(k(e),n)})),t))for(;s<c;s++)t(e[s],n,o?a:a.call(e[s],s,t(e[s],n)));return r?e:u?t.call(e):c?t(e[0],n):i},Z=/^-ms-/,Q=/-([a-z])/g;function ee(e,t){return t.toUpperCase()}function te(e){return e.replace(Z,\"ms-\").replace(Q,ee)}var ne=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function ae(){this.expando=k.expando+ae.uid++}ae.uid=1,ae.prototype={cache:function(e){var t=e[this.expando];return t||(t={},ne(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var a,r=this.cache(e);if(\"string\"==typeof t)r[te(t)]=n;else for(a in t)r[te(a)]=t[a];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][te(t)]},access:function(e,t,n){return void 0===t||t&&\"string\"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,a=e[this.expando];if(void 0!==a){if(void 0!==t){n=(t=Array.isArray(t)?t.map(te):(t=te(t))in a?[t]:t.match(G)||[]).length;for(;n--;)delete a[t[n]]}(void 0===t||k.isEmptyObject(a))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var re=new ae,ie=new ae,oe=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,se=/[A-Z]/g;function ce(e,t,n){var a;if(void 0===n&&1===e.nodeType)if(a=\"data-\"+t.replace(se,\"-$&\").toLowerCase(),\"string\"==typeof(n=e.getAttribute(a))){try{n=function(e){return\"true\"===e||\"false\"!==e&&(\"null\"===e?null:e===+e+\"\"?+e:oe.test(e)?JSON.parse(e):e)}(n)}catch(r){}ie.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return ie.hasData(e)||re.hasData(e)},data:function(e,t,n){return ie.access(e,t,n)},removeData:function(e,t){ie.remove(e,t)},_data:function(e,t,n){return re.access(e,t,n)},_removeData:function(e,t){re.remove(e,t)}}),k.fn.extend({data:function(e,t){var n,a,r,i=this[0],o=i&&i.attributes;if(void 0===e){if(this.length&&(r=ie.get(i),1===i.nodeType&&!re.get(i,\"hasDataAttrs\"))){for(n=o.length;n--;)o[n]&&0===(a=o[n].name).indexOf(\"data-\")&&(a=te(a.slice(5)),ce(i,a,r[a]));re.set(i,\"hasDataAttrs\",!0)}return r}return\"object\"==typeof e?this.each((function(){ie.set(this,e)})):X(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=ie.get(i,e))||void 0!==(n=ce(i,e))?n:void 0;this.each((function(){ie.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){ie.remove(this,e)}))}}),k.extend({queue:function(e,t,n){var a;if(e)return t=(t||\"fx\")+\"queue\",a=re.get(e,t),n&&(!a||Array.isArray(n)?a=re.access(e,t,k.makeArray(n)):a.push(n)),a||[]},dequeue:function(e,t){t=t||\"fx\";var n=k.queue(e,t),a=n.length,r=n.shift(),i=k._queueHooks(e,t);\"inprogress\"===r&&(r=n.shift(),a--),r&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete i.stop,r.call(e,(function(){k.dequeue(e,t)}),i)),!a&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return re.get(e,n)||re.access(e,n,{empty:k.Callbacks(\"once memory\").add((function(){re.remove(e,[t+\"queue\",n])}))})}}),k.fn.extend({queue:function(e,t){var n=2;return\"string\"!=typeof e&&(t=e,e=\"fx\",n--),arguments.length<n?k.queue(this[0],e):void 0===t?this:this.each((function(){var n=k.queue(this,e,t);k._queueHooks(this,e),\"fx\"===e&&\"inprogress\"!==n[0]&&k.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){k.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,a=1,r=k.Deferred(),i=this,o=this.length,s=function(){--a||r.resolveWith(i,[i])};for(\"string\"!=typeof e&&(t=e,e=void 0),e=e||\"fx\";o--;)(n=re.get(i[o],e+\"queueHooks\"))&&n.empty&&(a++,n.empty.add(s));return s(),r.promise(t)}});var ue=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,le=new RegExp(\"^(?:([+-])=|)(\"+ue+\")([a-z%]*)$\",\"i\"),pe=[\"Top\",\"Right\",\"Bottom\",\"Left\"],de=g.documentElement,fe=function(e){return k.contains(e.ownerDocument,e)},he={composed:!0};de.getRootNode&&(fe=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(he)===e.ownerDocument});var me=function(e,t){return\"none\"===(e=t||e).style.display||\"\"===e.style.display&&fe(e)&&\"none\"===k.css(e,\"display\")};function ge(e,t,n,a){var r,i,o=20,s=a?function(){return a.cur()}:function(){return k.css(e,t,\"\")},c=s(),u=n&&n[3]||(k.cssNumber[t]?\"\":\"px\"),l=e.nodeType&&(k.cssNumber[t]||\"px\"!==u&&+c)&&le.exec(k.css(e,t));if(l&&l[3]!==u){for(c/=2,u=u||l[3],l=+c||1;o--;)k.style(e,t,l+u),(1-i)*(1-(i=s()/c||.5))<=0&&(o=0),l/=i;l*=2,k.style(e,t,l+u),n=n||[]}return n&&(l=+l||+c||0,r=n[1]?l+(n[1]+1)*n[2]:+n[2],a&&(a.unit=u,a.start=l,a.end=r)),r}var ye={};function ve(e){var t,n=e.ownerDocument,a=e.nodeName,r=ye[a];return r||(t=n.body.appendChild(n.createElement(a)),r=k.css(t,\"display\"),t.parentNode.removeChild(t),\"none\"===r&&(r=\"block\"),ye[a]=r,r)}function be(e,t){for(var n,a,r=[],i=0,o=e.length;i<o;i++)(a=e[i]).style&&(n=a.style.display,t?(\"none\"===n&&(r[i]=re.get(a,\"display\")||null,r[i]||(a.style.display=\"\")),\"\"===a.style.display&&me(a)&&(r[i]=ve(a))):\"none\"!==n&&(r[i]=\"none\",re.set(a,\"display\",n)));for(i=0;i<o;i++)null!=r[i]&&(e[i].style.display=r[i]);return e}k.fn.extend({show:function(){return be(this,!0)},hide:function(){return be(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each((function(){me(this)?k(this).show():k(this).hide()}))}});var xe,we,ke=/^(?:checkbox|radio)$/i,_e=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,je=/^$|^module$|\\/(?:java|ecma)script/i;xe=g.createDocumentFragment().appendChild(g.createElement(\"div\")),(we=g.createElement(\"input\")).setAttribute(\"type\",\"radio\"),we.setAttribute(\"checked\",\"checked\"),we.setAttribute(\"name\",\"t\"),xe.appendChild(we),f.checkClone=xe.cloneNode(!0).cloneNode(!0).lastChild.checked,xe.innerHTML=\"<textarea>x</textarea>\",f.noCloneChecked=!!xe.cloneNode(!0).lastChild.defaultValue,xe.innerHTML=\"<option></option>\",f.option=!!xe.lastChild;var Se={thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};function Ae(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):void 0!==e.querySelectorAll?e.querySelectorAll(t||\"*\"):[],void 0===t||t&&j(e,t)?k.merge([e],n):n}function Ee(e,t){for(var n=0,a=e.length;n<a;n++)re.set(e[n],\"globalEval\",!t||re.get(t[n],\"globalEval\"))}Se.tbody=Se.tfoot=Se.colgroup=Se.caption=Se.thead,Se.th=Se.td,f.option||(Se.optgroup=Se.option=[1,\"<select multiple='multiple'>\",\"</select>\"]);var Ce=/<|&#?\\w+;/;function Te(e,t,n,a,r){for(var i,o,s,c,u,l,p=t.createDocumentFragment(),d=[],f=0,h=e.length;f<h;f++)if((i=e[f])||0===i)if(\"object\"===b(i))k.merge(d,i.nodeType?[i]:i);else if(Ce.test(i)){for(o=o||p.appendChild(t.createElement(\"div\")),s=(_e.exec(i)||[\"\",\"\"])[1].toLowerCase(),c=Se[s]||Se._default,o.innerHTML=c[1]+k.htmlPrefilter(i)+c[2],l=c[0];l--;)o=o.lastChild;k.merge(d,o.childNodes),(o=p.firstChild).textContent=\"\"}else d.push(t.createTextNode(i));for(p.textContent=\"\",f=0;i=d[f++];)if(a&&k.inArray(i,a)>-1)r&&r.push(i);else if(u=fe(i),o=Ae(p.appendChild(i),\"script\"),u&&Ee(o),n)for(l=0;i=o[l++];)je.test(i.type||\"\")&&n.push(i);return p}var Pe=/^([^.]*)(?:\\.(.+)|)/;function De(){return!0}function Oe(){return!1}function Me(e,t,n,a,r,i){var o,s;if(\"object\"==typeof t){for(s in\"string\"!=typeof n&&(a=a||n,n=void 0),t)Me(e,s,n,a,t[s],i);return e}if(null==a&&null==r?(r=n,a=n=void 0):null==r&&(\"string\"==typeof n?(r=a,a=void 0):(r=a,a=n,n=void 0)),!1===r)r=Oe;else if(!r)return e;return 1===i&&(o=r,r=function(e){return k().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=k.guid++)),e.each((function(){k.event.add(this,t,r,a,n)}))}function Ne(e,t,n){n?(re.set(e,t,!1),k.event.add(e,t,{namespace:!1,handler:function(e){var n,a=re.get(this,t);if(1&e.isTrigger&&this[t]){if(a)(k.event.special[t]||{}).delegateType&&e.stopPropagation();else if(a=r.call(arguments),re.set(this,t,a),this[t](),n=re.get(this,t),re.set(this,t,!1),a!==n)return e.stopImmediatePropagation(),e.preventDefault(),n}else a&&(re.set(this,t,k.event.trigger(a[0],a.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=De)}})):void 0===re.get(e,t)&&k.event.add(e,t,De)}k.event={global:{},add:function(e,t,n,a,r){var i,o,s,c,u,l,p,d,f,h,m,g=re.get(e);if(ne(e))for(n.handler&&(n=(i=n).handler,r=i.selector),r&&k.find.matchesSelector(de,r),n.guid||(n.guid=k.guid++),(c=g.events)||(c=g.events=Object.create(null)),(o=g.handle)||(o=g.handle=function(t){return void 0!==k&&k.event.triggered!==t.type?k.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||\"\").match(G)||[\"\"]).length;u--;)f=m=(s=Pe.exec(t[u])||[])[1],h=(s[2]||\"\").split(\".\").sort(),f&&(p=k.event.special[f]||{},f=(r?p.delegateType:p.bindType)||f,p=k.event.special[f]||{},l=k.extend({type:f,origType:m,data:a,handler:n,guid:n.guid,selector:r,needsContext:r&&k.expr.match.needsContext.test(r),namespace:h.join(\".\")},i),(d=c[f])||((d=c[f]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,a,h,o)||e.addEventListener&&e.addEventListener(f,o)),p.add&&(p.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,l):d.push(l),k.event.global[f]=!0)},remove:function(e,t,n,a,r){var i,o,s,c,u,l,p,d,f,h,m,g=re.hasData(e)&&re.get(e);if(g&&(c=g.events)){for(u=(t=(t||\"\").match(G)||[\"\"]).length;u--;)if(f=m=(s=Pe.exec(t[u])||[])[1],h=(s[2]||\"\").split(\".\").sort(),f){for(p=k.event.special[f]||{},d=c[f=(a?p.delegateType:p.bindType)||f]||[],s=s[2]&&new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),o=i=d.length;i--;)l=d[i],!r&&m!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||a&&a!==l.selector&&(\"**\"!==a||!l.selector)||(d.splice(i,1),l.selector&&d.delegateCount--,p.remove&&p.remove.call(e,l));o&&!d.length&&(p.teardown&&!1!==p.teardown.call(e,h,g.handle)||k.removeEvent(e,f,g.handle),delete c[f])}else for(f in c)k.event.remove(e,f+t[u],n,a,!0);k.isEmptyObject(c)&&re.remove(e,\"handle events\")}},dispatch:function(e){var t,n,a,r,i,o,s=new Array(arguments.length),c=k.event.fix(e),u=(re.get(this,\"events\")||Object.create(null))[c.type]||[],l=k.event.special[c.type]||{};for(s[0]=c,t=1;t<arguments.length;t++)s[t]=arguments[t];if(c.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,c)){for(o=k.event.handlers.call(this,c,u),t=0;(r=o[t++])&&!c.isPropagationStopped();)for(c.currentTarget=r.elem,n=0;(i=r.handlers[n++])&&!c.isImmediatePropagationStopped();)c.rnamespace&&!1!==i.namespace&&!c.rnamespace.test(i.namespace)||(c.handleObj=i,c.data=i.data,void 0!==(a=((k.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,s))&&!1===(c.result=a)&&(c.preventDefault(),c.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,c),c.result}},handlers:function(e,t){var n,a,r,i,o,s=[],c=t.delegateCount,u=e.target;if(c&&u.nodeType&&!(\"click\"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&(\"click\"!==e.type||!0!==u.disabled)){for(i=[],o={},n=0;n<c;n++)void 0===o[r=(a=t[n]).selector+\" \"]&&(o[r]=a.needsContext?k(r,this).index(u)>-1:k.find(r,this,null,[u]).length),o[r]&&i.push(a);i.length&&s.push({elem:u,handlers:i})}return u=this,c<t.length&&s.push({elem:u,handlers:t.slice(c)}),s},addProp:function(e,t){Object.defineProperty(k.Event.prototype,e,{enumerable:!0,configurable:!0,get:h(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ke.test(t.type)&&t.click&&j(t,\"input\")&&Ne(t,\"click\",!0),!1},trigger:function(e){var t=this||e;return ke.test(t.type)&&t.click&&j(t,\"input\")&&Ne(t,\"click\"),!0},_default:function(e){var t=e.target;return ke.test(t.type)&&t.click&&j(t,\"input\")&&re.get(t,\"click\")||j(t,\"a\")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?De:Oe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Oe,isPropagationStopped:Oe,isImmediatePropagationStopped:Oe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=De,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=De,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=De,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},k.event.addProp),k.each({focus:\"focusin\",blur:\"focusout\"},(function(e,t){function n(e){if(g.documentMode){var n=re.get(this,\"handle\"),a=k.event.fix(e);a.type=\"focusin\"===e.type?\"focus\":\"blur\",a.isSimulated=!0,n(e),a.target===a.currentTarget&&n(a)}else k.event.simulate(t,e.target,k.event.fix(e))}k.event.special[e]={setup:function(){var a;if(Ne(this,e,!0),!g.documentMode)return!1;(a=re.get(this,t))||this.addEventListener(t,n),re.set(this,t,(a||0)+1)},trigger:function(){return Ne(this,e),!0},teardown:function(){var e;if(!g.documentMode)return!1;(e=re.get(this,t)-1)?re.set(this,t,e):(this.removeEventListener(t,n),re.remove(this,t))},_default:function(t){return re.get(t.target,e)},delegateType:t},k.event.special[t]={setup:function(){var a=this.ownerDocument||this.document||this,r=g.documentMode?this:a,i=re.get(r,t);i||(g.documentMode?this.addEventListener(t,n):a.addEventListener(e,n,!0)),re.set(r,t,(i||0)+1)},teardown:function(){var a=this.ownerDocument||this.document||this,r=g.documentMode?this:a,i=re.get(r,t)-1;i?re.set(r,t,i):(g.documentMode?this.removeEventListener(t,n):a.removeEventListener(e,n,!0),re.remove(r,t))}}})),k.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},(function(e,t){k.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,a=e.relatedTarget,r=e.handleObj;return a&&(a===this||k.contains(this,a))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}})),k.fn.extend({on:function(e,t,n,a){return Me(this,e,t,n,a)},one:function(e,t,n,a){return Me(this,e,t,n,a,1)},off:function(e,t,n){var a,r;if(e&&e.preventDefault&&e.handleObj)return a=e.handleObj,k(e.delegateTarget).off(a.namespace?a.origType+\".\"+a.namespace:a.origType,a.selector,a.handler),this;if(\"object\"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&\"function\"!=typeof t||(n=t,t=void 0),!1===n&&(n=Oe),this.each((function(){k.event.remove(this,e,n,t)}))}});var Be=/<script|<style|<link/i,Re=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Le=/^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;function Ie(e,t){return j(e,\"table\")&&j(11!==t.nodeType?t:t.firstChild,\"tr\")&&k(e).children(\"tbody\")[0]||e}function Fe(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function ze(e){return\"true/\"===(e.type||\"\").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute(\"type\"),e}function qe(e,t){var n,a,r,i,o,s;if(1===t.nodeType){if(re.hasData(e)&&(s=re.get(e).events))for(r in re.remove(t,\"handle events\"),s)for(n=0,a=s[r].length;n<a;n++)k.event.add(t,r,s[r][n]);ie.hasData(e)&&(i=ie.access(e),o=k.extend({},i),ie.set(t,o))}}function He(e,t){var n=t.nodeName.toLowerCase();\"input\"===n&&ke.test(e.type)?t.checked=e.checked:\"input\"!==n&&\"textarea\"!==n||(t.defaultValue=e.defaultValue)}function Ue(e,t,n,a){t=i(t);var r,o,s,c,u,l,p=0,d=e.length,m=d-1,g=t[0],y=h(g);if(y||d>1&&\"string\"==typeof g&&!f.checkClone&&Re.test(g))return e.each((function(r){var i=e.eq(r);y&&(t[0]=g.call(this,r,i.html())),Ue(i,t,n,a)}));if(d&&(o=(r=Te(t,e[0].ownerDocument,!1,e,a)).firstChild,1===r.childNodes.length&&(r=o),o||a)){for(c=(s=k.map(Ae(r,\"script\"),Fe)).length;p<d;p++)u=r,p!==m&&(u=k.clone(u,!0,!0),c&&k.merge(s,Ae(u,\"script\"))),n.call(e[p],u,p);if(c)for(l=s[s.length-1].ownerDocument,k.map(s,ze),p=0;p<c;p++)u=s[p],je.test(u.type||\"\")&&!re.access(u,\"globalEval\")&&k.contains(l,u)&&(u.src&&\"module\"!==(u.type||\"\").toLowerCase()?k._evalUrl&&!u.noModule&&k._evalUrl(u.src,{nonce:u.nonce||u.getAttribute(\"nonce\")},l):v(u.textContent.replace(Le,\"\"),u,l))}return e}function Ge(e,t,n){for(var a,r=t?k.filter(t,e):e,i=0;null!=(a=r[i]);i++)n||1!==a.nodeType||k.cleanData(Ae(a)),a.parentNode&&(n&&fe(a)&&Ee(Ae(a,\"script\")),a.parentNode.removeChild(a));return e}k.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var a,r,i,o,s=e.cloneNode(!0),c=fe(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(o=Ae(s),a=0,r=(i=Ae(e)).length;a<r;a++)He(i[a],o[a]);if(t)if(n)for(i=i||Ae(e),o=o||Ae(s),a=0,r=i.length;a<r;a++)qe(i[a],o[a]);else qe(e,s);return(o=Ae(s,\"script\")).length>0&&Ee(o,!c&&Ae(e,\"script\")),s},cleanData:function(e){for(var t,n,a,r=k.event.special,i=0;void 0!==(n=e[i]);i++)if(ne(n)){if(t=n[re.expando]){if(t.events)for(a in t.events)r[a]?k.event.remove(n,a):k.removeEvent(n,a,t.handle);n[re.expando]=void 0}n[ie.expando]&&(n[ie.expando]=void 0)}}}),k.fn.extend({detach:function(e){return Ge(this,e,!0)},remove:function(e){return Ge(this,e)},text:function(e){return X(this,(function(e){return void 0===e?k.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ue(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ie(this,e).appendChild(e)}))},prepend:function(){return Ue(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ie(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ue(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ue(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(Ae(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return k.clone(this,e,t)}))},html:function(e){return X(this,(function(e){var t=this[0]||{},n=0,a=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!Be.test(e)&&!Se[(_e.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<a;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(Ae(t,!1)),t.innerHTML=e);t=0}catch(r){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ue(this,arguments,(function(t){var n=this.parentNode;k.inArray(this,e)<0&&(k.cleanData(Ae(this)),n&&n.replaceChild(t,this))}),e)}}),k.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},(function(e,t){k.fn[e]=function(e){for(var n,a=[],r=k(e),i=r.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),k(r[s])[t](n),o.apply(a,n.get());return this.pushStack(a)}}));var $e=new RegExp(\"^(\"+ue+\")(?!px)[a-z%]+$\",\"i\"),We=/^--/,Ve=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Ke=function(e,t,n){var a,r,i={};for(r in t)i[r]=e.style[r],e.style[r]=t[r];for(r in a=n.call(e),t)e.style[r]=i[r];return a},Je=new RegExp(pe.join(\"|\"),\"i\");function Ye(e,t,n){var a,r,i,o,s=We.test(t),c=e.style;return(n=n||Ve(e))&&(o=n.getPropertyValue(t)||n[t],s&&o&&(o=o.replace(T,\"$1\")||void 0),\"\"!==o||fe(e)||(o=k.style(e,t)),!f.pixelBoxStyles()&&$e.test(o)&&Je.test(t)&&(a=c.width,r=c.minWidth,i=c.maxWidth,c.minWidth=c.maxWidth=c.width=o,o=n.width,c.width=a,c.minWidth=r,c.maxWidth=i)),void 0!==o?o+\"\":o}function Xe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){u.style.cssText=\"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\",l.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\",de.appendChild(u).appendChild(l);var t=e.getComputedStyle(l);a=\"1%\"!==t.top,c=12===n(t.marginLeft),l.style.right=\"60%\",o=36===n(t.right),r=36===n(t.width),l.style.position=\"absolute\",i=12===n(l.offsetWidth/3),de.removeChild(u),l=null}}function n(e){return Math.round(parseFloat(e))}var a,r,i,o,s,c,u=g.createElement(\"div\"),l=g.createElement(\"div\");l.style&&(l.style.backgroundClip=\"content-box\",l.cloneNode(!0).style.backgroundClip=\"\",f.clearCloneStyle=\"content-box\"===l.style.backgroundClip,k.extend(f,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),o},pixelPosition:function(){return t(),a},reliableMarginLeft:function(){return t(),c},scrollboxSize:function(){return t(),i},reliableTrDimensions:function(){var t,n,a,r;return null==s&&(t=g.createElement(\"table\"),n=g.createElement(\"tr\"),a=g.createElement(\"div\"),t.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\",n.style.cssText=\"box-sizing:content-box;border:1px solid\",n.style.height=\"1px\",a.style.height=\"9px\",a.style.display=\"block\",de.appendChild(t).appendChild(n).appendChild(a),r=e.getComputedStyle(n),s=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===n.offsetHeight,de.removeChild(t)),s}}))}();var Ze=[\"Webkit\",\"Moz\",\"ms\"],Qe=g.createElement(\"div\").style,et={};function tt(e){var t=k.cssProps[e]||et[e];return t||(e in Qe?e:et[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ze.length;n--;)if((e=Ze[n]+t)in Qe)return e}(e)||e)}var nt=/^(none|table(?!-c[ea]).+)/,at={position:\"absolute\",visibility:\"hidden\",display:\"block\"},rt={letterSpacing:\"0\",fontWeight:\"400\"};function it(e,t,n){var a=le.exec(t);return a?Math.max(0,a[2]-(n||0))+(a[3]||\"px\"):t}function ot(e,t,n,a,r,i){var o=\"width\"===t?1:0,s=0,c=0,u=0;if(n===(a?\"border\":\"content\"))return 0;for(;o<4;o+=2)\"margin\"===n&&(u+=k.css(e,n+pe[o],!0,r)),a?(\"content\"===n&&(c-=k.css(e,\"padding\"+pe[o],!0,r)),\"margin\"!==n&&(c-=k.css(e,\"border\"+pe[o]+\"Width\",!0,r))):(c+=k.css(e,\"padding\"+pe[o],!0,r),\"padding\"!==n?c+=k.css(e,\"border\"+pe[o]+\"Width\",!0,r):s+=k.css(e,\"border\"+pe[o]+\"Width\",!0,r));return!a&&i>=0&&(c+=Math.max(0,Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-i-c-s-.5))||0),c+u}function st(e,t,n){var a=Ve(e),r=(!f.boxSizingReliable()||n)&&\"border-box\"===k.css(e,\"boxSizing\",!1,a),i=r,o=Ye(e,t,a),s=\"offset\"+t[0].toUpperCase()+t.slice(1);if($e.test(o)){if(!n)return o;o=\"auto\"}return(!f.boxSizingReliable()&&r||!f.reliableTrDimensions()&&j(e,\"tr\")||\"auto\"===o||!parseFloat(o)&&\"inline\"===k.css(e,\"display\",!1,a))&&e.getClientRects().length&&(r=\"border-box\"===k.css(e,\"boxSizing\",!1,a),(i=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+ot(e,t,n||(r?\"border\":\"content\"),i,a,o)+\"px\"}function ct(e,t,n,a,r){return new ct.prototype.init(e,t,n,a,r)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ye(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,a){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,i,o,s=te(t),c=We.test(t),u=e.style;if(c||(t=tt(s)),o=k.cssHooks[t]||k.cssHooks[s],void 0===n)return o&&\"get\"in o&&void 0!==(r=o.get(e,!1,a))?r:u[t];\"string\"===(i=typeof n)&&(r=le.exec(n))&&r[1]&&(n=ge(e,t,r),i=\"number\"),null!=n&&n==n&&(\"number\"!==i||c||(n+=r&&r[3]||(k.cssNumber[s]?\"\":\"px\")),f.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(u[t]=\"inherit\"),o&&\"set\"in o&&void 0===(n=o.set(e,n,a))||(c?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,a){var r,i,o,s=te(t);return We.test(t)||(t=tt(s)),(o=k.cssHooks[t]||k.cssHooks[s])&&\"get\"in o&&(r=o.get(e,!0,n)),void 0===r&&(r=Ye(e,t,a)),\"normal\"===r&&t in rt&&(r=rt[t]),\"\"===n||n?(i=parseFloat(r),!0===n||isFinite(i)?i||0:r):r}}),k.each([\"height\",\"width\"],(function(e,t){k.cssHooks[t]={get:function(e,n,a){if(n)return!nt.test(k.css(e,\"display\"))||e.getClientRects().length&&e.getBoundingClientRect().width?st(e,t,a):Ke(e,at,(function(){return st(e,t,a)}))},set:function(e,n,a){var r,i=Ve(e),o=!f.scrollboxSize()&&\"absolute\"===i.position,s=(o||a)&&\"border-box\"===k.css(e,\"boxSizing\",!1,i),c=a?ot(e,t,a,s,i):0;return s&&o&&(c-=Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-ot(e,t,\"border\",!1,i)-.5)),c&&(r=le.exec(n))&&\"px\"!==(r[3]||\"px\")&&(e.style[t]=n,n=k.css(e,t)),it(0,n,c)}}})),k.cssHooks.marginLeft=Xe(f.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ye(e,\"marginLeft\"))||e.getBoundingClientRect().left-Ke(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+\"px\"})),k.each({margin:\"\",padding:\"\",border:\"Width\"},(function(e,t){k.cssHooks[e+t]={expand:function(n){for(var a=0,r={},i=\"string\"==typeof n?n.split(\" \"):[n];a<4;a++)r[e+pe[a]+t]=i[a]||i[a-2]||i[0];return r}},\"margin\"!==e&&(k.cssHooks[e+t].set=it)})),k.fn.extend({css:function(e,t){return X(this,(function(e,t,n){var a,r,i={},o=0;if(Array.isArray(t)){for(a=Ve(e),r=t.length;o<r;o++)i[t[o]]=k.css(e,t[o],!1,a);return i}return void 0!==n?k.style(e,t,n):k.css(e,t)}),e,t,arguments.length>1)}}),k.Tween=ct,ct.prototype={constructor:ct,init:function(e,t,n,a,r,i){this.elem=e,this.prop=n,this.easing=r||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=a,this.unit=i||(k.cssNumber[n]?\"\":\"px\")},cur:function(){var e=ct.propHooks[this.prop];return e&&e.get?e.get(this):ct.propHooks._default.get(this)},run:function(e){var t,n=ct.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ct.propHooks._default.set(this),this}},ct.prototype.init.prototype=ct.prototype,ct.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,\"\"))&&\"auto\"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[tt(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}},ct.propHooks.scrollTop=ct.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:\"swing\"},k.fx=ct.prototype.init,k.fx.step={};var ut,lt,pt=/^(?:toggle|show|hide)$/,dt=/queueHooks$/;function ft(){lt&&(!1===g.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(ft):e.setTimeout(ft,k.fx.interval),k.fx.tick())}function ht(){return e.setTimeout((function(){ut=void 0})),ut=Date.now()}function mt(e,t){var n,a=0,r={height:e};for(t=t?1:0;a<4;a+=2-t)r[\"margin\"+(n=pe[a])]=r[\"padding\"+n]=e;return t&&(r.opacity=r.width=e),r}function gt(e,t,n){for(var a,r=(yt.tweeners[t]||[]).concat(yt.tweeners[\"*\"]),i=0,o=r.length;i<o;i++)if(a=r[i].call(n,t,e))return a}function yt(e,t,n){var a,r,i=0,o=yt.prefilters.length,s=k.Deferred().always((function(){delete c.elem})),c=function(){if(r)return!1;for(var t=ut||ht(),n=Math.max(0,u.startTime+u.duration-t),a=1-(n/u.duration||0),i=0,o=u.tweens.length;i<o;i++)u.tweens[i].run(a);return s.notifyWith(e,[u,a,n]),a<1&&o?n:(o||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:k.extend({},t),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},n),originalProperties:t,originalOptions:n,startTime:ut||ht(),duration:n.duration,tweens:[],createTween:function(t,n){var a=k.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(a),a},stop:function(t){var n=0,a=t?u.tweens.length:0;if(r)return this;for(r=!0;n<a;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),l=u.props;for(!function(e,t){var n,a,r,i,o;for(n in e)if(r=t[a=te(n)],i=e[n],Array.isArray(i)&&(r=i[1],i=e[n]=i[0]),n!==a&&(e[a]=i,delete e[n]),(o=k.cssHooks[a])&&\"expand\"in o)for(n in i=o.expand(i),delete e[a],i)n in e||(e[n]=i[n],t[n]=r);else t[a]=r}(l,u.opts.specialEasing);i<o;i++)if(a=yt.prefilters[i].call(u,e,l,u.opts))return h(a.stop)&&(k._queueHooks(u.elem,u.opts.queue).stop=a.stop.bind(a)),a;return k.map(l,gt,u),h(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),k.fx.timer(k.extend(c,{elem:e,anim:u,queue:u.opts.queue})),u}k.Animation=k.extend(yt,{tweeners:{\"*\":[function(e,t){var n=this.createTween(e,t);return ge(n.elem,e,le.exec(t),n),n}]},tweener:function(e,t){h(e)?(t=e,e=[\"*\"]):e=e.match(G);for(var n,a=0,r=e.length;a<r;a++)n=e[a],yt.tweeners[n]=yt.tweeners[n]||[],yt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var a,r,i,o,s,c,u,l,p=\"width\"in t||\"height\"in t,d=this,f={},h=e.style,m=e.nodeType&&me(e),g=re.get(e,\"fxshow\");for(a in n.queue||(null==(o=k._queueHooks(e,\"fx\")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,d.always((function(){d.always((function(){o.unqueued--,k.queue(e,\"fx\").length||o.empty.fire()}))}))),t)if(r=t[a],pt.test(r)){if(delete t[a],i=i||\"toggle\"===r,r===(m?\"hide\":\"show\")){if(\"show\"!==r||!g||void 0===g[a])continue;m=!0}f[a]=g&&g[a]||k.style(e,a)}if((c=!k.isEmptyObject(t))||!k.isEmptyObject(f))for(a in p&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=g&&g.display)&&(u=re.get(e,\"display\")),\"none\"===(l=k.css(e,\"display\"))&&(u?l=u:(be([e],!0),u=e.style.display||u,l=k.css(e,\"display\"),be([e]))),(\"inline\"===l||\"inline-block\"===l&&null!=u)&&\"none\"===k.css(e,\"float\")&&(c||(d.done((function(){h.display=u})),null==u&&(l=h.display,u=\"none\"===l?\"\":l)),h.display=\"inline-block\")),n.overflow&&(h.overflow=\"hidden\",d.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),c=!1,f)c||(g?\"hidden\"in g&&(m=g.hidden):g=re.access(e,\"fxshow\",{display:u}),i&&(g.hidden=!m),m&&be([e],!0),d.done((function(){for(a in m||be([e]),re.remove(e,\"fxshow\"),f)k.style(e,a,f[a])}))),c=gt(m?g[a]:0,a,d),a in g||(g[a]=c.start,m&&(c.end=c.start,c.start=0))}],prefilter:function(e,t){t?yt.prefilters.unshift(e):yt.prefilters.push(e)}}),k.speed=function(e,t,n){var a=e&&\"object\"==typeof e?k.extend({},e):{complete:n||!n&&t||h(e)&&e,duration:e,easing:n&&t||t&&!h(t)&&t};return k.fx.off?a.duration=0:\"number\"!=typeof a.duration&&(a.duration in k.fx.speeds?a.duration=k.fx.speeds[a.duration]:a.duration=k.fx.speeds._default),null!=a.queue&&!0!==a.queue||(a.queue=\"fx\"),a.old=a.complete,a.complete=function(){h(a.old)&&a.old.call(this),a.queue&&k.dequeue(this,a.queue)},a},k.fn.extend({fadeTo:function(e,t,n,a){return this.filter(me).css(\"opacity\",0).show().end().animate({opacity:t},e,n,a)},animate:function(e,t,n,a){var r=k.isEmptyObject(e),i=k.speed(t,n,a),o=function(){var t=yt(this,k.extend({},e),i);(r||re.get(this,\"finish\"))&&t.stop(!0)};return o.finish=o,r||!1===i.queue?this.each(o):this.queue(i.queue,o)},stop:function(e,t,n){var a=function(e){var t=e.stop;delete e.stop,t(n)};return\"string\"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||\"fx\",[]),this.each((function(){var t=!0,r=null!=e&&e+\"queueHooks\",i=k.timers,o=re.get(this);if(r)o[r]&&o[r].stop&&a(o[r]);else for(r in o)o[r]&&o[r].stop&&dt.test(r)&&a(o[r]);for(r=i.length;r--;)i[r].elem!==this||null!=e&&i[r].queue!==e||(i[r].anim.stop(n),t=!1,i.splice(r,1));!t&&n||k.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||\"fx\"),this.each((function(){var t,n=re.get(this),a=n[e+\"queue\"],r=n[e+\"queueHooks\"],i=k.timers,o=a?a.length:0;for(n.finish=!0,k.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<o;t++)a[t]&&a[t].finish&&a[t].finish.call(this);delete n.finish}))}}),k.each([\"toggle\",\"show\",\"hide\"],(function(e,t){var n=k.fn[t];k.fn[t]=function(e,a,r){return null==e||\"boolean\"==typeof e?n.apply(this,arguments):this.animate(mt(t,!0),e,a,r)}})),k.each({slideDown:mt(\"show\"),slideUp:mt(\"hide\"),slideToggle:mt(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},(function(e,t){k.fn[e]=function(e,n,a){return this.animate(t,e,n,a)}})),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(ut=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),ut=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){lt||(lt=!0,ft())},k.fx.stop=function(){lt=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(t,n){return t=k.fx&&k.fx.speeds[t]||t,n=n||\"fx\",this.queue(n,(function(n,a){var r=e.setTimeout(n,t);a.stop=function(){e.clearTimeout(r)}}))},function(){var e=g.createElement(\"input\"),t=g.createElement(\"select\").appendChild(g.createElement(\"option\"));e.type=\"checkbox\",f.checkOn=\"\"!==e.value,f.optSelected=t.selected,(e=g.createElement(\"input\")).value=\"t\",e.type=\"radio\",f.radioValue=\"t\"===e.value}();var vt,bt=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return X(this,k.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){k.removeAttr(this,e)}))}}),k.extend({attr:function(e,t,n){var a,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?k.prop(e,t,n):(1===i&&k.isXMLDoc(e)||(r=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):r&&\"set\"in r&&void 0!==(a=r.set(e,n,t))?a:(e.setAttribute(t,n+\"\"),n):r&&\"get\"in r&&null!==(a=r.get(e,t))?a:null==(a=k.find.attr(e,t))?void 0:a)},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&\"radio\"===t&&j(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,a=0,r=t&&t.match(G);if(r&&1===e.nodeType)for(;n=r[a++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\\w+/g),(function(e,t){var n=bt[t]||k.find.attr;bt[t]=function(e,t,a){var r,i,o=t.toLowerCase();return a||(i=bt[o],bt[o]=r,r=null!=n(e,t,a)?o:null,bt[o]=i),r}}));var xt=/^(?:input|select|textarea|button)$/i,wt=/^(?:a|area)$/i;function kt(e){return(e.match(G)||[]).join(\" \")}function _t(e){return e.getAttribute&&e.getAttribute(\"class\")||\"\"}function jt(e){return Array.isArray(e)?e:\"string\"==typeof e&&e.match(G)||[]}k.fn.extend({prop:function(e,t){return X(this,k.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[k.propFix[e]||e]}))}}),k.extend({prop:function(e,t,n){var a,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&k.isXMLDoc(e)||(t=k.propFix[t]||t,r=k.propHooks[t]),void 0!==n?r&&\"set\"in r&&void 0!==(a=r.set(e,n,t))?a:e[t]=n:r&&\"get\"in r&&null!==(a=r.get(e,t))?a:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,\"tabindex\");return t?parseInt(t,10):xt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:\"htmlFor\",class:\"className\"}}),f.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],(function(){k.propFix[this.toLowerCase()]=this})),k.fn.extend({addClass:function(e){var t,n,a,r,i,o;return h(e)?this.each((function(t){k(this).addClass(e.call(this,t,_t(this)))})):(t=jt(e)).length?this.each((function(){if(a=_t(this),n=1===this.nodeType&&\" \"+kt(a)+\" \"){for(i=0;i<t.length;i++)r=t[i],n.indexOf(\" \"+r+\" \")<0&&(n+=r+\" \");o=kt(n),a!==o&&this.setAttribute(\"class\",o)}})):this},removeClass:function(e){var t,n,a,r,i,o;return h(e)?this.each((function(t){k(this).removeClass(e.call(this,t,_t(this)))})):arguments.length?(t=jt(e)).length?this.each((function(){if(a=_t(this),n=1===this.nodeType&&\" \"+kt(a)+\" \"){for(i=0;i<t.length;i++)for(r=t[i];n.indexOf(\" \"+r+\" \")>-1;)n=n.replace(\" \"+r+\" \",\" \");o=kt(n),a!==o&&this.setAttribute(\"class\",o)}})):this:this.attr(\"class\",\"\")},toggleClass:function(e,t){var n,a,r,i,o=typeof e,s=\"string\"===o||Array.isArray(e);return h(e)?this.each((function(n){k(this).toggleClass(e.call(this,n,_t(this),t),t)})):\"boolean\"==typeof t&&s?t?this.addClass(e):this.removeClass(e):(n=jt(e),this.each((function(){if(s)for(i=k(this),r=0;r<n.length;r++)a=n[r],i.hasClass(a)?i.removeClass(a):i.addClass(a);else void 0!==e&&\"boolean\"!==o||((a=_t(this))&&re.set(this,\"__className__\",a),this.setAttribute&&this.setAttribute(\"class\",a||!1===e?\"\":re.get(this,\"__className__\")||\"\"))})))},hasClass:function(e){var t,n,a=0;for(t=\" \"+e+\" \";n=this[a++];)if(1===n.nodeType&&(\" \"+kt(_t(n))+\" \").indexOf(t)>-1)return!0;return!1}});var St=/\\r/g;k.fn.extend({val:function(e){var t,n,a,r=this[0];return arguments.length?(a=h(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=a?e.call(this,n,k(this).val()):e)?r=\"\":\"number\"==typeof r?r+=\"\":Array.isArray(r)&&(r=k.map(r,(function(e){return null==e?\"\":e+\"\"}))),(t=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&\"set\"in t&&void 0!==t.set(this,r,\"value\")||(this.value=r))}))):r?(t=k.valHooks[r.type]||k.valHooks[r.nodeName.toLowerCase()])&&\"get\"in t&&void 0!==(n=t.get(r,\"value\"))?n:\"string\"==typeof(n=r.value)?n.replace(St,\"\"):null==n?\"\":n:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,\"value\");return null!=t?t:kt(k.text(e))}},select:{get:function(e){var t,n,a,r=e.options,i=e.selectedIndex,o=\"select-one\"===e.type,s=o?null:[],c=o?i+1:r.length;for(a=i<0?c:o?i:0;a<c;a++)if(((n=r[a]).selected||a===i)&&!n.disabled&&(!n.parentNode.disabled||!j(n.parentNode,\"optgroup\"))){if(t=k(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,a,r=e.options,i=k.makeArray(t),o=r.length;o--;)((a=r[o]).selected=k.inArray(k.valHooks.option.get(a),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),k.each([\"radio\",\"checkbox\"],(function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=k.inArray(k(e).val(),t)>-1}},f.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})}));var At=e.location,Et={guid:Date.now()},Ct=/\\?/;k.parseXML=function(t){var n,a;if(!t||\"string\"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,\"text/xml\")}catch(r){}return a=n&&n.getElementsByTagName(\"parsererror\")[0],n&&!a||k.error(\"Invalid XML: \"+(a?k.map(a.childNodes,(function(e){return e.textContent})).join(\"\\n\"):t)),n};var Tt=/^(?:focusinfocus|focusoutblur)$/,Pt=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(t,n,a,r){var i,o,s,c,u,p,d,f,y=[a||g],v=l.call(t,\"type\")?t.type:t,b=l.call(t,\"namespace\")?t.namespace.split(\".\"):[];if(o=f=s=a=a||g,3!==a.nodeType&&8!==a.nodeType&&!Tt.test(v+k.event.triggered)&&(v.indexOf(\".\")>-1&&(b=v.split(\".\"),v=b.shift(),b.sort()),u=v.indexOf(\":\")<0&&\"on\"+v,(t=t[k.expando]?t:new k.Event(v,\"object\"==typeof t&&t)).isTrigger=r?2:3,t.namespace=b.join(\".\"),t.rnamespace=t.namespace?new RegExp(\"(^|\\\\.)\"+b.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,t.result=void 0,t.target||(t.target=a),n=null==n?[t]:k.makeArray(n,[t]),d=k.event.special[v]||{},r||!d.trigger||!1!==d.trigger.apply(a,n))){if(!r&&!d.noBubble&&!m(a)){for(c=d.delegateType||v,Tt.test(c+v)||(o=o.parentNode);o;o=o.parentNode)y.push(o),s=o;s===(a.ownerDocument||g)&&y.push(s.defaultView||s.parentWindow||e)}for(i=0;(o=y[i++])&&!t.isPropagationStopped();)f=o,t.type=i>1?c:d.bindType||v,(p=(re.get(o,\"events\")||Object.create(null))[t.type]&&re.get(o,\"handle\"))&&p.apply(o,n),(p=u&&o[u])&&p.apply&&ne(o)&&(t.result=p.apply(o,n),!1===t.result&&t.preventDefault());return t.type=v,r||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(y.pop(),n)||!ne(a)||u&&h(a[v])&&!m(a)&&((s=a[u])&&(a[u]=null),k.event.triggered=v,t.isPropagationStopped()&&f.addEventListener(v,Pt),a[v](),t.isPropagationStopped()&&f.removeEventListener(v,Pt),k.event.triggered=void 0,s&&(a[u]=s)),t.result}},simulate:function(e,t,n){var a=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(a,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each((function(){k.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}});var Dt=/\\[\\]$/,Ot=/\\r?\\n/g,Mt=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function Bt(e,t,n,a){var r;if(Array.isArray(t))k.each(t,(function(t,r){n||Dt.test(e)?a(e,r):Bt(e+\"[\"+(\"object\"==typeof r&&null!=r?t:\"\")+\"]\",r,n,a)}));else if(n||\"object\"!==b(t))a(e,t);else for(r in t)Bt(e+\"[\"+r+\"]\",t[r],n,a)}k.param=function(e,t){var n,a=[],r=function(e,t){var n=h(t)?t():t;a[a.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(null==n?\"\":n)};if(null==e)return\"\";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,(function(){r(this.name,this.value)}));else for(n in e)Bt(n,e[n],t,r);return a.join(\"&\")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=k.prop(this,\"elements\");return e?k.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!k(this).is(\":disabled\")&&Nt.test(this.nodeName)&&!Mt.test(e)&&(this.checked||!ke.test(e))})).map((function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,(function(e){return{name:t.name,value:e.replace(Ot,\"\\r\\n\")}})):{name:t.name,value:n.replace(Ot,\"\\r\\n\")}})).get()}});var Rt=/%20/g,Lt=/#.*$/,It=/([?&])_=[^&]*/,Ft=/^(.*?):[ \\t]*([^\\r\\n]*)$/gm,zt=/^(?:GET|HEAD)$/,qt=/^\\/\\//,Ht={},Ut={},Gt=\"*/\".concat(\"*\"),$t=g.createElement(\"a\");function Wt(e){return function(t,n){\"string\"!=typeof t&&(n=t,t=\"*\");var a,r=0,i=t.toLowerCase().match(G)||[];if(h(n))for(;a=i[r++];)\"+\"===a[0]?(a=a.slice(1)||\"*\",(e[a]=e[a]||[]).unshift(n)):(e[a]=e[a]||[]).push(n)}}function Vt(e,t,n,a){var r={},i=e===Ut;function o(s){var c;return r[s]=!0,k.each(e[s]||[],(function(e,s){var u=s(t,n,a);return\"string\"!=typeof u||i||r[u]?i?!(c=u):void 0:(t.dataTypes.unshift(u),o(u),!1)})),c}return o(t.dataTypes[0])||!r[\"*\"]&&o(\"*\")}function Kt(e,t){var n,a,r=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:a||(a={}))[n]=t[n]);return a&&k.extend(!0,e,a),e}$t.href=At.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:\"GET\",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(At.protocol),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":Gt,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/\\bxml\\b/,html:/\\bhtml/,json:/\\bjson\\b/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":JSON.parse,\"text xml\":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Kt(Kt(e,k.ajaxSettings),t):Kt(k.ajaxSettings,e)},ajaxPrefilter:Wt(Ht),ajaxTransport:Wt(Ut),ajax:function(t,n){\"object\"==typeof t&&(n=t,t=void 0),n=n||{};var a,r,i,o,s,c,u,l,p,d,f=k.ajaxSetup({},n),h=f.context||f,m=f.context&&(h.nodeType||h.jquery)?k(h):k.event,y=k.Deferred(),v=k.Callbacks(\"once memory\"),b=f.statusCode||{},x={},w={},_=\"canceled\",j={readyState:0,getResponseHeader:function(e){var t;if(u){if(!o)for(o={};t=Ft.exec(i);)o[t[1].toLowerCase()+\" \"]=(o[t[1].toLowerCase()+\" \"]||[]).concat(t[2]);t=o[e.toLowerCase()+\" \"]}return null==t?null:t.join(\", \")},getAllResponseHeaders:function(){return u?i:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)j.always(e[j.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||_;return a&&a.abort(t),S(0,t),this}};if(y.promise(j),f.url=((t||f.url||At.href)+\"\").replace(qt,At.protocol+\"//\"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=(f.dataType||\"*\").toLowerCase().match(G)||[\"\"],null==f.crossDomain){c=g.createElement(\"a\");try{c.href=f.url,c.href=c.href,f.crossDomain=$t.protocol+\"//\"+$t.host!=c.protocol+\"//\"+c.host}catch(A){f.crossDomain=!0}}if(f.data&&f.processData&&\"string\"!=typeof f.data&&(f.data=k.param(f.data,f.traditional)),Vt(Ht,f,n,j),u)return j;for(p in(l=k.event&&f.global)&&0==k.active++&&k.event.trigger(\"ajaxStart\"),f.type=f.type.toUpperCase(),f.hasContent=!zt.test(f.type),r=f.url.replace(Lt,\"\"),f.hasContent?f.data&&f.processData&&0===(f.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&(f.data=f.data.replace(Rt,\"+\")):(d=f.url.slice(r.length),f.data&&(f.processData||\"string\"==typeof f.data)&&(r+=(Ct.test(r)?\"&\":\"?\")+f.data,delete f.data),!1===f.cache&&(r=r.replace(It,\"$1\"),d=(Ct.test(r)?\"&\":\"?\")+\"_=\"+Et.guid+++d),f.url=r+d),f.ifModified&&(k.lastModified[r]&&j.setRequestHeader(\"If-Modified-Since\",k.lastModified[r]),k.etag[r]&&j.setRequestHeader(\"If-None-Match\",k.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||n.contentType)&&j.setRequestHeader(\"Content-Type\",f.contentType),j.setRequestHeader(\"Accept\",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+(\"*\"!==f.dataTypes[0]?\", \"+Gt+\"; q=0.01\":\"\"):f.accepts[\"*\"]),f.headers)j.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(!1===f.beforeSend.call(h,j,f)||u))return j.abort();if(_=\"abort\",v.add(f.complete),j.done(f.success),j.fail(f.error),a=Vt(Ut,f,n,j)){if(j.readyState=1,l&&m.trigger(\"ajaxSend\",[j,f]),u)return j;f.async&&f.timeout>0&&(s=e.setTimeout((function(){j.abort(\"timeout\")}),f.timeout));try{u=!1,a.send(x,S)}catch(A){if(u)throw A;S(-1,A)}}else S(-1,\"No Transport\");function S(t,n,o,c){var p,d,g,x,w,_=n;u||(u=!0,s&&e.clearTimeout(s),a=void 0,i=c||\"\",j.readyState=t>0?4:0,p=t>=200&&t<300||304===t,o&&(x=function(e,t,n){for(var a,r,i,o,s=e.contents,c=e.dataTypes;\"*\"===c[0];)c.shift(),void 0===a&&(a=e.mimeType||t.getResponseHeader(\"Content-Type\"));if(a)for(r in s)if(s[r]&&s[r].test(a)){c.unshift(r);break}if(c[0]in n)i=c[0];else{for(r in n){if(!c[0]||e.converters[r+\" \"+c[0]]){i=r;break}o||(o=r)}i=i||o}if(i)return i!==c[0]&&c.unshift(i),n[i]}(f,j,o)),!p&&k.inArray(\"script\",f.dataTypes)>-1&&k.inArray(\"json\",f.dataTypes)<0&&(f.converters[\"text script\"]=function(){}),x=function(e,t,n,a){var r,i,o,s,c,u={},l=e.dataTypes.slice();if(l[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(i=l.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!c&&a&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=i,i=l.shift())if(\"*\"===i)i=c;else if(\"*\"!==c&&c!==i){if(!(o=u[c+\" \"+i]||u[\"* \"+i]))for(r in u)if((s=r.split(\" \"))[1]===i&&(o=u[c+\" \"+s[0]]||u[\"* \"+s[0]])){!0===o?o=u[r]:!0!==u[r]&&(i=s[0],l.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(A){return{state:\"parsererror\",error:o?A:\"No conversion from \"+c+\" to \"+i}}}return{state:\"success\",data:t}}(f,x,j,p),p?(f.ifModified&&((w=j.getResponseHeader(\"Last-Modified\"))&&(k.lastModified[r]=w),(w=j.getResponseHeader(\"etag\"))&&(k.etag[r]=w)),204===t||\"HEAD\"===f.type?_=\"nocontent\":304===t?_=\"notmodified\":(_=x.state,d=x.data,p=!(g=x.error))):(g=_,!t&&_||(_=\"error\",t<0&&(t=0))),j.status=t,j.statusText=(n||_)+\"\",p?y.resolveWith(h,[d,_,j]):y.rejectWith(h,[j,_,g]),j.statusCode(b),b=void 0,l&&m.trigger(p?\"ajaxSuccess\":\"ajaxError\",[j,f,p?d:g]),v.fireWith(h,[j,_]),l&&(m.trigger(\"ajaxComplete\",[j,f]),--k.active||k.event.trigger(\"ajaxStop\")))}return j},getJSON:function(e,t,n){return k.get(e,t,n,\"json\")},getScript:function(e,t){return k.get(e,void 0,t,\"script\")}}),k.each([\"get\",\"post\"],(function(e,t){k[t]=function(e,n,a,r){return h(n)&&(r=r||a,a=n,n=void 0),k.ajax(k.extend({url:e,type:t,dataType:r,data:n,success:a},k.isPlainObject(e)&&e))}})),k.ajaxPrefilter((function(e){var t;for(t in e.headers)\"content-type\"===t.toLowerCase()&&(e.contentType=e.headers[t]||\"\")})),k._evalUrl=function(e,t,n){return k.ajax({url:e,type:\"GET\",dataType:\"script\",cache:!0,async:!1,global:!1,converters:{\"text script\":function(){}},dataFilter:function(e){k.globalEval(e,t,n)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(h(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return h(e)?this.each((function(t){k(this).wrapInner(e.call(this,t))})):this.each((function(){var t=k(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=h(e);return this.each((function(n){k(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not(\"body\").each((function(){k(this).replaceWith(this.childNodes)})),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var Jt={0:200,1223:204},Yt=k.ajaxSettings.xhr();f.cors=!!Yt&&\"withCredentials\"in Yt,f.ajax=Yt=!!Yt,k.ajaxTransport((function(t){var n,a;if(f.cors||Yt&&!t.crossDomain)return{send:function(r,i){var o,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)s[o]=t.xhrFields[o];for(o in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||r[\"X-Requested-With\"]||(r[\"X-Requested-With\"]=\"XMLHttpRequest\"),r)s.setRequestHeader(o,r[o]);n=function(e){return function(){n&&(n=a=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,\"abort\"===e?s.abort():\"error\"===e?\"number\"!=typeof s.status?i(0,\"error\"):i(s.status,s.statusText):i(Jt[s.status]||s.status,s.statusText,\"text\"!==(s.responseType||\"text\")||\"string\"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),a=s.onerror=s.ontimeout=n(\"error\"),void 0!==s.onabort?s.onabort=a:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout((function(){n&&a()}))},n=n(\"abort\");try{s.send(t.hasContent&&t.data||null)}catch(c){if(n)throw c}},abort:function(){n&&n()}}})),k.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),k.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/\\b(?:java|ecma)script\\b/},converters:{\"text script\":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter(\"script\",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type=\"GET\")})),k.ajaxTransport(\"script\",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(a,r){t=k(\"<script>\").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on(\"load error\",n=function(e){t.remove(),n=null,e&&r(\"error\"===e.type?404:200,e.type)}),g.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Xt,Zt=[],Qt=/(=)\\?(?=&|$)|\\?\\?/;k.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var e=Zt.pop()||k.expando+\"_\"+Et.guid++;return this[e]=!0,e}}),k.ajaxPrefilter(\"json jsonp\",(function(t,n,a){var r,i,o,s=!1!==t.jsonp&&(Qt.test(t.url)?\"url\":\"string\"==typeof t.data&&0===(t.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&Qt.test(t.data)&&\"data\");if(s||\"jsonp\"===t.dataTypes[0])return r=t.jsonpCallback=h(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qt,\"$1\"+r):!1!==t.jsonp&&(t.url+=(Ct.test(t.url)?\"&\":\"?\")+t.jsonp+\"=\"+r),t.converters[\"script json\"]=function(){return o||k.error(r+\" was not called\"),o[0]},t.dataTypes[0]=\"json\",i=e[r],e[r]=function(){o=arguments},a.always((function(){void 0===i?k(e).removeProp(r):e[r]=i,t[r]&&(t.jsonpCallback=n.jsonpCallback,Zt.push(r)),o&&h(i)&&i(o[0]),o=i=void 0})),\"script\"})),f.createHTMLDocument=((Xt=g.implementation.createHTMLDocument(\"\").body).innerHTML=\"<form></form><form></form>\",2===Xt.childNodes.length),k.parseHTML=function(e,t,n){return\"string\"!=typeof e?[]:(\"boolean\"==typeof t&&(n=t,t=!1),t||(f.createHTMLDocument?((a=(t=g.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href=g.location.href,t.head.appendChild(a)):t=g),i=!n&&[],(r=L.exec(e))?[t.createElement(r[1])]:(r=Te([e],t,i),i&&i.length&&k(i).remove(),k.merge([],r.childNodes)));var a,r,i},k.fn.load=function(e,t,n){var a,r,i,o=this,s=e.indexOf(\" \");return s>-1&&(a=kt(e.slice(s)),e=e.slice(0,s)),h(t)?(n=t,t=void 0):t&&\"object\"==typeof t&&(r=\"POST\"),o.length>0&&k.ajax({url:e,type:r||\"GET\",dataType:\"html\",data:t}).done((function(e){i=arguments,o.html(a?k(\"<div>\").append(k.parseHTML(e)).find(a):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},k.expr.pseudos.animated=function(e){return k.grep(k.timers,(function(t){return e===t.elem})).length},k.offset={setOffset:function(e,t,n){var a,r,i,o,s,c,u=k.css(e,\"position\"),l=k(e),p={};\"static\"===u&&(e.style.position=\"relative\"),s=l.offset(),i=k.css(e,\"top\"),c=k.css(e,\"left\"),(\"absolute\"===u||\"fixed\"===u)&&(i+c).indexOf(\"auto\")>-1?(o=(a=l.position()).top,r=a.left):(o=parseFloat(i)||0,r=parseFloat(c)||0),h(t)&&(t=t.call(e,n,k.extend({},s))),null!=t.top&&(p.top=t.top-s.top+o),null!=t.left&&(p.left=t.left-s.left+r),\"using\"in t?t.using.call(e,p):l.css(p)}},k.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){k.offset.setOffset(this,e,t)}));var t,n,a=this[0];return a?a.getClientRects().length?(t=a.getBoundingClientRect(),n=a.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,a=this[0],r={top:0,left:0};if(\"fixed\"===k.css(a,\"position\"))t=a.getBoundingClientRect();else{for(t=this.offset(),n=a.ownerDocument,e=a.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&\"static\"===k.css(e,\"position\");)e=e.parentNode;e&&e!==a&&1===e.nodeType&&((r=k(e).offset()).top+=k.css(e,\"borderTopWidth\",!0),r.left+=k.css(e,\"borderLeftWidth\",!0))}return{top:t.top-r.top-k.css(a,\"marginTop\",!0),left:t.left-r.left-k.css(a,\"marginLeft\",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&\"static\"===k.css(e,\"position\");)e=e.offsetParent;return e||de}))}}),k.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},(function(e,t){var n=\"pageYOffset\"===t;k.fn[e]=function(a){return X(this,(function(e,a,r){var i;if(m(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===r)return i?i[t]:e[a];i?i.scrollTo(n?i.pageXOffset:r,n?r:i.pageYOffset):e[a]=r}),e,a,arguments.length)}})),k.each([\"top\",\"left\"],(function(e,t){k.cssHooks[t]=Xe(f.pixelPosition,(function(e,n){if(n)return n=Ye(e,t),$e.test(n)?k(e).position()[t]+\"px\":n}))})),k.each({Height:\"height\",Width:\"width\"},(function(e,t){k.each({padding:\"inner\"+e,content:t,\"\":\"outer\"+e},(function(n,a){k.fn[a]=function(r,i){var o=arguments.length&&(n||\"boolean\"!=typeof r),s=n||(!0===r||!0===i?\"margin\":\"border\");return X(this,(function(t,n,r){var i;return m(t)?0===a.indexOf(\"outer\")?t[\"inner\"+e]:t.document.documentElement[\"client\"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body[\"scroll\"+e],i[\"scroll\"+e],t.body[\"offset\"+e],i[\"offset\"+e],i[\"client\"+e])):void 0===r?k.css(t,n,s):k.style(t,n,r,s)}),t,o?r:void 0,o)}}))})),k.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],(function(e,t){k.fn[t]=function(e){return this.on(t,e)}})),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,a){return this.on(t,e,n,a)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},hover:function(e,t){return this.on(\"mouseenter\",e).on(\"mouseleave\",t||e)}}),k.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"),(function(e,t){k.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var en=/^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;k.proxy=function(e,t){var n,a,i;if(\"string\"==typeof t&&(n=e[t],t=e,e=n),h(e))return a=r.call(arguments,2),i=function(){return e.apply(t||this,a.concat(r.call(arguments)))},i.guid=e.guid=e.guid||k.guid++,i},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=j,k.isFunction=h,k.isWindow=m,k.camelCase=te,k.type=b,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return(\"number\"===t||\"string\"===t)&&!isNaN(e-parseFloat(e))},k.trim=function(e){return null==e?\"\":(e+\"\").replace(en,\"$1\")},\"function\"==typeof define&&define.amd&&define(\"jquery\",[],(function(){return k}));var tn=e.jQuery,nn=e.$;return k.noConflict=function(t){return e.$===k&&(e.$=nn),t&&e.jQuery===k&&(e.jQuery=tn),k},void 0===t&&(e.jQuery=e.$=k),k}))},{}],393:[function(e,t,n){\"use strict\";var a=t.exports=function(e,t,n){\"function\"==typeof t&&(n=t,t={}),r(t,\"function\"==typeof(n=t.cb||n)?n:n.pre||function(){},n.post||function(){},e,\"\",e)};function r(e,t,n,i,o,s,c,u,l,p){if(i&&\"object\"==typeof i&&!Array.isArray(i)){for(var d in t(i,o,s,c,u,l,p),i){var f=i[d];if(Array.isArray(f)){if(d in a.arrayKeywords)for(var h=0;h<f.length;h++)r(e,t,n,f[h],o+\"/\"+d+\"/\"+h,s,o,d,i,h)}else if(d in a.propsKeywords){if(f&&\"object\"==typeof f)for(var m in f)r(e,t,n,f[m],o+\"/\"+d+\"/\"+m.replace(/~/g,\"~0\").replace(/\\//g,\"~1\"),s,o,d,i,m)}else(d in a.keywords||e.allKeys&&!(d in a.skipKeywords))&&r(e,t,n,f,o+\"/\"+d,s,o,d,i)}n(i,o,s,c,u,l,p)}}a.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0},a.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},a.propsKeywords={definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},a.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0}},{}],394:[function(e,t,n){var a={code:{FEFF:65279,BBBF:48063,FE:254,FF:255,EF:239,BB:187,BF:191},indexOfBOM:function(e){return\"string\"!=typeof e?0:e.charCodeAt(0)===a.code.FEFF||e.charCodeAt(0)===a.code.BBBF?1:e.charCodeAt(0)===a.code.FE&&e.charCodeAt(1)===a.code.FF||e.charCodeAt(0)===a.code.FF&&e.charCodeAt(1)===a.code.FE?2:e.charCodeAt(0)===a.code.EF&&e.charCodeAt(1)===a.code.BB&&e.charCodeAt(2)===a.code.BF?3:0},trim:function(e){var t=a.indexOfBOM(e);return t?e.slice(t):e}};t.exports=a},{}],395:[function(e,t,n){var a,r=e(\"../vendor/parse\"),i=e(\"./bomb\"),o=\"JSONError\";a=function(e,t,n){var a=i.indexOfBOM(e);if(a){if(n)throw SyntaxError(\"Unexpected byte order mark found in first \"+a+\" character(s)\");e=e.slice(a)}try{return JSON.parse(e,t)}catch(o){throw r.parse(e,{mode:\"json\",reviver:t}),o}},t.exports={parse:function(e,t,n){\"boolean\"==typeof t&&null===n&&(n=t,t=null);try{return a(e,t,n)}catch(r){throw r.name=o,r}},stringify:function(){try{return JSON.stringify.apply(JSON,arguments)}catch(e){throw e.name=o,e}}}},{\"../vendor/parse\":396,\"./bomb\":394}],396:[function(e,t,n){var a=e(\"./unicode\");function r(e){return e>=\"0\"&&e<=\"9\"||e>=\"A\"&&e<=\"F\"||e>=\"a\"&&e<=\"f\"}function i(e){return e>=\"0\"&&e<=\"7\"}function o(e){return e>=\"0\"&&e<=\"9\"}var s={\"'\":\"'\",'\"':'\"',\"\\\\\":\"\\\\\",b:\"\\b\",f:\"\\f\",n:\"\\n\",r:\"\\r\",t:\"\\t\",v:\"\\v\",\"/\":\"/\"};function c(e,t){var n,c=!(\"json\"===t.mode||t.legacy),u=c?a.isLineTerminator:a.isLineTerminatorJSON,l=c?a.isWhiteSpace:a.isWhiteSpaceJSON,p=e.length,d=0,f=0,h=0,m=[],g=function(){},y=function(e){return e};function v(t){var n=h-f;if(!t)if(h<p){var r=\"'\"+JSON.stringify(e[h]).replace(/^\"|\"$/g,\"\").replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"')+\"'\";t||(t=\"Unexpected token \"+r)}else t||(t=\"Unexpected end of input\");var i=SyntaxError(function(e,t,n,r,i,o){var s=t+\" at \"+(r+1)+\":\"+(i+1),c=n-i-1,u=\"\",l=\"\",p=o?a.isLineTerminator:a.isLineTerminatorJSON;for(c<n-70&&(c=n-70);;){var d=e[++c];if(p(d)||c===e.length){n>=c&&(l+=\"^\");break}if(u+=d,n===c?l+=\"^\":n>c&&(l+=\"\\t\"===e[c]?\"\\t\":\" \"),u.length>78)break}return s+\"\\n\"+u+\"\\n\"+l}(e,t,h,d,n,c));throw i.row=d+1,i.column=n+1,i}function b(t){\"\\r\"===t&&\"\\n\"===e[h]&&h++,f=h,d++}function x(){for(;h<p;){g();var t=e[h++];return'\"'===t||\"'\"===t&&c?y(T(t),\"literal\"):\"{\"===t?(y(void 0,\"separator\"),S()):\"[\"===t?(y(void 0,\"separator\"),A()):\"-\"===t||\".\"===t||o(t)||c&&(\"+\"===t||\"I\"===t||\"N\"===t)?y(E(),\"literal\"):\"n\"===t?(j(\"null\"),y(null,\"literal\")):\"t\"===t?(j(\"true\"),y(!0,\"literal\")):\"f\"===t?(j(\"false\"),y(!1,\"literal\")):(h--,y(void 0))}}function w(){for(;h<p;){g();var t=e[h++];if('\"'===t||\"'\"===t&&c)return y(T(t),\"key\");if(\"{\"===t)return y(void 0,\"separator\"),S();if(\"[\"===t)return y(void 0,\"separator\"),A();if(\".\"===t||o(t))return y(E(),\"key\");if(c&&a.isIdentifierStart(t)||\"\\\\\"===t&&\"u\"===e[h]){var n,r=h-1;return void 0===(n=C())?(h=r,y(void 0)):y(n,\"key\")}return h--,y(void 0)}}function k(){for(g();h<p;){var t=e[h++];if(u(t))h--,y(void 0,\"whitespace\"),g(),h++,b(t),y(void 0,\"newline\"),g();else if(l(t));else{if(\"/\"!==t||!c||\"/\"!==e[h]&&\"*\"!==e[h]){h--;break}h--,y(void 0,\"whitespace\"),g(),h++,_(\"*\"===e[h++]),y(void 0,\"comment\"),g()}}return y(void 0,\"whitespace\")}function _(t){for(;h<p;){var n=e[h++];if(u(n)){if(!t)return void h--;b(n)}else if(\"*\"===n&&t&&\"/\"===e[h])return void h++}t&&v(\"Unclosed multiline comment\")}function j(t){for(var n=h,a=t.length,r=1;r<a;r++)(h>=p||t[r]!=e[h])&&(h=n-1,v()),h++}function S(){for(var n=t.null_prototype?Object.create(null):{},a={},r=!1;h<p;){k();var i=w();k(),g();var o=e[h++];if(y(void 0,\"separator\"),\"}\"===o&&void 0===i)return!c&&r&&(h--,v(\"Trailing comma in object\")),n;if(\":\"===o&&void 0!==i){k(),m.push(i);var s=x();m.pop(),void 0===s&&v(\"No value found for key \"+i),\"string\"!=typeof i&&(c&&\"number\"==typeof i||v(\"Wrong key type: \"+i)),!(i in a)&&null==a[i]||\"replace\"===t.reserved_keys?(\"function\"==typeof t.reviver&&(s=t.reviver.call(null,i,s)),void 0!==s&&(r=!0,Object.defineProperty(n,i,{value:s,enumerable:!0,configurable:!0,writable:!0}))):\"throw\"===t.reserved_keys&&v(\"Reserved key: \"+i),k(),g();o=e[h++];if(y(void 0,\"separator\"),\",\"===o)continue;if(\"}\"===o)return n;v()}else h--,v()}v()}function A(){for(var n=[];h<p;){k(),m.push(n.length);var a=x();m.pop(),k(),g();var r=e[h++];if(y(void 0,\"separator\"),void 0!==a&&(\"function\"==typeof t.reviver&&(a=t.reviver.call(null,String(n.length),a)),void 0===a?(n.length++,a=!0):n.push(a)),\",\"===r)void 0===a&&v(\"Elisions are not supported\");else{if(\"]\"===r)return!c&&void 0===a&&n.length&&(h--,v(\"Trailing comma in array\")),n;h--,v()}}}function E(){var t=--h,n=e[h++],a=function(n){var a=e.substr(t,h-t);if(n)var r=parseInt(a.replace(/^0o?/,\"\"),8);else r=Number(a);if(Number.isNaN(r))h--,v('Bad numeric literal - \"'+e.substr(t,h-t+1)+'\"');else{if(c||a.match(/^-?(0|[1-9][0-9]*)(\\.[0-9]+)?(e[+-]?[0-9]+)?$/i))return r;h--,v('Non-json numeric literal - \"'+e.substr(t,h-t+1)+'\"')}};if((\"-\"===n||\"+\"===n&&c)&&(n=e[h++]),\"N\"===n&&c)return j(\"NaN\"),NaN;if(\"I\"===n&&c)return j(\"Infinity\"),a();if(n>=\"1\"&&n<=\"9\"){for(;h<p&&o(e[h]);)h++;n=e[h++]}if(\"0\"===n){var s=\"o\"===(n=e[h++])||\"O\"===n||i(n),u=\"x\"===n||\"X\"===n;if(c&&(s||u)){for(;h<p&&(u?r:i)(e[h]);)h++;var l=1;return\"-\"===e[t]?(l=-1,t++):\"+\"===e[t]&&t++,l*a(s)}}if(\".\"===n){for(;h<p&&o(e[h]);)h++;n=e[h++]}if(\"e\"===n||\"E\"===n){for(\"-\"!==(n=e[h++])&&\"+\"!==n||h++;h<p&&o(e[h]);)h++;n=e[h++]}return h--,a()}function C(){h--;for(var t=\"\";h<p;){var n=e[h++];if(\"\\\\\"===n&&\"u\"===e[h]&&r(e[h+1])&&r(e[h+2])&&r(e[h+3])&&r(e[h+4])&&(n=String.fromCharCode(parseInt(e.substr(h+1,4),16)),h+=5),t.length){if(!a.isIdentifierPart(n))return h--,t;t+=n}else{if(!a.isIdentifierStart(n))return;t+=n}}v()}function T(t){for(var n=\"\";h<p;){var a=e[h++];if(a===t)return n;if(\"\\\\\"===a)if(h>=p&&v(),a=e[h++],s[a]&&(c||\"v\"!=a&&\"'\"!=a))n+=s[a];else if(c&&u(a))b(a);else if(\"u\"===a||\"x\"===a&&c){for(var o=\"u\"===a?4:2,l=0;l<o;l++)h>=p&&v(),r(e[h])||v(\"Bad escape sequence\"),h++;n+=String.fromCharCode(parseInt(e.substr(h-o,o),16))}else if(c&&i(a)){if(a<\"4\"&&i(e[h])&&i(e[h+1]))var d=3;else if(i(e[h]))d=2;else d=1;h+=d-1,n+=String.fromCharCode(parseInt(e.substr(h-d,d),8))}else c?n+=a:(h--,v());else u(a)?v():(!c&&a.charCodeAt(0)<32&&(h--,v(\"Unexpected control character\")),n+=a)}v()}t._tokenize&&(n=null,g=function(){if(null!==n)throw Error(\"internal error, token overlap\");n=h},y=function(a,r){if(n!=h){var i={raw:e.substr(n,h-n),type:r,stack:m.slice(0)};void 0!==a&&(i.value=a),t._tokenize.call(null,i)}return n=null,a}),k();var P=x();if(void 0!==P||h<p){if(k(),h>=p)return\"function\"==typeof t.reviver&&(P=t.reviver.call(null,\"\",P)),P;v()}else v(h?\"No data, only a whitespace\":\"No data, empty input\")}t.exports.parse=function(e,t){if(\"function\"==typeof t&&(t={reviver:t}),void 0!==e){\"string\"!=typeof e&&(e=String(e)),null==t&&(t={}),null==t.reserved_keys&&(t.reserved_keys=\"ignore\"),\"throw\"!==t.reserved_keys&&\"ignore\"!==t.reserved_keys||null==t.null_prototype&&(t.null_prototype=!0);try{return c(e,t)}catch(a){if(a instanceof SyntaxError&&null!=a.row&&null!=a.column){var n=a;(a=SyntaxError(n.message)).column=n.column,a.row=n.row}throw a}}},t.exports.tokenize=function(e,n){null==n&&(n={}),n._tokenize=function(e){n._addstack&&e.stack.unshift.apply(e.stack,n._addstack),a.push(e)};var a=[];return a.data=t.exports.parse(e,n),a}},{\"./unicode\":397}],397:[function(e,t,n){var a=t.exports;t.exports.isWhiteSpace=function(e){return\" \"===e||\" \"===e||\"\\ufeff\"===e||e>=\"\\t\"&&e<=\"\\r\"||\" \"===e||\"᠎\"===e||e>=\" \"&&e<=\" \"||\"\\u2028\"===e||\"\\u2029\"===e||\" \"===e||\" \"===e||\"　\"===e},t.exports.isWhiteSpaceJSON=function(e){return\" \"===e||\"\\t\"===e||\"\\n\"===e||\"\\r\"===e},t.exports.isLineTerminator=function(e){return\"\\n\"===e||\"\\r\"===e||\"\\u2028\"===e||\"\\u2029\"===e},t.exports.isLineTerminatorJSON=function(e){return\"\\n\"===e||\"\\r\"===e},t.exports.isIdentifierStart=function(e){return\"$\"===e||\"_\"===e||e>=\"A\"&&e<=\"Z\"||e>=\"a\"&&e<=\"z\"||e>=\"\"&&a.NonAsciiIdentifierStart.test(e)},t.exports.isIdentifierPart=function(e){return\"$\"===e||\"_\"===e||e>=\"A\"&&e<=\"Z\"||e>=\"a\"&&e<=\"z\"||e>=\"0\"&&e<=\"9\"||e>=\"\"&&a.NonAsciiIdentifierPart.test(e)},t.exports.NonAsciiIdentifierStart=/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,t.exports.NonAsciiIdentifierPart=/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0\\u08A2-\\u08AC\\u08E4-\\u08FE\\u0900-\\u0963\\u0966-\\u096F\\u0971-\\u0977\\u0979-\\u097F\\u0981-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C82\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D02\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1D00-\\u1DE6\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA697\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7B\\uAA80-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE26\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/},{}],398:[function(e,t,n){var a=9007199254740991,r=\"[object Arguments]\",i=\"[object Function]\",o=\"[object GeneratorFunction]\",s=/^(?:0|[1-9]\\d*)$/;var c=Object.prototype,u=c.hasOwnProperty,l=c.toString,p=c.propertyIsEnumerable,d=Math.max;function f(e,t){var n=v(e)||function(e){return function(e){return function(e){return!!e&&\"object\"==typeof e}(e)&&b(e)}(e)&&u.call(e,\"callee\")&&(!p.call(e,\"callee\")||l.call(e)==r)}(e)?function(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}(e.length,String):[],a=n.length,i=!!a;for(var o in e)!t&&!u.call(e,o)||i&&(\"length\"==o||g(o,a))||n.push(o);return n}function h(e,t,n){var a=e[t];u.call(e,t)&&y(a,n)&&(void 0!==n||t in e)||(e[t]=n)}function m(e){if(!x(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t,n,a,r=(n=(t=e)&&t.constructor,a=\"function\"==typeof n&&n.prototype||c,t===a),i=[];for(var o in e)(\"constructor\"!=o||!r&&u.call(e,o))&&i.push(o);return i}function g(e,t){return!!(t=null==t?a:t)&&(\"number\"==typeof e||s.test(e))&&e>-1&&e%1==0&&e<t}function y(e,t){return e===t||e!=e&&t!=t}var v=Array.isArray;function b(e){return null!=e&&function(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=a}(e.length)&&!function(e){var t=x(e)?l.call(e):\"\";return t==i||t==o}(e)}function x(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}var w,k,_,j=(w=function(e,t){!function(e,t,n,a){n||(n={});for(var r=-1,i=t.length;++r<i;){var o=t[r],s=a?a(n[o],e[o],o,n,e):void 0;h(n,o,void 0===s?e[o]:s)}}(t,function(e){return b(e)?f(e,!0):m(e)}(t),e)},k=function(e,t){var n=-1,a=t.length,r=a>1?t[a-1]:void 0,i=a>2?t[2]:void 0;for(r=w.length>3&&\"function\"==typeof r?(a--,r):void 0,i&&function(e,t,n){if(!x(n))return!1;var a=typeof t;return!!(\"number\"==a?b(n)&&g(t,n.length):\"string\"==a&&t in n)&&y(n[t],e)}(t[0],t[1],i)&&(r=a<3?void 0:r,a=1),e=Object(e);++n<a;){var o=t[n];o&&w(e,o,n,r)}return e},_=d(void 0===_?k.length-1:_,0),function(){for(var e=arguments,t=-1,n=d(e.length-_,0),a=Array(n);++t<n;)a[t]=e[_+t];t=-1;for(var r=Array(_+1);++t<_;)r[t]=e[t];return r[_]=a,function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}(k,this,r)});t.exports=j},{}],399:[function(e,t,n){(function(e){(function(){var n=\"__lodash_placeholder__\",a=32,r=1/0,i=NaN,o=[[\"ary\",128],[\"bind\",1],[\"bindKey\",2],[\"curry\",8],[\"curryRight\",16],[\"flip\",512],[\"partial\",a],[\"partialRight\",64],[\"rearg\",256]],s=\"[object Function]\",c=\"[object GeneratorFunction]\",u=/^\\s+|\\s+$/g,l=/\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,p=/\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,d=/,? & /,f=/^[-+]0x[0-9a-f]+$/i,h=/^0b[01]+$/i,m=/^\\[object .+?Constructor\\]$/,g=/^0o[0-7]+$/i,y=/^(?:0|[1-9]\\d*)$/,v=parseInt,b=\"object\"==typeof e&&e&&e.Object===Object&&e,x=\"object\"==typeof self&&self&&self.Object===Object&&self,w=b||x||Function(\"return this\")();function k(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function _(e,t){return!!(e?e.length:0)&&function(e,t,n){if(t!=t)return function(e,t,n,a){var r=e.length,i=n+(a?1:-1);for(;a?i--:++i<r;)if(t(e[i],i,e))return i;return-1}(e,j,n);var a=n-1,r=e.length;for(;++a<r;)if(e[a]===t)return a;return-1}(e,t,0)>-1}function j(e){return e!=e}function S(e,t){for(var a=-1,r=e.length,i=0,o=[];++a<r;){var s=e[a];s!==t&&s!==n||(e[a]=n,o[i++]=a)}return o}var A,E,C,T=Function.prototype,P=Object.prototype,D=w[\"__core-js_shared__\"],O=(A=/[^.]+$/.exec(D&&D.keys&&D.keys.IE_PROTO||\"\"))?\"Symbol(src)_1.\"+A:\"\",M=T.toString,N=P.hasOwnProperty,B=P.toString,R=RegExp(\"^\"+M.call(N).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),L=Object.create,I=Math.max,F=Math.min,z=(E=V(Object,\"defineProperty\"),(C=V.name)&&C.length>2?E:void 0);function q(e){if(!ee(e)||function(e){return!!O&&O in e}(e))return!1;var t=function(e){var t=ee(e)?B.call(e):\"\";return t==s||t==c}(e)||function(e){var t=!1;if(null!=e&&\"function\"!=typeof e.toString)try{t=!!(e+\"\")}catch(n){}return t}(e)?R:m;return t.test(function(e){if(null!=e){try{return M.call(e)}catch(t){}try{return e+\"\"}catch(t){}}return\"\"}(e))}function H(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n,a=ee(n=e.prototype)?L(n):{},r=e.apply(a,t);return ee(r)?r:a}}function U(e,t,n,a,r,i,o,s,c,u){var l=128&t,p=1&t,d=2&t,f=24&t,h=512&t,m=d?void 0:H(e);return function g(){for(var y=arguments.length,v=Array(y),b=y;b--;)v[b]=arguments[b];if(f)var x=W(g),k=function(e,t){for(var n=e.length,a=0;n--;)e[n]===t&&a++;return a}(v,x);if(a&&(v=function(e,t,n,a){for(var r=-1,i=e.length,o=n.length,s=-1,c=t.length,u=I(i-o,0),l=Array(c+u),p=!a;++s<c;)l[s]=t[s];for(;++r<o;)(p||r<i)&&(l[n[r]]=e[r]);for(;u--;)l[s++]=e[r++];return l}(v,a,r,f)),i&&(v=function(e,t,n,a){for(var r=-1,i=e.length,o=-1,s=n.length,c=-1,u=t.length,l=I(i-s,0),p=Array(l+u),d=!a;++r<l;)p[r]=e[r];for(var f=r;++c<u;)p[f+c]=t[c];for(;++o<s;)(d||r<i)&&(p[f+n[o]]=e[r++]);return p}(v,i,o,f)),y-=k,f&&y<u){var _=S(v,x);return G(e,t,U,g.placeholder,n,v,_,s,c,u-y)}var j=p?n:this,A=d?j[e]:e;return y=v.length,s?v=function(e,t){var n=e.length,a=F(t.length,n),r=function(e,t){var n=-1,a=e.length;for(t||(t=Array(a));++n<a;)t[n]=e[n];return t}(e);for(;a--;){var i=t[a];e[a]=Y(i,n)?r[i]:void 0}return e}(v,s):h&&y>1&&v.reverse(),l&&c<y&&(v.length=c),this&&this!==w&&this instanceof g&&(A=m||H(A)),A.apply(j,v)}}function G(e,t,n,r,i,o,s,c,u,l){var p=8&t;t|=p?a:64,4&(t&=~(p?64:a))||(t&=-4);var d=n(e,t,i,p?o:void 0,p?s:void 0,p?void 0:o,p?void 0:s,c,u,l);return d.placeholder=r,X(d,e,t)}function $(e,t,n,r,i,o,s,c){var u=2&t;if(!u&&\"function\"!=typeof e)throw new TypeError(\"Expected a function\");var l=r?r.length:0;if(l||(t&=-97,r=i=void 0),s=void 0===s?s:I(ne(s),0),c=void 0===c?c:ne(c),l-=i?i.length:0,64&t){var p=r,d=i;r=i=void 0}var f=[e,t,n,r,i,p,d,o,s,c];if(e=f[0],t=f[1],n=f[2],r=f[3],i=f[4],!(c=f[9]=null==f[9]?u?0:e.length:I(f[9]-l,0))&&24&t&&(t&=-25),t&&1!=t)h=8==t||16==t?function(e,t,n){var a=H(e);return function r(){for(var i=arguments.length,o=Array(i),s=i,c=W(r);s--;)o[s]=arguments[s];var u=i<3&&o[0]!==c&&o[i-1]!==c?[]:S(o,c);return(i-=u.length)<n?G(e,t,U,r.placeholder,void 0,o,u,void 0,void 0,n-i):k(this&&this!==w&&this instanceof r?a:e,this,o)}}(e,t,c):t!=a&&33!=t||i.length?U.apply(void 0,f):function(e,t,n,a){var r=1&t,i=H(e);return function t(){for(var o=-1,s=arguments.length,c=-1,u=a.length,l=Array(u+s),p=this&&this!==w&&this instanceof t?i:e;++c<u;)l[c]=a[c];for(;s--;)l[c++]=arguments[++o];return k(p,r?n:this,l)}}(e,t,n,r);else var h=function(e,t,n){var a=1&t,r=H(e);return function t(){return(this&&this!==w&&this instanceof t?r:e).apply(a?n:this,arguments)}}(e,t,n);return X(h,e,t)}function W(e){return e.placeholder}function V(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return q(n)?n:void 0}function K(e){var t=e.match(p);return t?t[1].split(d):[]}function J(e,t){var n=t.length,a=n-1;return t[a]=(n>1?\"& \":\"\")+t[a],t=t.join(n>2?\", \":\" \"),e.replace(l,\"{\\n/* [wrapped with \"+t+\"] */\\n\")}function Y(e,t){return!!(t=null==t?9007199254740991:t)&&(\"number\"==typeof e||y.test(e))&&e>-1&&e%1==0&&e<t}var X=z?function(e,t,n){var a,r=t+\"\";return z(e,\"toString\",{configurable:!0,enumerable:!1,value:(a=J(r,Z(K(r),n)),function(){return a})})}:function(e){return e};function Z(e,t){return function(e,t){for(var n=-1,a=e?e.length:0;++n<a&&!1!==t(e[n],n,e););}(o,(function(n){var a=\"_.\"+n[0];t&n[1]&&!_(e,a)&&e.push(a)})),e.sort()}var Q=function(e,t){return t=I(void 0===t?e.length-1:t,0),function(){for(var n=arguments,a=-1,r=I(n.length-t,0),i=Array(r);++a<r;)i[a]=n[t+a];a=-1;for(var o=Array(t+1);++a<t;)o[a]=n[a];return o[t]=i,k(e,this,o)}}((function(e,t,n){var r=1;if(n.length){var i=S(n,W(Q));r|=a}return $(e,r,t,n,i)}));function ee(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function te(e){return e?(e=function(e){if(\"number\"==typeof e)return e;if(function(e){return\"symbol\"==typeof e||function(e){return!!e&&\"object\"==typeof e}(e)&&\"[object Symbol]\"==B.call(e)}(e))return i;if(ee(e)){var t=\"function\"==typeof e.valueOf?e.valueOf():e;e=ee(t)?t+\"\":t}if(\"string\"!=typeof e)return 0===e?e:+e;e=e.replace(u,\"\");var n=h.test(e);return n||g.test(e)?v(e.slice(2),n?2:8):f.test(e)?i:+e}(e))===r||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function ne(e){var t=te(e),n=t%1;return t==t?n?t-n:t:0}Q.placeholder={},t.exports=Q}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],400:[function(e,t,n){var a=9007199254740991,r=\"[object Arguments]\",i=\"[object Function]\",o=\"[object GeneratorFunction]\",s=/^(?:0|[1-9]\\d*)$/;function c(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}var u=Object.prototype,l=u.hasOwnProperty,p=u.toString,d=u.propertyIsEnumerable,f=Math.max;function h(e,t){var n=w(e)||function(e){return function(e){return function(e){return!!e&&\"object\"==typeof e}(e)&&k(e)}(e)&&l.call(e,\"callee\")&&(!d.call(e,\"callee\")||p.call(e)==r)}(e)?function(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}(e.length,String):[],a=n.length,i=!!a;for(var o in e)!t&&!l.call(e,o)||i&&(\"length\"==o||b(o,a))||n.push(o);return n}function m(e,t,n,a){return void 0===e||x(e,u[n])&&!l.call(a,n)?t:e}function g(e,t,n){var a=e[t];l.call(e,t)&&x(a,n)&&(void 0!==n||t in e)||(e[t]=n)}function y(e){if(!_(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t,n,a,r=(n=(t=e)&&t.constructor,a=\"function\"==typeof n&&n.prototype||u,t===a),i=[];for(var o in e)(\"constructor\"!=o||!r&&l.call(e,o))&&i.push(o);return i}function v(e,t){return t=f(void 0===t?e.length-1:t,0),function(){for(var n=arguments,a=-1,r=f(n.length-t,0),i=Array(r);++a<r;)i[a]=n[t+a];a=-1;for(var o=Array(t+1);++a<t;)o[a]=n[a];return o[t]=i,c(e,this,o)}}function b(e,t){return!!(t=null==t?a:t)&&(\"number\"==typeof e||s.test(e))&&e>-1&&e%1==0&&e<t}function x(e,t){return e===t||e!=e&&t!=t}var w=Array.isArray;function k(e){return null!=e&&function(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=a}(e.length)&&!function(e){var t=_(e)?p.call(e):\"\";return t==i||t==o}(e)}function _(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}var j,S=(j=function(e,t,n,a){!function(e,t,n,a){n||(n={});for(var r=-1,i=t.length;++r<i;){var o=t[r],s=a?a(n[o],e[o],o,n,e):void 0;g(n,o,void 0===s?e[o]:s)}}(t,function(e){return k(e)?h(e,!0):y(e)}(t),e,a)},v((function(e,t){var n=-1,a=t.length,r=a>1?t[a-1]:void 0,i=a>2?t[2]:void 0;for(r=j.length>3&&\"function\"==typeof r?(a--,r):void 0,i&&function(e,t,n){if(!_(n))return!1;var a=typeof t;return!!(\"number\"==a?k(n)&&b(t,n.length):\"string\"==a&&t in n)&&x(n[t],e)}(t[0],t[1],i)&&(r=a<3?void 0:r,a=1),e=Object(e);++n<a;){var o=t[n];o&&j(e,o,n,r)}return e}))),A=v((function(e){return e.push(void 0,m),c(S,void 0,e)}));t.exports=A},{}],401:[function(e,t,n){(function(e){(function(){var a=\"__lodash_hash_undefined__\",r=9007199254740991,i=\"[object Arguments]\",o=\"[object Array]\",s=\"[object Boolean]\",c=\"[object Date]\",u=\"[object Error]\",l=\"[object Function]\",p=\"[object Map]\",d=\"[object Number]\",f=\"[object Object]\",h=\"[object Promise]\",m=\"[object RegExp]\",g=\"[object Set]\",y=\"[object String]\",v=\"[object Symbol]\",b=\"[object WeakMap]\",x=\"[object ArrayBuffer]\",w=\"[object DataView]\",k=/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,_=/^\\w*$/,j=/^\\./,S=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,A=/\\\\(\\\\)?/g,E=/^\\[object .+?Constructor\\]$/,C=/^(?:0|[1-9]\\d*)$/,T={};T[\"[object Float32Array]\"]=T[\"[object Float64Array]\"]=T[\"[object Int8Array]\"]=T[\"[object Int16Array]\"]=T[\"[object Int32Array]\"]=T[\"[object Uint8Array]\"]=T[\"[object Uint8ClampedArray]\"]=T[\"[object Uint16Array]\"]=T[\"[object Uint32Array]\"]=!0,T[i]=T[o]=T[x]=T[s]=T[w]=T[c]=T[u]=T[l]=T[p]=T[d]=T[f]=T[m]=T[g]=T[y]=T[b]=!1;var P=\"object\"==typeof e&&e&&e.Object===Object&&e,D=\"object\"==typeof self&&self&&self.Object===Object&&self,O=P||D||Function(\"return this\")(),M=\"object\"==typeof n&&n&&!n.nodeType&&n,N=M&&\"object\"==typeof t&&t&&!t.nodeType&&t,B=N&&N.exports===M&&P.process,R=function(){try{return B&&B.binding(\"util\")}catch(e){}}(),L=R&&R.isTypedArray;function I(e,t){for(var n=-1,a=e?e.length:0,r=0,i=[];++n<a;){var o=e[n];t(o,n,e)&&(i[r++]=o)}return i}function F(e,t){for(var n=-1,a=e?e.length:0;++n<a;)if(t(e[n],n,e))return!0;return!1}function z(e){var t=!1;if(null!=e&&\"function\"!=typeof e.toString)try{t=!!(e+\"\")}catch(n){}return t}function q(e){var t=-1,n=Array(e.size);return e.forEach((function(e,a){n[++t]=[a,e]})),n}function H(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var U,G,$,W=Array.prototype,V=Function.prototype,K=Object.prototype,J=O[\"__core-js_shared__\"],Y=(U=/[^.]+$/.exec(J&&J.keys&&J.keys.IE_PROTO||\"\"))?\"Symbol(src)_1.\"+U:\"\",X=V.toString,Z=K.hasOwnProperty,Q=K.toString,ee=RegExp(\"^\"+X.call(Z).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),te=O.Symbol,ne=O.Uint8Array,ae=K.propertyIsEnumerable,re=W.splice,ie=(G=Object.keys,$=Object,function(e){return G($(e))}),oe=qe(O,\"DataView\"),se=qe(O,\"Map\"),ce=qe(O,\"Promise\"),ue=qe(O,\"Set\"),le=qe(O,\"WeakMap\"),pe=qe(Object,\"create\"),de=Je(oe),fe=Je(se),he=Je(ce),me=Je(ue),ge=Je(le),ye=te?te.prototype:void 0,ve=ye?ye.valueOf:void 0,be=ye?ye.toString:void 0;function xe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function we(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function ke(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function _e(e){var t=-1,n=e?e.length:0;for(this.__data__=new ke;++t<n;)this.add(e[t])}function je(e){this.__data__=new we(e)}function Se(e,t){var n=Qe(e)||Ze(e)?function(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}(e.length,String):[],a=n.length,r=!!a;for(var i in e)!t&&!Z.call(e,i)||r&&(\"length\"==i||Ue(i,a))||n.push(i);return n}function Ae(e,t){for(var n=e.length;n--;)if(Xe(e[n][0],t))return n;return-1}xe.prototype.clear=function(){this.__data__=pe?pe(null):{}},xe.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},xe.prototype.get=function(e){var t=this.__data__;if(pe){var n=t[e];return n===a?void 0:n}return Z.call(t,e)?t[e]:void 0},xe.prototype.has=function(e){var t=this.__data__;return pe?void 0!==t[e]:Z.call(t,e)},xe.prototype.set=function(e,t){return this.__data__[e]=pe&&void 0===t?a:t,this},we.prototype.clear=function(){this.__data__=[]},we.prototype.delete=function(e){var t=this.__data__,n=Ae(t,e);return!(n<0)&&(n==t.length-1?t.pop():re.call(t,n,1),!0)},we.prototype.get=function(e){var t=this.__data__,n=Ae(t,e);return n<0?void 0:t[n][1]},we.prototype.has=function(e){return Ae(this.__data__,e)>-1},we.prototype.set=function(e,t){var n=this.__data__,a=Ae(n,e);return a<0?n.push([e,t]):n[a][1]=t,this},ke.prototype.clear=function(){this.__data__={hash:new xe,map:new(se||we),string:new xe}},ke.prototype.delete=function(e){return ze(this,e).delete(e)},ke.prototype.get=function(e){return ze(this,e).get(e)},ke.prototype.has=function(e){return ze(this,e).has(e)},ke.prototype.set=function(e,t){return ze(this,e).set(e,t),this},_e.prototype.add=_e.prototype.push=function(e){return this.__data__.set(e,a),this},_e.prototype.has=function(e){return this.__data__.has(e)},je.prototype.clear=function(){this.__data__=new we},je.prototype.delete=function(e){return this.__data__.delete(e)},je.prototype.get=function(e){return this.__data__.get(e)},je.prototype.has=function(e){return this.__data__.has(e)},je.prototype.set=function(e,t){var n=this.__data__;if(n instanceof we){var a=n.__data__;if(!se||a.length<199)return a.push([e,t]),this;n=this.__data__=new ke(a)}return n.set(e,t),this};var Ee,Ce,Te=(Ee=function(e,t){return e&&De(e,t,st)},function(e,t){if(null==e)return e;if(!et(e))return Ee(e,t);for(var n=e.length,a=Ce?n:-1,r=Object(e);(Ce?a--:++a<n)&&!1!==t(r[a],a,r););return e});function Pe(e,t){var n=[];return Te(e,(function(e,a,r){t(e,a,r)&&n.push(e)})),n}var De=function(e){return function(t,n,a){for(var r=-1,i=Object(t),o=a(t),s=o.length;s--;){var c=o[e?s:++r];if(!1===n(i[c],c,i))break}return t}}();function Oe(e,t){for(var n=0,a=(t=Ge(t,e)?[t]:Ie(t)).length;null!=e&&n<a;)e=e[Ke(t[n++])];return n&&n==a?e:void 0}function Me(e,t){return null!=e&&t in Object(e)}function Ne(e,t,n,a,r){return e===t||(null==e||null==t||!at(e)&&!rt(t)?e!=e&&t!=t:function(e,t,n,a,r,l){var h=Qe(e),b=Qe(t),k=o,_=o;h||(k=(k=He(e))==i?f:k);b||(_=(_=He(t))==i?f:_);var j=k==f&&!z(e),S=_==f&&!z(t),A=k==_;if(A&&!j)return l||(l=new je),h||ot(e)?Fe(e,t,n,a,r,l):function(e,t,n,a,r,i,o){switch(n){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case x:return!(e.byteLength!=t.byteLength||!a(new ne(e),new ne(t)));case s:case c:case d:return Xe(+e,+t);case u:return e.name==t.name&&e.message==t.message;case m:case y:return e==t+\"\";case p:var l=q;case g:var f=2&i;if(l||(l=H),e.size!=t.size&&!f)return!1;var h=o.get(e);if(h)return h==t;i|=1,o.set(e,t);var b=Fe(l(e),l(t),a,r,i,o);return o.delete(e),b;case v:if(ve)return ve.call(e)==ve.call(t)}return!1}(e,t,k,n,a,r,l);if(!(2&r)){var E=j&&Z.call(e,\"__wrapped__\"),C=S&&Z.call(t,\"__wrapped__\");if(E||C){var T=E?e.value():e,P=C?t.value():t;return l||(l=new je),n(T,P,a,r,l)}}if(!A)return!1;return l||(l=new je),function(e,t,n,a,r,i){var o=2&r,s=st(e),c=s.length,u=st(t),l=u.length;if(c!=l&&!o)return!1;var p=c;for(;p--;){var d=s[p];if(!(o?d in t:Z.call(t,d)))return!1}var f=i.get(e);if(f&&i.get(t))return f==t;var h=!0;i.set(e,t),i.set(t,e);var m=o;for(;++p<c;){var g=e[d=s[p]],y=t[d];if(a)var v=o?a(y,g,d,t,e,i):a(g,y,d,e,t,i);if(!(void 0===v?g===y||n(g,y,a,r,i):v)){h=!1;break}m||(m=\"constructor\"==d)}if(h&&!m){var b=e.constructor,x=t.constructor;b==x||!(\"constructor\"in e)||!(\"constructor\"in t)||\"function\"==typeof b&&b instanceof b&&\"function\"==typeof x&&x instanceof x||(h=!1)}return i.delete(e),i.delete(t),h}(e,t,n,a,r,l)}(e,t,Ne,n,a,r))}function Be(e){return!(!at(e)||function(e){return!!Y&&Y in e}(e))&&(tt(e)||z(e)?ee:E).test(Je(e))}function Re(e){return\"function\"==typeof e?e:null==e?ct:\"object\"==typeof e?Qe(e)?function(e,t){if(Ge(e)&&$e(t))return We(Ke(e),t);return function(n){var a=function(e,t,n){var a=null==e?void 0:Oe(e,t);return void 0===a?n:a}(n,e);return void 0===a&&a===t?function(e,t){return null!=e&&function(e,t,n){t=Ge(t,e)?[t]:Ie(t);var a,r=-1,i=t.length;for(;++r<i;){var o=Ke(t[r]);if(!(a=null!=e&&n(e,o)))break;e=e[o]}if(a)return a;i=e?e.length:0;return!!i&&nt(i)&&Ue(o,i)&&(Qe(e)||Ze(e))}(e,t,Me)}(n,e):Ne(t,a,void 0,3)}}(e[0],e[1]):function(e){var t=function(e){var t=st(e),n=t.length;for(;n--;){var a=t[n],r=e[a];t[n]=[a,r,$e(r)]}return t}(e);if(1==t.length&&t[0][2])return We(t[0][0],t[0][1]);return function(n){return n===e||function(e,t,n,a){var r=n.length,i=r,o=!a;if(null==e)return!i;for(e=Object(e);r--;){var s=n[r];if(o&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++r<i;){var c=(s=n[r])[0],u=e[c],l=s[1];if(o&&s[2]){if(void 0===u&&!(c in e))return!1}else{var p=new je;if(a)var d=a(u,l,c,e,t,p);if(!(void 0===d?Ne(l,u,a,3,p):d))return!1}}return!0}(n,e,t)}}(e):Ge(t=e)?(n=Ke(t),function(e){return null==e?void 0:e[n]}):function(e){return function(t){return Oe(t,e)}}(t);var t,n}function Le(e){if(n=(t=e)&&t.constructor,a=\"function\"==typeof n&&n.prototype||K,t!==a)return ie(e);var t,n,a,r=[];for(var i in Object(e))Z.call(e,i)&&\"constructor\"!=i&&r.push(i);return r}function Ie(e){return Qe(e)?e:Ve(e)}function Fe(e,t,n,a,r,i){var o=2&r,s=e.length,c=t.length;if(s!=c&&!(o&&c>s))return!1;var u=i.get(e);if(u&&i.get(t))return u==t;var l=-1,p=!0,d=1&r?new _e:void 0;for(i.set(e,t),i.set(t,e);++l<s;){var f=e[l],h=t[l];if(a)var m=o?a(h,f,l,t,e,i):a(f,h,l,e,t,i);if(void 0!==m){if(m)continue;p=!1;break}if(d){if(!F(t,(function(e,t){if(!d.has(t)&&(f===e||n(f,e,a,r,i)))return d.add(t)}))){p=!1;break}}else if(f!==h&&!n(f,h,a,r,i)){p=!1;break}}return i.delete(e),i.delete(t),p}function ze(e,t){var n,a,r=e.__data__;return(\"string\"==(a=typeof(n=t))||\"number\"==a||\"symbol\"==a||\"boolean\"==a?\"__proto__\"!==n:null===n)?r[\"string\"==typeof t?\"string\":\"hash\"]:r.map}function qe(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Be(n)?n:void 0}var He=function(e){return Q.call(e)};function Ue(e,t){return!!(t=null==t?r:t)&&(\"number\"==typeof e||C.test(e))&&e>-1&&e%1==0&&e<t}function Ge(e,t){if(Qe(e))return!1;var n=typeof e;return!(\"number\"!=n&&\"symbol\"!=n&&\"boolean\"!=n&&null!=e&&!it(e))||(_.test(e)||!k.test(e)||null!=t&&e in Object(t))}function $e(e){return e==e&&!at(e)}function We(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}(oe&&He(new oe(new ArrayBuffer(1)))!=w||se&&He(new se)!=p||ce&&He(ce.resolve())!=h||ue&&He(new ue)!=g||le&&He(new le)!=b)&&(He=function(e){var t=Q.call(e),n=t==f?e.constructor:void 0,a=n?Je(n):void 0;if(a)switch(a){case de:return w;case fe:return p;case he:return h;case me:return g;case ge:return b}return t});var Ve=Ye((function(e){var t;e=null==(t=e)?\"\":function(e){if(\"string\"==typeof e)return e;if(it(e))return be?be.call(e):\"\";var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}(t);var n=[];return j.test(e)&&n.push(\"\"),e.replace(S,(function(e,t,a,r){n.push(a?r.replace(A,\"$1\"):t||e)})),n}));function Ke(e){if(\"string\"==typeof e||it(e))return e;var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}function Je(e){if(null!=e){try{return X.call(e)}catch(t){}try{return e+\"\"}catch(t){}}return\"\"}function Ye(e,t){if(\"function\"!=typeof e||t&&\"function\"!=typeof t)throw new TypeError(\"Expected a function\");var n=function(){var a=arguments,r=t?t.apply(this,a):a[0],i=n.cache;if(i.has(r))return i.get(r);var o=e.apply(this,a);return n.cache=i.set(r,o),o};return n.cache=new(Ye.Cache||ke),n}function Xe(e,t){return e===t||e!=e&&t!=t}function Ze(e){return function(e){return rt(e)&&et(e)}(e)&&Z.call(e,\"callee\")&&(!ae.call(e,\"callee\")||Q.call(e)==i)}Ye.Cache=ke;var Qe=Array.isArray;function et(e){return null!=e&&nt(e.length)&&!tt(e)}function tt(e){var t=at(e)?Q.call(e):\"\";return t==l||\"[object GeneratorFunction]\"==t}function nt(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=r}function at(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function rt(e){return!!e&&\"object\"==typeof e}function it(e){return\"symbol\"==typeof e||rt(e)&&Q.call(e)==v}var ot=L?function(e){return function(t){return e(t)}}(L):function(e){return rt(e)&&nt(e.length)&&!!T[Q.call(e)]};function st(e){return et(e)?Se(e):Le(e)}function ct(e){return e}t.exports=function(e,t){return(Qe(e)?I:Pe)(e,Re(t))}}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],402:[function(e,t,n){(function(e){(function(){var n=9007199254740991,a=\"[object Arguments]\",r=\"[object Function]\",i=\"[object GeneratorFunction]\",o=\"object\"==typeof e&&e&&e.Object===Object&&e,s=\"object\"==typeof self&&self&&self.Object===Object&&self,c=o||s||Function(\"return this\")();function u(e,t){for(var n=-1,a=t.length,r=e.length;++n<a;)e[r+n]=t[n];return e}var l=Object.prototype,p=l.hasOwnProperty,d=l.toString,f=c.Symbol,h=l.propertyIsEnumerable,m=f?f.isConcatSpreadable:void 0;function g(e,t,n,a,r){var i=-1,o=e.length;for(n||(n=y),r||(r=[]);++i<o;){var s=e[i];t>0&&n(s)?t>1?g(s,t-1,n,a,r):u(r,s):a||(r[r.length]=s)}return r}function y(e){return v(e)||function(e){return function(e){return function(e){return!!e&&\"object\"==typeof e}(e)&&function(e){return null!=e&&function(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=n}(e.length)&&!function(e){var t=function(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}(e)?d.call(e):\"\";return t==r||t==i}(e)}(e)}(e)&&p.call(e,\"callee\")&&(!h.call(e,\"callee\")||d.call(e)==a)}(e)||!!(m&&e&&e[m])}var v=Array.isArray;t.exports=function(e){return(e?e.length:0)?g(e,1):[]}}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],403:[function(e,t,n){var a=9007199254740991,r=\"[object Arguments]\",i=\"[object Function]\",o=\"[object GeneratorFunction]\",s=/^(?:0|[1-9]\\d*)$/;function c(e,t){for(var n=-1,a=e?e.length:0;++n<a&&!1!==t(e[n],n,e););return e}var u,l,p=Object.prototype,d=p.hasOwnProperty,f=p.toString,h=p.propertyIsEnumerable,m=(u=Object.keys,l=Object,function(e){return u(l(e))});function g(e,t){var n=_(e)||function(e){return function(e){return function(e){return!!e&&\"object\"==typeof e}(e)&&j(e)}(e)&&d.call(e,\"callee\")&&(!h.call(e,\"callee\")||f.call(e)==r)}(e)?function(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}(e.length,String):[],a=n.length,i=!!a;for(var o in e)!t&&!d.call(e,o)||i&&(\"length\"==o||k(o,a))||n.push(o);return n}var y,v,b=(y=function(e,t){return e&&x(e,t,S)},function(e,t){if(null==e)return e;if(!j(e))return y(e,t);for(var n=e.length,a=v?n:-1,r=Object(e);(v?a--:++a<n)&&!1!==t(r[a],a,r););return e}),x=function(e){return function(t,n,a){for(var r=-1,i=Object(t),o=a(t),s=o.length;s--;){var c=o[e?s:++r];if(!1===n(i[c],c,i))break}return t}}();function w(e){if(n=(t=e)&&t.constructor,a=\"function\"==typeof n&&n.prototype||p,t!==a)return m(e);var t,n,a,r=[];for(var i in Object(e))d.call(e,i)&&\"constructor\"!=i&&r.push(i);return r}function k(e,t){return!!(t=null==t?a:t)&&(\"number\"==typeof e||s.test(e))&&e>-1&&e%1==0&&e<t}var _=Array.isArray;function j(e){return null!=e&&function(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=a}(e.length)&&!function(e){var t=function(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}(e)?f.call(e):\"\";return t==i||t==o}(e)}function S(e){return j(e)?g(e):w(e)}function A(e){return e}t.exports=function(e,t){return(_(e)?c:b)(e,\"function\"==typeof t?t:A)}},{}],404:[function(e,t,n){(function(e){(function(){var a=\"__lodash_hash_undefined__\",r=9007199254740991,i=\"[object Arguments]\",o=\"[object Array]\",s=\"[object Boolean]\",c=\"[object Date]\",u=\"[object Error]\",l=\"[object Function]\",p=\"[object Map]\",d=\"[object Number]\",f=\"[object Object]\",h=\"[object Promise]\",m=\"[object RegExp]\",g=\"[object Set]\",y=\"[object String]\",v=\"[object Symbol]\",b=\"[object WeakMap]\",x=\"[object ArrayBuffer]\",w=\"[object DataView]\",k=/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,_=/^\\w*$/,j=/^\\./,S=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,A=/\\\\(\\\\)?/g,E=/^\\[object .+?Constructor\\]$/,C=/^(?:0|[1-9]\\d*)$/,T={};T[\"[object Float32Array]\"]=T[\"[object Float64Array]\"]=T[\"[object Int8Array]\"]=T[\"[object Int16Array]\"]=T[\"[object Int32Array]\"]=T[\"[object Uint8Array]\"]=T[\"[object Uint8ClampedArray]\"]=T[\"[object Uint16Array]\"]=T[\"[object Uint32Array]\"]=!0,T[i]=T[o]=T[x]=T[s]=T[w]=T[c]=T[u]=T[l]=T[p]=T[d]=T[f]=T[m]=T[g]=T[y]=T[b]=!1;var P=\"object\"==typeof e&&e&&e.Object===Object&&e,D=\"object\"==typeof self&&self&&self.Object===Object&&self,O=P||D||Function(\"return this\")(),M=\"object\"==typeof n&&n&&!n.nodeType&&n,N=M&&\"object\"==typeof t&&t&&!t.nodeType&&t,B=N&&N.exports===M&&P.process,R=function(){try{return B&&B.binding(\"util\")}catch(e){}}(),L=R&&R.isTypedArray;function I(e,t){for(var n=-1,a=e?e.length:0,r=Array(a);++n<a;)r[n]=t(e[n],n,e);return r}function F(e,t){for(var n=-1,a=e?e.length:0;++n<a;)if(t(e[n],n,e))return!0;return!1}function z(e){var t=!1;if(null!=e&&\"function\"!=typeof e.toString)try{t=!!(e+\"\")}catch(n){}return t}function q(e){var t=-1,n=Array(e.size);return e.forEach((function(e,a){n[++t]=[a,e]})),n}function H(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var U,G,$,W=Array.prototype,V=Function.prototype,K=Object.prototype,J=O[\"__core-js_shared__\"],Y=(U=/[^.]+$/.exec(J&&J.keys&&J.keys.IE_PROTO||\"\"))?\"Symbol(src)_1.\"+U:\"\",X=V.toString,Z=K.hasOwnProperty,Q=K.toString,ee=RegExp(\"^\"+X.call(Z).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),te=O.Symbol,ne=O.Uint8Array,ae=K.propertyIsEnumerable,re=W.splice,ie=(G=Object.keys,$=Object,function(e){return G($(e))}),oe=qe(O,\"DataView\"),se=qe(O,\"Map\"),ce=qe(O,\"Promise\"),ue=qe(O,\"Set\"),le=qe(O,\"WeakMap\"),pe=qe(Object,\"create\"),de=Je(oe),fe=Je(se),he=Je(ce),me=Je(ue),ge=Je(le),ye=te?te.prototype:void 0,ve=ye?ye.valueOf:void 0,be=ye?ye.toString:void 0;function xe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function we(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function ke(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function _e(e){var t=-1,n=e?e.length:0;for(this.__data__=new ke;++t<n;)this.add(e[t])}function je(e){this.__data__=new we(e)}function Se(e,t){var n=Qe(e)||Ze(e)?function(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}(e.length,String):[],a=n.length,r=!!a;for(var i in e)!t&&!Z.call(e,i)||r&&(\"length\"==i||Ue(i,a))||n.push(i);return n}function Ae(e,t){for(var n=e.length;n--;)if(Xe(e[n][0],t))return n;return-1}xe.prototype.clear=function(){this.__data__=pe?pe(null):{}},xe.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},xe.prototype.get=function(e){var t=this.__data__;if(pe){var n=t[e];return n===a?void 0:n}return Z.call(t,e)?t[e]:void 0},xe.prototype.has=function(e){var t=this.__data__;return pe?void 0!==t[e]:Z.call(t,e)},xe.prototype.set=function(e,t){return this.__data__[e]=pe&&void 0===t?a:t,this},we.prototype.clear=function(){this.__data__=[]},we.prototype.delete=function(e){var t=this.__data__,n=Ae(t,e);return!(n<0)&&(n==t.length-1?t.pop():re.call(t,n,1),!0)},we.prototype.get=function(e){var t=this.__data__,n=Ae(t,e);return n<0?void 0:t[n][1]},we.prototype.has=function(e){return Ae(this.__data__,e)>-1},we.prototype.set=function(e,t){var n=this.__data__,a=Ae(n,e);return a<0?n.push([e,t]):n[a][1]=t,this},ke.prototype.clear=function(){this.__data__={hash:new xe,map:new(se||we),string:new xe}},ke.prototype.delete=function(e){return ze(this,e).delete(e)},ke.prototype.get=function(e){return ze(this,e).get(e)},ke.prototype.has=function(e){return ze(this,e).has(e)},ke.prototype.set=function(e,t){return ze(this,e).set(e,t),this},_e.prototype.add=_e.prototype.push=function(e){return this.__data__.set(e,a),this},_e.prototype.has=function(e){return this.__data__.has(e)},je.prototype.clear=function(){this.__data__=new we},je.prototype.delete=function(e){return this.__data__.delete(e)},je.prototype.get=function(e){return this.__data__.get(e)},je.prototype.has=function(e){return this.__data__.has(e)},je.prototype.set=function(e,t){var n=this.__data__;if(n instanceof we){var a=n.__data__;if(!se||a.length<199)return a.push([e,t]),this;n=this.__data__=new ke(a)}return n.set(e,t),this};var Ee,Ce,Te=(Ee=function(e,t){return e&&Pe(e,t,st)},function(e,t){if(null==e)return e;if(!et(e))return Ee(e,t);for(var n=e.length,a=Ce?n:-1,r=Object(e);(Ce?a--:++a<n)&&!1!==t(r[a],a,r););return e}),Pe=function(e){return function(t,n,a){for(var r=-1,i=Object(t),o=a(t),s=o.length;s--;){var c=o[e?s:++r];if(!1===n(i[c],c,i))break}return t}}();function De(e,t){for(var n=0,a=(t=Ge(t,e)?[t]:Ie(t)).length;null!=e&&n<a;)e=e[Ke(t[n++])];return n&&n==a?e:void 0}function Oe(e,t){return null!=e&&t in Object(e)}function Me(e,t,n,a,r){return e===t||(null==e||null==t||!at(e)&&!rt(t)?e!=e&&t!=t:function(e,t,n,a,r,l){var h=Qe(e),b=Qe(t),k=o,_=o;h||(k=(k=He(e))==i?f:k);b||(_=(_=He(t))==i?f:_);var j=k==f&&!z(e),S=_==f&&!z(t),A=k==_;if(A&&!j)return l||(l=new je),h||ot(e)?Fe(e,t,n,a,r,l):function(e,t,n,a,r,i,o){switch(n){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case x:return!(e.byteLength!=t.byteLength||!a(new ne(e),new ne(t)));case s:case c:case d:return Xe(+e,+t);case u:return e.name==t.name&&e.message==t.message;case m:case y:return e==t+\"\";case p:var l=q;case g:var f=2&i;if(l||(l=H),e.size!=t.size&&!f)return!1;var h=o.get(e);if(h)return h==t;i|=1,o.set(e,t);var b=Fe(l(e),l(t),a,r,i,o);return o.delete(e),b;case v:if(ve)return ve.call(e)==ve.call(t)}return!1}(e,t,k,n,a,r,l);if(!(2&r)){var E=j&&Z.call(e,\"__wrapped__\"),C=S&&Z.call(t,\"__wrapped__\");if(E||C){var T=E?e.value():e,P=C?t.value():t;return l||(l=new je),n(T,P,a,r,l)}}if(!A)return!1;return l||(l=new je),function(e,t,n,a,r,i){var o=2&r,s=st(e),c=s.length,u=st(t),l=u.length;if(c!=l&&!o)return!1;var p=c;for(;p--;){var d=s[p];if(!(o?d in t:Z.call(t,d)))return!1}var f=i.get(e);if(f&&i.get(t))return f==t;var h=!0;i.set(e,t),i.set(t,e);var m=o;for(;++p<c;){var g=e[d=s[p]],y=t[d];if(a)var v=o?a(y,g,d,t,e,i):a(g,y,d,e,t,i);if(!(void 0===v?g===y||n(g,y,a,r,i):v)){h=!1;break}m||(m=\"constructor\"==d)}if(h&&!m){var b=e.constructor,x=t.constructor;b==x||!(\"constructor\"in e)||!(\"constructor\"in t)||\"function\"==typeof b&&b instanceof b&&\"function\"==typeof x&&x instanceof x||(h=!1)}return i.delete(e),i.delete(t),h}(e,t,n,a,r,l)}(e,t,Me,n,a,r))}function Ne(e){return!(!at(e)||function(e){return!!Y&&Y in e}(e))&&(tt(e)||z(e)?ee:E).test(Je(e))}function Be(e){return\"function\"==typeof e?e:null==e?ct:\"object\"==typeof e?Qe(e)?function(e,t){if(Ge(e)&&$e(t))return We(Ke(e),t);return function(n){var a=function(e,t,n){var a=null==e?void 0:De(e,t);return void 0===a?n:a}(n,e);return void 0===a&&a===t?function(e,t){return null!=e&&function(e,t,n){t=Ge(t,e)?[t]:Ie(t);var a,r=-1,i=t.length;for(;++r<i;){var o=Ke(t[r]);if(!(a=null!=e&&n(e,o)))break;e=e[o]}if(a)return a;i=e?e.length:0;return!!i&&nt(i)&&Ue(o,i)&&(Qe(e)||Ze(e))}(e,t,Oe)}(n,e):Me(t,a,void 0,3)}}(e[0],e[1]):function(e){var t=function(e){var t=st(e),n=t.length;for(;n--;){var a=t[n],r=e[a];t[n]=[a,r,$e(r)]}return t}(e);if(1==t.length&&t[0][2])return We(t[0][0],t[0][1]);return function(n){return n===e||function(e,t,n,a){var r=n.length,i=r,o=!a;if(null==e)return!i;for(e=Object(e);r--;){var s=n[r];if(o&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++r<i;){var c=(s=n[r])[0],u=e[c],l=s[1];if(o&&s[2]){if(void 0===u&&!(c in e))return!1}else{var p=new je;if(a)var d=a(u,l,c,e,t,p);if(!(void 0===d?Me(l,u,a,3,p):d))return!1}}return!0}(n,e,t)}}(e):Ge(t=e)?(n=Ke(t),function(e){return null==e?void 0:e[n]}):function(e){return function(t){return De(t,e)}}(t);var t,n}function Re(e){if(n=(t=e)&&t.constructor,a=\"function\"==typeof n&&n.prototype||K,t!==a)return ie(e);var t,n,a,r=[];for(var i in Object(e))Z.call(e,i)&&\"constructor\"!=i&&r.push(i);return r}function Le(e,t){var n=-1,a=et(e)?Array(e.length):[];return Te(e,(function(e,r,i){a[++n]=t(e,r,i)})),a}function Ie(e){return Qe(e)?e:Ve(e)}function Fe(e,t,n,a,r,i){var o=2&r,s=e.length,c=t.length;if(s!=c&&!(o&&c>s))return!1;var u=i.get(e);if(u&&i.get(t))return u==t;var l=-1,p=!0,d=1&r?new _e:void 0;for(i.set(e,t),i.set(t,e);++l<s;){var f=e[l],h=t[l];if(a)var m=o?a(h,f,l,t,e,i):a(f,h,l,e,t,i);if(void 0!==m){if(m)continue;p=!1;break}if(d){if(!F(t,(function(e,t){if(!d.has(t)&&(f===e||n(f,e,a,r,i)))return d.add(t)}))){p=!1;break}}else if(f!==h&&!n(f,h,a,r,i)){p=!1;break}}return i.delete(e),i.delete(t),p}function ze(e,t){var n,a,r=e.__data__;return(\"string\"==(a=typeof(n=t))||\"number\"==a||\"symbol\"==a||\"boolean\"==a?\"__proto__\"!==n:null===n)?r[\"string\"==typeof t?\"string\":\"hash\"]:r.map}function qe(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Ne(n)?n:void 0}var He=function(e){return Q.call(e)};function Ue(e,t){return!!(t=null==t?r:t)&&(\"number\"==typeof e||C.test(e))&&e>-1&&e%1==0&&e<t}function Ge(e,t){if(Qe(e))return!1;var n=typeof e;return!(\"number\"!=n&&\"symbol\"!=n&&\"boolean\"!=n&&null!=e&&!it(e))||(_.test(e)||!k.test(e)||null!=t&&e in Object(t))}function $e(e){return e==e&&!at(e)}function We(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}(oe&&He(new oe(new ArrayBuffer(1)))!=w||se&&He(new se)!=p||ce&&He(ce.resolve())!=h||ue&&He(new ue)!=g||le&&He(new le)!=b)&&(He=function(e){var t=Q.call(e),n=t==f?e.constructor:void 0,a=n?Je(n):void 0;if(a)switch(a){case de:return w;case fe:return p;case he:return h;case me:return g;case ge:return b}return t});var Ve=Ye((function(e){var t;e=null==(t=e)?\"\":function(e){if(\"string\"==typeof e)return e;if(it(e))return be?be.call(e):\"\";var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}(t);var n=[];return j.test(e)&&n.push(\"\"),e.replace(S,(function(e,t,a,r){n.push(a?r.replace(A,\"$1\"):t||e)})),n}));function Ke(e){if(\"string\"==typeof e||it(e))return e;var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}function Je(e){if(null!=e){try{return X.call(e)}catch(t){}try{return e+\"\"}catch(t){}}return\"\"}function Ye(e,t){if(\"function\"!=typeof e||t&&\"function\"!=typeof t)throw new TypeError(\"Expected a function\");var n=function(){var a=arguments,r=t?t.apply(this,a):a[0],i=n.cache;if(i.has(r))return i.get(r);var o=e.apply(this,a);return n.cache=i.set(r,o),o};return n.cache=new(Ye.Cache||ke),n}function Xe(e,t){return e===t||e!=e&&t!=t}function Ze(e){return function(e){return rt(e)&&et(e)}(e)&&Z.call(e,\"callee\")&&(!ae.call(e,\"callee\")||Q.call(e)==i)}Ye.Cache=ke;var Qe=Array.isArray;function et(e){return null!=e&&nt(e.length)&&!tt(e)}function tt(e){var t=at(e)?Q.call(e):\"\";return t==l||\"[object GeneratorFunction]\"==t}function nt(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=r}function at(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function rt(e){return!!e&&\"object\"==typeof e}function it(e){return\"symbol\"==typeof e||rt(e)&&Q.call(e)==v}var ot=L?function(e){return function(t){return e(t)}}(L):function(e){return rt(e)&&nt(e.length)&&!!T[Q.call(e)]};function st(e){return et(e)?Se(e):Re(e)}function ct(e){return e}t.exports=function(e,t){return(Qe(e)?I:Le)(e,Be(t))}}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],405:[function(e,t,n){(function(e){(function(){var a=\"__lodash_hash_undefined__\",r=9007199254740991,i=\"[object Arguments]\",o=\"[object Function]\",s=\"[object Object]\",c=/^\\[object .+?Constructor\\]$/,u=/^(?:0|[1-9]\\d*)$/,l={};l[\"[object Float32Array]\"]=l[\"[object Float64Array]\"]=l[\"[object Int8Array]\"]=l[\"[object Int16Array]\"]=l[\"[object Int32Array]\"]=l[\"[object Uint8Array]\"]=l[\"[object Uint8ClampedArray]\"]=l[\"[object Uint16Array]\"]=l[\"[object Uint32Array]\"]=!0,l[i]=l[\"[object Array]\"]=l[\"[object ArrayBuffer]\"]=l[\"[object Boolean]\"]=l[\"[object DataView]\"]=l[\"[object Date]\"]=l[\"[object Error]\"]=l[o]=l[\"[object Map]\"]=l[\"[object Number]\"]=l[s]=l[\"[object RegExp]\"]=l[\"[object Set]\"]=l[\"[object String]\"]=l[\"[object WeakMap]\"]=!1;var p=\"object\"==typeof e&&e&&e.Object===Object&&e,d=\"object\"==typeof self&&self&&self.Object===Object&&self,f=p||d||Function(\"return this\")(),h=\"object\"==typeof n&&n&&!n.nodeType&&n,m=h&&\"object\"==typeof t&&t&&!t.nodeType&&t,g=m&&m.exports===h,y=g&&p.process,v=function(){try{var e=m&&m.require&&m.require(\"util\").types;return e||y&&y.binding&&y.binding(\"util\")}catch(t){}}(),b=v&&v.isTypedArray;var x,w,k,_=Array.prototype,j=Function.prototype,S=Object.prototype,A=f[\"__core-js_shared__\"],E=j.toString,C=S.hasOwnProperty,T=(x=/[^.]+$/.exec(A&&A.keys&&A.keys.IE_PROTO||\"\"))?\"Symbol(src)_1.\"+x:\"\",P=S.toString,D=E.call(Object),O=RegExp(\"^\"+E.call(C).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),M=g?f.Buffer:void 0,N=f.Symbol,B=f.Uint8Array,R=M?M.allocUnsafe:void 0,L=(w=Object.getPrototypeOf,k=Object,function(e){return w(k(e))}),I=Object.create,F=S.propertyIsEnumerable,z=_.splice,q=N?N.toStringTag:void 0,H=function(){try{var e=he(Object,\"defineProperty\");return e({},\"\",{}),e}catch(t){}}(),U=M?M.isBuffer:void 0,G=Math.max,$=Date.now,W=he(f,\"Map\"),V=he(Object,\"create\"),K=function(){function e(){}return function(t){if(!Ae(t))return{};if(I)return I(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();function J(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function Y(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function X(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function Z(e){var t=this.__data__=new Y(e);this.size=t.size}function Q(e,t){var n=we(e),a=!n&&xe(e),r=!n&&!a&&_e(e),i=!n&&!a&&!r&&Ce(e),o=n||a||r||i,s=o?function(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}(e.length,String):[],c=s.length;for(var u in e)!t&&!C.call(e,u)||o&&(\"length\"==u||r&&(\"offset\"==u||\"parent\"==u)||i&&(\"buffer\"==u||\"byteLength\"==u||\"byteOffset\"==u)||me(u,c))||s.push(u);return s}function ee(e,t,n){(void 0!==n&&!be(e[t],n)||void 0===n&&!(t in e))&&ae(e,t,n)}function te(e,t,n){var a=e[t];C.call(e,t)&&be(a,n)&&(void 0!==n||t in e)||ae(e,t,n)}function ne(e,t){for(var n=e.length;n--;)if(be(e[n][0],t))return n;return-1}function ae(e,t,n){\"__proto__\"==t&&H?H(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}J.prototype.clear=function(){this.__data__=V?V(null):{},this.size=0},J.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},J.prototype.get=function(e){var t=this.__data__;if(V){var n=t[e];return n===a?void 0:n}return C.call(t,e)?t[e]:void 0},J.prototype.has=function(e){var t=this.__data__;return V?void 0!==t[e]:C.call(t,e)},J.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=V&&void 0===t?a:t,this},Y.prototype.clear=function(){this.__data__=[],this.size=0},Y.prototype.delete=function(e){var t=this.__data__,n=ne(t,e);return!(n<0)&&(n==t.length-1?t.pop():z.call(t,n,1),--this.size,!0)},Y.prototype.get=function(e){var t=this.__data__,n=ne(t,e);return n<0?void 0:t[n][1]},Y.prototype.has=function(e){return ne(this.__data__,e)>-1},Y.prototype.set=function(e,t){var n=this.__data__,a=ne(n,e);return a<0?(++this.size,n.push([e,t])):n[a][1]=t,this},X.prototype.clear=function(){this.size=0,this.__data__={hash:new J,map:new(W||Y),string:new J}},X.prototype.delete=function(e){var t=fe(this,e).delete(e);return this.size-=t?1:0,t},X.prototype.get=function(e){return fe(this,e).get(e)},X.prototype.has=function(e){return fe(this,e).has(e)},X.prototype.set=function(e,t){var n=fe(this,e),a=n.size;return n.set(e,t),this.size+=n.size==a?0:1,this},Z.prototype.clear=function(){this.__data__=new Y,this.size=0},Z.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Z.prototype.get=function(e){return this.__data__.get(e)},Z.prototype.has=function(e){return this.__data__.has(e)},Z.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Y){var a=n.__data__;if(!W||a.length<199)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new X(a)}return n.set(e,t),this.size=n.size,this};var re,ie=function(e,t,n){for(var a=-1,r=Object(e),i=n(e),o=i.length;o--;){var s=i[re?o:++a];if(!1===t(r[s],s,r))break}return e};function oe(e){return null==e?void 0===e?\"[object Undefined]\":\"[object Null]\":q&&q in Object(e)?function(e){var t=C.call(e,q),n=e[q];try{e[q]=void 0;var a=!0}catch(i){}var r=P.call(e);a&&(t?e[q]=n:delete e[q]);return r}(e):function(e){return P.call(e)}(e)}function se(e){return Ee(e)&&oe(e)==i}function ce(e){return!(!Ae(e)||function(e){return!!T&&T in e}(e))&&(je(e)?O:c).test(function(e){if(null!=e){try{return E.call(e)}catch(t){}try{return e+\"\"}catch(t){}}return\"\"}(e))}function ue(e){if(!Ae(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=ge(e),n=[];for(var a in e)(\"constructor\"!=a||!t&&C.call(e,a))&&n.push(a);return n}function le(e,t,n,a,r){e!==t&&ie(t,(function(i,o){if(r||(r=new Z),Ae(i))!function(e,t,n,a,r,i,o){var c=ye(e,n),u=ye(t,n),l=o.get(u);if(l)return void ee(e,n,l);var p=i?i(c,u,n+\"\",e,t,o):void 0,d=void 0===p;if(d){var f=we(u),h=!f&&_e(u),m=!f&&!h&&Ce(u);p=u,f||h||m?we(c)?p=c:Ee(x=c)&&ke(x)?p=function(e,t){var n=-1,a=e.length;t||(t=Array(a));for(;++n<a;)t[n]=e[n];return t}(c):h?(d=!1,p=function(e,t){if(t)return e.slice();var n=e.length,a=R?R(n):new e.constructor(n);return e.copy(a),a}(u,!0)):m?(d=!1,g=u,y=!0?(v=g.buffer,b=new v.constructor(v.byteLength),new B(b).set(new B(v)),b):g.buffer,p=new g.constructor(y,g.byteOffset,g.length)):p=[]:function(e){if(!Ee(e)||oe(e)!=s)return!1;var t=L(e);if(null===t)return!0;var n=C.call(t,\"constructor\")&&t.constructor;return\"function\"==typeof n&&n instanceof n&&E.call(n)==D}(u)||xe(u)?(p=c,xe(c)?p=function(e){return function(e,t,n,a){var r=!n;n||(n={});var i=-1,o=t.length;for(;++i<o;){var s=t[i],c=a?a(n[s],e[s],s,n,e):void 0;void 0===c&&(c=e[s]),r?ae(n,s,c):te(n,s,c)}return n}(e,Te(e))}(c):Ae(c)&&!je(c)||(p=function(e){return\"function\"!=typeof e.constructor||ge(e)?{}:K(L(e))}(u))):d=!1}var g,y,v,b;var x;d&&(o.set(u,p),r(p,u,a,i,o),o.delete(u));ee(e,n,p)}(e,t,o,n,le,a,r);else{var c=a?a(ye(e,o),i,o+\"\",e,t,r):void 0;void 0===c&&(c=i),ee(e,o,c)}}),Te)}function pe(e,t){return ve(function(e,t,n){return t=G(void 0===t?e.length-1:t,0),function(){for(var a=arguments,r=-1,i=G(a.length-t,0),o=Array(i);++r<i;)o[r]=a[t+r];r=-1;for(var s=Array(t+1);++r<t;)s[r]=a[r];return s[t]=n(o),function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}(e,this,s)}}(e,t,Oe),e+\"\")}var de=H?function(e,t){return H(e,\"toString\",{configurable:!0,enumerable:!1,value:(n=t,function(){return n}),writable:!0});var n}:Oe;function fe(e,t){var n,a,r=e.__data__;return(\"string\"==(a=typeof(n=t))||\"number\"==a||\"symbol\"==a||\"boolean\"==a?\"__proto__\"!==n:null===n)?r[\"string\"==typeof t?\"string\":\"hash\"]:r.map}function he(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return ce(n)?n:void 0}function me(e,t){var n=typeof e;return!!(t=null==t?r:t)&&(\"number\"==n||\"symbol\"!=n&&u.test(e))&&e>-1&&e%1==0&&e<t}function ge(e){var t=e&&e.constructor;return e===(\"function\"==typeof t&&t.prototype||S)}function ye(e,t){if((\"constructor\"!==t||\"function\"!=typeof e[t])&&\"__proto__\"!=t)return e[t]}var ve=function(e){var t=0,n=0;return function(){var a=$(),r=16-(a-n);if(n=a,r>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(de);function be(e,t){return e===t||e!=e&&t!=t}var xe=se(function(){return arguments}())?se:function(e){return Ee(e)&&C.call(e,\"callee\")&&!F.call(e,\"callee\")},we=Array.isArray;function ke(e){return null!=e&&Se(e.length)&&!je(e)}var _e=U||function(){return!1};function je(e){if(!Ae(e))return!1;var t=oe(e);return t==o||\"[object GeneratorFunction]\"==t||\"[object AsyncFunction]\"==t||\"[object Proxy]\"==t}function Se(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=r}function Ae(e){var t=typeof e;return null!=e&&(\"object\"==t||\"function\"==t)}function Ee(e){return null!=e&&\"object\"==typeof e}var Ce=b?function(e){return function(t){return e(t)}}(b):function(e){return Ee(e)&&Se(e.length)&&!!l[oe(e)]};function Te(e){return ke(e)?Q(e,!0):ue(e)}var Pe,De=(Pe=function(e,t,n){le(e,t,n)},pe((function(e,t){var n=-1,a=t.length,r=a>1?t[a-1]:void 0,i=a>2?t[2]:void 0;for(r=Pe.length>3&&\"function\"==typeof r?(a--,r):void 0,i&&function(e,t,n){if(!Ae(n))return!1;var a=typeof t;return!!(\"number\"==a?ke(n)&&me(t,n.length):\"string\"==a&&t in n)&&be(n[t],e)}(t[0],t[1],i)&&(r=a<3?void 0:r,a=1),e=Object(e);++n<a;){var o=t[n];o&&Pe(e,o,n,r)}return e})));function Oe(e){return e}t.exports=De}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],406:[function(e,t,n){(function(e){(function(){var n=9007199254740991,a=\"[object Arguments]\",r=\"[object Function]\",i=\"[object GeneratorFunction]\",o=\"[object Symbol]\",s=\"object\"==typeof e&&e&&e.Object===Object&&e,c=\"object\"==typeof self&&self&&self.Object===Object&&self,u=s||c||Function(\"return this\")();function l(e,t){for(var n=-1,a=t.length,r=e.length;++n<a;)e[r+n]=t[n];return e}var p=Object.prototype,d=p.hasOwnProperty,f=p.toString,h=u.Symbol,m=p.propertyIsEnumerable,g=h?h.isConcatSpreadable:void 0,y=Math.max;function v(e,t,n,a,r){var i=-1,o=e.length;for(n||(n=b),r||(r=[]);++i<o;){var s=e[i];t>0&&n(s)?t>1?v(s,t-1,n,a,r):l(r,s):a||(r[r.length]=s)}return r}function b(e){return w(e)||function(e){return function(e){return k(e)&&function(e){return null!=e&&function(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=n}(e.length)&&!function(e){var t=function(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}(e)?f.call(e):\"\";return t==r||t==i}(e)}(e)}(e)&&d.call(e,\"callee\")&&(!m.call(e,\"callee\")||f.call(e)==a)}(e)||!!(g&&e&&e[g])}function x(e){if(\"string\"==typeof e||function(e){return\"symbol\"==typeof e||k(e)&&f.call(e)==o}(e))return e;var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}var w=Array.isArray;function k(e){return!!e&&\"object\"==typeof e}var _,j,S=(_=function(e,t){return null==e?{}:function(e,t){return function(e,t,n){for(var a=-1,r=t.length,i={};++a<r;){var o=t[a],s=e[o];n(s,o)&&(i[o]=s)}return i}(e=Object(e),t,(function(t,n){return n in e}))}(e,function(e,t){for(var n=-1,a=e?e.length:0,r=Array(a);++n<a;)r[n]=t(e[n],n,e);return r}(v(t,1),x))},j=y(void 0===j?_.length-1:j,0),function(){for(var e=arguments,t=-1,n=y(e.length-j,0),a=Array(n);++t<n;)a[t]=e[j+t];t=-1;for(var r=Array(j+1);++t<j;)r[t]=e[t];return r[j]=a,function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}(_,this,r)});t.exports=S}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],407:[function(e,t,n){(function(e){(function(){var a=\"__lodash_hash_undefined__\",r=9007199254740991,i=\"[object Arguments]\",o=\"[object Array]\",s=\"[object Boolean]\",c=\"[object Date]\",u=\"[object Error]\",l=\"[object Function]\",p=\"[object Map]\",d=\"[object Number]\",f=\"[object Object]\",h=\"[object Promise]\",m=\"[object RegExp]\",g=\"[object Set]\",y=\"[object String]\",v=\"[object Symbol]\",b=\"[object WeakMap]\",x=\"[object ArrayBuffer]\",w=\"[object DataView]\",k=/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,_=/^\\w*$/,j=/^\\./,S=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,A=/\\\\(\\\\)?/g,E=/^\\[object .+?Constructor\\]$/,C=/^(?:0|[1-9]\\d*)$/,T={};T[\"[object Float32Array]\"]=T[\"[object Float64Array]\"]=T[\"[object Int8Array]\"]=T[\"[object Int16Array]\"]=T[\"[object Int32Array]\"]=T[\"[object Uint8Array]\"]=T[\"[object Uint8ClampedArray]\"]=T[\"[object Uint16Array]\"]=T[\"[object Uint32Array]\"]=!0,T[i]=T[o]=T[x]=T[s]=T[w]=T[c]=T[u]=T[l]=T[p]=T[d]=T[f]=T[m]=T[g]=T[y]=T[b]=!1;var P=\"object\"==typeof e&&e&&e.Object===Object&&e,D=\"object\"==typeof self&&self&&self.Object===Object&&self,O=P||D||Function(\"return this\")(),M=\"object\"==typeof n&&n&&!n.nodeType&&n,N=M&&\"object\"==typeof t&&t&&!t.nodeType&&t,B=N&&N.exports===M&&P.process,R=function(){try{return B&&B.binding(\"util\")}catch(e){}}(),L=R&&R.isTypedArray;function I(e,t,n,a){var r=-1,i=e?e.length:0;for(a&&i&&(n=e[++r]);++r<i;)n=t(n,e[r],r,e);return n}function F(e,t){for(var n=-1,a=e?e.length:0;++n<a;)if(t(e[n],n,e))return!0;return!1}function z(e,t,n,a,r){return r(e,(function(e,r,i){n=a?(a=!1,e):t(n,e,r,i)})),n}function q(e){var t=!1;if(null!=e&&\"function\"!=typeof e.toString)try{t=!!(e+\"\")}catch(n){}return t}function H(e){var t=-1,n=Array(e.size);return e.forEach((function(e,a){n[++t]=[a,e]})),n}function U(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var G,$,W,V=Array.prototype,K=Function.prototype,J=Object.prototype,Y=O[\"__core-js_shared__\"],X=(G=/[^.]+$/.exec(Y&&Y.keys&&Y.keys.IE_PROTO||\"\"))?\"Symbol(src)_1.\"+G:\"\",Z=K.toString,Q=J.hasOwnProperty,ee=J.toString,te=RegExp(\"^\"+Z.call(Q).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),ne=O.Symbol,ae=O.Uint8Array,re=J.propertyIsEnumerable,ie=V.splice,oe=($=Object.keys,W=Object,function(e){return $(W(e))}),se=qe(O,\"DataView\"),ce=qe(O,\"Map\"),ue=qe(O,\"Promise\"),le=qe(O,\"Set\"),pe=qe(O,\"WeakMap\"),de=qe(Object,\"create\"),fe=Je(se),he=Je(ce),me=Je(ue),ge=Je(le),ye=Je(pe),ve=ne?ne.prototype:void 0,be=ve?ve.valueOf:void 0,xe=ve?ve.toString:void 0;function we(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function ke(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function _e(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function je(e){var t=-1,n=e?e.length:0;for(this.__data__=new _e;++t<n;)this.add(e[t])}function Se(e){this.__data__=new ke(e)}function Ae(e,t){var n=Qe(e)||Ze(e)?function(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}(e.length,String):[],a=n.length,r=!!a;for(var i in e)!t&&!Q.call(e,i)||r&&(\"length\"==i||Ue(i,a))||n.push(i);return n}function Ee(e,t){for(var n=e.length;n--;)if(Xe(e[n][0],t))return n;return-1}we.prototype.clear=function(){this.__data__=de?de(null):{}},we.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},we.prototype.get=function(e){var t=this.__data__;if(de){var n=t[e];return n===a?void 0:n}return Q.call(t,e)?t[e]:void 0},we.prototype.has=function(e){var t=this.__data__;return de?void 0!==t[e]:Q.call(t,e)},we.prototype.set=function(e,t){return this.__data__[e]=de&&void 0===t?a:t,this},ke.prototype.clear=function(){this.__data__=[]},ke.prototype.delete=function(e){var t=this.__data__,n=Ee(t,e);return!(n<0)&&(n==t.length-1?t.pop():ie.call(t,n,1),!0)},ke.prototype.get=function(e){var t=this.__data__,n=Ee(t,e);return n<0?void 0:t[n][1]},ke.prototype.has=function(e){return Ee(this.__data__,e)>-1},ke.prototype.set=function(e,t){var n=this.__data__,a=Ee(n,e);return a<0?n.push([e,t]):n[a][1]=t,this},_e.prototype.clear=function(){this.__data__={hash:new we,map:new(ce||ke),string:new we}},_e.prototype.delete=function(e){return ze(this,e).delete(e)},_e.prototype.get=function(e){return ze(this,e).get(e)},_e.prototype.has=function(e){return ze(this,e).has(e)},_e.prototype.set=function(e,t){return ze(this,e).set(e,t),this},je.prototype.add=je.prototype.push=function(e){return this.__data__.set(e,a),this},je.prototype.has=function(e){return this.__data__.has(e)},Se.prototype.clear=function(){this.__data__=new ke},Se.prototype.delete=function(e){return this.__data__.delete(e)},Se.prototype.get=function(e){return this.__data__.get(e)},Se.prototype.has=function(e){return this.__data__.has(e)},Se.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ke){var a=n.__data__;if(!ce||a.length<199)return a.push([e,t]),this;n=this.__data__=new _e(a)}return n.set(e,t),this};var Ce,Te,Pe=(Ce=function(e,t){return e&&De(e,t,st)},function(e,t){if(null==e)return e;if(!et(e))return Ce(e,t);for(var n=e.length,a=Te?n:-1,r=Object(e);(Te?a--:++a<n)&&!1!==t(r[a],a,r););return e}),De=function(e){return function(t,n,a){for(var r=-1,i=Object(t),o=a(t),s=o.length;s--;){var c=o[e?s:++r];if(!1===n(i[c],c,i))break}return t}}();function Oe(e,t){for(var n=0,a=(t=Ge(t,e)?[t]:Ie(t)).length;null!=e&&n<a;)e=e[Ke(t[n++])];return n&&n==a?e:void 0}function Me(e,t){return null!=e&&t in Object(e)}function Ne(e,t,n,a,r){return e===t||(null==e||null==t||!at(e)&&!rt(t)?e!=e&&t!=t:function(e,t,n,a,r,l){var h=Qe(e),b=Qe(t),k=o,_=o;h||(k=(k=He(e))==i?f:k);b||(_=(_=He(t))==i?f:_);var j=k==f&&!q(e),S=_==f&&!q(t),A=k==_;if(A&&!j)return l||(l=new Se),h||ot(e)?Fe(e,t,n,a,r,l):function(e,t,n,a,r,i,o){switch(n){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case x:return!(e.byteLength!=t.byteLength||!a(new ae(e),new ae(t)));case s:case c:case d:return Xe(+e,+t);case u:return e.name==t.name&&e.message==t.message;case m:case y:return e==t+\"\";case p:var l=H;case g:var f=2&i;if(l||(l=U),e.size!=t.size&&!f)return!1;var h=o.get(e);if(h)return h==t;i|=1,o.set(e,t);var b=Fe(l(e),l(t),a,r,i,o);return o.delete(e),b;case v:if(be)return be.call(e)==be.call(t)}return!1}(e,t,k,n,a,r,l);if(!(2&r)){var E=j&&Q.call(e,\"__wrapped__\"),C=S&&Q.call(t,\"__wrapped__\");if(E||C){var T=E?e.value():e,P=C?t.value():t;return l||(l=new Se),n(T,P,a,r,l)}}if(!A)return!1;return l||(l=new Se),function(e,t,n,a,r,i){var o=2&r,s=st(e),c=s.length,u=st(t),l=u.length;if(c!=l&&!o)return!1;var p=c;for(;p--;){var d=s[p];if(!(o?d in t:Q.call(t,d)))return!1}var f=i.get(e);if(f&&i.get(t))return f==t;var h=!0;i.set(e,t),i.set(t,e);var m=o;for(;++p<c;){var g=e[d=s[p]],y=t[d];if(a)var v=o?a(y,g,d,t,e,i):a(g,y,d,e,t,i);if(!(void 0===v?g===y||n(g,y,a,r,i):v)){h=!1;break}m||(m=\"constructor\"==d)}if(h&&!m){var b=e.constructor,x=t.constructor;b==x||!(\"constructor\"in e)||!(\"constructor\"in t)||\"function\"==typeof b&&b instanceof b&&\"function\"==typeof x&&x instanceof x||(h=!1)}return i.delete(e),i.delete(t),h}(e,t,n,a,r,l)}(e,t,Ne,n,a,r))}function Be(e){return!(!at(e)||function(e){return!!X&&X in e}(e))&&(tt(e)||q(e)?te:E).test(Je(e))}function Re(e){return\"function\"==typeof e?e:null==e?ct:\"object\"==typeof e?Qe(e)?function(e,t){if(Ge(e)&&$e(t))return We(Ke(e),t);return function(n){var a=function(e,t,n){var a=null==e?void 0:Oe(e,t);return void 0===a?n:a}(n,e);return void 0===a&&a===t?function(e,t){return null!=e&&function(e,t,n){t=Ge(t,e)?[t]:Ie(t);var a,r=-1,i=t.length;for(;++r<i;){var o=Ke(t[r]);if(!(a=null!=e&&n(e,o)))break;e=e[o]}if(a)return a;i=e?e.length:0;return!!i&&nt(i)&&Ue(o,i)&&(Qe(e)||Ze(e))}(e,t,Me)}(n,e):Ne(t,a,void 0,3)}}(e[0],e[1]):function(e){var t=function(e){var t=st(e),n=t.length;for(;n--;){var a=t[n],r=e[a];t[n]=[a,r,$e(r)]}return t}(e);if(1==t.length&&t[0][2])return We(t[0][0],t[0][1]);return function(n){return n===e||function(e,t,n,a){var r=n.length,i=r,o=!a;if(null==e)return!i;for(e=Object(e);r--;){var s=n[r];if(o&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++r<i;){var c=(s=n[r])[0],u=e[c],l=s[1];if(o&&s[2]){if(void 0===u&&!(c in e))return!1}else{var p=new Se;if(a)var d=a(u,l,c,e,t,p);if(!(void 0===d?Ne(l,u,a,3,p):d))return!1}}return!0}(n,e,t)}}(e):Ge(t=e)?(n=Ke(t),function(e){return null==e?void 0:e[n]}):function(e){return function(t){return Oe(t,e)}}(t);var t,n}function Le(e){if(n=(t=e)&&t.constructor,a=\"function\"==typeof n&&n.prototype||J,t!==a)return oe(e);var t,n,a,r=[];for(var i in Object(e))Q.call(e,i)&&\"constructor\"!=i&&r.push(i);return r}function Ie(e){return Qe(e)?e:Ve(e)}function Fe(e,t,n,a,r,i){var o=2&r,s=e.length,c=t.length;if(s!=c&&!(o&&c>s))return!1;var u=i.get(e);if(u&&i.get(t))return u==t;var l=-1,p=!0,d=1&r?new je:void 0;for(i.set(e,t),i.set(t,e);++l<s;){var f=e[l],h=t[l];if(a)var m=o?a(h,f,l,t,e,i):a(f,h,l,e,t,i);if(void 0!==m){if(m)continue;p=!1;break}if(d){if(!F(t,(function(e,t){if(!d.has(t)&&(f===e||n(f,e,a,r,i)))return d.add(t)}))){p=!1;break}}else if(f!==h&&!n(f,h,a,r,i)){p=!1;break}}return i.delete(e),i.delete(t),p}function ze(e,t){var n,a,r=e.__data__;return(\"string\"==(a=typeof(n=t))||\"number\"==a||\"symbol\"==a||\"boolean\"==a?\"__proto__\"!==n:null===n)?r[\"string\"==typeof t?\"string\":\"hash\"]:r.map}function qe(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Be(n)?n:void 0}var He=function(e){return ee.call(e)};function Ue(e,t){return!!(t=null==t?r:t)&&(\"number\"==typeof e||C.test(e))&&e>-1&&e%1==0&&e<t}function Ge(e,t){if(Qe(e))return!1;var n=typeof e;return!(\"number\"!=n&&\"symbol\"!=n&&\"boolean\"!=n&&null!=e&&!it(e))||(_.test(e)||!k.test(e)||null!=t&&e in Object(t))}function $e(e){return e==e&&!at(e)}function We(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}(se&&He(new se(new ArrayBuffer(1)))!=w||ce&&He(new ce)!=p||ue&&He(ue.resolve())!=h||le&&He(new le)!=g||pe&&He(new pe)!=b)&&(He=function(e){var t=ee.call(e),n=t==f?e.constructor:void 0,a=n?Je(n):void 0;if(a)switch(a){case fe:return w;case he:return p;case me:return h;case ge:return g;case ye:return b}return t});var Ve=Ye((function(e){var t;e=null==(t=e)?\"\":function(e){if(\"string\"==typeof e)return e;if(it(e))return xe?xe.call(e):\"\";var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}(t);var n=[];return j.test(e)&&n.push(\"\"),e.replace(S,(function(e,t,a,r){n.push(a?r.replace(A,\"$1\"):t||e)})),n}));function Ke(e){if(\"string\"==typeof e||it(e))return e;var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}function Je(e){if(null!=e){try{return Z.call(e)}catch(t){}try{return e+\"\"}catch(t){}}return\"\"}function Ye(e,t){if(\"function\"!=typeof e||t&&\"function\"!=typeof t)throw new TypeError(\"Expected a function\");var n=function(){var a=arguments,r=t?t.apply(this,a):a[0],i=n.cache;if(i.has(r))return i.get(r);var o=e.apply(this,a);return n.cache=i.set(r,o),o};return n.cache=new(Ye.Cache||_e),n}function Xe(e,t){return e===t||e!=e&&t!=t}function Ze(e){return function(e){return rt(e)&&et(e)}(e)&&Q.call(e,\"callee\")&&(!re.call(e,\"callee\")||ee.call(e)==i)}Ye.Cache=_e;var Qe=Array.isArray;function et(e){return null!=e&&nt(e.length)&&!tt(e)}function tt(e){var t=at(e)?ee.call(e):\"\";return t==l||\"[object GeneratorFunction]\"==t}function nt(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=r}function at(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function rt(e){return!!e&&\"object\"==typeof e}function it(e){return\"symbol\"==typeof e||rt(e)&&ee.call(e)==v}var ot=L?function(e){return function(t){return e(t)}}(L):function(e){return rt(e)&&nt(e.length)&&!!T[ee.call(e)]};function st(e){return et(e)?Ae(e):Le(e)}function ct(e){return e}t.exports=function(e,t,n){var a=Qe(e)?I:z,r=arguments.length<3;return a(e,Re(t),n,r,Pe)}}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],408:[function(e,t,n){(function(e){(function(){var a=\"Expected a function\",r=\"__lodash_hash_undefined__\",i=9007199254740991,o=\"[object Arguments]\",s=\"[object Array]\",c=\"[object Boolean]\",u=\"[object Date]\",l=\"[object Error]\",p=\"[object Function]\",d=\"[object Map]\",f=\"[object Number]\",h=\"[object Object]\",m=\"[object Promise]\",g=\"[object RegExp]\",y=\"[object Set]\",v=\"[object String]\",b=\"[object Symbol]\",x=\"[object WeakMap]\",w=\"[object ArrayBuffer]\",k=\"[object DataView]\",_=/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,j=/^\\w*$/,S=/^\\./,A=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,E=/\\\\(\\\\)?/g,C=/^\\[object .+?Constructor\\]$/,T=/^(?:0|[1-9]\\d*)$/,P={};P[\"[object Float32Array]\"]=P[\"[object Float64Array]\"]=P[\"[object Int8Array]\"]=P[\"[object Int16Array]\"]=P[\"[object Int32Array]\"]=P[\"[object Uint8Array]\"]=P[\"[object Uint8ClampedArray]\"]=P[\"[object Uint16Array]\"]=P[\"[object Uint32Array]\"]=!0,P[o]=P[s]=P[w]=P[c]=P[k]=P[u]=P[l]=P[p]=P[d]=P[f]=P[h]=P[g]=P[y]=P[v]=P[x]=!1;var D=\"object\"==typeof e&&e&&e.Object===Object&&e,O=\"object\"==typeof self&&self&&self.Object===Object&&self,M=D||O||Function(\"return this\")(),N=\"object\"==typeof n&&n&&!n.nodeType&&n,B=N&&\"object\"==typeof t&&t&&!t.nodeType&&t,R=B&&B.exports===N&&D.process,L=function(){try{return R&&R.binding(\"util\")}catch(e){}}(),I=L&&L.isTypedArray;function F(e,t){for(var n=-1,a=e?e.length:0,r=0,i=[];++n<a;){var o=e[n];t(o,n,e)&&(i[r++]=o)}return i}function z(e,t){for(var n=-1,a=e?e.length:0;++n<a;)if(t(e[n],n,e))return!0;return!1}function q(e){var t=!1;if(null!=e&&\"function\"!=typeof e.toString)try{t=!!(e+\"\")}catch(n){}return t}function H(e){var t=-1,n=Array(e.size);return e.forEach((function(e,a){n[++t]=[a,e]})),n}function U(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var G,$,W,V=Array.prototype,K=Function.prototype,J=Object.prototype,Y=M[\"__core-js_shared__\"],X=(G=/[^.]+$/.exec(Y&&Y.keys&&Y.keys.IE_PROTO||\"\"))?\"Symbol(src)_1.\"+G:\"\",Z=K.toString,Q=J.hasOwnProperty,ee=J.toString,te=RegExp(\"^\"+Z.call(Q).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),ne=M.Symbol,ae=M.Uint8Array,re=J.propertyIsEnumerable,ie=V.splice,oe=($=Object.keys,W=Object,function(e){return $(W(e))}),se=He(M,\"DataView\"),ce=He(M,\"Map\"),ue=He(M,\"Promise\"),le=He(M,\"Set\"),pe=He(M,\"WeakMap\"),de=He(Object,\"create\"),fe=Ye(se),he=Ye(ce),me=Ye(ue),ge=Ye(le),ye=Ye(pe),ve=ne?ne.prototype:void 0,be=ve?ve.valueOf:void 0,xe=ve?ve.toString:void 0;function we(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function ke(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function _e(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function je(e){var t=-1,n=e?e.length:0;for(this.__data__=new _e;++t<n;)this.add(e[t])}function Se(e){this.__data__=new ke(e)}function Ae(e,t){var n=et(e)||Qe(e)?function(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}(e.length,String):[],a=n.length,r=!!a;for(var i in e)!t&&!Q.call(e,i)||r&&(\"length\"==i||Ge(i,a))||n.push(i);return n}function Ee(e,t){for(var n=e.length;n--;)if(Ze(e[n][0],t))return n;return-1}we.prototype.clear=function(){this.__data__=de?de(null):{}},we.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},we.prototype.get=function(e){var t=this.__data__;if(de){var n=t[e];return n===r?void 0:n}return Q.call(t,e)?t[e]:void 0},we.prototype.has=function(e){var t=this.__data__;return de?void 0!==t[e]:Q.call(t,e)},we.prototype.set=function(e,t){return this.__data__[e]=de&&void 0===t?r:t,this},ke.prototype.clear=function(){this.__data__=[]},ke.prototype.delete=function(e){var t=this.__data__,n=Ee(t,e);return!(n<0)&&(n==t.length-1?t.pop():ie.call(t,n,1),!0)},ke.prototype.get=function(e){var t=this.__data__,n=Ee(t,e);return n<0?void 0:t[n][1]},ke.prototype.has=function(e){return Ee(this.__data__,e)>-1},ke.prototype.set=function(e,t){var n=this.__data__,a=Ee(n,e);return a<0?n.push([e,t]):n[a][1]=t,this},_e.prototype.clear=function(){this.__data__={hash:new we,map:new(ce||ke),string:new we}},_e.prototype.delete=function(e){return qe(this,e).delete(e)},_e.prototype.get=function(e){return qe(this,e).get(e)},_e.prototype.has=function(e){return qe(this,e).has(e)},_e.prototype.set=function(e,t){return qe(this,e).set(e,t),this},je.prototype.add=je.prototype.push=function(e){return this.__data__.set(e,r),this},je.prototype.has=function(e){return this.__data__.has(e)},Se.prototype.clear=function(){this.__data__=new ke},Se.prototype.delete=function(e){return this.__data__.delete(e)},Se.prototype.get=function(e){return this.__data__.get(e)},Se.prototype.has=function(e){return this.__data__.has(e)},Se.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ke){var a=n.__data__;if(!ce||a.length<199)return a.push([e,t]),this;n=this.__data__=new _e(a)}return n.set(e,t),this};var Ce,Te,Pe=(Ce=function(e,t){return e&&Oe(e,t,ct)},function(e,t){if(null==e)return e;if(!tt(e))return Ce(e,t);for(var n=e.length,a=Te?n:-1,r=Object(e);(Te?a--:++a<n)&&!1!==t(r[a],a,r););return e});function De(e,t){var n=[];return Pe(e,(function(e,a,r){t(e,a,r)&&n.push(e)})),n}var Oe=function(e){return function(t,n,a){for(var r=-1,i=Object(t),o=a(t),s=o.length;s--;){var c=o[e?s:++r];if(!1===n(i[c],c,i))break}return t}}();function Me(e,t){for(var n=0,a=(t=$e(t,e)?[t]:Fe(t)).length;null!=e&&n<a;)e=e[Je(t[n++])];return n&&n==a?e:void 0}function Ne(e,t){return null!=e&&t in Object(e)}function Be(e,t,n,a,r){return e===t||(null==e||null==t||!rt(e)&&!it(t)?e!=e&&t!=t:function(e,t,n,a,r,i){var p=et(e),m=et(t),x=s,_=s;p||(x=(x=Ue(e))==o?h:x);m||(_=(_=Ue(t))==o?h:_);var j=x==h&&!q(e),S=_==h&&!q(t),A=x==_;if(A&&!j)return i||(i=new Se),p||st(e)?ze(e,t,n,a,r,i):function(e,t,n,a,r,i,o){switch(n){case k:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case w:return!(e.byteLength!=t.byteLength||!a(new ae(e),new ae(t)));case c:case u:case f:return Ze(+e,+t);case l:return e.name==t.name&&e.message==t.message;case g:case v:return e==t+\"\";case d:var s=H;case y:var p=2&i;if(s||(s=U),e.size!=t.size&&!p)return!1;var h=o.get(e);if(h)return h==t;i|=1,o.set(e,t);var m=ze(s(e),s(t),a,r,i,o);return o.delete(e),m;case b:if(be)return be.call(e)==be.call(t)}return!1}(e,t,x,n,a,r,i);if(!(2&r)){var E=j&&Q.call(e,\"__wrapped__\"),C=S&&Q.call(t,\"__wrapped__\");if(E||C){var T=E?e.value():e,P=C?t.value():t;return i||(i=new Se),n(T,P,a,r,i)}}if(!A)return!1;return i||(i=new Se),function(e,t,n,a,r,i){var o=2&r,s=ct(e),c=s.length,u=ct(t),l=u.length;if(c!=l&&!o)return!1;var p=c;for(;p--;){var d=s[p];if(!(o?d in t:Q.call(t,d)))return!1}var f=i.get(e);if(f&&i.get(t))return f==t;var h=!0;i.set(e,t),i.set(t,e);var m=o;for(;++p<c;){var g=e[d=s[p]],y=t[d];if(a)var v=o?a(y,g,d,t,e,i):a(g,y,d,e,t,i);if(!(void 0===v?g===y||n(g,y,a,r,i):v)){h=!1;break}m||(m=\"constructor\"==d)}if(h&&!m){var b=e.constructor,x=t.constructor;b==x||!(\"constructor\"in e)||!(\"constructor\"in t)||\"function\"==typeof b&&b instanceof b&&\"function\"==typeof x&&x instanceof x||(h=!1)}return i.delete(e),i.delete(t),h}(e,t,n,a,r,i)}(e,t,Be,n,a,r))}function Re(e){return!(!rt(e)||function(e){return!!X&&X in e}(e))&&(nt(e)||q(e)?te:C).test(Ye(e))}function Le(e){return\"function\"==typeof e?e:null==e?ut:\"object\"==typeof e?et(e)?function(e,t){if($e(e)&&We(t))return Ve(Je(e),t);return function(n){var a=function(e,t,n){var a=null==e?void 0:Me(e,t);return void 0===a?n:a}(n,e);return void 0===a&&a===t?function(e,t){return null!=e&&function(e,t,n){t=$e(t,e)?[t]:Fe(t);var a,r=-1,i=t.length;for(;++r<i;){var o=Je(t[r]);if(!(a=null!=e&&n(e,o)))break;e=e[o]}if(a)return a;i=e?e.length:0;return!!i&&at(i)&&Ge(o,i)&&(et(e)||Qe(e))}(e,t,Ne)}(n,e):Be(t,a,void 0,3)}}(e[0],e[1]):function(e){var t=function(e){var t=ct(e),n=t.length;for(;n--;){var a=t[n],r=e[a];t[n]=[a,r,We(r)]}return t}(e);if(1==t.length&&t[0][2])return Ve(t[0][0],t[0][1]);return function(n){return n===e||function(e,t,n,a){var r=n.length,i=r,o=!a;if(null==e)return!i;for(e=Object(e);r--;){var s=n[r];if(o&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++r<i;){var c=(s=n[r])[0],u=e[c],l=s[1];if(o&&s[2]){if(void 0===u&&!(c in e))return!1}else{var p=new Se;if(a)var d=a(u,l,c,e,t,p);if(!(void 0===d?Be(l,u,a,3,p):d))return!1}}return!0}(n,e,t)}}(e):$e(t=e)?(n=Je(t),function(e){return null==e?void 0:e[n]}):function(e){return function(t){return Me(t,e)}}(t);var t,n}function Ie(e){if(n=(t=e)&&t.constructor,a=\"function\"==typeof n&&n.prototype||J,t!==a)return oe(e);var t,n,a,r=[];for(var i in Object(e))Q.call(e,i)&&\"constructor\"!=i&&r.push(i);return r}function Fe(e){return et(e)?e:Ke(e)}function ze(e,t,n,a,r,i){var o=2&r,s=e.length,c=t.length;if(s!=c&&!(o&&c>s))return!1;var u=i.get(e);if(u&&i.get(t))return u==t;var l=-1,p=!0,d=1&r?new je:void 0;for(i.set(e,t),i.set(t,e);++l<s;){var f=e[l],h=t[l];if(a)var m=o?a(h,f,l,t,e,i):a(f,h,l,e,t,i);if(void 0!==m){if(m)continue;p=!1;break}if(d){if(!z(t,(function(e,t){if(!d.has(t)&&(f===e||n(f,e,a,r,i)))return d.add(t)}))){p=!1;break}}else if(f!==h&&!n(f,h,a,r,i)){p=!1;break}}return i.delete(e),i.delete(t),p}function qe(e,t){var n,a,r=e.__data__;return(\"string\"==(a=typeof(n=t))||\"number\"==a||\"symbol\"==a||\"boolean\"==a?\"__proto__\"!==n:null===n)?r[\"string\"==typeof t?\"string\":\"hash\"]:r.map}function He(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Re(n)?n:void 0}var Ue=function(e){return ee.call(e)};function Ge(e,t){return!!(t=null==t?i:t)&&(\"number\"==typeof e||T.test(e))&&e>-1&&e%1==0&&e<t}function $e(e,t){if(et(e))return!1;var n=typeof e;return!(\"number\"!=n&&\"symbol\"!=n&&\"boolean\"!=n&&null!=e&&!ot(e))||(j.test(e)||!_.test(e)||null!=t&&e in Object(t))}function We(e){return e==e&&!rt(e)}function Ve(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}(se&&Ue(new se(new ArrayBuffer(1)))!=k||ce&&Ue(new ce)!=d||ue&&Ue(ue.resolve())!=m||le&&Ue(new le)!=y||pe&&Ue(new pe)!=x)&&(Ue=function(e){var t=ee.call(e),n=t==h?e.constructor:void 0,a=n?Ye(n):void 0;if(a)switch(a){case fe:return k;case he:return d;case me:return m;case ge:return y;case ye:return x}return t});var Ke=Xe((function(e){var t;e=null==(t=e)?\"\":function(e){if(\"string\"==typeof e)return e;if(ot(e))return xe?xe.call(e):\"\";var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}(t);var n=[];return S.test(e)&&n.push(\"\"),e.replace(A,(function(e,t,a,r){n.push(a?r.replace(E,\"$1\"):t||e)})),n}));function Je(e){if(\"string\"==typeof e||ot(e))return e;var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}function Ye(e){if(null!=e){try{return Z.call(e)}catch(t){}try{return e+\"\"}catch(t){}}return\"\"}function Xe(e,t){if(\"function\"!=typeof e||t&&\"function\"!=typeof t)throw new TypeError(a);var n=function(){var a=arguments,r=t?t.apply(this,a):a[0],i=n.cache;if(i.has(r))return i.get(r);var o=e.apply(this,a);return n.cache=i.set(r,o),o};return n.cache=new(Xe.Cache||_e),n}function Ze(e,t){return e===t||e!=e&&t!=t}function Qe(e){return function(e){return it(e)&&tt(e)}(e)&&Q.call(e,\"callee\")&&(!re.call(e,\"callee\")||ee.call(e)==o)}Xe.Cache=_e;var et=Array.isArray;function tt(e){return null!=e&&at(e.length)&&!nt(e)}function nt(e){var t=rt(e)?ee.call(e):\"\";return t==p||\"[object GeneratorFunction]\"==t}function at(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=i}function rt(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function it(e){return!!e&&\"object\"==typeof e}function ot(e){return\"symbol\"==typeof e||it(e)&&ee.call(e)==b}var st=I?function(e){return function(t){return e(t)}}(I):function(e){return it(e)&&at(e.length)&&!!P[ee.call(e)]};function ct(e){return tt(e)?Ae(e):Ie(e)}function ut(e){return e}t.exports=function(e,t){return(et(e)?F:De)(e,function(e){if(\"function\"!=typeof e)throw new TypeError(a);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}(Le(t)))}}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],409:[function(e,t,n){(function(e){(function(){var a=\"__lodash_hash_undefined__\",r=9007199254740991,i=\"[object Arguments]\",o=\"[object Array]\",s=\"[object Boolean]\",c=\"[object Date]\",u=\"[object Error]\",l=\"[object Function]\",p=\"[object Map]\",d=\"[object Number]\",f=\"[object Object]\",h=\"[object Promise]\",m=\"[object RegExp]\",g=\"[object Set]\",y=\"[object String]\",v=\"[object Symbol]\",b=\"[object WeakMap]\",x=\"[object ArrayBuffer]\",w=\"[object DataView]\",k=/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,_=/^\\w*$/,j=/^\\./,S=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,A=/\\\\(\\\\)?/g,E=/^\\[object .+?Constructor\\]$/,C=/^(?:0|[1-9]\\d*)$/,T={};T[\"[object Float32Array]\"]=T[\"[object Float64Array]\"]=T[\"[object Int8Array]\"]=T[\"[object Int16Array]\"]=T[\"[object Int32Array]\"]=T[\"[object Uint8Array]\"]=T[\"[object Uint8ClampedArray]\"]=T[\"[object Uint16Array]\"]=T[\"[object Uint32Array]\"]=!0,T[i]=T[o]=T[x]=T[s]=T[w]=T[c]=T[u]=T[l]=T[p]=T[d]=T[f]=T[m]=T[g]=T[y]=T[b]=!1;var P=\"object\"==typeof e&&e&&e.Object===Object&&e,D=\"object\"==typeof self&&self&&self.Object===Object&&self,O=P||D||Function(\"return this\")(),M=\"object\"==typeof n&&n&&!n.nodeType&&n,N=M&&\"object\"==typeof t&&t&&!t.nodeType&&t,B=N&&N.exports===M&&P.process,R=function(){try{return B&&B.binding(\"util\")}catch(e){}}(),L=R&&R.isTypedArray;function I(e,t){for(var n=-1,a=e?e.length:0;++n<a;)if(t(e[n],n,e))return!0;return!1}function F(e){var t=!1;if(null!=e&&\"function\"!=typeof e.toString)try{t=!!(e+\"\")}catch(n){}return t}function z(e){var t=-1,n=Array(e.size);return e.forEach((function(e,a){n[++t]=[a,e]})),n}function q(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var H,U,G,$=Array.prototype,W=Function.prototype,V=Object.prototype,K=O[\"__core-js_shared__\"],J=(H=/[^.]+$/.exec(K&&K.keys&&K.keys.IE_PROTO||\"\"))?\"Symbol(src)_1.\"+H:\"\",Y=W.toString,X=V.hasOwnProperty,Z=V.toString,Q=RegExp(\"^\"+Y.call(X).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),ee=O.Symbol,te=O.Uint8Array,ne=V.propertyIsEnumerable,ae=$.splice,re=(U=Object.keys,G=Object,function(e){return U(G(e))}),ie=ze(O,\"DataView\"),oe=ze(O,\"Map\"),se=ze(O,\"Promise\"),ce=ze(O,\"Set\"),ue=ze(O,\"WeakMap\"),le=ze(Object,\"create\"),pe=Ke(ie),de=Ke(oe),fe=Ke(se),he=Ke(ce),me=Ke(ue),ge=ee?ee.prototype:void 0,ye=ge?ge.valueOf:void 0,ve=ge?ge.toString:void 0;function be(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function xe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function we(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function ke(e){var t=-1,n=e?e.length:0;for(this.__data__=new we;++t<n;)this.add(e[t])}function _e(e){this.__data__=new xe(e)}function je(e,t){var n=Ze(e)||Xe(e)?function(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}(e.length,String):[],a=n.length,r=!!a;for(var i in e)!t&&!X.call(e,i)||r&&(\"length\"==i||He(i,a))||n.push(i);return n}function Se(e,t){for(var n=e.length;n--;)if(Ye(e[n][0],t))return n;return-1}be.prototype.clear=function(){this.__data__=le?le(null):{}},be.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},be.prototype.get=function(e){var t=this.__data__;if(le){var n=t[e];return n===a?void 0:n}return X.call(t,e)?t[e]:void 0},be.prototype.has=function(e){var t=this.__data__;return le?void 0!==t[e]:X.call(t,e)},be.prototype.set=function(e,t){return this.__data__[e]=le&&void 0===t?a:t,this},xe.prototype.clear=function(){this.__data__=[]},xe.prototype.delete=function(e){var t=this.__data__,n=Se(t,e);return!(n<0)&&(n==t.length-1?t.pop():ae.call(t,n,1),!0)},xe.prototype.get=function(e){var t=this.__data__,n=Se(t,e);return n<0?void 0:t[n][1]},xe.prototype.has=function(e){return Se(this.__data__,e)>-1},xe.prototype.set=function(e,t){var n=this.__data__,a=Se(n,e);return a<0?n.push([e,t]):n[a][1]=t,this},we.prototype.clear=function(){this.__data__={hash:new be,map:new(oe||xe),string:new be}},we.prototype.delete=function(e){return Fe(this,e).delete(e)},we.prototype.get=function(e){return Fe(this,e).get(e)},we.prototype.has=function(e){return Fe(this,e).has(e)},we.prototype.set=function(e,t){return Fe(this,e).set(e,t),this},ke.prototype.add=ke.prototype.push=function(e){return this.__data__.set(e,a),this},ke.prototype.has=function(e){return this.__data__.has(e)},_e.prototype.clear=function(){this.__data__=new xe},_e.prototype.delete=function(e){return this.__data__.delete(e)},_e.prototype.get=function(e){return this.__data__.get(e)},_e.prototype.has=function(e){return this.__data__.has(e)},_e.prototype.set=function(e,t){var n=this.__data__;if(n instanceof xe){var a=n.__data__;if(!oe||a.length<199)return a.push([e,t]),this;n=this.__data__=new we(a)}return n.set(e,t),this};var Ae,Ee,Ce=(Ae=function(e,t){return e&&Te(e,t,ot)},function(e,t){if(null==e)return e;if(!Qe(e))return Ae(e,t);for(var n=e.length,a=Ee?n:-1,r=Object(e);(Ee?a--:++a<n)&&!1!==t(r[a],a,r););return e}),Te=function(e){return function(t,n,a){for(var r=-1,i=Object(t),o=a(t),s=o.length;s--;){var c=o[e?s:++r];if(!1===n(i[c],c,i))break}return t}}();function Pe(e,t){for(var n=0,a=(t=Ue(t,e)?[t]:Le(t)).length;null!=e&&n<a;)e=e[Ve(t[n++])];return n&&n==a?e:void 0}function De(e,t){return null!=e&&t in Object(e)}function Oe(e,t,n,a,r){return e===t||(null==e||null==t||!nt(e)&&!at(t)?e!=e&&t!=t:function(e,t,n,a,r,l){var h=Ze(e),b=Ze(t),k=o,_=o;h||(k=(k=qe(e))==i?f:k);b||(_=(_=qe(t))==i?f:_);var j=k==f&&!F(e),S=_==f&&!F(t),A=k==_;if(A&&!j)return l||(l=new _e),h||it(e)?Ie(e,t,n,a,r,l):function(e,t,n,a,r,i,o){switch(n){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case x:return!(e.byteLength!=t.byteLength||!a(new te(e),new te(t)));case s:case c:case d:return Ye(+e,+t);case u:return e.name==t.name&&e.message==t.message;case m:case y:return e==t+\"\";case p:var l=z;case g:var f=2&i;if(l||(l=q),e.size!=t.size&&!f)return!1;var h=o.get(e);if(h)return h==t;i|=1,o.set(e,t);var b=Ie(l(e),l(t),a,r,i,o);return o.delete(e),b;case v:if(ye)return ye.call(e)==ye.call(t)}return!1}(e,t,k,n,a,r,l);if(!(2&r)){var E=j&&X.call(e,\"__wrapped__\"),C=S&&X.call(t,\"__wrapped__\");if(E||C){var T=E?e.value():e,P=C?t.value():t;return l||(l=new _e),n(T,P,a,r,l)}}if(!A)return!1;return l||(l=new _e),function(e,t,n,a,r,i){var o=2&r,s=ot(e),c=s.length,u=ot(t),l=u.length;if(c!=l&&!o)return!1;var p=c;for(;p--;){var d=s[p];if(!(o?d in t:X.call(t,d)))return!1}var f=i.get(e);if(f&&i.get(t))return f==t;var h=!0;i.set(e,t),i.set(t,e);var m=o;for(;++p<c;){var g=e[d=s[p]],y=t[d];if(a)var v=o?a(y,g,d,t,e,i):a(g,y,d,e,t,i);if(!(void 0===v?g===y||n(g,y,a,r,i):v)){h=!1;break}m||(m=\"constructor\"==d)}if(h&&!m){var b=e.constructor,x=t.constructor;b==x||!(\"constructor\"in e)||!(\"constructor\"in t)||\"function\"==typeof b&&b instanceof b&&\"function\"==typeof x&&x instanceof x||(h=!1)}return i.delete(e),i.delete(t),h}(e,t,n,a,r,l)}(e,t,Oe,n,a,r))}function Me(e){return!(!nt(e)||function(e){return!!J&&J in e}(e))&&(et(e)||F(e)?Q:E).test(Ke(e))}function Ne(e){return\"function\"==typeof e?e:null==e?st:\"object\"==typeof e?Ze(e)?function(e,t){if(Ue(e)&&Ge(t))return $e(Ve(e),t);return function(n){var a=function(e,t,n){var a=null==e?void 0:Pe(e,t);return void 0===a?n:a}(n,e);return void 0===a&&a===t?function(e,t){return null!=e&&function(e,t,n){t=Ue(t,e)?[t]:Le(t);var a,r=-1,i=t.length;for(;++r<i;){var o=Ve(t[r]);if(!(a=null!=e&&n(e,o)))break;e=e[o]}if(a)return a;i=e?e.length:0;return!!i&&tt(i)&&He(o,i)&&(Ze(e)||Xe(e))}(e,t,De)}(n,e):Oe(t,a,void 0,3)}}(e[0],e[1]):function(e){var t=function(e){var t=ot(e),n=t.length;for(;n--;){var a=t[n],r=e[a];t[n]=[a,r,Ge(r)]}return t}(e);if(1==t.length&&t[0][2])return $e(t[0][0],t[0][1]);return function(n){return n===e||function(e,t,n,a){var r=n.length,i=r,o=!a;if(null==e)return!i;for(e=Object(e);r--;){var s=n[r];if(o&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++r<i;){var c=(s=n[r])[0],u=e[c],l=s[1];if(o&&s[2]){if(void 0===u&&!(c in e))return!1}else{var p=new _e;if(a)var d=a(u,l,c,e,t,p);if(!(void 0===d?Oe(l,u,a,3,p):d))return!1}}return!0}(n,e,t)}}(e):Ue(t=e)?(n=Ve(t),function(e){return null==e?void 0:e[n]}):function(e){return function(t){return Pe(t,e)}}(t);var t,n}function Be(e){if(n=(t=e)&&t.constructor,a=\"function\"==typeof n&&n.prototype||V,t!==a)return re(e);var t,n,a,r=[];for(var i in Object(e))X.call(e,i)&&\"constructor\"!=i&&r.push(i);return r}function Re(e,t){var n;return Ce(e,(function(e,a,r){return!(n=t(e,a,r))})),!!n}function Le(e){return Ze(e)?e:We(e)}function Ie(e,t,n,a,r,i){var o=2&r,s=e.length,c=t.length;if(s!=c&&!(o&&c>s))return!1;var u=i.get(e);if(u&&i.get(t))return u==t;var l=-1,p=!0,d=1&r?new ke:void 0;for(i.set(e,t),i.set(t,e);++l<s;){var f=e[l],h=t[l];if(a)var m=o?a(h,f,l,t,e,i):a(f,h,l,e,t,i);if(void 0!==m){if(m)continue;p=!1;break}if(d){if(!I(t,(function(e,t){if(!d.has(t)&&(f===e||n(f,e,a,r,i)))return d.add(t)}))){p=!1;break}}else if(f!==h&&!n(f,h,a,r,i)){p=!1;break}}return i.delete(e),i.delete(t),p}function Fe(e,t){var n,a,r=e.__data__;return(\"string\"==(a=typeof(n=t))||\"number\"==a||\"symbol\"==a||\"boolean\"==a?\"__proto__\"!==n:null===n)?r[\"string\"==typeof t?\"string\":\"hash\"]:r.map}function ze(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Me(n)?n:void 0}var qe=function(e){return Z.call(e)};function He(e,t){return!!(t=null==t?r:t)&&(\"number\"==typeof e||C.test(e))&&e>-1&&e%1==0&&e<t}function Ue(e,t){if(Ze(e))return!1;var n=typeof e;return!(\"number\"!=n&&\"symbol\"!=n&&\"boolean\"!=n&&null!=e&&!rt(e))||(_.test(e)||!k.test(e)||null!=t&&e in Object(t))}function Ge(e){return e==e&&!nt(e)}function $e(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}(ie&&qe(new ie(new ArrayBuffer(1)))!=w||oe&&qe(new oe)!=p||se&&qe(se.resolve())!=h||ce&&qe(new ce)!=g||ue&&qe(new ue)!=b)&&(qe=function(e){var t=Z.call(e),n=t==f?e.constructor:void 0,a=n?Ke(n):void 0;if(a)switch(a){case pe:return w;case de:return p;case fe:return h;case he:return g;case me:return b}return t});var We=Je((function(e){var t;e=null==(t=e)?\"\":function(e){if(\"string\"==typeof e)return e;if(rt(e))return ve?ve.call(e):\"\";var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}(t);var n=[];return j.test(e)&&n.push(\"\"),e.replace(S,(function(e,t,a,r){n.push(a?r.replace(A,\"$1\"):t||e)})),n}));function Ve(e){if(\"string\"==typeof e||rt(e))return e;var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}function Ke(e){if(null!=e){try{return Y.call(e)}catch(t){}try{return e+\"\"}catch(t){}}return\"\"}function Je(e,t){if(\"function\"!=typeof e||t&&\"function\"!=typeof t)throw new TypeError(\"Expected a function\");var n=function(){var a=arguments,r=t?t.apply(this,a):a[0],i=n.cache;if(i.has(r))return i.get(r);var o=e.apply(this,a);return n.cache=i.set(r,o),o};return n.cache=new(Je.Cache||we),n}function Ye(e,t){return e===t||e!=e&&t!=t}function Xe(e){return function(e){return at(e)&&Qe(e)}(e)&&X.call(e,\"callee\")&&(!ne.call(e,\"callee\")||Z.call(e)==i)}Je.Cache=we;var Ze=Array.isArray;function Qe(e){return null!=e&&tt(e.length)&&!et(e)}function et(e){var t=nt(e)?Z.call(e):\"\";return t==l||\"[object GeneratorFunction]\"==t}function tt(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=r}function nt(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function at(e){return!!e&&\"object\"==typeof e}function rt(e){return\"symbol\"==typeof e||at(e)&&Z.call(e)==v}var it=L?function(e){return function(t){return e(t)}}(L):function(e){return at(e)&&tt(e.length)&&!!T[Z.call(e)]};function ot(e){return Qe(e)?je(e):Be(e)}function st(e){return e}t.exports=function(e,t,n){var a=Ze(e)?I:Re;return n&&function(e,t,n){if(!nt(n))return!1;var a=typeof t;return!!(\"number\"==a?Qe(n)&&He(t,n.length):\"string\"==a&&t in n)&&Ye(n[t],e)}(e,t,n)&&(t=void 0),a(e,Ne(t))}}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],410:[function(e,t,n){(function(e){(function(){(function(){var a,r,i,o=32,s=128,c=256,u=200,l=\"Expected a function\",p=\"__lodash_placeholder__\",d=\"[object Arguments]\",f=\"[object Array]\",h=\"[object Boolean]\",m=\"[object Date]\",g=\"[object Error]\",y=\"[object Function]\",v=\"[object Map]\",b=\"[object Number]\",x=\"[object Object]\",w=\"[object RegExp]\",k=\"[object Set]\",_=\"[object String]\",j=\"[object WeakMap]\",S=\"[object ArrayBuffer]\",A=\"[object Float32Array]\",E=\"[object Float64Array]\",C=\"[object Int8Array]\",T=\"[object Int16Array]\",P=\"[object Int32Array]\",D=\"[object Uint8Array]\",O=\"[object Uint8ClampedArray]\",M=\"[object Uint16Array]\",N=\"[object Uint32Array]\",B=/\\b__p \\+= '';/g,R=/\\b(__p \\+=) '' \\+/g,L=/(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g,I=/&(?:amp|lt|gt|quot|#39|#96);/g,F=/[&<>\"'`]/g,z=RegExp(I.source),q=RegExp(F.source),H=/<%-([\\s\\S]+?)%>/g,U=/<%([\\s\\S]+?)%>/g,G=/<%=([\\s\\S]+?)%>/g,$=/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\n\\\\]|\\\\.)*?\\1)\\]/,W=/^\\w*$/,V=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\n\\\\]|\\\\.)*?)\\2)\\]/g,K=/^[:!,]|[\\\\^$.*+?()[\\]{}|\\/]|(^[0-9a-fA-Fnrtuvx])|([\\n\\r\\u2028\\u2029])/g,J=RegExp(K.source),Y=/[\\u0300-\\u036f\\ufe20-\\ufe23]/g,X=/\\\\(\\\\)?/g,Z=/\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g,Q=/\\w*$/,ee=/^0[xX]/,te=/^\\[object .+?Constructor\\]$/,ne=/^\\d+$/,ae=/[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]/g,re=/($^)/,ie=/['\\n\\r\\u2028\\u2029\\\\]/g,oe=(r=\"[A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]\",i=\"[a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff]+\",RegExp(r+\"+(?=\"+r+i+\")|\"+r+\"?\"+i+\"|\"+r+\"+|[0-9]+\",\"g\")),se=[\"Array\",\"ArrayBuffer\",\"Date\",\"Error\",\"Float32Array\",\"Float64Array\",\"Function\",\"Int8Array\",\"Int16Array\",\"Int32Array\",\"Math\",\"Number\",\"Object\",\"RegExp\",\"Set\",\"String\",\"_\",\"clearTimeout\",\"isFinite\",\"parseFloat\",\"parseInt\",\"setTimeout\",\"TypeError\",\"Uint8Array\",\"Uint8ClampedArray\",\"Uint16Array\",\"Uint32Array\",\"WeakMap\"],ce=-1,ue={};ue[A]=ue[E]=ue[C]=ue[T]=ue[P]=ue[D]=ue[O]=ue[M]=ue[N]=!0,ue[d]=ue[f]=ue[S]=ue[h]=ue[m]=ue[g]=ue[y]=ue[v]=ue[b]=ue[x]=ue[w]=ue[k]=ue[_]=ue[j]=!1;var le={};le[d]=le[f]=le[S]=le[h]=le[m]=le[A]=le[E]=le[C]=le[T]=le[P]=le[b]=le[x]=le[w]=le[_]=le[D]=le[O]=le[M]=le[N]=!0,le[g]=le[y]=le[v]=le[k]=le[j]=!1;var pe={\"À\":\"A\",\"Á\":\"A\",\"Â\":\"A\",\"Ã\":\"A\",\"Ä\":\"A\",\"Å\":\"A\",\"à\":\"a\",\"á\":\"a\",\"â\":\"a\",\"ã\":\"a\",\"ä\":\"a\",\"å\":\"a\",\"Ç\":\"C\",\"ç\":\"c\",\"Ð\":\"D\",\"ð\":\"d\",\"È\":\"E\",\"É\":\"E\",\"Ê\":\"E\",\"Ë\":\"E\",\"è\":\"e\",\"é\":\"e\",\"ê\":\"e\",\"ë\":\"e\",\"Ì\":\"I\",\"Í\":\"I\",\"Î\":\"I\",\"Ï\":\"I\",\"ì\":\"i\",\"í\":\"i\",\"î\":\"i\",\"ï\":\"i\",\"Ñ\":\"N\",\"ñ\":\"n\",\"Ò\":\"O\",\"Ó\":\"O\",\"Ô\":\"O\",\"Õ\":\"O\",\"Ö\":\"O\",\"Ø\":\"O\",\"ò\":\"o\",\"ó\":\"o\",\"ô\":\"o\",\"õ\":\"o\",\"ö\":\"o\",\"ø\":\"o\",\"Ù\":\"U\",\"Ú\":\"U\",\"Û\":\"U\",\"Ü\":\"U\",\"ù\":\"u\",\"ú\":\"u\",\"û\":\"u\",\"ü\":\"u\",\"Ý\":\"Y\",\"ý\":\"y\",\"ÿ\":\"y\",\"Æ\":\"Ae\",\"æ\":\"ae\",\"Þ\":\"Th\",\"þ\":\"th\",\"ß\":\"ss\"},de={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\",\"`\":\"&#96;\"},fe={\"&amp;\":\"&\",\"&lt;\":\"<\",\"&gt;\":\">\",\"&quot;\":'\"',\"&#39;\":\"'\",\"&#96;\":\"`\"},he={function:!0,object:!0},me={0:\"x30\",1:\"x31\",2:\"x32\",3:\"x33\",4:\"x34\",5:\"x35\",6:\"x36\",7:\"x37\",8:\"x38\",9:\"x39\",A:\"x41\",B:\"x42\",C:\"x43\",D:\"x44\",E:\"x45\",F:\"x46\",a:\"x61\",b:\"x62\",c:\"x63\",d:\"x64\",e:\"x65\",f:\"x66\",n:\"x6e\",r:\"x72\",t:\"x74\",u:\"x75\",v:\"x76\",x:\"x78\"},ge={\"\\\\\":\"\\\\\",\"'\":\"'\",\"\\n\":\"n\",\"\\r\":\"r\",\"\\u2028\":\"u2028\",\"\\u2029\":\"u2029\"},ye=he[typeof n]&&n&&!n.nodeType&&n,ve=he[typeof t]&&t&&!t.nodeType&&t,be=ye&&ve&&\"object\"==typeof e&&e&&e.Object&&e,xe=he[typeof self]&&self&&self.Object&&self,we=he[typeof window]&&window&&window.Object&&window,ke=ve&&ve.exports===ye&&ye,_e=be||we!==(this&&this.window)&&we||xe;function je(e,t){if(e!==t){var n=null===e,r=e===a,i=e==e,o=null===t,s=t===a,c=t==t;if(e>t&&!o||!i||n&&!s&&c||r&&c)return 1;if(e<t&&!n||!c||o&&!r&&i||s&&i)return-1}return 0}function Se(e,t,n){for(var a=e.length,r=n?a:-1;n?r--:++r<a;)if(t(e[r],r,e))return r;return-1}function Ae(e,t,n){if(t!=t)return Re(e,n);for(var a=n-1,r=e.length;++a<r;)if(e[a]===t)return a;return-1}function Ee(e){return\"function\"==typeof e||!1}function Ce(e){return null==e?\"\":e+\"\"}function Te(e,t){for(var n=-1,a=e.length;++n<a&&t.indexOf(e.charAt(n))>-1;);return n}function Pe(e,t){for(var n=e.length;n--&&t.indexOf(e.charAt(n))>-1;);return n}function De(e,t){return je(e.criteria,t.criteria)||e.index-t.index}function Oe(e){return pe[e]}function Me(e){return de[e]}function Ne(e,t,n){return t?e=me[e]:n&&(e=ge[e]),\"\\\\\"+e}function Be(e){return\"\\\\\"+ge[e]}function Re(e,t,n){for(var a=e.length,r=t+(n?0:-1);n?r--:++r<a;){var i=e[r];if(i!=i)return r}return-1}function Le(e){return!!e&&\"object\"==typeof e}function Ie(e){return e<=160&&e>=9&&e<=13||32==e||160==e||5760==e||6158==e||e>=8192&&(e<=8202||8232==e||8233==e||8239==e||8287==e||12288==e||65279==e)}function Fe(e,t){for(var n=-1,a=e.length,r=-1,i=[];++n<a;)e[n]===t&&(e[n]=p,i[++r]=n);return i}function ze(e){for(var t=-1,n=e.length;++t<n&&Ie(e.charCodeAt(t)););return t}function qe(e){for(var t=e.length;t--&&Ie(e.charCodeAt(t)););return t}function He(e){return fe[e]}!_e&&(_e=function(e,t){for(var n,a,r=0,i=se.length;r<i;r++)(a=t[n=se[r]]||Function(\"return typeof \"+n+'!== \"undefined\" && '+n)())&&(e[n]=a);return e}({},this));var Ue=function e(t){var n=(t=t?Ue.defaults(_e.Object(),t,Ue.pick(_e,se)):_e).Array,r=t.Date,i=t.Error,v=t.Function,k=t.Math,j=t.Number,pe=t.Object,de=t.RegExp,fe=t.String,he=t.TypeError,me=n.prototype,ge=pe.prototype,ye=fe.prototype,ve=v.prototype.toString,be=ge.hasOwnProperty,xe=0,we=ge.toString,ke=_e._,Ie=de(\"^\"+ve.call(be).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),Ge=t.ArrayBuffer,$e=t.clearTimeout,We=t.parseFloat,Ve=k.pow,Ke=ge.propertyIsEnumerable,Je=oa(t,\"Set\"),Ye=t.setTimeout,Xe=me.splice,Ze=t.Uint8Array,Qe=oa(t,\"WeakMap\"),et=k.ceil,tt=oa(pe,\"create\"),nt=k.floor,at=oa(n,\"isArray\"),rt=t.isFinite,it=oa(pe,\"keys\"),ot=k.max,st=k.min,ct=oa(r,\"now\"),ut=t.parseInt,lt=k.random,pt=j.NEGATIVE_INFINITY,dt=j.POSITIVE_INFINITY,ft=4294967295,ht=9007199254740991,mt=Qe&&new Qe,gt={};function yt(e){if(Le(e)&&!Nr(e)&&!(e instanceof xt)){if(e instanceof bt)return e;if(be.call(e,\"__chain__\")&&be.call(e,\"__wrapped__\"))return ja(e)}return new bt(e)}function vt(){}function bt(e,t,n){this.__wrapped__=e,this.__actions__=n||[],this.__chain__=!!t}function xt(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=dt,this.__views__=[]}function wt(){this.__data__={}}function kt(e){var t=e?e.length:0;for(this.data={hash:tt(null),set:new Je};t--;)this.push(e[t])}function _t(e,t){var n=e.data;return(\"string\"==typeof t||Ir(t)?n.set.has(t):n.hash[t])?0:-1}function jt(e,t){var a=-1,r=e.length;for(t||(t=n(r));++a<r;)t[a]=e[a];return t}function St(e,t){for(var n=-1,a=e.length;++n<a&&!1!==t(e[n],n,e););return e}function At(e,t){for(var n=-1,a=e.length;++n<a;)if(!t(e[n],n,e))return!1;return!0}function Et(e,t){for(var n=-1,a=e.length,r=-1,i=[];++n<a;){var o=e[n];t(o,n,e)&&(i[++r]=o)}return i}function Ct(e,t){for(var a=-1,r=e.length,i=n(r);++a<r;)i[a]=t(e[a],a,e);return i}function Tt(e,t){for(var n=-1,a=t.length,r=e.length;++n<a;)e[r+n]=t[n];return e}function Pt(e,t,n,a){var r=-1,i=e.length;for(a&&i&&(n=e[++r]);++r<i;)n=t(n,e[r],r,e);return n}function Dt(e,t){for(var n=-1,a=e.length;++n<a;)if(t(e[n],n,e))return!0;return!1}function Ot(e,t,n,r){return e!==a&&be.call(r,n)?e:t}function Mt(e,t,n){for(var r=-1,i=ii(t),o=i.length;++r<o;){var s=i[r],c=e[s],u=n(c,t[s],s,e,t);((u==u?u!==c:c==c)||c===a&&!(s in e))&&(e[s]=u)}return e}function Nt(e,t){return null==t?e:Rt(t,ii(t),e)}function Bt(e,t){for(var r=-1,i=null==e,o=!i&&ca(e),s=o?e.length:0,c=t.length,u=n(c);++r<c;){var l=t[r];u[r]=o?ua(l,s)?e[l]:a:i?a:e[l]}return u}function Rt(e,t,n){n||(n={});for(var a=-1,r=t.length;++a<r;){var i=t[a];n[i]=e[i]}return n}function Lt(e,t,n){var r=typeof e;return\"function\"==r?t===a?e:wn(e,t,n):null==e?Si:\"object\"==r?rn(e):t===a?Di(e):on(e,t)}function It(e,t,n,r,i,o,s){var c;if(n&&(c=i?n(e,r,i):n(e)),c!==a)return c;if(!Ir(e))return e;var u=Nr(e);if(u){if(c=function(e){var t=e.length,n=new e.constructor(t);t&&\"string\"==typeof e[0]&&be.call(e,\"index\")&&(n.index=e.index,n.input=e.input);return n}(e),!t)return jt(e,c)}else{var l=we.call(e),p=l==y;if(l!=x&&l!=d&&(!p||i))return le[l]?function(e,t,n){var a=e.constructor;switch(t){case S:return kn(e);case h:case m:return new a(+e);case A:case E:case C:case T:case P:case D:case O:case M:case N:var r=e.buffer;return new a(n?kn(r):r,e.byteOffset,e.length);case b:case _:return new a(e);case w:var i=new a(e.source,Q.exec(e));i.lastIndex=e.lastIndex}return i}(e,l,t):i?e:{};if(c=function(e){var t=e.constructor;\"function\"==typeof t&&t instanceof t||(t=pe);return new t}(p?{}:e),!t)return Nt(c,e)}o||(o=[]),s||(s=[]);for(var f=o.length;f--;)if(o[f]==e)return s[f];return o.push(e),s.push(c),(u?St:Xt)(e,(function(a,r){c[r]=It(a,t,n,r,e,o,s)})),c}yt.support={},yt.templateSettings={escape:H,evaluate:U,interpolate:G,variable:\"\",imports:{_:yt}};var Ft=function(){function e(){}return function(t){if(Ir(t)){e.prototype=t;var n=new e;e.prototype=a}return n||{}}}();function zt(e,t,n){if(\"function\"!=typeof e)throw new he(l);return Ye((function(){e.apply(a,n)}),t)}function qt(e,t){var n=e?e.length:0,a=[];if(!n)return a;var r=-1,i=aa(),o=i==Ae,s=o&&t.length>=u?Tn(t):null,c=t.length;s&&(i=_t,o=!1,t=s);e:for(;++r<n;){var l=e[r];if(o&&l==l){for(var p=c;p--;)if(t[p]===l)continue e;a.push(l)}else i(t,l,0)<0&&a.push(l)}return a}var Ht=En(Xt),Ut=En(Zt,!0);function Gt(e,t){var n=!0;return Ht(e,(function(e,a,r){return n=!!t(e,a,r)})),n}function $t(e,t){var n=[];return Ht(e,(function(e,a,r){t(e,a,r)&&n.push(e)})),n}function Wt(e,t,n,a){var r;return n(e,(function(e,n,i){if(t(e,n,i))return r=a?n:e,!1})),r}function Vt(e,t,n,a){a||(a=[]);for(var r=-1,i=e.length;++r<i;){var o=e[r];Le(o)&&ca(o)&&(n||Nr(o)||Mr(o))?t?Vt(o,t,n,a):Tt(a,o):n||(a[a.length]=o)}return a}var Kt=Cn(),Jt=Cn(!0);function Yt(e,t){return Kt(e,t,oi)}function Xt(e,t){return Kt(e,t,ii)}function Zt(e,t){return Jt(e,t,ii)}function Qt(e,t){for(var n=-1,a=t.length,r=-1,i=[];++n<a;){var o=t[n];Lr(e[o])&&(i[++r]=o)}return i}function en(e,t,n){if(null!=e){n!==a&&n in ka(e)&&(t=[n]);for(var r=0,i=t.length;null!=e&&r<i;)e=e[t[r++]];return r&&r==i?e:a}}function tn(e,t,n,a,r,i){return e===t||(null==e||null==t||!Ir(e)&&!Le(t)?e!=e&&t!=t:function(e,t,n,a,r,i,o){var s=Nr(e),c=Nr(t),u=f,l=f;s||((u=we.call(e))==d?u=x:u!=x&&(s=Gr(e)));c||((l=we.call(t))==d?l=x:l!=x&&(c=Gr(t)));var p=u==x,y=l==x,v=u==l;if(v&&!s&&!p)return function(e,t,n){switch(n){case h:case m:return+e==+t;case g:return e.name==t.name&&e.message==t.message;case b:return e!=+e?t!=+t:e==+t;case w:case _:return e==t+\"\"}return!1}(e,t,u);if(!r){var k=p&&be.call(e,\"__wrapped__\"),j=y&&be.call(t,\"__wrapped__\");if(k||j)return n(k?e.value():e,j?t.value():t,a,r,i,o)}if(!v)return!1;i||(i=[]),o||(o=[]);var S=i.length;for(;S--;)if(i[S]==e)return o[S]==t;i.push(e),o.push(t);var A=(s?Zn:Qn)(e,t,n,a,r,i,o);return i.pop(),o.pop(),A}(e,t,tn,n,a,r,i))}function nn(e,t,n){var r=t.length,i=r,o=!n;if(null==e)return!i;for(e=ka(e);r--;){var s=t[r];if(o&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++r<i;){var c=(s=t[r])[0],u=e[c],l=s[1];if(o&&s[2]){if(u===a&&!(c in e))return!1}else{var p=n?n(u,l,c):a;if(!(p===a?tn(l,u,n,!0):p))return!1}}return!0}function an(e,t){var a=-1,r=ca(e)?n(e.length):[];return Ht(e,(function(e,n,i){r[++a]=t(e,n,i)})),r}function rn(e){var t=ia(e);if(1==t.length&&t[0][2]){var n=t[0][0],r=t[0][1];return function(e){return null!=e&&(e[n]===r&&(r!==a||n in ka(e)))}}return function(e){return nn(e,t)}}function on(e,t){var n=Nr(e),r=pa(e)&&ha(t),i=e+\"\";return e=_a(e),function(o){if(null==o)return!1;var s=i;if(o=ka(o),(n||!r)&&!(s in o)){if(null==(o=1==e.length?o:en(o,pn(e,0,-1))))return!1;s=Ma(e),o=ka(o)}return o[s]===t?t!==a||s in o:tn(t,o[s],a,!0)}}function sn(e){return function(t){return null==t?a:t[e]}}function cn(e,t){for(var n=e?t.length:0;n--;){var a=t[n];if(a!=r&&ua(a)){var r=a;Xe.call(e,a,1)}}return e}function un(e,t){return e+nt(lt()*(t-e+1))}var ln=mt?function(e,t){return mt.set(e,t),e}:Si;function pn(e,t,r){var i=-1,o=e.length;(t=null==t?0:+t||0)<0&&(t=-t>o?0:o+t),(r=r===a||r>o?o:+r||0)<0&&(r+=o),o=t>r?0:r-t>>>0,t>>>=0;for(var s=n(o);++i<o;)s[i]=e[i+t];return s}function dn(e,t){var n;return Ht(e,(function(e,a,r){return!(n=t(e,a,r))})),!!n}function fn(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}function hn(e,t,n){var a=ea(),r=-1;return t=Ct(t,(function(e){return a(e)})),fn(an(e,(function(e){return{criteria:Ct(t,(function(t){return t(e)})),index:++r,value:e}})),(function(e,t){return function(e,t,n){for(var a=-1,r=e.criteria,i=t.criteria,o=r.length,s=n.length;++a<o;){var c=je(r[a],i[a]);if(c){if(a>=s)return c;var u=n[a];return c*(\"asc\"===u||!0===u?1:-1)}}return e.index-t.index}(e,t,n)}))}function mn(e,t){var n=-1,a=aa(),r=e.length,i=a==Ae,o=i&&r>=u,s=o?Tn():null,c=[];s?(a=_t,i=!1):(o=!1,s=t?[]:c);e:for(;++n<r;){var l=e[n],p=t?t(l,n,e):l;if(i&&l==l){for(var d=s.length;d--;)if(s[d]===p)continue e;t&&s.push(p),c.push(l)}else a(s,p,0)<0&&((t||o)&&s.push(p),c.push(l))}return c}function gn(e,t){for(var a=-1,r=t.length,i=n(r);++a<r;)i[a]=e[t[a]];return i}function yn(e,t,n,a){for(var r=e.length,i=a?r:-1;(a?i--:++i<r)&&t(e[i],i,e););return n?pn(e,a?0:i,a?i+1:r):pn(e,a?i+1:0,a?r:i)}function vn(e,t){var n=e;n instanceof xt&&(n=n.value());for(var a=-1,r=t.length;++a<r;){var i=t[a];n=i.func.apply(i.thisArg,Tt([n],i.args))}return n}function bn(e,t,n){var a=0,r=e?e.length:a;if(\"number\"==typeof t&&t==t&&r<=2147483647){for(;a<r;){var i=a+r>>>1,o=e[i];(n?o<=t:o<t)&&null!==o?a=i+1:r=i}return r}return xn(e,t,Si,n)}function xn(e,t,n,r){t=n(t);for(var i=0,o=e?e.length:0,s=t!=t,c=null===t,u=t===a;i<o;){var l=nt((i+o)/2),p=n(e[l]),d=p!==a,f=p==p;if(s)var h=f||r;else h=c?f&&d&&(r||null!=p):u?f&&(r||d):null!=p&&(r?p<=t:p<t);h?i=l+1:o=l}return st(o,4294967294)}function wn(e,t,n){if(\"function\"!=typeof e)return Si;if(t===a)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 3:return function(n,a,r){return e.call(t,n,a,r)};case 4:return function(n,a,r,i){return e.call(t,n,a,r,i)};case 5:return function(n,a,r,i,o){return e.call(t,n,a,r,i,o)}}return function(){return e.apply(t,arguments)}}function kn(e){var t=new Ge(e.byteLength);return new Ze(t).set(new Ze(e)),t}function _n(e,t,a){for(var r=a.length,i=-1,o=ot(e.length-r,0),s=-1,c=t.length,u=n(c+o);++s<c;)u[s]=t[s];for(;++i<r;)u[a[i]]=e[i];for(;o--;)u[s++]=e[i++];return u}function jn(e,t,a){for(var r=-1,i=a.length,o=-1,s=ot(e.length-i,0),c=-1,u=t.length,l=n(s+u);++o<s;)l[o]=e[o];for(var p=o;++c<u;)l[p+c]=t[c];for(;++r<i;)l[p+a[r]]=e[o++];return l}function Sn(e,t){return function(n,a,r){var i=t?t():{};if(a=ea(a,r,3),Nr(n))for(var o=-1,s=n.length;++o<s;){var c=n[o];e(i,c,a(c,o,n),n)}else Ht(n,(function(t,n,r){e(i,t,a(t,n,r),r)}));return i}}function An(e){return Dr((function(t,n){var r=-1,i=null==t?0:n.length,o=i>2?n[i-2]:a,s=i>2?n[2]:a,c=i>1?n[i-1]:a;for(\"function\"==typeof o?(o=wn(o,c,5),i-=2):i-=(o=\"function\"==typeof c?c:a)?1:0,s&&la(n[0],n[1],s)&&(o=i<3?a:o,i=1);++r<i;){var u=n[r];u&&e(t,u,o)}return t}))}function En(e,t){return function(n,a){var r=n?ra(n):0;if(!fa(r))return e(n,a);for(var i=t?r:-1,o=ka(n);(t?i--:++i<r)&&!1!==a(o[i],i,o););return n}}function Cn(e){return function(t,n,a){for(var r=ka(t),i=a(t),o=i.length,s=e?o:-1;e?s--:++s<o;){var c=i[s];if(!1===n(r[c],c,r))break}return t}}function Tn(e){return tt&&Je?new kt(e):null}function Pn(e){return function(t){for(var n=-1,a=ki(hi(t)),r=a.length,i=\"\";++n<r;)i=e(i,a[n],n);return i}}function Dn(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=Ft(e.prototype),a=e.apply(n,t);return Ir(a)?a:n}}function On(e){return function t(n,r,i){i&&la(n,r,i)&&(r=a);var o=Xn(n,e,a,a,a,a,a,r);return o.placeholder=t.placeholder,o}}function Mn(e,t){return Dr((function(n){var r=n[0];return null==r?r:(n.push(t),e.apply(a,n))}))}function Nn(e,t){return function(n,r,i){if(i&&la(n,r,i)&&(r=a),1==(r=ea(r,i,3)).length){var o=function(e,t,n,a){for(var r=-1,i=e.length,o=a,s=o;++r<i;){var c=e[r],u=+t(c);n(u,o)&&(o=u,s=c)}return s}(n=Nr(n)?n:wa(n),r,e,t);if(!n.length||o!==t)return o}return function(e,t,n,a){var r=a,i=r;return Ht(e,(function(e,o,s){var c=+t(e,o,s);(n(c,r)||c===a&&c===i)&&(r=c,i=e)})),i}(n,r,e,t)}}function Bn(e,t){return function(n,r,i){if(r=ea(r,i,3),Nr(n)){var o=Se(n,r,t);return o>-1?n[o]:a}return Wt(n,r,e)}}function Rn(e){return function(t,n,a){return t&&t.length?Se(t,n=ea(n,a,3),e):-1}}function Ln(e){return function(t,n,a){return Wt(t,n=ea(n,a,3),e,!0)}}function In(e){return function(){for(var t,r=arguments.length,i=e?r:-1,o=0,s=n(r);e?i--:++i<r;){var c=s[o++]=arguments[i];if(\"function\"!=typeof c)throw new he(l);!t&&bt.prototype.thru&&\"wrapper\"==na(c)&&(t=new bt([],!0))}for(i=t?-1:r;++i<r;){var p=na(c=s[i]),d=\"wrapper\"==p?ta(c):a;t=d&&da(d[0])&&424==d[1]&&!d[4].length&&1==d[9]?t[na(d[0])].apply(t,d[3]):1==c.length&&da(c)?t[p]():t.thru(c)}return function(){var e=arguments,n=e[0];if(t&&1==e.length&&Nr(n)&&n.length>=u)return t.plant(n).value();for(var a=0,i=r?s[a].apply(this,e):n;++a<r;)i=s[a].call(this,i);return i}}}function Fn(e,t){return function(n,r,i){return\"function\"==typeof r&&i===a&&Nr(n)?e(n,r):t(n,wn(r,i,3))}}function zn(e){return function(t,n,r){return\"function\"==typeof n&&r===a||(n=wn(n,r,3)),e(t,n,oi)}}function qn(e){return function(t,n,r){return\"function\"==typeof n&&r===a||(n=wn(n,r,3)),e(t,n)}}function Hn(e){return function(t,n,a){var r={};return n=ea(n,a,3),Xt(t,(function(t,a,i){var o=n(t,a,i);t=e?t:o,r[a=e?o:a]=t})),r}}function Un(e){return function(t,n,a){return t=Ce(t),(e?t:\"\")+Vn(t,n,a)+(e?\"\":t)}}function Gn(e){var t=Dr((function(n,r){var i=Fe(r,t.placeholder);return Xn(n,e,a,r,i)}));return t}function $n(e,t){return function(n,r,i,o){var s=arguments.length<3;return\"function\"==typeof r&&o===a&&Nr(n)?e(n,r,i,s):function(e,t,n,a,r){return r(e,(function(e,r,i){n=a?(a=!1,e):t(n,e,r,i)})),n}(n,ea(r,o,4),i,s,t)}}function Wn(e,t,r,i,c,u,l,p,d,f){var h=t&s,m=1&t,g=2&t,y=8&t,v=4&t,b=16&t,x=g?a:Dn(e);return function s(){for(var w=arguments.length,k=w,_=n(w);k--;)_[k]=arguments[k];if(i&&(_=_n(_,i,c)),u&&(_=jn(_,u,l)),y||b){var j=s.placeholder,S=Fe(_,j);if((w-=S.length)<f){var A=p?jt(p):a,E=ot(f-w,0);t|=y?o:64,t&=~(y?64:o),v||(t&=-4);var C=[e,t,r,y?_:a,y?S:a,y?a:_,y?a:S,A,d,E],T=Wn.apply(a,C);return da(e)&&ba(T,C),T.placeholder=j,T}}var P=m?r:this,D=g?P[e]:e;return p&&(_=function(e,t){var n=e.length,r=st(t.length,n),i=jt(e);for(;r--;){var o=t[r];e[r]=ua(o,n)?i[o]:a}return e}(_,p)),h&&d<_.length&&(_.length=d),this&&this!==_e&&this instanceof s&&(D=x||Dn(e)),D.apply(P,_)}}function Vn(e,t,n){var a=e.length;if(a>=(t=+t)||!rt(t))return\"\";var r=t-a;return vi(n=null==n?\" \":n+\"\",et(r/n.length)).slice(0,r)}function Kn(e,t,a,r){var i=1&t,o=Dn(e);return function t(){for(var s=-1,c=arguments.length,u=-1,l=r.length,p=n(l+c);++u<l;)p[u]=r[u];for(;c--;)p[u++]=arguments[++s];return(this&&this!==_e&&this instanceof t?o:e).apply(i?a:this,p)}}function Jn(e){var t=k[e];return function(e,n){return(n=n===a?0:+n||0)?(n=Ve(10,n),t(e*n)/n):t(e)}}function Yn(e){return function(t,n,a,r){var i=ea(a);return null==a&&i===Lt?bn(t,n,e):xn(t,n,i(a,r,1),e)}}function Xn(e,t,n,r,i,u,d,f){var h=2&t;if(!h&&\"function\"!=typeof e)throw new he(l);var m=r?r.length:0;if(m||(t&=-97,r=i=a),m-=i?i.length:0,64&t){var g=r,y=i;r=i=a}var v=h?a:ta(e),b=[e,t,n,r,i,g,y,u,d,f];if(v&&(!function(e,t){var n=e[1],a=t[1],r=n|a,i=r<s,o=a==s&&8==n||a==s&&n==c&&e[7].length<=t[8]||384==a&&8==n;if(!i&&!o)return e;1&a&&(e[2]=t[2],r|=1&n?0:4);var u=t[3];if(u){var l=e[3];e[3]=l?_n(l,u,t[4]):jt(u),e[4]=l?Fe(e[3],p):jt(t[4])}(u=t[5])&&(l=e[5],e[5]=l?jn(l,u,t[6]):jt(u),e[6]=l?Fe(e[5],p):jt(t[6]));(u=t[7])&&(e[7]=jt(u));a&s&&(e[8]=null==e[8]?t[8]:st(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=r}(b,v),t=b[1],f=b[9]),b[9]=null==f?h?0:e.length:ot(f-m,0)||0,1==t)var x=function(e,t){var n=Dn(e);return function a(){return(this&&this!==_e&&this instanceof a?n:e).apply(t,arguments)}}(b[0],b[2]);else x=t!=o&&33!=t||b[4].length?Wn.apply(a,b):Kn.apply(a,b);return(v?ln:ba)(x,b)}function Zn(e,t,n,r,i,o,s){var c=-1,u=e.length,l=t.length;if(u!=l&&!(i&&l>u))return!1;for(;++c<u;){var p=e[c],d=t[c],f=r?r(i?d:p,i?p:d,c):a;if(f!==a){if(f)continue;return!1}if(i){if(!Dt(t,(function(e){return p===e||n(p,e,r,i,o,s)})))return!1}else if(p!==d&&!n(p,d,r,i,o,s))return!1}return!0}function Qn(e,t,n,r,i,o,s){var c=ii(e),u=c.length;if(u!=ii(t).length&&!i)return!1;for(var l=u;l--;){var p=c[l];if(!(i?p in t:be.call(t,p)))return!1}for(var d=i;++l<u;){var f=e[p=c[l]],h=t[p],m=r?r(i?h:f,i?f:h,p):a;if(!(m===a?n(f,h,r,i,o,s):m))return!1;d||(d=\"constructor\"==p)}if(!d){var g=e.constructor,y=t.constructor;if(g!=y&&\"constructor\"in e&&\"constructor\"in t&&!(\"function\"==typeof g&&g instanceof g&&\"function\"==typeof y&&y instanceof y))return!1}return!0}function ea(e,t,n){var a=yt.callback||ji;return a=a===ji?Lt:a,n?a(e,t,n):a}var ta=mt?function(e){return mt.get(e)}:Pi;function na(e){for(var t=e.name,n=gt[t],a=n?n.length:0;a--;){var r=n[a],i=r.func;if(null==i||i==e)return r.name}return t}function aa(e,t,n){var a=yt.indexOf||Da;return a=a===Da?Ae:a,e?a(e,t,n):a}var ra=sn(\"length\");function ia(e){for(var t=li(e),n=t.length;n--;)t[n][2]=ha(t[n][1]);return t}function oa(e,t){var n=null==e?a:e[t];return Fr(n)?n:a}function sa(e,t,n){null==e||pa(t,e)||(e=1==(t=_a(t)).length?e:en(e,pn(t,0,-1)),t=Ma(t));var r=null==e?e:e[t];return null==r?a:r.apply(e,n)}function ca(e){return null!=e&&fa(ra(e))}function ua(e,t){return e=\"number\"==typeof e||ne.test(e)?+e:-1,t=null==t?ht:t,e>-1&&e%1==0&&e<t}function la(e,t,n){if(!Ir(n))return!1;var a=typeof t;if(\"number\"==a?ca(n)&&ua(t,n.length):\"string\"==a&&t in n){var r=n[t];return e==e?e===r:r!=r}return!1}function pa(e,t){var n=typeof e;return!!(\"string\"==n&&W.test(e)||\"number\"==n)||!Nr(e)&&(!$.test(e)||null!=t&&e in ka(t))}function da(e){var t=na(e);if(!(t in xt.prototype))return!1;var n=yt[t];if(e===n)return!0;var a=ta(n);return!!a&&e===a[0]}function fa(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=ht}function ha(e){return e==e&&!Ir(e)}function ma(e,t){e=ka(e);for(var n=-1,a=t.length,r={};++n<a;){var i=t[n];i in e&&(r[i]=e[i])}return r}function ga(e,t){var n={};return Yt(e,(function(e,a,r){t(e,a,r)&&(n[a]=e)})),n}var ya,va,ba=(ya=0,va=0,function(e,t){var n=hr(),a=16-(n-va);if(va=n,a>0){if(++ya>=150)return e}else ya=0;return ln(e,t)});function xa(e){for(var t=oi(e),n=t.length,a=n&&e.length,r=!!a&&fa(a)&&(Nr(e)||Mr(e)),i=-1,o=[];++i<n;){var s=t[i];(r&&ua(s,a)||be.call(e,s))&&o.push(s)}return o}function wa(e){return null==e?[]:ca(e)?Ir(e)?e:pe(e):di(e)}function ka(e){return Ir(e)?e:pe(e)}function _a(e){if(Nr(e))return e;var t=[];return Ce(e).replace(V,(function(e,n,a,r){t.push(a?r.replace(X,\"$1\"):n||e)})),t}function ja(e){return e instanceof xt?e.clone():new bt(e.__wrapped__,e.__chain__,jt(e.__actions__))}var Sa=Dr((function(e,t){return Le(e)&&ca(e)?qt(e,Vt(t,!1,!0)):[]}));function Aa(e,t,n){return(e?e.length:0)?((n?la(e,t,n):null==t)&&(t=1),pn(e,t<0?0:t)):[]}function Ea(e,t,n){var a=e?e.length:0;return a?((n?la(e,t,n):null==t)&&(t=1),pn(e,0,(t=a-(+t||0))<0?0:t)):[]}var Ca=Rn(),Ta=Rn(!0);function Pa(e){return e?e[0]:a}function Da(e,t,n){var a=e?e.length:0;if(!a)return-1;if(\"number\"==typeof n)n=n<0?ot(a+n,0):n;else if(n){var r=bn(e,t);return r<a&&(t==t?t===e[r]:e[r]!=e[r])?r:-1}return Ae(e,t,n||0)}var Oa=Dr((function(e){for(var t=e.length,a=t,r=n(p),i=aa(),o=i==Ae,s=[];a--;){var c=e[a]=ca(c=e[a])?c:[];r[a]=o&&c.length>=120?Tn(a&&c):null}var u=e[0],l=-1,p=u?u.length:0,d=r[0];e:for(;++l<p;)if(c=u[l],(d?_t(d,c):i(s,c,0))<0){for(a=t;--a;){var f=r[a];if((f?_t(f,c):i(e[a],c,0))<0)continue e}d&&d.push(c),s.push(c)}return s}));function Ma(e){var t=e?e.length:0;return t?e[t-1]:a}var Na=Dr((function(e,t){var n=Bt(e,t=Vt(t));return cn(e,t.sort(je)),n}));function Ba(e){return Aa(e,1)}var Ra=Yn(),La=Yn(!0),Ia=Dr((function(e){return mn(Vt(e,!1,!0))}));function Fa(e,t,n,r){if(!(e?e.length:0))return[];null!=t&&\"boolean\"!=typeof t&&(n=la(e,t,r=n)?a:t,t=!1);var i=ea();return null==n&&i===Lt||(n=i(n,r,3)),t&&aa()==Ae?function(e,t){for(var n,a=-1,r=e.length,i=-1,o=[];++a<r;){var s=e[a],c=t?t(s,a,e):s;a&&n===c||(n=c,o[++i]=s)}return o}(e,n):mn(e,n)}function za(e){if(!e||!e.length)return[];var t=-1,a=0;e=Et(e,(function(e){if(ca(e))return a=ot(e.length,a),!0}));for(var r=n(a);++t<a;)r[t]=Ct(e,sn(t));return r}function qa(e,t,n){if(!(e?e.length:0))return[];var r=za(e);return null==t?r:(t=wn(t,n,4),Ct(r,(function(e){return Pt(e,t,a,!0)})))}var Ha=Dr((function(e,t){return ca(e)?qt(e,t):[]})),Ua=Dr(za);function Ga(e,t){var n=-1,a=e?e.length:0,r={};for(!a||t||Nr(e[0])||(t=[]);++n<a;){var i=e[n];t?r[i]=t[n]:i&&(r[i[0]]=i[1])}return r}var $a=Dr((function(e){var t=e.length,n=t>2?e[t-2]:a,r=t>1?e[t-1]:a;return t>2&&\"function\"==typeof n?t-=2:(n=t>1&&\"function\"==typeof r?(--t,r):a,r=a),e.length=t,qa(e,n,r)}));function Wa(e){var t=yt(e);return t.__chain__=!0,t}function Va(e,t,n){return t.call(n,e)}var Ka=Dr((function(e){return e=Vt(e),this.thru((function(t){return function(e,t){for(var a=-1,r=e.length,i=-1,o=t.length,s=n(r+o);++a<r;)s[a]=e[a];for(;++i<o;)s[a++]=t[i];return s}(Nr(t)?t:[ka(t)],e)}))})),Ja=Dr((function(e,t){return Bt(e,Vt(t))})),Ya=Sn((function(e,t,n){be.call(e,n)?++e[n]:e[n]=1}));function Xa(e,t,n){var r=Nr(e)?At:Gt;return n&&la(e,t,n)&&(t=a),\"function\"==typeof t&&n===a||(t=ea(t,n,3)),r(e,t)}function Za(e,t,n){return(Nr(e)?Et:$t)(e,t=ea(t,n,3))}var Qa=Bn(Ht),er=Bn(Ut,!0),tr=Fn(St,Ht),nr=Fn((function(e,t){for(var n=e.length;n--&&!1!==t(e[n],n,e););return e}),Ut),ar=Sn((function(e,t,n){be.call(e,n)?e[n].push(t):e[n]=[t]}));function rr(e,t,n,a){var r=e?ra(e):0;return fa(r)||(r=(e=di(e)).length),n=\"number\"!=typeof n||a&&la(t,n,a)?0:n<0?ot(r+n,0):n||0,\"string\"==typeof e||!Nr(e)&&Ur(e)?n<=r&&e.indexOf(t,n)>-1:!!r&&aa(e,t,n)>-1}var ir=Sn((function(e,t,n){e[n]=t})),or=Dr((function(e,t,r){var i=-1,o=\"function\"==typeof t,s=pa(t),c=ca(e)?n(e.length):[];return Ht(e,(function(e){var n=o?t:s&&null!=e?e[t]:a;c[++i]=n?n.apply(e,r):sa(e,t,r)})),c}));function sr(e,t,n){return(Nr(e)?Ct:an)(e,t=ea(t,n,3))}var cr=Sn((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]})),ur=$n(Pt,Ht),lr=$n((function(e,t,n,a){var r=e.length;for(a&&r&&(n=e[--r]);r--;)n=t(n,e[r],r,e);return n}),Ut);function pr(e,t,n){if(n?la(e,t,n):null==t)return(r=(e=wa(e)).length)>0?e[un(0,r-1)]:a;var r,i=-1,o=Wr(e),s=(r=o.length)-1;for(t=st(t<0?0:+t||0,r);++i<t;){var c=un(i,s),u=o[c];o[c]=o[i],o[i]=u}return o.length=t,o}function dr(e,t,n){var r=Nr(e)?Dt:dn;return n&&la(e,t,n)&&(t=a),\"function\"==typeof t&&n===a||(t=ea(t,n,3)),r(e,t)}var fr=Dr((function(e,t){if(null==e)return[];var n=t[2];return n&&la(t[0],t[1],n)&&(t.length=1),hn(e,Vt(t),[])})),hr=ct||function(){return(new r).getTime()};function mr(e,t){var n;if(\"function\"!=typeof t){if(\"function\"!=typeof e)throw new he(l);var r=e;e=t,t=r}return function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=a),n}}var gr=Dr((function(e,t,n){var a=1;if(n.length){var r=Fe(n,gr.placeholder);a|=o}return Xn(e,a,t,n,r)})),yr=Dr((function(e,t){for(var n=-1,a=(t=t.length?Vt(t):ri(e)).length;++n<a;){var r=t[n];e[r]=Xn(e[r],1,e)}return e})),vr=Dr((function(e,t,n){var a=3;if(n.length){var r=Fe(n,vr.placeholder);a|=o}return Xn(t,a,e,n,r)})),br=On(8),xr=On(16);function wr(e,t,n){var r,i,o,s,c,u,p,d=0,f=!1,h=!0;if(\"function\"!=typeof e)throw new he(l);if(t=t<0?0:+t||0,!0===n){var m=!0;h=!1}else Ir(n)&&(m=!!n.leading,f=\"maxWait\"in n&&ot(+n.maxWait||0,t),h=\"trailing\"in n?!!n.trailing:h);function g(t,n){n&&$e(n),i=u=p=a,t&&(d=hr(),o=e.apply(c,r),u||i||(r=c=a))}function y(){var e=t-(hr()-s);e<=0||e>t?g(p,i):u=Ye(y,e)}function v(){g(h,u)}function b(){if(r=arguments,s=hr(),c=this,p=h&&(u||!m),!1===f)var n=m&&!u;else{i||m||(d=s);var l=f-(s-d),g=l<=0||l>f;g?(i&&(i=$e(i)),d=s,o=e.apply(c,r)):i||(i=Ye(v,l))}return g&&u?u=$e(u):u||t===f||(u=Ye(y,t)),n&&(g=!0,o=e.apply(c,r)),!g||u||i||(r=c=a),o}return b.cancel=function(){u&&$e(u),i&&$e(i),d=0,i=u=p=a},b}var kr=Dr((function(e,t){return zt(e,1,t)})),_r=Dr((function(e,t,n){return zt(e,t,n)})),jr=In(),Sr=In(!0);function Ar(e,t){if(\"function\"!=typeof e||t&&\"function\"!=typeof t)throw new he(l);var n=function(){var a=arguments,r=t?t.apply(this,a):a[0],i=n.cache;if(i.has(r))return i.get(r);var o=e.apply(this,a);return n.cache=i.set(r,o),o};return n.cache=new Ar.Cache,n}var Er=Dr((function(e,t){if(t=Vt(t),\"function\"!=typeof e||!At(t,Ee))throw new he(l);var n=t.length;return Dr((function(a){for(var r=st(a.length,n);r--;)a[r]=t[r](a[r]);return e.apply(this,a)}))})),Cr=Gn(o),Tr=Gn(64),Pr=Dr((function(e,t){return Xn(e,c,a,a,a,Vt(t))}));function Dr(e,t){if(\"function\"!=typeof e)throw new he(l);return t=ot(t===a?e.length-1:+t||0,0),function(){for(var a=arguments,r=-1,i=ot(a.length-t,0),o=n(i);++r<i;)o[r]=a[t+r];switch(t){case 0:return e.call(this,o);case 1:return e.call(this,a[0],o);case 2:return e.call(this,a[0],a[1],o)}var s=n(t+1);for(r=-1;++r<t;)s[r]=a[r];return s[t]=o,e.apply(this,s)}}function Or(e,t){return e>t}function Mr(e){return Le(e)&&ca(e)&&be.call(e,\"callee\")&&!Ke.call(e,\"callee\")}var Nr=at||function(e){return Le(e)&&fa(e.length)&&we.call(e)==f};function Br(e,t,n,r){var i=(n=\"function\"==typeof n?wn(n,r,3):a)?n(e,t):a;return i===a?tn(e,t,n):!!i}function Rr(e){return Le(e)&&\"string\"==typeof e.message&&we.call(e)==g}function Lr(e){return Ir(e)&&we.call(e)==y}function Ir(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function Fr(e){return null!=e&&(Lr(e)?Ie.test(ve.call(e)):Le(e)&&te.test(e))}function zr(e){return\"number\"==typeof e||Le(e)&&we.call(e)==b}function qr(e){var t,n;return!(!Le(e)||we.call(e)!=x||Mr(e)||!(be.call(e,\"constructor\")||\"function\"!=typeof(t=e.constructor)||t instanceof t))&&(Yt(e,(function(e,t){n=t})),n===a||be.call(e,n))}function Hr(e){return Ir(e)&&we.call(e)==w}function Ur(e){return\"string\"==typeof e||Le(e)&&we.call(e)==_}function Gr(e){return Le(e)&&fa(e.length)&&!!ue[we.call(e)]}function $r(e,t){return e<t}function Wr(e){var t=e?ra(e):0;return fa(t)?t?jt(e):[]:di(e)}function Vr(e){return Rt(e,oi(e))}var Kr=An((function e(t,n,r,i,o){if(!Ir(t))return t;var s=ca(n)&&(Nr(n)||Gr(n)),c=s?a:ii(n);return St(c||n,(function(u,l){if(\"__proto__\"!==u&&\"constructor\"!==u)if(c&&(u=n[l=u]),Le(u))i||(i=[]),o||(o=[]),function(e,t,n,r,i,o,s){var c=o.length,u=t[n];for(;c--;)if(o[c]==u)return void(e[n]=s[c]);var l=e[n],p=i?i(l,u,n,e,t):a,d=p===a;d&&(p=u,ca(u)&&(Nr(u)||Gr(u))?p=Nr(l)?l:ca(l)?jt(l):[]:qr(u)||Mr(u)?p=Mr(l)?Vr(l):qr(l)?l:{}:d=!1);o.push(u),s.push(p),d?e[n]=r(p,u,i,o,s):(p==p?p!==l:l==l)&&(e[n]=p)}(t,n,l,e,r,i,o);else{var p=t[l],d=r?r(p,u,l,t,n):a,f=d===a;f&&(d=u),d===a&&(!s||l in t)||!f&&(d==d?d===p:p!=p)||(t[l]=d)}})),t})),Jr=An((function(e,t,n){return n?Mt(e,t,n):Nt(e,t)})),Yr=Mn(Jr,(function(e,t){return e===a?t:e})),Xr=Mn(Kr,(function e(t,n){return t===a?n:Kr(t,n,e)})),Zr=Ln(Xt),Qr=Ln(Zt),ei=zn(Kt),ti=zn(Jt),ni=qn(Xt),ai=qn(Zt);function ri(e){return Qt(e,oi(e))}var ii=it?function(e){var t=null==e?a:e.constructor;return\"function\"==typeof t&&t.prototype===e||\"function\"!=typeof e&&ca(e)?xa(e):Ir(e)?it(e):[]}:xa;function oi(e){if(null==e)return[];Ir(e)||(e=pe(e));var t=e.length;t=t&&fa(t)&&(Nr(e)||Mr(e))&&t||0;for(var a=e.constructor,r=-1,i=\"function\"==typeof a&&a.prototype===e,o=n(t),s=t>0;++r<t;)o[r]=r+\"\";for(var c in e)s&&ua(c,t)||\"constructor\"==c&&(i||!be.call(e,c))||o.push(c);return o}var si=Hn(!0),ci=Hn(),ui=Dr((function(e,t){if(null==e)return{};if(\"function\"!=typeof t[0]){t=Ct(Vt(t),fe);return ma(e,qt(oi(e),t))}var n=wn(t[0],t[1],3);return ga(e,(function(e,t,a){return!n(e,t,a)}))}));function li(e){e=ka(e);for(var t=-1,a=ii(e),r=a.length,i=n(r);++t<r;){var o=a[t];i[t]=[o,e[o]]}return i}var pi=Dr((function(e,t){return null==e?{}:\"function\"==typeof t[0]?ga(e,wn(t[0],t[1],3)):ma(e,Vt(t))}));function di(e){return gn(e,ii(e))}var fi=Pn((function(e,t,n){return t=t.toLowerCase(),e+(n?t.charAt(0).toUpperCase()+t.slice(1):t)}));function hi(e){return(e=Ce(e))&&e.replace(ae,Oe).replace(Y,\"\")}var mi=Pn((function(e,t,n){return e+(n?\"-\":\"\")+t.toLowerCase()})),gi=Un(),yi=Un(!0);function vi(e,t){var n=\"\";if(e=Ce(e),(t=+t)<1||!e||!rt(t))return n;do{t%2&&(n+=e),t=nt(t/2),e+=e}while(t);return n}var bi=Pn((function(e,t,n){return e+(n?\"_\":\"\")+t.toLowerCase()})),xi=Pn((function(e,t,n){return e+(n?\" \":\"\")+(t.charAt(0).toUpperCase()+t.slice(1))}));function wi(e,t,n){var a=e;return(e=Ce(e))?(n?la(a,t,n):null==t)?e.slice(ze(e),qe(e)+1):(t+=\"\",e.slice(Te(e,t),Pe(e,t)+1)):e}function ki(e,t,n){return n&&la(e,t,n)&&(t=a),(e=Ce(e)).match(t||oe)||[]}var _i=Dr((function(e,t){try{return e.apply(a,t)}catch(n){return Rr(n)?n:new i(n)}}));function ji(e,t,n){return n&&la(e,t,n)&&(t=a),Le(e)?Ai(e):Lt(e,t)}function Si(e){return e}function Ai(e){return rn(It(e,!0))}var Ei=Dr((function(e,t){return function(n){return sa(n,e,t)}})),Ci=Dr((function(e,t){return function(n){return sa(e,n,t)}}));function Ti(e,t,n){if(null==n){var r=Ir(t),i=r?ii(t):a,o=i&&i.length?Qt(t,i):a;(o?o.length:r)||(o=!1,n=t,t=e,e=this)}o||(o=Qt(t,ii(t)));var s=!0,c=-1,u=Lr(e),l=o.length;!1===n?s=!1:Ir(n)&&\"chain\"in n&&(s=n.chain);for(;++c<l;){var p=o[c],d=t[p];e[p]=d,u&&(e.prototype[p]=function(t){return function(){var n=this.__chain__;if(s||n){var a=e(this.__wrapped__);return(a.__actions__=jt(this.__actions__)).push({func:t,args:arguments,thisArg:e}),a.__chain__=n,a}return t.apply(e,Tt([this.value()],arguments))}}(d))}return e}function Pi(){}function Di(e){return pa(e)?sn(e):function(e){var t=e+\"\";return e=_a(e),function(n){return en(n,e,t)}}(e)}var Oi,Mi=Jn(\"ceil\"),Ni=Jn(\"floor\"),Bi=Nn(Or,pt),Ri=Nn($r,dt),Li=Jn(\"round\");return yt.prototype=vt.prototype,bt.prototype=Ft(vt.prototype),bt.prototype.constructor=bt,xt.prototype=Ft(vt.prototype),xt.prototype.constructor=xt,wt.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},wt.prototype.get=function(e){return\"__proto__\"==e?a:this.__data__[e]},wt.prototype.has=function(e){return\"__proto__\"!=e&&be.call(this.__data__,e)},wt.prototype.set=function(e,t){return\"__proto__\"!=e&&(this.__data__[e]=t),this},kt.prototype.push=function(e){var t=this.data;\"string\"==typeof e||Ir(e)?t.set.add(e):t.hash[e]=!0},Ar.Cache=wt,yt.after=function(e,t){if(\"function\"!=typeof t){if(\"function\"!=typeof e)throw new he(l);var n=e;e=t,t=n}return e=rt(e=+e)?e:0,function(){if(--e<1)return t.apply(this,arguments)}},yt.ary=function(e,t,n){return n&&la(e,t,n)&&(t=a),t=e&&null==t?e.length:ot(+t||0,0),Xn(e,s,a,a,a,a,t)},yt.assign=Jr,yt.at=Ja,yt.before=mr,yt.bind=gr,yt.bindAll=yr,yt.bindKey=vr,yt.callback=ji,yt.chain=Wa,yt.chunk=function(e,t,a){t=(a?la(e,t,a):null==t)?1:ot(nt(t)||1,1);for(var r=0,i=e?e.length:0,o=-1,s=n(et(i/t));r<i;)s[++o]=pn(e,r,r+=t);return s},yt.compact=function(e){for(var t=-1,n=e?e.length:0,a=-1,r=[];++t<n;){var i=e[t];i&&(r[++a]=i)}return r},yt.constant=function(e){return function(){return e}},yt.countBy=Ya,yt.create=function(e,t,n){var r=Ft(e);return n&&la(e,t,n)&&(t=a),t?Nt(r,t):r},yt.curry=br,yt.curryRight=xr,yt.debounce=wr,yt.defaults=Yr,yt.defaultsDeep=Xr,yt.defer=kr,yt.delay=_r,yt.difference=Sa,yt.drop=Aa,yt.dropRight=Ea,yt.dropRightWhile=function(e,t,n){return e&&e.length?yn(e,ea(t,n,3),!0,!0):[]},yt.dropWhile=function(e,t,n){return e&&e.length?yn(e,ea(t,n,3),!0):[]},yt.fill=function(e,t,n,r){var i=e?e.length:0;return i?(n&&\"number\"!=typeof n&&la(e,t,n)&&(n=0,r=i),function(e,t,n,r){var i=e.length;for((n=null==n?0:+n||0)<0&&(n=-n>i?0:i+n),(r=r===a||r>i?i:+r||0)<0&&(r+=i),i=n>r?0:r>>>0,n>>>=0;n<i;)e[n++]=t;return e}(e,t,n,r)):[]},yt.filter=Za,yt.flatten=function(e,t,n){var a=e?e.length:0;return n&&la(e,t,n)&&(t=!1),a?Vt(e,t):[]},yt.flattenDeep=function(e){return(e?e.length:0)?Vt(e,!0):[]},yt.flow=jr,yt.flowRight=Sr,yt.forEach=tr,yt.forEachRight=nr,yt.forIn=ei,yt.forInRight=ti,yt.forOwn=ni,yt.forOwnRight=ai,yt.functions=ri,yt.groupBy=ar,yt.indexBy=ir,yt.initial=function(e){return Ea(e,1)},yt.intersection=Oa,yt.invert=function(e,t,n){n&&la(e,t,n)&&(t=a);for(var r=-1,i=ii(e),o=i.length,s={};++r<o;){var c=i[r],u=e[c];t?be.call(s,u)?s[u].push(c):s[u]=[c]:s[u]=c}return s},yt.invoke=or,yt.keys=ii,yt.keysIn=oi,yt.map=sr,yt.mapKeys=si,yt.mapValues=ci,yt.matches=Ai,yt.matchesProperty=function(e,t){return on(e,It(t,!0))},yt.memoize=Ar,yt.merge=Kr,yt.method=Ei,yt.methodOf=Ci,yt.mixin=Ti,yt.modArgs=Er,yt.negate=function(e){if(\"function\"!=typeof e)throw new he(l);return function(){return!e.apply(this,arguments)}},yt.omit=ui,yt.once=function(e){return mr(2,e)},yt.pairs=li,yt.partial=Cr,yt.partialRight=Tr,yt.partition=cr,yt.pick=pi,yt.pluck=function(e,t){return sr(e,Di(t))},yt.property=Di,yt.propertyOf=function(e){return function(t){return en(e,_a(t),t+\"\")}},yt.pull=function(){var e=arguments,t=e[0];if(!t||!t.length)return t;for(var n=0,a=aa(),r=e.length;++n<r;)for(var i=0,o=e[n];(i=a(t,o,i))>-1;)Xe.call(t,i,1);return t},yt.pullAt=Na,yt.range=function(e,t,r){r&&la(e,t,r)&&(t=r=a),e=+e||0,null==t?(t=e,e=0):t=+t||0;for(var i=-1,o=ot(et((t-e)/((r=null==r?1:+r||0)||1)),0),s=n(o);++i<o;)s[i]=e,e+=r;return s},yt.rearg=Pr,yt.reject=function(e,t,n){var a=Nr(e)?Et:$t;return t=ea(t,n,3),a(e,(function(e,n,a){return!t(e,n,a)}))},yt.remove=function(e,t,n){var a=[];if(!e||!e.length)return a;var r=-1,i=[],o=e.length;for(t=ea(t,n,3);++r<o;){var s=e[r];t(s,r,e)&&(a.push(s),i.push(r))}return cn(e,i),a},yt.rest=Ba,yt.restParam=Dr,yt.set=function(e,t,n){if(null==e)return e;for(var a=t+\"\",r=-1,i=(t=null!=e[a]||pa(t,e)?[a]:_a(t)).length,o=i-1,s=e;null!=s&&++r<i;){var c=t[r];\"__proto__\"!==c&&\"constructor\"!==c&&(Ir(s)&&(r==o?s[c]=n:null==s[c]&&(s[c]=ua(t[r+1])?[]:{})),s=s[c])}return e},yt.shuffle=function(e){return pr(e,dt)},yt.slice=function(e,t,n){var a=e?e.length:0;return a?(n&&\"number\"!=typeof n&&la(e,t,n)&&(t=0,n=a),pn(e,t,n)):[]},yt.sortBy=function(e,t,n){if(null==e)return[];n&&la(e,t,n)&&(t=a);var r=-1;t=ea(t,n,3);var i=an(e,(function(e,n,a){return{criteria:t(e,n,a),index:++r,value:e}}));return fn(i,De)},yt.sortByAll=fr,yt.sortByOrder=function(e,t,n,r){return null==e?[]:(r&&la(t,n,r)&&(n=a),Nr(t)||(t=null==t?[]:[t]),Nr(n)||(n=null==n?[]:[n]),hn(e,t,n))},yt.spread=function(e){if(\"function\"!=typeof e)throw new he(l);return function(t){return e.apply(this,t)}},yt.take=function(e,t,n){return(e?e.length:0)?((n?la(e,t,n):null==t)&&(t=1),pn(e,0,t<0?0:t)):[]},yt.takeRight=function(e,t,n){var a=e?e.length:0;return a?((n?la(e,t,n):null==t)&&(t=1),pn(e,(t=a-(+t||0))<0?0:t)):[]},yt.takeRightWhile=function(e,t,n){return e&&e.length?yn(e,ea(t,n,3),!1,!0):[]},yt.takeWhile=function(e,t,n){return e&&e.length?yn(e,ea(t,n,3)):[]},yt.tap=function(e,t,n){return t.call(n,e),e},yt.throttle=function(e,t,n){var a=!0,r=!0;if(\"function\"!=typeof e)throw new he(l);return!1===n?a=!1:Ir(n)&&(a=\"leading\"in n?!!n.leading:a,r=\"trailing\"in n?!!n.trailing:r),wr(e,t,{leading:a,maxWait:+t,trailing:r})},yt.thru=Va,yt.times=function(e,t,a){if((e=nt(e))<1||!rt(e))return[];var r=-1,i=n(st(e,ft));for(t=wn(t,a,1);++r<e;)r<ft?i[r]=t(r):t(r);return i},yt.toArray=Wr,yt.toPlainObject=Vr,yt.transform=function(e,t,n,r){var i=Nr(e)||Gr(e);if(t=ea(t,r,4),null==n)if(i||Ir(e)){var o=e.constructor;n=i?Nr(e)?new o:[]:Ft(Lr(o)?o.prototype:a)}else n={};return(i?St:Xt)(e,(function(e,a,r){return t(n,e,a,r)})),n},yt.union=Ia,yt.uniq=Fa,yt.unzip=za,yt.unzipWith=qa,yt.values=di,yt.valuesIn=function(e){return gn(e,oi(e))},yt.where=function(e,t){return Za(e,rn(t))},yt.without=Ha,yt.wrap=function(e,t){return Xn(t=null==t?Si:t,o,a,[e],[])},yt.xor=function(){for(var e=-1,t=arguments.length;++e<t;){var n=arguments[e];if(ca(n))var a=a?Tt(qt(a,n),qt(n,a)):n}return a?mn(a):[]},yt.zip=Ua,yt.zipObject=Ga,yt.zipWith=$a,yt.backflow=Sr,yt.collect=sr,yt.compose=Sr,yt.each=tr,yt.eachRight=nr,yt.extend=Jr,yt.iteratee=ji,yt.methods=ri,yt.object=Ga,yt.select=Za,yt.tail=Ba,yt.unique=Fa,Ti(yt,yt),yt.add=function(e,t){return(+e||0)+(+t||0)},yt.attempt=_i,yt.camelCase=fi,yt.capitalize=function(e){return(e=Ce(e))&&e.charAt(0).toUpperCase()+e.slice(1)},yt.ceil=Mi,yt.clone=function(e,t,n,a){return t&&\"boolean\"!=typeof t&&la(e,t,n)?t=!1:\"function\"==typeof t&&(a=n,n=t,t=!1),\"function\"==typeof n?It(e,t,wn(n,a,1)):It(e,t)},yt.cloneDeep=function(e,t,n){return\"function\"==typeof t?It(e,!0,wn(t,n,1)):It(e,!0)},yt.deburr=hi,yt.endsWith=function(e,t,n){t+=\"\";var r=(e=Ce(e)).length;return n=n===a?r:st(n<0?0:+n||0,r),(n-=t.length)>=0&&e.indexOf(t,n)==n},yt.escape=function(e){return(e=Ce(e))&&q.test(e)?e.replace(F,Me):e},yt.escapeRegExp=function(e){return(e=Ce(e))&&J.test(e)?e.replace(K,Ne):e||\"(?:)\"},yt.every=Xa,yt.find=Qa,yt.findIndex=Ca,yt.findKey=Zr,yt.findLast=er,yt.findLastIndex=Ta,yt.findLastKey=Qr,yt.findWhere=function(e,t){return Qa(e,rn(t))},yt.first=Pa,yt.floor=Ni,yt.get=function(e,t,n){var r=null==e?a:en(e,_a(t),t+\"\");return r===a?n:r},yt.gt=Or,yt.gte=function(e,t){return e>=t},yt.has=function(e,t){if(null==e)return!1;var n=be.call(e,t);if(!n&&!pa(t)){if(null==(e=1==(t=_a(t)).length?e:en(e,pn(t,0,-1))))return!1;t=Ma(t),n=be.call(e,t)}return n||fa(e.length)&&ua(t,e.length)&&(Nr(e)||Mr(e))},yt.identity=Si,yt.includes=rr,yt.indexOf=Da,yt.inRange=function(e,t,n){return t=+t||0,n===a?(n=t,t=0):n=+n||0,e>=st(t,n)&&e<ot(t,n)},yt.isArguments=Mr,yt.isArray=Nr,yt.isBoolean=function(e){return!0===e||!1===e||Le(e)&&we.call(e)==h},yt.isDate=function(e){return Le(e)&&we.call(e)==m},yt.isElement=function(e){return!!e&&1===e.nodeType&&Le(e)&&!qr(e)},yt.isEmpty=function(e){return null==e||(ca(e)&&(Nr(e)||Ur(e)||Mr(e)||Le(e)&&Lr(e.splice))?!e.length:!ii(e).length)},yt.isEqual=Br,yt.isError=Rr,yt.isFinite=function(e){return\"number\"==typeof e&&rt(e)},yt.isFunction=Lr,yt.isMatch=function(e,t,n,r){return n=\"function\"==typeof n?wn(n,r,3):a,nn(e,ia(t),n)},yt.isNaN=function(e){return zr(e)&&e!=+e},yt.isNative=Fr,yt.isNull=function(e){return null===e},yt.isNumber=zr,yt.isObject=Ir,yt.isPlainObject=qr,yt.isRegExp=Hr,yt.isString=Ur,yt.isTypedArray=Gr,yt.isUndefined=function(e){return e===a},yt.kebabCase=mi,yt.last=Ma,yt.lastIndexOf=function(e,t,n){var a=e?e.length:0;if(!a)return-1;var r=a;if(\"number\"==typeof n)r=(n<0?ot(a+n,0):st(n||0,a-1))+1;else if(n){var i=e[r=bn(e,t,!0)-1];return(t==t?t===i:i!=i)?r:-1}if(t!=t)return Re(e,r,!0);for(;r--;)if(e[r]===t)return r;return-1},yt.lt=$r,yt.lte=function(e,t){return e<=t},yt.max=Bi,yt.min=Ri,yt.noConflict=function(){return _e._=ke,this},yt.noop=Pi,yt.now=hr,yt.pad=function(e,t,n){t=+t;var a=(e=Ce(e)).length;if(a>=t||!rt(t))return e;var r=(t-a)/2,i=nt(r);return(n=Vn(\"\",et(r),n)).slice(0,i)+e+n},yt.padLeft=gi,yt.padRight=yi,yt.parseInt=function(e,t,n){return(n?la(e,t,n):null==t)?t=0:t&&(t=+t),e=wi(e),ut(e,t||(ee.test(e)?16:10))},yt.random=function(e,t,n){n&&la(e,t,n)&&(t=n=a);var r=null==e,i=null==t;if(null==n&&(i&&\"boolean\"==typeof e?(n=e,e=1):\"boolean\"==typeof t&&(n=t,i=!0)),r&&i&&(t=1,i=!1),e=+e||0,i?(t=e,e=0):t=+t||0,n||e%1||t%1){var o=lt();return st(e+o*(t-e+We(\"1e-\"+((o+\"\").length-1))),t)}return un(e,t)},yt.reduce=ur,yt.reduceRight=lr,yt.repeat=vi,yt.result=function(e,t,n){var r=null==e?a:e[t];return r===a&&(null==e||pa(t,e)||(r=null==(e=1==(t=_a(t)).length?e:en(e,pn(t,0,-1)))?a:e[Ma(t)]),r=r===a?n:r),Lr(r)?r.call(e):r},yt.round=Li,yt.runInContext=e,yt.size=function(e){var t=e?ra(e):0;return fa(t)?t:ii(e).length},yt.snakeCase=bi,yt.some=dr,yt.sortedIndex=Ra,yt.sortedLastIndex=La,yt.startCase=xi,yt.startsWith=function(e,t,n){return e=Ce(e),n=null==n?0:st(n<0?0:+n||0,e.length),e.lastIndexOf(t,n)==n},yt.sum=function(e,t,n){return n&&la(e,t,n)&&(t=a),1==(t=ea(t,n,3)).length?function(e,t){for(var n=e.length,a=0;n--;)a+=+t(e[n])||0;return a}(Nr(e)?e:wa(e),t):function(e,t){var n=0;return Ht(e,(function(e,a,r){n+=+t(e,a,r)||0})),n}(e,t)},yt.template=function(e,t,n){var r=yt.templateSettings;n&&la(e,t,n)&&(t=n=a),e=Ce(e),t=Mt(Nt({},n||t),r,Ot);var i,o,s=Mt(Nt({},t.imports),r.imports,Ot),c=ii(s),u=gn(s,c),l=0,p=t.interpolate||re,d=\"__p += '\",f=de((t.escape||re).source+\"|\"+p.source+\"|\"+(p===G?Z:re).source+\"|\"+(t.evaluate||re).source+\"|$\",\"g\"),h=\"//# sourceURL=\"+(\"sourceURL\"in t?t.sourceURL:\"lodash.templateSources[\"+ ++ce+\"]\")+\"\\n\";e.replace(f,(function(t,n,a,r,s,c){return a||(a=r),d+=e.slice(l,c).replace(ie,Be),n&&(i=!0,d+=\"' +\\n__e(\"+n+\") +\\n'\"),s&&(o=!0,d+=\"';\\n\"+s+\";\\n__p += '\"),a&&(d+=\"' +\\n((__t = (\"+a+\")) == null ? '' : __t) +\\n'\"),l=c+t.length,t})),d+=\"';\\n\";var m=t.variable;m||(d=\"with (obj) {\\n\"+d+\"\\n}\\n\"),d=(o?d.replace(B,\"\"):d).replace(R,\"$1\").replace(L,\"$1;\"),d=\"function(\"+(m||\"obj\")+\") {\\n\"+(m?\"\":\"obj || (obj = {});\\n\")+\"var __t, __p = ''\"+(i?\", __e = _.escape\":\"\")+(o?\", __j = Array.prototype.join;\\nfunction print() { __p += __j.call(arguments, '') }\\n\":\";\\n\")+d+\"return __p\\n}\";var g=_i((function(){return v(c,h+\"return \"+d).apply(a,u)}));if(g.source=d,Rr(g))throw g;return g},yt.trim=wi,yt.trimLeft=function(e,t,n){var a=e;return(e=Ce(e))?(n?la(a,t,n):null==t)?e.slice(ze(e)):e.slice(Te(e,t+\"\")):e},yt.trimRight=function(e,t,n){var a=e;return(e=Ce(e))?(n?la(a,t,n):null==t)?e.slice(0,qe(e)+1):e.slice(0,Pe(e,t+\"\")+1):e},yt.trunc=function(e,t,n){n&&la(e,t,n)&&(t=a);var r=30,i=\"...\";if(null!=t)if(Ir(t)){var o=\"separator\"in t?t.separator:o;r=\"length\"in t?+t.length||0:r,i=\"omission\"in t?Ce(t.omission):i}else r=+t||0;if(r>=(e=Ce(e)).length)return e;var s=r-i.length;if(s<1)return i;var c=e.slice(0,s);if(null==o)return c+i;if(Hr(o)){if(e.slice(s).search(o)){var u,l,p=e.slice(0,s);for(o.global||(o=de(o.source,(Q.exec(o)||\"\")+\"g\")),o.lastIndex=0;u=o.exec(p);)l=u.index;c=c.slice(0,null==l?s:l)}}else if(e.indexOf(o,s)!=s){var d=c.lastIndexOf(o);d>-1&&(c=c.slice(0,d))}return c+i},yt.unescape=function(e){return(e=Ce(e))&&z.test(e)?e.replace(I,He):e},yt.uniqueId=function(e){var t=++xe;return Ce(e)+t},yt.words=ki,yt.all=Xa,yt.any=dr,yt.contains=rr,yt.eq=Br,yt.detect=Qa,yt.foldl=ur,yt.foldr=lr,yt.head=Pa,yt.include=rr,yt.inject=ur,Ti(yt,(Oi={},Xt(yt,(function(e,t){yt.prototype[t]||(Oi[t]=e)})),Oi),!1),yt.sample=pr,yt.prototype.sample=function(e){return this.__chain__||null!=e?this.thru((function(t){return pr(t,e)})):pr(this.value())},yt.VERSION=\"3.10.2\",St([\"bind\",\"bindKey\",\"curry\",\"curryRight\",\"partial\",\"partialRight\"],(function(e){yt[e].placeholder=yt})),St([\"drop\",\"take\"],(function(e,t){xt.prototype[e]=function(n){var a=this.__filtered__;if(a&&!t)return new xt(this);n=null==n?1:ot(nt(n)||0,0);var r=this.clone();return a?r.__takeCount__=st(r.__takeCount__,n):r.__views__.push({size:n,type:e+(r.__dir__<0?\"Right\":\"\")}),r},xt.prototype[e+\"Right\"]=function(t){return this.reverse()[e](t).reverse()}})),St([\"filter\",\"map\",\"takeWhile\"],(function(e,t){var n=t+1,a=2!=n;xt.prototype[e]=function(e,t){var r=this.clone();return r.__iteratees__.push({iteratee:ea(e,t,1),type:n}),r.__filtered__=r.__filtered__||a,r}})),St([\"first\",\"last\"],(function(e,t){var n=\"take\"+(t?\"Right\":\"\");xt.prototype[e]=function(){return this[n](1).value()[0]}})),St([\"initial\",\"rest\"],(function(e,t){var n=\"drop\"+(t?\"\":\"Right\");xt.prototype[e]=function(){return this.__filtered__?new xt(this):this[n](1)}})),St([\"pluck\",\"where\"],(function(e,t){var n=t?\"filter\":\"map\",a=t?rn:Di;xt.prototype[e]=function(e){return this[n](a(e))}})),xt.prototype.compact=function(){return this.filter(Si)},xt.prototype.reject=function(e,t){return e=ea(e,t,1),this.filter((function(t){return!e(t)}))},xt.prototype.slice=function(e,t){e=null==e?0:+e||0;var n=this;return n.__filtered__&&(e>0||t<0)?new xt(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==a&&(n=(t=+t||0)<0?n.dropRight(-t):n.take(t-e)),n)},xt.prototype.takeRightWhile=function(e,t){return this.reverse().takeWhile(e,t).reverse()},xt.prototype.toArray=function(){return this.take(dt)},Xt(xt.prototype,(function(e,t){var n=/^(?:filter|map|reject)|While$/.test(t),r=/^(?:first|last)$/.test(t),i=yt[r?\"take\"+(\"last\"==t?\"Right\":\"\"):t];i&&(yt.prototype[t]=function(){var t=r?[1]:arguments,o=this.__chain__,s=this.__wrapped__,c=!!this.__actions__.length,u=s instanceof xt,l=t[0],p=u||Nr(s);p&&n&&\"function\"==typeof l&&1!=l.length&&(u=p=!1);var d=function(e){return r&&o?i(e,1)[0]:i.apply(a,Tt([e],t))},f={func:Va,args:[d],thisArg:a},h=u&&!c;if(r&&!o)return h?((s=s.clone()).__actions__.push(f),e.call(s)):i.call(a,this.value())[0];if(!r&&p){s=h?s:new xt(this);var m=e.apply(s,t);return m.__actions__.push(f),new bt(m,o)}return this.thru(d)})})),St([\"join\",\"pop\",\"push\",\"replace\",\"shift\",\"sort\",\"splice\",\"split\",\"unshift\"],(function(e){var t=(/^(?:replace|split)$/.test(e)?ye:me)[e],n=/^(?:push|sort|unshift)$/.test(e)?\"tap\":\"thru\",a=/^(?:join|pop|replace|shift)$/.test(e);yt.prototype[e]=function(){var e=arguments;return a&&!this.__chain__?t.apply(this.value(),e):this[n]((function(n){return t.apply(n,e)}))}})),Xt(xt.prototype,(function(e,t){var n=yt[t];if(n){var a=n.name;(gt[a]||(gt[a]=[])).push({name:t,func:n})}})),gt[Wn(a,2).name]=[{name:\"wrapper\",func:a}],xt.prototype.clone=function(){var e=new xt(this.__wrapped__);return e.__actions__=jt(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=jt(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=jt(this.__views__),e},xt.prototype.reverse=function(){if(this.__filtered__){var e=new xt(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},xt.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=Nr(e),a=t<0,r=n?e.length:0,i=function(e,t,n){var a=-1,r=n.length;for(;++a<r;){var i=n[a],o=i.size;switch(i.type){case\"drop\":e+=o;break;case\"dropRight\":t-=o;break;case\"take\":t=st(t,e+o);break;case\"takeRight\":e=ot(e,t-o)}}return{start:e,end:t}}(0,r,this.__views__),o=i.start,s=i.end,c=s-o,l=a?s:o-1,p=this.__iteratees__,d=p.length,f=0,h=st(c,this.__takeCount__);if(!n||r<u||r==c&&h==c)return vn(a&&n?e.reverse():e,this.__actions__);var m=[];e:for(;c--&&f<h;){for(var g=-1,y=e[l+=t];++g<d;){var v=p[g],b=v.iteratee,x=v.type,w=b(y);if(2==x)y=w;else if(!w){if(1==x)continue e;break e}}m[f++]=y}return m},yt.prototype.chain=function(){return Wa(this)},yt.prototype.commit=function(){return new bt(this.value(),this.__chain__)},yt.prototype.concat=Ka,yt.prototype.plant=function(e){for(var t,n=this;n instanceof vt;){var a=ja(n);t?r.__wrapped__=a:t=a;var r=a;n=n.__wrapped__}return r.__wrapped__=e,t},yt.prototype.reverse=function(){var e=this.__wrapped__,t=function(e){return n&&n.__dir__<0?e:e.reverse()};if(e instanceof xt){var n=e;return this.__actions__.length&&(n=new xt(this)),(n=n.reverse()).__actions__.push({func:Va,args:[t],thisArg:a}),new bt(n,this.__chain__)}return this.thru(t)},yt.prototype.toString=function(){return this.value()+\"\"},yt.prototype.run=yt.prototype.toJSON=yt.prototype.valueOf=yt.prototype.value=function(){return vn(this.__wrapped__,this.__actions__)},yt.prototype.collect=yt.prototype.map,yt.prototype.head=yt.prototype.first,yt.prototype.select=yt.prototype.filter,yt.prototype.tail=yt.prototype.rest,yt}();\"function\"==typeof define&&\"object\"==typeof define.amd&&define.amd?(_e._=Ue,define((function(){return Ue}))):ye&&ve?ke?(ve.exports=Ue)._=Ue:ye._=Ue:_e._=Ue}).call(this)}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],411:[function(e,t,n){(function(a,r){(function(){!function(e,a){\"object\"==typeof n&&void 0!==t?a(n):\"function\"==typeof define&&define.amd?define([\"exports\"],a):a((e=\"undefined\"!=typeof globalThis?globalThis:e||self).loupe={})}(this,(function(t){\"use strict\";function n(e){return n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},n(e)}function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(\"undefined\"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],a=!0,r=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(a=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);a=!0);}catch(c){r=!0,i=c}finally{try{a||null==s.return||s.return()}finally{if(r)throw i}}return n}(e,t)||function(e,t){if(!e)return;if(\"string\"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}var s={bold:[\"1\",\"22\"],dim:[\"2\",\"22\"],italic:[\"3\",\"23\"],underline:[\"4\",\"24\"],inverse:[\"7\",\"27\"],hidden:[\"8\",\"28\"],strike:[\"9\",\"29\"],black:[\"30\",\"39\"],red:[\"31\",\"39\"],green:[\"32\",\"39\"],yellow:[\"33\",\"39\"],blue:[\"34\",\"39\"],magenta:[\"35\",\"39\"],cyan:[\"36\",\"39\"],white:[\"37\",\"39\"],brightblack:[\"30;1\",\"39\"],brightred:[\"31;1\",\"39\"],brightgreen:[\"32;1\",\"39\"],brightyellow:[\"33;1\",\"39\"],brightblue:[\"34;1\",\"39\"],brightmagenta:[\"35;1\",\"39\"],brightcyan:[\"36;1\",\"39\"],brightwhite:[\"37;1\",\"39\"],grey:[\"90\",\"39\"]},c={special:\"cyan\",number:\"yellow\",bigint:\"yellow\",boolean:\"yellow\",undefined:\"grey\",null:\"bold\",string:\"green\",symbol:\"green\",date:\"magenta\",regexp:\"red\"},u=\"…\";function l(e,t){var n=s[c[t]]||s[t];return n?\"\u001b[\".concat(n[0],\"m\").concat(String(e),\"\u001b[\").concat(n[1],\"m\"):String(e)}function p(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u;e=String(e);var a=n.length,r=e.length;return a>t&&r>a?n:r>t&&r>a?\"\".concat(e.slice(0,t-a)).concat(n):e}function d(e,t,n){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:\", \";n=n||t.inspect;var r=e.length;if(0===r)return\"\";for(var i=t.truncate,o=\"\",s=\"\",c=\"\",l=0;l<r;l+=1){var p=l+1===e.length,d=l+2===e.length;c=\"\".concat(u,\"(\").concat(e.length-l,\")\");var f=e[l];t.truncate=i-o.length-(p?0:a.length);var h=s||n(f,t)+(p?\"\":a),m=o.length+h.length,g=m+c.length;if(p&&m>i&&o.length+c.length<=i)break;if(!p&&!d&&g>i)break;if(s=p?\"\":n(e[l+1],t)+(d?\"\":a),!p&&d&&g>i&&m+s.length>i)break;if(o+=h,!p&&!d&&m+s.length>=i){c=\"\".concat(u,\"(\").concat(e.length-l-1,\")\");break}c=\"\"}return\"\".concat(o).concat(c)}function f(e,t){var n=i(e,2),a=n[0],r=n[1];return t.truncate-=2,\"string\"==typeof a?a=function(e){return e.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)?e:JSON.stringify(e).replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"').replace(/(^\"|\"$)/g,\"'\")}(a):\"number\"!=typeof a&&(a=\"[\".concat(t.inspect(a,t),\"]\")),t.truncate-=a.length,r=t.inspect(r,t),\"\".concat(a,\": \").concat(r)}var h=Function.prototype.toString,m=/\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;var g=function(e){if(\"function\"!=typeof e)return null;var t=\"\";if(void 0===Function.prototype.name&&void 0===e.name){var n=h.call(e);if(n.indexOf(\"(\")>512)return t;var a=n.match(m);a&&(t=a[1])}else t=e.name;return t};function y(e,t){var n=function(e){return\"function\"==typeof r&&e instanceof r?\"Buffer\":e[Symbol.toStringTag]?e[Symbol.toStringTag]:g(e.constructor)}(e);t.truncate-=n.length+4;var a=Object.keys(e).slice(e.length);if(!e.length&&!a.length)return\"\".concat(n,\"[]\");for(var i=\"\",o=0;o<e.length;o++){var s=\"\".concat(t.stylize(p(e[o],t.truncate),\"number\")).concat(o===e.length-1?\"\":\", \");if(t.truncate-=s.length,e[o]!==e.length&&t.truncate<=3){i+=\"\".concat(u,\"(\").concat(e.length-e[o]+1,\")\");break}i+=s}var c=\"\";return a.length&&(c=d(a.map((function(t){return[t,e[t]]})),t,f)),\"\".concat(n,\"[ \").concat(i).concat(c?\", \".concat(c):\"\",\" ]\")}function v(e,t){var n=g(e);return n?t.stylize(\"[Function \".concat(p(n,t.truncate-11),\"]\"),\"special\"):t.stylize(\"[Function]\",\"special\")}function b(e,t){var n=i(e,2),a=n[0],r=n[1];return t.truncate-=4,a=t.inspect(a,t),t.truncate-=a.length,r=t.inspect(r,t),\"\".concat(a,\" => \").concat(r)}var x=Number.isNaN||function(e){return e!=e};function w(e,t){return x(e)?t.stylize(\"NaN\",\"number\"):e===1/0?t.stylize(\"Infinity\",\"number\"):e===-1/0?t.stylize(\"-Infinity\",\"number\"):0===e?t.stylize(1/e==1/0?\"+0\":\"-0\",\"number\"):t.stylize(p(e,t.truncate),\"number\")}function k(e,t){var n=p(e.toString(),t.truncate-1);return n!==u&&(n+=\"n\"),t.stylize(n,\"bigint\")}var _=new RegExp(\"['\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]\",\"g\"),j={\"\\b\":\"\\\\b\",\"\\t\":\"\\\\t\",\"\\n\":\"\\\\n\",\"\\f\":\"\\\\f\",\"\\r\":\"\\\\r\",\"'\":\"\\\\'\",\"\\\\\":\"\\\\\\\\\"};function S(e){return j[e]||\"\\\\u\".concat(\"0000\".concat(e.charCodeAt(0).toString(16)).slice(-4))}function A(e,t){return _.test(e)&&(e=e.replace(_,S)),t.stylize(\"'\".concat(p(e,t.truncate-2),\"'\"),\"string\")}function E(e){return\"description\"in Symbol.prototype?e.description?\"Symbol(\".concat(e.description,\")\"):\"Symbol()\":e.toString()}var C=function(){return\"Promise{…}\"};try{var T=a.binding(\"util\"),P=T.getPromiseDetails,D=T.kPending,O=T.kRejected;Array.isArray(P(Promise.resolve()))&&(C=function(e,t){var n=i(P(e),2),a=n[0],r=n[1];return a===D?\"Promise{<pending>}\":\"Promise\".concat(a===O?\"!\":\"\",\"{\").concat(t.inspect(r,t),\"}\")})}catch(Y){}var M=C;function N(e,t){var n=Object.getOwnPropertyNames(e),a=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e):[];if(0===n.length&&0===a.length)return\"{}\";if(t.truncate-=4,t.seen=t.seen||[],t.seen.indexOf(e)>=0)return\"[Circular]\";t.seen.push(e);var r=d(n.map((function(t){return[t,e[t]]})),t,f),i=d(a.map((function(t){return[t,e[t]]})),t,f);t.seen.pop();var o=\"\";return r&&i&&(o=\", \"),\"{ \".concat(r).concat(o).concat(i,\" }\")}var B=!(\"undefined\"==typeof Symbol||!Symbol.toStringTag)&&Symbol.toStringTag;var R=[\"stack\",\"line\",\"column\",\"name\",\"message\",\"fileName\",\"lineNumber\",\"columnNumber\",\"number\",\"description\"];function L(e,t){var n=i(e,2),a=n[0],r=n[1];return t.truncate-=3,r?\"\".concat(t.stylize(a,\"yellow\"),\"=\").concat(t.stylize('\"'.concat(r,'\"'),\"string\")):\"\".concat(t.stylize(a,\"yellow\"))}function I(e,t){return d(e,t,F,\"\\n\")}function F(e,t){var n=e.getAttributeNames(),a=e.tagName.toLowerCase(),r=t.stylize(\"<\".concat(a),\"special\"),i=t.stylize(\">\",\"special\"),o=t.stylize(\"</\".concat(a,\">\"),\"special\");t.truncate-=2*a.length+5;var s=\"\";n.length>0&&(s+=\" \",s+=d(n.map((function(t){return[t,e.getAttribute(t)]})),t,L,\" \")),t.truncate-=s.length;var c=t.truncate,l=I(e.children,t);return l&&l.length>c&&(l=\"\".concat(u,\"(\").concat(e.children.length,\")\")),\"\".concat(r).concat(s).concat(i).concat(l).concat(o)}var z=\"function\"==typeof Symbol&&\"function\"==typeof Symbol.for?Symbol.for(\"chai/inspect\"):\"@@chai/inspect\",q=!1;try{var H=e(\"util\");q=!!H.inspect&&H.inspect.custom}catch(X){q=!1}function U(){this.key=\"chai/loupe__\"+Math.random()+Date.now()}U.prototype={get:function(e){return e[this.key]},has:function(e){return this.key in e},set:function(e,t){Object.isExtensible(e)&&Object.defineProperty(e,this.key,{value:t,configurable:!0})}};var G=new(\"function\"==typeof WeakMap?WeakMap:U),$={},W={undefined:function(e,t){return t.stylize(\"undefined\",\"undefined\")},null:function(e,t){return t.stylize(null,\"null\")},boolean:function(e,t){return t.stylize(e,\"boolean\")},Boolean:function(e,t){return t.stylize(e,\"boolean\")},number:w,Number:w,bigint:k,BigInt:k,string:A,String:A,function:v,Function:v,symbol:E,Symbol:E,Array:function(e,t){var n=Object.keys(e).slice(e.length);if(!e.length&&!n.length)return\"[]\";t.truncate-=4;var a=d(e,t);t.truncate-=a.length;var r=\"\";return n.length&&(r=d(n.map((function(t){return[t,e[t]]})),t,f)),\"[ \".concat(a).concat(r?\", \".concat(r):\"\",\" ]\")},Date:function(e,t){var n=e.toJSON();if(null===n)return\"Invalid Date\";var a=n.split(\"T\"),r=a[0];return t.stylize(\"\".concat(r,\"T\").concat(p(a[1],t.truncate-r.length-1)),\"date\")},Map:function(e,t){return e.size-1<=0?\"Map{}\":(t.truncate-=7,\"Map{ \".concat(d(function(e){var t=[];return e.forEach((function(e,n){t.push([n,e])})),t}(e),t,b),\" }\"))},Set:function(e,t){return 0===e.size?\"Set{}\":(t.truncate-=7,\"Set{ \".concat(d(function(e){var t=[];return e.forEach((function(e){t.push(e)})),t}(e),t),\" }\"))},RegExp:function(e,t){var n=e.toString().split(\"/\")[2],a=t.truncate-(2+n.length),r=e.source;return t.stylize(\"/\".concat(p(r,a),\"/\").concat(n),\"regexp\")},Promise:M,WeakSet:function(e,t){return t.stylize(\"WeakSet{…}\",\"special\")},WeakMap:function(e,t){return t.stylize(\"WeakMap{…}\",\"special\")},Arguments:function(e,t){return 0===e.length?\"Arguments[]\":(t.truncate-=13,\"Arguments[ \".concat(d(e,t),\" ]\"))},Int8Array:y,Uint8Array:y,Uint8ClampedArray:y,Int16Array:y,Uint16Array:y,Int32Array:y,Uint32Array:y,Float32Array:y,Float64Array:y,Generator:function(){return\"\"},DataView:function(){return\"\"},ArrayBuffer:function(){return\"\"},Error:function(e,t){var n=Object.getOwnPropertyNames(e).filter((function(e){return-1===R.indexOf(e)})),a=e.name;t.truncate-=a.length;var r=\"\";\"string\"==typeof e.message?r=p(e.message,t.truncate):n.unshift(\"message\"),r=r?\": \".concat(r):\"\",t.truncate-=r.length+5;var i=d(n.map((function(t){return[t,e[t]]})),t,f);return\"\".concat(a).concat(r).concat(i?\" { \".concat(i,\" }\"):\"\")},HTMLCollection:I,NodeList:I},V=Object.prototype.toString;function K(e,t){t=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.showHidden,n=void 0!==t&&t,a=e.depth,r=void 0===a?2:a,i=e.colors,o=void 0!==i&&i,s=e.customInspect,c=void 0===s||s,u=e.showProxy,p=void 0!==u&&u,d=e.maxArrayLength,f=void 0===d?1/0:d,h=e.breakLength,m=void 0===h?1/0:h,g=e.seen,y=void 0===g?[]:g,v=e.truncate,b=void 0===v?1/0:v,x=e.stylize,w=void 0===x?String:x,k={showHidden:Boolean(n),depth:Number(r),colors:Boolean(o),customInspect:Boolean(c),showProxy:Boolean(p),maxArrayLength:Number(f),breakLength:Number(m),truncate:Number(b),seen:y,stylize:w};return k.colors&&(k.stylize=l),k}(t),t.inspect=K;var a=t.customInspect,r=null===e?\"null\":n(e);if(\"object\"===r&&(r=V.call(e).slice(8,-1)),W[r])return W[r](e,t);if(a&&e){var i=function(e,t,n){return z in e&&\"function\"==typeof e[z]?e[z](t):q&&q in e&&\"function\"==typeof e[q]?e[q](t.depth,t):\"inspect\"in e&&\"function\"==typeof e.inspect?e.inspect(t.depth,t):\"constructor\"in e&&G.has(e.constructor)?G.get(e.constructor)(e,t):$[n]?$[n](e,t):\"\"}(e,t,r);if(i)return\"string\"==typeof i?i:K(i,t)}var o=!!e&&Object.getPrototypeOf(e);return o===Object.prototype||null===o?N(e,t):e&&\"function\"==typeof HTMLElement&&e instanceof HTMLElement?F(e,t):\"constructor\"in e?e.constructor!==Object?function(e,t){var n=\"\";return B&&B in e&&(n=e[B]),(n=n||g(e.constructor))&&\"_class\"!==n||(n=\"<Anonymous Class>\"),t.truncate-=n.length,\"\".concat(n).concat(N(e,t))}(e,t):N(e,t):e===Object(e)?N(e,t):t.stylize(String(e),r)}var J=z;t.custom=J,t.default=K,t.inspect=K,t.registerConstructor=function(e,t){return!G.has(e)&&(G.set(e,t),!0)},t.registerStringTag=function(e,t){return!(e in $)&&($[e]=t,!0)},Object.defineProperty(t,\"__esModule\",{value:!0})}))}).call(this)}).call(this,e(\"_process\"),e(\"buffer\").Buffer)},{_process:\"_process\",buffer:\"buffer\",util:\"util\"}],412:[function(e,t,n){t.exports={\"application/1d-interleaved-parityfec\":{source:\"iana\"},\"application/3gpdash-qoe-report+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/3gpp-ims+xml\":{source:\"iana\",compressible:!0},\"application/3gpphal+json\":{source:\"iana\",compressible:!0},\"application/3gpphalforms+json\":{source:\"iana\",compressible:!0},\"application/a2l\":{source:\"iana\"},\"application/ace+cbor\":{source:\"iana\"},\"application/activemessage\":{source:\"iana\"},\"application/activity+json\":{source:\"iana\",compressible:!0},\"application/alto-costmap+json\":{source:\"iana\",compressible:!0},\"application/alto-costmapfilter+json\":{source:\"iana\",compressible:!0},\"application/alto-directory+json\":{source:\"iana\",compressible:!0},\"application/alto-endpointcost+json\":{source:\"iana\",compressible:!0},\"application/alto-endpointcostparams+json\":{source:\"iana\",compressible:!0},\"application/alto-endpointprop+json\":{source:\"iana\",compressible:!0},\"application/alto-endpointpropparams+json\":{source:\"iana\",compressible:!0},\"application/alto-error+json\":{source:\"iana\",compressible:!0},\"application/alto-networkmap+json\":{source:\"iana\",compressible:!0},\"application/alto-networkmapfilter+json\":{source:\"iana\",compressible:!0},\"application/alto-updatestreamcontrol+json\":{source:\"iana\",compressible:!0},\"application/alto-updatestreamparams+json\":{source:\"iana\",compressible:!0},\"application/aml\":{source:\"iana\"},\"application/andrew-inset\":{source:\"iana\",extensions:[\"ez\"]},\"application/applefile\":{source:\"iana\"},\"application/applixware\":{source:\"apache\",extensions:[\"aw\"]},\"application/at+jwt\":{source:\"iana\"},\"application/atf\":{source:\"iana\"},\"application/atfx\":{source:\"iana\"},\"application/atom+xml\":{source:\"iana\",compressible:!0,extensions:[\"atom\"]},\"application/atomcat+xml\":{source:\"iana\",compressible:!0,extensions:[\"atomcat\"]},\"application/atomdeleted+xml\":{source:\"iana\",compressible:!0,extensions:[\"atomdeleted\"]},\"application/atomicmail\":{source:\"iana\"},\"application/atomsvc+xml\":{source:\"iana\",compressible:!0,extensions:[\"atomsvc\"]},\"application/atsc-dwd+xml\":{source:\"iana\",compressible:!0,extensions:[\"dwd\"]},\"application/atsc-dynamic-event-message\":{source:\"iana\"},\"application/atsc-held+xml\":{source:\"iana\",compressible:!0,extensions:[\"held\"]},\"application/atsc-rdt+json\":{source:\"iana\",compressible:!0},\"application/atsc-rsat+xml\":{source:\"iana\",compressible:!0,extensions:[\"rsat\"]},\"application/atxml\":{source:\"iana\"},\"application/auth-policy+xml\":{source:\"iana\",compressible:!0},\"application/bacnet-xdd+zip\":{source:\"iana\",compressible:!1},\"application/batch-smtp\":{source:\"iana\"},\"application/bdoc\":{compressible:!1,extensions:[\"bdoc\"]},\"application/beep+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/calendar+json\":{source:\"iana\",compressible:!0},\"application/calendar+xml\":{source:\"iana\",compressible:!0,extensions:[\"xcs\"]},\"application/call-completion\":{source:\"iana\"},\"application/cals-1840\":{source:\"iana\"},\"application/captive+json\":{source:\"iana\",compressible:!0},\"application/cbor\":{source:\"iana\"},\"application/cbor-seq\":{source:\"iana\"},\"application/cccex\":{source:\"iana\"},\"application/ccmp+xml\":{source:\"iana\",compressible:!0},\"application/ccxml+xml\":{source:\"iana\",compressible:!0,extensions:[\"ccxml\"]},\"application/cdfx+xml\":{source:\"iana\",compressible:!0,extensions:[\"cdfx\"]},\"application/cdmi-capability\":{source:\"iana\",extensions:[\"cdmia\"]},\"application/cdmi-container\":{source:\"iana\",extensions:[\"cdmic\"]},\"application/cdmi-domain\":{source:\"iana\",extensions:[\"cdmid\"]},\"application/cdmi-object\":{source:\"iana\",extensions:[\"cdmio\"]},\"application/cdmi-queue\":{source:\"iana\",extensions:[\"cdmiq\"]},\"application/cdni\":{source:\"iana\"},\"application/cea\":{source:\"iana\"},\"application/cea-2018+xml\":{source:\"iana\",compressible:!0},\"application/cellml+xml\":{source:\"iana\",compressible:!0},\"application/cfw\":{source:\"iana\"},\"application/city+json\":{source:\"iana\",compressible:!0},\"application/clr\":{source:\"iana\"},\"application/clue+xml\":{source:\"iana\",compressible:!0},\"application/clue_info+xml\":{source:\"iana\",compressible:!0},\"application/cms\":{source:\"iana\"},\"application/cnrp+xml\":{source:\"iana\",compressible:!0},\"application/coap-group+json\":{source:\"iana\",compressible:!0},\"application/coap-payload\":{source:\"iana\"},\"application/commonground\":{source:\"iana\"},\"application/conference-info+xml\":{source:\"iana\",compressible:!0},\"application/cose\":{source:\"iana\"},\"application/cose-key\":{source:\"iana\"},\"application/cose-key-set\":{source:\"iana\"},\"application/cpl+xml\":{source:\"iana\",compressible:!0,extensions:[\"cpl\"]},\"application/csrattrs\":{source:\"iana\"},\"application/csta+xml\":{source:\"iana\",compressible:!0},\"application/cstadata+xml\":{source:\"iana\",compressible:!0},\"application/csvm+json\":{source:\"iana\",compressible:!0},\"application/cu-seeme\":{source:\"apache\",extensions:[\"cu\"]},\"application/cwt\":{source:\"iana\"},\"application/cybercash\":{source:\"iana\"},\"application/dart\":{compressible:!0},\"application/dash+xml\":{source:\"iana\",compressible:!0,extensions:[\"mpd\"]},\"application/dash-patch+xml\":{source:\"iana\",compressible:!0,extensions:[\"mpp\"]},\"application/dashdelta\":{source:\"iana\"},\"application/davmount+xml\":{source:\"iana\",compressible:!0,extensions:[\"davmount\"]},\"application/dca-rft\":{source:\"iana\"},\"application/dcd\":{source:\"iana\"},\"application/dec-dx\":{source:\"iana\"},\"application/dialog-info+xml\":{source:\"iana\",compressible:!0},\"application/dicom\":{source:\"iana\"},\"application/dicom+json\":{source:\"iana\",compressible:!0},\"application/dicom+xml\":{source:\"iana\",compressible:!0},\"application/dii\":{source:\"iana\"},\"application/dit\":{source:\"iana\"},\"application/dns\":{source:\"iana\"},\"application/dns+json\":{source:\"iana\",compressible:!0},\"application/dns-message\":{source:\"iana\"},\"application/docbook+xml\":{source:\"apache\",compressible:!0,extensions:[\"dbk\"]},\"application/dots+cbor\":{source:\"iana\"},\"application/dskpp+xml\":{source:\"iana\",compressible:!0},\"application/dssc+der\":{source:\"iana\",extensions:[\"dssc\"]},\"application/dssc+xml\":{source:\"iana\",compressible:!0,extensions:[\"xdssc\"]},\"application/dvcs\":{source:\"iana\"},\"application/ecmascript\":{source:\"iana\",compressible:!0,extensions:[\"es\",\"ecma\"]},\"application/edi-consent\":{source:\"iana\"},\"application/edi-x12\":{source:\"iana\",compressible:!1},\"application/edifact\":{source:\"iana\",compressible:!1},\"application/efi\":{source:\"iana\"},\"application/elm+json\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/elm+xml\":{source:\"iana\",compressible:!0},\"application/emergencycalldata.cap+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/emergencycalldata.comment+xml\":{source:\"iana\",compressible:!0},\"application/emergencycalldata.control+xml\":{source:\"iana\",compressible:!0},\"application/emergencycalldata.deviceinfo+xml\":{source:\"iana\",compressible:!0},\"application/emergencycalldata.ecall.msd\":{source:\"iana\"},\"application/emergencycalldata.providerinfo+xml\":{source:\"iana\",compressible:!0},\"application/emergencycalldata.serviceinfo+xml\":{source:\"iana\",compressible:!0},\"application/emergencycalldata.subscriberinfo+xml\":{source:\"iana\",compressible:!0},\"application/emergencycalldata.veds+xml\":{source:\"iana\",compressible:!0},\"application/emma+xml\":{source:\"iana\",compressible:!0,extensions:[\"emma\"]},\"application/emotionml+xml\":{source:\"iana\",compressible:!0,extensions:[\"emotionml\"]},\"application/encaprtp\":{source:\"iana\"},\"application/epp+xml\":{source:\"iana\",compressible:!0},\"application/epub+zip\":{source:\"iana\",compressible:!1,extensions:[\"epub\"]},\"application/eshop\":{source:\"iana\"},\"application/exi\":{source:\"iana\",extensions:[\"exi\"]},\"application/expect-ct-report+json\":{source:\"iana\",compressible:!0},\"application/express\":{source:\"iana\",extensions:[\"exp\"]},\"application/fastinfoset\":{source:\"iana\"},\"application/fastsoap\":{source:\"iana\"},\"application/fdt+xml\":{source:\"iana\",compressible:!0,extensions:[\"fdt\"]},\"application/fhir+json\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/fhir+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/fido.trusted-apps+json\":{compressible:!0},\"application/fits\":{source:\"iana\"},\"application/flexfec\":{source:\"iana\"},\"application/font-sfnt\":{source:\"iana\"},\"application/font-tdpfr\":{source:\"iana\",extensions:[\"pfr\"]},\"application/font-woff\":{source:\"iana\",compressible:!1},\"application/framework-attributes+xml\":{source:\"iana\",compressible:!0},\"application/geo+json\":{source:\"iana\",compressible:!0,extensions:[\"geojson\"]},\"application/geo+json-seq\":{source:\"iana\"},\"application/geopackage+sqlite3\":{source:\"iana\"},\"application/geoxacml+xml\":{source:\"iana\",compressible:!0},\"application/gltf-buffer\":{source:\"iana\"},\"application/gml+xml\":{source:\"iana\",compressible:!0,extensions:[\"gml\"]},\"application/gpx+xml\":{source:\"apache\",compressible:!0,extensions:[\"gpx\"]},\"application/gxf\":{source:\"apache\",extensions:[\"gxf\"]},\"application/gzip\":{source:\"iana\",compressible:!1,extensions:[\"gz\"]},\"application/h224\":{source:\"iana\"},\"application/held+xml\":{source:\"iana\",compressible:!0},\"application/hjson\":{extensions:[\"hjson\"]},\"application/http\":{source:\"iana\"},\"application/hyperstudio\":{source:\"iana\",extensions:[\"stk\"]},\"application/ibe-key-request+xml\":{source:\"iana\",compressible:!0},\"application/ibe-pkg-reply+xml\":{source:\"iana\",compressible:!0},\"application/ibe-pp-data\":{source:\"iana\"},\"application/iges\":{source:\"iana\"},\"application/im-iscomposing+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/index\":{source:\"iana\"},\"application/index.cmd\":{source:\"iana\"},\"application/index.obj\":{source:\"iana\"},\"application/index.response\":{source:\"iana\"},\"application/index.vnd\":{source:\"iana\"},\"application/inkml+xml\":{source:\"iana\",compressible:!0,extensions:[\"ink\",\"inkml\"]},\"application/iotp\":{source:\"iana\"},\"application/ipfix\":{source:\"iana\",extensions:[\"ipfix\"]},\"application/ipp\":{source:\"iana\"},\"application/isup\":{source:\"iana\"},\"application/its+xml\":{source:\"iana\",compressible:!0,extensions:[\"its\"]},\"application/java-archive\":{source:\"apache\",compressible:!1,extensions:[\"jar\",\"war\",\"ear\"]},\"application/java-serialized-object\":{source:\"apache\",compressible:!1,extensions:[\"ser\"]},\"application/java-vm\":{source:\"apache\",compressible:!1,extensions:[\"class\"]},\"application/javascript\":{source:\"iana\",charset:\"UTF-8\",compressible:!0,extensions:[\"js\",\"mjs\"]},\"application/jf2feed+json\":{source:\"iana\",compressible:!0},\"application/jose\":{source:\"iana\"},\"application/jose+json\":{source:\"iana\",compressible:!0},\"application/jrd+json\":{source:\"iana\",compressible:!0},\"application/jscalendar+json\":{source:\"iana\",compressible:!0},\"application/json\":{source:\"iana\",charset:\"UTF-8\",compressible:!0,extensions:[\"json\",\"map\"]},\"application/json-patch+json\":{source:\"iana\",compressible:!0},\"application/json-seq\":{source:\"iana\"},\"application/json5\":{extensions:[\"json5\"]},\"application/jsonml+json\":{source:\"apache\",compressible:!0,extensions:[\"jsonml\"]},\"application/jwk+json\":{source:\"iana\",compressible:!0},\"application/jwk-set+json\":{source:\"iana\",compressible:!0},\"application/jwt\":{source:\"iana\"},\"application/kpml-request+xml\":{source:\"iana\",compressible:!0},\"application/kpml-response+xml\":{source:\"iana\",compressible:!0},\"application/ld+json\":{source:\"iana\",compressible:!0,extensions:[\"jsonld\"]},\"application/lgr+xml\":{source:\"iana\",compressible:!0,extensions:[\"lgr\"]},\"application/link-format\":{source:\"iana\"},\"application/load-control+xml\":{source:\"iana\",compressible:!0},\"application/lost+xml\":{source:\"iana\",compressible:!0,extensions:[\"lostxml\"]},\"application/lostsync+xml\":{source:\"iana\",compressible:!0},\"application/lpf+zip\":{source:\"iana\",compressible:!1},\"application/lxf\":{source:\"iana\"},\"application/mac-binhex40\":{source:\"iana\",extensions:[\"hqx\"]},\"application/mac-compactpro\":{source:\"apache\",extensions:[\"cpt\"]},\"application/macwriteii\":{source:\"iana\"},\"application/mads+xml\":{source:\"iana\",compressible:!0,extensions:[\"mads\"]},\"application/manifest+json\":{source:\"iana\",charset:\"UTF-8\",compressible:!0,extensions:[\"webmanifest\"]},\"application/marc\":{source:\"iana\",extensions:[\"mrc\"]},\"application/marcxml+xml\":{source:\"iana\",compressible:!0,extensions:[\"mrcx\"]},\"application/mathematica\":{source:\"iana\",extensions:[\"ma\",\"nb\",\"mb\"]},\"application/mathml+xml\":{source:\"iana\",compressible:!0,extensions:[\"mathml\"]},\"application/mathml-content+xml\":{source:\"iana\",compressible:!0},\"application/mathml-presentation+xml\":{source:\"iana\",compressible:!0},\"application/mbms-associated-procedure-description+xml\":{source:\"iana\",compressible:!0},\"application/mbms-deregister+xml\":{source:\"iana\",compressible:!0},\"application/mbms-envelope+xml\":{source:\"iana\",compressible:!0},\"application/mbms-msk+xml\":{source:\"iana\",compressible:!0},\"application/mbms-msk-response+xml\":{source:\"iana\",compressible:!0},\"application/mbms-protection-description+xml\":{source:\"iana\",compressible:!0},\"application/mbms-reception-report+xml\":{source:\"iana\",compressible:!0},\"application/mbms-register+xml\":{source:\"iana\",compressible:!0},\"application/mbms-register-response+xml\":{source:\"iana\",compressible:!0},\"application/mbms-schedule+xml\":{source:\"iana\",compressible:!0},\"application/mbms-user-service-description+xml\":{source:\"iana\",compressible:!0},\"application/mbox\":{source:\"iana\",extensions:[\"mbox\"]},\"application/media-policy-dataset+xml\":{source:\"iana\",compressible:!0,extensions:[\"mpf\"]},\"application/media_control+xml\":{source:\"iana\",compressible:!0},\"application/mediaservercontrol+xml\":{source:\"iana\",compressible:!0,extensions:[\"mscml\"]},\"application/merge-patch+json\":{source:\"iana\",compressible:!0},\"application/metalink+xml\":{source:\"apache\",compressible:!0,extensions:[\"metalink\"]},\"application/metalink4+xml\":{source:\"iana\",compressible:!0,extensions:[\"meta4\"]},\"application/mets+xml\":{source:\"iana\",compressible:!0,extensions:[\"mets\"]},\"application/mf4\":{source:\"iana\"},\"application/mikey\":{source:\"iana\"},\"application/mipc\":{source:\"iana\"},\"application/missing-blocks+cbor-seq\":{source:\"iana\"},\"application/mmt-aei+xml\":{source:\"iana\",compressible:!0,extensions:[\"maei\"]},\"application/mmt-usd+xml\":{source:\"iana\",compressible:!0,extensions:[\"musd\"]},\"application/mods+xml\":{source:\"iana\",compressible:!0,extensions:[\"mods\"]},\"application/moss-keys\":{source:\"iana\"},\"application/moss-signature\":{source:\"iana\"},\"application/mosskey-data\":{source:\"iana\"},\"application/mosskey-request\":{source:\"iana\"},\"application/mp21\":{source:\"iana\",extensions:[\"m21\",\"mp21\"]},\"application/mp4\":{source:\"iana\",extensions:[\"mp4s\",\"m4p\"]},\"application/mpeg4-generic\":{source:\"iana\"},\"application/mpeg4-iod\":{source:\"iana\"},\"application/mpeg4-iod-xmt\":{source:\"iana\"},\"application/mrb-consumer+xml\":{source:\"iana\",compressible:!0},\"application/mrb-publish+xml\":{source:\"iana\",compressible:!0},\"application/msc-ivr+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/msc-mixer+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/msword\":{source:\"iana\",compressible:!1,extensions:[\"doc\",\"dot\"]},\"application/mud+json\":{source:\"iana\",compressible:!0},\"application/multipart-core\":{source:\"iana\"},\"application/mxf\":{source:\"iana\",extensions:[\"mxf\"]},\"application/n-quads\":{source:\"iana\",extensions:[\"nq\"]},\"application/n-triples\":{source:\"iana\",extensions:[\"nt\"]},\"application/nasdata\":{source:\"iana\"},\"application/news-checkgroups\":{source:\"iana\",charset:\"US-ASCII\"},\"application/news-groupinfo\":{source:\"iana\",charset:\"US-ASCII\"},\"application/news-transmission\":{source:\"iana\"},\"application/nlsml+xml\":{source:\"iana\",compressible:!0},\"application/node\":{source:\"iana\",extensions:[\"cjs\"]},\"application/nss\":{source:\"iana\"},\"application/oauth-authz-req+jwt\":{source:\"iana\"},\"application/oblivious-dns-message\":{source:\"iana\"},\"application/ocsp-request\":{source:\"iana\"},\"application/ocsp-response\":{source:\"iana\"},\"application/octet-stream\":{source:\"iana\",compressible:!1,extensions:[\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"]},\"application/oda\":{source:\"iana\",extensions:[\"oda\"]},\"application/odm+xml\":{source:\"iana\",compressible:!0},\"application/odx\":{source:\"iana\"},\"application/oebps-package+xml\":{source:\"iana\",compressible:!0,extensions:[\"opf\"]},\"application/ogg\":{source:\"iana\",compressible:!1,extensions:[\"ogx\"]},\"application/omdoc+xml\":{source:\"apache\",compressible:!0,extensions:[\"omdoc\"]},\"application/onenote\":{source:\"apache\",extensions:[\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"]},\"application/opc-nodeset+xml\":{source:\"iana\",compressible:!0},\"application/oscore\":{source:\"iana\"},\"application/oxps\":{source:\"iana\",extensions:[\"oxps\"]},\"application/p21\":{source:\"iana\"},\"application/p21+zip\":{source:\"iana\",compressible:!1},\"application/p2p-overlay+xml\":{source:\"iana\",compressible:!0,extensions:[\"relo\"]},\"application/parityfec\":{source:\"iana\"},\"application/passport\":{source:\"iana\"},\"application/patch-ops-error+xml\":{source:\"iana\",compressible:!0,extensions:[\"xer\"]},\"application/pdf\":{source:\"iana\",compressible:!1,extensions:[\"pdf\"]},\"application/pdx\":{source:\"iana\"},\"application/pem-certificate-chain\":{source:\"iana\"},\"application/pgp-encrypted\":{source:\"iana\",compressible:!1,extensions:[\"pgp\"]},\"application/pgp-keys\":{source:\"iana\",extensions:[\"asc\"]},\"application/pgp-signature\":{source:\"iana\",extensions:[\"asc\",\"sig\"]},\"application/pics-rules\":{source:\"apache\",extensions:[\"prf\"]},\"application/pidf+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/pidf-diff+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/pkcs10\":{source:\"iana\",extensions:[\"p10\"]},\"application/pkcs12\":{source:\"iana\"},\"application/pkcs7-mime\":{source:\"iana\",extensions:[\"p7m\",\"p7c\"]},\"application/pkcs7-signature\":{source:\"iana\",extensions:[\"p7s\"]},\"application/pkcs8\":{source:\"iana\",extensions:[\"p8\"]},\"application/pkcs8-encrypted\":{source:\"iana\"},\"application/pkix-attr-cert\":{source:\"iana\",extensions:[\"ac\"]},\"application/pkix-cert\":{source:\"iana\",extensions:[\"cer\"]},\"application/pkix-crl\":{source:\"iana\",extensions:[\"crl\"]},\"application/pkix-pkipath\":{source:\"iana\",extensions:[\"pkipath\"]},\"application/pkixcmp\":{source:\"iana\",extensions:[\"pki\"]},\"application/pls+xml\":{source:\"iana\",compressible:!0,extensions:[\"pls\"]},\"application/poc-settings+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/postscript\":{source:\"iana\",compressible:!0,extensions:[\"ai\",\"eps\",\"ps\"]},\"application/ppsp-tracker+json\":{source:\"iana\",compressible:!0},\"application/problem+json\":{source:\"iana\",compressible:!0},\"application/problem+xml\":{source:\"iana\",compressible:!0},\"application/provenance+xml\":{source:\"iana\",compressible:!0,extensions:[\"provx\"]},\"application/prs.alvestrand.titrax-sheet\":{source:\"iana\"},\"application/prs.cww\":{source:\"iana\",extensions:[\"cww\"]},\"application/prs.cyn\":{source:\"iana\",charset:\"7-BIT\"},\"application/prs.hpub+zip\":{source:\"iana\",compressible:!1},\"application/prs.nprend\":{source:\"iana\"},\"application/prs.plucker\":{source:\"iana\"},\"application/prs.rdf-xml-crypt\":{source:\"iana\"},\"application/prs.xsf+xml\":{source:\"iana\",compressible:!0},\"application/pskc+xml\":{source:\"iana\",compressible:!0,extensions:[\"pskcxml\"]},\"application/pvd+json\":{source:\"iana\",compressible:!0},\"application/qsig\":{source:\"iana\"},\"application/raml+yaml\":{compressible:!0,extensions:[\"raml\"]},\"application/raptorfec\":{source:\"iana\"},\"application/rdap+json\":{source:\"iana\",compressible:!0},\"application/rdf+xml\":{source:\"iana\",compressible:!0,extensions:[\"rdf\",\"owl\"]},\"application/reginfo+xml\":{source:\"iana\",compressible:!0,extensions:[\"rif\"]},\"application/relax-ng-compact-syntax\":{source:\"iana\",extensions:[\"rnc\"]},\"application/remote-printing\":{source:\"iana\"},\"application/reputon+json\":{source:\"iana\",compressible:!0},\"application/resource-lists+xml\":{source:\"iana\",compressible:!0,extensions:[\"rl\"]},\"application/resource-lists-diff+xml\":{source:\"iana\",compressible:!0,extensions:[\"rld\"]},\"application/rfc+xml\":{source:\"iana\",compressible:!0},\"application/riscos\":{source:\"iana\"},\"application/rlmi+xml\":{source:\"iana\",compressible:!0},\"application/rls-services+xml\":{source:\"iana\",compressible:!0,extensions:[\"rs\"]},\"application/route-apd+xml\":{source:\"iana\",compressible:!0,extensions:[\"rapd\"]},\"application/route-s-tsid+xml\":{source:\"iana\",compressible:!0,extensions:[\"sls\"]},\"application/route-usd+xml\":{source:\"iana\",compressible:!0,extensions:[\"rusd\"]},\"application/rpki-ghostbusters\":{source:\"iana\",extensions:[\"gbr\"]},\"application/rpki-manifest\":{source:\"iana\",extensions:[\"mft\"]},\"application/rpki-publication\":{source:\"iana\"},\"application/rpki-roa\":{source:\"iana\",extensions:[\"roa\"]},\"application/rpki-updown\":{source:\"iana\"},\"application/rsd+xml\":{source:\"apache\",compressible:!0,extensions:[\"rsd\"]},\"application/rss+xml\":{source:\"apache\",compressible:!0,extensions:[\"rss\"]},\"application/rtf\":{source:\"iana\",compressible:!0,extensions:[\"rtf\"]},\"application/rtploopback\":{source:\"iana\"},\"application/rtx\":{source:\"iana\"},\"application/samlassertion+xml\":{source:\"iana\",compressible:!0},\"application/samlmetadata+xml\":{source:\"iana\",compressible:!0},\"application/sarif+json\":{source:\"iana\",compressible:!0},\"application/sarif-external-properties+json\":{source:\"iana\",compressible:!0},\"application/sbe\":{source:\"iana\"},\"application/sbml+xml\":{source:\"iana\",compressible:!0,extensions:[\"sbml\"]},\"application/scaip+xml\":{source:\"iana\",compressible:!0},\"application/scim+json\":{source:\"iana\",compressible:!0},\"application/scvp-cv-request\":{source:\"iana\",extensions:[\"scq\"]},\"application/scvp-cv-response\":{source:\"iana\",extensions:[\"scs\"]},\"application/scvp-vp-request\":{source:\"iana\",extensions:[\"spq\"]},\"application/scvp-vp-response\":{source:\"iana\",extensions:[\"spp\"]},\"application/sdp\":{source:\"iana\",extensions:[\"sdp\"]},\"application/secevent+jwt\":{source:\"iana\"},\"application/senml+cbor\":{source:\"iana\"},\"application/senml+json\":{source:\"iana\",compressible:!0},\"application/senml+xml\":{source:\"iana\",compressible:!0,extensions:[\"senmlx\"]},\"application/senml-etch+cbor\":{source:\"iana\"},\"application/senml-etch+json\":{source:\"iana\",compressible:!0},\"application/senml-exi\":{source:\"iana\"},\"application/sensml+cbor\":{source:\"iana\"},\"application/sensml+json\":{source:\"iana\",compressible:!0},\"application/sensml+xml\":{source:\"iana\",compressible:!0,extensions:[\"sensmlx\"]},\"application/sensml-exi\":{source:\"iana\"},\"application/sep+xml\":{source:\"iana\",compressible:!0},\"application/sep-exi\":{source:\"iana\"},\"application/session-info\":{source:\"iana\"},\"application/set-payment\":{source:\"iana\"},\"application/set-payment-initiation\":{source:\"iana\",extensions:[\"setpay\"]},\"application/set-registration\":{source:\"iana\"},\"application/set-registration-initiation\":{source:\"iana\",extensions:[\"setreg\"]},\"application/sgml\":{source:\"iana\"},\"application/sgml-open-catalog\":{source:\"iana\"},\"application/shf+xml\":{source:\"iana\",compressible:!0,extensions:[\"shf\"]},\"application/sieve\":{source:\"iana\",extensions:[\"siv\",\"sieve\"]},\"application/simple-filter+xml\":{source:\"iana\",compressible:!0},\"application/simple-message-summary\":{source:\"iana\"},\"application/simplesymbolcontainer\":{source:\"iana\"},\"application/sipc\":{source:\"iana\"},\"application/slate\":{source:\"iana\"},\"application/smil\":{source:\"iana\"},\"application/smil+xml\":{source:\"iana\",compressible:!0,extensions:[\"smi\",\"smil\"]},\"application/smpte336m\":{source:\"iana\"},\"application/soap+fastinfoset\":{source:\"iana\"},\"application/soap+xml\":{source:\"iana\",compressible:!0},\"application/sparql-query\":{source:\"iana\",extensions:[\"rq\"]},\"application/sparql-results+xml\":{source:\"iana\",compressible:!0,extensions:[\"srx\"]},\"application/spdx+json\":{source:\"iana\",compressible:!0},\"application/spirits-event+xml\":{source:\"iana\",compressible:!0},\"application/sql\":{source:\"iana\"},\"application/srgs\":{source:\"iana\",extensions:[\"gram\"]},\"application/srgs+xml\":{source:\"iana\",compressible:!0,extensions:[\"grxml\"]},\"application/sru+xml\":{source:\"iana\",compressible:!0,extensions:[\"sru\"]},\"application/ssdl+xml\":{source:\"apache\",compressible:!0,extensions:[\"ssdl\"]},\"application/ssml+xml\":{source:\"iana\",compressible:!0,extensions:[\"ssml\"]},\"application/stix+json\":{source:\"iana\",compressible:!0},\"application/swid+xml\":{source:\"iana\",compressible:!0,extensions:[\"swidtag\"]},\"application/tamp-apex-update\":{source:\"iana\"},\"application/tamp-apex-update-confirm\":{source:\"iana\"},\"application/tamp-community-update\":{source:\"iana\"},\"application/tamp-community-update-confirm\":{source:\"iana\"},\"application/tamp-error\":{source:\"iana\"},\"application/tamp-sequence-adjust\":{source:\"iana\"},\"application/tamp-sequence-adjust-confirm\":{source:\"iana\"},\"application/tamp-status-query\":{source:\"iana\"},\"application/tamp-status-response\":{source:\"iana\"},\"application/tamp-update\":{source:\"iana\"},\"application/tamp-update-confirm\":{source:\"iana\"},\"application/tar\":{compressible:!0},\"application/taxii+json\":{source:\"iana\",compressible:!0},\"application/td+json\":{source:\"iana\",compressible:!0},\"application/tei+xml\":{source:\"iana\",compressible:!0,extensions:[\"tei\",\"teicorpus\"]},\"application/tetra_isi\":{source:\"iana\"},\"application/thraud+xml\":{source:\"iana\",compressible:!0,extensions:[\"tfi\"]},\"application/timestamp-query\":{source:\"iana\"},\"application/timestamp-reply\":{source:\"iana\"},\"application/timestamped-data\":{source:\"iana\",extensions:[\"tsd\"]},\"application/tlsrpt+gzip\":{source:\"iana\"},\"application/tlsrpt+json\":{source:\"iana\",compressible:!0},\"application/tnauthlist\":{source:\"iana\"},\"application/token-introspection+jwt\":{source:\"iana\"},\"application/toml\":{compressible:!0,extensions:[\"toml\"]},\"application/trickle-ice-sdpfrag\":{source:\"iana\"},\"application/trig\":{source:\"iana\",extensions:[\"trig\"]},\"application/ttml+xml\":{source:\"iana\",compressible:!0,extensions:[\"ttml\"]},\"application/tve-trigger\":{source:\"iana\"},\"application/tzif\":{source:\"iana\"},\"application/tzif-leap\":{source:\"iana\"},\"application/ubjson\":{compressible:!1,extensions:[\"ubj\"]},\"application/ulpfec\":{source:\"iana\"},\"application/urc-grpsheet+xml\":{source:\"iana\",compressible:!0},\"application/urc-ressheet+xml\":{source:\"iana\",compressible:!0,extensions:[\"rsheet\"]},\"application/urc-targetdesc+xml\":{source:\"iana\",compressible:!0,extensions:[\"td\"]},\"application/urc-uisocketdesc+xml\":{source:\"iana\",compressible:!0},\"application/vcard+json\":{source:\"iana\",compressible:!0},\"application/vcard+xml\":{source:\"iana\",compressible:!0},\"application/vemmi\":{source:\"iana\"},\"application/vividence.scriptfile\":{source:\"apache\"},\"application/vnd.1000minds.decision-model+xml\":{source:\"iana\",compressible:!0,extensions:[\"1km\"]},\"application/vnd.3gpp-prose+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp-prose-pc3ch+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp-v2x-local-service-information\":{source:\"iana\"},\"application/vnd.3gpp.5gnas\":{source:\"iana\"},\"application/vnd.3gpp.access-transfer-events+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.bsf+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.gmop+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.gtpc\":{source:\"iana\"},\"application/vnd.3gpp.interworking-data\":{source:\"iana\"},\"application/vnd.3gpp.lpp\":{source:\"iana\"},\"application/vnd.3gpp.mc-signalling-ear\":{source:\"iana\"},\"application/vnd.3gpp.mcdata-affiliation-command+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcdata-info+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcdata-payload\":{source:\"iana\"},\"application/vnd.3gpp.mcdata-service-config+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcdata-signalling\":{source:\"iana\"},\"application/vnd.3gpp.mcdata-ue-config+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcdata-user-profile+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcptt-affiliation-command+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcptt-floor-request+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcptt-info+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcptt-location-info+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcptt-mbms-usage-info+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcptt-service-config+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcptt-signed+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcptt-ue-config+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcptt-ue-init-config+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcptt-user-profile+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcvideo-affiliation-command+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcvideo-affiliation-info+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcvideo-info+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcvideo-location-info+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcvideo-mbms-usage-info+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcvideo-service-config+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcvideo-transmission-request+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcvideo-ue-config+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mcvideo-user-profile+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.mid-call+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.ngap\":{source:\"iana\"},\"application/vnd.3gpp.pfcp\":{source:\"iana\"},\"application/vnd.3gpp.pic-bw-large\":{source:\"iana\",extensions:[\"plb\"]},\"application/vnd.3gpp.pic-bw-small\":{source:\"iana\",extensions:[\"psb\"]},\"application/vnd.3gpp.pic-bw-var\":{source:\"iana\",extensions:[\"pvb\"]},\"application/vnd.3gpp.s1ap\":{source:\"iana\"},\"application/vnd.3gpp.sms\":{source:\"iana\"},\"application/vnd.3gpp.sms+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.srvcc-ext+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.srvcc-info+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.state-and-event-info+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp.ussd+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp2.bcmcsinfo+xml\":{source:\"iana\",compressible:!0},\"application/vnd.3gpp2.sms\":{source:\"iana\"},\"application/vnd.3gpp2.tcap\":{source:\"iana\",extensions:[\"tcap\"]},\"application/vnd.3lightssoftware.imagescal\":{source:\"iana\"},\"application/vnd.3m.post-it-notes\":{source:\"iana\",extensions:[\"pwn\"]},\"application/vnd.accpac.simply.aso\":{source:\"iana\",extensions:[\"aso\"]},\"application/vnd.accpac.simply.imp\":{source:\"iana\",extensions:[\"imp\"]},\"application/vnd.acucobol\":{source:\"iana\",extensions:[\"acu\"]},\"application/vnd.acucorp\":{source:\"iana\",extensions:[\"atc\",\"acutc\"]},\"application/vnd.adobe.air-application-installer-package+zip\":{source:\"apache\",compressible:!1,extensions:[\"air\"]},\"application/vnd.adobe.flash.movie\":{source:\"iana\"},\"application/vnd.adobe.formscentral.fcdt\":{source:\"iana\",extensions:[\"fcdt\"]},\"application/vnd.adobe.fxp\":{source:\"iana\",extensions:[\"fxp\",\"fxpl\"]},\"application/vnd.adobe.partial-upload\":{source:\"iana\"},\"application/vnd.adobe.xdp+xml\":{source:\"iana\",compressible:!0,extensions:[\"xdp\"]},\"application/vnd.adobe.xfdf\":{source:\"iana\",extensions:[\"xfdf\"]},\"application/vnd.aether.imp\":{source:\"iana\"},\"application/vnd.afpc.afplinedata\":{source:\"iana\"},\"application/vnd.afpc.afplinedata-pagedef\":{source:\"iana\"},\"application/vnd.afpc.cmoca-cmresource\":{source:\"iana\"},\"application/vnd.afpc.foca-charset\":{source:\"iana\"},\"application/vnd.afpc.foca-codedfont\":{source:\"iana\"},\"application/vnd.afpc.foca-codepage\":{source:\"iana\"},\"application/vnd.afpc.modca\":{source:\"iana\"},\"application/vnd.afpc.modca-cmtable\":{source:\"iana\"},\"application/vnd.afpc.modca-formdef\":{source:\"iana\"},\"application/vnd.afpc.modca-mediummap\":{source:\"iana\"},\"application/vnd.afpc.modca-objectcontainer\":{source:\"iana\"},\"application/vnd.afpc.modca-overlay\":{source:\"iana\"},\"application/vnd.afpc.modca-pagesegment\":{source:\"iana\"},\"application/vnd.age\":{source:\"iana\",extensions:[\"age\"]},\"application/vnd.ah-barcode\":{source:\"iana\"},\"application/vnd.ahead.space\":{source:\"iana\",extensions:[\"ahead\"]},\"application/vnd.airzip.filesecure.azf\":{source:\"iana\",extensions:[\"azf\"]},\"application/vnd.airzip.filesecure.azs\":{source:\"iana\",extensions:[\"azs\"]},\"application/vnd.amadeus+json\":{source:\"iana\",compressible:!0},\"application/vnd.amazon.ebook\":{source:\"apache\",extensions:[\"azw\"]},\"application/vnd.amazon.mobi8-ebook\":{source:\"iana\"},\"application/vnd.americandynamics.acc\":{source:\"iana\",extensions:[\"acc\"]},\"application/vnd.amiga.ami\":{source:\"iana\",extensions:[\"ami\"]},\"application/vnd.amundsen.maze+xml\":{source:\"iana\",compressible:!0},\"application/vnd.android.ota\":{source:\"iana\"},\"application/vnd.android.package-archive\":{source:\"apache\",compressible:!1,extensions:[\"apk\"]},\"application/vnd.anki\":{source:\"iana\"},\"application/vnd.anser-web-certificate-issue-initiation\":{source:\"iana\",extensions:[\"cii\"]},\"application/vnd.anser-web-funds-transfer-initiation\":{source:\"apache\",extensions:[\"fti\"]},\"application/vnd.antix.game-component\":{source:\"iana\",extensions:[\"atx\"]},\"application/vnd.apache.arrow.file\":{source:\"iana\"},\"application/vnd.apache.arrow.stream\":{source:\"iana\"},\"application/vnd.apache.thrift.binary\":{source:\"iana\"},\"application/vnd.apache.thrift.compact\":{source:\"iana\"},\"application/vnd.apache.thrift.json\":{source:\"iana\"},\"application/vnd.api+json\":{source:\"iana\",compressible:!0},\"application/vnd.aplextor.warrp+json\":{source:\"iana\",compressible:!0},\"application/vnd.apothekende.reservation+json\":{source:\"iana\",compressible:!0},\"application/vnd.apple.installer+xml\":{source:\"iana\",compressible:!0,extensions:[\"mpkg\"]},\"application/vnd.apple.keynote\":{source:\"iana\",extensions:[\"key\"]},\"application/vnd.apple.mpegurl\":{source:\"iana\",extensions:[\"m3u8\"]},\"application/vnd.apple.numbers\":{source:\"iana\",extensions:[\"numbers\"]},\"application/vnd.apple.pages\":{source:\"iana\",extensions:[\"pages\"]},\"application/vnd.apple.pkpass\":{compressible:!1,extensions:[\"pkpass\"]},\"application/vnd.arastra.swi\":{source:\"iana\"},\"application/vnd.aristanetworks.swi\":{source:\"iana\",extensions:[\"swi\"]},\"application/vnd.artisan+json\":{source:\"iana\",compressible:!0},\"application/vnd.artsquare\":{source:\"iana\"},\"application/vnd.astraea-software.iota\":{source:\"iana\",extensions:[\"iota\"]},\"application/vnd.audiograph\":{source:\"iana\",extensions:[\"aep\"]},\"application/vnd.autopackage\":{source:\"iana\"},\"application/vnd.avalon+json\":{source:\"iana\",compressible:!0},\"application/vnd.avistar+xml\":{source:\"iana\",compressible:!0},\"application/vnd.balsamiq.bmml+xml\":{source:\"iana\",compressible:!0,extensions:[\"bmml\"]},\"application/vnd.balsamiq.bmpr\":{source:\"iana\"},\"application/vnd.banana-accounting\":{source:\"iana\"},\"application/vnd.bbf.usp.error\":{source:\"iana\"},\"application/vnd.bbf.usp.msg\":{source:\"iana\"},\"application/vnd.bbf.usp.msg+json\":{source:\"iana\",compressible:!0},\"application/vnd.bekitzur-stech+json\":{source:\"iana\",compressible:!0},\"application/vnd.bint.med-content\":{source:\"iana\"},\"application/vnd.biopax.rdf+xml\":{source:\"iana\",compressible:!0},\"application/vnd.blink-idb-value-wrapper\":{source:\"iana\"},\"application/vnd.blueice.multipass\":{source:\"iana\",extensions:[\"mpm\"]},\"application/vnd.bluetooth.ep.oob\":{source:\"iana\"},\"application/vnd.bluetooth.le.oob\":{source:\"iana\"},\"application/vnd.bmi\":{source:\"iana\",extensions:[\"bmi\"]},\"application/vnd.bpf\":{source:\"iana\"},\"application/vnd.bpf3\":{source:\"iana\"},\"application/vnd.businessobjects\":{source:\"iana\",extensions:[\"rep\"]},\"application/vnd.byu.uapi+json\":{source:\"iana\",compressible:!0},\"application/vnd.cab-jscript\":{source:\"iana\"},\"application/vnd.canon-cpdl\":{source:\"iana\"},\"application/vnd.canon-lips\":{source:\"iana\"},\"application/vnd.capasystems-pg+json\":{source:\"iana\",compressible:!0},\"application/vnd.cendio.thinlinc.clientconf\":{source:\"iana\"},\"application/vnd.century-systems.tcp_stream\":{source:\"iana\"},\"application/vnd.chemdraw+xml\":{source:\"iana\",compressible:!0,extensions:[\"cdxml\"]},\"application/vnd.chess-pgn\":{source:\"iana\"},\"application/vnd.chipnuts.karaoke-mmd\":{source:\"iana\",extensions:[\"mmd\"]},\"application/vnd.ciedi\":{source:\"iana\"},\"application/vnd.cinderella\":{source:\"iana\",extensions:[\"cdy\"]},\"application/vnd.cirpack.isdn-ext\":{source:\"iana\"},\"application/vnd.citationstyles.style+xml\":{source:\"iana\",compressible:!0,extensions:[\"csl\"]},\"application/vnd.claymore\":{source:\"iana\",extensions:[\"cla\"]},\"application/vnd.cloanto.rp9\":{source:\"iana\",extensions:[\"rp9\"]},\"application/vnd.clonk.c4group\":{source:\"iana\",extensions:[\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"]},\"application/vnd.cluetrust.cartomobile-config\":{source:\"iana\",extensions:[\"c11amc\"]},\"application/vnd.cluetrust.cartomobile-config-pkg\":{source:\"iana\",extensions:[\"c11amz\"]},\"application/vnd.coffeescript\":{source:\"iana\"},\"application/vnd.collabio.xodocuments.document\":{source:\"iana\"},\"application/vnd.collabio.xodocuments.document-template\":{source:\"iana\"},\"application/vnd.collabio.xodocuments.presentation\":{source:\"iana\"},\"application/vnd.collabio.xodocuments.presentation-template\":{source:\"iana\"},\"application/vnd.collabio.xodocuments.spreadsheet\":{source:\"iana\"},\"application/vnd.collabio.xodocuments.spreadsheet-template\":{source:\"iana\"},\"application/vnd.collection+json\":{source:\"iana\",compressible:!0},\"application/vnd.collection.doc+json\":{source:\"iana\",compressible:!0},\"application/vnd.collection.next+json\":{source:\"iana\",compressible:!0},\"application/vnd.comicbook+zip\":{source:\"iana\",compressible:!1},\"application/vnd.comicbook-rar\":{source:\"iana\"},\"application/vnd.commerce-battelle\":{source:\"iana\"},\"application/vnd.commonspace\":{source:\"iana\",extensions:[\"csp\"]},\"application/vnd.contact.cmsg\":{source:\"iana\",extensions:[\"cdbcmsg\"]},\"application/vnd.coreos.ignition+json\":{source:\"iana\",compressible:!0},\"application/vnd.cosmocaller\":{source:\"iana\",extensions:[\"cmc\"]},\"application/vnd.crick.clicker\":{source:\"iana\",extensions:[\"clkx\"]},\"application/vnd.crick.clicker.keyboard\":{source:\"iana\",extensions:[\"clkk\"]},\"application/vnd.crick.clicker.palette\":{source:\"iana\",extensions:[\"clkp\"]},\"application/vnd.crick.clicker.template\":{source:\"iana\",extensions:[\"clkt\"]},\"application/vnd.crick.clicker.wordbank\":{source:\"iana\",extensions:[\"clkw\"]},\"application/vnd.criticaltools.wbs+xml\":{source:\"iana\",compressible:!0,extensions:[\"wbs\"]},\"application/vnd.cryptii.pipe+json\":{source:\"iana\",compressible:!0},\"application/vnd.crypto-shade-file\":{source:\"iana\"},\"application/vnd.cryptomator.encrypted\":{source:\"iana\"},\"application/vnd.cryptomator.vault\":{source:\"iana\"},\"application/vnd.ctc-posml\":{source:\"iana\",extensions:[\"pml\"]},\"application/vnd.ctct.ws+xml\":{source:\"iana\",compressible:!0},\"application/vnd.cups-pdf\":{source:\"iana\"},\"application/vnd.cups-postscript\":{source:\"iana\"},\"application/vnd.cups-ppd\":{source:\"iana\",extensions:[\"ppd\"]},\"application/vnd.cups-raster\":{source:\"iana\"},\"application/vnd.cups-raw\":{source:\"iana\"},\"application/vnd.curl\":{source:\"iana\"},\"application/vnd.curl.car\":{source:\"apache\",extensions:[\"car\"]},\"application/vnd.curl.pcurl\":{source:\"apache\",extensions:[\"pcurl\"]},\"application/vnd.cyan.dean.root+xml\":{source:\"iana\",compressible:!0},\"application/vnd.cybank\":{source:\"iana\"},\"application/vnd.cyclonedx+json\":{source:\"iana\",compressible:!0},\"application/vnd.cyclonedx+xml\":{source:\"iana\",compressible:!0},\"application/vnd.d2l.coursepackage1p0+zip\":{source:\"iana\",compressible:!1},\"application/vnd.d3m-dataset\":{source:\"iana\"},\"application/vnd.d3m-problem\":{source:\"iana\"},\"application/vnd.dart\":{source:\"iana\",compressible:!0,extensions:[\"dart\"]},\"application/vnd.data-vision.rdz\":{source:\"iana\",extensions:[\"rdz\"]},\"application/vnd.datapackage+json\":{source:\"iana\",compressible:!0},\"application/vnd.dataresource+json\":{source:\"iana\",compressible:!0},\"application/vnd.dbf\":{source:\"iana\",extensions:[\"dbf\"]},\"application/vnd.debian.binary-package\":{source:\"iana\"},\"application/vnd.dece.data\":{source:\"iana\",extensions:[\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"]},\"application/vnd.dece.ttml+xml\":{source:\"iana\",compressible:!0,extensions:[\"uvt\",\"uvvt\"]},\"application/vnd.dece.unspecified\":{source:\"iana\",extensions:[\"uvx\",\"uvvx\"]},\"application/vnd.dece.zip\":{source:\"iana\",extensions:[\"uvz\",\"uvvz\"]},\"application/vnd.denovo.fcselayout-link\":{source:\"iana\",extensions:[\"fe_launch\"]},\"application/vnd.desmume.movie\":{source:\"iana\"},\"application/vnd.dir-bi.plate-dl-nosuffix\":{source:\"iana\"},\"application/vnd.dm.delegation+xml\":{source:\"iana\",compressible:!0},\"application/vnd.dna\":{source:\"iana\",extensions:[\"dna\"]},\"application/vnd.document+json\":{source:\"iana\",compressible:!0},\"application/vnd.dolby.mlp\":{source:\"apache\",extensions:[\"mlp\"]},\"application/vnd.dolby.mobile.1\":{source:\"iana\"},\"application/vnd.dolby.mobile.2\":{source:\"iana\"},\"application/vnd.doremir.scorecloud-binary-document\":{source:\"iana\"},\"application/vnd.dpgraph\":{source:\"iana\",extensions:[\"dpg\"]},\"application/vnd.dreamfactory\":{source:\"iana\",extensions:[\"dfac\"]},\"application/vnd.drive+json\":{source:\"iana\",compressible:!0},\"application/vnd.ds-keypoint\":{source:\"apache\",extensions:[\"kpxx\"]},\"application/vnd.dtg.local\":{source:\"iana\"},\"application/vnd.dtg.local.flash\":{source:\"iana\"},\"application/vnd.dtg.local.html\":{source:\"iana\"},\"application/vnd.dvb.ait\":{source:\"iana\",extensions:[\"ait\"]},\"application/vnd.dvb.dvbisl+xml\":{source:\"iana\",compressible:!0},\"application/vnd.dvb.dvbj\":{source:\"iana\"},\"application/vnd.dvb.esgcontainer\":{source:\"iana\"},\"application/vnd.dvb.ipdcdftnotifaccess\":{source:\"iana\"},\"application/vnd.dvb.ipdcesgaccess\":{source:\"iana\"},\"application/vnd.dvb.ipdcesgaccess2\":{source:\"iana\"},\"application/vnd.dvb.ipdcesgpdd\":{source:\"iana\"},\"application/vnd.dvb.ipdcroaming\":{source:\"iana\"},\"application/vnd.dvb.iptv.alfec-base\":{source:\"iana\"},\"application/vnd.dvb.iptv.alfec-enhancement\":{source:\"iana\"},\"application/vnd.dvb.notif-aggregate-root+xml\":{source:\"iana\",compressible:!0},\"application/vnd.dvb.notif-container+xml\":{source:\"iana\",compressible:!0},\"application/vnd.dvb.notif-generic+xml\":{source:\"iana\",compressible:!0},\"application/vnd.dvb.notif-ia-msglist+xml\":{source:\"iana\",compressible:!0},\"application/vnd.dvb.notif-ia-registration-request+xml\":{source:\"iana\",compressible:!0},\"application/vnd.dvb.notif-ia-registration-response+xml\":{source:\"iana\",compressible:!0},\"application/vnd.dvb.notif-init+xml\":{source:\"iana\",compressible:!0},\"application/vnd.dvb.pfr\":{source:\"iana\"},\"application/vnd.dvb.service\":{source:\"iana\",extensions:[\"svc\"]},\"application/vnd.dxr\":{source:\"iana\"},\"application/vnd.dynageo\":{source:\"iana\",extensions:[\"geo\"]},\"application/vnd.dzr\":{source:\"iana\"},\"application/vnd.easykaraoke.cdgdownload\":{source:\"iana\"},\"application/vnd.ecdis-update\":{source:\"iana\"},\"application/vnd.ecip.rlp\":{source:\"iana\"},\"application/vnd.eclipse.ditto+json\":{source:\"iana\",compressible:!0},\"application/vnd.ecowin.chart\":{source:\"iana\",extensions:[\"mag\"]},\"application/vnd.ecowin.filerequest\":{source:\"iana\"},\"application/vnd.ecowin.fileupdate\":{source:\"iana\"},\"application/vnd.ecowin.series\":{source:\"iana\"},\"application/vnd.ecowin.seriesrequest\":{source:\"iana\"},\"application/vnd.ecowin.seriesupdate\":{source:\"iana\"},\"application/vnd.efi.img\":{source:\"iana\"},\"application/vnd.efi.iso\":{source:\"iana\"},\"application/vnd.emclient.accessrequest+xml\":{source:\"iana\",compressible:!0},\"application/vnd.enliven\":{source:\"iana\",extensions:[\"nml\"]},\"application/vnd.enphase.envoy\":{source:\"iana\"},\"application/vnd.eprints.data+xml\":{source:\"iana\",compressible:!0},\"application/vnd.epson.esf\":{source:\"iana\",extensions:[\"esf\"]},\"application/vnd.epson.msf\":{source:\"iana\",extensions:[\"msf\"]},\"application/vnd.epson.quickanime\":{source:\"iana\",extensions:[\"qam\"]},\"application/vnd.epson.salt\":{source:\"iana\",extensions:[\"slt\"]},\"application/vnd.epson.ssf\":{source:\"iana\",extensions:[\"ssf\"]},\"application/vnd.ericsson.quickcall\":{source:\"iana\"},\"application/vnd.espass-espass+zip\":{source:\"iana\",compressible:!1},\"application/vnd.eszigno3+xml\":{source:\"iana\",compressible:!0,extensions:[\"es3\",\"et3\"]},\"application/vnd.etsi.aoc+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.asic-e+zip\":{source:\"iana\",compressible:!1},\"application/vnd.etsi.asic-s+zip\":{source:\"iana\",compressible:!1},\"application/vnd.etsi.cug+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.iptvcommand+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.iptvdiscovery+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.iptvprofile+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.iptvsad-bc+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.iptvsad-cod+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.iptvsad-npvr+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.iptvservice+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.iptvsync+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.iptvueprofile+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.mcid+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.mheg5\":{source:\"iana\"},\"application/vnd.etsi.overload-control-policy-dataset+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.pstn+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.sci+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.simservs+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.timestamp-token\":{source:\"iana\"},\"application/vnd.etsi.tsl+xml\":{source:\"iana\",compressible:!0},\"application/vnd.etsi.tsl.der\":{source:\"iana\"},\"application/vnd.eu.kasparian.car+json\":{source:\"iana\",compressible:!0},\"application/vnd.eudora.data\":{source:\"iana\"},\"application/vnd.evolv.ecig.profile\":{source:\"iana\"},\"application/vnd.evolv.ecig.settings\":{source:\"iana\"},\"application/vnd.evolv.ecig.theme\":{source:\"iana\"},\"application/vnd.exstream-empower+zip\":{source:\"iana\",compressible:!1},\"application/vnd.exstream-package\":{source:\"iana\"},\"application/vnd.ezpix-album\":{source:\"iana\",extensions:[\"ez2\"]},\"application/vnd.ezpix-package\":{source:\"iana\",extensions:[\"ez3\"]},\"application/vnd.f-secure.mobile\":{source:\"iana\"},\"application/vnd.familysearch.gedcom+zip\":{source:\"iana\",compressible:!1},\"application/vnd.fastcopy-disk-image\":{source:\"iana\"},\"application/vnd.fdf\":{source:\"iana\",extensions:[\"fdf\"]},\"application/vnd.fdsn.mseed\":{source:\"iana\",extensions:[\"mseed\"]},\"application/vnd.fdsn.seed\":{source:\"iana\",extensions:[\"seed\",\"dataless\"]},\"application/vnd.ffsns\":{source:\"iana\"},\"application/vnd.ficlab.flb+zip\":{source:\"iana\",compressible:!1},\"application/vnd.filmit.zfc\":{source:\"iana\"},\"application/vnd.fints\":{source:\"iana\"},\"application/vnd.firemonkeys.cloudcell\":{source:\"iana\"},\"application/vnd.flographit\":{source:\"iana\",extensions:[\"gph\"]},\"application/vnd.fluxtime.clip\":{source:\"iana\",extensions:[\"ftc\"]},\"application/vnd.font-fontforge-sfd\":{source:\"iana\"},\"application/vnd.framemaker\":{source:\"iana\",extensions:[\"fm\",\"frame\",\"maker\",\"book\"]},\"application/vnd.frogans.fnc\":{source:\"iana\",extensions:[\"fnc\"]},\"application/vnd.frogans.ltf\":{source:\"iana\",extensions:[\"ltf\"]},\"application/vnd.fsc.weblaunch\":{source:\"iana\",extensions:[\"fsc\"]},\"application/vnd.fujifilm.fb.docuworks\":{source:\"iana\"},\"application/vnd.fujifilm.fb.docuworks.binder\":{source:\"iana\"},\"application/vnd.fujifilm.fb.docuworks.container\":{source:\"iana\"},\"application/vnd.fujifilm.fb.jfi+xml\":{source:\"iana\",compressible:!0},\"application/vnd.fujitsu.oasys\":{source:\"iana\",extensions:[\"oas\"]},\"application/vnd.fujitsu.oasys2\":{source:\"iana\",extensions:[\"oa2\"]},\"application/vnd.fujitsu.oasys3\":{source:\"iana\",extensions:[\"oa3\"]},\"application/vnd.fujitsu.oasysgp\":{source:\"iana\",extensions:[\"fg5\"]},\"application/vnd.fujitsu.oasysprs\":{source:\"iana\",extensions:[\"bh2\"]},\"application/vnd.fujixerox.art-ex\":{source:\"iana\"},\"application/vnd.fujixerox.art4\":{source:\"iana\"},\"application/vnd.fujixerox.ddd\":{source:\"iana\",extensions:[\"ddd\"]},\"application/vnd.fujixerox.docuworks\":{source:\"iana\",extensions:[\"xdw\"]},\"application/vnd.fujixerox.docuworks.binder\":{source:\"iana\",extensions:[\"xbd\"]},\"application/vnd.fujixerox.docuworks.container\":{source:\"iana\"},\"application/vnd.fujixerox.hbpl\":{source:\"iana\"},\"application/vnd.fut-misnet\":{source:\"iana\"},\"application/vnd.futoin+cbor\":{source:\"iana\"},\"application/vnd.futoin+json\":{source:\"iana\",compressible:!0},\"application/vnd.fuzzysheet\":{source:\"iana\",extensions:[\"fzs\"]},\"application/vnd.genomatix.tuxedo\":{source:\"iana\",extensions:[\"txd\"]},\"application/vnd.gentics.grd+json\":{source:\"iana\",compressible:!0},\"application/vnd.geo+json\":{source:\"iana\",compressible:!0},\"application/vnd.geocube+xml\":{source:\"iana\",compressible:!0},\"application/vnd.geogebra.file\":{source:\"iana\",extensions:[\"ggb\"]},\"application/vnd.geogebra.slides\":{source:\"iana\"},\"application/vnd.geogebra.tool\":{source:\"iana\",extensions:[\"ggt\"]},\"application/vnd.geometry-explorer\":{source:\"iana\",extensions:[\"gex\",\"gre\"]},\"application/vnd.geonext\":{source:\"iana\",extensions:[\"gxt\"]},\"application/vnd.geoplan\":{source:\"iana\",extensions:[\"g2w\"]},\"application/vnd.geospace\":{source:\"iana\",extensions:[\"g3w\"]},\"application/vnd.gerber\":{source:\"iana\"},\"application/vnd.globalplatform.card-content-mgt\":{source:\"iana\"},\"application/vnd.globalplatform.card-content-mgt-response\":{source:\"iana\"},\"application/vnd.gmx\":{source:\"iana\",extensions:[\"gmx\"]},\"application/vnd.google-apps.document\":{compressible:!1,extensions:[\"gdoc\"]},\"application/vnd.google-apps.presentation\":{compressible:!1,extensions:[\"gslides\"]},\"application/vnd.google-apps.spreadsheet\":{compressible:!1,extensions:[\"gsheet\"]},\"application/vnd.google-earth.kml+xml\":{source:\"iana\",compressible:!0,extensions:[\"kml\"]},\"application/vnd.google-earth.kmz\":{source:\"iana\",compressible:!1,extensions:[\"kmz\"]},\"application/vnd.gov.sk.e-form+xml\":{source:\"iana\",compressible:!0},\"application/vnd.gov.sk.e-form+zip\":{source:\"iana\",compressible:!1},\"application/vnd.gov.sk.xmldatacontainer+xml\":{source:\"iana\",compressible:!0},\"application/vnd.grafeq\":{source:\"iana\",extensions:[\"gqf\",\"gqs\"]},\"application/vnd.gridmp\":{source:\"iana\"},\"application/vnd.groove-account\":{source:\"iana\",extensions:[\"gac\"]},\"application/vnd.groove-help\":{source:\"iana\",extensions:[\"ghf\"]},\"application/vnd.groove-identity-message\":{source:\"iana\",extensions:[\"gim\"]},\"application/vnd.groove-injector\":{source:\"iana\",extensions:[\"grv\"]},\"application/vnd.groove-tool-message\":{source:\"iana\",extensions:[\"gtm\"]},\"application/vnd.groove-tool-template\":{source:\"iana\",extensions:[\"tpl\"]},\"application/vnd.groove-vcard\":{source:\"iana\",extensions:[\"vcg\"]},\"application/vnd.hal+json\":{source:\"iana\",compressible:!0},\"application/vnd.hal+xml\":{source:\"iana\",compressible:!0,extensions:[\"hal\"]},\"application/vnd.handheld-entertainment+xml\":{source:\"iana\",compressible:!0,extensions:[\"zmm\"]},\"application/vnd.hbci\":{source:\"iana\",extensions:[\"hbci\"]},\"application/vnd.hc+json\":{source:\"iana\",compressible:!0},\"application/vnd.hcl-bireports\":{source:\"iana\"},\"application/vnd.hdt\":{source:\"iana\"},\"application/vnd.heroku+json\":{source:\"iana\",compressible:!0},\"application/vnd.hhe.lesson-player\":{source:\"iana\",extensions:[\"les\"]},\"application/vnd.hl7cda+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/vnd.hl7v2+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/vnd.hp-hpgl\":{source:\"iana\",extensions:[\"hpgl\"]},\"application/vnd.hp-hpid\":{source:\"iana\",extensions:[\"hpid\"]},\"application/vnd.hp-hps\":{source:\"iana\",extensions:[\"hps\"]},\"application/vnd.hp-jlyt\":{source:\"iana\",extensions:[\"jlt\"]},\"application/vnd.hp-pcl\":{source:\"iana\",extensions:[\"pcl\"]},\"application/vnd.hp-pclxl\":{source:\"iana\",extensions:[\"pclxl\"]},\"application/vnd.httphone\":{source:\"iana\"},\"application/vnd.hydrostatix.sof-data\":{source:\"iana\",extensions:[\"sfd-hdstx\"]},\"application/vnd.hyper+json\":{source:\"iana\",compressible:!0},\"application/vnd.hyper-item+json\":{source:\"iana\",compressible:!0},\"application/vnd.hyperdrive+json\":{source:\"iana\",compressible:!0},\"application/vnd.hzn-3d-crossword\":{source:\"iana\"},\"application/vnd.ibm.afplinedata\":{source:\"iana\"},\"application/vnd.ibm.electronic-media\":{source:\"iana\"},\"application/vnd.ibm.minipay\":{source:\"iana\",extensions:[\"mpy\"]},\"application/vnd.ibm.modcap\":{source:\"iana\",extensions:[\"afp\",\"listafp\",\"list3820\"]},\"application/vnd.ibm.rights-management\":{source:\"iana\",extensions:[\"irm\"]},\"application/vnd.ibm.secure-container\":{source:\"iana\",extensions:[\"sc\"]},\"application/vnd.iccprofile\":{source:\"iana\",extensions:[\"icc\",\"icm\"]},\"application/vnd.ieee.1905\":{source:\"iana\"},\"application/vnd.igloader\":{source:\"iana\",extensions:[\"igl\"]},\"application/vnd.imagemeter.folder+zip\":{source:\"iana\",compressible:!1},\"application/vnd.imagemeter.image+zip\":{source:\"iana\",compressible:!1},\"application/vnd.immervision-ivp\":{source:\"iana\",extensions:[\"ivp\"]},\"application/vnd.immervision-ivu\":{source:\"iana\",extensions:[\"ivu\"]},\"application/vnd.ims.imsccv1p1\":{source:\"iana\"},\"application/vnd.ims.imsccv1p2\":{source:\"iana\"},\"application/vnd.ims.imsccv1p3\":{source:\"iana\"},\"application/vnd.ims.lis.v2.result+json\":{source:\"iana\",compressible:!0},\"application/vnd.ims.lti.v2.toolconsumerprofile+json\":{source:\"iana\",compressible:!0},\"application/vnd.ims.lti.v2.toolproxy+json\":{source:\"iana\",compressible:!0},\"application/vnd.ims.lti.v2.toolproxy.id+json\":{source:\"iana\",compressible:!0},\"application/vnd.ims.lti.v2.toolsettings+json\":{source:\"iana\",compressible:!0},\"application/vnd.ims.lti.v2.toolsettings.simple+json\":{source:\"iana\",compressible:!0},\"application/vnd.informedcontrol.rms+xml\":{source:\"iana\",compressible:!0},\"application/vnd.informix-visionary\":{source:\"iana\"},\"application/vnd.infotech.project\":{source:\"iana\"},\"application/vnd.infotech.project+xml\":{source:\"iana\",compressible:!0},\"application/vnd.innopath.wamp.notification\":{source:\"iana\"},\"application/vnd.insors.igm\":{source:\"iana\",extensions:[\"igm\"]},\"application/vnd.intercon.formnet\":{source:\"iana\",extensions:[\"xpw\",\"xpx\"]},\"application/vnd.intergeo\":{source:\"iana\",extensions:[\"i2g\"]},\"application/vnd.intertrust.digibox\":{source:\"iana\"},\"application/vnd.intertrust.nncp\":{source:\"iana\"},\"application/vnd.intu.qbo\":{source:\"iana\",extensions:[\"qbo\"]},\"application/vnd.intu.qfx\":{source:\"iana\",extensions:[\"qfx\"]},\"application/vnd.iptc.g2.catalogitem+xml\":{source:\"iana\",compressible:!0},\"application/vnd.iptc.g2.conceptitem+xml\":{source:\"iana\",compressible:!0},\"application/vnd.iptc.g2.knowledgeitem+xml\":{source:\"iana\",compressible:!0},\"application/vnd.iptc.g2.newsitem+xml\":{source:\"iana\",compressible:!0},\"application/vnd.iptc.g2.newsmessage+xml\":{source:\"iana\",compressible:!0},\"application/vnd.iptc.g2.packageitem+xml\":{source:\"iana\",compressible:!0},\"application/vnd.iptc.g2.planningitem+xml\":{source:\"iana\",compressible:!0},\"application/vnd.ipunplugged.rcprofile\":{source:\"iana\",extensions:[\"rcprofile\"]},\"application/vnd.irepository.package+xml\":{source:\"iana\",compressible:!0,extensions:[\"irp\"]},\"application/vnd.is-xpr\":{source:\"iana\",extensions:[\"xpr\"]},\"application/vnd.isac.fcs\":{source:\"iana\",extensions:[\"fcs\"]},\"application/vnd.iso11783-10+zip\":{source:\"iana\",compressible:!1},\"application/vnd.jam\":{source:\"iana\",extensions:[\"jam\"]},\"application/vnd.japannet-directory-service\":{source:\"iana\"},\"application/vnd.japannet-jpnstore-wakeup\":{source:\"iana\"},\"application/vnd.japannet-payment-wakeup\":{source:\"iana\"},\"application/vnd.japannet-registration\":{source:\"iana\"},\"application/vnd.japannet-registration-wakeup\":{source:\"iana\"},\"application/vnd.japannet-setstore-wakeup\":{source:\"iana\"},\"application/vnd.japannet-verification\":{source:\"iana\"},\"application/vnd.japannet-verification-wakeup\":{source:\"iana\"},\"application/vnd.jcp.javame.midlet-rms\":{source:\"iana\",extensions:[\"rms\"]},\"application/vnd.jisp\":{source:\"iana\",extensions:[\"jisp\"]},\"application/vnd.joost.joda-archive\":{source:\"iana\",extensions:[\"joda\"]},\"application/vnd.jsk.isdn-ngn\":{source:\"iana\"},\"application/vnd.kahootz\":{source:\"iana\",extensions:[\"ktz\",\"ktr\"]},\"application/vnd.kde.karbon\":{source:\"iana\",extensions:[\"karbon\"]},\"application/vnd.kde.kchart\":{source:\"iana\",extensions:[\"chrt\"]},\"application/vnd.kde.kformula\":{source:\"iana\",extensions:[\"kfo\"]},\"application/vnd.kde.kivio\":{source:\"iana\",extensions:[\"flw\"]},\"application/vnd.kde.kontour\":{source:\"iana\",extensions:[\"kon\"]},\"application/vnd.kde.kpresenter\":{source:\"iana\",extensions:[\"kpr\",\"kpt\"]},\"application/vnd.kde.kspread\":{source:\"iana\",extensions:[\"ksp\"]},\"application/vnd.kde.kword\":{source:\"iana\",extensions:[\"kwd\",\"kwt\"]},\"application/vnd.kenameaapp\":{source:\"iana\",extensions:[\"htke\"]},\"application/vnd.kidspiration\":{source:\"iana\",extensions:[\"kia\"]},\"application/vnd.kinar\":{source:\"iana\",extensions:[\"kne\",\"knp\"]},\"application/vnd.koan\":{source:\"iana\",extensions:[\"skp\",\"skd\",\"skt\",\"skm\"]},\"application/vnd.kodak-descriptor\":{source:\"iana\",extensions:[\"sse\"]},\"application/vnd.las\":{source:\"iana\"},\"application/vnd.las.las+json\":{source:\"iana\",compressible:!0},\"application/vnd.las.las+xml\":{source:\"iana\",compressible:!0,extensions:[\"lasxml\"]},\"application/vnd.laszip\":{source:\"iana\"},\"application/vnd.leap+json\":{source:\"iana\",compressible:!0},\"application/vnd.liberty-request+xml\":{source:\"iana\",compressible:!0},\"application/vnd.llamagraphics.life-balance.desktop\":{source:\"iana\",extensions:[\"lbd\"]},\"application/vnd.llamagraphics.life-balance.exchange+xml\":{source:\"iana\",compressible:!0,extensions:[\"lbe\"]},\"application/vnd.logipipe.circuit+zip\":{source:\"iana\",compressible:!1},\"application/vnd.loom\":{source:\"iana\"},\"application/vnd.lotus-1-2-3\":{source:\"iana\",extensions:[\"123\"]},\"application/vnd.lotus-approach\":{source:\"iana\",extensions:[\"apr\"]},\"application/vnd.lotus-freelance\":{source:\"iana\",extensions:[\"pre\"]},\"application/vnd.lotus-notes\":{source:\"iana\",extensions:[\"nsf\"]},\"application/vnd.lotus-organizer\":{source:\"iana\",extensions:[\"org\"]},\"application/vnd.lotus-screencam\":{source:\"iana\",extensions:[\"scm\"]},\"application/vnd.lotus-wordpro\":{source:\"iana\",extensions:[\"lwp\"]},\"application/vnd.macports.portpkg\":{source:\"iana\",extensions:[\"portpkg\"]},\"application/vnd.mapbox-vector-tile\":{source:\"iana\",extensions:[\"mvt\"]},\"application/vnd.marlin.drm.actiontoken+xml\":{source:\"iana\",compressible:!0},\"application/vnd.marlin.drm.conftoken+xml\":{source:\"iana\",compressible:!0},\"application/vnd.marlin.drm.license+xml\":{source:\"iana\",compressible:!0},\"application/vnd.marlin.drm.mdcf\":{source:\"iana\"},\"application/vnd.mason+json\":{source:\"iana\",compressible:!0},\"application/vnd.maxar.archive.3tz+zip\":{source:\"iana\",compressible:!1},\"application/vnd.maxmind.maxmind-db\":{source:\"iana\"},\"application/vnd.mcd\":{source:\"iana\",extensions:[\"mcd\"]},\"application/vnd.medcalcdata\":{source:\"iana\",extensions:[\"mc1\"]},\"application/vnd.mediastation.cdkey\":{source:\"iana\",extensions:[\"cdkey\"]},\"application/vnd.meridian-slingshot\":{source:\"iana\"},\"application/vnd.mfer\":{source:\"iana\",extensions:[\"mwf\"]},\"application/vnd.mfmp\":{source:\"iana\",extensions:[\"mfm\"]},\"application/vnd.micro+json\":{source:\"iana\",compressible:!0},\"application/vnd.micrografx.flo\":{source:\"iana\",extensions:[\"flo\"]},\"application/vnd.micrografx.igx\":{source:\"iana\",extensions:[\"igx\"]},\"application/vnd.microsoft.portable-executable\":{source:\"iana\"},\"application/vnd.microsoft.windows.thumbnail-cache\":{source:\"iana\"},\"application/vnd.miele+json\":{source:\"iana\",compressible:!0},\"application/vnd.mif\":{source:\"iana\",extensions:[\"mif\"]},\"application/vnd.minisoft-hp3000-save\":{source:\"iana\"},\"application/vnd.mitsubishi.misty-guard.trustweb\":{source:\"iana\"},\"application/vnd.mobius.daf\":{source:\"iana\",extensions:[\"daf\"]},\"application/vnd.mobius.dis\":{source:\"iana\",extensions:[\"dis\"]},\"application/vnd.mobius.mbk\":{source:\"iana\",extensions:[\"mbk\"]},\"application/vnd.mobius.mqy\":{source:\"iana\",extensions:[\"mqy\"]},\"application/vnd.mobius.msl\":{source:\"iana\",extensions:[\"msl\"]},\"application/vnd.mobius.plc\":{source:\"iana\",extensions:[\"plc\"]},\"application/vnd.mobius.txf\":{source:\"iana\",extensions:[\"txf\"]},\"application/vnd.mophun.application\":{source:\"iana\",extensions:[\"mpn\"]},\"application/vnd.mophun.certificate\":{source:\"iana\",extensions:[\"mpc\"]},\"application/vnd.motorola.flexsuite\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.adsi\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.fis\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.gotap\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.kmr\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.ttc\":{source:\"iana\"},\"application/vnd.motorola.flexsuite.wem\":{source:\"iana\"},\"application/vnd.motorola.iprm\":{source:\"iana\"},\"application/vnd.mozilla.xul+xml\":{source:\"iana\",compressible:!0,extensions:[\"xul\"]},\"application/vnd.ms-3mfdocument\":{source:\"iana\"},\"application/vnd.ms-artgalry\":{source:\"iana\",extensions:[\"cil\"]},\"application/vnd.ms-asf\":{source:\"iana\"},\"application/vnd.ms-cab-compressed\":{source:\"iana\",extensions:[\"cab\"]},\"application/vnd.ms-color.iccprofile\":{source:\"apache\"},\"application/vnd.ms-excel\":{source:\"iana\",compressible:!1,extensions:[\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"]},\"application/vnd.ms-excel.addin.macroenabled.12\":{source:\"iana\",extensions:[\"xlam\"]},\"application/vnd.ms-excel.sheet.binary.macroenabled.12\":{source:\"iana\",extensions:[\"xlsb\"]},\"application/vnd.ms-excel.sheet.macroenabled.12\":{source:\"iana\",extensions:[\"xlsm\"]},\"application/vnd.ms-excel.template.macroenabled.12\":{source:\"iana\",extensions:[\"xltm\"]},\"application/vnd.ms-fontobject\":{source:\"iana\",compressible:!0,extensions:[\"eot\"]},\"application/vnd.ms-htmlhelp\":{source:\"iana\",extensions:[\"chm\"]},\"application/vnd.ms-ims\":{source:\"iana\",extensions:[\"ims\"]},\"application/vnd.ms-lrm\":{source:\"iana\",extensions:[\"lrm\"]},\"application/vnd.ms-office.activex+xml\":{source:\"iana\",compressible:!0},\"application/vnd.ms-officetheme\":{source:\"iana\",extensions:[\"thmx\"]},\"application/vnd.ms-opentype\":{source:\"apache\",compressible:!0},\"application/vnd.ms-outlook\":{compressible:!1,extensions:[\"msg\"]},\"application/vnd.ms-package.obfuscated-opentype\":{source:\"apache\"},\"application/vnd.ms-pki.seccat\":{source:\"apache\",extensions:[\"cat\"]},\"application/vnd.ms-pki.stl\":{source:\"apache\",extensions:[\"stl\"]},\"application/vnd.ms-playready.initiator+xml\":{source:\"iana\",compressible:!0},\"application/vnd.ms-powerpoint\":{source:\"iana\",compressible:!1,extensions:[\"ppt\",\"pps\",\"pot\"]},\"application/vnd.ms-powerpoint.addin.macroenabled.12\":{source:\"iana\",extensions:[\"ppam\"]},\"application/vnd.ms-powerpoint.presentation.macroenabled.12\":{source:\"iana\",extensions:[\"pptm\"]},\"application/vnd.ms-powerpoint.slide.macroenabled.12\":{source:\"iana\",extensions:[\"sldm\"]},\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\":{source:\"iana\",extensions:[\"ppsm\"]},\"application/vnd.ms-powerpoint.template.macroenabled.12\":{source:\"iana\",extensions:[\"potm\"]},\"application/vnd.ms-printdevicecapabilities+xml\":{source:\"iana\",compressible:!0},\"application/vnd.ms-printing.printticket+xml\":{source:\"apache\",compressible:!0},\"application/vnd.ms-printschematicket+xml\":{source:\"iana\",compressible:!0},\"application/vnd.ms-project\":{source:\"iana\",extensions:[\"mpp\",\"mpt\"]},\"application/vnd.ms-tnef\":{source:\"iana\"},\"application/vnd.ms-windows.devicepairing\":{source:\"iana\"},\"application/vnd.ms-windows.nwprinting.oob\":{source:\"iana\"},\"application/vnd.ms-windows.printerpairing\":{source:\"iana\"},\"application/vnd.ms-windows.wsd.oob\":{source:\"iana\"},\"application/vnd.ms-wmdrm.lic-chlg-req\":{source:\"iana\"},\"application/vnd.ms-wmdrm.lic-resp\":{source:\"iana\"},\"application/vnd.ms-wmdrm.meter-chlg-req\":{source:\"iana\"},\"application/vnd.ms-wmdrm.meter-resp\":{source:\"iana\"},\"application/vnd.ms-word.document.macroenabled.12\":{source:\"iana\",extensions:[\"docm\"]},\"application/vnd.ms-word.template.macroenabled.12\":{source:\"iana\",extensions:[\"dotm\"]},\"application/vnd.ms-works\":{source:\"iana\",extensions:[\"wps\",\"wks\",\"wcm\",\"wdb\"]},\"application/vnd.ms-wpl\":{source:\"iana\",extensions:[\"wpl\"]},\"application/vnd.ms-xpsdocument\":{source:\"iana\",compressible:!1,extensions:[\"xps\"]},\"application/vnd.msa-disk-image\":{source:\"iana\"},\"application/vnd.mseq\":{source:\"iana\",extensions:[\"mseq\"]},\"application/vnd.msign\":{source:\"iana\"},\"application/vnd.multiad.creator\":{source:\"iana\"},\"application/vnd.multiad.creator.cif\":{source:\"iana\"},\"application/vnd.music-niff\":{source:\"iana\"},\"application/vnd.musician\":{source:\"iana\",extensions:[\"mus\"]},\"application/vnd.muvee.style\":{source:\"iana\",extensions:[\"msty\"]},\"application/vnd.mynfc\":{source:\"iana\",extensions:[\"taglet\"]},\"application/vnd.nacamar.ybrid+json\":{source:\"iana\",compressible:!0},\"application/vnd.ncd.control\":{source:\"iana\"},\"application/vnd.ncd.reference\":{source:\"iana\"},\"application/vnd.nearst.inv+json\":{source:\"iana\",compressible:!0},\"application/vnd.nebumind.line\":{source:\"iana\"},\"application/vnd.nervana\":{source:\"iana\"},\"application/vnd.netfpx\":{source:\"iana\"},\"application/vnd.neurolanguage.nlu\":{source:\"iana\",extensions:[\"nlu\"]},\"application/vnd.nimn\":{source:\"iana\"},\"application/vnd.nintendo.nitro.rom\":{source:\"iana\"},\"application/vnd.nintendo.snes.rom\":{source:\"iana\"},\"application/vnd.nitf\":{source:\"iana\",extensions:[\"ntf\",\"nitf\"]},\"application/vnd.noblenet-directory\":{source:\"iana\",extensions:[\"nnd\"]},\"application/vnd.noblenet-sealer\":{source:\"iana\",extensions:[\"nns\"]},\"application/vnd.noblenet-web\":{source:\"iana\",extensions:[\"nnw\"]},\"application/vnd.nokia.catalogs\":{source:\"iana\"},\"application/vnd.nokia.conml+wbxml\":{source:\"iana\"},\"application/vnd.nokia.conml+xml\":{source:\"iana\",compressible:!0},\"application/vnd.nokia.iptv.config+xml\":{source:\"iana\",compressible:!0},\"application/vnd.nokia.isds-radio-presets\":{source:\"iana\"},\"application/vnd.nokia.landmark+wbxml\":{source:\"iana\"},\"application/vnd.nokia.landmark+xml\":{source:\"iana\",compressible:!0},\"application/vnd.nokia.landmarkcollection+xml\":{source:\"iana\",compressible:!0},\"application/vnd.nokia.n-gage.ac+xml\":{source:\"iana\",compressible:!0,extensions:[\"ac\"]},\"application/vnd.nokia.n-gage.data\":{source:\"iana\",extensions:[\"ngdat\"]},\"application/vnd.nokia.n-gage.symbian.install\":{source:\"iana\",extensions:[\"n-gage\"]},\"application/vnd.nokia.ncd\":{source:\"iana\"},\"application/vnd.nokia.pcd+wbxml\":{source:\"iana\"},\"application/vnd.nokia.pcd+xml\":{source:\"iana\",compressible:!0},\"application/vnd.nokia.radio-preset\":{source:\"iana\",extensions:[\"rpst\"]},\"application/vnd.nokia.radio-presets\":{source:\"iana\",extensions:[\"rpss\"]},\"application/vnd.novadigm.edm\":{source:\"iana\",extensions:[\"edm\"]},\"application/vnd.novadigm.edx\":{source:\"iana\",extensions:[\"edx\"]},\"application/vnd.novadigm.ext\":{source:\"iana\",extensions:[\"ext\"]},\"application/vnd.ntt-local.content-share\":{source:\"iana\"},\"application/vnd.ntt-local.file-transfer\":{source:\"iana\"},\"application/vnd.ntt-local.ogw_remote-access\":{source:\"iana\"},\"application/vnd.ntt-local.sip-ta_remote\":{source:\"iana\"},\"application/vnd.ntt-local.sip-ta_tcp_stream\":{source:\"iana\"},\"application/vnd.oasis.opendocument.chart\":{source:\"iana\",extensions:[\"odc\"]},\"application/vnd.oasis.opendocument.chart-template\":{source:\"iana\",extensions:[\"otc\"]},\"application/vnd.oasis.opendocument.database\":{source:\"iana\",extensions:[\"odb\"]},\"application/vnd.oasis.opendocument.formula\":{source:\"iana\",extensions:[\"odf\"]},\"application/vnd.oasis.opendocument.formula-template\":{source:\"iana\",extensions:[\"odft\"]},\"application/vnd.oasis.opendocument.graphics\":{source:\"iana\",compressible:!1,extensions:[\"odg\"]},\"application/vnd.oasis.opendocument.graphics-template\":{source:\"iana\",extensions:[\"otg\"]},\"application/vnd.oasis.opendocument.image\":{source:\"iana\",extensions:[\"odi\"]},\"application/vnd.oasis.opendocument.image-template\":{source:\"iana\",extensions:[\"oti\"]},\"application/vnd.oasis.opendocument.presentation\":{source:\"iana\",compressible:!1,extensions:[\"odp\"]},\"application/vnd.oasis.opendocument.presentation-template\":{source:\"iana\",extensions:[\"otp\"]},\"application/vnd.oasis.opendocument.spreadsheet\":{source:\"iana\",compressible:!1,extensions:[\"ods\"]},\"application/vnd.oasis.opendocument.spreadsheet-template\":{source:\"iana\",extensions:[\"ots\"]},\"application/vnd.oasis.opendocument.text\":{source:\"iana\",compressible:!1,extensions:[\"odt\"]},\"application/vnd.oasis.opendocument.text-master\":{source:\"iana\",extensions:[\"odm\"]},\"application/vnd.oasis.opendocument.text-template\":{source:\"iana\",extensions:[\"ott\"]},\"application/vnd.oasis.opendocument.text-web\":{source:\"iana\",extensions:[\"oth\"]},\"application/vnd.obn\":{source:\"iana\"},\"application/vnd.ocf+cbor\":{source:\"iana\"},\"application/vnd.oci.image.manifest.v1+json\":{source:\"iana\",compressible:!0},\"application/vnd.oftn.l10n+json\":{source:\"iana\",compressible:!0},\"application/vnd.oipf.contentaccessdownload+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oipf.contentaccessstreaming+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oipf.cspg-hexbinary\":{source:\"iana\"},\"application/vnd.oipf.dae.svg+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oipf.dae.xhtml+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oipf.mippvcontrolmessage+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oipf.pae.gem\":{source:\"iana\"},\"application/vnd.oipf.spdiscovery+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oipf.spdlist+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oipf.ueprofile+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oipf.userprofile+xml\":{source:\"iana\",compressible:!0},\"application/vnd.olpc-sugar\":{source:\"iana\",extensions:[\"xo\"]},\"application/vnd.oma-scws-config\":{source:\"iana\"},\"application/vnd.oma-scws-http-request\":{source:\"iana\"},\"application/vnd.oma-scws-http-response\":{source:\"iana\"},\"application/vnd.oma.bcast.associated-procedure-parameter+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.bcast.drm-trigger+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.bcast.imd+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.bcast.ltkm\":{source:\"iana\"},\"application/vnd.oma.bcast.notification+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.bcast.provisioningtrigger\":{source:\"iana\"},\"application/vnd.oma.bcast.sgboot\":{source:\"iana\"},\"application/vnd.oma.bcast.sgdd+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.bcast.sgdu\":{source:\"iana\"},\"application/vnd.oma.bcast.simple-symbol-container\":{source:\"iana\"},\"application/vnd.oma.bcast.smartcard-trigger+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.bcast.sprov+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.bcast.stkm\":{source:\"iana\"},\"application/vnd.oma.cab-address-book+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.cab-feature-handler+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.cab-pcc+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.cab-subs-invite+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.cab-user-prefs+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.dcd\":{source:\"iana\"},\"application/vnd.oma.dcdc\":{source:\"iana\"},\"application/vnd.oma.dd2+xml\":{source:\"iana\",compressible:!0,extensions:[\"dd2\"]},\"application/vnd.oma.drm.risd+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.group-usage-list+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.lwm2m+cbor\":{source:\"iana\"},\"application/vnd.oma.lwm2m+json\":{source:\"iana\",compressible:!0},\"application/vnd.oma.lwm2m+tlv\":{source:\"iana\"},\"application/vnd.oma.pal+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.poc.detailed-progress-report+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.poc.final-report+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.poc.groups+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.poc.invocation-descriptor+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.poc.optimized-progress-report+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.push\":{source:\"iana\"},\"application/vnd.oma.scidm.messages+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oma.xcap-directory+xml\":{source:\"iana\",compressible:!0},\"application/vnd.omads-email+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/vnd.omads-file+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/vnd.omads-folder+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/vnd.omaloc-supl-init\":{source:\"iana\"},\"application/vnd.onepager\":{source:\"iana\"},\"application/vnd.onepagertamp\":{source:\"iana\"},\"application/vnd.onepagertamx\":{source:\"iana\"},\"application/vnd.onepagertat\":{source:\"iana\"},\"application/vnd.onepagertatp\":{source:\"iana\"},\"application/vnd.onepagertatx\":{source:\"iana\"},\"application/vnd.openblox.game+xml\":{source:\"iana\",compressible:!0,extensions:[\"obgx\"]},\"application/vnd.openblox.game-binary\":{source:\"iana\"},\"application/vnd.openeye.oeb\":{source:\"iana\"},\"application/vnd.openofficeorg.extension\":{source:\"apache\",extensions:[\"oxt\"]},\"application/vnd.openstreetmap.data+xml\":{source:\"iana\",compressible:!0,extensions:[\"osm\"]},\"application/vnd.opentimestamps.ots\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.custom-properties+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.customxmlproperties+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.drawing+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.extended-properties+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.presentation\":{source:\"iana\",compressible:!1,extensions:[\"pptx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.slide\":{source:\"iana\",extensions:[\"sldx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\":{source:\"iana\",extensions:[\"ppsx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.tags+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.template\":{source:\"iana\",extensions:[\"potx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":{source:\"iana\",compressible:!1,extensions:[\"xlsx\"]},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\":{source:\"iana\",extensions:[\"xltx\"]},\"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.theme+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.themeoverride+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.vmldrawing\":{source:\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":{source:\"iana\",compressible:!1,extensions:[\"docx\"]},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\":{source:\"iana\",extensions:[\"dotx\"]},\"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-package.core-properties+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml\":{source:\"iana\",compressible:!0},\"application/vnd.openxmlformats-package.relationships+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oracle.resource+json\":{source:\"iana\",compressible:!0},\"application/vnd.orange.indata\":{source:\"iana\"},\"application/vnd.osa.netdeploy\":{source:\"iana\"},\"application/vnd.osgeo.mapguide.package\":{source:\"iana\",extensions:[\"mgp\"]},\"application/vnd.osgi.bundle\":{source:\"iana\"},\"application/vnd.osgi.dp\":{source:\"iana\",extensions:[\"dp\"]},\"application/vnd.osgi.subsystem\":{source:\"iana\",extensions:[\"esa\"]},\"application/vnd.otps.ct-kip+xml\":{source:\"iana\",compressible:!0},\"application/vnd.oxli.countgraph\":{source:\"iana\"},\"application/vnd.pagerduty+json\":{source:\"iana\",compressible:!0},\"application/vnd.palm\":{source:\"iana\",extensions:[\"pdb\",\"pqa\",\"oprc\"]},\"application/vnd.panoply\":{source:\"iana\"},\"application/vnd.paos.xml\":{source:\"iana\"},\"application/vnd.patentdive\":{source:\"iana\"},\"application/vnd.patientecommsdoc\":{source:\"iana\"},\"application/vnd.pawaafile\":{source:\"iana\",extensions:[\"paw\"]},\"application/vnd.pcos\":{source:\"iana\"},\"application/vnd.pg.format\":{source:\"iana\",extensions:[\"str\"]},\"application/vnd.pg.osasli\":{source:\"iana\",extensions:[\"ei6\"]},\"application/vnd.piaccess.application-licence\":{source:\"iana\"},\"application/vnd.picsel\":{source:\"iana\",extensions:[\"efif\"]},\"application/vnd.pmi.widget\":{source:\"iana\",extensions:[\"wg\"]},\"application/vnd.poc.group-advertisement+xml\":{source:\"iana\",compressible:!0},\"application/vnd.pocketlearn\":{source:\"iana\",extensions:[\"plf\"]},\"application/vnd.powerbuilder6\":{source:\"iana\",extensions:[\"pbd\"]},\"application/vnd.powerbuilder6-s\":{source:\"iana\"},\"application/vnd.powerbuilder7\":{source:\"iana\"},\"application/vnd.powerbuilder7-s\":{source:\"iana\"},\"application/vnd.powerbuilder75\":{source:\"iana\"},\"application/vnd.powerbuilder75-s\":{source:\"iana\"},\"application/vnd.preminet\":{source:\"iana\"},\"application/vnd.previewsystems.box\":{source:\"iana\",extensions:[\"box\"]},\"application/vnd.proteus.magazine\":{source:\"iana\",extensions:[\"mgz\"]},\"application/vnd.psfs\":{source:\"iana\"},\"application/vnd.publishare-delta-tree\":{source:\"iana\",extensions:[\"qps\"]},\"application/vnd.pvi.ptid1\":{source:\"iana\",extensions:[\"ptid\"]},\"application/vnd.pwg-multiplexed\":{source:\"iana\"},\"application/vnd.pwg-xhtml-print+xml\":{source:\"iana\",compressible:!0},\"application/vnd.qualcomm.brew-app-res\":{source:\"iana\"},\"application/vnd.quarantainenet\":{source:\"iana\"},\"application/vnd.quark.quarkxpress\":{source:\"iana\",extensions:[\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"]},\"application/vnd.quobject-quoxdocument\":{source:\"iana\"},\"application/vnd.radisys.moml+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-audit+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-audit-conf+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-audit-conn+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-audit-dialog+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-audit-stream+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-conf+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-dialog+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-dialog-base+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-dialog-fax-detect+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-dialog-fax-sendrecv+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-dialog-group+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-dialog-speech+xml\":{source:\"iana\",compressible:!0},\"application/vnd.radisys.msml-dialog-transform+xml\":{source:\"iana\",compressible:!0},\"application/vnd.rainstor.data\":{source:\"iana\"},\"application/vnd.rapid\":{source:\"iana\"},\"application/vnd.rar\":{source:\"iana\",extensions:[\"rar\"]},\"application/vnd.realvnc.bed\":{source:\"iana\",extensions:[\"bed\"]},\"application/vnd.recordare.musicxml\":{source:\"iana\",extensions:[\"mxl\"]},\"application/vnd.recordare.musicxml+xml\":{source:\"iana\",compressible:!0,extensions:[\"musicxml\"]},\"application/vnd.renlearn.rlprint\":{source:\"iana\"},\"application/vnd.resilient.logic\":{source:\"iana\"},\"application/vnd.restful+json\":{source:\"iana\",compressible:!0},\"application/vnd.rig.cryptonote\":{source:\"iana\",extensions:[\"cryptonote\"]},\"application/vnd.rim.cod\":{source:\"apache\",extensions:[\"cod\"]},\"application/vnd.rn-realmedia\":{source:\"apache\",extensions:[\"rm\"]},\"application/vnd.rn-realmedia-vbr\":{source:\"apache\",extensions:[\"rmvb\"]},\"application/vnd.route66.link66+xml\":{source:\"iana\",compressible:!0,extensions:[\"link66\"]},\"application/vnd.rs-274x\":{source:\"iana\"},\"application/vnd.ruckus.download\":{source:\"iana\"},\"application/vnd.s3sms\":{source:\"iana\"},\"application/vnd.sailingtracker.track\":{source:\"iana\",extensions:[\"st\"]},\"application/vnd.sar\":{source:\"iana\"},\"application/vnd.sbm.cid\":{source:\"iana\"},\"application/vnd.sbm.mid2\":{source:\"iana\"},\"application/vnd.scribus\":{source:\"iana\"},\"application/vnd.sealed.3df\":{source:\"iana\"},\"application/vnd.sealed.csf\":{source:\"iana\"},\"application/vnd.sealed.doc\":{source:\"iana\"},\"application/vnd.sealed.eml\":{source:\"iana\"},\"application/vnd.sealed.mht\":{source:\"iana\"},\"application/vnd.sealed.net\":{source:\"iana\"},\"application/vnd.sealed.ppt\":{source:\"iana\"},\"application/vnd.sealed.tiff\":{source:\"iana\"},\"application/vnd.sealed.xls\":{source:\"iana\"},\"application/vnd.sealedmedia.softseal.html\":{source:\"iana\"},\"application/vnd.sealedmedia.softseal.pdf\":{source:\"iana\"},\"application/vnd.seemail\":{source:\"iana\",extensions:[\"see\"]},\"application/vnd.seis+json\":{source:\"iana\",compressible:!0},\"application/vnd.sema\":{source:\"iana\",extensions:[\"sema\"]},\"application/vnd.semd\":{source:\"iana\",extensions:[\"semd\"]},\"application/vnd.semf\":{source:\"iana\",extensions:[\"semf\"]},\"application/vnd.shade-save-file\":{source:\"iana\"},\"application/vnd.shana.informed.formdata\":{source:\"iana\",extensions:[\"ifm\"]},\"application/vnd.shana.informed.formtemplate\":{source:\"iana\",extensions:[\"itp\"]},\"application/vnd.shana.informed.interchange\":{source:\"iana\",extensions:[\"iif\"]},\"application/vnd.shana.informed.package\":{source:\"iana\",extensions:[\"ipk\"]},\"application/vnd.shootproof+json\":{source:\"iana\",compressible:!0},\"application/vnd.shopkick+json\":{source:\"iana\",compressible:!0},\"application/vnd.shp\":{source:\"iana\"},\"application/vnd.shx\":{source:\"iana\"},\"application/vnd.sigrok.session\":{source:\"iana\"},\"application/vnd.simtech-mindmapper\":{source:\"iana\",extensions:[\"twd\",\"twds\"]},\"application/vnd.siren+json\":{source:\"iana\",compressible:!0},\"application/vnd.smaf\":{source:\"iana\",extensions:[\"mmf\"]},\"application/vnd.smart.notebook\":{source:\"iana\"},\"application/vnd.smart.teacher\":{source:\"iana\",extensions:[\"teacher\"]},\"application/vnd.snesdev-page-table\":{source:\"iana\"},\"application/vnd.software602.filler.form+xml\":{source:\"iana\",compressible:!0,extensions:[\"fo\"]},\"application/vnd.software602.filler.form-xml-zip\":{source:\"iana\"},\"application/vnd.solent.sdkm+xml\":{source:\"iana\",compressible:!0,extensions:[\"sdkm\",\"sdkd\"]},\"application/vnd.spotfire.dxp\":{source:\"iana\",extensions:[\"dxp\"]},\"application/vnd.spotfire.sfs\":{source:\"iana\",extensions:[\"sfs\"]},\"application/vnd.sqlite3\":{source:\"iana\"},\"application/vnd.sss-cod\":{source:\"iana\"},\"application/vnd.sss-dtf\":{source:\"iana\"},\"application/vnd.sss-ntf\":{source:\"iana\"},\"application/vnd.stardivision.calc\":{source:\"apache\",extensions:[\"sdc\"]},\"application/vnd.stardivision.draw\":{source:\"apache\",extensions:[\"sda\"]},\"application/vnd.stardivision.impress\":{source:\"apache\",extensions:[\"sdd\"]},\"application/vnd.stardivision.math\":{source:\"apache\",extensions:[\"smf\"]},\"application/vnd.stardivision.writer\":{source:\"apache\",extensions:[\"sdw\",\"vor\"]},\"application/vnd.stardivision.writer-global\":{source:\"apache\",extensions:[\"sgl\"]},\"application/vnd.stepmania.package\":{source:\"iana\",extensions:[\"smzip\"]},\"application/vnd.stepmania.stepchart\":{source:\"iana\",extensions:[\"sm\"]},\"application/vnd.street-stream\":{source:\"iana\"},\"application/vnd.sun.wadl+xml\":{source:\"iana\",compressible:!0,extensions:[\"wadl\"]},\"application/vnd.sun.xml.calc\":{source:\"apache\",extensions:[\"sxc\"]},\"application/vnd.sun.xml.calc.template\":{source:\"apache\",extensions:[\"stc\"]},\"application/vnd.sun.xml.draw\":{source:\"apache\",extensions:[\"sxd\"]},\"application/vnd.sun.xml.draw.template\":{source:\"apache\",extensions:[\"std\"]},\"application/vnd.sun.xml.impress\":{source:\"apache\",extensions:[\"sxi\"]},\"application/vnd.sun.xml.impress.template\":{source:\"apache\",extensions:[\"sti\"]},\"application/vnd.sun.xml.math\":{source:\"apache\",extensions:[\"sxm\"]},\"application/vnd.sun.xml.writer\":{source:\"apache\",extensions:[\"sxw\"]},\"application/vnd.sun.xml.writer.global\":{source:\"apache\",extensions:[\"sxg\"]},\"application/vnd.sun.xml.writer.template\":{source:\"apache\",extensions:[\"stw\"]},\"application/vnd.sus-calendar\":{source:\"iana\",extensions:[\"sus\",\"susp\"]},\"application/vnd.svd\":{source:\"iana\",extensions:[\"svd\"]},\"application/vnd.swiftview-ics\":{source:\"iana\"},\"application/vnd.sycle+xml\":{source:\"iana\",compressible:!0},\"application/vnd.syft+json\":{source:\"iana\",compressible:!0},\"application/vnd.symbian.install\":{source:\"apache\",extensions:[\"sis\",\"sisx\"]},\"application/vnd.syncml+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0,extensions:[\"xsm\"]},\"application/vnd.syncml.dm+wbxml\":{source:\"iana\",charset:\"UTF-8\",extensions:[\"bdm\"]},\"application/vnd.syncml.dm+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0,extensions:[\"xdm\"]},\"application/vnd.syncml.dm.notification\":{source:\"iana\"},\"application/vnd.syncml.dmddf+wbxml\":{source:\"iana\"},\"application/vnd.syncml.dmddf+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0,extensions:[\"ddf\"]},\"application/vnd.syncml.dmtnds+wbxml\":{source:\"iana\"},\"application/vnd.syncml.dmtnds+xml\":{source:\"iana\",charset:\"UTF-8\",compressible:!0},\"application/vnd.syncml.ds.notification\":{source:\"iana\"},\"application/vnd.tableschema+json\":{source:\"iana\",compressible:!0},\"application/vnd.tao.intent-module-archive\":{source:\"iana\",extensions:[\"tao\"]},\"application/vnd.tcpdump.pcap\":{source:\"iana\",extensions:[\"pcap\",\"cap\",\"dmp\"]},\"application/vnd.think-cell.ppttc+json\":{source:\"iana\",compressible:!0},\"application/vnd.tmd.mediaflex.api+xml\":{source:\"iana\",compressible:!0},\"application/vnd.tml\":{source:\"iana\"},\"application/vnd.tmobile-livetv\":{source:\"iana\",extensions:[\"tmo\"]},\"application/vnd.tri.onesource\":{source:\"iana\"},\"application/vnd.trid.tpt\":{source:\"iana\",extensions:[\"tpt\"]},\"application/vnd.triscape.mxs\":{source:\"iana\",extensions:[\"mxs\"]},\"application/vnd.trueapp\":{source:\"iana\",extensions:[\"tra\"]},\"application/vnd.truedoc\":{source:\"iana\"},\"application/vnd.ubisoft.webplayer\":{source:\"iana\"},\"application/vnd.ufdl\":{source:\"iana\",extensions:[\"ufd\",\"ufdl\"]},\"application/vnd.uiq.theme\":{source:\"iana\",extensions:[\"utz\"]},\"application/vnd.umajin\":{source:\"iana\",extensions:[\"umj\"]},\"application/vnd.unity\":{source:\"iana\",extensions:[\"unityweb\"]},\"application/vnd.uoml+xml\":{source:\"iana\",compressible:!0,extensions:[\"uoml\"]},\"application/vnd.uplanet.alert\":{source:\"iana\"},\"application/vnd.uplanet.alert-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.bearer-choice\":{source:\"iana\"},\"application/vnd.uplanet.bearer-choice-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.cacheop\":{source:\"iana\"},\"application/vnd.uplanet.cacheop-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.channel\":{source:\"iana\"},\"application/vnd.uplanet.channel-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.list\":{source:\"iana\"},\"application/vnd.uplanet.list-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.listcmd\":{source:\"iana\"},\"application/vnd.uplanet.listcmd-wbxml\":{source:\"iana\"},\"application/vnd.uplanet.signal\":{source:\"iana\"},\"application/vnd.uri-map\":{source:\"iana\"},\"application/vnd.valve.source.material\":{source:\"iana\"},\"application/vnd.vcx\":{source:\"iana\",extensions:[\"vcx\"]},\"application/vnd.vd-study\":{source:\"iana\"},\"application/vnd.vectorworks\":{source:\"iana\"},\"application/vnd.vel+json\":{source:\"iana\",compressible:!0},\"application/vnd.verimatrix.vcas\":{source:\"iana\"},\"application/vnd.veritone.aion+json\":{source:\"iana\",compressible:!0},\"application/vnd.veryant.thin\":{source:\"iana\"},\"application/vnd.ves.encrypted\":{source:\"iana\"},\"application/vnd.vidsoft.vidconference\":{source:\"iana\"},\"application/vnd.visio\":{source:\"iana\",extensions:[\"vsd\",\"vst\",\"vss\",\"vsw\"]},\"application/vnd.visionary\":{source:\"iana\",extensions:[\"vis\"]},\"application/vnd.vividence.scriptfile\":{source:\"iana\"},\"application/vnd.vsf\":{source:\"iana\",extensions:[\"vsf\"]},\"application/vnd.wap.sic\":{source:\"iana\"},\"application/vnd.wap.slc\":{source:\"iana\"},\"application/vnd.wap.wbxml\":{source:\"iana\",charset:\"UTF-8\",extensions:[\"wbxml\"]},\"application/vnd.wap.wmlc\":{source:\"iana\",extensions:[\"wmlc\"]},\"application/vnd.wap.wmlscriptc\":{source:\"iana\",extensions:[\"wmlsc\"]},\"application/vnd.webturbo\":{source:\"iana\",extensions:[\"wtb\"]},\"application/vnd.wfa.dpp\":{source:\"iana\"},\"application/vnd.wfa.p2p\":{source:\"iana\"},\"application/vnd.wfa.wsc\":{source:\"iana\"},\"application/vnd.windows.devicepairing\":{source:\"iana\"},\"application/vnd.wmc\":{source:\"iana\"},\"application/vnd.wmf.bootstrap\":{source:\"iana\"},\"application/vnd.wolfram.mathematica\":{source:\"iana\"},\"application/vnd.wolfram.mathematica.package\":{source:\"iana\"},\"application/vnd.wolfram.player\":{source:\"iana\",extensions:[\"nbp\"]},\"application/vnd.wordperfect\":{source:\"iana\",extensions:[\"wpd\"]},\"application/vnd.wqd\":{source:\"iana\",extensions:[\"wqd\"]},\"application/vnd.wrq-hp3000-labelled\":{source:\"iana\"},\"application/vnd.wt.stf\":{source:\"iana\",extensions:[\"stf\"]},\"application/vnd.wv.csp+wbxml\":{source:\"iana\"},\"application/vnd.wv.csp+xml\":{source:\"iana\",compressible:!0},\"application/vnd.wv.ssp+xml\":{source:\"iana\",compressible:!0},\"application/vnd.xacml+json\":{source:\"iana\",compressible:!0},\"application/vnd.xara\":{source:\"iana\",extensions:[\"xar\"]},\"application/vnd.xfdl\":{source:\"iana\",extensions:[\"xfdl\"]},\"application/vnd.xfdl.webform\":{source:\"iana\"},\"application/vnd.xmi+xml\":{source:\"iana\",compressible:!0},\"application/vnd.xmpie.cpkg\":{source:\"iana\"},\"application/vnd.xmpie.dpkg\":{source:\"iana\"},\"application/vnd.xmpie.plan\":{source:\"iana\"},\"application/vnd.xmpie.ppkg\":{source:\"iana\"},\"application/vnd.xmpie.xlim\":{source:\"iana\"},\"application/vnd.yamaha.hv-dic\":{source:\"iana\",extensions:[\"hvd\"]},\"application/vnd.yamaha.hv-script\":{source:\"iana\",extensions:[\"hvs\"]},\"application/vnd.yamaha.hv-voice\":{source:\"iana\",extensions:[\"hvp\"]},\"application/vnd.yamaha.openscoreformat\":{source:\"iana\",extensions:[\"osf\"]},\"application/vnd.yamaha.openscoreformat.osfpvg+xml\":{source:\"iana\",compressible:!0,extensions:[\"osfpvg\"]},\"application/vnd.yamaha.remote-setup\":{source:\"iana\"},\"application/vnd.yamaha.smaf-audio\":{source:\"iana\",extensions:[\"saf\"]},\"application/vnd.yamaha.smaf-phrase\":{source:\"iana\",extensions:[\"spf\"]},\"application/vnd.yamaha.through-ngn\":{source:\"iana\"},\"application/vnd.yamaha.tunnel-udpencap\":{source:\"iana\"},\"application/vnd.yaoweme\":{source:\"iana\"},\"application/vnd.yellowriver-custom-menu\":{source:\"iana\",extensions:[\"cmp\"]},\"application/vnd.youtube.yt\":{source:\"iana\"},\"application/vnd.zul\":{source:\"iana\",extensions:[\"zir\",\"zirz\"]},\"application/vnd.zzazz.deck+xml\":{source:\"iana\",compressible:!0,extensions:[\"zaz\"]},\"application/voicexml+xml\":{source:\"iana\",compressible:!0,extensions:[\"vxml\"]},\"application/voucher-cms+json\":{source:\"iana\",compressible:!0},\"application/vq-rtcpxr\":{source:\"iana\"},\"application/wasm\":{source:\"iana\",compressible:!0,extensions:[\"wasm\"]},\"application/watcherinfo+xml\":{source:\"iana\",compressible:!0,extensions:[\"wif\"]},\"application/webpush-options+json\":{source:\"iana\",compressible:!0},\"application/whoispp-query\":{source:\"iana\"},\"application/whoispp-response\":{source:\"iana\"},\"application/widget\":{source:\"iana\",extensions:[\"wgt\"]},\"application/winhlp\":{source:\"apache\",extensions:[\"hlp\"]},\"application/wita\":{source:\"iana\"},\"application/wordperfect5.1\":{source:\"iana\"},\"application/wsdl+xml\":{source:\"iana\",compressible:!0,extensions:[\"wsdl\"]},\"application/wspolicy+xml\":{source:\"iana\",compressible:!0,extensions:[\"wspolicy\"]},\"application/x-7z-compressed\":{source:\"apache\",compressible:!1,extensions:[\"7z\"]},\"application/x-abiword\":{source:\"apache\",extensions:[\"abw\"]},\"application/x-ace-compressed\":{source:\"apache\",extensions:[\"ace\"]},\"application/x-amf\":{source:\"apache\"},\"application/x-apple-diskimage\":{source:\"apache\",extensions:[\"dmg\"]},\"application/x-arj\":{compressible:!1,extensions:[\"arj\"]},\"application/x-authorware-bin\":{source:\"apache\",extensions:[\"aab\",\"x32\",\"u32\",\"vox\"]},\"application/x-authorware-map\":{source:\"apache\",extensions:[\"aam\"]},\"application/x-authorware-seg\":{source:\"apache\",extensions:[\"aas\"]},\"application/x-bcpio\":{source:\"apache\",extensions:[\"bcpio\"]},\"application/x-bdoc\":{compressible:!1,extensions:[\"bdoc\"]},\"application/x-bittorrent\":{source:\"apache\",extensions:[\"torrent\"]},\"application/x-blorb\":{source:\"apache\",extensions:[\"blb\",\"blorb\"]},\"application/x-bzip\":{source:\"apache\",compressible:!1,extensions:[\"bz\"]},\"application/x-bzip2\":{source:\"apache\",compressible:!1,extensions:[\"bz2\",\"boz\"]},\"application/x-cbr\":{source:\"apache\",extensions:[\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"]},\"application/x-cdlink\":{source:\"apache\",extensions:[\"vcd\"]},\"application/x-cfs-compressed\":{source:\"apache\",extensions:[\"cfs\"]},\"application/x-chat\":{source:\"apache\",extensions:[\"chat\"]},\"application/x-chess-pgn\":{source:\"apache\",extensions:[\"pgn\"]},\"application/x-chrome-extension\":{extensions:[\"crx\"]},\"application/x-cocoa\":{source:\"nginx\",extensions:[\"cco\"]},\"application/x-compress\":{source:\"apache\"},\"application/x-conference\":{source:\"apache\",extensions:[\"nsc\"]},\"application/x-cpio\":{source:\"apache\",extensions:[\"cpio\"]},\"application/x-csh\":{source:\"apache\",extensions:[\"csh\"]},\"application/x-deb\":{compressible:!1},\"application/x-debian-package\":{source:\"apache\",extensions:[\"deb\",\"udeb\"]},\"application/x-dgc-compressed\":{source:\"apache\",extensions:[\"dgc\"]},\"application/x-director\":{source:\"apache\",extensions:[\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"]},\"application/x-doom\":{source:\"apache\",extensions:[\"wad\"]},\"application/x-dtbncx+xml\":{source:\"apache\",compressible:!0,extensions:[\"ncx\"]},\"application/x-dtbook+xml\":{source:\"apache\",compressible:!0,extensions:[\"dtb\"]},\"application/x-dtbresource+xml\":{source:\"apache\",compressible:!0,extensions:[\"res\"]},\"application/x-dvi\":{source:\"apache\",compressible:!1,extensions:[\"dvi\"]},\"application/x-envoy\":{source:\"apache\",extensions:[\"evy\"]},\"application/x-eva\":{source:\"apache\",extensions:[\"eva\"]},\"application/x-font-bdf\":{source:\"apache\",extensions:[\"bdf\"]},\"application/x-font-dos\":{source:\"apache\"},\"application/x-font-framemaker\":{source:\"apache\"},\"application/x-font-ghostscript\":{source:\"apache\",extensions:[\"gsf\"]},\"application/x-font-libgrx\":{source:\"apache\"},\"application/x-font-linux-psf\":{source:\"apache\",extensions:[\"psf\"]},\"application/x-font-pcf\":{source:\"apache\",extensions:[\"pcf\"]},\"application/x-font-snf\":{source:\"apache\",extensions:[\"snf\"]},\"application/x-font-speedo\":{source:\"apache\"},\"application/x-font-sunos-news\":{source:\"apache\"},\"application/x-font-type1\":{source:\"apache\",extensions:[\"pfa\",\"pfb\",\"pfm\",\"afm\"]},\"application/x-font-vfont\":{source:\"apache\"},\"application/x-freearc\":{source:\"apache\",extensions:[\"arc\"]},\"application/x-futuresplash\":{source:\"apache\",extensions:[\"spl\"]},\"application/x-gca-compressed\":{source:\"apache\",extensions:[\"gca\"]},\"application/x-glulx\":{source:\"apache\",extensions:[\"ulx\"]},\"application/x-gnumeric\":{source:\"apache\",extensions:[\"gnumeric\"]},\"application/x-gramps-xml\":{source:\"apache\",extensions:[\"gramps\"]},\"application/x-gtar\":{source:\"apache\",extensions:[\"gtar\"]},\"application/x-gzip\":{source:\"apache\"},\"application/x-hdf\":{source:\"apache\",extensions:[\"hdf\"]},\"application/x-httpd-php\":{compressible:!0,extensions:[\"php\"]},\"application/x-install-instructions\":{source:\"apache\",extensions:[\"install\"]},\"application/x-iso9660-image\":{source:\"apache\",extensions:[\"iso\"]},\"application/x-iwork-keynote-sffkey\":{extensions:[\"key\"]},\"application/x-iwork-numbers-sffnumbers\":{extensions:[\"numbers\"]},\"application/x-iwork-pages-sffpages\":{extensions:[\"pages\"]},\"application/x-java-archive-diff\":{source:\"nginx\",extensions:[\"jardiff\"]},\"application/x-java-jnlp-file\":{source:\"apache\",compressible:!1,extensions:[\"jnlp\"]},\"application/x-javascript\":{compressible:!0},\"application/x-keepass2\":{extensions:[\"kdbx\"]},\"application/x-latex\":{source:\"apache\",compressible:!1,extensions:[\"latex\"]},\"application/x-lua-bytecode\":{extensions:[\"luac\"]},\"application/x-lzh-compressed\":{source:\"apache\",extensions:[\"lzh\",\"lha\"]},\"application/x-makeself\":{source:\"nginx\",extensions:[\"run\"]},\"application/x-mie\":{source:\"apache\",extensions:[\"mie\"]},\"application/x-mobipocket-ebook\":{source:\"apache\",extensions:[\"prc\",\"mobi\"]},\"application/x-mpegurl\":{compressible:!1},\"application/x-ms-application\":{source:\"apache\",extensions:[\"application\"]},\"application/x-ms-shortcut\":{source:\"apache\",extensions:[\"lnk\"]},\"application/x-ms-wmd\":{source:\"apache\",extensions:[\"wmd\"]},\"application/x-ms-wmz\":{source:\"apache\",extensions:[\"wmz\"]},\"application/x-ms-xbap\":{source:\"apache\",extensions:[\"xbap\"]},\"application/x-msaccess\":{source:\"apache\",extensions:[\"mdb\"]},\"application/x-msbinder\":{source:\"apache\",extensions:[\"obd\"]},\"application/x-mscardfile\":{source:\"apache\",extensions:[\"crd\"]},\"application/x-msclip\":{source:\"apache\",extensions:[\"clp\"]},\"application/x-msdos-program\":{extensions:[\"exe\"]},\"application/x-msdownload\":{source:\"apache\",extensions:[\"exe\",\"dll\",\"com\",\"bat\",\"msi\"]},\"application/x-msmediaview\":{source:\"apache\",extensions:[\"mvb\",\"m13\",\"m14\"]},\"application/x-msmetafile\":{source:\"apache\",extensions:[\"wmf\",\"wmz\",\"emf\",\"emz\"]},\"application/x-msmoney\":{source:\"apache\",extensions:[\"mny\"]},\"application/x-mspublisher\":{source:\"apache\",extensions:[\"pub\"]},\"application/x-msschedule\":{source:\"apache\",extensions:[\"scd\"]},\"application/x-msterminal\":{source:\"apache\",extensions:[\"trm\"]},\"application/x-mswrite\":{source:\"apache\",extensions:[\"wri\"]},\"application/x-netcdf\":{source:\"apache\",extensions:[\"nc\",\"cdf\"]},\"application/x-ns-proxy-autoconfig\":{compressible:!0,extensions:[\"pac\"]},\"application/x-nzb\":{source:\"apache\",extensions:[\"nzb\"]},\"application/x-perl\":{source:\"nginx\",extensions:[\"pl\",\"pm\"]},\"application/x-pilot\":{source:\"nginx\",extensions:[\"prc\",\"pdb\"]},\"application/x-pkcs12\":{source:\"apache\",compressible:!1,extensions:[\"p12\",\"pfx\"]},\"application/x-pkcs7-certificates\":{source:\"apache\",extensions:[\"p7b\",\"spc\"]},\"application/x-pkcs7-certreqresp\":{source:\"apache\",extensions:[\"p7r\"]},\"application/x-pki-message\":{source:\"iana\"},\"application/x-rar-compressed\":{source:\"apache\",compressible:!1,extensions:[\"rar\"]},\"application/x-redhat-package-manager\":{source:\"nginx\",extensions:[\"rpm\"]},\"application/x-research-info-systems\":{source:\"apache\",extensions:[\"ris\"]},\"application/x-sea\":{source:\"nginx\",extensions:[\"sea\"]},\"application/x-sh\":{source:\"apache\",compressible:!0,extensions:[\"sh\"]},\"application/x-shar\":{source:\"apache\",extensions:[\"shar\"]},\"application/x-shockwave-flash\":{source:\"apache\",compressible:!1,extensions:[\"swf\"]},\"application/x-silverlight-app\":{source:\"apache\",extensions:[\"xap\"]},\"application/x-sql\":{source:\"apache\",extensions:[\"sql\"]},\"application/x-stuffit\":{source:\"apache\",compressible:!1,extensions:[\"sit\"]},\"application/x-stuffitx\":{source:\"apache\",extensions:[\"sitx\"]},\"application/x-subrip\":{source:\"apache\",extensions:[\"srt\"]},\"application/x-sv4cpio\":{source:\"apache\",extensions:[\"sv4cpio\"]},\"application/x-sv4crc\":{source:\"apache\",extensions:[\"sv4crc\"]},\"application/x-t3vm-image\":{source:\"apache\",extensions:[\"t3\"]},\"application/x-tads\":{source:\"apache\",extensions:[\"gam\"]},\"application/x-tar\":{source:\"apache\",compressible:!0,extensions:[\"tar\"]},\"application/x-tcl\":{source:\"apache\",extensions:[\"tcl\",\"tk\"]},\"application/x-tex\":{source:\"apache\",extensions:[\"tex\"]},\"application/x-tex-tfm\":{source:\"apache\",extensions:[\"tfm\"]},\"application/x-texinfo\":{source:\"apache\",extensions:[\"texinfo\",\"texi\"]},\"application/x-tgif\":{source:\"apache\",extensions:[\"obj\"]},\"application/x-ustar\":{source:\"apache\",extensions:[\"ustar\"]},\"application/x-virtualbox-hdd\":{compressible:!0,extensions:[\"hdd\"]},\"application/x-virtualbox-ova\":{compressible:!0,extensions:[\"ova\"]},\"application/x-virtualbox-ovf\":{compressible:!0,extensions:[\"ovf\"]},\"application/x-virtualbox-vbox\":{compressible:!0,extensions:[\"vbox\"]},\"application/x-virtualbox-vbox-extpack\":{compressible:!1,extensions:[\"vbox-extpack\"]},\"application/x-virtualbox-vdi\":{compressible:!0,extensions:[\"vdi\"]},\"application/x-virtualbox-vhd\":{compressible:!0,extensions:[\"vhd\"]},\"application/x-virtualbox-vmdk\":{compressible:!0,extensions:[\"vmdk\"]},\"application/x-wais-source\":{source:\"apache\",extensions:[\"src\"]},\"application/x-web-app-manifest+json\":{compressible:!0,extensions:[\"webapp\"]},\"application/x-www-form-urlencoded\":{source:\"iana\",compressible:!0},\"application/x-x509-ca-cert\":{source:\"iana\",extensions:[\"der\",\"crt\",\"pem\"]},\"application/x-x509-ca-ra-cert\":{source:\"iana\"},\"application/x-x509-next-ca-cert\":{source:\"iana\"},\"application/x-xfig\":{source:\"apache\",extensions:[\"fig\"]},\"application/x-xliff+xml\":{source:\"apache\",compressible:!0,extensions:[\"xlf\"]},\"application/x-xpinstall\":{source:\"apache\",compressible:!1,extensions:[\"xpi\"]},\"application/x-xz\":{source:\"apache\",extensions:[\"xz\"]},\"application/x-zmachine\":{source:\"apache\",extensions:[\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"]},\"application/x400-bp\":{source:\"iana\"},\"application/xacml+xml\":{source:\"iana\",compressible:!0},\"application/xaml+xml\":{source:\"apache\",compressible:!0,extensions:[\"xaml\"]},\"application/xcap-att+xml\":{source:\"iana\",compressible:!0,extensions:[\"xav\"]},\"application/xcap-caps+xml\":{source:\"iana\",compressible:!0,extensions:[\"xca\"]},\"application/xcap-diff+xml\":{source:\"iana\",compressible:!0,extensions:[\"xdf\"]},\"application/xcap-el+xml\":{source:\"iana\",compressible:!0,extensions:[\"xel\"]},\"application/xcap-error+xml\":{source:\"iana\",compressible:!0},\"application/xcap-ns+xml\":{source:\"iana\",compressible:!0,extensions:[\"xns\"]},\"application/xcon-conference-info+xml\":{source:\"iana\",compressible:!0},\"application/xcon-conference-info-diff+xml\":{source:\"iana\",compressible:!0},\"application/xenc+xml\":{source:\"iana\",compressible:!0,extensions:[\"xenc\"]},\"application/xhtml+xml\":{source:\"iana\",compressible:!0,extensions:[\"xhtml\",\"xht\"]},\"application/xhtml-voice+xml\":{source:\"apache\",compressible:!0},\"application/xliff+xml\":{source:\"iana\",compressible:!0,extensions:[\"xlf\"]},\"application/xml\":{source:\"iana\",compressible:!0,extensions:[\"xml\",\"xsl\",\"xsd\",\"rng\"]},\"application/xml-dtd\":{source:\"iana\",compressible:!0,extensions:[\"dtd\"]},\"application/xml-external-parsed-entity\":{source:\"iana\"},\"application/xml-patch+xml\":{source:\"iana\",compressible:!0},\"application/xmpp+xml\":{source:\"iana\",compressible:!0},\"application/xop+xml\":{source:\"iana\",compressible:!0,extensions:[\"xop\"]},\"application/xproc+xml\":{source:\"apache\",compressible:!0,extensions:[\"xpl\"]},\"application/xslt+xml\":{source:\"iana\",compressible:!0,extensions:[\"xsl\",\"xslt\"]},\"application/xspf+xml\":{source:\"apache\",compressible:!0,extensions:[\"xspf\"]},\"application/xv+xml\":{source:\"iana\",compressible:!0,extensions:[\"mxml\",\"xhvml\",\"xvml\",\"xvm\"]},\"application/yang\":{source:\"iana\",extensions:[\"yang\"]},\"application/yang-data+json\":{source:\"iana\",compressible:!0},\"application/yang-data+xml\":{source:\"iana\",compressible:!0},\"application/yang-patch+json\":{source:\"iana\",compressible:!0},\"application/yang-patch+xml\":{source:\"iana\",compressible:!0},\"application/yin+xml\":{source:\"iana\",compressible:!0,extensions:[\"yin\"]},\"application/zip\":{source:\"iana\",compressible:!1,extensions:[\"zip\"]},\"application/zlib\":{source:\"iana\"},\"application/zstd\":{source:\"iana\"},\"audio/1d-interleaved-parityfec\":{source:\"iana\"},\"audio/32kadpcm\":{source:\"iana\"},\"audio/3gpp\":{source:\"iana\",compressible:!1,extensions:[\"3gpp\"]},\"audio/3gpp2\":{source:\"iana\"},\"audio/aac\":{source:\"iana\"},\"audio/ac3\":{source:\"iana\"},\"audio/adpcm\":{source:\"apache\",extensions:[\"adp\"]},\"audio/amr\":{source:\"iana\",extensions:[\"amr\"]},\"audio/amr-wb\":{source:\"iana\"},\"audio/amr-wb+\":{source:\"iana\"},\"audio/aptx\":{source:\"iana\"},\"audio/asc\":{source:\"iana\"},\"audio/atrac-advanced-lossless\":{source:\"iana\"},\"audio/atrac-x\":{source:\"iana\"},\"audio/atrac3\":{source:\"iana\"},\"audio/basic\":{source:\"iana\",compressible:!1,extensions:[\"au\",\"snd\"]},\"audio/bv16\":{source:\"iana\"},\"audio/bv32\":{source:\"iana\"},\"audio/clearmode\":{source:\"iana\"},\"audio/cn\":{source:\"iana\"},\"audio/dat12\":{source:\"iana\"},\"audio/dls\":{source:\"iana\"},\"audio/dsr-es201108\":{source:\"iana\"},\"audio/dsr-es202050\":{source:\"iana\"},\"audio/dsr-es202211\":{source:\"iana\"},\"audio/dsr-es202212\":{source:\"iana\"},\"audio/dv\":{source:\"iana\"},\"audio/dvi4\":{source:\"iana\"},\"audio/eac3\":{source:\"iana\"},\"audio/encaprtp\":{source:\"iana\"},\"audio/evrc\":{source:\"iana\"},\"audio/evrc-qcp\":{source:\"iana\"},\"audio/evrc0\":{source:\"iana\"},\"audio/evrc1\":{source:\"iana\"},\"audio/evrcb\":{source:\"iana\"},\"audio/evrcb0\":{source:\"iana\"},\"audio/evrcb1\":{source:\"iana\"},\"audio/evrcnw\":{source:\"iana\"},\"audio/evrcnw0\":{source:\"iana\"},\"audio/evrcnw1\":{source:\"iana\"},\"audio/evrcwb\":{source:\"iana\"},\"audio/evrcwb0\":{source:\"iana\"},\"audio/evrcwb1\":{source:\"iana\"},\"audio/evs\":{source:\"iana\"},\"audio/flexfec\":{source:\"iana\"},\"audio/fwdred\":{source:\"iana\"},\"audio/g711-0\":{source:\"iana\"},\"audio/g719\":{source:\"iana\"},\"audio/g722\":{source:\"iana\"},\"audio/g7221\":{source:\"iana\"},\"audio/g723\":{source:\"iana\"},\"audio/g726-16\":{source:\"iana\"},\"audio/g726-24\":{source:\"iana\"},\"audio/g726-32\":{source:\"iana\"},\"audio/g726-40\":{source:\"iana\"},\"audio/g728\":{source:\"iana\"},\"audio/g729\":{source:\"iana\"},\"audio/g7291\":{source:\"iana\"},\"audio/g729d\":{source:\"iana\"},\"audio/g729e\":{source:\"iana\"},\"audio/gsm\":{source:\"iana\"},\"audio/gsm-efr\":{source:\"iana\"},\"audio/gsm-hr-08\":{source:\"iana\"},\"audio/ilbc\":{source:\"iana\"},\"audio/ip-mr_v2.5\":{source:\"iana\"},\"audio/isac\":{source:\"apache\"},\"audio/l16\":{source:\"iana\"},\"audio/l20\":{source:\"iana\"},\"audio/l24\":{source:\"iana\",compressible:!1},\"audio/l8\":{source:\"iana\"},\"audio/lpc\":{source:\"iana\"},\"audio/melp\":{source:\"iana\"},\"audio/melp1200\":{source:\"iana\"},\"audio/melp2400\":{source:\"iana\"},\"audio/melp600\":{source:\"iana\"},\"audio/mhas\":{source:\"iana\"},\"audio/midi\":{source:\"apache\",extensions:[\"mid\",\"midi\",\"kar\",\"rmi\"]},\"audio/mobile-xmf\":{source:\"iana\",extensions:[\"mxmf\"]},\"audio/mp3\":{compressible:!1,extensions:[\"mp3\"]},\"audio/mp4\":{source:\"iana\",compressible:!1,extensions:[\"m4a\",\"mp4a\"]},\"audio/mp4a-latm\":{source:\"iana\"},\"audio/mpa\":{source:\"iana\"},\"audio/mpa-robust\":{source:\"iana\"},\"audio/mpeg\":{source:\"iana\",compressible:!1,extensions:[\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"]},\"audio/mpeg4-generic\":{source:\"iana\"},\"audio/musepack\":{source:\"apache\"},\"audio/ogg\":{source:\"iana\",compressible:!1,extensions:[\"oga\",\"ogg\",\"spx\",\"opus\"]},\"audio/opus\":{source:\"iana\"},\"audio/parityfec\":{source:\"iana\"},\"audio/pcma\":{source:\"iana\"},\"audio/pcma-wb\":{source:\"iana\"},\"audio/pcmu\":{source:\"iana\"},\"audio/pcmu-wb\":{source:\"iana\"},\"audio/prs.sid\":{source:\"iana\"},\"audio/qcelp\":{source:\"iana\"},\"audio/raptorfec\":{source:\"iana\"},\"audio/red\":{source:\"iana\"},\"audio/rtp-enc-aescm128\":{source:\"iana\"},\"audio/rtp-midi\":{source:\"iana\"},\"audio/rtploopback\":{source:\"iana\"},\"audio/rtx\":{source:\"iana\"},\"audio/s3m\":{source:\"apache\",extensions:[\"s3m\"]},\"audio/scip\":{source:\"iana\"},\"audio/silk\":{source:\"apache\",extensions:[\"sil\"]},\"audio/smv\":{source:\"iana\"},\"audio/smv-qcp\":{source:\"iana\"},\"audio/smv0\":{source:\"iana\"},\"audio/sofa\":{source:\"iana\"},\"audio/sp-midi\":{source:\"iana\"},\"audio/speex\":{source:\"iana\"},\"audio/t140c\":{source:\"iana\"},\"audio/t38\":{source:\"iana\"},\"audio/telephone-event\":{source:\"iana\"},\"audio/tetra_acelp\":{source:\"iana\"},\"audio/tetra_acelp_bb\":{source:\"iana\"},\"audio/tone\":{source:\"iana\"},\"audio/tsvcis\":{source:\"iana\"},\"audio/uemclip\":{source:\"iana\"},\"audio/ulpfec\":{source:\"iana\"},\"audio/usac\":{source:\"iana\"},\"audio/vdvi\":{source:\"iana\"},\"audio/vmr-wb\":{source:\"iana\"},\"audio/vnd.3gpp.iufp\":{source:\"iana\"},\"audio/vnd.4sb\":{source:\"iana\"},\"audio/vnd.audiokoz\":{source:\"iana\"},\"audio/vnd.celp\":{source:\"iana\"},\"audio/vnd.cisco.nse\":{source:\"iana\"},\"audio/vnd.cmles.radio-events\":{source:\"iana\"},\"audio/vnd.cns.anp1\":{source:\"iana\"},\"audio/vnd.cns.inf1\":{source:\"iana\"},\"audio/vnd.dece.audio\":{source:\"iana\",extensions:[\"uva\",\"uvva\"]},\"audio/vnd.digital-winds\":{source:\"iana\",extensions:[\"eol\"]},\"audio/vnd.dlna.adts\":{source:\"iana\"},\"audio/vnd.dolby.heaac.1\":{source:\"iana\"},\"audio/vnd.dolby.heaac.2\":{source:\"iana\"},\"audio/vnd.dolby.mlp\":{source:\"iana\"},\"audio/vnd.dolby.mps\":{source:\"iana\"},\"audio/vnd.dolby.pl2\":{source:\"iana\"},\"audio/vnd.dolby.pl2x\":{source:\"iana\"},\"audio/vnd.dolby.pl2z\":{source:\"iana\"},\"audio/vnd.dolby.pulse.1\":{source:\"iana\"},\"audio/vnd.dra\":{source:\"iana\",extensions:[\"dra\"]},\"audio/vnd.dts\":{source:\"iana\",extensions:[\"dts\"]},\"audio/vnd.dts.hd\":{source:\"iana\",extensions:[\"dtshd\"]},\"audio/vnd.dts.uhd\":{source:\"iana\"},\"audio/vnd.dvb.file\":{source:\"iana\"},\"audio/vnd.everad.plj\":{source:\"iana\"},\"audio/vnd.hns.audio\":{source:\"iana\"},\"audio/vnd.lucent.voice\":{source:\"iana\",extensions:[\"lvp\"]},\"audio/vnd.ms-playready.media.pya\":{source:\"iana\",extensions:[\"pya\"]},\"audio/vnd.nokia.mobile-xmf\":{source:\"iana\"},\"audio/vnd.nortel.vbk\":{source:\"iana\"},\"audio/vnd.nuera.ecelp4800\":{source:\"iana\",extensions:[\"ecelp4800\"]},\"audio/vnd.nuera.ecelp7470\":{source:\"iana\",extensions:[\"ecelp7470\"]},\"audio/vnd.nuera.ecelp9600\":{source:\"iana\",extensions:[\"ecelp9600\"]},\"audio/vnd.octel.sbc\":{source:\"iana\"},\"audio/vnd.presonus.multitrack\":{source:\"iana\"},\"audio/vnd.qcelp\":{source:\"iana\"},\"audio/vnd.rhetorex.32kadpcm\":{source:\"iana\"},\"audio/vnd.rip\":{source:\"iana\",extensions:[\"rip\"]},\"audio/vnd.rn-realaudio\":{compressible:!1},\"audio/vnd.sealedmedia.softseal.mpeg\":{source:\"iana\"},\"audio/vnd.vmx.cvsd\":{source:\"iana\"},\"audio/vnd.wave\":{compressible:!1},\"audio/vorbis\":{source:\"iana\",compressible:!1},\"audio/vorbis-config\":{source:\"iana\"},\"audio/wav\":{compressible:!1,extensions:[\"wav\"]},\"audio/wave\":{compressible:!1,extensions:[\"wav\"]},\"audio/webm\":{source:\"apache\",compressible:!1,extensions:[\"weba\"]},\"audio/x-aac\":{source:\"apache\",compressible:!1,extensions:[\"aac\"]},\"audio/x-aiff\":{source:\"apache\",extensions:[\"aif\",\"aiff\",\"aifc\"]},\"audio/x-caf\":{source:\"apache\",compressible:!1,extensions:[\"caf\"]},\"audio/x-flac\":{source:\"apache\",extensions:[\"flac\"]},\"audio/x-m4a\":{source:\"nginx\",extensions:[\"m4a\"]},\"audio/x-matroska\":{source:\"apache\",extensions:[\"mka\"]},\"audio/x-mpegurl\":{source:\"apache\",extensions:[\"m3u\"]},\"audio/x-ms-wax\":{source:\"apache\",extensions:[\"wax\"]},\"audio/x-ms-wma\":{source:\"apache\",extensions:[\"wma\"]},\"audio/x-pn-realaudio\":{source:\"apache\",extensions:[\"ram\",\"ra\"]},\"audio/x-pn-realaudio-plugin\":{source:\"apache\",extensions:[\"rmp\"]},\"audio/x-realaudio\":{source:\"nginx\",extensions:[\"ra\"]},\"audio/x-tta\":{source:\"apache\"},\"audio/x-wav\":{source:\"apache\",extensions:[\"wav\"]},\"audio/xm\":{source:\"apache\",extensions:[\"xm\"]},\"chemical/x-cdx\":{source:\"apache\",extensions:[\"cdx\"]},\"chemical/x-cif\":{source:\"apache\",extensions:[\"cif\"]},\"chemical/x-cmdf\":{source:\"apache\",extensions:[\"cmdf\"]},\"chemical/x-cml\":{source:\"apache\",extensions:[\"cml\"]},\"chemical/x-csml\":{source:\"apache\",extensions:[\"csml\"]},\"chemical/x-pdb\":{source:\"apache\"},\"chemical/x-xyz\":{source:\"apache\",extensions:[\"xyz\"]},\"font/collection\":{source:\"iana\",extensions:[\"ttc\"]},\"font/otf\":{source:\"iana\",compressible:!0,extensions:[\"otf\"]},\"font/sfnt\":{source:\"iana\"},\"font/ttf\":{source:\"iana\",compressible:!0,extensions:[\"ttf\"]},\"font/woff\":{source:\"iana\",extensions:[\"woff\"]},\"font/woff2\":{source:\"iana\",extensions:[\"woff2\"]},\"image/aces\":{source:\"iana\",extensions:[\"exr\"]},\"image/apng\":{compressible:!1,extensions:[\"apng\"]},\"image/avci\":{source:\"iana\",extensions:[\"avci\"]},\"image/avcs\":{source:\"iana\",extensions:[\"avcs\"]},\"image/avif\":{source:\"iana\",compressible:!1,extensions:[\"avif\"]},\"image/bmp\":{source:\"iana\",compressible:!0,extensions:[\"bmp\"]},\"image/cgm\":{source:\"iana\",extensions:[\"cgm\"]},\"image/dicom-rle\":{source:\"iana\",extensions:[\"drle\"]},\"image/emf\":{source:\"iana\",extensions:[\"emf\"]},\"image/fits\":{source:\"iana\",extensions:[\"fits\"]},\"image/g3fax\":{source:\"iana\",extensions:[\"g3\"]},\"image/gif\":{source:\"iana\",compressible:!1,extensions:[\"gif\"]},\"image/heic\":{source:\"iana\",extensions:[\"heic\"]},\"image/heic-sequence\":{source:\"iana\",extensions:[\"heics\"]},\"image/heif\":{source:\"iana\",extensions:[\"heif\"]},\"image/heif-sequence\":{source:\"iana\",extensions:[\"heifs\"]},\"image/hej2k\":{source:\"iana\",extensions:[\"hej2\"]},\"image/hsj2\":{source:\"iana\",extensions:[\"hsj2\"]},\"image/ief\":{source:\"iana\",extensions:[\"ief\"]},\"image/jls\":{source:\"iana\",extensions:[\"jls\"]},\"image/jp2\":{source:\"iana\",compressible:!1,extensions:[\"jp2\",\"jpg2\"]},\"image/jpeg\":{source:\"iana\",compressible:!1,extensions:[\"jpeg\",\"jpg\",\"jpe\"]},\"image/jph\":{source:\"iana\",extensions:[\"jph\"]},\"image/jphc\":{source:\"iana\",extensions:[\"jhc\"]},\"image/jpm\":{source:\"iana\",compressible:!1,extensions:[\"jpm\"]},\"image/jpx\":{source:\"iana\",compressible:!1,extensions:[\"jpx\",\"jpf\"]},\"image/jxr\":{source:\"iana\",extensions:[\"jxr\"]},\"image/jxra\":{source:\"iana\",extensions:[\"jxra\"]},\"image/jxrs\":{source:\"iana\",extensions:[\"jxrs\"]},\"image/jxs\":{source:\"iana\",extensions:[\"jxs\"]},\"image/jxsc\":{source:\"iana\",extensions:[\"jxsc\"]},\"image/jxsi\":{source:\"iana\",extensions:[\"jxsi\"]},\"image/jxss\":{source:\"iana\",extensions:[\"jxss\"]},\"image/ktx\":{source:\"iana\",extensions:[\"ktx\"]},\"image/ktx2\":{source:\"iana\",extensions:[\"ktx2\"]},\"image/naplps\":{source:\"iana\"},\"image/pjpeg\":{compressible:!1},\"image/png\":{source:\"iana\",compressible:!1,extensions:[\"png\"]},\"image/prs.btif\":{source:\"iana\",extensions:[\"btif\"]},\"image/prs.pti\":{source:\"iana\",extensions:[\"pti\"]},\"image/pwg-raster\":{source:\"iana\"},\"image/sgi\":{source:\"apache\",extensions:[\"sgi\"]},\"image/svg+xml\":{source:\"iana\",compressible:!0,extensions:[\"svg\",\"svgz\"]},\"image/t38\":{source:\"iana\",extensions:[\"t38\"]},\"image/tiff\":{source:\"iana\",compressible:!1,extensions:[\"tif\",\"tiff\"]},\"image/tiff-fx\":{source:\"iana\",extensions:[\"tfx\"]},\"image/vnd.adobe.photoshop\":{source:\"iana\",compressible:!0,extensions:[\"psd\"]},\"image/vnd.airzip.accelerator.azv\":{source:\"iana\",extensions:[\"azv\"]},\"image/vnd.cns.inf2\":{source:\"iana\"},\"image/vnd.dece.graphic\":{source:\"iana\",extensions:[\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"]},\"image/vnd.djvu\":{source:\"iana\",extensions:[\"djvu\",\"djv\"]},\"image/vnd.dvb.subtitle\":{source:\"iana\",extensions:[\"sub\"]},\"image/vnd.dwg\":{source:\"iana\",extensions:[\"dwg\"]},\"image/vnd.dxf\":{source:\"iana\",extensions:[\"dxf\"]},\"image/vnd.fastbidsheet\":{source:\"iana\",extensions:[\"fbs\"]},\"image/vnd.fpx\":{source:\"iana\",extensions:[\"fpx\"]},\"image/vnd.fst\":{source:\"iana\",extensions:[\"fst\"]},\"image/vnd.fujixerox.edmics-mmr\":{source:\"iana\",extensions:[\"mmr\"]},\"image/vnd.fujixerox.edmics-rlc\":{source:\"iana\",extensions:[\"rlc\"]},\"image/vnd.globalgraphics.pgb\":{source:\"iana\"},\"image/vnd.microsoft.icon\":{source:\"iana\",compressible:!0,extensions:[\"ico\"]},\"image/vnd.mix\":{source:\"iana\"},\"image/vnd.mozilla.apng\":{source:\"iana\"},\"image/vnd.ms-dds\":{compressible:!0,extensions:[\"dds\"]},\"image/vnd.ms-modi\":{source:\"iana\",extensions:[\"mdi\"]},\"image/vnd.ms-photo\":{source:\"apache\",extensions:[\"wdp\"]},\"image/vnd.net-fpx\":{source:\"iana\",extensions:[\"npx\"]},\"image/vnd.pco.b16\":{source:\"iana\",extensions:[\"b16\"]},\"image/vnd.radiance\":{source:\"iana\"},\"image/vnd.sealed.png\":{source:\"iana\"},\"image/vnd.sealedmedia.softseal.gif\":{source:\"iana\"},\"image/vnd.sealedmedia.softseal.jpg\":{source:\"iana\"},\"image/vnd.svf\":{source:\"iana\"},\"image/vnd.tencent.tap\":{source:\"iana\",extensions:[\"tap\"]},\"image/vnd.valve.source.texture\":{source:\"iana\",extensions:[\"vtf\"]},\"image/vnd.wap.wbmp\":{source:\"iana\",extensions:[\"wbmp\"]},\"image/vnd.xiff\":{source:\"iana\",extensions:[\"xif\"]},\"image/vnd.zbrush.pcx\":{source:\"iana\",extensions:[\"pcx\"]},\"image/webp\":{source:\"apache\",extensions:[\"webp\"]},\"image/wmf\":{source:\"iana\",extensions:[\"wmf\"]},\"image/x-3ds\":{source:\"apache\",extensions:[\"3ds\"]},\"image/x-cmu-raster\":{source:\"apache\",extensions:[\"ras\"]},\"image/x-cmx\":{source:\"apache\",extensions:[\"cmx\"]},\"image/x-freehand\":{source:\"apache\",extensions:[\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"]},\"image/x-icon\":{source:\"apache\",compressible:!0,extensions:[\"ico\"]},\"image/x-jng\":{source:\"nginx\",extensions:[\"jng\"]},\"image/x-mrsid-image\":{source:\"apache\",extensions:[\"sid\"]},\"image/x-ms-bmp\":{source:\"nginx\",compressible:!0,extensions:[\"bmp\"]},\"image/x-pcx\":{source:\"apache\",extensions:[\"pcx\"]},\"image/x-pict\":{source:\"apache\",extensions:[\"pic\",\"pct\"]},\"image/x-portable-anymap\":{source:\"apache\",extensions:[\"pnm\"]},\"image/x-portable-bitmap\":{source:\"apache\",extensions:[\"pbm\"]},\"image/x-portable-graymap\":{source:\"apache\",extensions:[\"pgm\"]},\"image/x-portable-pixmap\":{source:\"apache\",extensions:[\"ppm\"]},\"image/x-rgb\":{source:\"apache\",extensions:[\"rgb\"]},\"image/x-tga\":{source:\"apache\",extensions:[\"tga\"]},\"image/x-xbitmap\":{source:\"apache\",extensions:[\"xbm\"]},\"image/x-xcf\":{compressible:!1},\"image/x-xpixmap\":{source:\"apache\",extensions:[\"xpm\"]},\"image/x-xwindowdump\":{source:\"apache\",extensions:[\"xwd\"]},\"message/cpim\":{source:\"iana\"},\"message/delivery-status\":{source:\"iana\"},\"message/disposition-notification\":{source:\"iana\",extensions:[\"disposition-notification\"]},\"message/external-body\":{source:\"iana\"},\"message/feedback-report\":{source:\"iana\"},\"message/global\":{source:\"iana\",extensions:[\"u8msg\"]},\"message/global-delivery-status\":{source:\"iana\",extensions:[\"u8dsn\"]},\"message/global-disposition-notification\":{source:\"iana\",extensions:[\"u8mdn\"]},\"message/global-headers\":{source:\"iana\",extensions:[\"u8hdr\"]},\"message/http\":{source:\"iana\",compressible:!1},\"message/imdn+xml\":{source:\"iana\",compressible:!0},\"message/news\":{source:\"iana\"},\"message/partial\":{source:\"iana\",compressible:!1},\"message/rfc822\":{source:\"iana\",compressible:!0,extensions:[\"eml\",\"mime\"]},\"message/s-http\":{source:\"iana\"},\"message/sip\":{source:\"iana\"},\"message/sipfrag\":{source:\"iana\"},\"message/tracking-status\":{source:\"iana\"},\"message/vnd.si.simp\":{source:\"iana\"},\"message/vnd.wfa.wsc\":{source:\"iana\",extensions:[\"wsc\"]},\"model/3mf\":{source:\"iana\",extensions:[\"3mf\"]},\"model/e57\":{source:\"iana\"},\"model/gltf+json\":{source:\"iana\",compressible:!0,extensions:[\"gltf\"]},\"model/gltf-binary\":{source:\"iana\",compressible:!0,extensions:[\"glb\"]},\"model/iges\":{source:\"iana\",compressible:!1,extensions:[\"igs\",\"iges\"]},\"model/mesh\":{source:\"iana\",compressible:!1,extensions:[\"msh\",\"mesh\",\"silo\"]},\"model/mtl\":{source:\"iana\",extensions:[\"mtl\"]},\"model/obj\":{source:\"iana\",extensions:[\"obj\"]},\"model/step\":{source:\"iana\"},\"model/step+xml\":{source:\"iana\",compressible:!0,extensions:[\"stpx\"]},\"model/step+zip\":{source:\"iana\",compressible:!1,extensions:[\"stpz\"]},\"model/step-xml+zip\":{source:\"iana\",compressible:!1,extensions:[\"stpxz\"]},\"model/stl\":{source:\"iana\",extensions:[\"stl\"]},\"model/vnd.collada+xml\":{source:\"iana\",compressible:!0,extensions:[\"dae\"]},\"model/vnd.dwf\":{source:\"iana\",extensions:[\"dwf\"]},\"model/vnd.flatland.3dml\":{source:\"iana\"},\"model/vnd.gdl\":{source:\"iana\",extensions:[\"gdl\"]},\"model/vnd.gs-gdl\":{source:\"apache\"},\"model/vnd.gs.gdl\":{source:\"iana\"},\"model/vnd.gtw\":{source:\"iana\",extensions:[\"gtw\"]},\"model/vnd.moml+xml\":{source:\"iana\",compressible:!0},\"model/vnd.mts\":{source:\"iana\",extensions:[\"mts\"]},\"model/vnd.opengex\":{source:\"iana\",extensions:[\"ogex\"]},\"model/vnd.parasolid.transmit.binary\":{source:\"iana\",extensions:[\"x_b\"]},\"model/vnd.parasolid.transmit.text\":{source:\"iana\",extensions:[\"x_t\"]},\"model/vnd.pytha.pyox\":{source:\"iana\"},\"model/vnd.rosette.annotated-data-model\":{source:\"iana\"},\"model/vnd.sap.vds\":{source:\"iana\",extensions:[\"vds\"]},\"model/vnd.usdz+zip\":{source:\"iana\",compressible:!1,extensions:[\"usdz\"]},\"model/vnd.valve.source.compiled-map\":{source:\"iana\",extensions:[\"bsp\"]},\"model/vnd.vtu\":{source:\"iana\",extensions:[\"vtu\"]},\"model/vrml\":{source:\"iana\",compressible:!1,extensions:[\"wrl\",\"vrml\"]},\"model/x3d+binary\":{source:\"apache\",compressible:!1,extensions:[\"x3db\",\"x3dbz\"]},\"model/x3d+fastinfoset\":{source:\"iana\",extensions:[\"x3db\"]},\"model/x3d+vrml\":{source:\"apache\",compressible:!1,extensions:[\"x3dv\",\"x3dvz\"]},\"model/x3d+xml\":{source:\"iana\",compressible:!0,extensions:[\"x3d\",\"x3dz\"]},\"model/x3d-vrml\":{source:\"iana\",extensions:[\"x3dv\"]},\"multipart/alternative\":{source:\"iana\",compressible:!1},\"multipart/appledouble\":{source:\"iana\"},\"multipart/byteranges\":{source:\"iana\"},\"multipart/digest\":{source:\"iana\"},\"multipart/encrypted\":{source:\"iana\",compressible:!1},\"multipart/form-data\":{source:\"iana\",compressible:!1},\"multipart/header-set\":{source:\"iana\"},\"multipart/mixed\":{source:\"iana\"},\"multipart/multilingual\":{source:\"iana\"},\"multipart/parallel\":{source:\"iana\"},\"multipart/related\":{source:\"iana\",compressible:!1},\"multipart/report\":{source:\"iana\"},\"multipart/signed\":{source:\"iana\",compressible:!1},\"multipart/vnd.bint.med-plus\":{source:\"iana\"},\"multipart/voice-message\":{source:\"iana\"},\"multipart/x-mixed-replace\":{source:\"iana\"},\"text/1d-interleaved-parityfec\":{source:\"iana\"},\"text/cache-manifest\":{source:\"iana\",compressible:!0,extensions:[\"appcache\",\"manifest\"]},\"text/calendar\":{source:\"iana\",extensions:[\"ics\",\"ifb\"]},\"text/calender\":{compressible:!0},\"text/cmd\":{compressible:!0},\"text/coffeescript\":{extensions:[\"coffee\",\"litcoffee\"]},\"text/cql\":{source:\"iana\"},\"text/cql-expression\":{source:\"iana\"},\"text/cql-identifier\":{source:\"iana\"},\"text/css\":{source:\"iana\",charset:\"UTF-8\",compressible:!0,extensions:[\"css\"]},\"text/csv\":{source:\"iana\",compressible:!0,extensions:[\"csv\"]},\"text/csv-schema\":{source:\"iana\"},\"text/directory\":{source:\"iana\"},\"text/dns\":{source:\"iana\"},\"text/ecmascript\":{source:\"iana\"},\"text/encaprtp\":{source:\"iana\"},\"text/enriched\":{source:\"iana\"},\"text/fhirpath\":{source:\"iana\"},\"text/flexfec\":{source:\"iana\"},\"text/fwdred\":{source:\"iana\"},\"text/gff3\":{source:\"iana\"},\"text/grammar-ref-list\":{source:\"iana\"},\"text/html\":{source:\"iana\",compressible:!0,extensions:[\"html\",\"htm\",\"shtml\"]},\"text/jade\":{extensions:[\"jade\"]},\"text/javascript\":{source:\"iana\",compressible:!0},\"text/jcr-cnd\":{source:\"iana\"},\"text/jsx\":{compressible:!0,extensions:[\"jsx\"]},\"text/less\":{compressible:!0,extensions:[\"less\"]},\"text/markdown\":{source:\"iana\",compressible:!0,extensions:[\"markdown\",\"md\"]},\"text/mathml\":{source:\"nginx\",extensions:[\"mml\"]},\"text/mdx\":{compressible:!0,extensions:[\"mdx\"]},\"text/mizar\":{source:\"iana\"},\"text/n3\":{source:\"iana\",charset:\"UTF-8\",compressible:!0,extensions:[\"n3\"]},\"text/parameters\":{source:\"iana\",charset:\"UTF-8\"},\"text/parityfec\":{source:\"iana\"},\"text/plain\":{source:\"iana\",compressible:!0,extensions:[\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"]},\"text/provenance-notation\":{source:\"iana\",charset:\"UTF-8\"},\"text/prs.fallenstein.rst\":{source:\"iana\"},\"text/prs.lines.tag\":{source:\"iana\",extensions:[\"dsc\"]},\"text/prs.prop.logic\":{source:\"iana\"},\"text/raptorfec\":{source:\"iana\"},\"text/red\":{source:\"iana\"},\"text/rfc822-headers\":{source:\"iana\"},\"text/richtext\":{source:\"iana\",compressible:!0,extensions:[\"rtx\"]},\"text/rtf\":{source:\"iana\",compressible:!0,extensions:[\"rtf\"]},\"text/rtp-enc-aescm128\":{source:\"iana\"},\"text/rtploopback\":{source:\"iana\"},\"text/rtx\":{source:\"iana\"},\"text/sgml\":{source:\"iana\",extensions:[\"sgml\",\"sgm\"]},\"text/shaclc\":{source:\"iana\"},\"text/shex\":{source:\"iana\",extensions:[\"shex\"]},\"text/slim\":{extensions:[\"slim\",\"slm\"]},\"text/spdx\":{source:\"iana\",extensions:[\"spdx\"]},\"text/strings\":{source:\"iana\"},\"text/stylus\":{extensions:[\"stylus\",\"styl\"]},\"text/t140\":{source:\"iana\"},\"text/tab-separated-values\":{source:\"iana\",compressible:!0,extensions:[\"tsv\"]},\"text/troff\":{source:\"iana\",extensions:[\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"]},\"text/turtle\":{source:\"iana\",charset:\"UTF-8\",extensions:[\"ttl\"]},\"text/ulpfec\":{source:\"iana\"},\"text/uri-list\":{source:\"iana\",compressible:!0,extensions:[\"uri\",\"uris\",\"urls\"]},\"text/vcard\":{source:\"iana\",compressible:!0,extensions:[\"vcard\"]},\"text/vnd.a\":{source:\"iana\"},\"text/vnd.abc\":{source:\"iana\"},\"text/vnd.ascii-art\":{source:\"iana\"},\"text/vnd.curl\":{source:\"iana\",extensions:[\"curl\"]},\"text/vnd.curl.dcurl\":{source:\"apache\",extensions:[\"dcurl\"]},\"text/vnd.curl.mcurl\":{source:\"apache\",extensions:[\"mcurl\"]},\"text/vnd.curl.scurl\":{source:\"apache\",extensions:[\"scurl\"]},\"text/vnd.debian.copyright\":{source:\"iana\",charset:\"UTF-8\"},\"text/vnd.dmclientscript\":{source:\"iana\"},\"text/vnd.dvb.subtitle\":{source:\"iana\",extensions:[\"sub\"]},\"text/vnd.esmertec.theme-descriptor\":{source:\"iana\",charset:\"UTF-8\"},\"text/vnd.familysearch.gedcom\":{source:\"iana\",extensions:[\"ged\"]},\"text/vnd.ficlab.flt\":{source:\"iana\"},\"text/vnd.fly\":{source:\"iana\",extensions:[\"fly\"]},\"text/vnd.fmi.flexstor\":{source:\"iana\",extensions:[\"flx\"]},\"text/vnd.gml\":{source:\"iana\"},\"text/vnd.graphviz\":{source:\"iana\",extensions:[\"gv\"]},\"text/vnd.hans\":{source:\"iana\"},\"text/vnd.hgl\":{source:\"iana\"},\"text/vnd.in3d.3dml\":{source:\"iana\",extensions:[\"3dml\"]},\"text/vnd.in3d.spot\":{source:\"iana\",extensions:[\"spot\"]},\"text/vnd.iptc.newsml\":{source:\"iana\"},\"text/vnd.iptc.nitf\":{source:\"iana\"},\"text/vnd.latex-z\":{source:\"iana\"},\"text/vnd.motorola.reflex\":{source:\"iana\"},\"text/vnd.ms-mediapackage\":{source:\"iana\"},\"text/vnd.net2phone.commcenter.command\":{source:\"iana\"},\"text/vnd.radisys.msml-basic-layout\":{source:\"iana\"},\"text/vnd.senx.warpscript\":{source:\"iana\"},\"text/vnd.si.uricatalogue\":{source:\"iana\"},\"text/vnd.sosi\":{source:\"iana\"},\"text/vnd.sun.j2me.app-descriptor\":{source:\"iana\",charset:\"UTF-8\",extensions:[\"jad\"]},\"text/vnd.trolltech.linguist\":{source:\"iana\",charset:\"UTF-8\"},\"text/vnd.wap.si\":{source:\"iana\"},\"text/vnd.wap.sl\":{source:\"iana\"},\"text/vnd.wap.wml\":{source:\"iana\",extensions:[\"wml\"]},\"text/vnd.wap.wmlscript\":{source:\"iana\",extensions:[\"wmls\"]},\"text/vtt\":{source:\"iana\",charset:\"UTF-8\",compressible:!0,extensions:[\"vtt\"]},\"text/x-asm\":{source:\"apache\",extensions:[\"s\",\"asm\"]},\"text/x-c\":{source:\"apache\",extensions:[\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"]},\"text/x-component\":{source:\"nginx\",extensions:[\"htc\"]},\"text/x-fortran\":{source:\"apache\",extensions:[\"f\",\"for\",\"f77\",\"f90\"]},\"text/x-gwt-rpc\":{compressible:!0},\"text/x-handlebars-template\":{extensions:[\"hbs\"]},\"text/x-java-source\":{source:\"apache\",extensions:[\"java\"]},\"text/x-jquery-tmpl\":{compressible:!0},\"text/x-lua\":{extensions:[\"lua\"]},\"text/x-markdown\":{compressible:!0,extensions:[\"mkd\"]},\"text/x-nfo\":{source:\"apache\",extensions:[\"nfo\"]},\"text/x-opml\":{source:\"apache\",extensions:[\"opml\"]},\"text/x-org\":{compressible:!0,extensions:[\"org\"]},\"text/x-pascal\":{source:\"apache\",extensions:[\"p\",\"pas\"]},\"text/x-processing\":{compressible:!0,extensions:[\"pde\"]},\"text/x-sass\":{extensions:[\"sass\"]},\"text/x-scss\":{extensions:[\"scss\"]},\"text/x-setext\":{source:\"apache\",extensions:[\"etx\"]},\"text/x-sfv\":{source:\"apache\",extensions:[\"sfv\"]},\"text/x-suse-ymp\":{compressible:!0,extensions:[\"ymp\"]},\"text/x-uuencode\":{source:\"apache\",extensions:[\"uu\"]},\"text/x-vcalendar\":{source:\"apache\",extensions:[\"vcs\"]},\"text/x-vcard\":{source:\"apache\",extensions:[\"vcf\"]},\"text/xml\":{source:\"iana\",compressible:!0,extensions:[\"xml\"]},\"text/xml-external-parsed-entity\":{source:\"iana\"},\"text/yaml\":{compressible:!0,extensions:[\"yaml\",\"yml\"]},\"video/1d-interleaved-parityfec\":{source:\"iana\"},\"video/3gpp\":{source:\"iana\",extensions:[\"3gp\",\"3gpp\"]},\"video/3gpp-tt\":{source:\"iana\"},\"video/3gpp2\":{source:\"iana\",extensions:[\"3g2\"]},\"video/av1\":{source:\"iana\"},\"video/bmpeg\":{source:\"iana\"},\"video/bt656\":{source:\"iana\"},\"video/celb\":{source:\"iana\"},\"video/dv\":{source:\"iana\"},\"video/encaprtp\":{source:\"iana\"},\"video/ffv1\":{source:\"iana\"},\"video/flexfec\":{source:\"iana\"},\"video/h261\":{source:\"iana\",extensions:[\"h261\"]},\"video/h263\":{source:\"iana\",extensions:[\"h263\"]},\"video/h263-1998\":{source:\"iana\"},\"video/h263-2000\":{source:\"iana\"},\"video/h264\":{source:\"iana\",extensions:[\"h264\"]},\"video/h264-rcdo\":{source:\"iana\"},\"video/h264-svc\":{source:\"iana\"},\"video/h265\":{source:\"iana\"},\"video/iso.segment\":{source:\"iana\",extensions:[\"m4s\"]},\"video/jpeg\":{source:\"iana\",extensions:[\"jpgv\"]},\"video/jpeg2000\":{source:\"iana\"},\"video/jpm\":{source:\"apache\",extensions:[\"jpm\",\"jpgm\"]},\"video/jxsv\":{source:\"iana\"},\"video/mj2\":{source:\"iana\",extensions:[\"mj2\",\"mjp2\"]},\"video/mp1s\":{source:\"iana\"},\"video/mp2p\":{source:\"iana\"},\"video/mp2t\":{source:\"iana\",extensions:[\"ts\"]},\"video/mp4\":{source:\"iana\",compressible:!1,extensions:[\"mp4\",\"mp4v\",\"mpg4\"]},\"video/mp4v-es\":{source:\"iana\"},\"video/mpeg\":{source:\"iana\",compressible:!1,extensions:[\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"]},\"video/mpeg4-generic\":{source:\"iana\"},\"video/mpv\":{source:\"iana\"},\"video/nv\":{source:\"iana\"},\"video/ogg\":{source:\"iana\",compressible:!1,extensions:[\"ogv\"]},\"video/parityfec\":{source:\"iana\"},\"video/pointer\":{source:\"iana\"},\"video/quicktime\":{source:\"iana\",compressible:!1,extensions:[\"qt\",\"mov\"]},\"video/raptorfec\":{source:\"iana\"},\"video/raw\":{source:\"iana\"},\"video/rtp-enc-aescm128\":{source:\"iana\"},\"video/rtploopback\":{source:\"iana\"},\"video/rtx\":{source:\"iana\"},\"video/scip\":{source:\"iana\"},\"video/smpte291\":{source:\"iana\"},\"video/smpte292m\":{source:\"iana\"},\"video/ulpfec\":{source:\"iana\"},\"video/vc1\":{source:\"iana\"},\"video/vc2\":{source:\"iana\"},\"video/vnd.cctv\":{source:\"iana\"},\"video/vnd.dece.hd\":{source:\"iana\",extensions:[\"uvh\",\"uvvh\"]},\"video/vnd.dece.mobile\":{source:\"iana\",extensions:[\"uvm\",\"uvvm\"]},\"video/vnd.dece.mp4\":{source:\"iana\"},\"video/vnd.dece.pd\":{source:\"iana\",extensions:[\"uvp\",\"uvvp\"]},\"video/vnd.dece.sd\":{source:\"iana\",extensions:[\"uvs\",\"uvvs\"]},\"video/vnd.dece.video\":{source:\"iana\",extensions:[\"uvv\",\"uvvv\"]},\"video/vnd.directv.mpeg\":{source:\"iana\"},\"video/vnd.directv.mpeg-tts\":{source:\"iana\"},\"video/vnd.dlna.mpeg-tts\":{source:\"iana\"},\"video/vnd.dvb.file\":{source:\"iana\",extensions:[\"dvb\"]},\"video/vnd.fvt\":{source:\"iana\",extensions:[\"fvt\"]},\"video/vnd.hns.video\":{source:\"iana\"},\"video/vnd.iptvforum.1dparityfec-1010\":{source:\"iana\"},\"video/vnd.iptvforum.1dparityfec-2005\":{source:\"iana\"},\"video/vnd.iptvforum.2dparityfec-1010\":{source:\"iana\"},\"video/vnd.iptvforum.2dparityfec-2005\":{source:\"iana\"},\"video/vnd.iptvforum.ttsavc\":{source:\"iana\"},\"video/vnd.iptvforum.ttsmpeg2\":{source:\"iana\"},\"video/vnd.motorola.video\":{source:\"iana\"},\"video/vnd.motorola.videop\":{source:\"iana\"},\"video/vnd.mpegurl\":{source:\"iana\",extensions:[\"mxu\",\"m4u\"]},\"video/vnd.ms-playready.media.pyv\":{source:\"iana\",extensions:[\"pyv\"]},\"video/vnd.nokia.interleaved-multimedia\":{source:\"iana\"},\"video/vnd.nokia.mp4vr\":{source:\"iana\"},\"video/vnd.nokia.videovoip\":{source:\"iana\"},\"video/vnd.objectvideo\":{source:\"iana\"},\"video/vnd.radgamettools.bink\":{source:\"iana\"},\"video/vnd.radgamettools.smacker\":{source:\"iana\"},\"video/vnd.sealed.mpeg1\":{source:\"iana\"},\"video/vnd.sealed.mpeg4\":{source:\"iana\"},\"video/vnd.sealed.swf\":{source:\"iana\"},\"video/vnd.sealedmedia.softseal.mov\":{source:\"iana\"},\"video/vnd.uvvu.mp4\":{source:\"iana\",extensions:[\"uvu\",\"uvvu\"]},\"video/vnd.vivo\":{source:\"iana\",extensions:[\"viv\"]},\"video/vnd.youtube.yt\":{source:\"iana\"},\"video/vp8\":{source:\"iana\"},\"video/vp9\":{source:\"iana\"},\"video/webm\":{source:\"apache\",compressible:!1,extensions:[\"webm\"]},\"video/x-f4v\":{source:\"apache\",extensions:[\"f4v\"]},\"video/x-fli\":{source:\"apache\",extensions:[\"fli\"]},\"video/x-flv\":{source:\"apache\",compressible:!1,extensions:[\"flv\"]},\"video/x-m4v\":{source:\"apache\",extensions:[\"m4v\"]},\"video/x-matroska\":{source:\"apache\",compressible:!1,extensions:[\"mkv\",\"mk3d\",\"mks\"]},\"video/x-mng\":{source:\"apache\",extensions:[\"mng\"]},\"video/x-ms-asf\":{source:\"apache\",extensions:[\"asf\",\"asx\"]},\"video/x-ms-vob\":{source:\"apache\",extensions:[\"vob\"]},\"video/x-ms-wm\":{source:\"apache\",extensions:[\"wm\"]},\"video/x-ms-wmv\":{source:\"apache\",compressible:!1,extensions:[\"wmv\"]},\"video/x-ms-wmx\":{source:\"apache\",extensions:[\"wmx\"]},\"video/x-ms-wvx\":{source:\"apache\",extensions:[\"wvx\"]},\"video/x-msvideo\":{source:\"apache\",extensions:[\"avi\"]},\"video/x-sgi-movie\":{source:\"apache\",extensions:[\"movie\"]},\"video/x-smv\":{source:\"apache\",extensions:[\"smv\"]},\"x-conference/x-cooltalk\":{source:\"apache\",extensions:[\"ice\"]},\"x-shader/x-fragment\":{compressible:!0},\"x-shader/x-vertex\":{compressible:!0}}},{}],413:[function(e,t,n){t.exports=e(\"./db.json\")},{\"./db.json\":412}],414:[function(e,t,n){t.exports={\"application/x-www-form-urlencoded\":{type:\"text\",format:\"plain\"},\"application/pdf\":{type:\"embed\",format:\"pdf\"},\"text/javascript\":{type:\"text\",format:\"script\"},\"application/javascript\":{type:\"text\",format:\"script\"},\"application/ecmascript\":{type:\"text\",format:\"script\"},\"application/x-ecmascript\":{type:\"text\",format:\"script\"},\"application/x-javascript\":{type:\"text\",format:\"script\"},\"text/ecmascript\":{type:\"text\",format:\"script\"},\"text/javascript1.0\":{type:\"text\",format:\"script\"},\"text/javascript1.1\":{type:\"text\",format:\"script\"},\"text/javascript1.2\":{type:\"text\",format:\"script\"},\"text/javascript1.3\":{type:\"text\",format:\"script\"},\"text/javascript1.4\":{type:\"text\",format:\"script\"},\"text/javascript1.5\":{type:\"text\",format:\"script\"},\"text/jscript\":{type:\"text\",format:\"script\"},\"text/livescript\":{type:\"text\",format:\"script\"},\"text/x-ecmascript\":{type:\"text\",format:\"script\"},\"text/x-javascript\":{type:\"text\",format:\"script\"},\"text/css\":{type:\"text\",format:\"stylesheet\"},\"application/json\":{type:\"text\",format:\"json\"},\"application/json5\":{type:\"text\",format:\"json\"},\"application/jwt\":{type:\"text\",format:\"jwt\"},\"application/xml\":{type:\"text\",format:\"xml\"},\"application/xml-dtd\":{type:\"text\",format:\"xml\"},\"application/xml+dtd\":{type:\"text\",format:\"xml\"},\"application/xml-external-parsed-entity\":{type:\"text\",format:\"xml\"},\"application/xml-patch+xml\":{type:\"text\",format:\"xml\"},\"application/3gpdash-qoe-report+xml\":{type:\"text\",format:\"xml\"},\"application/3gpp-ims+xml\":{type:\"text\",format:\"xml\"},\"application/atom+xml\":{type:\"text\",format:\"xml\"},\"application/atomcat+xml\":{type:\"text\",format:\"xml\"},\"application/atomdeleted+xml\":{type:\"text\",format:\"xml\"},\"application/atomsvc+xml\":{type:\"text\",format:\"xml\"},\"application/auth-policy+xml\":{type:\"text\",format:\"xml\"},\"application/beep+xml\":{type:\"text\",format:\"xml\"},\"application/calendar+xml\":{type:\"text\",format:\"xml\"},\"application/ccmp+xml\":{type:\"text\",format:\"xml\"},\"application/ccxml+xml\":{type:\"text\",format:\"xml\"},\"application/cdfx+xml\":{type:\"text\",format:\"xml\"},\"application/cea-2018+xml\":{type:\"text\",format:\"xml\"},\"application/cellml+xml\":{type:\"text\",format:\"xml\"},\"application/cnrp+xml\":{type:\"text\",format:\"xml\"},\"application/conference-info+xml\":{type:\"text\",format:\"xml\"},\"application/cpl+xml\":{type:\"text\",format:\"xml\"},\"application/csta+xml\":{type:\"text\",format:\"xml\"},\"application/cstadata+xml\":{type:\"text\",format:\"xml\"},\"application/dash+xml\":{type:\"text\",format:\"xml\"},\"application/davmount+xml\":{type:\"text\",format:\"xml\"},\"application/dialog-info+xml\":{type:\"text\",format:\"xml\"},\"application/docbook+xml\":{type:\"text\",format:\"xml\"},\"application/dskpp+xml\":{type:\"text\",format:\"xml\"},\"application/dssc+xml\":{type:\"text\",format:\"xml\"},\"application/emergencycalldata.comment+xml\":{type:\"text\",format:\"xml\"},\"application/emergencycalldata.deviceinfo+xml\":{type:\"text\",format:\"xml\"},\"application/emergencycalldata.providerinfo+xml\":{type:\"text\",format:\"xml\"},\"application/emergencycalldata.serviceinfo+xml\":{type:\"text\",format:\"xml\"},\"application/emergencycalldata.subscriberinfo+xml\":{type:\"text\",format:\"xml\"},\"application/emma+xml\":{type:\"text\",format:\"xml\"},\"application/emotionml+xml\":{type:\"text\",format:\"xml\"},\"application/epp+xml\":{type:\"text\",format:\"xml\"},\"application/fdt+xml\":{type:\"text\",format:\"xml\"},\"application/framework-attributes+xml\":{type:\"text\",format:\"xml\"},\"application/gml+xml\":{type:\"text\",format:\"xml\"},\"application/gpx+xml\":{type:\"text\",format:\"xml\"},\"application/held+xml\":{type:\"text\",format:\"xml\"},\"application/ibe-key-request+xml\":{type:\"text\",format:\"xml\"},\"application/ibe-pkg-reply+xml\":{type:\"text\",format:\"xml\"},\"application/im-iscomposing+xml\":{type:\"text\",format:\"xml\"},\"application/inkml+xml\":{type:\"text\",format:\"xml\"},\"application/its+xml\":{type:\"text\",format:\"xml\"},\"application/kpml-request+xml\":{type:\"text\",format:\"xml\"},\"application/kpml-response+xml\":{type:\"text\",format:\"xml\"},\"application/load-control+xml\":{type:\"text\",format:\"xml\"},\"application/lost+xml\":{type:\"text\",format:\"xml\"},\"application/lostsync+xml\":{type:\"text\",format:\"xml\"},\"application/mads+xml\":{type:\"text\",format:\"xml\"},\"application/marcxml+xml\":{type:\"text\",format:\"xml\"},\"application/mathml+xml\":{type:\"text\",format:\"xml\"},\"application/mathml-content+xml\":{type:\"text\",format:\"xml\"},\"application/mathml-presentation+xml\":{type:\"text\",format:\"xml\"},\"application/mbms-associated-procedure-description+xml\":{type:\"text\",format:\"xml\"},\"application/mbms-deregister+xml\":{type:\"text\",format:\"xml\"},\"application/mbms-envelope+xml\":{type:\"text\",format:\"xml\"},\"application/mbms-msk+xml\":{type:\"text\",format:\"xml\"},\"application/mbms-msk-response+xml\":{type:\"text\",format:\"xml\"},\"application/mbms-protection-description+xml\":{type:\"text\",format:\"xml\"},\"application/mbms-reception-report+xml\":{type:\"text\",format:\"xml\"},\"application/mbms-register+xml\":{type:\"text\",format:\"xml\"},\"application/mbms-register-response+xml\":{type:\"text\",format:\"xml\"},\"application/mbms-schedule+xml\":{type:\"text\",format:\"xml\"},\"application/mbms-user-service-description+xml\":{type:\"text\",format:\"xml\"},\"application/media-policy-dataset+xml\":{type:\"text\",format:\"xml\"},\"application/media_control+xml\":{type:\"text\",format:\"xml\"},\"application/mediaservercontrol+xml\":{type:\"text\",format:\"xml\"},\"application/metalink+xml\":{type:\"text\",format:\"xml\"},\"application/metalink4+xml\":{type:\"text\",format:\"xml\"},\"application/mets+xml\":{type:\"text\",format:\"xml\"},\"application/mods+xml\":{type:\"text\",format:\"xml\"},\"application/mrb-consumer+xml\":{type:\"text\",format:\"xml\"},\"application/mrb-publish+xml\":{type:\"text\",format:\"xml\"},\"application/msc-ivr+xml\":{type:\"text\",format:\"xml\"},\"application/msc-mixer+xml\":{type:\"text\",format:\"xml\"},\"application/nlsml+xml\":{type:\"text\",format:\"xml\"},\"application/oebps-package+xml\":{type:\"text\",format:\"xml\"},\"application/omdoc+xml\":{type:\"text\",format:\"xml\"},\"application/p2p-overlay+xml\":{type:\"text\",format:\"xml\"},\"application/patch-ops-error+xml\":{type:\"text\",format:\"xml\"},\"application/pidf+xml\":{type:\"text\",format:\"xml\"},\"application/pidf-diff+xml\":{type:\"text\",format:\"xml\"},\"application/pls+xml\":{type:\"text\",format:\"xml\"},\"application/poc-settings+xml\":{type:\"text\",format:\"xml\"},\"application/problem+xml\":{type:\"text\",format:\"xml\"},\"application/provenance+xml\":{type:\"text\",format:\"xml\"},\"application/prs.xsf+xml\":{type:\"text\",format:\"xml\"},\"application/pskc+xml\":{type:\"text\",format:\"xml\"},\"application/rdf+xml\":{type:\"text\",format:\"xml\"},\"application/reginfo+xml\":{type:\"text\",format:\"xml\"},\"application/resource-lists+xml\":{type:\"text\",format:\"xml\"},\"application/resource-lists-diff+xml\":{type:\"text\",format:\"xml\"},\"application/rfc+xml\":{type:\"text\",format:\"xml\"},\"application/rlmi+xml\":{type:\"text\",format:\"xml\"},\"application/rls-services+xml\":{type:\"text\",format:\"xml\"},\"application/rsd+xml\":{type:\"text\",format:\"xml\"},\"application/rss+xml\":{type:\"text\",format:\"xml\"},\"application/samlassertion+xml\":{type:\"text\",format:\"xml\"},\"application/samlmetadata+xml\":{type:\"text\",format:\"xml\"},\"application/sbml+xml\":{type:\"text\",format:\"xml\"},\"application/scaip+xml\":{type:\"text\",format:\"xml\"},\"application/sep+xml\":{type:\"text\",format:\"xml\"},\"application/shf+xml\":{type:\"text\",format:\"xml\"},\"application/simple-filter+xml\":{type:\"text\",format:\"xml\"},\"application/smil+xml\":{type:\"text\",format:\"xml\"},\"application/soap+xml\":{type:\"text\",format:\"xml\"},\"application/sparql-results+xml\":{type:\"text\",format:\"xml\"},\"application/spirits-event+xml\":{type:\"text\",format:\"xml\"},\"application/srgs+xml\":{type:\"text\",format:\"xml\"},\"application/sru+xml\":{type:\"text\",format:\"xml\"},\"application/ssdl+xml\":{type:\"text\",format:\"xml\"},\"application/ssml+xml\":{type:\"text\",format:\"xml\"},\"application/tei+xml\":{type:\"text\",format:\"xml\"},\"application/thraud+xml\":{type:\"text\",format:\"xml\"},\"application/ttml+xml\":{type:\"text\",format:\"xml\"},\"application/urc-grpsheet+xml\":{type:\"text\",format:\"xml\"},\"application/urc-ressheet+xml\":{type:\"text\",format:\"xml\"},\"application/urc-targetdesc+xml\":{type:\"text\",format:\"xml\"},\"application/urc-uisocketdesc+xml\":{type:\"text\",format:\"xml\"},\"application/vcard+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.3gpp-prose+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.3gpp-prose-pc3ch+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.3gpp.access-transfer-events+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.3gpp.bsf+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.3gpp.mid-call+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.3gpp.sms+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.3gpp.srvcc-ext+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.3gpp.srvcc-info+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.3gpp.state-and-event-info+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.3gpp.ussd+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.3gpp2.bcmcsinfo+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.adobe.xdp+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.amundsen.maze+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.apple.installer+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.avistar+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.balsamiq.bmml+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.biopax.rdf+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.chemdraw+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.citationstyles.style+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.criticaltools.wbs+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.ctct.ws+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.cyan.dean.root+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.dece.ttml+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.dm.delegation+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.dvb.notif-aggregate-root+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.dvb.notif-container+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.dvb.notif-generic+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.dvb.notif-ia-msglist+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.dvb.notif-ia-registration-request+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.dvb.notif-ia-registration-response+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.dvb.notif-init+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.emclient.accessrequest+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.eprints.data+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.eszigno3+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.aoc+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.cug+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.iptvcommand+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.iptvdiscovery+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.iptvprofile+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.iptvsad-bc+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.iptvsad-cod+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.iptvsad-npvr+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.iptvservice+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.iptvsync+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.iptvueprofile+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.mcid+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.overload-control-policy-dataset+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.pstn+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.sci+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.simservs+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.etsi.tsl+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.geocube+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.google-earth.kml+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.gov.sk.e-form+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.gov.sk.xmldatacontainer+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.hal+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.handheld-entertainment+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.informedcontrol.rms+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.infotech.project+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.iptc.g2.catalogitem+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.iptc.g2.conceptitem+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.iptc.g2.knowledgeitem+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.iptc.g2.newsitem+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.iptc.g2.newsmessage+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.iptc.g2.packageitem+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.iptc.g2.planningitem+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.irepository.package+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.las.las+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.liberty-request+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.llamagraphics.life-balance.exchange+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.marlin.drm.actiontoken+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.marlin.drm.conftoken+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.marlin.drm.license+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.mozilla.xul+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.ms-office.activex+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.ms-playready.initiator+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.ms-printdevicecapabilities+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.ms-printing.printticket+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.ms-printschematicket+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.nokia.conml+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.nokia.iptv.config+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.nokia.landmark+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.nokia.landmarkcollection+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.nokia.n-gage.ac+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.nokia.pcd+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oipf.contentaccessdownload+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oipf.contentaccessstreaming+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oipf.dae.svg+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oipf.dae.xhtml+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oipf.mippvcontrolmessage+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oipf.spdiscovery+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oipf.spdlist+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oipf.ueprofile+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oipf.userprofile+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.bcast.associated-procedure-parameter+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.bcast.drm-trigger+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.bcast.imd+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.bcast.notification+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.bcast.sgdd+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.bcast.smartcard-trigger+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.bcast.sprov+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.cab-address-book+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.cab-feature-handler+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.cab-pcc+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.cab-subs-invite+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.cab-user-prefs+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.dd2+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.drm.risd+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.group-usage-list+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.pal+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.poc.detailed-progress-report+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.poc.final-report+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.poc.groups+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.poc.invocation-descriptor+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.poc.optimized-progress-report+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.scidm.messages+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.oma.xcap-directory+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.omads-email+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.omads-file+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.omads-folder+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openblox.game+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.custom-properties+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.customxmlproperties+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.drawing+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.extended-properties+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.tags+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.theme+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.themeoverride+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-package.core-properties+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.openxmlformats-package.relationships+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.otps.ct-kip+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.paos+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.poc.group-advertisement+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.pwg-xhtml-print+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.moml+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-audit+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-audit-conf+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-audit-conn+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-audit-dialog+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-audit-stream+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-conf+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-dialog+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-dialog-base+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-dialog-fax-detect+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-dialog-fax-sendrecv+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-dialog-group+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-dialog-speech+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.radisys.msml-dialog-transform+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.recordare.musicxml+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.route66.link66+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.software602.filler.form+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.solent.sdkm+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.sun.wadl+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.syncml+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.syncml.dm+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.syncml.dmddf+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.syncml.dmtnds+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.tmd.mediaflex.api+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.uoml+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.wv.csp+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.wv.ssp+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.xmi+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.yamaha.openscoreformat.osfpvg+xml\":{type:\"text\",format:\"xml\"},\"application/vnd.zzazz.deck+xml\":{type:\"text\",format:\"xml\"},\"application/voicexml+xml\":{type:\"text\",format:\"xml\"},\"application/watcherinfo+xml\":{type:\"text\",format:\"xml\"},\"application/wsdl+xml\":{type:\"text\",format:\"xml\"},\"application/wspolicy+xml\":{type:\"text\",format:\"xml\"},\"application/x-dtbncx+xml\":{type:\"text\",format:\"xml\"},\"application/x-dtbook+xml\":{type:\"text\",format:\"xml\"},\"application/x-dtbresource+xml\":{type:\"text\",format:\"xml\"},\"application/x-xliff+xml\":{type:\"text\",format:\"xml\"},\"application/xacml+xml\":{type:\"text\",format:\"xml\"},\"application/xaml+xml\":{type:\"text\",format:\"xml\"},\"application/xcap-att+xml\":{type:\"text\",format:\"xml\"},\"application/xcap-caps+xml\":{type:\"text\",format:\"xml\"},\"application/xcap-diff+xml\":{type:\"text\",format:\"xml\"},\"application/xcap-el+xml\":{type:\"text\",format:\"xml\"},\"application/xcap-error+xml\":{type:\"text\",format:\"xml\"},\"application/xcap-ns+xml\":{type:\"text\",format:\"xml\"},\"application/xcon-conference-info+xml\":{type:\"text\",format:\"xml\"},\"application/xcon-conference-info-diff+xml\":{type:\"text\",format:\"xml\"},\"application/xenc+xml\":{type:\"text\",format:\"xml\"},\"application/xhtml+xml\":{type:\"text\",format:\"xml\"},\"application/xhtml-voice+xml\":{type:\"text\",format:\"xml\"},\"application/xmpp+xml\":{type:\"text\",format:\"xml\"},\"application/xop+xml\":{type:\"text\",format:\"xml\"},\"application/xproc+xml\":{type:\"text\",format:\"xml\"},\"application/xslt+xml\":{type:\"text\",format:\"xml\"},\"application/xspf+xml\":{type:\"text\",format:\"xml\"},\"application/xv+xml\":{type:\"text\",format:\"xml\"},\"application/yin+xml\":{type:\"text\",format:\"xml\"},\"message/imdn+xml\":{type:\"text\",format:\"xml\"},\"model/vnd.collada+xml\":{type:\"text\",format:\"xml\"},\"model/vnd.moml+xml\":{type:\"text\",format:\"xml\"},\"model/x3d+xml\":{type:\"text\",format:\"xml\"},\"application/alto-costmap+json\":{type:\"text\",format:\"json\"},\"application/alto-costmapfilter+json\":{type:\"text\",format:\"json\"},\"application/alto-directory+json\":{type:\"text\",format:\"json\"},\"application/alto-endpointcost+json\":{type:\"text\",format:\"json\"},\"application/alto-endpointcostparams+json\":{type:\"text\",format:\"json\"},\"application/alto-endpointprop+json\":{type:\"text\",format:\"json\"},\"application/alto-endpointpropparams+json\":{type:\"text\",format:\"json\"},\"application/alto-error+json\":{type:\"text\",format:\"json\"},\"application/alto-networkmap+json\":{type:\"text\",format:\"json\"},\"application/alto-networkmapfilter+json\":{type:\"text\",format:\"json\"},\"application/calendar+json\":{type:\"text\",format:\"json\"},\"application/coap-group+json\":{type:\"text\",format:\"json\"},\"application/csvm+json\":{type:\"text\",format:\"json\"},\"application/jose+json\":{type:\"text\",format:\"json\"},\"application/jrd+json\":{type:\"text\",format:\"json\"},\"application/json-patch+json\":{type:\"text\",format:\"json\"},\"application/jsonml+json\":{type:\"text\",format:\"json\"},\"application/jwk+json\":{type:\"text\",format:\"json\"},\"application/jwk-set+json\":{type:\"text\",format:\"json\"},\"application/ld+json\":{type:\"text\",format:\"json\"},\"application/manifest+json\":{type:\"text\",format:\"json\"},\"application/merge-patch+json\":{type:\"text\",format:\"json\"},\"application/ppsp-tracker+json\":{type:\"text\",format:\"json\"},\"application/problem+json\":{type:\"text\",format:\"json\"},\"application/rdap+json\":{type:\"text\",format:\"json\"},\"application/reputon+json\":{type:\"text\",format:\"json\"},\"application/scim+json\":{type:\"text\",format:\"json\"},\"application/vcard+json\":{type:\"text\",format:\"json\"},\"application/vnd.api+json\":{type:\"text\",format:\"json\"},\"application/vnd.bekitzur-stech+json\":{type:\"text\",format:\"json\"},\"application/vnd.collection+json\":{type:\"text\",format:\"json\"},\"application/vnd.collection.doc+json\":{type:\"text\",format:\"json\"},\"application/vnd.collection.next+json\":{type:\"text\",format:\"json\"},\"application/vnd.coreos.ignition+json\":{type:\"text\",format:\"json\"},\"application/vnd.document+json\":{type:\"text\",format:\"json\"},\"application/vnd.drive+json\":{type:\"text\",format:\"json\"},\"application/vnd.geo+json\":{type:\"text\",format:\"json\"},\"application/vnd.hal+json\":{type:\"text\",format:\"json\"},\"application/vnd.heroku+json\":{type:\"text\",format:\"json\"},\"application/vnd.hyperdrive+json\":{type:\"text\",format:\"json\"},\"application/vnd.ims.lis.v2.result+json\":{type:\"text\",format:\"json\"},\"application/vnd.ims.lti.v2.toolconsumerprofile+json\":{type:\"text\",format:\"json\"},\"application/vnd.ims.lti.v2.toolproxy+json\":{type:\"text\",format:\"json\"},\"application/vnd.ims.lti.v2.toolproxy.id+json\":{type:\"text\",format:\"json\"},\"application/vnd.ims.lti.v2.toolsettings+json\":{type:\"text\",format:\"json\"},\"application/vnd.ims.lti.v2.toolsettings.simple+json\":{type:\"text\",format:\"json\"},\"application/vnd.mason+json\":{type:\"text\",format:\"json\"},\"application/vnd.micro+json\":{type:\"text\",format:\"json\"},\"application/vnd.miele+json\":{type:\"text\",format:\"json\"},\"application/vnd.oftn.l10n+json\":{type:\"text\",format:\"json\"},\"application/vnd.oracle.resource+json\":{type:\"text\",format:\"json\"},\"application/vnd.pagerduty+json\":{type:\"text\",format:\"json\"},\"application/vnd.siren+json\":{type:\"text\",format:\"json\"},\"application/vnd.vel+json\":{type:\"text\",format:\"json\"},\"application/vnd.xacml+json\":{type:\"text\",format:\"json\"},\"application/x-web-app-manifest+json\":{type:\"text\",format:\"json\"},\"application/ogg\":{type:\"audio\",format:\"ogg\"}}},{}],415:[function(e,t,n){var a=e(\"./db.json\"),r=\"text\",i=/(audio|video|image|text)/,o=/(jsonp|json|xml|html|yaml|vml|webml|script)/,s=/\\/[^\\/]*(audio|video|image|text)/,c=/(application|message|multipart)/;t.exports={guess:function(e){var t,n,a={type:\"unknown\",format:\"raw\",guessed:!0};return(t=(n=(n=e.split(\"/\"))&&n[0]||\"\").match(i))&&t[1]?(a.type=a.format=t[1],a.type===r&&(t=e.match(o),a.format=t&&t[1]||\"plain\"),a):(t=e.match(o))&&t[1]?(a.type=r,a.format=t[1],a):(t=e.match(s))&&t[1]?(a.type=a.format=t[1],a):(t=n.match(c))&&t[1]?(a.type=t[1],a.format=\"raw\",a):(a.orphan=!0,a)},lookup:function(n){var r,i=e(\"charset\")(n);return n=String(n).toLowerCase().replace(/\\s/g,\"\").replace(/^([^;]+).*$/g,\"$1\"),(r=(r=a[n])?Object.assign({},r):t.exports.guess(n))&&i&&(r.charset=i),r&&(r.source=n),r}}},{\"./db.json\":414,charset:282}],416:[function(e,t,n){\"use strict\";var a,r,i,o=e(\"mime-db\"),s=e(\"path\").extname,c=/^\\s*([^;\\s]*)(?:;|\\s|$)/,u=/^text\\//i;function l(e){if(!e||\"string\"!=typeof e)return!1;var t=c.exec(e),n=t&&o[t[1].toLowerCase()];return n&&n.charset?n.charset:!(!t||!u.test(t[1]))&&\"UTF-8\"}n.charset=l,n.charsets={lookup:l},n.contentType=function(e){if(!e||\"string\"!=typeof e)return!1;var t=-1===e.indexOf(\"/\")?n.lookup(e):e;if(!t)return!1;if(-1===t.indexOf(\"charset\")){var a=n.charset(t);a&&(t+=\"; charset=\"+a.toLowerCase())}return t},n.extension=function(e){if(!e||\"string\"!=typeof e)return!1;var t=c.exec(e),a=t&&n.extensions[t[1].toLowerCase()];if(!a||!a.length)return!1;return a[0]},n.extensions=Object.create(null),n.lookup=function(e){if(!e||\"string\"!=typeof e)return!1;var t=s(\"x.\"+e).toLowerCase().substr(1);if(!t)return!1;return n.types[t]||!1},n.types=Object.create(null),a=n.extensions,r=n.types,i=[\"nginx\",\"apache\",void 0,\"iana\"],Object.keys(o).forEach((function(e){var t=o[e],n=t.extensions;if(n&&n.length){a[e]=n;for(var s=0;s<n.length;s++){var c=n[s];if(r[c]){var u=i.indexOf(o[r[c]].source),l=i.indexOf(t.source);if(\"application/octet-stream\"!==r[c]&&(u>l||u===l&&\"application/\"===r[c].substr(0,12)))continue}r[c]=e}}}))},{\"mime-db\":413,path:\"path\"}],417:[function(e,t,n){t.exports=function(e){var t=e[0],n=e[1]-1;if(n<0&&t<=0)return i;if(-1===t)return function(e){return e<=n};if(0===t)return function(e){return e===n};if(1===t)return n<0?r:function(e){return e>=n};var a=n%t;a<0&&(a+=t);if(t>1)return function(e){return e>=n&&e%t===a};return t*=-1,function(e){return e<=n&&e%t===a}};var a=e(\"boolbase\"),r=a.trueFunc,i=a.falseFunc},{boolbase:240}],418:[function(e,t,n){var a=e(\"./parse.js\"),r=e(\"./compile.js\");t.exports=function(e){return r(a(e))},t.exports.parse=a,t.exports.compile=r},{\"./compile.js\":417,\"./parse.js\":419}],419:[function(e,t,n){t.exports=function(e){if(\"even\"===(e=e.trim().toLowerCase()))return[2,0];if(\"odd\"===e)return[2,1];var t,n=e.match(a);if(!n)throw new SyntaxError(\"n-th rule couldn't be parsed ('\"+e+\"')\");return n[1]?(t=parseInt(n[1],10),isNaN(t)&&(t=\"-\"===n[1].charAt(0)?-1:1)):t=0,[t,n[3]?parseInt((n[2]||\"\")+n[3],10):0]};var a=/^([+\\-]?\\d*n)?\\s*(?:([+\\-]?)\\s*(\\d+))?$/},{}],420:[function(e,t,n){\"use strict\";var a=function(e){return e!=e};t.exports=function(e,t){return 0===e&&0===t?1/e==1/t:e===t||!(!a(e)||!a(t))}},{}],421:[function(e,t,n){\"use strict\";var a=e(\"define-properties\"),r=e(\"call-bind\"),i=e(\"./implementation\"),o=e(\"./polyfill\"),s=e(\"./shim\"),c=r(o(),Object);a(c,{getPolyfill:o,implementation:i,shim:s}),t.exports=c},{\"./implementation\":420,\"./polyfill\":422,\"./shim\":423,\"call-bind\":246,\"define-properties\":337}],422:[function(e,t,n){\"use strict\";var a=e(\"./implementation\");t.exports=function(){return\"function\"==typeof Object.is?Object.is:a}},{\"./implementation\":420}],423:[function(e,t,n){\"use strict\";var a=e(\"./polyfill\"),r=e(\"define-properties\");t.exports=function(){var e=a();return r(Object,{is:e},{is:function(){return Object.is!==e}}),e}},{\"./polyfill\":422,\"define-properties\":337}],424:[function(e,t,n){\"use strict\";var a;if(!Object.keys){var r=Object.prototype.hasOwnProperty,i=Object.prototype.toString,o=e(\"./isArguments\"),s=Object.prototype.propertyIsEnumerable,c=!s.call({toString:null},\"toString\"),u=s.call((function(){}),\"prototype\"),l=[\"toString\",\"toLocaleString\",\"valueOf\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"constructor\"],p=function(e){var t=e.constructor;return t&&t.prototype===e},d={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},f=function(){if(\"undefined\"==typeof window)return!1;for(var e in window)try{if(!d[\"$\"+e]&&r.call(window,e)&&null!==window[e]&&\"object\"==typeof window[e])try{p(window[e])}catch(t){return!0}}catch(t){return!0}return!1}();a=function(e){var t=null!==e&&\"object\"==typeof e,n=\"[object Function]\"===i.call(e),a=o(e),s=t&&\"[object String]\"===i.call(e),d=[];if(!t&&!n&&!a)throw new TypeError(\"Object.keys called on a non-object\");var h=u&&n;if(s&&e.length>0&&!r.call(e,0))for(var m=0;m<e.length;++m)d.push(String(m));if(a&&e.length>0)for(var g=0;g<e.length;++g)d.push(String(g));else for(var y in e)h&&\"prototype\"===y||!r.call(e,y)||d.push(String(y));if(c)for(var v=function(e){if(\"undefined\"==typeof window||!f)return p(e);try{return p(e)}catch(t){return!1}}(e),b=0;b<l.length;++b)v&&\"constructor\"===l[b]||!r.call(e,l[b])||d.push(l[b]);return d}}t.exports=a},{\"./isArguments\":426}],425:[function(e,t,n){\"use strict\";var a=Array.prototype.slice,r=e(\"./isArguments\"),i=Object.keys,o=i?function(e){return i(e)}:e(\"./implementation\"),s=Object.keys;o.shim=function(){if(Object.keys){var e=function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2);e||(Object.keys=function(e){return r(e)?s(a.call(e)):s(e)})}else Object.keys=o;return Object.keys||o},t.exports=o},{\"./implementation\":424,\"./isArguments\":426}],426:[function(e,t,n){\"use strict\";var a=Object.prototype.toString;t.exports=function(e){var t=a.call(e),n=\"[object Arguments]\"===t;return n||(n=\"[object Array]\"!==t&&null!==e&&\"object\"==typeof e&&\"number\"==typeof e.length&&e.length>=0&&\"[object Function]\"===a.call(e.callee)),n}},{}],427:[function(e,t,n){\"use strict\";function a(e,t){return null!=e&&t in Object(e)}function r(e){return e.replace(/([^\\\\])\\[/g,\"$1.[\").match(/(\\\\\\.|[^.]+?)+/g).map((function(e){if(\"constructor\"===e||\"__proto__\"===e||\"prototype\"===e)return{};var t=/^\\[(\\d+)\\]$/.exec(e);return t?{i:parseFloat(t[1])}:{p:e.replace(/\\\\([.[\\]])/g,\"$1\")}}))}function i(e,t,n){var a=e,r=null;n=void 0===n?t.length:n;for(var i=0;i<n;i++){var o=t[i];a&&(a=void 0===o.p?a[o.i]:a[o.p],i===n-1&&(r=a))}return r}function o(e,t){var n=r(t),o=n[n.length-1],s={parent:n.length>1?i(e,n,n.length-1):e,name:o.p||o.i,value:i(e,n)};return s.exists=a(s.parent,s.name),s}t.exports={hasProperty:a,getPathInfo:o,getPathValue:function(e,t){return o(e,t).value},setPathValue:function(e,t,n){return function(e,t,n){for(var a=e,r=n.length,i=null,o=0;o<r;o++){var s=null,c=null;if(i=n[o],o===r-1)a[s=void 0===i.p?i.i:i.p]=t;else if(void 0!==i.p&&a[i.p])a=a[i.p];else if(void 0!==i.i&&a[i.i])a=a[i.i];else{var u=n[o+1];s=void 0===i.p?i.i:i.p,c=void 0===u.p?[]:{},a[s]=c,a=a[s]}}}(e,n,r(t)),e}}},{}],428:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property-list\").PropertyList,o=e(\"./url\").Url,s=e(\"./certificate\").Certificate;r.inherit(a=function(e,t){a.super_.call(this,s,e,t)},i),r.assign(a.prototype,{resolveOne(e){if(r.isString(e)||o.isUrl(e))return this.find((function(t){return t.canApplyTo(e)}))}}),r.assign(a,{_postman_propertyName:\"CertificateList\",isCertificateList:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={CertificateList:a}},{\"../util\":464,\"./certificate\":429,\"./property-list\":443,\"./url\":453}],429:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property\").Property,o=e(\"./property-base\").PropertyBase,s=e(\"./url\").Url,c=e(\"../url-pattern/url-match-pattern-list\").UrlMatchPatternList;r.inherit(a=function e(t){e.super_.apply(this,arguments),this.update(t)},i),r.assign(a.prototype,{_postman_propertyRequiresId:!0,update:function(e){r.isObject(e)&&r.mergeDefined(this,{id:e.id,name:e.name,matches:e.matches&&new c({},e.matches),key:r.isObject(e.key)?e.key:{src:e.key},cert:r.isObject(e.cert)?e.cert:{src:e.cert},pfx:r.isObject(e.pfx)?e.pfx:{src:e.pfx},passphrase:e.passphrase})},canApplyTo:function(e){return!r.isEmpty(e)&&(\"string\"==typeof e&&(e=new s(e)),\"https\"===e.protocol&&this.matches.test(e))},toJSON:function(){var e=o.toJSON(this);return r.unset(e,\"key.value\"),r.unset(e,\"cert.value\"),r.unset(e,\"pfx.value\"),e}}),r.assign(a,{_postman_propertyName:\"Certificate\",_postman_propertyIndexKey:\"id\",isCertificate:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={Certificate:a}},{\"../url-pattern/url-match-pattern-list\":462,\"../util\":464,\"./property\":444,\"./property-base\":442,\"./url\":453}],430:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./item-group\").ItemGroup,o=e(\"./variable-list\").VariableList,s=e(\"./version\").Version;r.inherit(a=function PostmanCollection(e,t){a.super_.call(this,e),r.assign(this,{variables:new o(this,e&&e.variable,t),version:e&&e.info&&e.info.version?new s(e.info.version):void 0})},i),r.assign(a.prototype,{syncVariablesFrom(e,t){return this.variables.syncFromObject(e,t)},syncVariablesTo(e){return this.variables.syncToObject(e)},toJSON(){var e=i.prototype.toJSON.apply(this);return e.info={_postman_id:this.id,name:this.name,version:this.version,schema:\"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"},delete e.id,delete e.name,delete e.version,r.has(e,\"description\")&&(e.info.description=this.description,delete e.description),e}}),r.assign(a,{_postman_propertyName:\"Collection\",isCollection:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={Collection:a}},{\"../util\":464,\"./item-group\":439,\"./variable-list\":454,\"./version\":457}],431:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property-list\").PropertyList,o=e(\"./cookie\").Cookie;r.inherit(a=function(e,t){a.super_.call(this,o,e,t)},i),r.assign(a,{_postman_propertyName:\"CookieList\",isCookieList:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={CookieList:a}},{\"../util\":464,\"./cookie\":432,\"./property-list\":443}],432:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property-base\").PropertyBase,o=e(\"./property-list\").PropertyList,s=/; */,c={httponly:\"httpOnly\",secure:\"secure\",domain:\"domain\",path:\"path\",\"max-age\":\"maxAge\",session:\"session\",expires:\"expires\"};r.inherit(a=function PostmanCookie(e){a.super_.call(this,e),r.isString(e)&&(e=a.parse(e)),e&&this.update(e)},i),r.assign(a.prototype,{update(e){r.mergeDefined(this,{name:r.choose(e.name,e.key),expires:r.isString(e.expires)?new Date(e.expires):e.expires,maxAge:r.has(e,\"maxAge\")?Number(e.maxAge):void 0,domain:e.domain,path:e.path,secure:r.has(e,\"secure\")?Boolean(e.secure):void 0,httpOnly:r.has(e,\"httpOnly\")?Boolean(e.httpOnly):void 0,hostOnly:r.has(e,\"hostOnly\")?Boolean(e.hostOnly):void 0,session:r.has(e,\"session\")?Boolean(e.session):void 0,value:e.value?r.ensureEncoded(e.value):void 0,extensions:e.extensions||void 0})},valueOf(){try{return decodeURIComponent(this.value)}catch(e){return this.value}},toString(){var e=a.unparseSingle(this);return this.expires&&this.expires instanceof Date?Number.isNaN(this.expires.getTime())||(e+=\"; Expires=\"+this.expires.toUTCString()):this.expires&&(e+=\"; Expires=\"+this.expires),this.maxAge&&this.maxAge!==1/0&&(e+=\"; Max-Age=\"+this.maxAge),this.domain&&!this.hostOnly&&(e+=\"; Domain=\"+this.domain),this.path&&(e+=\"; Path=\"+this.path),this.secure&&(e+=\"; Secure\"),this.httpOnly&&(e+=\"; HttpOnly\"),this.extensions&&this.extensions.forEach((({key:t,value:n})=>{e+=`; ${t}`,e+=!0===n?\"\":`=${n}`})),e}}),r.assign(a,{_postman_propertyName:\"Cookie\",_postman_propertyIndexKey:\"name\",_postman_propertyIndexCaseInsensitive:!0,_postman_propertyAllowsMultipleValues:!0,isCookie:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))},unparse:function(e){return r.isArray(e)||o.isPropertyList(e)?e.map(a.unparseSingle).join(\"; \"):\"\"},unparseSingle:function(e){if(!r.isObject(e))return\"\";var t=r.isNil(e.value)?\"\":e.value;return e.name?e.name+\"=\"+t:t},parse:function(e){if(!r.isString(e))return e;var t,n={},i=e.split(s);return t=a.splitParam(i.shift()),n.key=t.key,n.value=t.value,i.forEach((function(e){var t=a.splitParam(e),r=t.value,i=t.key.toLowerCase();c[i]?n[c[i]]=r:(n.extensions=n.extensions||[],n.extensions.push(t))})),n.domain||(n.hostOnly=!0),n},stringify:function(e){return a.prototype.toString.call(e)},splitParam:function(e){var t,n,a=e.split(\"=\");return t=a[0].trim(),n=!r.isString(a[1])||a[1].trim(),r.isString(n)&&'\"'===n[0]&&(n=n.slice(1,-1)),{key:t,value:n}}}),t.exports={Cookie:a}},{\"../util\":464,\"./property-base\":442,\"./property-list\":443}],433:[function(e,t,n){var a,r=e(\"../util\").lodash,i=\"text/plain\";a=function PostmanPropertyDescription(e){r.isString(e)&&(e={content:e,type:i}),e&&this.update(e)},r.assign(a.prototype,{update(e,t){r.isObject(e)&&(t=e.type,e=e.content),r.assign(this,{content:e,type:t||i})},toString(){return this.content||\"\"},toJSON(){return{content:this.content,type:this.type}}}),r.assign(a,{_postman_propertyName:\"Description\",isDescription:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={Description:a}},{\"../util\":464}],434:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property-list\").PropertyList,o=e(\"./event\").Event;r.inherit(a=function PostmanEventList(e,t){a.super_.call(this,o,e,t)},i),r.assign(a.prototype,{listeners(e){var t;return t=this.listenersOwn(e),this.eachParent((function(n){var r;n!==this.__parent&&a.isEventList(n.events)&&(r=n.events.listenersOwn(e))&&r.length&&t.unshift.apply(t,r)}),this),t},listenersOwn(e){return this.filter((function(t){return!t.disabled&&t.listen===e}))}}),r.assign(a,{_postman_propertyName:\"EventList\",isEventList:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={EventList:a}},{\"../util\":464,\"./event\":435,\"./property-list\":443}],435:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property\").Property,o=e(\"./script\").Script;r.inherit(a=function PostmanEvent(e){a.super_.call(this,e),e&&this.update(e)},i),r.assign(a.prototype,{update(e){if(e){var t,n=e.script;o.isScript(n)?t=n:r.isArray(n)||r.isString(n)?t=new o({exec:n}):r.isObject(n)&&(t=new o(n)),r.mergeDefined(this,{listen:r.isString(e.listen)?e.listen:void 0,script:t})}}}),r.assign(a,{_postman_propertyName:\"Event\",isEvent:function isPostmanEvent(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={Event:a}},{\"../util\":464,\"./property\":444,\"./script\":452}],436:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property\").Property,o=e(\"./property-base\").PropertyBase;r.inherit(a=function PostmanFormParam(e={}){a.super_.apply(this,arguments),this.key=e.key||\"\",this.value=e.value||\"\",this.type=e.type,this.src=e.src,this.contentType=e.contentType,this.fileName=e.fileName},i),r.assign(a.prototype,{toString(){return this.key+\"=\"+this.value},valueOf(){return this.value},toJSON(){var e=o.toJSON(this);return\"file\"!==e.type||\"string\"==typeof e.value&&e.value||r.unset(e,\"value\"),e}}),r.assign(a,{_postman_propertyName:\"FormParam\",_postman_propertyIndexKey:\"key\",_postman_propertyAllowsMultipleValues:!0,parse:r.noop}),t.exports={FormParam:a}},{\"../util\":464,\"./property\":444,\"./property-base\":442}],437:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property-list\").PropertyList,o=e(\"./header\").Header;r.inherit(a=function(e,t){a.super_.call(this,o,e,t)},i),r.assign(a.prototype,{contentSize(){return this.count()?o.unparse(this).length:0}}),r.assign(a,{_postman_propertyName:\"HeaderList\",isHeaderList:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={HeaderList:a}},{\"../util\":464,\"./header\":438,\"./property-list\":443}],438:[function(e,t,n){var a,r=e(\"../util\").lodash,i=\"\",o=e(\"./property\").Property,s=e(\"./property-list\").PropertyList;r.inherit(a=function PostmanHeader(e,t){r.isString(e)&&(e=r.isString(t)?{key:t,value:e}:a.parseSingle(e)),a.super_.apply(this,arguments),this.update(e)},o),r.assign(a.prototype,{toString(){return this.key+\": \"+this.value},valueOf(){return this.value},update(e){this.key=r.get(e,\"key\")||i,this.value=r.get(e,\"value\",i),r.has(e,\"system\")&&(this.system=e.system),r.has(e,\"disabled\")&&(this.disabled=e.disabled)}}),r.assign(a,{_postman_propertyName:\"Header\",_postman_propertyIndexKey:\"key\",_postman_propertyIndexCaseInsensitive:!0,_postman_propertyAllowsMultipleValues:!0,parse:function(e){var t=[],n={header:/^(\\S+):(.*)$/gm,fold:/\\r\\n([ \\t])/g,trim:/^\\s*(.*\\S)?\\s*$/},a=n.header.exec(e);for(e=e.toString().replace(n.fold,\"$1\");a;)t.push({key:a[1],value:a[2].replace(n.trim,\"$1\")}),a=n.header.exec(e);return t},parseSingle:function(e){if(!r.isString(e))return{key:i,value:i};var t,n,a=e.indexOf(\":\");return a<0&&(a=e.length),t=e.substr(0,a),n=e.substr(a+1),{key:r.trim(t),value:r.trim(n)}},unparse:function(e,t=\"\\r\\n\"){return r.isArray(e)||s.isPropertyList(e)?e.reduce((function(e,n){return n&&!n.disabled&&(e+=a.unparseSingle(n)+t),e}),i):i},unparseSingle:function(e){return r.isObject(e)?e.key+\": \"+e.value:i},isHeader:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))},create:function(){var e=Array.prototype.slice.call(arguments);return e.unshift(a),new(a.bind.apply(a,e))}}),t.exports={Header:a}},{\"../util\":464,\"./property\":444,\"./property-list\":443}],439:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property\").Property,o=e(\"./property-list\").PropertyList,s=e(\"./event-list\").EventList,c=e(\"./item\").Item,u=e(\"./request\").Request,l=e(\"./request-auth\").RequestAuth;r.inherit(a=function PostmanItemGroup(e){a.super_.apply(this,arguments),r.mergeDefined(this,{items:new o(a._createNewGroupOrItem,this,e&&e.item),auth:e&&e.auth?new l(e.auth):void 0,events:new s(this,e&&e.event),protocolProfileBehavior:e&&\"object\"==typeof e.protocolProfileBehavior?e.protocolProfileBehavior:void 0})},i),r.assign(a.prototype,{_postman_propertyRequiresId:!0,forEachItem:function(e){this.items.each((function(t){return a.isItemGroup(t)?t.forEachItem(e):e(t,this)}),this)},forEachItemGroup:function(e){this.items.each((function(t){a.isItemGroup(t)&&(t.forEachItemGroup(e),e(t,this))}),this)},oneDeep:function(e){var t;if(r.isString(e))return this.items.each((function(n){return n.id===e||n.name===e?(t=n,!1):a.isItemGroup(n)?!(t=n.oneDeep(e)):void 0})),t},getProtocolProfileBehavior:c.prototype.getProtocolProfileBehavior,getProtocolProfileBehaviorResolved:c.prototype.getProtocolProfileBehaviorResolved,setProtocolProfileBehavior:c.prototype.setProtocolProfileBehavior,unsetProtocolProfileBehavior:c.prototype.unsetProtocolProfileBehavior,authorizeRequestsUsing:u.prototype.authorizeUsing}),r.assign(a,{_postman_propertyName:\"ItemGroup\",_createNewGroupOrItem:function(e){return c.isItem(e)||a.isItemGroup(e)?e:e&&e.item?new a(e):new c(e)},isItemGroup:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={ItemGroup:a}},{\"../util\":464,\"./event-list\":434,\"./item\":440,\"./property\":444,\"./property-list\":443,\"./request\":450,\"./request-auth\":448}],440:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property\").Property,o=e(\"./property-list\").PropertyList,s=e(\"./event-list\").EventList,c=e(\"./request\").Request,u=e(\"./request-auth\").RequestAuth,l=e(\"./response\").Response,p=\"object\",d=\"string\",f=function(e){var t;return e&&(t=e.auth)&&u.isValidType(t.type)?t:void 0},h=function(e){var t=e&&e.protocolProfileBehavior;return typeof t===p?t:{}};r.inherit(a=function PostmanItem(e){a.super_.apply(this,arguments),r.mergeDefined(this,{request:e&&new c(e.request),responses:new o(l,this,e&&e.response),events:new s(this,e&&e.event),protocolProfileBehavior:e&&typeof e.protocolProfileBehavior===p?e.protocolProfileBehavior:void 0})},i),r.assign(a.prototype,{_postman_propertyRequiresId:!0,getAuth:function(){var e;return(e=f(this.request))?e:this.findInParents(\"auth\",f)},getProtocolProfileBehavior:function(){return h(this)},getProtocolProfileBehaviorResolved:function(){var e=h(this);return this.forEachParent({withRoot:!0},(function(t){e={...h(t),...e}})),e},setProtocolProfileBehavior:function(e,t){return typeof e!==d||(!this.protocolProfileBehavior&&(this.protocolProfileBehavior={}),this.protocolProfileBehavior[e]=t),this},unsetProtocolProfileBehavior:function(e){return typeof this.protocolProfileBehavior!==p||typeof e!==d||r.has(this.protocolProfileBehavior,e)&&delete this.protocolProfileBehavior[e],this},getEvents:function(e){return e?this.events.filter((function(t){return t.listen===e})):this.events.all()},authorizeRequestUsing:function(e,t){return this.request||(this.request=new c),this.request.authorizeUsing(e,t)},getPath:function(){const e=[],t=t=>{e.push(t.name)};return t(this),this.forEachParent({withRoot:!0},t),e.reverse()}}),r.assign(a,{_postman_propertyName:\"Item\",isItem:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={Item:a}},{\"../util\":464,\"./event-list\":434,\"./property\":444,\"./property-list\":443,\"./request\":450,\"./request-auth\":448,\"./response\":451}],441:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property-base\").PropertyBase,o=\"set\",s=\"unset\",c=function(e){return e&&e.length<=2};r.inherit(a=function e(t){e.super_.call(this,t),t=t||{},this.autoCompact=Boolean(t.autoCompact),this.stream=Array.isArray(t.stream)?t.stream:[],this.compacted=r.isPlainObject(t.compacted)?t.compacted:{}},i),r.assign(a.prototype,{addMutation(e){e&&c(e)&&(this.autoCompact?this.addAndCompact(e):this.stream.push(e))},addAndCompact(e){var t=e[0];t=Array.isArray(t)?t.join(\".\"):t,this.compacted[t]=e},track(e,...t){e&&t&&(e!==o&&e!==s||this.addMutation(t))},compact(){this.stream.forEach(this.addAndCompact.bind(this)),this.stream=[]},count(){var e=this.stream.length;return e+=Object.keys(this.compacted).length},applyOn(e){if(e&&e.applyMutation){var t=function(t){!function(e,t){if(c(t)){var n=t.length>1?o:s;e.applyMutation(n,...t)}}(e,t)};r.forEach(this.compacted,t),r.forEach(this.stream,t)}}}),r.assign(a,{_postman_propertyName:\"MutationTracker\",isMutationTracker:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={MutationTracker:a}},{\"../util\":464,\"./property-base\":442}],442:[function(e,t,n){var a,r=e(\"../util\").lodash;a=function e(t){if(t&&\"string\"!=typeof t){var n=t&&t.info||t,a=r(n).pickBy(e.propertyIsMeta).mapKeys(e.propertyUnprefixMeta).value();r.keys(a).length&&(this._=r.isObject(this._)?r.mergeDefined(this._,a):a)}},r.assign(a.prototype,{forEachParent(e,t){if(r.isFunction(e)&&(t=e,e={}),r.isFunction(t)&&r.isObject(e))for(var n=this.parent(),a=n&&r.isFunction(n.parent)&&n.parent();n&&(a||e.withRoot);)t(n),n=a,a=a&&r.isFunction(a.parent)&&a.parent()},findInParents(e,t){var n=this.findParentContaining(e,t);return n?n[e]:void 0},findParentContaining(e,t){var n=this;if(t){t=t.bind(this);do{if(t(n))return n;n=n.__parent}while(n)}else do{if(n[e])return n;n=n.__parent}while(n)},toJSON(){return r.reduce(this,(function(e,t,n){return void 0===t?e:(t&&t._postman_propertyIsList&&!t._postman_proprtyIsSerialisedAsPlural&&r.endsWith(n,\"s\")&&(n=n.slice(0,-1)),t&&r.isFunction(t.toJSON)?(e[n]=t.toJSON(),e):r.isString(t)?(e[n]=t,e):(e[n]=r.cloneElement(t),e))}),{})},meta(){return arguments.length?r.pick(this._,Array.prototype.slice.apply(arguments)):r.cloneDeep(this._)},parent(){let e=this.__parent;return e&&e._postman_propertyIsList&&(e=e.__parent||e),e||void 0},setParent(e){r.assignHidden(this,\"__parent\",e)}}),r.assign(a,{_postman_propertyName:\"PropertyBase\",propertyIsMeta:function(e,t){return r.startsWith(t,\"_\")&&\"_\"!==t},propertyUnprefixMeta:function(e,t){return r.trimStart(t,\"_\")},toJSON:function(e){return a.prototype.toJSON.call(e)}}),t.exports={PropertyBase:a}},{\"../util\":464}],443:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property-base\").PropertyBase,o=\"__parent\";r.inherit(a=function PostmanPropertyList(e,t,n){a.super_.call(this),this.setParent(t),r.assign(this,{members:this.members||[],reference:this.reference||{},Type:e}),r.getOwn(e,\"_postman_propertyIndexKey\")&&(this._postman_listIndexKey=e._postman_propertyIndexKey),r.getOwn(e,\"_postman_propertyIndexCaseInsensitive\")&&(this._postman_listIndexCaseInsensitive=e._postman_propertyIndexCaseInsensitive),r.getOwn(e,\"_postman_propertyAllowsMultipleValues\")&&(this._postman_listAllowsMultipleValues=e._postman_propertyAllowsMultipleValues),n&&this.populate(n)},i),r.assign(a.prototype,{_postman_propertyIsList:!0,_postman_listIndexKey:\"id\",_postman_listIndexCaseInsensitive:!1,_postman_listAllowsMultipleValues:!1,insert:function(e,t){if(r.isObject(e)){var n,i=this.indexOf(e);a.isPropertyList(e[o])&&e[o]!==this&&e[o].remove(e),r.assignHidden(e,o,this),i>-1&&this.members.splice(i,1),t&&(t=this.indexOf(t)),t>-1?this.members.splice(t,0,e):this.members.push(e),(n=e[this._postman_listIndexKey])&&(n=String(n))&&(this._postman_listIndexCaseInsensitive&&(n=n.toLowerCase()),this._postman_listAllowsMultipleValues&&Object.hasOwn(this.reference,n)?(!r.isArray(this.reference[n])&&(this.reference[n]=[this.reference[n]]),this.reference[n].push(e)):this.reference[n]=e)}},insertAfter:function(e,t){return this.insert(e,this.idx(this.indexOf(t)+1))},append:function(e){return this.insert(e)},prepend:function(e){return this.insert(e,this.idx(0))},add:function(e){r.isNull(e)||r.isUndefined(e)||r.isNaN(e)||this.insert(e.constructor===this.Type?e:r.has(this.Type,\"create\")?this.Type.create.apply(this.Type,arguments):new this.Type(e))},upsert:function(e){if(r.isNil(e)||r.isNaN(e))return null;var t=this._postman_listIndexKey,n=this.one(e[t]);if(n){if(!r.isFunction(n.update))throw new Error(\"collection: unable to upsert into a list of Type that does not support .update()\");return n.update(e),!1}return this.add(e),!0},remove:function(e,t){var n;!t&&(t=this),r.isString(e)?(n=this._postman_listIndexCaseInsensitive?e.toLowerCase():e,e=function(e){var t=e[this._postman_listIndexKey];return this._postman_listIndexCaseInsensitive&&(t=t.toLowerCase()),t===n}.bind(this)):e instanceof this.Type&&(n=e,e=function(e){return e===n}),r.isFunction(e)&&r.remove(this.members,function(n){var a;if(e.apply(t,arguments))return(a=n[this._postman_listIndexKey])&&(a=String(a))&&(this._postman_listIndexCaseInsensitive&&(a=a.toLowerCase()),this._postman_listAllowsMultipleValues&&r.isArray(this.reference[a])?(r.remove(this.reference[a],(function(e){return e===n})),0===this.reference[a].length&&delete this.reference[a],1===this.reference[a].length&&(this.reference[a]=this.reference[a][0])):delete this.reference[a]),delete n[o],!0}.bind(this))},clear:function(){this.all().forEach(a._unlinkItemFromParent),this.members.length=0,Object.keys(this.reference).forEach(function(e){delete this.reference[e]}.bind(this))},populate:function(e){r.isString(e)&&r.isFunction(this.Type.parse)&&(e=this.Type.parse(e)),r.forEach(r.isArray(e)||r.isPlainObject(e)&&r.has(this.Type,\"create\")?e:[e],this.add.bind(this))},repopulate:function(e){this.clear(),this.populate(e)},assimilate:function(e,t){var n=a.isPropertyList(e)?e.members:e,i=this,o=i._postman_listIndexKey,s={};r.isArray(n)&&(n.forEach((function(e){e&&r.has(e,o)&&(i.upsert(e),s[e[o]]=!0)})),t&&r.forEach(i.reference,(function(e,t){r.has(s,t)||i.remove(t)})))},all:function(){return r.clone(this.members)},one:function(e){var t=this.reference[this._postman_listIndexCaseInsensitive?String(e).toLowerCase():e];return this._postman_listAllowsMultipleValues&&Array.isArray(t)?t.length?t[t.length-1]:void 0:t},get:function(e){var t=this.one(e);if(t)return t.valueOf()},each:function(e,t){r.forEach(this.members,r.isFunction(e)?e.bind(t||this.__parent):e)},filter:function(e,t){return r.filter(this.members,r.isFunction(e)&&r.isObject(t)?e.bind(t):e)},find:function(e,t){return r.find(this.members,r.isFunction(e)&&r.isObject(t)?e.bind(t):e)},map:function(e,t){return r.map(this.members,r.isFunction(e)?e.bind(t||this):e)},reduce:function(e,t,n){return r.reduce(this.members,r.isFunction(e)?e.bind(n||this):e,t)},count:function(){return this.members.length},idx:function(e){return this.members[e]},indexOf:function(e){return this.members.indexOf(r.isString(e)?e=this.one(e):e)},has:function(e,t){var n,a;if(!(n=r.isString(e)?this.reference[this._postman_listIndexCaseInsensitive?e.toLowerCase():e]:this.filter((function(t){return t===e}))))return!1;if(1===arguments.length)return Boolean(r.isArray(n)?n.length:n);if(this._postman_listAllowsMultipleValues&&r.isArray(n)){for(a=0;a<n.length;a++)if((r.isFunction(n[a].valueOf)?n[a].valueOf():n[a])===t)return!0;return!1}return r.isFunction(n.valueOf)&&(n=n.valueOf()),n===t},eachParent:function(e,t){if(r.isFunction(e)){!t&&(t=this);for(var n,a=this.__parent;a;)e.call(t,a,n),n=a,a=a.__parent}},toObject:function(e,t,n,a){var i={},o=this._postman_listIndexKey,s=this._postman_sanitizeKeys||a,c=!this._postman_listIndexCaseInsensitive||t,u=this._postman_listAllowsMultipleValues||n;return this.each((function(t){if(!(!t||!r.has(t,o)||e&&t.disabled||s&&!t[o])){var n=c?t[o]:String(t[o]).toLowerCase();u&&r.has(i,n)?(!Array.isArray(i[n])&&(i[n]=[i[n]]),i[n].push(t.valueOf())):i[n]=t.valueOf()}})),i},toString:function(){return this.Type.unparse?this.Type.unparse(this.members):this.constructor?this.constructor.prototype.toString.call(this):\"\"},toJSON:function(){return this.count()?r.map(this.members,(function(e){return!r.isEmpty(e)&&r.isFunction(e.toJSON)?e.toJSON():r.reduce(e,(function(e,t,n){return void 0===t?e:(t&&t._postman_propertyIsList&&!t._postman_proprtyIsSerialisedAsPlural&&r.endsWith(n,\"s\")&&(n=n.slice(0,-1)),t&&r.isFunction(t.toJSON)?(e[n]=t.toJSON(),e):r.isString(t)?(e[n]=t,e):(e[n]=r.cloneElement(t),e))}),{})})):[]}}),r.assign(a,{_postman_propertyName:\"PropertyList\",_unlinkItemFromParent:function(e){e.__parent&&delete e.__parent},isPropertyList:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={PropertyList:a}},{\"../util\":464,\"./property-base\":442}],444:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"uuid\"),o=e(\"./property-base\").PropertyBase,s=e(\"./description\").Description,c=e(\"../superstring\").Substitutor,u=\"description\",l=c.REGEX_EXTRACT_VARS;function p(e,t=new Set,n=new Set){if(!e||t.has(e))return n;if(Array.isArray(e)){t.add(e);for(let a=0,r=e.length;a<r;a++)p(e[a],t,n)}else if(\"object\"==typeof e){t.add(e);for(const a in e)Object.hasOwn(e,a)&&p(e[a],t,n)}else if(\"string\"==typeof e){let t;for(;null!==(t=l.exec(e));)n.add(t[0].slice(2,-2))}return n}r.inherit(a=function PostmanProperty(e){a.super_.apply(this,arguments);var t,n=e&&e.info||e;(t=n&&n.id||this.id||this._&&this._.postman_id||this._postman_propertyRequiresId&&i.v4())&&(this.id=t),n&&n.name&&(this.name=n.name),e&&r.has(e,\"disabled\")&&(this.disabled=Boolean(e.disabled)),r.has(n,u)&&(this.description=r.createDefined(n,u,s,this.description))},o),r.assign(a.prototype,{describe(e,t){(s.isDescription(this.description)?this.description:this.description=new s).update(e,t)},toObjectResolved(e,t,n){var i,o,s,c=n&&n.ignoreOwnVariables;if(s=this.toJSON(),r.isArray(s.variable)&&delete s.variable,c)return a.replaceSubstitutionsIn(s,t);i=e||this;do{o=i.variables,i=i.__parent}while(!o&&i);if(!o)throw Error(\"Unable to resolve variables. Require a List type property for variable auto resolution.\");return o.substitute(s,t)},findSubstitutions(){return a.findSubstitutions(this.toJSON())}}),r.assign(a,{_postman_propertyName:\"Property\",replaceSubstitutions:function(e,t){return e&&r.isString(e)?(!c.isInstance(t)&&!r.isArray(t)&&(t=r.tail(arguments)),c.box(t,c.DEFAULT_VARS).parse(e).toString()):e},replaceSubstitutionsIn:function(e,t){if(!e||!r.isObject(e))return e;t=c.box(t,c.DEFAULT_VARS);var n=function(e,a){return e=e||{},r.isString(a)?this.replaceSubstitutions(a,t):(r.forOwn(a,(function(t,r){a[r]=n(e[r],t)})),a)}.bind(this);return r.mergeWith({},e,n)},findSubstitutions:function(e){return Array.from(p(e))}}),t.exports={Property:a}},{\"../superstring\":461,\"../util\":464,\"./description\":433,\"./property-base\":442,uuid:\"uuid\"}],445:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property-list\").PropertyList,o=e(\"./proxy-config\").ProxyConfig,s=e(\"./url\").Url;r.inherit(a=function PostmanProxyConfigList(e,t){a.super_.call(this,o,e,t)},i),r.assign(a.prototype,{resolve(e){if(r.isString(e)||s.isUrl(e))return this.find((function(t){return!t.disabled&&t.test(e)}))}}),r.assign(a,{_postman_propertyName:\"ProxyConfigList\",isProxyConfigList:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={ProxyConfigList:a}},{\"../util\":464,\"./property-list\":443,\"./proxy-config\":446,\"./url\":453}],446:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property\").Property,o=e(\"./property-list\").PropertyList,s=e(\"./url\").Url,c=e(\"../url-pattern/url-match-pattern\").UrlMatchPattern,u=e(\"../url-pattern/url-match-pattern-list\").UrlMatchPatternList,l=c.PROTOCOL_DELIMITER,p=\"://\",d=\"http\",f=[\"http\",\"https\"],h=f.join(l)+p+\"*:*/*\";r.inherit(a=function e(t){e.super_.call(this,t),r.assign(this,{host:\"\",match:new c(h),port:8080,tunnel:!1,bypass:void 0,authenticate:!1,username:void 0,password:void 0}),this.update(t)},i),r.assign(a.prototype,{_postman_propertyRequiresId:!0,update:function(e){if(r.isObject(e)){var t,n=r.get(e,\"port\")|0;r.isString(e.host)&&(t=new s(e.host),this.host=t.getHost()),r.isString(e.match)&&(this.match=new c(e.match)),r.isString(r.get(e,\"match.pattern\"))&&(this.match=new c(e.match.pattern)),n&&(this.port=n),r.isBoolean(e.tunnel)&&(this.tunnel=e.tunnel),r.isBoolean(e.disabled)&&(this.disabled=e.disabled),r.isBoolean(e.authenticate)&&(this.authenticate=e.authenticate),r.isString(e.username)&&(this.username=e.username),r.isString(e.password)&&(this.password=e.password),Array.isArray(e.bypass)?this.bypass=new u(null,e.bypass):o.isPropertyList(e.bypass)&&(this.bypass=new u(null,e.bypass.all()))}},updateProtocols:function(e){if(e){var t,n=r.split(this.match.pattern,p)[1];n&&(t=r.intersection(f,r.castArray(e)),r.isEmpty(t)&&(t=f),this.match.update({pattern:t.join(l)+p+n}))}},test:function(e){var t=s.isUrl(e)?e.protocol:s.parse(e||\"\").protocol||\"\";return r.isEmpty(t)&&(e=(t=d)+p+e),!!r.includes(f,t)&&((!this.bypass||!this.bypass.test(e))&&this.match.test(e))},getProxyUrl:function(){var e=\"\";return this.authenticate&&(e=encodeURIComponent(this.username||\"\"),this.password&&(e+=\":\"+encodeURIComponent(this.password)),e&&(e+=\"@\")),d+p+e+this.host+\":\"+this.port},getProtocols:function(){return this.match.getProtocols()}}),r.assign(a,{_postman_propertyName:\"ProxyConfig\",isProxyConfig:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={ProxyConfig:a,ALLOWED_PROTOCOLS:f,DEFAULT_PATTERN:h}},{\"../url-pattern/url-match-pattern\":463,\"../url-pattern/url-match-pattern-list\":462,\"../util\":464,\"./property\":444,\"./property-list\":443,\"./url\":453}],447:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property\").Property,o=e(\"../superstring\").Substitutor,s=e(\"./property-list\").PropertyList,c=\"&\",u=\"string\",l=\"=\",p=\"\",d=/#/g,f=/=/g,h=/&/g,m=o.REGEX_EXTRACT_VARS,g=function(e,t){return e?(-1!==e.indexOf(c)&&(e=e.replace(h,\"%26\")),-1!==e.indexOf(\"#\")&&(e=e.replace(d,\"%23\")),t&&-1!==e.indexOf(l)&&(e=e.replace(f,\"%3D\")),e):e},y=function(e,t){if(!e||typeof e!==u)return e;if(-1===e.indexOf(c)&&-1===e.indexOf(\"#\")&&(!t||-1===e.indexOf(l)))return e;for(var n,a,r,i=\"\",o=0;null!==(a=m.exec(e));)n=a[0],r=a.index,i+=g(e.slice(o,r),t)+n,o=r+n.length;return o<e.length&&(i+=g(e.slice(o),t)),i};r.inherit(a=function PostmanQueryParam(e){a.super_.apply(this,arguments),this.update(e)},i),r.assign(a.prototype,{toString(){return a.unparseSingle(this)},update(e){r.assign(this,r.isString(e)?a.parseSingle(e):{key:r.get(e,\"key\"),value:r.get(e,\"value\")}),r.has(e,\"system\")&&(this.system=e.system)},valueOf(){return r.isString(this.value)?this.value:p}}),r.assign(a,{_postman_propertyName:\"QueryParam\",_postman_propertyIndexKey:\"key\",_postman_propertyAllowsMultipleValues:!0,parse:function(e){return r.isString(e)?e.split(c).map(a.parseSingle):[]},parseSingle:function(e,t,n){if(e===p&&r.isNumber(t)&&r.isArray(n)&&t!==(n&&n.length-1))return{key:null,value:null};var a=typeof e===u?e.indexOf(l):-1,i={};return a<0?(i.key=e.substr(0,e.length),i.value=null):(i.key=e.substr(0,a),i.value=e.substr(a+1)),i},unparse:function(e){if(!e)return p;var t=!0;return r.isArray(e)||s.isPropertyList(e)?e.reduce((function(e,n){return!0===n.disabled?e:(t?t=!1:e+=c,e+a.unparseSingle(n))}),p):r.reduce(e,(function(e,t,n){return e&&(e+=c),e+a.unparseSingle({key:n,value:t})}),p)},unparseSingle:function(e){if(!e)return p;var t,n=e.key,a=e.value;return t=typeof n===u?y(n,!0):\"\",typeof a===u&&(t+=l+y(a)),t}}),t.exports={QueryParam:a}},{\"../superstring\":461,\"../util\":464,\"./property\":444,\"./property-list\":443}],448:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property\").Property,o=e(\"./variable-list\").VariableList;r.inherit(a=function PostmanRequestAuth(e,t){a.super_.call(this,e),t&&this.setParent(t),r.has(e,\"type\")&&this.use(e.type),r.forEach(r.omit(e,\"type\"),this.update.bind(this))},i),r.assign(a.prototype,{update(e,t){if(r.isObject(e)&&(t||(t=this.type),a.isValidType(t))){var n=this[t];o.isVariableList(n)||((n=this[t]=new o(this))._postman_requestAuthType=t),r.isArray(e)||o.isVariableList(e)?n.assimilate(e):n.syncFromObject(e,!1,!1)}},use(e,t){if(a.isValidType(e)){this.type=e;var n=this[e];o.isVariableList(n)||(n=this[e]=new o(this)),r.isArray(t)||o.isVariableList(t)?n.assimilate(t):n.syncFromObject(t,!1,!1)}},current(){throw new Error(\"`Request#current` has been discontinued, use `Request#parameters` instead.\")},parameters(){return this[this.type]},clear(e){a.isValidType(e)&&o.isVariableList(this[e])&&(this[e].clear(),e!==this.type&&delete this[e])}}),r.assign(a,{_postman_propertyName:\"RequestAuth\",isValidType:function(e){return r.isString(e)&&\"type\"!==e}}),t.exports={RequestAuth:a}},{\"../util\":464,\"./property\":444,\"./variable-list\":454}],449:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property-base\").PropertyBase,o=e(\"./property-list\").PropertyList,s=e(\"./query-param\").QueryParam,c=e(\"./form-param\").FormParam;r.inherit(a=function PostmanRequestBody(e){a.super_.apply(this,arguments),e&&this.update(e)},i),r.assign(a.prototype,{update(e){if(r.isString(e)&&(e={mode:\"raw\",raw:e}),e.mode){var t=a.MODES[e.mode.toString().toLowerCase()]||a.MODES.raw,n=e.urlencoded,i=e.formdata,u=e.graphql,l=e.file,p=e.raw;e.urlencoded&&(r.isString(e.urlencoded)&&(n=s.parse(e.urlencoded)),n=new o(s,this,n)),e.formdata&&(i=new o(c,this,e.formdata)),e.graphql&&(u={query:u.query,operationName:u.operationName,variables:u.variables}),r.isString(e.file)&&(l={src:l}),t===a.MODES.raw&&!p&&(p=\"\"),t===a.MODES.urlencoded&&!n&&(n=new o(s,this,[])),t===a.MODES.formdata&&!i&&(i=new o(c,this,[])),t===a.MODES.graphql&&!u&&(u={}),r.assign(this,{mode:t,raw:p,urlencoded:n,formdata:i,file:l,graphql:u,options:r.isObject(e.options)?e.options:void 0,disabled:e.disabled})}},toString(){return this.mode===a.MODES.formdata||this.mode===a.MODES.file?\"\":this.mode===a.MODES.urlencoded?o.isPropertyList(this.urlencoded)?s.unparse(this.urlencoded.all()):this.urlencoded&&r.isFunction(this.urlencoded.toString)?this.urlencoded.toString():\"\":this.mode===a.MODES.raw&&this.raw&&r.isFunction(this.raw.toString)?this.raw.toString():\"\"},isEmpty(){var e=this.mode,t=e&&this[e];return!t||(e===a.MODES.file?!(t.src||t.content):r.isString(t)?0===t.length:r.isFunction(t.count)?0===t.count():r.isEmpty(t))},toJSON(){var e=i.toJSON(this);return e.file&&e.file.content&&\"string\"!=typeof e.file.content&&r.unset(e,\"file.content\"),e}}),r.assign(a,{_postman_propertyName:\"RequestBody\",MODES:{file:\"file\",formdata:\"formdata\",graphql:\"graphql\",raw:\"raw\",urlencoded:\"urlencoded\"}}),t.exports={RequestBody:a}},{\"../util\":464,\"./form-param\":436,\"./property-base\":442,\"./property-list\":443,\"./query-param\":447}],450:[function(e,t,n){(function(n){(function(){var a,r=e(\"../util\"),i=r.lodash,o=e(\"./property-base\").PropertyBase,s=e(\"./property\").Property,c=e(\"./url\").Url,u=e(\"./proxy-config\").ProxyConfig,l=e(\"./certificate\").Certificate,p=e(\"./header-list\").HeaderList,d=e(\"./request-body\").RequestBody,f=e(\"./request-auth\").RequestAuth,h=void 0!==n&&i.isFunction(n.byteLength),m=\"COMPUTED\",g=\"CONTENT-LENGTH\";i.inherit(a=function PostmanRequest(e){a.super_.apply(this,arguments),\"string\"==typeof e&&(e={url:e}),i.assign(this,{url:new c,headers:new p(this,e&&e.header),method:i.has(e,\"method\")&&!i.isNil(e.method)?String(e.method).toUpperCase():\"GET\"}),this.update(e)},s),i.assign(a.prototype,{update:function(e){e&&(i.has(e,\"url\")&&this.url.update(e.url),e.header&&this.headers.repopulate(e.header),i.has(e,\"method\")&&(this.method=i.isNil(e.method)?\"GET\":String(e.method).toUpperCase()),i.mergeDefined(this,{body:i.createDefined(e,\"body\",d),auth:e.auth?new f(e.auth):void 0,proxy:e.proxy&&new u(e.proxy),certificate:e.certificate&&new l(e.certificate)}))},authorizeUsing:function(e,t){i.isObject(e)&&i.isNil(t)&&(t=i.omit(e,\"type\"),e=e.type),null!==e?f.isValidType(e)&&(this.auth?this.auth.clear(e):this.auth=new f(null,this),this.auth.use(e,t)):i.has(this,\"auth\")&&delete this.auth},getHeaders:function(e){return!e&&(e={}),this.headers.toObject(e.enabled,!e.ignoreCase,e.multiValue,e.sanitizeKeys)},forEachHeader:function(e){this.headers.all().forEach((function(t){return e(t,this)}),this)},addHeader:function(e){this.headers.add(e)},removeHeader:function(e,t){e=i.isString(e)?e:e.key,t=t||{},e&&(t.ignoreCase&&(e=e.toLowerCase()),this.headers.remove((function(n){return(t.ignoreCase?n.key.toLowerCase():n.key)===e})))},upsertHeader:function(e){if(e&&e.key){var t=this.headers.find({key:e.key});if(!t)return this.headers.add(e);t.value=e.value}},addQueryParams:function(e){this.url.addQueryParams(e)},removeQueryParams:function(e){this.url.removeQueryParams(e)},size:function(){var e,t=this.headers.get(\"Content-Length\"),a=this.url.getPathWithQuery(),i={body:0,header:0,total:0,source:m};return t&&r.isNumeric(t)?(i.body=parseInt(t,10),i.source=g):this.body&&(e=this.body.toString(),i.body=h?n.byteLength(e):e.length),i.header=(this.method+\" \"+a+\" HTTP/X.X\\r\\n\\r\\n\").length+this.headers.contentSize(),i.total=(i.body||0)+i.header,i},toJSON:function(){var e=o.toJSON(this);return i.isArray(e.header)&&!e.header.length&&delete e.header,e},clone:function(){return new a(this.toJSON())}}),i.assign(a,{_postman_propertyName:\"Request\",isRequest:function(e){return Boolean(e)&&(e instanceof a||i.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={Request:a}}).call(this)}).call(this,e(\"buffer\").Buffer)},{\"../util\":464,\"./certificate\":429,\"./header-list\":437,\"./property\":444,\"./property-base\":442,\"./proxy-config\":446,\"./request-auth\":448,\"./request-body\":449,\"./url\":453,buffer:\"buffer\"}],451:[function(e,t,n){(function(n){(function(){var a,r=e(\"../util\"),i=r.lodash,o=e(\"http-reasons\"),s=e(\"liquid-json\"),c=e(\"./property\").Property,u=e(\"./property-base\").PropertyBase,l=e(\"./request\").Request,p=e(\"./cookie-list\").CookieList,d=e(\"./header-list\").HeaderList,f=e(\"../content-info\").contentInfo,h=/^[^{(].*\\(/,m=/\\)[^}].*$|\\)$/,g=void 0!==n&&i.isFunction(n.byteLength);i.inherit(a=function PostmanResponse(e){a.super_.apply(this,arguments),this.update(e||{})},c),i.assign(a.prototype,{update(e){const t=function(e){if(e)return\"Buffer\"===e.type&&i.isArray(e.data)?\"function\"==typeof n?n.from(e.data):new Uint8Array(e.data).buffer:\"Base64\"===e.type&&\"string\"==typeof e.data?n.from(e.data,\"base64\"):e}(e.stream);i.mergeDefined(this._details=i.clone(o.lookup(e.code)),{name:i.choose(e.reason,e.status),code:e.code,standardName:this._details.name}),i.mergeDefined(this,{originalRequest:e.originalRequest?new l(e.originalRequest):void 0,status:this._details.name,code:e.code,headers:new d(this,e.header),body:e.body,stream:e.body&&i.isObject(e.body)?e.body:t,cookies:new p(this,e.cookie),responseTime:e.responseTime,responseSize:t&&t.byteLength,downloadedBytes:e.downloadedBytes})}}),i.assign(a.prototype,{_postman_propertyRequiresId:!0,toJSON:function(){var e=u.toJSON(this);return e._details&&delete e._details,e},reason:function(){return this.status||o.lookup(this.code).name},details:function(){return this._details&&this._details.code===this.code||(this._details=i.clone(o.lookup(this.code)),this._details.code=this.code,this._details.standardName=this._details.name),i.clone(this._details)},text:function(){return this.stream?r.bufferOrArrayBufferToString(this.stream,this.contentInfo().charset):this.body},json:function(e,t){return s.parse(this.text(),e,t)},jsonp:function(e,t){return s.parse((this.text()||\"\").replace(h,\"\").replace(m,\"\"),e,t)},contentInfo:function(){return f(this)},mime:function(){throw new Error(\"`Response#mime` has been discontinued, use `Response#contentInfo` instead.\")},dataURI:function(){const{contentType:e}=this.contentInfo();return e?`data:${e};base64, `+(!i.isNil(this.stream)&&r.bufferOrArrayBufferToBase64(this.stream)||!i.isNil(this.body)&&r.btoa(this.body)||\"\"):\"\"},size:function(){const e={body:0,header:0,total:0},t=this.headers.get(\"Content-Length\");return r.isNumeric(this.downloadedBytes)?e.body=this.downloadedBytes:t&&r.isNumeric(t)?e.body=i.parseInt(t,10):this.stream&&r.isNumeric(this.stream.byteLength)?e.body=this.stream.byteLength:i.isNil(this.body)||(e.body=g?n.byteLength(this.body.toString()):this.body.toString().length),e.header=(\"HTTP/X.X \"+this.code+\" \"+this.reason()+\"\\r\\n\\r\\n\").length+this.headers.contentSize(),e.total=(e.body||0)+e.header,e},encoding:function(){var e,t=this.headers.get(\"Content-Encoding\"),n=this.stream||this.body;return t?e=\"header\":n&&(31===n[0]&&139===n[1]&&8===n[2]&&(t=\"gzip\"),t&&(e=\"body\")),{format:t,source:e}}}),i.assign(a,{_postman_propertyName:\"Response\",isResponse:function(e){return Boolean(e)&&(e instanceof a||i.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))},createFromNode:function(e,t){return new a({cookie:t,body:e.body.toString(),stream:e.body,header:e.headers,code:e.statusCode,status:e.statusMessage,responseTime:e.elapsedTime})},mimeInfo:function(){throw new Error(\"`Response.mimeInfo` has been discontinued, use `Response#contentInfo` instead.\")},timingPhases:function(e){if(e&&e.offset){var t,n=e.offset;return t={prepare:n.request,wait:n.socket-n.request,dns:n.lookup-n.socket,tcp:n.connect-n.lookup,firstByte:n.response-n.connect,download:n.end-n.response,process:n.done-n.end,total:n.done},n.secureConnect&&(t.secureHandshake=n.secureConnect-n.connect,t.firstByte=n.response-n.secureConnect),t}}}),t.exports={Response:a}}).call(this)}).call(this,e(\"buffer\").Buffer)},{\"../content-info\":458,\"../util\":464,\"./cookie-list\":431,\"./header-list\":437,\"./property\":444,\"./property-base\":442,\"./request\":450,buffer:\"buffer\",\"http-reasons\":380,\"liquid-json\":\"json\"}],452:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property\").Property,o=e(\"./url\").Url,s=/\\r?\\n/g;r.inherit(a=function PostmanScript(e){a.super_.apply(this,arguments),e&&this.update(e)},i),r.assign(a.prototype,{_postman_propertyRequiresId:!0,toSource:function(){return this.exec?this.exec.join(\"\\n\"):void 0},update:function(e){(r.isString(e)||r.isArray(e))&&(e={exec:e}),e&&(this.type=e.type||\"text/javascript\",this.packages=e.packages,r.has(e,\"src\")&&(this.src=new o(e.src)),!this.src&&r.has(e,\"exec\")&&(this.exec=r.isString(e.exec)?e.exec.split(s):r.isArray(e.exec)?e.exec:void 0))},isEmpty:function(){return r.isEmpty(r.trim(this.toSource()))}}),r.assign(a,{_postman_propertyName:\"Script\",isScript:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={Script:a}},{\"../util\":464,\"./property\":444,\"./url\":453}],453:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"postman-url-encoder/parser\").parse,o=e(\"./property-base\").PropertyBase,s=e(\"./query-param\").QueryParam,c=e(\"./property-list\").PropertyList,u=e(\"./variable-list\").VariableList,l=\"\",p=\"string\",d=\"http\",f=\"/\",h=\"://\",m=d+h,g=/^\\/((.+))$/,y=/\\.(?![^{]*\\}{2})/g,v=function(e){if(String(e).startsWith(\":\")){const t=e.indexOf(\".\");return e.slice(1,-1===t?void 0:t)||null}return null};r.inherit(a=function PostmanUrl(e){a.super_.apply(this,arguments),this.update(e)},o),r.assign(a.prototype,{update(e){!e&&(e=l);var t=r.isString(e)?a.parse(e):e,n=t.auth,i=t.protocol,o=t.port,p=t.path,d=t.hash,h=t.host,m=t.query,v=t.variable;m&&(r.isString(m)&&(m=s.parse(m)),!r.isArray(m)&&r.keys(m).length&&(m=r.map(r.keys(m),(function(e){return{key:e,value:m[e]}})))),r.isArray(v)&&(v=r.map(v,(function(e){return r.isObject(e)&&(e.key=e.key||e.id),e}))),r.isString(p)&&(p&&(p=p.replace(g,\"$1\")),p=p?p===f?[l]:p.split(f):void 0),r.isString(h)&&(h=h.split(y)),r.assign(this,{auth:n,protocol:i,port:o,path:p,hash:d,host:h,query:new c(s,this,m||[]),variables:new u(this,v||[])})},addQueryParams(e){e=r.isString(e)?s.parse(e):e,this.query.populate(e)},removeQueryParams(e){e=r.isArray(e)?r.map(e,(function(e){return e.key?e.key:e})):[e],this.query.remove((function(t){return r.includes(e,t.key)}))},getRaw(){throw new Error(\"`Url#getRaw` has been discontinued, use `Url#toString` instead.\")},toString(e){var t,n,a=l,i=this.protocol;return e&&!i&&(i=m),i&&(a+=r.endsWith(i,h)?i:i+h),this.auth&&(typeof this.auth.user===p&&(n=this.auth.user),typeof this.auth.password===p&&(!n&&(n=l),n+=\":\"+this.auth.password),typeof n===p&&(a+=n+\"@\")),this.host&&(a+=this.getHost()),\"function\"==typeof r.get(this.port,\"toString\")&&(a+=\":\"+this.port.toString()),this.path&&(a+=this.getPath()),this.query&&this.query.count()&&((t=this.getQueryString())===l&&(t=this.query.find((function(e){return!(e&&e.disabled)}))&&l),typeof t===p&&(a+=\"?\"+t)),typeof this.hash===p&&(a+=\"#\"+this.hash),a},getPath(e){if(e)return f+this.path.join(f);var t,n=this;return t=r.transform(this.path,(function(e,t){const a=v(t),r=n.variables.get(a);r&&typeof r===p&&(t=r+t.slice(a.length+1)),e.push(t)}),[]),f+t.join(f)},getQueryString(){return this.query.count()?s.unparse(this.query.all()):l},getPathWithQuery(){var e=this.getPath(),t=this.getQueryString();return t&&(e+=\"?\"+t),e},getHost(){return this.host?r.isArray(this.host)?this.host.join(\".\"):this.host.toString():l},getRemote(e){var t=this.getHost(),n=this.port&&this.port.toString();return e&&!n&&(n=this.protocol&&\"https\"===this.protocol?\"443\":\"80\"),n?t+\":\"+n:t},getOAuth1BaseUrl(){var e=this.protocol||d,t=this.port?this.port.toString():void 0,n=(\"80\"===t||\"443\"===t||void 0===t)&&this.host.join(\".\")||this.host.join(\".\")+\":\"+t,a=this.getPath();return(e=r.endsWith(e,h)?e:e+h).toLowerCase()+n.toLowerCase()+a}}),r.assign(a,{_postman_propertyName:\"Url\",parse:function(e){e=i(e);var t,n={};return e.auth&&(e.auth={user:e.auth[0],password:e.auth[1]}),e.query&&(e.query=e.query.map(s.parseSingle)),t=r.transform(e.path,(function(e,t){(t=v(t))&&!n[t]&&(n[t]=!0,e.push({key:t}))}),[]),e.variable=t.length?t:void 0,e},isUrl:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={Url:a}},{\"../util\":464,\"./property-base\":442,\"./property-list\":443,\"./query-param\":447,\"./variable-list\":454,\"postman-url-encoder/parser\":486}],454:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property-list\").PropertyList,o=e(\"./property\").Property,s=e(\"./variable\").Variable;r.inherit(a=function PostmanVariableList(e,t){a.super_.call(this,s,e,t)},i),r.assign(a.prototype,{replace(e,t){return o.replaceSubstitutions(e,this,t)},substitute(e,t,n){var a=[],i={variables:this,__parent:this.__parent};do{i.variables&&a.push(i.variables),i=i.__parent}while(i);return i=null,o.replaceSubstitutionsIn(e,r.union(a,t),n)},syncFromObject(e,t,n){var a,i=this,o=t&&{created:[],updated:[],deleted:[]},s=i._postman_listIndexKey;return r.isObject(e)?(r.forOwn(e,(function(e,t){i.has(t)?(i.one(t).set(e),o&&o.updated.push(t)):((a={value:e})[s]=t,i.add(a),a=null,o&&o.created.push(t))})),!1!==n&&r.forEach(i.reference,(function(t,n){r.has(e,n)||(i.remove(n),o&&o.deleted.push(n))})),o):o},syncToObject(e){var t=this;return!r.isObject(e)&&(e={}),r.forEach(e,(function(n,a){!r.has(t.reference,a)&&delete e[a]})),t.each((function(t){e[t.key]=t.valueOf()})),e},oneNormalizedVariable(e){var t,n=this._postman_listIndexKey,a=this.reference[e];if(a&&!a.disabled)return a;for(t=this.members.length-1;t>=0;t--)if((a=this.members[t])[n]===e&&!a.disabled){this.reference[e]=a;break}return this.reference[e]}}),r.assign(a,{_postman_propertyName:\"VariableList\",isVariableList:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={VariableList:a}},{\"../util\":464,\"./property\":444,\"./property-list\":443,\"./variable\":456}],455:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property\").Property,o=e(\"./property-base\").PropertyBase,s=e(\"./variable-list\").VariableList,c=e(\"./mutation-tracker\").MutationTracker,u=\"set\",l=\"unset\";r.inherit(a=function PostmanVariableScope(e,t){(r.isArray(e)||s.isVariableList(e))&&(e={values:e}),t&&!r.isArray(t)&&(t=[t]),a.super_.call(this,e);var n,i,o=e&&e.values,u=e&&e.mutations;if(this.values=new s(this,s.isVariableList(o)?o.toJSON():o),t)for(this._layers=[],i=0,n=t.length;i<n;i++)s.isVariableList(t[i])&&this._layers.push(t[i]);u&&(this.mutations=new c(u)),e&&e.prefix&&(this.prefix=e.prefix)},i),r.assign(a.prototype,{_postman_propertyRequiresId:!0,variables:function(){throw new Error(\"`VariableScope#variables` has been discontinued, use `VariableScope#syncVariablesTo` instead.\")},toObject:function(e,t){if(!this._layers)return this.values.toObject(e,t);var n={};return r.forEachRight(this._layers,(function(a){r.assign(n,a.toObject(e,t))})),r.assign(n,this.values.toObject(e,t))},has:function(e){const t=(this.prefix||\"\")+e;var n,a,r=this.values.oneNormalizedVariable(t);if((!r||!0===r.disabled)&&this._layers)for(n=0,a=this._layers.length;n<a&&(!(r=this._layers[n].oneNormalizedVariable(t))||!0===r.disabled);n++);return Boolean(r&&!0!==r.disabled)},get:function(e){const t=(this.prefix||\"\")+e;var n,a,r=this.values.oneNormalizedVariable(t);if((!r||!0===r.disabled)&&this._layers)for(n=0,a=this._layers.length;n<a&&(!(r=this._layers[n].oneNormalizedVariable(t))||!0===r.disabled);n++);return r&&!0!==r.disabled?r.valueOf():void 0},set:function(e,t,n){const a=(this.prefix||\"\")+e;var i=this.values.oneNormalizedVariable(a),o={key:a,value:t};r.isString(n)&&(o.type=n),i&&!i.disabled?i.update(o):this.values.add(o),this._postman_enableTracking&&this.mutations.track(u,e,t)},unset:function(e){const t=(this.prefix||\"\")+e;var n;this.values.remove((function(e){return e.key===t&&(!e.disabled||(n=e,!1))})),n&&(this.values.reference[t]=n),this._postman_enableTracking&&this.mutations.track(l,e)},clear:function(){var e=this.mutations;this._postman_enableTracking&&this.values.each((function(t){e.track(l,t.key)})),this.values.clear()},replaceIn:function(e){return r.isString(e)||r.isArray(e)?i.replaceSubstitutionsIn({template:e},r.concat(this.values,this._layers)).template:r.isObject(e)?i.replaceSubstitutionsIn(e,r.concat(this.values,this._layers)):e},enableTracking:function(e){this._postman_enableTracking||(this._postman_enableTracking=!0,this.mutations=new c(e))},disableTracking:function(){this._postman_enableTracking=!1},applyMutation:function(e,t,n){this[e]&&this[e](t,n)},syncVariablesFrom:function(e,t){return this.values.syncFromObject(e,t)},syncVariablesTo:function(e){return this.values.syncToObject(e)},toJSON:function(){var e=o.toJSON(this);return e.value&&(e.values=e.value,delete e.value),e._layers&&delete e._layers,e._postman_enableTracking&&delete e._postman_enableTracking,e},addLayer:function(e){s.isVariableList(e)&&(!this._layers&&(this._layers=[]),this._layers.push(e))}}),r.assign(a,{_postman_propertyName:\"VariableScope\",isVariableScope:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={VariableScope:a}},{\"../util\":464,\"./mutation-tracker\":441,\"./property\":444,\"./property-base\":442,\"./variable-list\":454}],456:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"./property\").Property,o=\"null\",s=\"string\";r.inherit(a=function PostmanVariable(e){a.super_.apply(this,arguments);var t=this.constructor._postman_propertyIndexKey;r.assign(this,{type:\"any\",value:void 0}),r.isNil(e)||(r.has(e,t)&&(this[t]=e[t]),this.update(e))},i),r.assign(a.prototype,{get(){return r.isFunction(this.value)?this.castOut(this.value()):this.castOut(this.value)},set(e){this.value=r.isFunction(e)?e:this.castIn(e)},valueOf(e){return arguments.length&&this.set(e),this.get()},toString(){var e=this.valueOf();return null===e?o:!r.isNil(e)&&r.isFunction(e.toString)?e.toString():\"\"},cast(e){return this.castOut(e)},castIn(e){var t=a.types[this.type]||a.types.any;return r.isFunction(t)?t(e):t.in(e)},castOut(e){var t=a.types[this.type]||a.types.any;return r.isFunction(t)?t(e):t.out(e)},valueType(e,t){return!r.isNil(e)&&(e=e.toString().toLowerCase()),a.types[e]?(this.type=e,t||r.isFunction(this.value)||(n=this.get(),this.set(n),n=null),this.type):this.type||\"any\";var n},update(e){r.isObject(e)&&(r.has(e,\"type\")&&this.valueType(e.type,r.has(e,\"value\")),r.has(e,\"value\")&&this.set(e.value),r.has(e,\"system\")&&(this.system=e.system),r.has(e,\"disabled\")&&(this.disabled=e.disabled),r.has(e,\"description\")&&this.describe(e.description))}}),r.assign(a,{_postman_propertyName:\"Variable\",_postman_propertyIndexKey:\"key\",types:{string:String,boolean:Boolean,number:Number,array:{in(e){var t;try{t=typeof e===s?e:JSON.stringify(e)}catch(n){t=o}return t},out(e){var t;try{t=JSON.parse(e)}catch(n){t=void 0}return Array.isArray(t)?t:void 0}},object:{in(e){var t;try{t=typeof e===s?e:JSON.stringify(e)}catch(n){t=o}return t},out(e){var t;try{t=JSON.parse(e)}catch(n){t=void 0}return t instanceof Object&&!Array.isArray(t)?t:void 0}},any:{in:e=>e,out:e=>e}},isVariable:function(e){return Boolean(e)&&(e instanceof a||r.inSuperChain(e.constructor,\"_postman_propertyName\",a._postman_propertyName))}}),t.exports={Variable:a}},{\"../util\":464,\"./property\":444}],457:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"semver\"),o=e(\"./property-base\").PropertyBase;r.inherit(a=function PostmanPropertyVersion(e){e&&this.set(e)},o),r.assign(a.prototype,{set(e){var t=i.parse(e)||e||{};r.assign(this,{raw:t.raw,major:t.major,minor:t.minor,patch:t.patch,prerelease:t.prerelease&&t.prerelease.join&&t.prerelease.join()||t.prerelease,build:t.build&&t.build.join&&t.build.join()||t.build,string:t.version})},toString(){return this.string||this.raw}}),r.assign(a,{_postman_propertyName:\"Version\"}),t.exports={Version:a}},{\"../util\":464,\"./property-base\":442,semver:541}],458:[function(e,t,n){(function(n){(function(){var a=e(\"../util\").lodash,r=e(\"file-type\"),i=e(\"mime-types\"),o=e(\"mime-format\"),s=\"utf8\",c=\"Content-Type\",u=\"Content-Disposition\",l=void 0!==n&&a.isFunction(n.byteLength),p={fileNameRegex:/;[ \\t]*(?:filename)[ \\t]*=[ \\t]*(\"(?:[\\x20!\\x23-\\x5b\\x5d-\\x7e\\x80-\\xff]|\\\\[\\x20-\\x7e])*\"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[ \\t]*/,encodedFileNameRegex:/;[ \\t]*(?:filename\\*)[ \\t]*=[ \\t]*([A-Za-z0-9!#$%&+\\-^_`{}~]+)'.*'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)[ \\t]*/,quotedPairRegex:/\\\\([ -~])/g,hexCharMatchRegex:/%([0-9A-Fa-f]{2})/g,nonLatinCharMatchRegex:/[^\\x20-\\x7e\\xa0-\\xff]/g},d=function(e,t){return String.fromCharCode(parseInt(t,16))},f={\"iso-8859-1\":e=>e.replace(p.nonLatinCharMatchRegex,\"?\"),\"utf-8\"(e){if(l)return n.from(e,\"binary\").toString(s)}},h=function(e){var t,n;if(e)return(t=p.encodedFileNameRegex.exec(e))&&(n=function(e,t){if(e&&f[t])return f[t](e.replace(p.hexCharMatchRegex,d))}(t[2],t[1])),n||((n=p.fileNameRegex.exec(e))&&(n=n[1]),n&&'\"'===n[0]&&(n=n.substr(1,n.length-2).replace(p.quotedPairRegex,\"$1\"))),n};t.exports={contentInfo(e){var t=e.headers.get(c),n=e.headers.get(u),a=function(e,t){var n,a,c;return e||(a=r(t))&&(e=a.mime)&&(c=a.ext),e||(e=\"text/plain\"),{contentType:(n=o.lookup(e)).source,mimeType:n.type,mimeFormat:n.format,charset:n.charset||s,extension:c||i.extension(n.source)||\"\"}}(t,e.stream||e.body),l=h(n),p=a.extension,d={};return l||(l=\"response\",p&&(l+=\".\"+p)),a.contentType&&(d.contentType=a.contentType),a.mimeType&&(d.mimeType=a.mimeType),a.mimeFormat&&(d.mimeFormat=a.mimeFormat),a.charset&&(d.charset=a.charset),p&&(d.fileExtension=p),l&&(d.fileName=l),d},regexes:p}}).call(this)}).call(this,e(\"buffer\").Buffer)},{\"../util\":464,buffer:\"buffer\",\"file-type\":362,\"mime-format\":415,\"mime-types\":416}],459:[function(e,t,n){t.exports={PropertyBase:e(\"./collection/property-base\").PropertyBase,Certificate:e(\"./collection/certificate\").Certificate,CertificateList:e(\"./collection/certificate-list\").CertificateList,Collection:e(\"./collection/collection\").Collection,Cookie:e(\"./collection/cookie\").Cookie,CookieList:e(\"./collection/cookie-list\").CookieList,Description:e(\"./collection/description\").Description,Event:e(\"./collection/event\").Event,EventList:e(\"./collection/event-list\").EventList,FormParam:e(\"./collection/form-param\").FormParam,Header:e(\"./collection/header\").Header,HeaderList:e(\"./collection/header-list\").HeaderList,Item:e(\"./collection/item\").Item,ItemGroup:e(\"./collection/item-group\").ItemGroup,MutationTracker:e(\"./collection/mutation-tracker\").MutationTracker,PropertyList:e(\"./collection/property-list\").PropertyList,Property:e(\"./collection/property\").Property,QueryParam:e(\"./collection/query-param\").QueryParam,Request:e(\"./collection/request\").Request,RequestAuth:e(\"./collection/request-auth\").RequestAuth,RequestBody:e(\"./collection/request-body\").RequestBody,Response:e(\"./collection/response\").Response,Script:e(\"./collection/script\").Script,Url:e(\"./collection/url\").Url,UrlMatchPattern:e(\"./url-pattern/url-match-pattern\").UrlMatchPattern,UrlMatchPatternList:e(\"./url-pattern/url-match-pattern-list\").UrlMatchPatternList,Variable:e(\"./collection/variable\").Variable,VariableList:e(\"./collection/variable-list\").VariableList,VariableScope:e(\"./collection/variable-scope\").VariableScope,ProxyConfig:e(\"./collection/proxy-config\").ProxyConfig,ProxyConfigList:e(\"./collection/proxy-config-list\").ProxyConfigList,Version:e(\"./collection/version\").Version}},{\"./collection/certificate\":429,\"./collection/certificate-list\":428,\"./collection/collection\":430,\"./collection/cookie\":432,\"./collection/cookie-list\":431,\"./collection/description\":433,\"./collection/event\":435,\"./collection/event-list\":434,\"./collection/form-param\":436,\"./collection/header\":438,\"./collection/header-list\":437,\"./collection/item\":440,\"./collection/item-group\":439,\"./collection/mutation-tracker\":441,\"./collection/property\":444,\"./collection/property-base\":442,\"./collection/property-list\":443,\"./collection/proxy-config\":446,\"./collection/proxy-config-list\":445,\"./collection/query-param\":447,\"./collection/request\":450,\"./collection/request-auth\":448,\"./collection/request-body\":449,\"./collection/response\":451,\"./collection/script\":452,\"./collection/url\":453,\"./collection/variable\":456,\"./collection/variable-list\":454,\"./collection/variable-scope\":455,\"./collection/version\":457,\"./url-pattern/url-match-pattern\":463,\"./url-pattern/url-match-pattern-list\":462}],460:[function(e,t,n){var a=e(\"@faker-js/faker/locale/en\"),r=e(\"uuid\"),i=[\"af\",\"am\",\"an\",\"ar\",\"ast\",\"az\",\"be\",\"bg\",\"bh\",\"bn\",\"br\",\"bs\",\"ca\",\"ceb\",\"ckb\",\"co\",\"cs\",\"cy\",\"da\",\"de\",\"el\",\"en\",\"eo\",\"es\",\"et\",\"eu\",\"fa\",\"fi\",\"fil\",\"fo\",\"fr\",\"fy\",\"ga\",\"gd\",\"gl\",\"gn\",\"gu\",\"ha\",\"haw\",\"he\",\"hi\",\"hmn\",\"hr\",\"ht\",\"hu\",\"hy\",\"ia\",\"id\",\"ig\",\"is\",\"it\",\"ja\",\"jv\",\"ka\",\"kk\",\"km\",\"kn\",\"ko\",\"ku\",\"ky\",\"la\",\"lb\",\"ln\",\"lo\",\"lt\",\"lv\",\"mg\",\"mi\",\"mk\",\"ml\",\"mn\",\"mo\",\"mr\",\"ms\",\"mt\",\"my\",\"nb\",\"ne\",\"nl\",\"nn\",\"no\",\"ny\",\"oc\",\"om\",\"or\",\"pa\",\"pl\",\"ps\",\"pt\",\"qu\",\"rm\",\"ro\",\"ru\",\"sd\",\"sh\",\"si\",\"sk\",\"sl\",\"sm\",\"sn\",\"so\",\"sq\",\"sr\",\"st\",\"su\",\"sv\",\"sw\",\"ta\",\"te\",\"tg\",\"th\",\"ti\",\"tk\",\"to\",\"tr\",\"tt\",\"tw\",\"ug\",\"uk\",\"ur\",\"uz\",\"vi\",\"wa\",\"xh\",\"yi\",\"yo\",\"zh\",\"zu\"],o=[\"/Applications\",\"/bin\",\"/boot\",\"/boot/defaults\",\"/dev\",\"/etc\",\"/etc/defaults\",\"/etc/mail\",\"/etc/namedb\",\"/etc/periodic\",\"/etc/ppp\",\"/home\",\"/home/user\",\"/home/user/dir\",\"/lib\",\"/Library\",\"/lost+found\",\"/media\",\"/mnt\",\"/net\",\"/Network\",\"/opt\",\"/opt/bin\",\"/opt/include\",\"/opt/lib\",\"/opt/sbin\",\"/opt/share\",\"/private\",\"/private/tmp\",\"/private/var\",\"/proc\",\"/rescue\",\"/root\",\"/sbin\",\"/selinux\",\"/srv\",\"/sys\",\"/System\",\"/tmp\",\"/Users\",\"/usr\",\"/usr/X11R6\",\"/usr/bin\",\"/usr/include\",\"/usr/lib\",\"/usr/libdata\",\"/usr/libexec\",\"/usr/local/bin\",\"/usr/local/src\",\"/usr/obj\",\"/usr/ports\",\"/usr/sbin\",\"/usr/share\",\"/usr/src\",\"/var\",\"/var/log\",\"/var/mail\",\"/var/spool\",\"/var/tmp\",\"/var/yp\"],s={$guid:{description:\"A v4 style guid\",generator:function(){return r.v4()}},$timestamp:{description:\"The current timestamp\",generator:function(){return Math.round(Date.now()/1e3)}},$isoTimestamp:{description:\"The current ISO timestamp at zero UTC\",generator:function(){return(new Date).toISOString()}},$randomInt:{description:\"A random integer between 0 and 1000\",generator:function(){return~~(1001*Math.random())}},$randomPhoneNumber:{description:\"A random 10-digit phone number\",generator:function(){return a.phone.phoneNumberFormat(0)}},$randomPhoneNumberExt:{description:\"A random phone number with extension (12 digits)\",generator:function(){return a.datatype.number({min:1,max:99})+\"-\"+a.phone.phoneNumberFormat(0)}},$randomLocale:{description:\"A random two-letter language code (ISO 639-1)\",generator:function(){return a.random.arrayElement(i)}},$randomWords:{description:\"Some random words\",generator:function(){var e,t=[],n=a.datatype.number({min:2,max:5});for(e=0;e<n;e++)t.push(a.random.word());return t.join(\" \")}},$randomFilePath:{description:\"A random file path\",generator:function(){return s.$randomDirectoryPath.generator()+\"/\"+a.system.fileName()}},$randomDirectoryPath:{description:\"A random directory path\",generator:function(){return a.random.arrayElement(o)}},$randomCity:{description:\"A random city name\",generator:a.address.city},$randomStreetName:{description:\"A random street name\",generator:a.address.streetName},$randomStreetAddress:{description:\"A random street address (e.g. 1234 Main Street)\",generator:a.address.streetAddress},$randomCountry:{description:\"A random country\",generator:a.address.country},$randomCountryCode:{description:\"A random 2-letter country code (ISO 3166-1 alpha-2)\",generator:a.address.countryCode},$randomLatitude:{description:\"A random latitude coordinate\",generator:a.address.latitude},$randomLongitude:{description:\"A random longitude coordinate\",generator:a.address.longitude},$randomColor:{description:\"A random color\",generator:a.commerce.color},$randomDepartment:{description:\"A random commerce category (e.g. electronics, clothing)\",generator:a.commerce.department},$randomProductName:{description:\"A random product name (e.g. handmade concrete tuna)\",generator:a.commerce.productName},$randomProductAdjective:{description:\"A random product adjective (e.g. tasty, eco-friendly)\",generator:a.commerce.productAdjective},$randomProductMaterial:{description:\"A random product material (e.g. steel, plastic, leather)\",generator:a.commerce.productMaterial},$randomProduct:{description:\"A random product (e.g. shoes, table, chair)\",generator:a.commerce.product},$randomCompanyName:{description:\"A random company name\",generator:a.company.companyName},$randomCompanySuffix:{description:\"A random company suffix (e.g. Inc, LLC, Group)\",generator:a.company.companySuffix},$randomCatchPhrase:{description:\"A random catchphrase\",generator:a.company.catchPhrase},$randomBs:{description:\"A random phrase of business speak\",generator:a.company.bs},$randomCatchPhraseAdjective:{description:\"A random catchphrase adjective\",generator:a.company.catchPhraseAdjective},$randomCatchPhraseDescriptor:{description:\"A random catchphrase descriptor\",generator:a.company.catchPhraseDescriptor},$randomCatchPhraseNoun:{description:\"Randomly generates a catchphrase noun\",generator:a.company.catchPhraseNoun},$randomBsAdjective:{description:\"A random business speak adjective\",generator:a.company.bsAdjective},$randomBsBuzz:{description:\"A random business speak buzzword\",generator:a.company.bsBuzz},$randomBsNoun:{description:\"A random business speak noun\",generator:a.company.bsNoun},$randomDatabaseColumn:{description:\"A random database column name (e.g. updatedAt, token, group)\",generator:a.database.column},$randomDatabaseType:{description:\"A random database type (e.g. tiny int, double, point)\",generator:a.database.type},$randomDatabaseCollation:{description:\"A random database collation (e.g. cp1250_bin)\",generator:a.database.collation},$randomDatabaseEngine:{description:\"A random database engine (e.g. Memory, Archive, InnoDB)\",generator:a.database.engine},$randomDatePast:{description:\"A random past datetime\",generator:a.date.past},$randomDateFuture:{description:\"A random future datetime\",generator:a.date.future},$randomDateRecent:{description:\"A random recent datetime\",generator:a.date.recent},$randomMonth:{description:\"A random month\",generator:a.date.month},$randomWeekday:{description:\"A random weekday\",generator:a.date.weekday},$randomBankAccount:{description:\"A random 8-digit bank account number\",generator:a.finance.account},$randomBankAccountName:{description:\"A random bank account name (e.g. savings account, checking account)\",generator:a.finance.accountName},$randomCreditCardMask:{description:\"A random masked credit card number\",generator:a.finance.mask},$randomPrice:{description:\"A random price between 0.00 and 1000.00\",generator:a.finance.amount},$randomTransactionType:{description:\"A random transaction type (e.g. invoice, payment, deposit)\",generator:a.finance.transactionType},$randomCurrencyCode:{description:\"A random 3-letter currency code (ISO-4217)\",generator:a.finance.currencyCode},$randomCurrencyName:{description:\"A random currency name\",generator:a.finance.currencyName},$randomCurrencySymbol:{description:\"A random currency symbol\",generator:a.finance.currencySymbol},$randomBitcoin:{description:\"A random bitcoin address\",generator:a.finance.bitcoinAddress},$randomBankAccountIban:{description:\"A random 15-31 character IBAN (International Bank Account Number)\",generator:a.finance.iban},$randomBankAccountBic:{description:\"A random BIC (Bank Identifier Code)\",generator:a.finance.bic},$randomAbbreviation:{description:\"A random abbreviation\",generator:a.hacker.abbreviation},$randomAdjective:{description:\"A random adjective\",generator:a.hacker.adjective},$randomNoun:{description:\"A random noun\",generator:a.hacker.noun},$randomVerb:{description:\"A random verb\",generator:a.hacker.verb},$randomIngverb:{description:\"A random verb ending in “-ing”\",generator:a.hacker.ingverb},$randomPhrase:{description:\"A random phrase\",generator:a.hacker.phrase},$randomAvatarImage:{description:\"A random avatar image\",generator:()=>a.random.arrayElement([`https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/${a.datatype.number(1249)}.jpg`,`https://avatars.githubusercontent.com/u/${a.datatype.number(1e8)}`])},$randomImageUrl:{description:\"A URL for a random image\",generator:a.image.imageUrl},$randomAbstractImage:{description:\"A URL for a random abstract image\",generator:a.image.abstract},$randomAnimalsImage:{description:\"A URL for a random animal image\",generator:a.image.animals},$randomBusinessImage:{description:\"A URL for a random stock business image\",generator:a.image.business},$randomCatsImage:{description:\"A URL for a random cat image\",generator:a.image.cats},$randomCityImage:{description:\"A URL for a random city image\",generator:a.image.city},$randomFoodImage:{description:\"A URL for a random food image\",generator:a.image.food},$randomNightlifeImage:{description:\"A URL for a random nightlife image\",generator:a.image.nightlife},$randomFashionImage:{description:\"A URL for a random fashion image\",generator:a.image.fashion},$randomPeopleImage:{description:\"A URL for a random image of a person\",generator:a.image.people},$randomNatureImage:{description:\"A URL for a random nature image\",generator:a.image.nature},$randomSportsImage:{description:\"A URL for a random sports image\",generator:a.image.sports},$randomTransportImage:{description:\"A URL for a random transportation image\",generator:a.image.transport},$randomImageDataUri:{description:\"A random image data URI\",generator:a.image.dataUri},$randomEmail:{description:\"A random email address\",generator:a.internet.email},$randomExampleEmail:{description:\"A random email address from an “example” domain (e.g. ben@example.com)\",generator:a.internet.exampleEmail},$randomUserName:{description:\"A random username\",generator:a.internet.userName},$randomProtocol:{description:\"A random internet protocol\",generator:a.internet.protocol},$randomUrl:{description:\"A random URL\",generator:a.internet.url},$randomDomainName:{description:\"A random domain name (e.g. gracie.biz, trevor.info)\",generator:a.internet.domainName},$randomDomainSuffix:{description:\"A random domain suffix (e.g. .com, .net, .org)\",generator:a.internet.domainSuffix},$randomDomainWord:{description:\"A random unqualified domain name (a name with no dots)\",generator:a.internet.domainWord},$randomIP:{description:\"A random IPv4 address\",generator:a.internet.ip},$randomIPV6:{description:\"A random IPv6 address\",generator:a.internet.ipv6},$randomUserAgent:{description:\"A random user agent\",generator:a.internet.userAgent},$randomHexColor:{description:\"A random hex value\",generator:a.internet.color},$randomMACAddress:{description:\"A random MAC address\",generator:a.internet.mac},$randomPassword:{description:\"A random 15-character alpha-numeric password\",generator:a.internet.password},$randomLoremWord:{description:\"A random word of lorem ipsum text\",generator:a.lorem.word},$randomLoremWords:{description:\"Some random words of lorem ipsum text\",generator:a.lorem.words},$randomLoremSentence:{description:\"A random sentence of lorem ipsum text\",generator:a.lorem.sentence},$randomLoremSlug:{description:\"A random lorem ipsum URL slug\",generator:a.lorem.slug},$randomLoremSentences:{description:\"A random 2-6 sentences of lorem ipsum text\",generator:a.lorem.sentences},$randomLoremParagraph:{description:\"A random paragraph of lorem ipsum text\",generator:a.lorem.paragraph},$randomLoremParagraphs:{description:\"3 random paragraphs of lorem ipsum text\",generator:a.lorem.paragraphs},$randomLoremText:{description:\"A random amount of lorem ipsum text\",generator:a.lorem.text},$randomLoremLines:{description:\"1-5 random lines of lorem ipsum\",generator:a.lorem.lines},$randomFirstName:{description:\"A random first name\",generator:a.name.firstName},$randomLastName:{description:\"A random last name\",generator:a.name.lastName},$randomFullName:{description:\"A random first and last name\",generator:a.name.findName},$randomJobTitle:{description:\"A random job title (e.g. senior software developer)\",generator:a.name.jobTitle},$randomNamePrefix:{description:\"A random name prefix (e.g. Mr., Mrs., Dr.)\",generator:a.name.prefix},$randomNameSuffix:{description:\"A random name suffix (e.g. Jr., MD, PhD)\",generator:a.name.suffix},$randomJobDescriptor:{description:\"A random job descriptor (e.g., senior, chief, corporate, etc.)\",generator:a.name.jobDescriptor},$randomJobArea:{description:\"A random job area (e.g. branding, functionality, usability)\",generator:a.name.jobArea},$randomJobType:{description:\"A random job type (e.g. supervisor, manager, coordinator, etc.)\",generator:a.name.jobType},$randomUUID:{description:\"A random 36-character UUID\",generator:a.datatype.uuid},$randomBoolean:{description:\"A random boolean value (true/false)\",generator:a.datatype.boolean},$randomWord:{description:\"A random word\",generator:a.random.word},$randomAlphaNumeric:{description:\"A random alpha-numeric character\",generator:a.random.alphaNumeric},$randomFileName:{description:\"A random file name (includes uncommon extensions)\",generator:a.system.fileName},$randomCommonFileName:{description:\"A random file name\",generator:a.system.commonFileName},$randomMimeType:{description:\"A random MIME type\",generator:a.system.mimeType},$randomCommonFileType:{description:\"A random, common file type (e.g., video, text, image, etc.)\",generator:a.system.commonFileType},$randomCommonFileExt:{description:\"A random, common file extension (.doc, .jpg, etc.)\",generator:a.system.commonFileExt},$randomFileType:{description:\"A random file type (includes uncommon file types)\",generator:a.system.fileType},$randomFileExt:{description:\"A random file extension (includes uncommon extensions)\",generator:a.system.fileExt},$randomSemver:{description:\"A random semantic version number\",generator:a.system.semver}};t.exports=s},{\"@faker-js/faker/locale/en\":178,uuid:\"uuid\"}],461:[function(e,t,n){var a,r,i=e(\"../util\").lodash,o=e(\"./dynamic-variables\");a=function(e){this.value=i.isString(e)?e:i.isFunction(e.toString)&&e.toString()||\"\",this.substitutions=0,this.replacements=0},i.assign(a.prototype,{replace(e,t){var n=0;return this.value=this.value.replace(e,i.isFunction(t)?function(){return n+=1,t.apply(this,arguments)}:function(){return n+=1,t}),this.replacements=n,n&&(this.substitutions+=1),this},toString(){return this.value},valueOf(){return this.value}}),r=function(e,t){t&&e.push(t),this.variables=e},i.assign(r.prototype,{find(e){var t,n,a,r,o=this.variables;for(a=0,r=o.length;a<r;a++)if((t=o[a])&&i.isObject(t))if(\"VariableList\"===t.constructor._postman_propertyName){if((n=t.oneNormalizedVariable(e))&&!n.disabled)return n}else if(i.has(t,e))return t[e]},parse(e){e=new a(e);var t=r.replacer(this);do{e=e.replace(r.REGEX_EXTRACT_VARS,t)}while(e.replacements&&e.substitutions<r.VARS_SUBREPLACE_LIMIT);return e}}),i.assign(r,{REGEX_EXTRACT_VARS:/{{([^{}]*?)}}/g,VARS_SUBREPLACE_LIMIT:19,NATIVETYPES:{string:!0,number:!0,boolean:!0},DEFAULT_VARS:{},box:function(e,t){return e instanceof r?e:new r(e,t)},isInstance:function(e){return e instanceof r},replacer:function(e){return function(t,n){var a=e.find(n);return a&&i.isFunction(a)&&(a=a()),a&&i.isFunction(a.toString)&&(a=a.toString()),r.NATIVETYPES[typeof a]?a:t}}}),i.forOwn(o,(function(e,t){r.DEFAULT_VARS[t]=e.generator})),t.exports={SuperString:a,Substitutor:r}},{\"../util\":464,\"./dynamic-variables\":460}],462:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"../collection/property-list\").PropertyList,o=e(\"../collection/url\").Url,s=e(\"./url-match-pattern\").UrlMatchPattern,c=s.MATCH_ALL_URLS;r.inherit(a=function(e,t){a.super_.call(this,s,e,t)},i),r.assign(a.prototype,{_postman_proprtyIsSerialisedAsPlural:!0,test:function(e){var t,n,a;return n=this.find((function(e){return e.pattern===c})),!!r.isObject(n)||(t=new o(e),a=this.find((function(e){var n=e._matchPatternObject;return!r.isEmpty(n)&&(e.testProtocol(t.protocol)&&e.testHost(t.getHost())&&e.testPort(t.port,t.protocol)&&e.testPath(t.getPath()))})),Boolean(a))}}),r.assign(a,{_postman_propertyName:\"UrlMatchPatternList\"}),t.exports={UrlMatchPatternList:a}},{\"../collection/property-list\":443,\"../collection/url\":453,\"../util\":464,\"./url-match-pattern\":463}],463:[function(e,t,n){var a,r=e(\"../util\").lodash,i=e(\"../collection/property\").Property,o=e(\"../collection/url\").Url,s=\"undefined\",c=\"*\",u=\"<all_urls>\",l=[\"http\",\"https\",\"file\",\"ftp\"],p=l.join(\"|\"),d={ftp:\"21\",http:\"80\",https:\"443\"},f={escapeMatcher:/[.+^${}()|[\\]\\\\]/g,escapeMatchReplacement:\"\\\\$&\",questionmarkMatcher:/\\?/g,questionmarkReplacment:\".\",starMatcher:\"*\",starReplacement:\".*\",patternSplit:\"^((\"+p+\"|\\\\*)(\\\\+(\"+p+\"))*)://(\\\\*|\\\\*\\\\.[^*/:]+|[^*/:]+)(:\\\\*|:\\\\d+)?(/.*)$\"};r.inherit(a=function e(t){r.isString(t)&&(t={pattern:t}),e.super_.apply(this,arguments),r.assign(this,{pattern:u}),this.update(t)},i),r.assign(a.prototype,{update(e){r.has(e,\"pattern\")&&r.isString(e.pattern)&&!r.isEmpty(e.pattern)&&(this.pattern=e.pattern),this._matchPatternObject=this.createMatchPattern()},createMatchPattern(){var e=this.pattern.match(f.patternSplit);if(e)return{protocols:r.uniq(e[1].split(\"+\")),host:e[5],port:e[6]&&e[6].substr(1),path:this.globPatternToRegexp(e[7])}},globPatternToRegexp:e=>(e=(e=(e=e.replace(f.escapeMatcher,f.escapeMatchReplacement)).replace(f.questionmarkMatcher,f.questionmarkReplacment)).replace(f.starMatcher,f.starReplacement),new RegExp(\"^\"+e+\"$\")),testProtocol(e){var t=this._matchPatternObject;return r.includes(l,e)&&(r.includes(t.protocols,c)||r.includes(t.protocols,e))},getProtocols(){return r.get(this,\"_matchPatternObject.protocols\")||[]},testHost(e){var t=this._matchPatternObject;return this.matchAnyHost(t)||this.matchAbsoluteHostPattern(t,e)||this.matchSuffixHostPattern(t,e)},matchAnyHost:e=>e.host===c,matchSuffixHostPattern(e,t){var n=e.host.substr(2);return e.host[0]===c&&(t===n||t.endsWith(\".\"+n))},matchAbsoluteHostPattern:(e,t)=>e.host===t,testPort(e,t){var n=this._matchPatternObject.port,a=t&&d[t];return typeof e===s&&typeof n===s||(e&&\"string\"!=typeof e&&(e=String(e)),!e&&(e=a),!n&&(n=a),n===c||n===e)},testPath(e){var t=this._matchPatternObject;return!r.isEmpty(e.match(t.path))},test(e){if(this.pattern===u)return!0;if(r.isEmpty(this._matchPatternObject))return!1;const t=new o(e);return this.testProtocol(t.protocol)&&this.testHost(t.getHost())&&this.testPort(t.port,t.protocol)&&this.testPath(t.getPath())},toString(){return String(this.pattern)},toJSON(){return{pattern:this.toString()}}}),r.assign(a,{_postman_propertyName:\"UrlMatchPattern\",PROTOCOL_DELIMITER:\"+\",MATCH_ALL_URLS:u}),t.exports={UrlMatchPattern:a}},{\"../collection/property\":444,\"../collection/url\":453,\"../util\":464}],464:[function(e,t,n){(function(n){(function(){var a,r=e(\"lodash\").noConflict(),i=e(\"iconv-lite\"),o=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";r.mixin({inherit:(e,t)=>(Object.defineProperty(e,\"super_\",{value:r.isFunction(t)?t:r.noop,configurable:!1,enumerable:!1,writable:!1}),e.prototype=Object.create(r.isFunction(t)?t.prototype:t,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),e),args:e=>Array.prototype.slice.call(e),ensureEncoded(e){try{e=decodeURIComponent(e)}catch(t){}try{return encodeURIComponent(e)}catch(n){return e}},assignLocked:(e,t,n)=>(Object.defineProperty(e,t,{value:n,configurable:!1,enumerable:!1,writable:!1}),e),assignHidden:(e,t,n)=>(Object.defineProperty(e,t,{value:n,configurable:!0,enumerable:!1,writable:!0}),e),createDefined:(e,t,n,a)=>r.has(e,t)?new n(e[t]):a,mergeDefined(e,t){var n;for(n in t)r.has(t,n)&&!r.isUndefined(t[n])&&(e[n]=t[n]);return e},getOwn:(e,t,n)=>r.has(e,t)?e[t]:n,cloneElement:e=>r.cloneDeepWith(e,(function(e){if(e&&r.isFunction(e.toJSON))return e.toJSON()})),inSuperChain:(e,t,n)=>!!e&&(e[t]===n||r.inSuperChain(e.super_,t,n)),randomString(e){e=e||6;var t,n=[];for(t=0;t<e;t++)n[t]=o[62*Math.random()|0];return n.join(\"\")},choose(){for(var e=0,t=arguments.length;e<t;e++)if(!r.isEmpty(arguments[e]))return arguments[e]}}),a={lodash:r,btoa:\"function\"!=typeof btoa&&\"function\"==typeof n?function(e){return n.from(e).toString(\"base64\")}:function(e){return btoa(e)},arrayBufferToString:function(e){var t,n,a=\"\",r=new Uint8Array(e);for(t=0,n=r.length;t<n;t++)a+=String.fromCharCode(r[t]);return a},bufferOrArrayBufferToString:function(e,t){return!e||r.isString(e)?e||\"\":n.isBuffer(e)?i.encodingExists(t)?i.decode(e,t):e.toString():a.arrayBufferToString(e)},bufferOrArrayBufferToBase64:function(e){if(!e)return\"\";if(r.isString(e))return a.btoa(e);var t=e.toString(\"base64\")||\"\";return\"[object ArrayBuffer]\"===t?a.btoa(a.arrayBufferToString(e)):t},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)}},t.exports=a}).call(this)}).call(this,e(\"buffer\").Buffer)},{buffer:\"buffer\",\"iconv-lite\":484,lodash:\"lodash\"}],465:[function(e,t,n){\"use strict\";var a=e(\"safer-buffer\").Buffer;n._dbcs=l;for(var r=-1,i=-2,o=-10,s=-1e3,c=new Array(256),u=0;u<256;u++)c[u]=r;function l(e,t){if(this.encodingName=e.encodingName,!e)throw new Error(\"DBCS codec is called without the data.\");if(!e.table)throw new Error(\"Encoding '\"+this.encodingName+\"' has no data.\");var n=e.table();this.decodeTables=[],this.decodeTables[0]=c.slice(0),this.decodeTableSeq=[];for(var a=0;a<n.length;a++)this._addDecodeChunk(n[a]);if(\"function\"==typeof e.gb18030){this.gb18030=e.gb18030();var o=this.decodeTables.length;this.decodeTables.push(c.slice(0));var u=this.decodeTables.length;this.decodeTables.push(c.slice(0));var l=this.decodeTables[0];for(a=129;a<=254;a++)for(var p=this.decodeTables[s-l[a]],d=48;d<=57;d++){if(p[d]===r)p[d]=s-o;else if(p[d]>s)throw new Error(\"gb18030 decode tables conflict at byte 2\");for(var f=this.decodeTables[s-p[d]],h=129;h<=254;h++){if(f[h]===r)f[h]=s-u;else{if(f[h]===s-u)continue;if(f[h]>s)throw new Error(\"gb18030 decode tables conflict at byte 3\")}for(var m=this.decodeTables[s-f[h]],g=48;g<=57;g++)m[g]===r&&(m[g]=i)}}}this.defaultCharUnicode=t.defaultCharUnicode,this.encodeTable=[],this.encodeTableSeq=[];var y={};if(e.encodeSkipVals)for(a=0;a<e.encodeSkipVals.length;a++){var v=e.encodeSkipVals[a];if(\"number\"==typeof v)y[v]=!0;else for(d=v.from;d<=v.to;d++)y[d]=!0}if(this._fillEncodeTable(0,0,y),e.encodeAdd)for(var b in e.encodeAdd)Object.prototype.hasOwnProperty.call(e.encodeAdd,b)&&this._setEncodeChar(b.charCodeAt(0),e.encodeAdd[b]);this.defCharSB=this.encodeTable[0][t.defaultCharSingleByte.charCodeAt(0)],this.defCharSB===r&&(this.defCharSB=this.encodeTable[0][\"?\"]),this.defCharSB===r&&(this.defCharSB=\"?\".charCodeAt(0))}function p(e,t){this.leadSurrogate=-1,this.seqObj=void 0,this.encodeTable=t.encodeTable,this.encodeTableSeq=t.encodeTableSeq,this.defaultCharSingleByte=t.defCharSB,this.gb18030=t.gb18030}function d(e,t){this.nodeIdx=0,this.prevBytes=[],this.decodeTables=t.decodeTables,this.decodeTableSeq=t.decodeTableSeq,this.defaultCharUnicode=t.defaultCharUnicode,this.gb18030=t.gb18030}function f(e,t){if(e[0]>t)return-1;for(var n=0,a=e.length;n<a-1;){var r=n+(a-n+1>>1);e[r]<=t?n=r:a=r}return n}l.prototype.encoder=p,l.prototype.decoder=d,l.prototype._getDecodeTrieNode=function(e){for(var t=[];e>0;e>>>=8)t.push(255&e);0==t.length&&t.push(0);for(var n=this.decodeTables[0],a=t.length-1;a>0;a--){var i=n[t[a]];if(i==r)n[t[a]]=s-this.decodeTables.length,this.decodeTables.push(n=c.slice(0));else{if(!(i<=s))throw new Error(\"Overwrite byte in \"+this.encodingName+\", addr: \"+e.toString(16));n=this.decodeTables[s-i]}}return n},l.prototype._addDecodeChunk=function(e){var t=parseInt(e[0],16),n=this._getDecodeTrieNode(t);t&=255;for(var a=1;a<e.length;a++){var r=e[a];if(\"string\"==typeof r)for(var i=0;i<r.length;){var s=r.charCodeAt(i++);if(55296<=s&&s<56320){var c=r.charCodeAt(i++);if(!(56320<=c&&c<57344))throw new Error(\"Incorrect surrogate pair in \"+this.encodingName+\" at chunk \"+e[0]);n[t++]=65536+1024*(s-55296)+(c-56320)}else if(4080<s&&s<=4095){for(var u=4095-s+2,l=[],p=0;p<u;p++)l.push(r.charCodeAt(i++));n[t++]=o-this.decodeTableSeq.length,this.decodeTableSeq.push(l)}else n[t++]=s}else{if(\"number\"!=typeof r)throw new Error(\"Incorrect type '\"+typeof r+\"' given in \"+this.encodingName+\" at chunk \"+e[0]);var d=n[t-1]+1;for(i=0;i<r;i++)n[t++]=d++}}if(t>255)throw new Error(\"Incorrect chunk in \"+this.encodingName+\" at addr \"+e[0]+\": too long\"+t)},l.prototype._getEncodeBucket=function(e){var t=e>>8;return void 0===this.encodeTable[t]&&(this.encodeTable[t]=c.slice(0)),this.encodeTable[t]},l.prototype._setEncodeChar=function(e,t){var n=this._getEncodeBucket(e),a=255&e;n[a]<=o?this.encodeTableSeq[o-n[a]][-1]=t:n[a]==r&&(n[a]=t)},l.prototype._setEncodeSequence=function(e,t){var n,a=e[0],i=this._getEncodeBucket(a),s=255&a;i[s]<=o?n=this.encodeTableSeq[o-i[s]]:(n={},i[s]!==r&&(n[-1]=i[s]),i[s]=o-this.encodeTableSeq.length,this.encodeTableSeq.push(n));for(var c=1;c<e.length-1;c++){var u=n[a];\"object\"==typeof u?n=u:(n=n[a]={},void 0!==u&&(n[-1]=u))}n[a=e[e.length-1]]=t},l.prototype._fillEncodeTable=function(e,t,n){for(var a=this.decodeTables[e],r=!1,i={},c=0;c<256;c++){var u=a[c],l=t+c;if(!n[l])if(u>=0)this._setEncodeChar(u,l),r=!0;else if(u<=s){var p=s-u;if(!i[p]){var d=l<<8>>>0;this._fillEncodeTable(p,d,n)?r=!0:i[p]=!0}}else u<=o&&(this._setEncodeSequence(this.decodeTableSeq[o-u],l),r=!0)}return r},p.prototype.write=function(e){for(var t=a.alloc(e.length*(this.gb18030?4:3)),n=this.leadSurrogate,i=this.seqObj,s=-1,c=0,u=0;;){if(-1===s){if(c==e.length)break;var l=e.charCodeAt(c++)}else{l=s;s=-1}if(55296<=l&&l<57344)if(l<56320){if(-1===n){n=l;continue}n=l,l=r}else-1!==n?(l=65536+1024*(n-55296)+(l-56320),n=-1):l=r;else-1!==n&&(s=l,l=r,n=-1);var p=r;if(void 0!==i&&l!=r){var d=i[l];if(\"object\"==typeof d){i=d;continue}\"number\"==typeof d?p=d:null==d&&void 0!==(d=i[-1])&&(p=d,s=l),i=void 0}else if(l>=0){var h=this.encodeTable[l>>8];if(void 0!==h&&(p=h[255&l]),p<=o){i=this.encodeTableSeq[o-p];continue}if(p==r&&this.gb18030){var m=f(this.gb18030.uChars,l);if(-1!=m){p=this.gb18030.gbChars[m]+(l-this.gb18030.uChars[m]);t[u++]=129+Math.floor(p/12600),p%=12600,t[u++]=48+Math.floor(p/1260),p%=1260,t[u++]=129+Math.floor(p/10),p%=10,t[u++]=48+p;continue}}}p===r&&(p=this.defaultCharSingleByte),p<256?t[u++]=p:p<65536?(t[u++]=p>>8,t[u++]=255&p):p<16777216?(t[u++]=p>>16,t[u++]=p>>8&255,t[u++]=255&p):(t[u++]=p>>>24,t[u++]=p>>>16&255,t[u++]=p>>>8&255,t[u++]=255&p)}return this.seqObj=i,this.leadSurrogate=n,t.slice(0,u)},p.prototype.end=function(){if(-1!==this.leadSurrogate||void 0!==this.seqObj){var e=a.alloc(10),t=0;if(this.seqObj){var n=this.seqObj[-1];void 0!==n&&(n<256?e[t++]=n:(e[t++]=n>>8,e[t++]=255&n)),this.seqObj=void 0}return-1!==this.leadSurrogate&&(e[t++]=this.defaultCharSingleByte,this.leadSurrogate=-1),e.slice(0,t)}},p.prototype.findIdx=f,d.prototype.write=function(e){for(var t=a.alloc(2*e.length),n=this.nodeIdx,c=this.prevBytes,u=this.prevBytes.length,l=-this.prevBytes.length,p=0,d=0;p<e.length;p++){var h,m=p>=0?e[p]:c[p+u];if((h=this.decodeTables[n][m])>=0);else if(h===r)h=this.defaultCharUnicode.charCodeAt(0),p=l;else if(h===i){if(p>=3)var g=12600*(e[p-3]-129)+1260*(e[p-2]-48)+10*(e[p-1]-129)+(m-48);else g=12600*(c[p-3+u]-129)+1260*((p-2>=0?e[p-2]:c[p-2+u])-48)+10*((p-1>=0?e[p-1]:c[p-1+u])-129)+(m-48);var y=f(this.gb18030.gbChars,g);h=this.gb18030.uChars[y]+g-this.gb18030.gbChars[y]}else{if(h<=s){n=s-h;continue}if(!(h<=o))throw new Error(\"iconv-lite internal error: invalid decoding table value \"+h+\" at \"+n+\"/\"+m);for(var v=this.decodeTableSeq[o-h],b=0;b<v.length-1;b++)h=v[b],t[d++]=255&h,t[d++]=h>>8;h=v[v.length-1]}if(h>=65536){var x=55296|(h-=65536)>>10;t[d++]=255&x,t[d++]=x>>8,h=56320|1023&h}t[d++]=255&h,t[d++]=h>>8,n=0,l=p+1}return this.nodeIdx=n,this.prevBytes=l>=0?Array.prototype.slice.call(e,l):c.slice(l+u).concat(Array.prototype.slice.call(e)),t.slice(0,d).toString(\"ucs2\")},d.prototype.end=function(){for(var e=\"\";this.prevBytes.length>0;){e+=this.defaultCharUnicode;var t=this.prevBytes.slice(1);this.prevBytes=[],this.nodeIdx=0,t.length>0&&(e+=this.write(t))}return this.prevBytes=[],this.nodeIdx=0,e}},{\"safer-buffer\":512}],466:[function(e,t,n){\"use strict\";t.exports={shiftjis:{type:\"_dbcs\",table:function(){return e(\"./tables/shiftjis.json\")},encodeAdd:{\"¥\":92,\"‾\":126},encodeSkipVals:[{from:60736,to:63808}]},csshiftjis:\"shiftjis\",mskanji:\"shiftjis\",sjis:\"shiftjis\",windows31j:\"shiftjis\",ms31j:\"shiftjis\",xsjis:\"shiftjis\",windows932:\"shiftjis\",ms932:\"shiftjis\",932:\"shiftjis\",cp932:\"shiftjis\",eucjp:{type:\"_dbcs\",table:function(){return e(\"./tables/eucjp.json\")},encodeAdd:{\"¥\":92,\"‾\":126}},gb2312:\"cp936\",gb231280:\"cp936\",gb23121980:\"cp936\",csgb2312:\"cp936\",csiso58gb231280:\"cp936\",euccn:\"cp936\",windows936:\"cp936\",ms936:\"cp936\",936:\"cp936\",cp936:{type:\"_dbcs\",table:function(){return e(\"./tables/cp936.json\")}},gbk:{type:\"_dbcs\",table:function(){return e(\"./tables/cp936.json\").concat(e(\"./tables/gbk-added.json\"))}},xgbk:\"gbk\",isoir58:\"gbk\",gb18030:{type:\"_dbcs\",table:function(){return e(\"./tables/cp936.json\").concat(e(\"./tables/gbk-added.json\"))},gb18030:function(){return e(\"./tables/gb18030-ranges.json\")},encodeSkipVals:[128],encodeAdd:{\"€\":41699}},chinese:\"gb18030\",windows949:\"cp949\",ms949:\"cp949\",949:\"cp949\",cp949:{type:\"_dbcs\",table:function(){return e(\"./tables/cp949.json\")}},cseuckr:\"cp949\",csksc56011987:\"cp949\",euckr:\"cp949\",isoir149:\"cp949\",korean:\"cp949\",ksc56011987:\"cp949\",ksc56011989:\"cp949\",ksc5601:\"cp949\",windows950:\"cp950\",ms950:\"cp950\",950:\"cp950\",cp950:{type:\"_dbcs\",table:function(){return e(\"./tables/cp950.json\")}},big5:\"big5hkscs\",big5hkscs:{type:\"_dbcs\",table:function(){return e(\"./tables/cp950.json\").concat(e(\"./tables/big5-added.json\"))},encodeSkipVals:[36457,36463,36478,36523,36532,36557,36560,36695,36713,36718,36811,36862,36973,36986,37060,37084,37105,37311,37551,37552,37553,37554,37585,37959,38090,38361,38652,39285,39798,39800,39803,39878,39902,39916,39926,40002,40019,40034,40040,40043,40055,40124,40125,40144,40279,40282,40388,40431,40443,40617,40687,40701,40800,40907,41079,41180,41183,36812,37576,38468,38637,41636,41637,41639,41638,41676,41678]},cnbig5:\"big5hkscs\",csbig5:\"big5hkscs\",xxbig5:\"big5hkscs\"}},{\"./tables/big5-added.json\":472,\"./tables/cp936.json\":473,\"./tables/cp949.json\":474,\"./tables/cp950.json\":475,\"./tables/eucjp.json\":476,\"./tables/gb18030-ranges.json\":477,\"./tables/gbk-added.json\":478,\"./tables/shiftjis.json\":479}],467:[function(e,t,n){\"use strict\";for(var a=[e(\"./internal\"),e(\"./utf32\"),e(\"./utf16\"),e(\"./utf7\"),e(\"./sbcs-codec\"),e(\"./sbcs-data\"),e(\"./sbcs-data-generated\"),e(\"./dbcs-codec\"),e(\"./dbcs-data\")],r=0;r<a.length;r++){t=a[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(n[i]=t[i])}},{\"./dbcs-codec\":465,\"./dbcs-data\":466,\"./internal\":468,\"./sbcs-codec\":469,\"./sbcs-data\":471,\"./sbcs-data-generated\":470,\"./utf16\":480,\"./utf32\":481,\"./utf7\":482}],468:[function(e,t,n){\"use strict\";var a=e(\"safer-buffer\").Buffer;function r(e,t){this.enc=e.encodingName,this.bomAware=e.bomAware,\"base64\"===this.enc?this.encoder=c:\"cesu8\"===this.enc&&(this.enc=\"utf8\",this.encoder=u,\"💩\"!==a.from(\"eda0bdedb2a9\",\"hex\").toString()&&(this.decoder=l,this.defaultCharUnicode=t.defaultCharUnicode))}t.exports={utf8:{type:\"_internal\",bomAware:!0},cesu8:{type:\"_internal\",bomAware:!0},unicode11utf8:\"utf8\",ucs2:{type:\"_internal\",bomAware:!0},utf16le:\"ucs2\",binary:{type:\"_internal\"},base64:{type:\"_internal\"},hex:{type:\"_internal\"},_internal:r},r.prototype.encoder=s,r.prototype.decoder=o;var i=e(\"string_decoder\").StringDecoder;function o(e,t){this.decoder=new i(t.enc)}function s(e,t){this.enc=t.enc}function c(e,t){this.prevStr=\"\"}function u(e,t){}function l(e,t){this.acc=0,this.contBytes=0,this.accBytes=0,this.defaultCharUnicode=t.defaultCharUnicode}i.prototype.end||(i.prototype.end=function(){}),o.prototype.write=function(e){return a.isBuffer(e)||(e=a.from(e)),this.decoder.write(e)},o.prototype.end=function(){return this.decoder.end()},s.prototype.write=function(e){return a.from(e,this.enc)},s.prototype.end=function(){},c.prototype.write=function(e){var t=(e=this.prevStr+e).length-e.length%4;return this.prevStr=e.slice(t),e=e.slice(0,t),a.from(e,\"base64\")},c.prototype.end=function(){return a.from(this.prevStr,\"base64\")},u.prototype.write=function(e){for(var t=a.alloc(3*e.length),n=0,r=0;r<e.length;r++){var i=e.charCodeAt(r);i<128?t[n++]=i:i<2048?(t[n++]=192+(i>>>6),t[n++]=128+(63&i)):(t[n++]=224+(i>>>12),t[n++]=128+(i>>>6&63),t[n++]=128+(63&i))}return t.slice(0,n)},u.prototype.end=function(){},l.prototype.write=function(e){for(var t=this.acc,n=this.contBytes,a=this.accBytes,r=\"\",i=0;i<e.length;i++){var o=e[i];128!=(192&o)?(n>0&&(r+=this.defaultCharUnicode,n=0),o<128?r+=String.fromCharCode(o):o<224?(t=31&o,n=1,a=1):o<240?(t=15&o,n=2,a=1):r+=this.defaultCharUnicode):n>0?(t=t<<6|63&o,a++,0===--n&&(r+=2===a&&t<128&&t>0||3===a&&t<2048?this.defaultCharUnicode:String.fromCharCode(t))):r+=this.defaultCharUnicode}return this.acc=t,this.contBytes=n,this.accBytes=a,r},l.prototype.end=function(){var e=0;return this.contBytes>0&&(e+=this.defaultCharUnicode),e}},{\"safer-buffer\":512,string_decoder:\"string_decoder\"}],469:[function(e,t,n){\"use strict\";var a=e(\"safer-buffer\").Buffer;function r(e,t){if(!e)throw new Error(\"SBCS codec is called without the data.\");if(!e.chars||128!==e.chars.length&&256!==e.chars.length)throw new Error(\"Encoding '\"+e.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");if(128===e.chars.length){for(var n=\"\",r=0;r<128;r++)n+=String.fromCharCode(r);e.chars=n+e.chars}this.decodeBuf=a.from(e.chars,\"ucs2\");var i=a.alloc(65536,t.defaultCharSingleByte.charCodeAt(0));for(r=0;r<e.chars.length;r++)i[e.chars.charCodeAt(r)]=r;this.encodeBuf=i}function i(e,t){this.encodeBuf=t.encodeBuf}function o(e,t){this.decodeBuf=t.decodeBuf}n._sbcs=r,r.prototype.encoder=i,r.prototype.decoder=o,i.prototype.write=function(e){for(var t=a.alloc(e.length),n=0;n<e.length;n++)t[n]=this.encodeBuf[e.charCodeAt(n)];return t},i.prototype.end=function(){},o.prototype.write=function(e){for(var t=this.decodeBuf,n=a.alloc(2*e.length),r=0,i=0,o=0;o<e.length;o++)r=2*e[o],n[i=2*o]=t[r],n[i+1]=t[r+1];return n.toString(\"ucs2\")},o.prototype.end=function(){}},{\"safer-buffer\":512}],470:[function(e,t,n){\"use strict\";t.exports={437:\"cp437\",737:\"cp737\",775:\"cp775\",850:\"cp850\",852:\"cp852\",855:\"cp855\",856:\"cp856\",857:\"cp857\",858:\"cp858\",860:\"cp860\",861:\"cp861\",862:\"cp862\",863:\"cp863\",864:\"cp864\",865:\"cp865\",866:\"cp866\",869:\"cp869\",874:\"windows874\",922:\"cp922\",1046:\"cp1046\",1124:\"cp1124\",1125:\"cp1125\",1129:\"cp1129\",1133:\"cp1133\",1161:\"cp1161\",1162:\"cp1162\",1163:\"cp1163\",1250:\"windows1250\",1251:\"windows1251\",1252:\"windows1252\",1253:\"windows1253\",1254:\"windows1254\",1255:\"windows1255\",1256:\"windows1256\",1257:\"windows1257\",1258:\"windows1258\",28591:\"iso88591\",28592:\"iso88592\",28593:\"iso88593\",28594:\"iso88594\",28595:\"iso88595\",28596:\"iso88596\",28597:\"iso88597\",28598:\"iso88598\",28599:\"iso88599\",28600:\"iso885910\",28601:\"iso885911\",28603:\"iso885913\",28604:\"iso885914\",28605:\"iso885915\",28606:\"iso885916\",windows874:{type:\"_sbcs\",chars:\"€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"},win874:\"windows874\",cp874:\"windows874\",windows1250:{type:\"_sbcs\",chars:\"€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"},win1250:\"windows1250\",cp1250:\"windows1250\",windows1251:{type:\"_sbcs\",chars:\"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"},win1251:\"windows1251\",cp1251:\"windows1251\",windows1252:{type:\"_sbcs\",chars:\"€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"},win1252:\"windows1252\",cp1252:\"windows1252\",windows1253:{type:\"_sbcs\",chars:\"€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"},win1253:\"windows1253\",cp1253:\"windows1253\",windows1254:{type:\"_sbcs\",chars:\"€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"},win1254:\"windows1254\",cp1254:\"windows1254\",windows1255:{type:\"_sbcs\",chars:\"€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"},win1255:\"windows1255\",cp1255:\"windows1255\",windows1256:{type:\"_sbcs\",chars:\"€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے\"},win1256:\"windows1256\",cp1256:\"windows1256\",windows1257:{type:\"_sbcs\",chars:\"€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙\"},win1257:\"windows1257\",cp1257:\"windows1257\",windows1258:{type:\"_sbcs\",chars:\"€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"},win1258:\"windows1258\",cp1258:\"windows1258\",iso88591:{type:\"_sbcs\",chars:\" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"},cp28591:\"iso88591\",iso88592:{type:\"_sbcs\",chars:\" Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"},cp28592:\"iso88592\",iso88593:{type:\"_sbcs\",chars:\" Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙\"},cp28593:\"iso88593\",iso88594:{type:\"_sbcs\",chars:\" ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙\"},cp28594:\"iso88594\",iso88595:{type:\"_sbcs\",chars:\" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ\"},cp28595:\"iso88595\",iso88596:{type:\"_sbcs\",chars:\" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������\"},cp28596:\"iso88596\",iso88597:{type:\"_sbcs\",chars:\" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"},cp28597:\"iso88597\",iso88598:{type:\"_sbcs\",chars:\" �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"},cp28598:\"iso88598\",iso88599:{type:\"_sbcs\",chars:\" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"},cp28599:\"iso88599\",iso885910:{type:\"_sbcs\",chars:\" ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ\"},cp28600:\"iso885910\",iso885911:{type:\"_sbcs\",chars:\" กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"},cp28601:\"iso885911\",iso885913:{type:\"_sbcs\",chars:\" ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’\"},cp28603:\"iso885913\",iso885914:{type:\"_sbcs\",chars:\" Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ\"},cp28604:\"iso885914\",iso885915:{type:\"_sbcs\",chars:\" ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"},cp28605:\"iso885915\",iso885916:{type:\"_sbcs\",chars:\" ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ\"},cp28606:\"iso885916\",cp437:{type:\"_sbcs\",chars:\"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"},ibm437:\"cp437\",csibm437:\"cp437\",cp737:{type:\"_sbcs\",chars:\"ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ \"},ibm737:\"cp737\",csibm737:\"cp737\",cp775:{type:\"_sbcs\",chars:\"ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ \"},ibm775:\"cp775\",csibm775:\"cp775\",cp850:{type:\"_sbcs\",chars:\"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"},ibm850:\"cp850\",csibm850:\"cp850\",cp852:{type:\"_sbcs\",chars:\"ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ \"},ibm852:\"cp852\",csibm852:\"cp852\",cp855:{type:\"_sbcs\",chars:\"ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ \"},ibm855:\"cp855\",csibm855:\"cp855\",cp856:{type:\"_sbcs\",chars:\"אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ \"},ibm856:\"cp856\",csibm856:\"cp856\",cp857:{type:\"_sbcs\",chars:\"ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ \"},ibm857:\"cp857\",csibm857:\"cp857\",cp858:{type:\"_sbcs\",chars:\"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"},ibm858:\"cp858\",csibm858:\"cp858\",cp860:{type:\"_sbcs\",chars:\"ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"},ibm860:\"cp860\",csibm860:\"cp860\",cp861:{type:\"_sbcs\",chars:\"ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"},ibm861:\"cp861\",csibm861:\"cp861\",cp862:{type:\"_sbcs\",chars:\"אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"},ibm862:\"cp862\",csibm862:\"cp862\",cp863:{type:\"_sbcs\",chars:\"ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"},ibm863:\"cp863\",csibm863:\"cp863\",cp864:{type:\"_sbcs\",chars:\"\\0\u0001\u0002\u0003\u0004\u0005\u0006\u0007\\b\\t\\n\\v\\f\\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\\\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�\"},ibm864:\"cp864\",csibm864:\"cp864\",cp865:{type:\"_sbcs\",chars:\"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"},ibm865:\"cp865\",csibm865:\"cp865\",cp866:{type:\"_sbcs\",chars:\"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ \"},ibm866:\"cp866\",csibm866:\"cp866\",cp869:{type:\"_sbcs\",chars:\"������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ \"},ibm869:\"cp869\",csibm869:\"cp869\",cp922:{type:\"_sbcs\",chars:\" ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ\"},ibm922:\"cp922\",csibm922:\"cp922\",cp1046:{type:\"_sbcs\",chars:\"ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�\"},ibm1046:\"cp1046\",csibm1046:\"cp1046\",cp1124:{type:\"_sbcs\",chars:\" ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ\"},ibm1124:\"cp1124\",csibm1124:\"cp1124\",cp1125:{type:\"_sbcs\",chars:\"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ \"},ibm1125:\"cp1125\",csibm1125:\"cp1125\",cp1129:{type:\"_sbcs\",chars:\" ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"},ibm1129:\"cp1129\",csibm1129:\"cp1129\",cp1133:{type:\"_sbcs\",chars:\" ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�\"},ibm1133:\"cp1133\",csibm1133:\"cp1133\",cp1161:{type:\"_sbcs\",chars:\"��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ \"},ibm1161:\"cp1161\",csibm1161:\"cp1161\",cp1162:{type:\"_sbcs\",chars:\"€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"},ibm1162:\"cp1162\",csibm1162:\"cp1162\",cp1163:{type:\"_sbcs\",chars:\" ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"},ibm1163:\"cp1163\",csibm1163:\"cp1163\",maccroatian:{type:\"_sbcs\",chars:\"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ\"},maccyrillic:{type:\"_sbcs\",chars:\"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"},macgreek:{type:\"_sbcs\",chars:\"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�\"},maciceland:{type:\"_sbcs\",chars:\"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"},macroman:{type:\"_sbcs\",chars:\"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"},macromania:{type:\"_sbcs\",chars:\"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"},macthai:{type:\"_sbcs\",chars:\"«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\\ufeff​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����\"},macturkish:{type:\"_sbcs\",chars:\"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ\"},macukraine:{type:\"_sbcs\",chars:\"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"},koi8r:{type:\"_sbcs\",chars:\"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"},koi8u:{type:\"_sbcs\",chars:\"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"},koi8ru:{type:\"_sbcs\",chars:\"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"},koi8t:{type:\"_sbcs\",chars:\"қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"},armscii8:{type:\"_sbcs\",chars:\" �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�\"},rk1048:{type:\"_sbcs\",chars:\"ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"},tcvn:{type:\"_sbcs\",chars:\"\\0ÚỤ\u0003ỪỬỮ\u0007\\b\\t\\n\\v\\f\\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ\"},georgianacademy:{type:\"_sbcs\",chars:\"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"},georgianps:{type:\"_sbcs\",chars:\"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"},pt154:{type:\"_sbcs\",chars:\"ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"},viscii:{type:\"_sbcs\",chars:\"\\0\u0001Ẳ\u0003\u0004ẴẪ\u0007\\b\\t\\n\\v\\f\\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ\"},iso646cn:{type:\"_sbcs\",chars:\"\\0\u0001\u0002\u0003\u0004\u0005\u0006\u0007\\b\\t\\n\\v\\f\\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\\\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"},iso646jp:{type:\"_sbcs\",chars:\"\\0\u0001\u0002\u0003\u0004\u0005\u0006\u0007\\b\\t\\n\\v\\f\\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"},hproman8:{type:\"_sbcs\",chars:\" ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�\"},macintosh:{type:\"_sbcs\",chars:\"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"},ascii:{type:\"_sbcs\",chars:\"��������������������������������������������������������������������������������������������������������������������������������\"},tis620:{type:\"_sbcs\",chars:\"���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"}}},{}],471:[function(e,t,n){\"use strict\";t.exports={10029:\"maccenteuro\",maccenteuro:{type:\"_sbcs\",chars:\"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ\"},808:\"cp808\",ibm808:\"cp808\",cp808:{type:\"_sbcs\",chars:\"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ \"},mik:{type:\"_sbcs\",chars:\"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"},cp720:{type:\"_sbcs\",chars:\"éâàçêëèïîّْô¤ـûùءآأؤ£إئابةتثجحخدذرزسشص«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ضطظعغفµقكلمنهوىي≡ًٌٍَُِ≈°∙·√ⁿ²■ \"},ascii8bit:\"ascii\",usascii:\"ascii\",ansix34:\"ascii\",ansix341968:\"ascii\",ansix341986:\"ascii\",csascii:\"ascii\",cp367:\"ascii\",ibm367:\"ascii\",isoir6:\"ascii\",iso646us:\"ascii\",iso646irv:\"ascii\",us:\"ascii\",latin1:\"iso88591\",latin2:\"iso88592\",latin3:\"iso88593\",latin4:\"iso88594\",latin5:\"iso88599\",latin6:\"iso885910\",latin7:\"iso885913\",latin8:\"iso885914\",latin9:\"iso885915\",latin10:\"iso885916\",csisolatin1:\"iso88591\",csisolatin2:\"iso88592\",csisolatin3:\"iso88593\",csisolatin4:\"iso88594\",csisolatincyrillic:\"iso88595\",csisolatinarabic:\"iso88596\",csisolatingreek:\"iso88597\",csisolatinhebrew:\"iso88598\",csisolatin5:\"iso88599\",csisolatin6:\"iso885910\",l1:\"iso88591\",l2:\"iso88592\",l3:\"iso88593\",l4:\"iso88594\",l5:\"iso88599\",l6:\"iso885910\",l7:\"iso885913\",l8:\"iso885914\",l9:\"iso885915\",l10:\"iso885916\",isoir14:\"iso646jp\",isoir57:\"iso646cn\",isoir100:\"iso88591\",isoir101:\"iso88592\",isoir109:\"iso88593\",isoir110:\"iso88594\",isoir144:\"iso88595\",isoir127:\"iso88596\",isoir126:\"iso88597\",isoir138:\"iso88598\",isoir148:\"iso88599\",isoir157:\"iso885910\",isoir166:\"tis620\",isoir179:\"iso885913\",isoir199:\"iso885914\",isoir203:\"iso885915\",isoir226:\"iso885916\",cp819:\"iso88591\",ibm819:\"iso88591\",cyrillic:\"iso88595\",arabic:\"iso88596\",arabic8:\"iso88596\",ecma114:\"iso88596\",asmo708:\"iso88596\",greek:\"iso88597\",greek8:\"iso88597\",ecma118:\"iso88597\",elot928:\"iso88597\",hebrew:\"iso88598\",hebrew8:\"iso88598\",turkish:\"iso88599\",turkish8:\"iso88599\",thai:\"iso885911\",thai8:\"iso885911\",celtic:\"iso885914\",celtic8:\"iso885914\",isoceltic:\"iso885914\",tis6200:\"tis620\",tis62025291:\"tis620\",tis62025330:\"tis620\",1e4: